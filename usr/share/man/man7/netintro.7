.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: netintro.7,v $ $Revision: 3.2.5.2 $ (DEC) $Date: 1993/10/05 16:43:15 $
.\" 
...\"
...\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
...\" ALL RIGHTS RESERVED
...\"
...\"
...\"
...\" Copyright (c) 1983, 1990 The Regents of the University of California.
...\" All rights reserved.
...\"
...\" Redistribution and use in source and binary forms are permitted provided
...\" that: (1) source distributions retain this entire copyright notice and
...\" comment, and (2) distributions including binaries display the following
...\" acknowledgement:  ``This product includes software developed by the
...\" University of California, Berkeley and its contributors'' in the
...\" documentation or other materials provided with the distribution and in
...\" all advertising materials mentioning features or use of this software.
...\" Neither the name of the University nor the names of its contributors may
...\" be used to endorse or promote products derived from this software without
...\" specific prior written permission.
...\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
...\" WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
...\" MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
...\"
...\" @(#)netintro.4	6.9 (Berkeley) 6/23/90
...\"
.TH netintro 7
.SH NAME
.PP
\*Lnetworking\*O \- Introduction to socket networking facilities
.SH SYNOPSIS
.PP
.sS
\*L#include <sys/socket.h>
.nL
#include <net/route.h>
.nL
#include <net/if.h>
.sE
.SH DESCRIPTION
.PP
.iX "netintro"
.iX "networking" "introduction to"
.iX "sockets"
.iX "introduction to networking"
This section is a general introduction to the networking facilities
available in the system.
Documentation in this part of Section
7 is broken up into three areas:
\*Lprotocol families\*O
(domains),
\*Lprotocols\*O,
and
\*Lnetwork interfaces\*O.
.PP
All network protocols are associated with a specific
\*Lprotocol family\*O.
A protocol family provides basic services to the protocol
implementation to allow it to function within a specific
network environment.  These services may include
packet fragmentation and reassembly, routing, addressing, and
basic transport.  A protocol family may support multiple
methods of addressing, though the current protocol implementations
do not.  A protocol family is normally comprised of a number
of protocols, one per
socket
type.  It is not required that a protocol family support
all socket types.  A protocol family may contain multiple
protocols supporting the same socket abstraction.
.PP
A protocol supports one of the socket abstractions detailed
in the reference page for the
\*Lsocket(\|)\*O
function.
A specific protocol may be accessed either by creating a
socket of the appropriate type and protocol family, or
by requesting the protocol explicitly when creating a socket.
Protocols normally accept only one type of address format,
usually determined by the addressing structure inherent in
the design of the protocol family and network architecture.
Certain semantics of the basic socket abstractions are
protocol specific.  All protocols are expected to support
the basic model for their particular socket type, but may,
in addition, provide nonstandard facilities or extensions
to a mechanism.  For example, a protocol supporting the
SOCK_STREAM
abstraction may allow more than one byte of out-of-band
data to be transmitted per out-of-band message.
.PP
A network interface is similar to a device interface.
Network interfaces comprise the lowest layer of the
networking subsystem, interacting with the actual transport
hardware.  An interface may support one or more protocol
families, address formats, or both.
The \*LSYNOPSIS\*O section of each network interface
entry gives a sample specification
of the related drivers for use in providing
a system description to the
\*Lconfig\*O
program.
The \*LERRORS\*O section lists messages which may appear on the console
and/or in the system error log,
\*L/var/log/messages\*O
(see the
\*Lsyslogd\*O
function),
due to errors in device operation.
.PP
The system currently supports the DARPA Internet
protocols and the Xerox Network Systems protocols.
Raw socket interfaces are provided to the IP
layer of the DARPA Internet, and to
the IDP of Xerox NS.
Consult the appropriate manual pages in this section for more
information regarding the support for each protocol family.
.SS "Addressing"
Associated with each protocol family is an address
format.  All network address adhere to a general structure,
called a \*Lsockaddr\*O.  However, each protocol
imposes finer and more specific structure, generally renaming
the variant.
.PP
Both the 4.3BSD and 4.4BSD
\*Lsockaddr\*O
structures are supported by
DEC OSF/1.
The default
\*Lsockaddr\*O
structure is the 4.3BSD structure, which is as follows:
.PP
.rS
\*Lstruct sockaddr {
.nL
	u_short	sa_family;
.nL
	char	sa_data[14];
.nL
};\*O
.rE
.PP
If the compile-time option
_SOCKADDR_LEN
is defined before the
\*Lsys/socket.h\*O
header file is included, however, the 4.4BSD
\*Lsockaddr\*O
structure is defined, which is as follows:
.rS
\*Lstruct sockaddr {
.nL
	u_char	sa_len;
.nL
	u_char	sa_family;
.nL
	char	sa_data[14];\*O
.nL
};
.rE
.PP
The
4.4BSD
\*Lsockaddr\*O
structure provides for a
\*Lsa_len\*O
field, which contains the total length of the structure.
Unlike the 4.3BSD
\*Lsockaddr\*O
structure, this length may exceed 16 bytes.
.PP
The following address values for
\*Lsa_family\*O
are known to the system
(and additional formats are defined for possible future implementation):
.rS
\*L#define	AF_UNIX	1	/* local to host (pipes, portals) */
.nL
#define	AF_INET	2	/* internetwork: UDP, TCP, etc. */
.nL
#define	AF_NS	6	/* Xerox NS protocols */\*O
.rE
.SS Routing
The UNIX operating system
provides packet routing facilities.
The kernel maintains a routing information database, which
is used in selecting the appropriate network interface when
transmitting packets.
.PP
A user process (or possibly multiple cooperating processes)
maintains this database by sending messages over a special kind
of socket.
This supplants fixed size
\*Lioctl\*O's
used in earlier releases.
.PP
This facility is described in the files reference page for the
\*Lroute\*O
function.
.SS Interfaces
Each network interface in a system corresponds to a
path through which messages may be sent and received.  A network
interface usually has a hardware device associated with it, though
certain interfaces such as the loopback interface,
\*Llo\*O,
do not.
.PP
The following
\*Lioctl\*O
calls may be used to manipulate network interfaces.
The
\*Lioctl\*O
is made on a socket (typically of type SOCK_DGRAM)
in the desired domain.
Most of the requests supported in earlier releases
take an
\*Lifreq\*O
structure as its parameter.  This structure has the following form:
.rS
\*Lstruct	ifreq {
.nL
#define	IFNAMSIZ	16
.nL
  char  ifr_name[IFNAMSIZE]; /*if name, e.g. "en0"*/
.nL
  union {
.nL
	struct	sockaddr ifru_addr;
.nL
	struct	sockaddr ifru_dstaddr;
.nL
	struct	sockaddr ifru_broadaddr;
.nL
	short	ifru_flags;
.nL
	int	ifru_metric;
.nL
	caddr_t	ifru_data;
.nL
        } ifr_ifru;
.nL
#define	ifr_addr	ifr_ifru.ifru_addr	/* address */
.nL
#define	ifr_dstaddr	ifr_ifru.ifru_dstaddr	/* other end of p-to-p link */
.nL
#define	ifr_broadaddr	ifr_ifru.ifru_broadaddr	/* broadcast address */
.nL
#define	ifr_flags	ifr_ifru.ifru_flags	/* flags */
.nL
#define	ifr_metric	ifr_ifru.ifru_metric	/* metric */
.nL
#define	ifr_data	ifr_ifru.ifru_data	/* for use by interface */
.nL
};\*O
.rE
.PP
Calls which are now deprecated are:
...\"from TP "
.VL
.LI "SIOCSIFADDR"
Set interface address for protocol family.  Following the address
assignment, the ``initialization'' routine for
the interface is called.
...\"from TP "
.LI "SIOCSIFDSTADDR"
Set point to point address for protocol family and interface.
...\"from TP "
.LI "SIOCSIFBRDADDR"
Set broadcast address for protocol family and interface.
.sp 4p
All
\*Lioctl\*O
requests to obtain addresses and requests both to set and
.\" Begin Digital-specific information CORRECTION
.\" Corrected typo per QAR 6104.
retrieve other data are still fully supported
.\" End Digital-specific information CORRECTION
and use the
\*Lifreq\*O
structure:
...\"from TP "
.LI "SIOCGIFADDR"
Get interface address for protocol family.
...\"from TP "
.LI "SIOCGIFDSTADDR"
Get point to point address for protocol family and interface.
...\"from TP "
.LI "SIOCGIFBRDADDR"
Get broadcast address for protocol family and interface.
...\"from TP "
.LI "SIOCSIFFLAGS"
Set interface flags field.  If the interface is marked down,
any processes currently routing packets through the interface
are notified;
some interfaces may be reset so that incoming packets are no longer received.
When marked up again, the interface is reinitialized.
...\"from TP "
.LI "SIOCGIFFLAGS"
Get interface flags.
...\"from TP "
.LI "SIOCSIFMETRIC"
Set interface routing metric.
The metric is used only by user-level routers.
...\"from TP "
.LI "SIOCGIFMETRIC"
Get interface metric.
.LE
.PP
There are three requests that make use of a new structure:
...\"from TP "
.VL
.LI "SIOCAIFADDR"
An interface may have more than one address associated with it
in some protocols.  This request provides a means to
add additional addresses (or modify characteristics of the
primary address if the default address for the address family
is specified).  Rather than making separate calls to
set destination addresses, broadcast addresses, or network masks
(now an integral feature of multiple protocols)
a separate structure is used to specify all three facets simultaneously:
.rS
\*Lstruct
.nL
 ifaliasreq {
.nL
	char	ifra_name[IFNAMSIZ];		/* if name, e.g. "en0" */
.nL
	struct	sockaddr	ifra_addr;
.nL
	struct	sockaddr	ifra_broadaddr;
.nL
	struct	sockaddr	ifra_mask;
.nL
};\*O
.rE
.P
One would use a slightly tailored version of this struct are specific
to each family (replacing each sockaddr by one
of the family-specific type).
Where the sockaddr itself is larger than the
default size, one needs to modify the
\*Lioctl\*O
identifier itself to include the total size.
...\"from TP "
.LI "SIOCDIFADDR"
This request deletes the specified address from the list
associated with an interface.  It uses the
\*Lif_aliasreq\*O
structure to permit protocols to allow
multiple masks or destination addresses, and it adopts the
convention that specification of the default address means
to delete the first address for the interface belonging to
the address family in which the original socket was opened.
...\"from TP "
.LI "SIOCGIFCONF"
Get interface configuration list.  This request takes an
\*Lifconf\*O
structure (see below) as a value-result parameter.  The
\*Lifc_len\*O
field should be initially set to the size of the buffer
pointed to by
\*Lifc_buf\*O.
On return it contains the length, in bytes, of the
configuration list.
.rS
\*L/*
.nL
 * Structure used in SIOCGIFCONF request.
.nL
 * Used to retrieve interface configuration
.nL
 * for machine (useful for programs which
.nL
 * must know all networks accessible).
.nL
 */
.nL
struct	ifconf {
.nL
	int	ifc_len;		/* size of associated buffer */
.nL
	union {
.nL
		caddr_t	ifcu_buf;
.nL
		struct	ifreq *ifcu_req;
.nL
	} ifc_ifcu;
.nL
#define	ifc_buf	ifc_ifcu.ifcu_buf	/* buffer address */
.nL
#define	ifc_req	ifc_ifcu.ifcu_req	/* array of structures returned */
.nL
};\*O
.rE
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Lsocket\*O(2),
\*Lioctl\*O(2)
.PP
Files:
\*Lconfig\*O(8),
\*Lrouted\*O(8)
.iX "netintro"
.EQ
delim off
.EN

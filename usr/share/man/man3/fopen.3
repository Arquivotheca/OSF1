.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: fopen.3,v $ $Revision: 3.2.5.3 $ (DEC) $Date: 1993/08/27 17:45:49 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.TH fopen 3
.SH NAME
.PP
\*Lfopen\*O, \*Lfreopen\*O, \*Lfdopen\*O \- Open a stream
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <stdio.h>\*O
.PP
\*LFILE \(**fopen(\*O
.nL
        \*Lconst char \(**\*Vpath\*L,\*O
.nL
        \*Lconst char \(**\*Vmode\*L);\*O
.PP
\*LFILE \(**fdopen(
.nL
	\*Lint \*Vfiledes\*L,
.nL
	\*Lconst char \(**\*Vmode\*L);\*O
.PP
\*LFILE \(**freopen(
.nL
	\*Lconst char \(**\*Vpath\*L,
.nL
	\*Lconst char \(**\*Vmode\*L,
.nL
	\*LFILE \(**\*Vstream\*L);\*O
.sE
.SH PARAMETERS
.PP
.VL
.LI "\*Vpath\*O"
Points to a character string that contains the name
of the file to be opened.  If the final component of the
\*Vpath\*O parameter
specifies a symbolic link, the link is traversed and pathname
resolution continues.
.LI "\*Vmode\*O"
Points to a character string that controls whether the file is opened
for reading (\*Lr\*O), writing (\*Lw\*O), or appending (\*La\*O) and
whether the file is opened for updating (\*L+\*O).
.LI "\*Vstream\*O"
Specifies the input stream.
.LI "\*Vfiledes\*O"
Specifies a valid open file descriptor.
.LE
.SH DESCRIPTION
.PP
.iX "fopen function"
.iX "fdopen function"
.iX "freopen function"
.iX "stream" "opening"
The \*Lfopen(\|)\*O function opens the file named by the
\*Vpath\*O parameter and associates a stream with it, returning
a pointer to the \*LFILE\*O structure of this stream.
.PP
The \*Vmode\*O parameter controls the access allowed to the stream. The
parameter can have one of the following values:
.VL
.LI "\*Lr\*O"
Opens the file for reading.
.LI "\*Lw\*O"
Creates a new file for writing, or opens and truncates a file
to zero length.  (The file is not truncated under the
\*Lfdopen(\|)\*O function.)
.LI "\*La\*O"
Appends (opens a file for writing at the end of the
file, or creates a file for writing).
.LI "\*Lr+\*O"
Opens a file for update (reading and writing).
.LI "\*Lw+\*O"
Truncates or creates a file for update.  (The file is not truncated under the
\*Lfdopen(\|)\*O function.)
.LI "\*La+\*O"
Appends (opens a file for update, writing at the end of the file, or
creates a file for writing).
.LE
.PP
When you open a file for update, you can perform both input and
output operations on the resulting stream. However, an output operation
cannot be directly followed by an input operation without an intervening \*Lfflush(\|)\*O
function call or a file positioning operation (\*Lfseek(\|)\*O,
\*Lfsetpos(\|)\*O, or\*L rewind(\|)\*O function). Also, an input operation
cannot be directly followed by an output operation without an intervening
flush or file positioning operation, unless the input operation encounters
the end of the file.
.PP
When you open a file for append (that is, when the \*Vmode\*O
parameter is \*La \*Oor \*La+\*O), it is impossible to overwrite
information already in the file. You can use the \*Lfseek(\|)\*O function
to reposition the file pointer to any position in the file, but when
output is written to the file, the current file pointer is ignored.
All output is written at the end of the file and the file pointer
is repositioned to the end of the output.
.PP
If two separate processes open the same file for append, each
process can write freely to the file without destroying the output
being written by the other. The output from the two processes is intermixed
in the order in which it is written to the file. Note that if the
data is buffered, it is not actually written until it is flushed.
.PP
When opened, a stream is fully buffered if and only if it can be
determined that is does not refer to an interactive device.
The error and End-of-File indicators for the stream are cleared.
.PP
If the \*Vmode\*O parameter
is \*Lw\*O, \*La\*O, \*Lw+\*O, or \*La+\*O and the file
did not previously exist, upon successful completion the
\*Lfopen(\|)\*O function marks the \*Lst_atime\*O,
\*Lst_ctime\*O and \*Lst_mtime\*O fields of the file and the
\*Lst_ctime\*O and \*Lst_mtime\*O fields of the parent directory for update.
If the \*Vmode\*O parameter is \*Lw\*O or \*Lw+\*O
and the file did previously exist, upon successful
completion the \*Lfopen(\|)\*O function marks the \*Lst_ctime\*O
and \*Lst_mtime\*O fields of the file for update.
.PP
The \*Lfreopen(\|)\*O function substitutes the named file in
place of the open stream.  The original stream is closed regardless
of whether the \*Lopen(\|)\*O function succeeds with the named file. The
\*Lfreopen(\|)\*O function returns a pointer to the \*LFILE\*O
structure associated with the \*Vstream\*O
parameter. The \*Lfreopen(\|)\*O function
is typically used to attach the preopened streams associated with
\*Lstdin\*O, \*Lstdout\*O, and \*Lstderr\*O to other files.
.PP
The \*Lfdopen(\|)\*O function associates a stream with a file
descriptor obtained from an \*Lopen(\|)\*O, \*Ldup(\|)\*O,
\*Lcreat(\|)\*O, or \*Lpipe(\|)\*O function. These
functions open files, but do not return pointers to \*LFILE\*O
structures. Many of the standard I/O package functions require pointers
to \*LFILE\*O structures. Note that the \*Vmode\*O of the stream
specified must agree with the mode of the open file.
.SH NOTES
.PP
.\".PP
.\"POSIX: \*Lw\*O and \*Lw+\*O types do not truncate, and \*La\*O
.\"and \*La+\*O types do not create.
The \*Lfopen(\|)\*O function does not distinguish between text
and binary files. Specifying a value of \*Vmode\*O that consists of an
\*Lr\*O, a \*Lw\*O, or an \*La\*O followed by a \*Lb\*O indicates a binary
file. However, the function ignores the \*Lb\*O in the value of \*Vmode\*O.
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Full use.
.LE
.SH RETURN VALUES
.PP
If the \*Lfopen(\|)\*O, \*Lfdopen(\|)\*O, or \*Lfreopen(\|)\*O
function fails, a null pointer is returned, and \*Lerrno\*O
is set to indicate the error.
.SH ERRORS
.PP
If any of the following conditions occurs, the \*Lfopen(\|)\*O,
\*Lfdopen(\|)\*O, and \*Lfreopen(\|)\*O functions set
\*Lerrno\*O to the value that corresponds to the condition.
.PP
.VL
.LI "[EACCES]"
Search permission is denied on a component of the pathname prefix;
or the file exists and the permissions specified by the
\*Vmode\*O parameter
are denied; or the file does not exist and write permission is
denied for the parent directory of the file to be created.
.LI "[EBADF]"
The \*Vfiledes\*O
parameter is not a valid file descriptor (\*Lfdopen(\|)\*O only).
.LI "[EINTR]"
The function was interrupted by a signal that was caught.
.LI "[EINVAL]"
The \*Vmode\*O parameter is not a valid mode.
.LI "[EISDIR]"
The named file is a directory and \*Vmode\*O requires write access.
.LI "[ELOOP]"
Too many links were encountered in translating \*Vpath\*O.
.LI "[EMFILE]"
The OPEN_MAX file descriptors are currently open in the calling process.
.LI "[ENAMETOOLONG]"
The length of the \*Vpath\*O string exceeds \*LPATH_MAX\*O
or a pathname component is longer than \*LNAME_MAX\*O.
.LI "[ENFILE]"
Too many files are currently open in the system.
.LI "[ENOENT]"
The named file does not exist or the \*Vpath\*O
parameter points to an empty string.
.LI "[ENOMEM]"
Insufficient space to allocate a buffer.
.LI "[ENOSPC]"
The directory or file system that would contain the
new file cannot be expanded.
.LI "[ENOTDIR]"
A component of the pathname prefix is not a directory.
.LI "[ENXIO]"
The named file is a character-special or block-special file
and the device associated with this special file does not exist.
.LI "[EOPNOTSUPP]"
The named file is a socket bound to the file system (a UNIX domain
socket) and cannot be opened.
.LI "[EROFS]"
The named file resides on a read-only file system and \*Vmode\*O
requires write access.
.LI "[ETXTBSY]"
The file is being executed and the \*Vmode\*O requires write access.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Lopen\*O(2),
\*Lfclose\*O(3),
\*Lfseek\*O(3),
\*Lsetbuf\*O(3).
.EQ
delim off
.EN

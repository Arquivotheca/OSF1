.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: Composite.3X,v $ $Revision: 3.2.4.4 $ (DEC) $Date: 1993/10/25 18:43:59 $
.\"
.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
.\" **      Maynard, MA.  All Rights Reserved.
.\" **
.\" **
.TH Composite 3X "" "" "" "OSF/Motif"
.SH NAME
\*LComposite\*O \- The Composite widget class
.SH SYNOPSIS
.sS
.iS
\&\*L\&#include <Xm/Xm.h>
.iE
.sE
.SH DESCRIPTION
.iX "Composite"
.iX "widget class" "Composite"
Composite widgets are intended to be containers for other widgets and can
have an arbitrary number of children.  Their responsibilities (implemented
either directly by the widget class or indirectly by Intrinsics
functions) include:
.ML 
.LI
Overall management of children from creation to destruction.
.LI
Destruction of descendants when the composite widget is destroyed.
.LI
Physical arrangement (geometry management) of a displayable subset of
managed children.
.LI
Mapping and unmapping of a subset of the managed children.
Instances of composite widgets need to specify the order in which
their children are kept.  For example, an application may want a set of
command buttons in some logical order grouped by function, and it may want
buttons that represent filenames to be kept in alphabetical order.
.nL
.ne 7
.LE 
.SS "Classes"
Composite inherits behavior and resources from \*LCore\*O.
.PP 
The class pointer is \*LcompositeWidgetClass\*O.
.PP 
The class name is \*LComposite\*O.
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \*LXmN\*O or
\*LXmC\*O prefix and use the remaining letters.  To specify one of the defined
values for a resource in a .Xdefaults file, remove the \*LXm\*O prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (C),
set by using \*LXtSetValues\*O (S),
retrieved by using \*LXtGetValues\*O (G), or is not applicable (N/A).
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Composite Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNchildren	NULL	G
\ \ \ \ \ \ XmCReadOnly	\ \ \ \ \ \ \ WidgetList
_
XmNinsertPosition	NULL	CSG
\ \ \ \ \ \ XmCInsertPosition	\ \ \ \ \ \ \ XtOrderProc
_
XmNnumChildren	0	G
\ \ \ \ \ \ XmCReadOnly	\ \ \ \ \ \ \ Cardinal
_
.TE
.\" NROFF HACK END
.nL
.ne 10
.VL  
.LI "\*LXmNchildren\*O"
A read-only list of the children of the widget.
.LI "\*LXmNinsertPosition\*O"
Points to the \*LXtOrderProc\*O function described below.
.LI "\*LXmNnumChildren\*O"
A read-only resource specifying the length of the list of children in
\*LXmNchildren\*O.
.LE 
.PP 
The following procedure pointer in a composite widget instance is of type
\*LXtOrderProc\*O:
.sS
.iS
Cardinal (* XtOrderProc) (\*Vwidget\*L)
.ta .5i 1.5i
	Widget	\*Vw\*O;
.iE
.sE
.VL .75i 
.LI "\*Vw\*O"
Specifies the widget.
.LE 
.PP 
Composite widgets that allow clients to order their children (usually
homogeneous boxes) can call their widget instance's insert_position
procedure from the class's insert_child procedure to determine where a new
child should go in its children array.  Thus, a client of a composite class
can apply different sorting criteria to widget instances of the class,
passing in a different insert_position procedure when it creates each
composite widget instance.
.PP 
The return value of the insert_position procedure indicates how many children
should go before the widget.  Returning \*Vzero\*O indicates that the
widget should go before all other children; returning num_children indicates
that it should go after all other children.  The default insert_position
function returns num_children and can be overridden by a specific composite
widget's resource list or by the argument list provided when the composite
widget is created.
.SS "Inherited Resources"
Composite inherits behavior and resources from the following superclass.
For a complete description of each resource, refer to the manual page for
that superclass.
.PP
.wH .in 0 
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Core Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNaccelerators	dynamic	CSG
\ \ \ \ \ \ XmCAccelerators	\ \ \ \ \ \ \ XtAccelerators
_
XmNancestorSensitive	dynamic	G
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNbackground	dynamic	CSG
\ \ \ \ \ \ XmCBackground	\ \ \ \ \ \ \ Pixel
_
XmNbackgroundPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderColor	XtDefaultForeground	CSG
\ \ \ \ \ \ XmCBorderColor	\ \ \ \ \ \ \ Pixel
_
XmNborderPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderWidth	1	CSG
\ \ \ \ \ \ XmCBorderWidth	\ \ \ \ \ \ \ Dimension
_
XmNcolormap	dynamic	CG
\ \ \ \ \ \ XmCColormap	\ \ \ \ \ \ \ Colormap
_
XmNdepth	dynamic	CG
\ \ \ \ \ \ XmCDepth	\ \ \ \ \ \ \ int
_
XmNdestroyCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNheight	dynamic	CSG
\ \ \ \ \ \ XmCHeight	\ \ \ \ \ \ \ Dimension
_
XmNinitialResourcesPersistent	True	C
\ \ \ \ \ \ XmCInitialResourcesPersistent	\ \ \ \ \ \ \ Boolean
_
XmNmappedWhenManaged	True	CSG
\ \ \ \ \ \ XmCMappedWhenManaged	\ \ \ \ \ \ \ Boolean
_
XmNscreen	dynamic	CG
\ \ \ \ \ \ XmCScreen	\ \ \ \ \ \ \ Screen *
_
.wH .tH
XmNsensitive	True	CSG
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNtranslations	dynamic	CSG
\ \ \ \ \ \ XmCTranslations	\ \ \ \ \ \ \ XtTranslations
_
XmNwidth	dynamic	CSG
\ \ \ \ \ \ XmCWidth	\ \ \ \ \ \ \ Dimension
_
XmNx	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
XmNy	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
.TE
.\" NROFF HACK END
.wH .in  
.SS "Translations"
There are no translations for Composite.
.SH RELATED INFORMATION
.na
\*LCore(3X)\*O.
.ad
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: scanf.3,v $ $Revision: 3.2.7.3 $ (DEC) $Date: 1993/08/23 18:10:20 $
.\"
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.\"
.TH scanf 3
.SH NAME
.PP
\*Lscanf\*O, \*Lfscanf\*O, \*Lsscanf\*O \- Converts formatted input
.SH LIBRARY
.PP
Standard C Library (\*Llibc.so\*O, \*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <stdio.h>\*O
.PP
\*Lint scanf(\*O
.nL
        \*Lconst char *\*Vformat
.nL
        \*O[\*L,\*Vpointer\*O]\|.\|.\|.\*L);\*O
.PP
\*Lint fscanf(\*O
.nL
        \*LFILE *\*Vstream\*L,
.nL
        \*Lconst char *\*Vformat
.nL
        \*O[\*L,\*Vpointer\*O]\|.\|.\|.\*L);\*O
.PP
\*Lint sscanf(\*O
.nL
        \*Lconst char *\*Vstring\*L,
.nL
        \*Lconst char *\*Vformat
.nL
        \*O[\*L,\*Vpointer\*O]\|.\|.\|.\*L);\*O
.sE
.SH PARAMETERS
.PP
.VL
.LI "\*Vformat\*O"
Specifies the format conversion.
.LI "\*Vstream\*O"
Specifies the input stream.
.LI "\*Vstring\*O"
Specifies input to be read.
.LI "\*Vpointer\*O"
Points to the location to store the interpreted data.
.LE
.SH DESCRIPTION
.PP
.iX "scanf function"
.iX "fscanf function"
.iX "sscanf function"
.iX "input" "converting formatted"
.iX "converting formatted input"
.iX "formatted input" "converting"
The \*Lscanf(\|)\*O, \*Lfscanf(\|)\*O, and
\*Lsscanf(\|)\*O functions read character data, interpret it according
to a format, and store the converted results into specified memory
locations. The \*Vformat\*O parameter contains conversion specifications
used to interpret the input. The \*Vpointer\*O parameters specify
where to store the interpreted data.
.PP
These functions read their input from the following sources:
.VL
.LI "\*Lscanf(\|)\*O"
Reads from standard input (\*Lstdin\*O).
.LI "\*Lfscanf(\|)\*O"
Reads from the \*Vstream\*O parameter.
.LI "\*Lsscanf(\|)\*O"
Reads from the character string specified by the \*Vstring\*O parameter.
.LE
.PP
If there are insufficient arguments
for \*Vformat\*O, the function's behavior is undefined.  If \*Vformat\*O
is exhausted while arguments remain, the excess arguments are
evaluated as always but are otherwise ignored.
.PP
The \*Vformat\*O parameter can contain the following items:
.ML
.LI
A conversion specification that directs the conversion of the
next input field. Conversion specifications start with a % (percent sign).
.LI
Any white space character (as determined by the \*Lisspace(\|)\*O
function) that
matches 0 (zero) or more white space characters in the input stream.
.LI
Any character except % (percent sign) or a white space character that
must match the next character in the input stream.
.LE
.PP
The input stream is broken into fields based on the following:
.ML
.LI
White space
.IP
All conversion
specifications except \*L%c\*O, \*L%C\*O, and \*L%[\*O ignore leading
white space and consider the first trailing white space character to
delimit the field.
.LI
Invalid character
.IP
If the input stream contains a character that is
not allowed, this invalid character delimits the field and is
considered the first character of the next field.
.LI
Maximum width
.IP
If the conversion specification includes a maximum
width and the field is not terminated by white space or an invalid
character, then when that character position is reached in the input
stream, the field is terminated.
.LE
.SS "Conversion Specifications"
.if n .PP
Each conversion specification in the \*Vformat\*O parameter
has the following syntax:
.ML
.LI
The character % (percent sign).
.IP
The \*Lscanf(\|)\*O
functions can handle a format string that enables the system
to process elements of the pointer list in variable order. In such
a case, the normal conversion character \*L%\*O (percent sign) is replaced
by \*L%\*Vdigit\*L$\*O, where \*Vdigit\*O is a decimal number in the
range from 1 to \*LNL_ARGMAX\*O. Conversion is then
applied to the specified pointer, rather than
to the next unused pointer.
This feature provides for the definition of format strings in an
order appropriate to specific languages.  If the
variable ordering feature is used, it must be specified for all
conversions except for conversion specifications that do not have
corresponding pointers (conversion specifications with the \*L*\*O
(asterisk) assignment suppression and \*L%\&%\&\*O conversion specifications).
If more than one conversion specification specifies the same
\*Vdigit\*O, the results of the function are undefined.
.LI
The optional assignment suppression character \*L*\*O
(asterisk).
.LI
An optional decimal digit string that specifies the maximum field width.
.LI
.\" Removed reference to L as per technical review from njo
An optional \*Lh\*O or \*Ll\*O indicating the size of the
receiving variable for some conversion specifiers, as follows:
.ML
.LI
An \*Lh\*O followed by a \*Ld\*O, \*Li\*O, \*Lo\*O, \*Lu\*O, or \*Lx\*O
conversion specifier indicates that the receiving variable will be
treated as a \*Lshort int\*O or \*Lunsigned short int\*O.
.LI
An \*Ll\*O followed by a \*Ld\*O, \*Li\*O, \*Lo\*O, \*Lu\*O, or \*Lx\*O
conversion specifier indicates that the receiving variable will be
treated as a \*Llong int\*O or \*Lunsigned long int\*O.
.LI
An \*Ll\*O followed by a \*Le\*O, \*Lf\*O, or \*Lg\*O
indicates that the receiving variable will be treated as a
\*Ldouble\*O instead of a \*Lfloat\*O.
.\" .LI
.\" An \*LL\*O followed by a \*Le\*O, \*Lf\*O, or \*Lg\*O
.\" indicates that the receiving variable will be treated as a
.\" \*Llong double\*O.
.LE
.LI
A conversion code character that specifies the type of conversion to
be applied:
.VL
.LI "\*L%\*O"
Accepts a single % (percent sign) input at this point; no assignment
is done.
.LI "\*Ld\*O, \*Li\*O"
Accepts a decimal integer; the \*Vpointer\*O
parameter should be an integer pointer.
.LI "\*Lu\*O"
Accepts an unsigned decimal integer; the \*Vpointer\*O
parameter should be an unsigned integer pointer.
.LI "\*Lo\*O"
Accepts an octal integer; the \*Vpointer\*O parameter
should be an integer pointer.
.LI "\*Lx\*O"
Accepts a hexadecimal integer; the \*Vpointer\*O
parameter should be an integer pointer.
.LI "\*Le\*O, \*Lf\*O, \*Lg\*O"
Accepts a floating-point number.
The next field is converted accordingly and stored through the corresponding
parameter, which should be a pointer to a \*Lfloat\*O. The input format
for floating-point numbers is a string of digits, with the
following optional
characteristics:
.ML
.LI
It can be a signed value.
.LI
It can be an exponential value, containing a decimal point followed
by an exponent field, which consists of an \*LE\*O or an \*Le\*O
followed by an optionally signed integer.
.LI
It can be one of the special values \*LINF\*O, \*LNaNQ\*O,
or \*LNaNS\*O. This value is translated into the ANSI/IEEE value
for infinity, quiet \*LNaN\*O, or signaling \*LNaN\*O, respectively.
.LE
.LI "\*Lp\*O"
.\" Added long as per technical review from njo
Matches an unsigned hexadecimal long integer, the same as
the \*L%p\*O conversion of the \*Lprintf(\|)\*O function. The
corresponding argument will be a pointer to a pointer to \*Lvoid\*O.
.LI "\*Ln\*O"
No input is consumed. The corresponding argument is
a pointer to an integer into which is written the number of characters
read from the input stream so far by this function. The assignment
count returned at the completion of this function is not incremented.
.LI "\*Ls\*O"
Accepts a string of characters. The \*Vpointer\*O
parameter should be a character pointer that points to an array of
characters large enough to accept the string with a terminating null
byte appended.   The input field ends with
a white-space character. A string of \*Lchar\*O values is
output.
If a field width is given, \*Vpointer\*O refers to a character
array, and the indicated number of
\*Lchar\*O
values is
read.
.LI "\*LS\*O"
Accepts a string of characters. The \*Vpointer\*O parameter should be
a pointer to an array of \*Lwchar_t\*O. The array must be large
enough to accept the string with a terminating null wide character
appended. The input field ends with a white-space character. A
string of \*Lwchar_t\*O is output. If the \*LS\*O conversion specifier
has a field width, the behavior of the conversion is undefined.
.LI "\*Lc\*O"
Accepts a single character or a series of characters.
If there is no field width or a field width of 1 in the conversion
specification, one character is accepted and the
\*Vpointer\*O parameter should be a \*Lchar\*O pointer.
If there is a field width greater than 1, the indicated number of
characters are accepted and the
\*Vpointer\*O parameter should be an array of \*Lchar\*O.
The normal skip over white space
is suppressed. Use \*L%1s\*O rather than \*L%1c\*O to read the next
nonwhite-space character.
.LI "\*LC\*O"
Accepts a single character or a series of characters and converts to
\*Lwchar_t\*O type.
If there is no field width or a field width of 1 in the conversion
specification, one character is accepted and the
\*Vpointer\*O parameter should be a \*Lwchar_t\*O pointer.
If there is a field width greater than 1, the indicated number of
characters are accepted and the
\*Vpointer\*O parameter should be an array of \*Lwchar_t\*O.
The normal skip over white space
is suppressed. Use \*L%1S\*O rather than \*L%1C\*O to read the next
nonwhite-space character.
.LI "[\*Vscanset\*O]"
Accepts as input the characters included in
the \*Vscanset\*O. The \*Vscanset\*O parameter explicitly defines the
characters that are accepted in the string data as those enclosed
within [  ] (square brackets). The corresponding \*Vpointer\*O parameter
should be an array of \*Lchar\*O.
The leading white space that is normally skipped over is
suppressed. A scanset in the form of [^\*Vscanset\*O]
is an exclusive scanset: the ^ (circumflex) serves as a complement
operator and the following characters in the \*Vscanset\*O are
not accepted as input. Conventions used in the construction of the \*Vscanset\*O
follow:
.ML
.LI
You can represent a range of characters by the construct
\*VFirst-Last.\*O Thus, you can express [0123456789] as [0-9]. The \*VFirst\*O
parameter must be lexically less than or equal to \*VLast\*O,
or else the - (dash) stands for itself. The - also stands for itself
whenever it is the first or the last character in the \*Vscanset\*O.
.LI
You can include the ] (right bracket) as an element of the \*Vscanset\*O
if it is the first character of the \*Vscanset\*O. In this
case, it is not interpreted as the bracket that closes the \*Vscanset\*O.
If the \*Vscanset\*O is an exclusive \*Vscanset\*O, the ] is
preceded by the ^ (circumflex) to make the ] an element of the \*Vscanset\*O\&.
The corresponding \*Vpointer\*O parameter must point to a
character array large enough to hold the data field and that ends
with 0 (zero). The 0 is added automatically.
.LE
.LE
.LE
.PP
The conversion specification syntax is summarized by the following
synopsis:
.PP
\*L%\*O[\*Vdigit\*L$\*O][\*L*\*O][\*Vwidth\*O][\*Vsizecode\*O]\*Vconvcode\*O
.PP
The results from the conversion are placed in \*L*\*Vpointer\*O
unless you specify assignment suppression with an \*L*\*O (asterisk).
Assignment
suppression provides a way to describe an input field that is to be
skipped. The input field is a string of nonwhite-space characters.
It extends to the next inappropriate character or until the field
width, if specified, is exhausted.
.PP
The conversion code indicates how to interpret the input field.
The corresponding \*Vpointer\*O must usually be of a restricted
type. You should not specify the \*Vpointer\*O parameter for a
suppressed field.
.PP
A \*Lscanf(\|)\*O function ends at the end
of the file, the end of the control string, or when an input character
conflicts with the control string. If \*Lscanf(\|)\*O ends with an input character
conflict, the conflicting character is not read from the input stream.
.PP
Unless there is a match in the control string, trailing white space
(including a newline character) is not read.
.PP
The success of literal matches and suppressed assignments cannot
be directly determined. The \*Lscanf(\|)\*O function returns the
number of successfully matched and assigned input items.
.SH NOTES
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Full use.
.LE
.SH RETURN VALUES
.PP
The
\*Lscanf(\|)\*O,
\*Lfscanf(\|)\*O,
or
\*Lsscanf(\|)\*O
function returns the
number of successfully matched and assigned input items. This number
can be 0 (zero) if there was an early conflict between an input character
and the control string. If the input ends before the first conflict
or conversion, EOF (End-of-File) is returned.
.SH ERRORS
.PP
The \*Lfscanf(\|)\*O function fails if either the \*Vstream\*O
is unbuffered, or the \*Vstream\*O's buffer needed to be flushed
and the function call caused an underlying \*Lread(\|)\*O
or \*Llseek(\|)\*O to be invoked and that operation fails.
In addition, if the any of the following conditions occur, the
\*Lscanf(\|)\*O, \*Lfscanf(\|)\*O, and \*Lsscanf(\|)\*O, functions set
\*Lerrno\*O to the corresponding value.
.VL
.LI "[EAGAIN]"
The \*LO_NONBLOCK\*O flag is set for the underlying \*Vstream\*O and
the process would be delayed by the read operation.
.LI "[EBADF]"
The file descriptor underlying the \*Vstream\*O is not a valid file
descriptor or is not open for reading.
.LI "[EINTR]"
The read operation was interrupted by a signal that was caught and no
data was transferred.
.LI "[EIO]"
The call is attempting to read from the process's controlling terminal
and either the process is ignoring or blocking the \*LSIGTTIN\*O
signal or the process group is orphaned.
.LI "[ENOMEM]"
Insufficient memory is available for the operation.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Latof\*O(3),
\*Latoi\*O(3),
\*Lgetc\*O(3),
\*Lgetwc\*O(3),
\*Lprintf\*O(3).
.EQ
delim off
.EN

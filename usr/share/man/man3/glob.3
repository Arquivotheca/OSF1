.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: glob.3,v $ $Revision: 1.1.3.4 $ (DEC) $Date: 1993/11/29 20:39:03 $
.\"
.\"
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"build rmifdef
.\"
.TH glob 3
.SH NAME
.PP
\*Lglob\*O \- Generates pathnames
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include\ <glob.h>
.sp 0.4v
int glob(
.nL
	const char *\*Vpattern\*L,
.nL
	int \*Vflags\*L,
.nL
	int (*\*Verrfunc\*L)(const char *\*Vepath\*L, int \*Veerrno\*L),
.nL
	\*Lglob_t *\*Vpglob\*L)
.sp 0.4v
int *\*Verrfunc\*L(
.nL
	const char *\*Vepath\*L,
.nL
	int \*Veerrno\*L);
.sE
.SH PARAMETERS
.PP
.VL 1i
.LI "\*Vpattern\*O"
Contains the filename pattern to compare against accessible pathnames.
.LI "\*Vflags\*O"
Controls the customizable behavior of the \*Lglob\*O function.
.LI "\*Verrfunc\*O"
Specifies an optional function that, if specified,
is called when the \*Lglob(\|)\*O function detects an error condition.
.LI "\*Vpglob\*O"
Contains a pointer to a \*Lglob_t\*O structure. The structure is allocated by
the caller. The array of structures containing the filenames located that match
the \*Vpattern\*O parameter are stored by the \*Lglob(\|)\*O function
into the structure.
The last entry is a NULL pointer.
.LI "\*Vepath\*O"
Contains the pathname that failed because a directory could not be
opened or read.
.LI "\*Veerrno\*O"
Specifies the \*Lerrno\*O value from a failure specified by the \*Vepath\*O
parameter, as set by the \*Lopendir(\|)\*O,
\*Lreaddir(\|)\*O, or \*Lstat(\|)\*O functions.
.LE
.PP
The \*Vflags\*O parameter is used to control the behavior of the \*Lglob(\|)\*O
function.  The \*Vflags\*O value is the bitwise inclusive OR
(\^\^\^\*L|\*O\^\^\^)
of any of the following
constants, which are defined in the \*Lglob.h\*O file.
.VL
.LI "\*LGLOB_APPEND\*O"
Appends pathnames located with this call to any pathnames previously located.
.\"If \*LGLOB_APPEND\*O is not set, new pathnames overwrite previous entries in
.\"call to the \*Lglob(\|)\*O function with \*Vpglob\*O parameter, 
.\"it should not be set in subsequent calls to the \*Lglob(\|)\*O function 
.\"with the \*Vpglob\*O parameter.
.LI "\*LGLOB_DOOFFS\*O"
Uses the \*Lgl_offs\*O structure to specify the number of NULL pointers to add
to the beginning of the \*Lgl_pathv\*O component of the \*Vpglob\*O parameter.
.LI "\*LGLOB_ERR\*O"
Causes the \*Lglob(\|)\*O function to return when it encounters a directory that
it cannot open or read. If the \*LGLOB_ERR\*O flag is not set, the
\*Lglob(\|)\*O function continues to find matches if it encounters a
directory that it cannot open or read.
.LI "\*LGLOB_MARK\*O"
Specifies that each pathname that is a directory
should have a \*L/\*O (slash) appended.
.LI "\*LGLOB_NOCHECK\*O"
If the \*Vpattern\*O parameter does not match any pathname, then the
\*Lglob(\|)\*O function returns a list consisting only of the \*Vpattern\*O
parameter, and the number of matched patterns is one.
.LI "\*LGLOB_NOSORT\*O"
Specifies that the list of pathnames need not be sorted. If the
\*LGLOB_NOSORT\*O flag is not set, pathnames are collated according to
the current locale.
.\" .zA "defect, 7707, R1.1.2, replaced flag"
.LI "\*LGLOB_NOESCAPE\*O"
If the \*LGLOB_NOESCAPE\*O flag is set, a \*L\\\*O
(backslash) cannot be used to escape metacharacters.
.\" .zZ "defect, 7707, R1.1.2, replaced flag"
.LE
.PP
The \*LGLOB_APPEND\*O flag can be used to append a new set of pathnames to
those found in a previous call to the \*Lglob(\|)\*O function.  The
following rules
apply when two or more calls to the \*Lglob(\|)\*O function are made with the
same value of the \*Vpglob\*O
parameter and without intervening calls to the \*Lglob(\|)\*O function:
.\"If the
.\"\*LGLOB_APPEND\*O flag is specified in the \*Vflags\*O parameter, the following
.\"rules apply:
.ML
.LI
If the application set the \*LGLOB_DOOFFS\*O flag in the first
call to the \*Lglob(\|)\*O function, then it is also set in the second call,
and the value of the \*Lgl_ofs\*O field of the \*Vpglob\*O parameter
is not modified between the calls.
.LI
If the application did not set the \*LGLOB_DOOFFS\*O flag in the first call to
the \*Lglob(\|)\*O function, then it is not set in the second call.
.LI
After the second call, the \*Lgl_pattr\*O field of the \*Vpglob\*O parameter
points to a list containing the following:
.ML
.LI
Zero or more NULLs, as specified by the \*LGLOB_DOOFFS\*O flag
and \*Vpglob\*L->gl_offs\*O.
.LI
Pointers to the pathnames that were in the \*Vpglob\*L->gl_pathv\*O list before the call, in
the same order as after the first call to the \*Lglob(\|)\*O function.
.LI
Pointers to the new pathnames generated
by the second call, in the specified order.
.LE
.LI
The count returned in the \*Vpglob\*L->gl_pathc\*O parameter
is the total number of pathnames from the two calls.
.LI
The application should not modify the \*Vpglob\*L->gl_pathc\*O or
\*Vpglob\*L->gl_pathv\*O fields between the two calls.
.LE
.PP
It is the caller's responsibility to create the structure pointed
to by the \*Vpglob\*O parameter. The \*Lglob\*V \*Ofunction
allocates other space as needed.
.SH DESCRIPTION
.PP
.iX "glob function"
.iX "pathname" "generating"
The \*Lglob(\|)\*O function constructs a list of accessible files
that match the \*Vpattern\*O parameter.
.PP
The \*Lglob(\|)\*O function matches all accessible pathnames
against this pattern and develops a list of all pathnames that
match. In order to have access to a pathname, the \*Lglob(\|)\*O
function requires search permission on every component of a pathname
except the last, and read permission on each directory of any filename
component of the \*Vpattern\*O parameter that contains any of the
special characters \*L*\*O (asterisk), \*L?\*O (question mark),
or \*L[\*O (open bracket). The \*Lglob(\|)\*O function stores the number of
matched pathnames and a pointer to a list of pointers to pathnames in the
\*Vpglob\*O parameter. The pathnames are sorted, based on the setting of
the \*LLC_COLLATE\*O category in the current locale. The first pointer after the
last pathname is NULL. If the pattern does not
match any pathnames, the returned number of matched pathnames is 0 (zero).
.SH EXAMPLES
.PP
Note that the \*Vpglob\*O parameter has meaning even if the \*Lglob(\|)\*O
function fails. This allows the \*Lglob(\|)\*O function to report partial
results in the event of an error. However, if the number of matched pathnames
is 0 (zero), the pointer in the \*Vpglob\*O parameter is unspecified
even if the
\*Lglob(\|)\*O function did not return an error.
.PP
The \*LGLOB_NOCHECK\*O flag can be used when an application wants to expand a
pathname if wildcards are specified, but wants to treat the pattern as just a
string otherwise. The \*Lsh\*O
command can use this for flag parameters, for example.
.PP
One use of the \*LGLOB_DOOFFS\*O flag is for applications that build an argument
list for use with the \*Lexecv(\|)\*O, \*Lexecve(\|)\*O, or \*Lexecvp(\|)\*O
functions; for example, if an application needs to do the equivalent
of
\*Lls\ -l\ *.c\*O, but for some reason this is not acceptable. The application
could obtain approximately the same result using the sequence:
.PP
.oS
globbuf.gl_offs\ =\ 2;
glob\ ("*.c",\ GLOB_DOOFFS,\ NULL,\ &globbuf);
globbuf.gl_pathv[0]\ =\ "ls";
globbuf.gl_pathv[1]\ ="-l";
execvp\ ("ls",\ &globbuf.gl_pathv[0]);
.oE
.PP
Using the same example, \*Lls\ -l\ *.c\ *.h\*O could
be approximated using the \*LGLOB_APPEND\*O flag as follows:
.PP
.oS
globbuf.gl_offs\ =\ 2;
glob\ ("*.c",\ GLOB_DOOFFS,\ NULL,\ &globbuf);
glob\ ("*.h",\ GLOB_DOOFFS|GLOB_APPEND,\ NULL,\ &globbuf);
.oE
.PP
The new pathnames generated by a subsequent call with the \*LGLOB_APPEND\*O
flag set are not sorted together with the previous pathnames.
This process mirrors the way that the shell handles pathname expansion
when multiple expansions are done on a command line.
.SH FILES
.PP
.VL
.LI "\*L/usr/include/glob.h\*O"
Defines \*Lglob(\|)\*O macros, data types, and functions.
.LE
.SH RETURN VALUES
.PP
On successful completion, the \*Lglob(\|)\*O function returns a value
of 0 (zero).
The \*Vpglob\*L->gl_pathc\*O field returns the number of matched
pathnames and the \*Vpglob\*L->gl_pathc\*O field contains a pointer
to a NULL-terminated list of matched and sorted pathnames. If the number
of matched pathnames in the \*Vpglob\*L->gl_pathc\*O parameter is
0 (zero), the pointer
in the \*Vpglob\*Lgl_pathv\*O parameter is undefined.
.SH ERRORS
.PP
If the \*Lglob(\|)\*O function terminates due to an error, the function
returns
one of the following
nonzero constants. These are defined in the \*Lglob.h\*O file. In this
case, the \*Vpglob\*O parameter values are still set as defined in the
\*LRETURN VALUES\*O section.
.VL
.LI "\*LGLOB_ABORTED\*O"
Indicates that the scan was stopped because \*LGLOB_ERROR\*O was set or
\*Verrfunc\*O returned a nonzero value.
.LI "\*LGLOB_NOSPACE\*O"
Indicates an attempt to allocate memory failed.
.LE
.PP
If, during the search, a directory is encountered that cannot be opened or read
and the \*Verrfunc\*O parameter value is not NULL, the \*Lglob(\|)\*O
function calls \*Verrfunc\*O with two arguments:
.VL 1i
.LI "\*Vepath\*O"
Specifies the pathname that failed.
.LI "\*Veerrno\*O"
Specifies the value of \*Lerrno\*O from the failure, as set by the
\*Lopendir(\|)\*O, \*Lreaddir(\|)\*O, or \*Lstat(\|)\*O functions.
.LE
.PP
If \*Verrfunc\*O is called and returns nonzero, or if the
\*LGLOB_ERR\*O flag is set in \*Vflags\*O, the \*Lglob(\|)\*O function
stops the
scan and returns \*LGLOB_ABORTED\*O after setting the \*Vpglob\*O parameter to
reflect the pathnames already scanned. If \*LGLOB_ERR\*O is not set and either
\*Verrfunc\*O is NULL or \*Verrfunc\*O returns zero, the error is
ignored.
.PP
No \*Lerrno\*O values are returned.
.SH RELATED INFORMATION
.PP
Functions: \*Lfnmatch\*O(3), \*Lopendir\*O(3), \*Lreaddir\*O(3), \*Lstat\*O(2).
.EQ
delim off
.EN

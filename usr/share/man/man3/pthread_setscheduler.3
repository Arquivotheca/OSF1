.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: pthread_setscheduler.3,v $ $Revision: 3.2.4.3 $ (DEC) $Date: 1994/01/14 21:05:39 $
.\"
...\" Copyright 1991, Open Software Foundation, Inc. ALL RIGHTS RESERVED.
.wH "<routine_section>"
.TH pthread_setscheduler 3
.SH NAME
\*Lpthread_setscheduler\*O \- Changes the current scheduling policy and priority of a thread.
.SH SYNOPSIS
.iX "Thread" "setting current scheduling policy and priority of"
.iX "Scheduling policy" "setting for thread"
.iX "Priority" "setting for thread"
.PP
.sS
\*L#include <pthread.h>
.fS "int pthread_setscheduler"
.dS "pthread_t"
\*Vthread\*L
.dE
.dS "int"
\*Vscheduler\*L
.dE
.dS "int"
\*Vpriority\*O
.dE
.fE
.sE
.wH "<endformat>"
.SH PARAMETERS
.PP
.VL 10m
.LI "\*Vthread\*O"
Thread whose scheduling policy is to be changed.
.LI "\*Vscheduler\*O"
New scheduling policy value for the thread specified in \*Vthread\*O.
Valid values are as follows:
.LE
.VL 10m
.LI "SCHED_FIFO"
(First In, First Out) The highest priority thread
runs until it blocks. If there is more than one thread with the same
priority, and that priority is the highest among other threads, the first
thread to begin running continues until it blocks.
.LI "SCHED_RR"
(Round Robin) The highest priority thread runs until it
blocks; however, threads of equal priority, if that priority is the highest
among other threads, are timesliced. Timeslicing is a process in which
threads alternate using available processors.
.LI "SCHED_OTHER"
.nL
"SCHED_FG_NP"
(Default) All threads are timesliced. \*LSCHED_OTHER\*O ensures that
all threads, regardless of priority, receive some scheduling, and thus
no thread is completely denied execution time. (However,
\*LSCHED_OTHER\*O threads can be denied execution time by
\*LSCHED_FIFO\*O or \*LSCHED_RR\*O threads.)
.LI "SCHED_BG_NP"
(Background) Like \*LSCHED_OTHER\*O, ensures that all threads, regardless of
priority, receive some scheduling.  However, \*LSCHED_BG_NP\*O may be denied
execution by any of the other scheduling policies.
.LI "\*Vpriority\*O"
New priority value of the thread specified in \*Vthread\*O. The
priority attribute is dependent upon scheduling policy. Valid values fall
within one of the following five ranges:
.LE
.VL 1m
.LI ""
\*LPRI_OTHER_MIN <= \*Vpriority <= \*LPRI_OTHER_MAX\*O
.LI ""
\*LPRI_FIFO_MIN <= \*Vpriority <= \*LPRI_FIFO_MAX\*O
.LI ""
\*LPRI_RR_MIN <= \*Vpriority <= \*LPRI_RR_MAX\*O
.LI ""
\*LPRI_FG_MIN_NP <= \*Vpriority <= \*LPRI_FG_MAX_NP\*O
.LI ""
\*LPRI_BG_MIN_NP <= \*Vpriority <= \*LPRI_BG_MAX_NP\*O
.LE
.PP
If you create a new thread without specifying a threads attributes
object that contains a changed priority attribute, the default
priority of the newly created thread is the midpoint between
\*LPRI_OTHER_MIN\*O and \*LPRI_OTHER_MAX\*O (the midpoint between the
minimum and the maximum for the \*LSCHED_OTHER\*O policy).
.PP
When you call this routine to specify a minimum or maximum priority,
use the appropriate symbol \(em for example, \*LPRI_FIFO_MIN\*O or
\*LPRI_FIFO_MAX\*O. To specify a value between the minimum and
maximum, use an appropriate arithmetic expression. For example, to
specify a priority mid-way between the minimum and maximum for the
Round Robin scheduling policy, specify the following concept using
your programming language's syntax:
.sp
.oS
pri_rr_mid = (PRI_RR_MIN + PRI_RR_MAX)/2
.oE
.PP
If your expression results in a value outside the range of minimum to
maximum, an error results when you use it.
.wH "<endparameters>"
.SH DESCRIPTION
.PP
This routine changes the current scheduling policy and priority of a thread.
Call this routine to change both the priority and scheduling policy of a
thread at the same time. To change only the priority, call the
\*Lpthread_setprio\*O routine.
.PP
A thread changes its own scheduling policy and priority
.wH "<mark>"
by using the identifier returned by \*Lpthread_self\*O.
.wH "<endmark>"
Changing the scheduling policy or priority, or both, of a thread can cause
it to start executing or to be preempted by another thread.
.PP
This routine is different from \*Lpthread_attr_setprio\*O and
\*Lpthread_attr_setsched\*O because those routines set the priority and
scheduling policy attributes that are used to establish the priority and
scheduling policy of a new thread when it is created. This routine, however,
changes the priority and scheduling policy of an existing thread.
.SH RETURN VALUES
.PP
The previous policy of the thread specified in \*Lthread\*O is returned.
.PP
If an error condition occurs, this routine returns \-1 and sets
\*Eerrno\*O to the corresponding error value. Possible return values
are as follows:
.sp
.TS
tab(@);
l l lw(2.5i).
\*LReturn@Error@Description\*O
_
\Scheduling policy value@@Successful completion.
\&\-1@[\*LEINVAL\*O]@T{
The value specified by \*Vscheduler\*O is invalid.
T}
\&\-1@[\*LENOTSUP\*O]@T{
An attempt is made to set the policy to an unsupported value.
T}
\&\-1@[\*LESRCH\*O]@T{
The value specified by \*Vthread\*O does not refer to an existing thread.
T}
\&\-1@[\*LEPERM\*O]@T{
The caller does not have the appropriate privileges to set the priority of the specified thread.
T}
.TE
.wH "<endnas_return>"
.cS
.SH EXAMPLES
.PP
.oS
int pthread_setscheduler (pthread_t *thread, int scheduler,
 int priority);
.oE
.cE
.wH "<endnas_examples>"
.SH RELATED INFORMATION
.PP
\*Lpthread_attr_setprio\*O(3),
\*Lpthread_attr_setsched\*O(3),
\*Lpthread_create\*O(3),
\*Lpthread_self\*O(3),
\*Lpthread_setprio\*O(3)
.EQ
delim off
.EN

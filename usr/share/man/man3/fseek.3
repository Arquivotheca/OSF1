.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: fseek.3,v $ $Revision: 3.2.7.4 $ (DEC) $Date: 1994/01/13 17:34:31 $
.\"
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.TH fseek 3
.SH NAME
.PP
\*Lfseek\*O, \*Lfseek_unlocked\*O, \*Lrewind\*O, \*Lftell\*O, \*Lfgetpos\*O, \*Lfsetpos\*O \- Reposition the file pointer of a stream
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <stdio.h>
.PP
\*Lint fseek(
.nL
        \*LFILE \(**\*Vstream\*L,
.nL
        \*Llong int \*Voffset\*L,
.nL
        \*Lint \*Vwhence\*L);\*O
.PP
\*Lint fseek_unlocked(
.nL
        \*LFILE \(**\*Vstream\*L,
.nL
        \*Llong int \*Voffset\*L,
.nL
        \*Lint \*Vwhence\*L);\*O
.PP
\*Lvoid rewind(
.nL
        \*LFILE \(**\*Vstream\*L);\*O
.PP
\*Llong int ftell(
.nL
        \*LFILE \(**\*Vstream\*L);\*O
.PP
\*Lint fsetpos(
.nL
        \*LFILE *\*Vstream\*L,
.nL
        \*Lconst fpos_t *\*Vposition\*L);\*O
.PP
\*Lint fgetpos(
.nL
        \*LFILE *\*Vstream\*L,
.nL
        \*Lfpos_t *\*Vposition\*L);\*O
.sE
.SH PARAMETERS
.PP
.VL
.LI "\*Vstream\*O"
Specifies the I/O stream.
.LI "\*Voffset\*O"
Determines the position of the next operation.
.LI "\*Vwhence\*O"
Determines the value for the file pointer associated
with the\*V stream\*O parameter.
.LI "\*Vposition\*O"
Specifies the value of the file position indicator.
.LE
.SH DESCRIPTION
.PP
.iX "fseek function"
.iX "fseek_unlocked function"
.iX "rewind function"
.iX "ftell function"
.iX "fgetpos function"
.iX "fsetpos function"
.iX "stream" "setting file pointer for"
.iX "stream" "returning file pointer for"
The \*Lfseek(\|)\*O function sets the position of the next input
or output operation on the I/O stream specified by the \*Vstream\*O
parameter. The position of the next operation is determined by the
\*Voffset\*O parameter, which can be either positive or negative.
.PP
The \*Lfseek(\|)\*O function sets the file pointer associated
with the specified \*Vstream\*O as follows:
.ML
.LI
If the \*Vwhence\*O parameter is \*LSEEK_SET(0)\*O, the pointer is set to the
value of the \*Voffset\*O parameter.
.LI
If the \*Vwhence\*O parameter is \*LSEEK_CUR(1)\*O, the pointer is set to its
current location plus the value of the \*Voffset\*O parameter.
.LI
If the \*Vwhence\*O parameter is \*LSEEK_END(2)\*O, the pointer is set to the
size of the file plus the value of the \*Voffset\*O parameter.
.LE
.PP
The \*Lfseek(\|)\*O function fails if attempted on a file that
was not opened with the \*Lfopen(\|)\*O function. In
particular, the \*Lfseek(\|)\*O function cannot be used on a terminal
or on a file opened with the \*Lpopen(\|)\*O function.
.PP
A successful call to the \*Lfseek(\|)\*O function clears the End-of-File
indicator for the stream and undoes any effects of the
\*Lungetc(\|)\*O function on the same stream.
After a call to the \*Lfseek(\|)\*O function, the next operation
on an update stream may be either input or output.
.PP
If the stream is writable, and buffered data was not written to the
underlying file, the \*Lfseek(\|)\*O
function causes the unwritten data to be written to
the file and marks the \*Lst_ctime\*O and \*Lst_mtime\*O
fields of the file for update.
.PP
If the most recent operation (ignoring any \*Lftell(\|)\*O operations) on
a given stream was \*Lfflush(\|)\*O, then the \*Lfseek(\|)\*O function
causes the file offset in the underlying open file descriptor to be
adjusted to reflect the location specified by the \*Lfseek(\|)\*O
function.
.PP
The \*Lfseek(\|)\*O function allows the file-position indicator to be set
beyond the end of existing data in the file.  If data is later written
at this point, subsequent reads of data in the gap will return bytes
with the value 0 (zero) until data is actually written into the gap.
The \*Lfseek(\|)\*O function does not, by itself, extend the size of a file.
.PP
The \*Lrewind(\|)\*O function is equivalent to \*L(void) fseek (\*Vstream\*L,
0L, SEEK_SET)\*O, except that \*Lrewind(\|)\*O also clears the error indicator.
.PP
The \*Lftell(\|)\*O
function obtains the current value of the file position indicator
for the specified stream.
.PP
The \*Lfgetpos(\|)\*O and \*Lfsetpos(\|)\*O functions are similar to the \*Lftell(\|)\*O and
\*Lfseek(\|)\*O
functions, respectively. The \*Lfgetpos(\|)\*O function stores the current value
of the file position indicator for the stream pointed to by the
\*Vstream\*O parameter in the object pointed to by the \*Vposition\*O parameter.
The\*L fsetpos \*Ofunction sets the file position indicator
according to the value of the \*Vposition\*O parameter, returned
by a prior call to the \*Lfgetpos(\|)\*O function.
.PP
A successful call to the \*Lfsetpos(\|)\*O function clears the EOF
indicator and undoes any effects of the \*Lungetc(\|)\*O function.
.PP
The \*Lfseek_unlocked(\|)\*O function is functionally identical to the
\*Lfseek(\|)\*O function, except that \*Lfseek_unlocked(\|)\*O
may be safely used only within a scope that
is protected by the
\*Lflockfile(\|)\*O and \*Lfunlockfile(\|)\*O functions used as a pair.
The caller must ensure that the stream is locked before using these
functions.
.SH NOTES
.PP
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Full use.
.LE
.SH RETURN VALUES
.PP
Upon successful completion, the \*Lfseek(\|)\*O and \*Lfseek_unlocked(\|)\*O
functions return a value of 0 (zero). If the \*Lfseek(\|)\*O or
\*Lfseek_unlocked(\|)\*O function fails, a
value of -1 is returned, and \*Lerrno\*O is set to indicate the error.
.PP
The \*Lrewind(\|)\*O function does not return a value.
.PP
Upon successful completion,
the \*Lftell(\|)\*O function returns the offset of the current
byte relative to the beginning of the file associated with the named
stream.  Otherwise, a value of -1 is returned, and \*Lerrno\*O
is set to indicate the error.
.PP
Upon successful completion, the \*Lfgetpos(\|)\*O and
\*Lfsetpos(\|)\*O functions return a value of 0 (zero).
If the \*Lfgetpos(\|)\*O or the \*Lfsetpos(\|)\*O function fails, a value of -1
is returned, and \*Lerrno\*O is set to [EINVAL].
.SH ERRORS
.PP
The \*Lfseek(\|)\*O or \*Lfseek_unlocked(\|)\*O function fails if
either the \*Vstream\*O is unbuffered, or the \*Vstream\*O's
buffer needed to be flushed and the call to
\*Lfseek(\|)\*O or \*Lfseek_unlocked(\|)\*O caused an underlying
\*Llseek(\|)\*O or \*Lwrite(\|)\*O function to be invoked.
.\" .zA "defect, 7619, R1.1.2, Fixed font error"
In addition, if any of the following conditions occurs, the
\*Lfseek(\|)\*O or \*Lfseek_unlocked(\)\*O function sets
\*Lerrno\*O to the value that corresponds to the condition.
.\" .zZ "defect, 7619, R1.1.2, Fixed font error"
.VL
.LI "[EAGAIN]"
The O_NONBLOCK flag is set for the file descriptor underlying the
\*Vstream\*O parameter
and the process would be delayed in the write operation.
.LI "[EBADF]"
The file descriptor underlying the \*Vstream\*O parameter
is not a valid file descriptor open for writing.
.LI "[EFBIG]"
An attempt was made to write to a file that exceeds the
process's file size limit or the maximum file size.
(See the \*Lulimit\*O(3) reference page.)
.LI "[EINTR]"
The write operation was terminated by a signal, and either none, some,
or all the data was transferred.  If there is buffered I/O, it is
recommended that you call the \*Lfflush(\|)\*O function before the
\*Lfseek(\|)\*O function to guarantee that the buffer characters were written.
.LI "[EINVAL]"
The \*Vwhence\*O parameter is an invalid value, or the resulting file
offset would be invalid.
.LI "[EIO]"
The process is a member
of a background process group attempting to write to its
controlling terminal, the TOSTOP signal is set, the process is
neither ignoring nor
blocking SIGTTOU, and the process group of the process is
orphaned.
.LI "[ENOSPC]"
There was no free space remaining on the device containing
the file.
.LI "[EPIPE]"
An attempt was made to write to a pipe or FIFO that is not open
for reading by any process.
A SIGPIPE signal will also be sent to the process.
.LE
.PP
The \*Lrewind(\|)\*O and \*Lftell(\|)\*O
functions fail under the same conditions as the
\*Lfseek(\|)\*O function,
with the exception of [EINVAL], which does not apply.
.PP
If the following conditions occur, the \*Lfgetpos(\|)\*O or
\*Lfsetpos(\|)\*O function sets
\*Lerrno\*O to the value that corresponds to the condition.
.VL
.\" .zA "defect, 7619, R1.1.2, Added two errors"
.LI "[EBADF]"
The file descriptor underlying the \*Vstream\*O parameter
is not a valid file descriptor.
.LI "[EINVAL]"
The \*Vstream\*O
parameter does not point to a valid \*LFILE\*O structure or the
\*Vposition\*O parameter is negative.
.LI "[ESPIPE]"
An illegal attempt was made to get or set the file position of a
pipe or FIFO.
.\" .zZ "defect, 7619, R1.1.2, Added two errors"
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Llseek\*O(2),
\*Lfopen\*O(3).
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: ulimit.3,v $ $Revision: 3.5.6.2 $ (DEC) $Date: 1993/10/04 19:28:46 $
.\"
.\" (c) Copyright 1990, 1991, 1992 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 Release 1.0.4
.\"build rmifdef
.\"
.\" Copyright (c) 1990, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\"
.\"build rmifdef tbl eqn
.TH ulimit 3
.SH NAME
\*Lulimit\*O \- Sets and gets user limits
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS 
.sS
\*L#include <ulimit.h>
.sp .4v
\*Llong ulimit (
.nL
	\*Lint \*Vcommand\*O,\*L
.nL
	off_t \*Vnew_limit\*L,
.nL
	\|.\|.\|. \*L);
.sE 
.SH PARAMETERS
.VL 
.LI "\*Vcommand"
\*OSpecifies the form of control. The \*Vcommand\*O
parameter values follow:
.wH .RS  Can not be used in nested lists
.\"from TP .5i"  
.VL
.LI "\*LUL_GETFSIZE" 
\*OReturns the process file size limit. The
limit is in units of UBSIZE blocks (see the \*Lsys/param.h \*Ofile)
and is inherited by child processes.  Files of any size can be read.
.\"from TP "  
.LI "\*LUL_SETFSIZE" 
\*OSets the process file size limit for output operations to the
value of the\*V new_limit\*O parameter, and returns the new file size
limit.  Any process can decrease
this limit, but only a process with
superuser
privilege can increase the limit.
.\"from TP "  
.LI "\*LGET_GETBREAK" 
\*OReturns the maximum possible break value
(described in the \*Lbrk(\|)\*O and \*Lsbrk(\|)\*O functions).
.wH .RE
.\"from TP "  
.LE
.LI "\*Vnew_limit" 
\*OSpecifies the new limit.  Currently, this parameter is significant
only for UL_SETFSIZE.
.LE 
.SH DESCRIPTION
.iX "ulimit function"
.iX "user limits" "setting and getting"
.iX "setting user limits"
.iX "getting user limits"
.iX "limits" "for users"
.PP 
The \*Lulimit(\|)\*O function controls process limits.
.PP 
\*OFor the purposes of future expansion, the \*Lulimit(\|)\*O function
accepts a variable number of arguments, but currently only the first
argument is significant.  During access to remote files, the process
limits of the local node are used.
.SH NOTES
.PP
The
\*Lulimit(\|)\*O
function is implemented in terms of
\*Lsetrlimit(\|)\*O;
therefore, the two interfaces should not be used in the same program.
The result of doing so is undefined.
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Trial use
.LE
.\" .SH EXAMPLE
.\" \*OTo increase the size of the stack segment by 2048 bytes, and set
.\" the \*Lrc\*O variable to the new lowest valid stack address, enter:
.\" .oS
.\" rc = ulimit(1006, ulimit(1005, 0) - 2048);
.\" .oE
.SH RETURN VALUES
.PP 
The UL_GETFSIZE and UL_GETBREAK commands return the requested process
limits.  The UL_SETFSIZE command, when successful, returns an
arbitrary nonnegative value.
If the \*Lulimit(\|)\*O function fails, a value of -1 is returned
and \*Lerrno\*O is set to indicate the error.
.SH ERRORS
.PP 
If the \*Lulimit(\|)\*O function fails, the limit remains unchanged
and
\*Lerrno\*O
is be set to one of the following values:
.\"from TP 1i"  
.VL 1i
.LI "[EPERM]"
A process without appropriate system
privilege attempts to increase the file size limit.
.\"from TP 1i"  
.LI "[EINVAL]" 
The \*Vcommand\*O parameter is invalid.
.LE 
.SH RELATED INFORMATION
.PP 
Functions:
\*Lbrk\*O(2),
\*Lgetrlimit\*O(2),
\*Lpathconf\*O(3),
\*Lwrite\*O(2)
.iX "ulimit function"
.EQ
delim off
.EN

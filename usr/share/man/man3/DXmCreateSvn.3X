.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: DXmCreateSvn.3X,v $ $Revision: 3.4.6.4 $ (DEC) $Date: 1993/07/27 21:26:04 $
.\"
.TH DXmCreateSvn 3X
.SH NAME
\*LDXmCreateSvn\*O \- Creates an SVN widget
.SH SYNOPSIS
.PP
.iX "DXmCreateSvn"
.sS
\*LWidget DXmCreateSvn(\*Vparent\*L, \*Vname\*L, \*Varglist\*L, \*Vargcount\*L)
        Widget  \*Vparent\*L;
        char    *\*Vname\*L;
        Arg     *\*Varglist\*L;
        int     \*Vargcount\*L;\*O
.sE
.SH PARAMETERS
.PP
.VL 4m
.LI "\*Vparent\*O"
The identifier (widget ID) of the parent widget.
.LI "\*Vname\*O"
A character string that defines the name of the widget.
.LI "\*Varglist\*O"
The application argument list.
.LI "\*Vargcount\*O"
An integer that represents the number of arguments in the application
argument list.  If there are no arguments in the argument list, \*Vargcount\*O
must equal 0.  However, when \*Vargcount\*O equals 0, the argument list
does not have to be Null.
.LE
.SH DESCRIPTION
.PP
The \*LDXmCreateSvn\*O routine allows you to create a hierarchical structure
of information that is presented to a user in an organized manner and in a way
that lets the user navigate in, and select from, that structure.  Your
application need only tell the SVN widget about the organization of the
data and respond to SVN widget callbacks; the SVN widget is responsible
for actually displaying the data.
.PP
You can use SVN to display hierarchical information in three different
formats, or modes:
.ML
.LI
Outline format.
.LI
Tree format, which can be oriented from the top, the left, in
outline form, and in a user-defined style.
.LI
Column format, which differs from outline format in that a window
pane separates a set of components from the rest of the display.
You can scroll horizontally on each side, independently of the other side.
However, you have only one vertical scroll bar.
.LE
.PP
Each SVN line, or entry, in your hierarchy can display as many as thirty
pieces of information (called components) depending on the amount of
information users need.  The components can be of three data types: text,
pixmaps, and widgets.
.PP
The SVN widget includes additional support routines (also described in
this document) that allow your application to insert and remove components,
set the text associated with a component, set a component to be hidden,
set and determine a components's width, and determine a component's number.
.PP
When you create an SVN widget, note that applications must be able to
communicate with the widget through Toolkit routine calls that request
information about and manipulate selections.  As such, when you use the
\*LDXmCreateSvn\*O routine to create the SVN widget, you must include the
following SVN callbacks:
.ML
.LI
\*LDXmSvnNattachToSourceCallback\*O
.LI
\*LDXmSvnNgetEntryCallback\*O
.LI
\*LDXmSvnNselectAndConfirmCallback\*O
.LE
.SS Callback Structures
You can set the following widget-specific resources in the \*Varglist\*O:
.PP
.oS
XtCallbackList  DXmSvnNattachToSourceCallback
Boolean         DXmSvnNcolumnLines;
Dimension       DXmSvnNdefaultSpacing;
XtCallbackList  DXmSvnNdetachFromSourceCallback
XtCallbackList  DXmSvnNdisplayChangedCallback
short           DXmSvnNdisplayMode;
XtCallbackList  DXmSvnNdraggingCallback
XtCallbackList  DXmSvnNdraggingEndCallback
XtCallbackList  DXmSvnNentrySelectedCallback
XtCallbackList  DXmSvnNentryTransferCallback
XtCallbackList  DXmSvnNentryUnselectedCallback
Boolean         DXmSvnNexpectHighlighting;
XtCallbackList  DXmSvnNextendConfirmCallback
Boolean         DXmSvnNfixedWidthEntries;
XmFontList      DXmSvnNfontList;
XmFontList      DXmSvnNfontListLevel0;
XmFontList      DXmSvnNfontListLevel1;
XmFontList      DXmSvnNfontListLevel2;
XmFontList      DXmSvnNfontListLevel3;
XmFontList      DXmSvnNfontListLevel4;
Boolean         DXmSvnNforceSeqGetEntry;
XtCallbackList  DXmSvnNgetEntryCallback
Dimension       DXmSvnNghostHeight;
Pixmap          DXmSvnNghostPixmap;
Dimension       DXmSvnNghostWidth;
Position        DXmSvnNghostX;
Position        DXmSvnNghostY;
XtCallbackList  DXmSvnNhelpRequestedCallback;
Dimension       DXmSvnNindentMargin;
Boolean         DXmSvnNliveScrolling;
Boolean         DXmSvnNmultipleSelections;
XmString        DXmSvnNnavWindowTitle;
longword        DXmSvnNnumberOfEntries;
Widget          DXmSvnNoutlineHScrollWidget;
Widget          DXmSvnNpaneWidget;
XtCallbackList  DXmSvnNpopupMenuCallback
longword        DXmSvnNprimaryPercentage
Widget          DXmSvnNprimaryWindowWidget
Position        DXmSvnNsecondaryBaseX;
Boolean         DXmSvnNsecondaryComponentsUnmapped;
Widget          DXmSvnNsecondaryWindowWidget;
XtCallbackList  DXmSvnNselectAndConfirmCallback
short           DXmSvnNselectionMode;
XtCallbackList  DXmSvnNselectionsDraggedCallback
Boolean         DXmSvnNshowPathToRoot;
short           DXmSvnNstartColumnComponent;
short           DXmSvnNstartLocationCursor;
XtCallbackList  DXmSvnNtransitionsDoneCallback
Dimension       DXmSvnNtreeArcWidth;
Boolean         DXmSvnNtreeCenteredComponents;
Boolean         DXmSvnNtreeEntryOutlines;
Boolean         DXmSvnNtreeEntryShadows;
Boolean         DXmSvnNtreeIndexAll;
Dimension       DXmSvnNtreeLevelSpacing;
Boolean         DXmSvnNtreePerpendicularLines;
Dimension       DXmSvnNtreeSiblingSpacing;
short           DXmSvnNtreeStyle;
Boolean         DXmSvnNtruncateText;
Boolean         DXmSvnNuseScrollButtons;
.oE
.SS Resources
.VL 4m
.LI "\*LDXmSvnNattachToSourceCallback\*O"
Callback (or callbacks) made when a widget attaches to the source data
module, which then calls the \*LDXmSvnAddEntries\*O routine to specify
the initial entries (and number of entries) in the data hierarchy.  The
callback reason is \*LDXmSvnCRAttachToSource\*O.  The default is Null.
Access is CG.
.LI "\*LDXmSvnNcolumnLines\*O"
A Boolean resource that, when True, specifies that columns are to be
separated with a line.  The default is False.  Access is CSG.
.LI "\*LDXmSvnNdefaultSpacing\*O"
The number of pixels between components.  The default is 12 pixels.
Access is CSG.
.LI "\*LDXmSvnNdetachFromSourceCallback\*O"
Callback made when the widget is detached from the source data module
(the widget is being destroyed).  The application records that this widget
will never call back.  The callback reason is \*LDXmSvnCRDetachFromSource\*O.
The default is Null.  Access is CSG.
.LI "\*LDXmSvnNdisplayChangedCallback\*O"
Callback made when the entries currently being displayed to the user have
changed.  This change may be in response to an expand or collapse operation,
scrolling, or the application issuing calls to the \*LDXmSvnPositionDisplay\*O
routine.
.IP
The callback reason is \*LDXmSvnCRDisplayChanged\*O.  An additional
callback field is \*Vloc_cursor_entry_number\*O, which is the number of
the entry where the location cursor is currently displayed.  The default
is Null.  Access is CSG.
.LI "\*LDXmSvnNdisplayMode\*O"
Specifies which display should appear on the screen, indicated by one of
the following values:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Value@Description
.sp
_
.sp
DXmSvnKdisplayOutline@T{
Display in outline mode.
T}
.sp
DXmSvnKdisplayColumns@T{
Display in column mode.
T}
.sp
DXmSvnKdisplayTree@T{
Display in tree mode.
T}
.sp
DXmSvnKdisplayAllModes@T{
Used only by the DXmSvnSetComponentHidden routine to hide a component in
all modes.
T}
.sp
DXmSvnKdisplayNone@T{
Used only by the DXmSvnSetComponentHidden routine to display (not hide)
a component in any mode.
T}
.sp
_
.TE
.IP
The default is \*LDXmSvnKdisplayOutline\*O.  Access is CSG.
.LI "\*LDXmSvnNdraggingCallback\*O"
Callback made when a user presses MB2 to drag a set of entries.  This
callback is required for application-controlled dragging (which you set
by using the \*LDXmSvnSetApplDragging\*O routine).
.IP
The callback reason is \*LDXmSvnCRDragging\*O.  Other callback fields are
as follows:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Field@Description
.sp
_
.sp
time@T{
The time that the button press event occurred
T}
.sp
x@T{
The \*Vx\*O position of the pointer
T}
.sp
y@T{
The \*Vy\*O position of the pointer
T}
.sp
dragged_entry_number@T{
The number of the entry currently being dragged while MB2 is pressed
T}
.sp
loc_cursor_entry_number@T{
The number of the entry where the location cursor is currently displayed
T}
.sp
event@T{
A pointer to the XEvent that generated this callback
T}
.sp
_
.TE
.IP
The default is Null.  Access is CSG.
.LI "\*LDXmSvnNdraggingEndCallback\*O"
Callback made when the user releases MB2 after dragging a set of entries.
This callback is required for application-controlled dragging (which you
set by using the \*LDXmSvnSetApplDragging\*O routine).
.IP
The callback reason is \*LDXmSvnCRDraggingEnd\*O.  Other callback fields
are as follows:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Field@Description
.sp
_
.sp
time@T{
The time that the button release event occurred
T}
.sp
x@T{
The \*Vx\*O position of the cursor when the mouse button was released
T}
.sp
y@T{
The \*Vy\*O position of the cursor when the mouse button was released
T}
.sp
loc_cursor_entry_number@T{
The number of the entry where the location cursor is currently displayed
T}
.sp
event@T{
A pointer to the XEvent that generated this callback
T}
.sp
_
.TE
.IP
The default is Null.  Access is CSG.
.LI "\*LDXmSvnNentrySelectedCallback\*O"
Callback made when the user selects an entry.  The fields provided in the
callback structure enable the application to obtain more information about
the selected entry from the source module.
.IP
The callback reason is \*LDXmSvnCREntrySelected\*O.  Other callback fields
are as follows:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Field@Description
.sp
_
.sp
entry_number@T{
The entry selected
T}
.sp
component_number@T{
The component within the entry the mouse was positioned over when the
entry was selected
T}
.sp
time@T{
Time when the entry was selected
T}
.sp
entry_tag@T{
The value (previously set in the application with the DXmSvnSetEntry or
DXmSvnSetEntryTag routine) associated with the \*Ventry_number\*O field
T}
.sp
_
.TE
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Value@Description
.sp
_
.sp
DXmSvnKnotFirst@T{
This is not the first selection that has been made.
T}
.sp
DXmSvnKfirstOfOne@T{
There is only one selection being made.
T}
.sp
DXmSvnKfirstOfMany@T{
This is the first of many selections being made.
T}
.sp
_
.TE
.IP
This value (when treated as a Boolean function) is usually True.  It is
False only when the user has made a range selection and this is not the
first \*LDXmSvnNentrySelectedCallback\*O.)
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Field@Description
.sp
_
.sp
entry_level@T{
The entry's level number
T}
.sp
loc_cursor_entry_number@T{
The number of the entry where the location cursor is currently displayed
T}
.sp
event@T{
A pointer to the XEvent that generated this callback
T}
.sp
_
.TE
.IP
The default is Null.  Access is CSG.
.LI "\*LDXmSvnNentryTransferCallback\*O"
Callback made when the user clicks on MB2 without moving the mouse.
.IP
The callback reason is \*LDXmSvnCREntryTransfer\*O.  Other callback fields
are as follows:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Field@Description
.sp
_
.sp
loc_cursor_entry_number@T{
The number of the entry where the location cursor is currently displayed.
T}
.sp
_
.TE
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Value@Description
.sp
_
.sp
DXmSvnKtransferUnknown@T{
No modifier was specified with the MB2 click.
T}
.sp
DXmSvnKtransferMove@T{
The ALT modifier was specified with the MB2 click.
T}
.sp
DXmSvnKtransferCopy@T{
The Ctrl modifier was specified with the MB2 click.
T}
.sp
event@T{
A pointer to the X event structure describing the event that generated
this callback.
T}
.sp
_
.TE
.IP
The default is Null.  Access is CSG.
.LI "\*LDXmSvnNentryUnselectedCallback\*O"
Callback made when the user cancels ("unselects") the selection of an entry.
.IP
The fields provided in the callback structure enable an application
to obtain more information about the entry from its source module.
.IP
The callback reason is \*LDXmSvnCREntryUnselected\*O.  Other callback
fields are as follows:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Field@Description
.sp
_
.sp
entry_number@T{
The canceled entry
T}
.sp
component_number@T{
The component within the entry the mouse was positioned over when the
entry was canceled
T}
.sp
time@T{
Time when the selection was canceled
T}
.sp
loc_cursor_entry_number@T{
The number of the entry where the location cursor is currently displayed
T}
.sp
event@T{
A pointer to the X event structure describing the event that generated
this callback
T}
.sp
_
.TE
.IP
The default is Null.  Access is CSG.
.LI "\*LDXmSvnNexpectHighlighting\*O"
A Boolean resource that, when True, creates a rectangle large enough
to highlight the entries.  The default is False.  Access is CSG.
.LI "\*LDXmSvnNextendConfirmCallback\*O"
Callback made when the user double clicks MB1 with multiple entries
selected.  To determine which entries are selected, the application must
call the \*LDXmSvnGetNumSelections\*O and the \*LDXmSvnGetSelections\*O
routines.
.IP
The callback reason is \*LDXmSvnCRExtendConfirm\*O.  Other callback
fields are as follows:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Field@Description
.sp
_
.sp
entry_number@T{
The entry selected
T}
.sp
time@T{
Time when the double click occurred
T}
.sp
loc_cursor_entry_number@T{
The number of the entry where the location cursor is currently displayed
T}
.sp
event@T{
A pointer to the X event structure describing the event that generated
this callback
T}
.sp
_
.TE
.IP
The default is Null.  Access is CSG.
.LI "\*LDXmSvnNfixedWidthEntries\*O"
A Boolean resource that, when True, specifies that all entries, including
the selectable white space to the right of each entry, will be the same
width.  Fixed width entries are the width of the display window.  The
default is True.  Access is CSG.
.LI "D\*LXmSvnNfontList\*O"
The default font when no level font is specified.
The default is DXmDefaultFont.  Access is CSG.
.LI "\*LDXmSvnNfontListLevel0\*O"
The default font list used by level 0 entries.  The default
is Null.  Access is CSG.
.LI "\*LDXmSvnNfontListLevel1\*O"
The default font list used by level 1 entries.  The default is Null.
Access is CSG.
.LI "\*LDXmSvnNfontListLevel2\*O"
The default font list used by level 2 entries.  The default is Null.
Access is CSG.
.LI "\*LDXmSvnNfontListLevel3\*O"
The default font list used by level 3 entries.  The default is Null.
Access is CSG.
.LI "\*LDXmSvnNfontListLevel4\*O"
The default font list used by level 4 entries.  The default is Null.
Access is CSG.
.LI "\*LDXmSvnNforceSeqGetEntry\*O"
A Boolean resource that, when True, specifies that the SVN widget
generate the DXmSvnNgetEntryCallback callbacks in sequential order only.
The default is False.  Access is CSG.
.LI "\*LDXmSvnNgetEntryCallback\*O"
Callback made when the SVN widget requires information about an entry.
The application should respond by calling the \*LDXmSvnSetEntry\*O routine.
Control should not be returned from the callback until this call and
subsequent calls are made to the \*LDXmSvnSetComponentPixmap ,\*O
\*LDXmSvnSetComponentText ,\*O or \*LDXmSvnSetComponentWidget\*O routines.
.IP
The callback reason is \*LDXmSvnCRGetEntry\*O.  Other callback fields
are as follows:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Field@Description
.sp
_
.sp
entry_number@T{
The entry number required
T}
.sp
entry_tag@T{
The value (previously set in the application with the DXmSvnSetEntry or
DXmSvnAddEntries routine) associated with the \*Ventry_number\*O field
T}
.sp
entry_level@T{
The entry's level number
T}
.sp
loc_cursor_entry_number@T{
The number of the entry where the location cursor is currently displayed
T}
.sp
_
.TE
.IP
The default is Null.  Access is CSG.
.LI "\*LDXmSvnNghostHeight\*O"
The height of the pixmap for a specific type of highlighted image, or "ghost",
that follows the entries as they are dragged.
The default is 0.  Access is CSG.
.LI "\*LDXmSvnNghostPixmap\*O"
The pixmap for a  specific type of highlighted image,
or "ghost", that follows the entries as they are dragged.
The default is Null.  Access is CSG.
.LI "\*LDXmSvnNghostWidth\*O"
The width of the pixmap for a specific type of highlighted image,
or "ghost", that follows the entries as they are dragged.
The default is 0.  Access is CSG.
.LI "\*LDXmSvnNghostX\*O"
Relative \*Vx\*O position on the screen where the dragging "ghost" (a
specific type of highlighted image that follows the entries as they are
dragged) is attached to the cursor.  The default is 0.  Access is CSG.
.LI "\*LDXmSvnNghostY\*O"
Relative \*Vy\*O position on the screen where the dragging "ghost" (a
specific type of highlighted image that follows the entries as they are
dragged) is attached to the cursor.  The default is 0.  Access is CSG.
.LI "\*LDXmSvnNhelpRequestedCallback\*O"
Callback made when the user requests help.  The callback reason is
\*LDXmSvnCRHelpRequested\*O.  Other callback fields are as follows:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Field@Description
.sp
_
.sp
component_number@T{
The component number within the entry on which help was requested
T}
.sp
time@T{
The time when the user requested help
T}
.sp
entry_number@T{
The entry number for which help was requested
T}
.sp
entry_tag@T{
The value (previously set in the application with the DXmSvnSetEntry
routine) associated with the \*Ventry_number\*O field
T}
.sp
entry_level@T{
The level number of the entry
T}
.sp
loc_cursor_entry_number@T{
The number of the entry where the location cursor is currently displayed
T}
.sp
event@T{
A pointer to the X event structure describing the event that generated
this callback
T}
.sp
_
.TE
.IP
Note that the values for the \*Ventry_number\*O and
\*Vloc_cursor_entry_number\*O fields vary depending on how the user
requests help, as follows:
.ML
.LI
The user presses the Help key on the keyboard.
.IP
In this instance, the SVN widget returns a valid entry number
in the \*Vloc_cursor_entry_number\*O field and then invokes SVN help
for the corresponding entry.
.LI
The user invokes context-sensitive help and then clicks on MB1.
.IP
In this instance, the application uses context-sensitive help (which you
include in the application by specifying the \*LDXmHelpOnContext\*O
routine) to invoke help for an SVN subwidget.  A negative value in the
\*Ventry_number\*O field indicates which of the following subwidgets the
user has clicked on to request help:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Subwidget@Value
.sp
_
.sp
DXmSvnKHelpScroll@T{
\-1
T}
.sp
DXmSvnKHelpNavButton@T{
\-2
T}
.sp
DXmSvnKNavWindow @T{
\-3
T}
.sp
_
.TE
.LE
.IP
The default is Null.  Access is CSG.
.LI "\*LDXmSvnNindentMargin\*O"
The number of pixels each entry level should be indented.  The default is 16
pixels.  Access is CSG.
.LI "\*LDXmSvnNliveScrolling\*O"
A Boolean resource that, when True, allows scrolling in outline and
column display mode, but not in tree mode.  If an application uses the
existing index window instead, this resource must be set to False.
The default is True.  Access is CSG.
.LI "\*LDXmSvnNprimaryPercentage\*O"
The percentage of the display window that is in the primary side of the
column view.  The default is 50 percent.  Access is CSG.
.LI "\*LDXmSvnNprimaryWindowWidget\*O"
The identifier (widget ID) of the primary window widget in the SVN display.
The default is Null.  Access is G (read-only).
.LI "\*LDXmSvnNmultipleSelections\*O"
A Boolean resource that, when True, allows the user to specify
multiple selections.  The default is True.  Access is CSG.
.LI "\*LDXmSvnNnavWindowTitle\*O"
The title for a pop-up navigation window.  The default is Null.  Access is CSG.
.LI "\*LDXmSvnNnumberOfEntries\*O"
The number of entries.  The value increases or decreases as entries are
changed by the \*LDXmSvnAddEntries\*O and \*LDXmSvnDeleteEntries\*O
routines.  Access is G (read-only).
.LI "\*LDXmSvnNoutlineHScrollWidget\*O"
The identifier (widget ID) of the primary horizontal scroll bar.
The default is Null.  Access is G (read-only).
.LI "\*LDXmSvnNpaneWidget\*O"
The identifier (widget ID) of the pane widget.  The default is Null.
Access is G (read-only).
.LI "\*LDXmSvnNpopupMenuCallback\*O"
Callback made after an MB3 click that notifies the application to
generate a pop-up menu for this entry.
.IP
The callback reason is \*LDXmSvnCRPopupMenu\*O.  Other callback fields
are as follows:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Field@Description
.sp
_
.sp
loc_cursor_entry_number@T{
The number of the entry where the location cursor is currently displayed
T}
.sp
event@T{
A pointer to the X event structure describing the event that generated
this callback
T}
.sp
_
.TE
.IP
The default is Null.  Access is CSG.
.LI "\*LDXmSvnNsecondaryBaseX\*O"
The base \*Vx\*O position of the secondary window in the column view.
The default is 0.  Access is CSG.
.LI "\*LDXmSvnNsecondaryComponentsUnmapped\*O"
A Boolean resource that, when True, specifies that secondary components
still exist even though they are not visible in the column view.
The default is False.  Access is CSG.
.LI "\*LDXmSvnNsecondaryWindowWidget\*O"
The identifier (widget ID) of the secondary widget in the SVN display.
The default is Null.  Access is G (read-only).
.LI "\*LDXmSvnNselectAndConfirmCallback\*O"
Callback made when the user double clicks MB1 on a single entry,
indicating that the user wants to expand or collapse (contract) the
entry.  The application can determine which entry has been selected by either
examining the \*Ventry_number\*O and \*Vcomponent_number\*O fields of the
callback data structure or by calling the \*LDXmSvnGetSelections\*O routine.
.IP
This callback is also called when all three of the following conditions exist:
.ML
.LI
The DXmSvnNMultipleSelections resource is set to True.
.LI
There is no DXmSvnNExtendConfirm callback supplied.
.LI
The user has double clicked to terminate the selection of a range of entries.
.LE
.IP
In such an instance, the individual calls are from the highest entry
number selected through the lowest entry number selected.
.IP
The callback reason is \*LDXmSvnCRSelectAndConfirm\*O. Other callback
fields are as follows:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Field@Description
.sp
_
.sp
component_number@T{
The component number on which the mouse was positioned
T}
.sp
time@T{
When the second click of the double click occurred
T}
.sp
entry_number@T{
The entry number of the selected entry
T}
.sp
entry_tag@T{
The value (previously set in the application with the DXmSvnSetEntry
or DXmSvnAddEntries routine) associated with the \*Ventry_number\*O field
T}
.sp
entry_level@T{
The level number of the entry
T}
.sp
loc_cursor_entry_number@T{
The number of the entry where the location cursor is currently displayed
T}
.sp
event@T{
A pointer to the X event structure describing the event that generated
this callback
T}
.sp
_
.TE
.IP
The default is Null.  Access is CSG.
.LI "\*LDXmSvnNselectionMode\*O"
Specifies what is to be selected.  The selection mode, which is used by
the column view, is indicated by one of the following values:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Value@Description
.sp
_
.sp
DXmSvnKselectEntry@T{
Selects the entire entry.
T}
.sp
DXmSvnKselectComp@T{
Selects only the component.
T}
.sp
DXmSvnKselectCompAndPrimary@T{
Selects the current component and the entire primary side of the column view.
T}
.sp
DXmSvnKselectEntryOrComp@T{
Selects either the entire entry (if the selection is made on the primary
side) or only the component (if the selection is made on the secondary side
of the display window).
T}
.sp
_
.TE
.IP
The default is DXmSvnKselectEntry.  Access is CSG.
.LI "\*LDXmSvnNselectionsDraggedCallback\*O"
The user has used MB2 to drag selected entries to another location.
Note that the use of this resource is valid only when application-controlled
dragging has not been set (with the \*LDXmSvnNdraggingCallback\*O and
\*LDXmSvnNdraggingEndCallback\*O callbacks).
.IP
The callback reason is \*LDXmSvnCRSelectionsDragged\*O.  Other callback
fields are as follows:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Field@Description
.sp
_
.sp
component_number@T{
The component number on which the mouse button was released
T}
.sp
x@T{
The \*Vx\*O position at which the mouse button was released
T}
.sp
y@T{
The \*Vy\*O position at which the mouse button was released
T}
.sp
entry_number@T{
The entry number on which the mouse button was released
T}
.sp
entry_tag@T{
The value (previously set in the application with the
DXmSvnSetEntry routine) associated with the \*Ventry_number\*O field
T}
.sp
entry_level@T{
The entry's level number
T}
.sp
loc_cursor_entry_number@T{
The number of the entry where the location cursor is currently displayed
T}
.sp
event@T{
A pointer to the X event structure describing the event that generated
this callback
T}
.sp
_
.TE
.IP
The default is Null (dragging will \*Vnot\*O occur).  Access is CSG.
.LI "\*LDXmSvnNshowPathToRoot\*O"
A Boolean resource that, when True, shows the path to the
root, which is the first entry level in the display (level 0).  This
path is represented by a horizontal line over which the
hierarchy of entry levels (each indented) is displayed.
The default is True.  Access is CSG.
.LI "\*LDXmSvnNstartColumnComponent\*O"
The number of the component that begins the secondary column.
The default is 0, which indicates that no components should be
displayed in the secondary column.  Access is CSG.
.LI "\*LDXmSvnNstartLocationCursor\*O"
Allows the application to specify the entry where the location cursor
will be displayed when the SVN widget is first activated.  You can set this
resource only at widget creation time; it cannot be changed thereafter.
The default position of the location cursor is entry number 1.  Access is C.
.LI "\*LDXmSvnNtransitionsDoneCallback\*O"
Callback made when the user has released MB1 following an
.br
application-controlled drag operation.
.IP
The callback reason is \*LDXmSvnCRTransitionsDone\*O.  Other callback
fields are as follows:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Field@Description
.sp
_
.sp
loc_cursor_entry_number@T{
The number of the entry where the location cursor is currently displayed
T}
.sp
event@T{
A pointer to the X event structure describing the event that generated
this callback
T}
.sp
_
.TE
.IP
The default is Null.  Access is CSG.
.LI "\*LDXmSvnNtreeArcWidth\*O"
The width for the arc of the outline that delineates the boundary between
each tree display mode entry.  The default is 15 pixels.  Access is CSG.
.LI "\*LDXmSvnNtreeCenteredComponents\*O"
A Boolean resource that, when True, centers components vertically within
an entry.  The SVN widget automatically alters the size of the entries to
fit the centered components.  The default is False.  Access is CSG.
.LI "\*LDXmSvnNtreeEntryOutlines\*O"
A Boolean resource that, when True, displays an outline around
tree mode entries.  The default is True.  Access is CSG.
.LI "\*LDXmSvnNtreeEntryShadows\*O"
A Boolean resource that, when True, adds shadowing to the outline
surrounding tree mode entries.  The default is True.  Access is CSG.
.LI "\*LDXmSvnNtreeIndexAll\*O"
A Boolean resource that, when True,  specifies that all tree mode entries
appear in the index window when the user is scrolling.  The default is True.
Access is CSG.
.LI "\*LDXmSvnNtreeLevelSpacing\*O"
Specifies how much space, in pixels, to insert between tree levels.
The default is 5 pixels.  Access is CSG.
.LI "\*LDXmSvnNtreePerpendicularLines\*O"
A Boolean resource that, when True, specifies that lines connecting the
entries in tree mode are perpendicular instead of diagonal.
The default is True.
.LI "\*LDXmSvnNtreeSiblingSpacing\*O"
Specifies how much space, in pixels, to insert between sibling
tree mode entries.  The default is 5 pixels.  Access is CSG.
.LI "\*LDXmSvnNtreeStyle\*O"
Specifies the style (format) of a tree display, as indicated by one of
the following values:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Value@Description
.sp
_
.sp
DXmSvnKtopTree@T{
A vertical tree format (oriented from the top).
T}
.sp
DXmSvnKhorizontalTree@T{
A horizontal tree format (oriented from the left).
T}
.sp
DXmSvnKoutlineTree@T{
Oriented in outline form.
T}
.sp
DXmSvnKuserDefinedTree@T{
Oriented in an application-defined format.  The SVN widget uses the
\*Vx\*O and \*Vy\*O coordinate values you specify for an entry to
determine the entry's position in the tree.
T}
.sp
_
.TE
.IP
The default is DXmSvnKoutlineTree.  Access is CSG.
.LI "\*LDXmSvnNtruncateText\*O"
A Boolean resource that, when True, truncates text that is
too long for the display.  The default is False.  Access is CSG.
.LI "\*LDXmSvnNuseScrollButtons\*O"
A Boolean resource that, when True, creates outer arrows on a scroll bar,
which the user can click on to move the display.  The default is True.
Access is CSG.
.LE
.SS Resources
.sS
\*Ltypedef struct
    {
       int        \*Vreason\*L;
       int        \*Ventry_number\*L;
       int        \*Vcomponent_number\*L;
       int        \*Vfirst_selection\*L;
       int        \*Vx\*L;
       int        \*Vy\*L;
       XtPointer  \*Ventry_tag\*L;
       Time       \*Vtime\*L;
       int        \*Ventry_level\*L;
       int        \*Vloc_cursor_entry_number\*L;
       int        \*Vtransfer_mode\*L;
       int        \*Vdragged_entry_number\*L;
       XEvent     *\*Vevent\*L;
     } DXmSvnCallbackStruct;\*O
.sE
.IP
\*LCallback Field Descriptions\*O
.IP
Note that all callbacks do not use all the fields listed except
\*Vreason\*O, which is common to all.
.VL 4m
.LI "\*Vreason\*O"
An integer set to the callback reason.
.LI "\*Ventry_number\*O"
The identifier of the entry.
.LI "\*Vcomponent_number\*O"
The identifier of the component.
.LI "\*Vfirst_selection\*O"
One of the following values:
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Value@Description
.sp
_
.sp
DXmSvnKnotFirst@T{
This is not the first selection that has been made.
T}
.sp
DXmSvnKfirstOfOne@T{
There is only one selection being made.
T}
.sp
DXmSvnKfirstOfMany@T{
This is the first of many selections being made.
T}
.sp
_
.TE
.IP
This value (when treated as a Boolean function) is usually True.
It is False only when the user has made a range selection
\*Vand\*O this is not the first DXmSvnNentrySelectedCallback.
.LI "\*Vx\*O"
The \*Vx\*O position at which the event occurred.
.LI "\*Vy\*O"
The \*Vy\*O position at which the event occurred.
.LI "\*Ventry_tag\*O"
The value associated with
the \*Ventry_number\*O field.
You can set this value in your application using a routine that is
appropriate for the particular callback, as follows:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Callback@Routine
.sp
_
.sp
DXmSvnNentrySelectedCallback@T{
DXmSvnSetEntry
.br
DXmSvnSetEntryTag
T}
.sp
DXmSvnNgetEntryCallback@T{
DXmSvnSetEntry
.br
DXmSvnAddEntries
T}
.sp
DXmSvnNhelpRequestedCallback@DXmSvnSetEntry
.sp
DXmSvnNselectAndConfirmCallback@DXmSvnSetEntry
@DXmSvnAddEntries
.sp
DXmSvnNselectionsDraggedCallback@DXmSvnSetEntry
.sp
_
.TE
.LI "\*Vtime\*O"
The time when the event occurred.
.LI "\*Ventry_level\*O"
The current entry number.
.LI "\*Vloc_cursor_entry_number\*O"
The number of the entry that currently has the location cursor.
.LI "\*Vtransfer_mode\*O"
A constant specifying the transfer operation that should occur
after an MB2 click with no mouse movement.
.LI "\*Vdragged_entry_number\*O"
Contains the number of the entry currently being dragged with MB2 pressed.
.LI "\*Vevent\*O"
A pointer to the X event structure describing the event that generated
this callback.
.LE
.SS Callback Reasons
The following table lists the reasons and the valid callback fields for each:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Reason@Valid Fields
.sp
_
.sp
DXmSvnCRAttachToSource@T{
reason
T}
.sp
DXmSvnCRDetachFromSource@T{
reason
T}
.sp
DXmSvnCRDisplayChanged@T{
reason
T}
.sp
DXmSvnCRDragging@T{
reason,  x, y, time, loc_cursor_entry_number, dragged_entry_number, event
T}
.sp
DXmSvnCRDraggingEnd@T{
reason, x, y, time, loc_cursor_entry_number, event
T}
.sp
DXmSvnCREntrySelected@T{
reason,  entry_number, component_number, first_selection, entry_tag,
time, loc_cursor_entry_number, event
T}
.sp
DXmSvnCREntryTransfer@T{
reason, loc_cursor_entry_number, transfer_mode, event
T}
.sp
DXmSvnCREntryUnselected@T{
reason, entry_number, component_number, time, loc_cursor_entry_number
T}
.sp
DXmSvnCRExtendConfirm@T{
reason, entry_number, time, loc_cursor_entry_number, event
T}
.sp
DXmSvnCRGetEntry@T{
reason, entry_number, entry_tag, entry_level, loc_cursor_entry_number
T}
.sp
DXmSvnCRHelpRequested@T{
reason, entry_number, component_number, entry_tag, time, entry_level,
loc_cursor_entry_number, event
T}
.sp
DXmSvnCRPopupMenu@T{
reason, loc_cursor_entry_number, event
T}
.sp
DXmSvnCRSelectAndConfirm@T{
reason, entry_number, component_number, entry_tag, time, entry_level,
loc_cursor_entry_number, event
T}
.sp
DXmSvnCRSelectionsDragged@T{
reason, entry_number, component_number, x, y, entry_tag, entry_level,
loc_cursor_entry_number, event
T}
.sp
DXmSvnCRTransitionsDone@T{
reason, event
T}
.sp
_
.TE
.SS Keyboard Bindings
The following table describes how specific keys function within
the SVN environment.  The table also lists the Motif virtual key
symbols and its associated SVN function.
.PP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Motif Key Symbol@SVN Function
.sp
_
.sp
KActivate@T{
Selects and confirms the current entry.  Equivalent to a double MB1
click on the mouse.
T}
.sp
KBeginData@T{
Scrolls to the first entry in the SVN display; selects and moves the
location cursor to that entry.
T}
.sp
KBeginLine@T{
Scrolls to the extreme left of the display.
T}
.sp
KDown@T{
Selects and moves the location cursor to the next entry in display,
scrolling the display down if necessary.
T}
.sp
KEndData@T{
Scrolls to the last entry in the SVN display; selects and moves the
location cursor to that entry.
T}
.sp
KEndLine@T{
Scrolls to the extreme right of the display.
T}
.sp
KExtendDown@T{
Adds the next entry to the extended selection.  Selects and moves the
location cursor to the next entry.
T}
.sp
KExtendUp@T{
Adds the previous entry to the extended selection.  Selects and moves
the location cursor to the previous entry.
T}
.sp
KHelp@T{
Reports the help callback to the application if specified.
T}
.sp
KLeft@T{
Scrolls the display one character to the left.
T}
.sp
KMenu@T{
Reports the DXmNpopupMenuCallback to the application if specified for
the entry with the location cursor.
T}
.sp
KNextColumn@T{
Selects the next column component to the right.
T}
.sp
KNextPara@T{
Scrolls to the bottom of the display.
T}
.sp
KPageDown@T{
Scrolls the display to the next screen of entries.  Selects and moves
the location cursor to the entry located at the same relative position
on the next screen.
T}
.sp
KPageLeft@T{
Scrolls the display one screen to the left.
T}
.sp
KPageRight@T{
Scrolls the display one screen to the right.
T}
.sp
KPageUp@T{
Scrolls the display to the previous screen of entries.  Selects and moves
the location cursor to the entry located at the same relative position
on the previous screen.
T}
.sp
KPrevColumn@T{
Selects the previous column component to the left.
T}
.sp
KPrevPara@T{
Scrolls to the top of the display.
T}
.sp
KRight@T{
Scrolls the display one character to the right.
T}
.sp
KSelect@T{
Selects the current entry and cancels all other selected entries.
T}
.sp
KSelectAll@T{
Selects all entries known to SVN.
T}
.sp
KUp@T{
Selects and moves the location cursor to the previous entry in the
display, scrolling the display if necessary.
T}
.sp
_
.TE
.SS Translation Table
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Event@Action Routine
.sp
_
.sp
BSelectPress:@svn_button1_down
.sp
BSelectRelease:@svn_button1_up
.sp
BSelectDrag:@svn_button1_motion
.sp
BExtendPress:@svn_shiftbutton1_down
.sp
BExtendRelease:@svn_button1_up
.sp
BExtendDrag:@svn_button1_motion
.sp
BTogglePress:@svn_ctrlbutton1_down
.sp
BToggleRelease:@svn_button1_up
.sp
BToggleDrag:@svn_button1_motion
.sp
BDragPress:@svn_button2_down
.sp
BDragRelease:@svn_button2_up
.sp
BDragDrag:@svn_button2_motion
.sp
BDragToggle:@(MB2-ctrl-click)svn_button2_down
.sp
BDrag:@(MB2-Alt-click)svn_button2_down
.sp
BMenu:@svn_button3_down
.sp
BFocusIn:@svn_focus_in
.sp
BFocusOut:@svn_focus_out
.sp
BHelp:@svnhelp
.sp
_
.TE
.SS Keyboard Syntax
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Event@Action Routine
.sp
-
.sp
KMenu:@svn_f4_menu
.sp
KDown:@svn_arrow_down
.sp
KUp:@svn_arrow_up
.sp
KPageDown:@svn_page_down
.sp
KPageUp:@svn_page_up
.sp
KEndData:@svn_scroll_to_top
.sp
KBeginData:@svn_scroll_to_bottom
.sp
KExtendUp:@svn_extend_up
.sp
KExtendDown:@svn_extend_down
.sp
MShiftKPageUp:@svn_extend_pageup
.sp
MShiftKPageDown:@svn_extend_pagedown
.sp
MShiftKBeginData:@svn_extend_to_top
.sp
MShiftKEndData:@svn_extend_to_bottom
.sp
KLeft:@svn_arrow_left
.sp
KRight:@svn_arrow_right
.sp
KBeginLine:@svn_scroll_to_left
.sp
KEndLine:@svn_scroll_to_right
.sp
KPageLeft:@svn_page_left
.sp
KPageUp:@svn_page_right
.sp
KActivate:@svn_activate_entry
.sp
MCtrlKActivate:@svn_activate_entry
.sp
KSpace:@svn_activate_entry
.sp
MCtrlKSpace:@svn_activate_entry
.sp
KSelect:@svn_activate_entry
.sp
KHelp:@svnhelp
.sp
KSelectAll:@svn_select_all
.sp
KDeSelectAll:@svn_deselect_all
.sp
KNextColumn:@svn_next_column
.sp
KPrevColumn:@svn_prev_column
.sp
MShiftKTab:@LclTraversePrevTabGroup
.sp
KTab:@LclTraverseNextTabGroup
.sp
MCtrlKTab:@LclTraversePrevTabGroup
.sp
KCancel:@svn_cancel
.sp
KNextPara:@svn_next_level
.sp
KPrevPara:@svn_prev_level
.sp
_
.TE
.SS Action Routines
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Routine@Description
.sp
_
.sp
svn_button1_down@T{
Selects and moves the location cursor to the current entry. Deselects
all other entries.
T}
svn_button1_up@T{
Completes selection started by the button1 press.  Reports the
DXmSvnNentrySelectedCallback to the application if specified.  If this BtnUp
was a completion of a double MB1 click, the DXmSvnNselectAndConfirmCallback
will be reported to the application if specified.
T}
svn_button1_motion@T{
Extends selection to include entries that are passed over with the mouse
motion.  If the Ctrl modifier was pressed with this MB1 motion, all
entries passed over with the mouse selection state are toggled.
T}
svn_shiftbutton1_down@T{
Extends selection to include all entries between the last selected entry
and this current entry.  Moves the location cursor to this current entry.
T}
svn_ctrlbutton1_down@T{
Toggles the selection state of the current entry and moves the location
cursor to this entry.
T}
svn_button2_down@T{
Initiates a drag operation. If MB2 was pressed on a selected entry then
all selected entries are dragged.  If MB2 was pressed on a unselected entry
then only that entry will be dragged.  If the application has set
application dragging, via the DXmSvnSetApplDragging routine, the
DXmSvnNdraggingCallback will be reported if specified.
T}
svn_button2_up@T{
Completes the drag operation.  The DXmSvnNselectionsDragged callback will
be reported to the application if specified, and the entries were selected.
If the application has set application dragging, via the
DXmSvnSetApplDragging routine, the DXmSvnNdraggingEndCallback will be
reported if specified.  If the MB2 click has been made without mouse motion,
the DXmSvnNentryTransferCallback will be reported to the application if
specified.
T}
svn_button2_motion@T{
A ghost object will be created and will follow the mouse with MB2 motion.
T}
svn_button3_down@T{
Reports DXmSvnNpopupMenu callback to the application if specified for
this entry.
T}
svn_focus_in@T{
Sets focus to the SVN widget. Moves location cursor to last selected entry
in display.
T}
svn_focus_out@T{
Removes focus from the SVN widget.  Also removes location cursor from last
selected entry.
T}
svnhelp@T{
Reports the help callback DXmSvnNhelpCallback to the application if specified.
T}
svn_f4_menu@T{
Reports the DXmNpopupMenuCallback to the application if specified for the
entry with the location cursor.
T}
svn_arrow_down@T{
Selects and moves the location cursor to the next entry in the display,
scrolling the display down if necessary.
T}
svn_arrow_up@T{
Selects and moves the location cursor to the previous entry in the display,
scrolling the display up if necessary.
T}
svn_page_down@T{
Scrolls the display to the next screen of entries.  Selects and moves the
location cursor to the entry located at the same relative position on the
next screen.
T}
svn_page_up@T{
Scrolls the display to the previous screen of entries.  Selects and moves
the location cursor to the entry located at the same relative position on
the previous screen.
T}
svn_scroll_to_top@T{
Scrolls to the last entry in the SVN display; selects and moves the
location cursor to that entry.
T}
svn_scroll_to_bottom@T{
Scrolls to the first entry in the SVN display; selects and moves the
location cursor to that entry.
T}
svn_extend_up@T{
Adds the previous entry to the extended selection.  Selects and moves the
location cursor to the previous entry, scrolling the display if necessary.
T}
svn_extend_down@T{
Adds the next entry to the extended selection.  Selects and moves the
location cursor to that next entry, scrolling the display if necessary.
T}
svn_extend_pageup@T{
Extends the selection to include all entries in the next screen.  Moves
the location cursor to the entry located at the same relative position on
the previous screen.
T}
svn_extend_pagedown@T{
Extends the selection to include all entries in the previous screen.
Moves the location cursor to the entry located at the same relative position
on the previous screen.
T}
svn_extend_to_top@T{
Extends selection from the currently selected entry to the top entry known
to SVN.  Moves the location cursor to that top entry.
T}
svn_extend_to_bottom@T{
Extends selection from the currently selected entry to the bottom entry
known to SVN.  Moves the location cursor to that bottom entry.
T}
svn_arrow_left@T{
Scrolls the display one character to the left.
T}
svn_arrow_right@T{
Scrolls the display one character to the right.
T}
svn_scroll_to_left@T{
Scrolls to the extreme left of the display.
T}
svn_scroll_to_right@T{
Scrolls to the extreme right of the display.
T}
svn_page_left@T{
Scrolls the display horizontally one screen width to the left.
T}
svn_page_right@T{
Scrolls the display horizontally one screen width to the right.
T}
svn_activate_entry@T{
Selects and confirms the current entry.  Equivalent to a double MB1 click
on the mouse.
T}
svn_select_all@T{
Selects all entries known to SVN.
T}
svn_deselect_all@T{
Deselects all entries known to SVN.
T}
svn_next_column@T{
Selects the next column component to the right.
T}
svn_prev_column@T{
Selects the previous column component to the left.
T}
LclTraversePrevTabGroup@T{
Moves the location cursor (focus) to the next Tab group.  In SVN, there
is a primary and secondary window which are both scrollable, and which
are in separate TAB groups.  This function will allow the focus to move
to other window in SVN.
T}
LclTraverseNextTabGroup@T{
Moves the location cursor to the previous Tab group.  In SVN, there is
a primary and secondary window which are both scrollable, which are in
separate TAB groups.  This function will allow the focus to move to other
window in SVN.
T}
svn_cancel@T{
Cancels any dragging operation or extended selection in progress.  Moves
the location cursor to the previous entry that it was on before the operation
was started.
T}
svn_next_level@T{
Scrolls to the entry at the next level in the SVN hierarchy.
T}
svn_prev_level@T{
Scrolls to the entry at the previous level in the SVN hierarchy.
T}
.sp
_
.TE
.SS Inherited Resources
\*LDXmCreateSvn\*O inherits behaviour and resources from the following
superclasses:
.PP
.oS
Core Resource Set
Composite Resource Set
Constraint Resource Set
XmManager Resource Set
DXmSvn Resource Set
.oE
.SH RETURN VALUES
.PP
The identifier (widget ID) of the created SVN widget.
.SH RELATED INFORMATION
.PP
\*LDXmSvnAddEntries\*O(3X),
\*LDXmSvnAutoScrollCheck\*O(3X),
\*LDXmSvnAutoScrollDisplay\*O(3X),
\*LDXmSvnClearHighlight\*O(3X),
\*LDXmSvnClearHighlighting\*O(3X),
\*LDXmSvnClearSelection\*O(3X),
\*LDXmSvnClearSelections\*O(3X),
\*LDXmSvnDeleteEntries\*O(3X),
\*LDXmSvnDisableDisplay\*O(3X),
\*LDXmSvnEnableDisplay\*O(3X),
\*LDXmSvnFlushEntry\*O(3X),
\*LDXmSvnGetComponentNumber\*O(3X),
\*LDXmSvnGetComponentTag\*O(3X),
\*LDXmSvnGetComponentText\*O(3X),
\*LDXmSvnGetComponentWidth\*O(3X),
\*LDXmSvnGetDisplayed\*O(3X),
\*LDXmSvnGetEntryLevel\*O(3X),
\*LDXmSvnGetEntryNumber\*O(3X),
\*LDXmSvnGetEntryPosition\*O(3X),
\*LDXmSvnGetEntrySensitivity\*O(3X),
\*LDXmSvnGetEntryTag\*O(3X),
\*LDXmSvnGetHighlighted\*O(3X),
\*LDXmSvnGetNumDisplayed\*O(3X),
\*LDXmSvnGetNumHighlighted\*O(3X),
\*LDXmSvnGetNumSelections\*O(3X),
\*LDXmSvnGetPrimaryWorkWidget\*O(3X),
\*LDXmSvnGetSecondaryWorkWidget\*O(3X),
\*LDXmSvnGetSelections\*O(3X),
\*LDXmSvnGetTreePosition\*O(3X),
\*LDXmSvnHideHighlighting\*O(3X),
\*LDXmSvnHideSelections\*O(3X),
\*LDXmSvnHighlightAll\*O(3X),
\*LDXmSvnHighlightEntry\*O(3X),
\*LDXmSvnInsertComponent\*O(3X),
\*LDXmSvnInvalidateEntry\*O(3X),
\*LDXmSvnMapPosition\*O(3X),
\*LDXmSvnPositionDisplay\*O(3X),
\*LDXmSvnRemoveComponent\*O(3X),
\*LDXmSvnSelectAll\*O(3X),
\*LDXmSvnSelectComponent\*O(3X),
\*LDXmSvnSelectEntry\*O(3X),
\*LDXmSvnSetApplDragging\*O(3X),
\*LDXmSvnSetComponentHidden\*O(3X),
\*LDXmSvnSetComponentPixmap\*O(3X),
\*LDXmSvnSetComponentTag\*O(3X),
\*LDXmSvnSetComponentText\*O(3X),
\*LDXmSvnSetComponentWidget\*O(3X),
\*LDXmSvnSetComponentWidth\*O(3X),
\*LDXmSvnSetEntry\*O(3X),
\*LDXmSvnSetEntryIndexWindow\*O(3X),
\*LDXmSvnSetEntryNumComponents\*O(3X),
\*LDXmSvnSetEntryPosition\*O(3X),
\*LDXmSvnSetEntrySensitivity\*O(3X),
\*LDXmSvnSetEntryTag\*O(3X),
\*LDXmSvnSetTreePosition\*O(3X),
\*LDXmSvnShowHighlighting\*O(3X),
\*LDXmSvnShowSelections\*O(3X),
\*LDXmSvnValidateAll\*O(3X)
.EQ
delim off
.EN

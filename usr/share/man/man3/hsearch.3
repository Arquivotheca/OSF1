.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: hsearch.3,v $ $Revision: 3.2.5.3 $ (DEC) $Date: 1994/01/14 20:11:04 $
.\"
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.TH hsearch 3
.SH NAME
.PP
\*Lhsearch\*O, \*Lhcreate\*O, \*Lhdestroy\*O, \*Lhsearch_r\*O, \*Lhcreate_r\*O, \*Lhdestroy_r\*O \- Manage hash tables
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include\*O <\*Lsearch.h\*O>\*L
.nL
\*LENTRY *hsearch\*L(
.nL
	\*LENTRY \*Vitem\*L,
.nL
	\*LACTION \*Vaction\*L);
.nL
\*Lint hsearch_r\*L(
.nL
	\*LENTRY \*Vitem\*L,
.nL
	\*LACTION \*Vaction\*L,
.nL
	\*LENTRY **\*Vtarget\*L,
.nL
	\*Lstruct hsearch_data *\*Vhsearch_data\*L);
.nL
\*Lint hcreate(\*L
.nL
	\*Lsize_t \*Vnel\*L);
.nL
\*Lint hcreate_r\*L(\*L
.nL
	\*Lsize_t \*Vnel\*L,
.nL
	\*Lstruct hsearch_data *\*Vhsearch_data\*L);
.nL
\*Lvoid hdestroy\*L(\*Lvoid\*L);\*L
.nL
\*Lvoid hdestroy_r\*L(
.nL
	\*Lstruct hsearch_data *\*Vhsearch_data\*L);
.sE
.SH PARAMETERS
.PP
.VL
.LI "\*Vitem\*O"
\*OIdentifies a structure of the type \*LENTRY\*O
as defined in the \*Lsearch.h\*O header file. It contains two pointers:
.VL
.LI "\*Lchar *key\*O"
Points to the comparison key string.
.LI "\*Lchar *data\*O"
Points to any other data associated with the \*Lchar *key\*O parameter.
.LE
.\" .sp 4p
.\" .TS
.\" tab(@) ;
.\" l lw(4.0i).
.\" \*Litem.key\*O@T{
.\" Points to the comparison key string.
.\" T}
.\" \*Litem.data\*O@T{
.\" Points to any other data associated with the \*Litem.key\*O parameter.
.\" T}
.\" .TE
.sp
Pointers to types other than \*Lchar\*O should be cast as
\*Lchar *\*O.
.LI "\*Vaction\*O"
Specifies a value for an \*LACTION\*O \*Lenum\*O
type, which indicates what is to be done with an \*Vitem\*O  key  when
it cannot
be found in the hash table.  The
following two actions can be specified for this parameter:
.VL
.LI "\*LENTER\*O"
Enter the key specified by the \*Vitem\*O parameter into the hash table
at the appropriate place.
When the table is full, a null pointer is returned.
.LI "\*LFIND\*O"
Do not enter the \*Vitem\*O key into the table, but return a null
pointer when an \*Vitem\*O key cannot be found in the hash table.
.LE
.\" .sp 4p
.\" .TS
.\" tab(@) ;
.\" l lw(4.0i).
.\" ENTER@T{
.\" Enter the key specified by the \*Vitem\*O parameter into the hash table
.\" at the appropriate place.
.\" When the table is full, a null pointer is returned.
.\" T}
.\" FIND@T{
.\" Do not enter the \*Vitem\*O key into the table, but return a null
.\" pointer when an \*Vitem\*O key cannot be found in the hash table.
.\" T}
.\" .TE
.LI "\*Vnel\*O"
Specifies an estimate of the maximum number of entries that the
hash table will contain. Under some circumstances, the \*Lhcreate(\|)\*O
function may make the hash table larger than specified,
to obtain mathematically favorable
conditions for access to the hash table.
.ig ++
.LI "\*Vtableptr\*O"
Points at the hash table.  This table is kept in the thread's address
space.
.LI "\*Vlengthptr\*O"
Points at the size of the hash table.
.LI "\*Vmptr\*O"
Points at the log base 2 version of the hash table length.
.LI "\*Vcountptr\*O"
Points at the number of entries in the hash table.
.LI "\*Vlength\*O
Specifies the length of the hash table.
.LI "\*Vm\*O"
Specifies the log base 2 version of the hash table length.
.++
.LI "\*Vtarget\*O"
Points to the item actually found.
.LI "\*Vhsearch_data\*O"
Is data for the hash table.
.LE
.SH DESCRIPTION
.PP
.iX "hsearch function"
.iX "hcreate function"
.iX "hdestroy function"
.iX "hsearch_r function"
.iX "hcreate_r function"
.iX "hdestroy_r function"
.iX "hash tables" "searching"
.iX "hash tables" "creating"
.iX "hash tables" "deleting"
The \*Lhcreate(\|)\*O function initializes the
hash table. You must call the \*Lhcreate(\|)\*O function before
calling the \*Lhsearch(\|)\*O function.
.PP
The
\*Lhsearch(\|)\*O,
\*Lhcreate(\|)\*O
and
\*Lhdestroy(\|)\*O
functions are used to manage hash table operations.
.PP
The \*Lhsearch(\|)\*O function searches a hash table.  It
returns a pointer into a hash table that indicates where a given entry
can be found. The \*Lhsearch(\|)\*O function uses open addressing with a
hash function.
.PP
The \*Lhdestroy(\|)\*O function deletes the hash table. This
allows you to start a new hash table because only one table may be active
at a time. After the call to \*Lhdestroy(\|)\*O
the hash table data should no longer be considered accessible.
.PP
The \*Lhsearch_r(\|)\*O,
\*Lhcreate_r(\|)\*O, and \*Lhdestroy_r(\|)\*O functions are the
reentrant versions of \*Lhsearch(\|)\*O,
\*Lhcreate(\|)\*O, and \*Lhdestroy(\|)\*O.
.SH NOTES
.PP
The reentrant functions allow different threads to manage different
hash tables (using the \*Lhsearch_data\*O data structure).  If several
threads want to use the same hash table, they must perform their own
synchronization.
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Trial use.
.LE
.SH RETURN VALUES
.PP
The \*Lhsearch(\|)\*O function returns a null
pointer when the \*Vaction\*O parameter is
\*LFIND\*O and the key pointed to by \*Vitem\*O cannot be found,
or when the specified \*Vaction\*O is \*LENTER\*O and the hash table is full.
.PP
Upon successful completion, the \*Lhcreate(\|)\*O function returns
a nonzero value.
Otherwise,
when
sufficient space for the table cannot be allocated,
the \*Lhcreate(\|)\*O function returns a value of 0 (zero).
.PP
The \*Lhcreate_r(\|)\*O
function returns the exact same
values as its nonreentrant version.
.PP
Upon successful completion, the \*Lhsearch_r(\|)\*O function returns 0
(zero).  Upon failure, it returns -1 and sets \*Lerrno\*O.
.SH ERRORS
.PP
If any of the following conditions occurs, the \*Lhsearch(\|)\*O
function sets \*Lerrno\*O to the corresponding value:
.VL
.LI "[ENOMEM]"
The table is full.
.LI "[ESRCH]"
The search failed.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Lbsearch\*O(3),
\*Llsearch\*O(3),
\*Ltsearch\*O(3),
\*Lqsort\*O(3).
.iX "hsearch function"
.iX "hcreate function"
.iX "hdestroy function"
.iX "hsearch_r function"
.iX "hcreate_r function"
.iX "hdestroy_r function"
.EQ
delim off
.EN

.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: XAllocColor.3X11,v $ $Revision: 1.2.6.2 $ (DEC) $Date: 1993/12/15 01:41:32 $
.\" 
'\" e
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xW Athena X Widgets \- C Language X Toolkit Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft 1
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de FD
.LP
.KS
.nf
..
.de FN
.fi
.KE
.LP
..
.de C{
.KS
.nf
.D
.\"
.\"     choose appropriate monospace font
.\"     the imagen conditional, 480,
.\"     may be changed to L if LB is too
.\"     heavy for your eyes...
.\"
.ie "\\*(.T"480" .ft L
.el .ie "\\*(.T"300" .ft L
.el .ie "\\*(.T"202" .ft PO
.el .ie "\\*(.T"aps" .ft CW
.el .ft R
.ps \\n(PS
.ie \\n(VS>40 .vs \\n(VSu
.el .vs \\n(VSp
..
.de C}
.DE
.R
..
.               \" Note End -- doug kraft 3/85
.ny0
'\" e
.TH XAllocColor 3X11 "" "" "" "X11R5"
.SH NAME
XAllocColor, XAllocNamedColor, XAllocColorCells, XAllocColorPlanes, XFreeColors \- allocate and free colors
.SH SYNTAX
.PP
Status XAllocColor\^(\^\f2display\fP, \f2colormap\fP\^, \f2screen_in_out\fP\^)
.br
      Display *\f2display\fP\^;
.br
      Colormap \f2colormap\fP\^;
.br
      XColor *\f2screen_in_out\fP\^;
.LP
Status XAllocNamedColor\^(\^\f2display\fP, \f2colormap\fP\^, \
\f2color_name\fP\^, \f2screen_def_return\fP\^, \f2exact_def_return\fP\^)
.br
      Display *\f2display\fP\^;
.br
      Colormap \f2colormap\fP\^;
.br
      char *\f2color_name\fP\^;
.br
      XColor *\f2screen_def_return\fP\^, *\f2exact_def_return\fP\^;
.LP
Status XAllocColorCells\^(\^\f2display\fP, \f2colormap\fP\^, \f2contig\fP\^, \
\f2plane_masks_return\fP\^, \f2nplanes\fP\^, 
.br
                          \f2pixels_return\fP\^, \f2npixels\fP\^)
.br
      Display *\f2display\fP\^;
.br
      Colormap \f2colormap\fP\^;
.br
      Bool \f2contig\fP\^;
.br
      unsigned long \f2plane_masks_return\fP[\^]\^;
.br
      unsigned int \f2nplanes\fP\^;
.br
      unsigned long \f2pixels_return\fP[\^]\^;
.br
      unsigned int \f2npixels\fP\^;
.LP
Status XAllocColorPlanes\^(\^\f2display\fP, \f2colormap\fP\^, \f2contig\fP\^, \f2pixels_return\fP\^, \f2ncolors\fP\^, 
         \f2nreds\fP\^, \f2ngreens\fP\^, \f2nblues\fP\^, \f2rmask_return\fP\^, \f2gmask_return\fP\^, \f2bmask_return\fP\^)
.br
      Display *\f2display\fP\^;
.br
      Colormap \f2colormap\fP\^;
.br
      Bool \f2contig\fP\^;
.br
      unsigned long \f2pixels_return\fP[\^]\^;
.br
      int \f2ncolors\fP\^;
.br
      int \f2nreds\fP\^, \f2ngreens\fP\^, \f2nblues\fP\^;
.br
      unsigned long *\f2rmask_return\fP\^, *\f2gmask_return\fP\^, *\f2bmask_return\fP\^;
.LP
XFreeColors\^(\^\f2display\fP, \f2colormap\fP\^, \f2pixels\fP\^, \f2npixels\fP\^, \f2planes\fP\^)
.br
      Display *\f2display\fP\^;
.br
      Colormap \f2colormap\fP\^;
.br
      unsigned long \f2pixels\fP\^[\^];
.br
      int \f2npixels\fP\^;
.br
      unsigned long \f2planes\fP\^;
.SH ARGUMENTS
.PP
.IP \f2color_name\fP 1i
Specifies the color name string (for example, red) whose color 
definition structure you want returned.
.IP \f2colormap\fP 1i
Specifies the colormap.
.IP \f2contig\fP 1i
Specifies a Boolean value that indicates whether the planes must be contiguous.
.IP \f2display\fP 1i
Specifies the connection to the X server.
.IP \f2exact_def_return\fP 1i
Returns the exact RGB values.
.IP \f2ncolors\fP 1i
Specifies the number of pixel values that are to be returned in the 
pixels_return array. 
.IP \f2npixels\fP 1i
Specifies the number of pixels. 
.IP \f2nplanes\fP 1i
Specifies the number of plane masks that are to be returned in the plane masks 
array. 
.IP \f2nreds\fP 1i
.br
.ns
.IP \f2ngreens\fP 1i
.br
.ns
.IP \f2nblues\fP 1i
.br
.ns
Specify the number of red, green, and blue planes.
The value you pass must be nonnegative. 
.IP \f2pixels\fP 1i
Specifies an array of pixel values. 
.IP \f2pixels_return\fP 1i
Returns an array of pixel values. 
.IP \f2plane_mask_return\fP 1i
Returns an array of plane masks.
.\" *** JIM: NEED MORE INFO FOR THIS. ***
.IP \f2planes\fP 1i
Specifies the planes you want to free.
.IP \f2rmask_return\fP 1i
.br
.ns
.IP \f2gmask_return\fP 1i
.br
.ns
.IP \f2bmask_return\fP 1i
Return bit masks for the red, green, and blue planes.
.IP \f2screen_def_return\fP 1i
Returns the closest RGB values provided by the hardware.
.IP \f2screen_in_out\fP 1i
Specifies and returns the values actually used in the colormap.
.SH DESCRIPTION
.LP
The
.PN XAllocColor
function allocates a read-only colormap entry corresponding to the closest
RGB value supported by the hardware.
.PN XAllocColor
returns the pixel value of the color closest to the specified
RGB elements supported by the hardware
and returns the RGB value actually used.
The corresponding colormap cell is read-only.
In addition,
.PN XAllocColor
returns nonzero if it succeeded or zero if it failed.
.NX R "Color map"
.NX R "Color" "allocation"
.NX R "Allocation" "colormap"
.NX R "read-only colormap cells"
Multiple clients that request the same effective RGB value can be assigned
the same read-only entry, thus allowing entries to be shared.
When the last client deallocates a shared cell, it is deallocated.
.PN XAllocColor
does not use or affect the flags in the
.PN XColor
structure.
.LP
.PN XAllocColor
can generate a
.PN BadColor 
error.
.LP
The
.PN XAllocNamedColor
function looks up the named color with respect to the screen that is
associated with the specified colormap.
It returns both the exact database definition and
the closest color supported by the screen.
The allocated color cell is read-only.
The pixel value is returned in screen_def_return.
If the color name is not in the Host Portable Character Encoding
the result is implementation dependent.
Use of uppercase or lowercase does not matter.
.PN XLookupColor
returns nonzero if a cell is allocated,
otherwise it returns zero.
.LP
.PN XAllocNamedColor
can generate a
.PN BadColor
error.
.LP
The
.PN XAllocColorCells
function allocates read/write color cells.
The number of colors must be positive and the number of planes nonnegative,
or a
.PN BadValue
error results.
If \f2ncolors\fP and \f2nplanes\fP are requested, 
then \f2ncolors\fP pixels
and nplane plane masks are returned.
No mask will have any bits set to 1 in common with
any other mask or with any of the pixels.
By ORing together each pixel with zero or more masks,
(\f2ncolors\fP * 2**\f2nplanes\fP) distinct pixels can be produced.
All of these are
allocated writable by the request.
For 
.PN GrayScale 
or 
.PN PseudoColor , 
each mask has exactly one bit set to 1. 
For 
.PN DirectColor , 
each has exactly three bits set to 1.
If contig is 
.PN True 
and if all masks are ORed
together, a single contiguous set of bits set to 1 will be formed for 
.PN GrayScale
or 
.PN PseudoColor 
and three contiguous sets of bits set to 1 (one within each
pixel subfield) for 
.PN DirectColor .
The RGB values of the allocated
entries are undefined.
.PN XAllocColorCells
returns nonzero if it succeeded or zero if it failed.
.LP
.PN XAllocColorCells
can generate
.PN BadColor
and
.PN BadValue 
errors.
.LP
The specified \f2ncolors\fP must be positive; 
and \f2nreds\fP, \f2ngreens\fP, and \f2nblues\fP must be nonnegative,
or a
.PN BadValue
error results.
If \f2ncolors\fP colors, \f2nreds\fP reds, \f2ngreens\fP greens, 
and \f2nblues\fP blues are requested, 
\f2ncolors\fP pixels are returned; and the masks have \f2nreds\fP,
\f2ngreens\fP, and \f2nblues\fP bits set to 1, respectively.
If contig is 
.PN True , 
each mask will have
a contiguous set of bits set to 1.
No mask will have any bits set to 1 in common with
any other mask or with any of the pixels.
For 
.PN DirectColor , 
each mask
will lie within the corresponding pixel subfield.
By ORing together
subsets of masks with each pixel value, 
(\f2ncolors\fP * 2**(\f2nreds\fP+\f2ngreens\fP+\f2nblues\fP) )
distinct pixel values can be produced. 
.LP
All of these are allocated by the request.
However, in the
colormap, there are only 
(\f2ncolors\fP * 2**\f2nreds\fP) independent red entries, 
(\f2ncolors\fP * 2**\f2ngreens\fP) independent green entries, and 
(\f2ncolors\fP * 2**\f2nblues\fP) independent blue entries. 
This is true even for 
.PN PseudoColor .
When the colormap entry of a pixel
value is changed (using 
.PN XStoreColors ,
.PN XStoreColor ,
or 
.PN XStoreNamedColor ),
the pixel is decomposed according to the masks, 
and the corresponding independent entries are updated.
.PN XAllocColorPlanes
returns nonzero if it succeeded or zero if it failed.
.LP
.PN XAllocColorPlanes
can generate
.PN BadColor
and
.PN BadValue 
errors.
.LP
The
.PN XFreeColors
function frees the cells represented by pixels whose values are in the
pixels array.
The planes argument should not have any bits set to 1 in common with any of the
pixels. 
The set of all pixels is produced by ORing together subsets of
the planes argument with the pixels.
The request frees all of these pixels that
were allocated by the client (using 
.NX R XAllocColor
.NX R XAllocNamedColor
.NX R XAllocColorCells
.NX R XAllocColorPlanes
.PN XAllocColor , 
.PN XAllocNamedColor ,
.PN XAllocColorCells ,
and 
.PN XAllocColorPlanes ).
Note that freeing an
individual pixel obtained from 
.PN XAllocColorPlanes 
may not actually allow
it to be reused until all of its related pixels are also freed.
Similarly,
a read-only entry is not actually freed until it has been freed by all clients,
and if a client allocates the same read-only entry multiple times,
it must free the entry that many times before the entry is actually freed.
.LP
All specified pixels that are allocated by the client in the colormap are
freed, even if one or more pixels produce an error. 
If a specified pixel is not a valid index into the colormap, a 
.PN BadValue 
error results.
If a specified pixel is not allocated by the
client (that is, is unallocated or is only allocated by another client),
or if the colormap was created with all entries writable (by passing
.PN AllocAll
to
.PN XCreateColormap ),
a
.PN BadAccess
error results. 
If more than one pixel is in error, 
the one that gets reported is arbitrary.
.LP
.PN XFreeColors
can generate
.PN BadAccess ,
.PN BadColor ,
and
.PN BadValue 
errors.
.SH DIAGNOSTICS
.TP 1i
.PN BadAccess
A client attempted
to free a colormap entry that it did not already allocate.
.TP 1i
.PN BadAccess
A client attempted to store into a read-only colormap entry.
.TP 1i
.PN BadColor
A value for a Colormap argument does not name a defined Colormap.
.TP 1i
.PN BadValue
Some numeric value falls outside the range of values accepted by the request.
Unless a specific range is specified for an argument, the full range defined
by the argument's type is accepted.  Any argument defined as a set of
alternatives can generate this error.
.SH "SEE ALSO"
XCreateColormap(3X11), 
XQueryColor(3X11),
XStoreColors(3X11) 
.br
\f2\*(xL\fP
.EQ
delim off
.EN

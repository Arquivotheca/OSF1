.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: xdr.3,v $ $Revision: 3.3.4.10 $ (DEC) $Date: 1994/01/19 14:52:05 $
.\" 
.\" @(#)xdr.3n	1.1 88/05/08 4.0NFSSRC SMI
.\" @(#) from SUN 1.19
.TH xdr 3
.SH NAME
.PP
\*Lxdr\*O, \*Lxdr_accepted_reply\*O, \*Lxdr_array\*O, \*Lxdr_authunix_parms\*O, \*Lxdr_bool\*O, \*Lxdr_bytes\*O, \*Lxdr_callhdr\*O, \*Lxdr_callmsg\*O, \*Lxdr_char\*O, \*Lxdr_destroy\*O, \*Lxdr_double\*O, \*Lxdr_enum\*O, \*Lxdr_float\*O, \*Lxdr_free\*O, \*Lxdr_functions\*O, \*Lxdr_getpos\*O, \*Lxdr_hyper\*O, \*Lxdr_inline\*O, \*Lxdr_int\*O, \*Lxdr_long\*O, \*Lxdr_longlong_t\*O, \*Lxdrmem_create\*O, \*Lxdr_opaque\*O, \*Lxdr_pointer\*O, \*Lxdrrec_create\*O, \*Lxdrrec_endofrecord\*O, \*Lxdrrec_eof\*O, \*Lxdrrec_skiprecord\*O, \*Lxdr_reference\*O, \*Lxdr_setpos\*O, \*Lxdr_short\*O, \*Lxdrstdio_create\*O, \*Lxdr_string\*O, \*Lxdr_u_char\*O, \*Lxdr_u_hyper\*O, \*Lxdr_u_int\*O, \*Lxdr_u_long\*O, \*Lxdr_u_longlong_t\*O, \*Lxdr_u_short\*O, \*Lxdr_union\*O, \*Lxdr_vector\*O, \*Lxdr_void\*O, \*Lxdr_wrapstring\*O \- library routines for external data representation
.SH SYNOPSIS AND DESCRIPTION
.PP
.iX "xdr networking functions"
.PP
These routines allow C programmers to describe
arbitrary data structures in a machine-independent fashion.
Data for ONC remote procedure calls are transmitted using these
routines.
.PP
.ft B
.nf
.sp 0.5
#include <rpc/xdr.h>
.fi
.ft R
.br
.if t .ne 8
.PP
.ft B
.nf
.sp 0.5
xdr_array(xdrs, arrp, sizep, maxsize, elsize, elproc)
\s-1XDR\s0 *xdrs;
char **arrp;
u_int *sizep, maxsize, elsize;
xdrproc_t elproc;
.fi
.ft R
.IP
A filter primitive that translates between variable-length
arrays
and their corresponding external representations. The
parameter
\*Varrp\*O
is the address of the pointer to the array, while
\*Vsizep\*O
is the address of the element count of the array;
this element count cannot exceed
.IR maxsize .
The parameter
\*Velsize\*O
is the
\*Vsizeof\*O
each of the array's elements, and
\*Velproc\*O
is an
.SM XDR
filter that translates between
the array elements' C form, and their external
representation.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 8
.PP
.ft B
.nf
.sp 0.5
xdr_bool(xdrs, bp)
\s-1XDR\s0 *xdrs;
bool_t *bp;
.fi
.ft R
.IP
A filter primitive that translates between booleans (C
integers)
and their external representations. When encoding data, this
filter produces values of either one or zero.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 10
.PP
.ft B
.nf
.sp 0.5
xdr_bytes(xdrs, sp, sizep, maxsize)
\s-1XDR\s0 *xdrs;
char **sp;
u_int *sizep, maxsize;
.fi
.ft R
.IP
A filter primitive that translates between counted byte
strings and their external representations.
The parameter
\*Vsp\*O
is the address of the string pointer. The length of the
string is located at address
.IR sizep ;
strings cannot be longer than
.IR maxsize .
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.PP
.ft B
.nf
.sp 0.5
xdr_char(xdrs, cp)
\s-1XDR\s0 *xdrs;
char *cp;
.fi
.ft R
.IP
A filter primitive that translates between C characters
and their external representations.
This routine returns one if it succeeds, zero otherwise.
Note: encoded characters are not packed, and occupy 4 bytes
each. For arrays of characters, it is worthwhile to
consider
.BR xdr_bytes(\|) ,
.B xdr_opaque(\|)
or
.BR xdr_string(\|) .
.br
.if t .ne 8
.PP
.ft B
.nf
.sp 0.5
void
xdr_destroy(xdrs)
\s-1XDR\s0 *xdrs;
.fi
.ft R
.IP
A macro that invokes the destroy routine associated with the
.SM XDR
stream,
.IR xdrs .
Destruction usually involves freeing private data structures
associated with the stream.  Using
\*Vxdrs\*O
after invoking
.B xdr_destroy(\|)
is undefined.
.br
.if t .ne 7
.PP
.ft B
.nf
.sp 0.5
xdr_double(xdrs, dp)
\s-1XDR\s0 *xdrs;
double *dp;
.fi
.ft R
.IP
A filter primitive that translates between C
.B double
precision numbers and their external representations.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.PP
.ft B
.nf
.sp 0.5
xdr_enum(xdrs, ep)
\s-1XDR\s0 *xdrs;
enum_t *ep;
.fi
.ft R
.IP
A filter primitive that translates between C
.BR enum s
(actually integers) and their external representations.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 8
.PP
.ft B
.nf
.sp 0.5
xdr_float(xdrs, fp)
\s-1XDR\s0 *xdrs;
float *fp;
.fi
.ft R
.IP
A filter primitive that translates between C
.BR float s
and their external representations.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 9
.PP
.ft B
.nf
.sp 0.5
void
xdr_free(proc, objp)
xdrproc_t proc;
char *objp;
.fi
.ft R
.IP
Generic freeing routine. The first argument is the
.SM XDR
routine for the object being freed. The second argument
is a pointer to the object itself. Note: the pointer passed
to this routine is
\*Vnot\*O
freed, but what it points to
\*Vis\*O
freed (recursively).
.br
.if t .ne 8
.PP
.ft B
.nf
.sp 0.5
u_int
xdr_getpos(xdrs)
\s-1XDR\s0 *xdrs;
.fi
.ft R
.IP
A macro that invokes the get-position routine
associated with the
.SM XDR
stream,
.IR xdrs .
The routine returns an unsigned integer,
which indicates the position of the
.SM XDR
byte stream.
A desirable feature of
.SM XDR
streams is that simple arithmetic works with this number,
although the
.SM XDR
stream instances need not guarantee this.
.br
.if t .ne 4
.PP
.ft B
.nf
xdr_hyper(xdrs, hp)
\s-1XDR\s0 *xdrs;
longlong_t *hp;
.fi
.ft R
.IP
A filter primitive that translates between C \*Llong\*O integers and
their external representations. (The \*Ltypedef longlong_t\*O is defined
as \*Llong\*O in the file \*L<rpc/types.h>\*O, which is included from
the file \*L<rpc/xdr.h>\*O.) This routine will translate all 8 bytes of
data to the
.SM XDR
stream. Note that this differentiates this routine from \*Lxdr_long\*O
in that they both take a pointer to a \*Llong\*O as an argument, while
\*Lxdr_long\*O only translates 4 bytes of data to the
.SM XDR
stream. This routine returns one if it succeeds, zero otherwise.
.IP
The \*Lxdr_hyper\*O routine is functionally equivalent to the
\*Lxdr_longlong_t\*O routine.
.IP
See the following section that explains the differences between
\*Lxdr_long\*O and \*Lxdr_hyper\*O.
.br
.if t .ne 4
.PP
.ft B
.nf
.sp 0.5
.br
long *
xdr_inline(xdrs, len)
\s-1XDR\s0 *xdrs;
int len;
.fi
.ft R
.IP
A macro that invokes the in-line routine associated with the
.SM XDR
stream,
.IR xdrs .
The routine returns a pointer
to a contiguous piece of the stream's buffer;
\*Vlen\*O
is the byte length of the desired buffer.
Note: pointer is cast to
.BR "long *" .
.IP
Warning:
.B xdr_inline(\|)
may return
.SM NULL
(0)
if it cannot allocate a contiguous piece of a buffer.
Therefore the behavior may vary among stream instances;
it exists for the sake of efficiency.
.br
.if t .ne 7
.PP
.ft B
.nf
.sp 0.5
xdr_int(xdrs, ip)
\s-1XDR\s0 *xdrs;
int *ip;
.fi
.ft R
.IP
A filter primitive that translates between C integers
and their external representations.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.PP
.ft B
.nf
.sp 0.5
xdr_long(xdrs, lp)
\s-1XDR\s0 *xdrs;
long *lp;
.fi
.ft R
.IP
A filter primitive that translates between C
.B long
integers and their external representations.
This routine returns one if it succeeds, zero otherwise.
.IP
Note that the argument \*Vlp\*O
must be the C language type \*Llong\*O. The amount of data encoded to the
.SM XDR
stream is only 4 bytes (not the full 8 bytes of data represented by the
C \*Llong\*O type). This is because in the context of
.SM XDR
streams a \*Llong\*O
type is considered to be 4 bytes. When data is encoded from the
.SM XDR
stream, 4 bytes will be received from the
.SM XDR
stream; the \*Lxdr_long\*O
interface then then sign extends the high order 4 bytes of the C
\*Llong\*O type.
.IP
Prior to serializing the data on the \*LENCODE\*O side the \*Lxdr_long\*O
performs a validity check to insure that the value represents a valid 32-bit
signed number.  This involves determining that the signed value is
no less than the most negative 32-bit signed quantity (which is
the hexadecimal value 0x80000000) and no greater than the
most positive 32-bit signed quantity (which is the hexadecimal
value 0x7fffffff).  If the value pointed to by the argument
\*Vlp\*O is not within this range the \*Lxdr_long\*O interface returns
an error.
.IP
To translate the full 8 bytes of a C \*Llong\*O,
use the \*Lxdr_hyper\*O interface.
.IP
See the following section that explains the differences between
\*Lxdr_long\*O and \*Lxdr_hyper\*O.
.br
.if t .ne 12
.PP
.ft B
.nf
.sp 0.5
xdr_longlong_t(xdrs, hp)
\s-1XDR\s0 *xdrs;
longlong_t *hp;
.fi
.ft R
.IP
A filter primitive that translates between C \*Llong\*O integers and
their external representations. (The \*Ltypedef longlong_t\*O is defined
as \*Llong\*O in the file \*L<rpc/types.h>\*O, which is included from
the file \*L<rpc/xdr.h>\*O.) This routine will translate all 8 bytes of
data to the
.SM XDR
stream. Note that this differentiates this routine from \*Lxdr_long\*O
in that they both take a pointer to a \*Llong\*O as an argument, while
\*Lxdr_long\*O only translates 4 bytes of data to the
.SM XDR
stream. This routine returns one if it succeeds, zero otherwise.
.IP
The \*Lxdr_longlong_t\*O routine is functionally equivalent to the
\*Lxdr_hyper\*O routine.
.IP
See the following section that explains the differences between
\*Lxdr_long\*O and \*Lxdr_hyper\*O.
.PP
.ft B
.nf
.sp 0.5
void
xdrmem_create(xdrs, addr, size, op)
\s-1XDR\s0 *xdrs;
char *addr;
u_int size;
enum xdr_op op;
.fi
.ft R
.IP
This routine initializes the
.SM XDR
stream object pointed to by
.IR xdrs .
The stream's data is written to, or read from,
a chunk of memory at location
\*Vaddr\*O
whose length is no more than
\*Vsize\*O
bytes long.  The
\*Vop\*O
determines the direction of the
.SM XDR
stream (either \*LXDR_ENCODE\*LO, \*LXDR_DECODE\*O, or \*LXDR_FREE\*O).
.br
.if t .ne 10
.PP
.ft B
.nf
.sp 0.5
xdr_opaque(xdrs, cp, cnt)
\s-1XDR\s0 *xdrs;
char *cp;
u_int cnt;
.fi
.ft R
.IP
A filter primitive that translates between fixed size opaque
data
and its external representation.
The parameter
\*Vcp\*O
is the address of the opaque object, and
\*Vcnt\*O
is its size in bytes.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 10
.PP
.ft B
.nf
.sp 0.5
xdr_pointer(xdrs, objpp, objsize, xdrobj)
\s-1XDR\s0 *xdrs;
char **objpp;
u_int objsize;
xdrproc_t xdrobj;
.fi
.ft R
.IP
Like
.B xdr_reference(\|)
except that it serializes
.SM NULL
pointers, whereas
.B xdr_reference(\|)
does not.  Thus,
.B xdr_pointer(\|)
can represent
recursive data structures, such as binary trees or
linked lists.
.br
.if t .ne 15
.PP
.ft B
.nf
.sp .5
void
xdrrec_create(xdrs, sendsize, recvsize, handle, readit, writeit)
\s-1XDR\s0 *xdrs;
u_int sendsize, recvsize;
char *handle;
int (*readit) (\|), (*writeit) (\|);
.fi
.ft R
.IP
This routine initializes the
.SM XDR
stream object pointed to by
.IR xdrs .
The stream's data is written to a buffer of size
.IR sendsize ;
a value of zero indicates the system should use a suitable
default. The stream's data is read from a buffer of size
.IR recvsize ;
it too can be set to a suitable default by passing a zero
value.
When a stream's output buffer is full,
\*Vwriteit\*O
is called.  Similarly, when a stream's input buffer is empty,
\*Vreadit\*O
is called.  The behavior of these two routines is similar to
the
system calls
.B read
and
.BR write ,
except that
\*Vhandle\*O
is passed to the former routines as the first parameter.
The
.SM XDR
stream's
\*Vop\*O
field must be set by the caller.
.IR sendsize
and
.IR recvsize
should be multiples of 4.
.IP
Warning: this
.SM XDR
stream implements an intermediate record stream.
Therefore there are additional bytes in the stream
to provide record boundary information.
.br
.if t .ne 9
.PP
.ft B
.nf
.sp 0.5
xdrrec_endofrecord(xdrs, sendnow)
\s-1XDR\s0 *xdrs;
int sendnow;
.fi
.ft R
.IP
This routine can be invoked only on
streams created by
.BR xdrrec_create(\|) .
The data in the output buffer is marked as a completed
record,
and the output buffer is optionally written out if
\*Vsendnow\*O
is non-zero. This routine returns one if it succeeds, zero
otherwise.
.br
.if t .ne 8
.PP
.ft B
.nf
.sp 0.5
xdrrec_eof(xdrs)
\s-1XDR\s0 *xdrs;
int empty;
.fi
.ft R
.IP
This routine can be invoked only on
streams created by
.BR xdrrec_create(\|) .
After consuming the rest of the current record in the stream,
this routine returns one if the stream has no more input,
zero otherwise.
.br
.if t .ne 3
.PP
.ft B
.nf
.sp 0.5
xdrrec_skiprecord(xdrs)
\s-1XDR\s0 *xdrs;
.fi
.ft R
.IP
This routine can be invoked only on
streams created by
.BR xdrrec_create(\|) .
It tells the
.SM XDR
implementation that the rest of the current record
in the stream's input buffer should be discarded.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 11
.PP
.ft B
.nf
.sp 0.5
xdr_reference(xdrs, pp, size, proc)
\s-1XDR\s0 *xdrs;
char **pp;
u_int size;
xdrproc_t proc;
.fi
.ft R
.IP
A primitive that provides pointer chasing within structures.
The parameter
\*Vpp\*O
is the address of the pointer;
\*Vsize\*O
is the
\*Vsizeof\*O
the structure that
\*V*pp\*O
points to; and
\*Vproc\*O
is an
.SM XDR
procedure that filters the structure
between its C form and its external representation.
This routine returns one if it succeeds, zero otherwise.
.IP
Warning: this routine does not understand
.SM NULL
pointers. Use
.B xdr_pointer(\|)
instead.
.br
.if t .ne 10
.PP
.ft B
.nf
.sp 0.5
xdr_setpos(xdrs, pos)
\s-1XDR\s0 *xdrs;
u_int pos;
.fi
.ft R
.IP
A macro that invokes the set position routine associated with
the
.SM XDR
stream
.IR xdrs .
The parameter
\*Vpos\*O
is a position value obtained from
.BR xdr_getpos(\|) .
This routine returns one if the
.SM XDR
stream could be repositioned,
and zero otherwise.
.IP
Warning: it is difficult to reposition some types of
.SM XDR
streams, so this routine may fail with one
type of stream and succeed with another.
.br
.if t .ne 8
.PP
.ft B
.nf
.sp 0.5
xdr_short(xdrs, sp)
\s-1XDR\s0 *xdrs;
short *sp;
.fi
.ft R
.IP
A filter primitive that translates between C
.B short
integers and their external representations.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 10
.PP
.ft B
.nf
.sp 0.5
void
xdrstdio_create(xdrs, file, op)
\s-1XDR\s0 *xdrs;
\s-1FILE\s0 *file;
enum xdr_op op;
.fi
.ft R
.IP
This routine initializes the
.SM XDR
stream object pointed to by
.IR xdrs .
The
.SM XDR
stream data is written to, or read from, the Standard
.B I/O
stream
.IR file .
The parameter
\*Vop\*O
determines the direction of the
.SM XDR
stream (either \*LXDR_ENCODE\*O, \*LXDR_DECODE\*O, or \*LXDR_FREE\*O).
.IP
Warning: the destroy routine associated with such
.SM XDR
streams calls
.B fflush(\|)
on the
\*Vfile\*O
stream, but never
.BR fclose(\|) .
.br
.if t .ne 9
.PP
.ft B
.nf
.sp 0.5
xdr_string(xdrs, sp, maxsize)
\s-1XDR\s0
*xdrs;
char **sp;
u_int maxsize;
.fi
.ft R
.IP
A filter primitive that translates between C strings and
their
corresponding external representations.
Strings cannot be longer than
.IR maxsize .
\*Vsp\*O
is the address of the string's pointer. While decoding if
\*V*sp\*O
is
.SM NULL ,
the necessary storage is allocated to hold this null\-terminated string
and
\*V*sp\*O
is set to point to this. This storage can be freed by using
.B xdr_free(\|)
(see
.BR xdr_simple (3)
). This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 8
.PP
.ft B
.nf
.sp 0.5
xdr_u_char(xdrs, ucp)
\s-1XDR\s0 *xdrs;
unsigned char *ucp;
.fi
.ft R
.IP
A filter primitive that translates between
.B unsigned
C characters and their external representations.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 9
.PP
.ft B
.nf
.sp 0.5
xdr_u_hyper(xdrs, uhp)
\s-1XDR\s0 *xdrs;
u_longlong_t *uhp;
.fi
.ft R
.IP
A filter primitive that translates between C
.B "unsigned long"
integers and their external representations.
(The \*Ltypedef u_longlong_t\*O is defined
as \*Lunsigned long\*O in the file \*L<rpc/types.h>\*O, which is included from
the file \*L<rpc/xdr.h>\*O.) This routine will translate all 8 bytes of
data to the
.SM XDR
stream. Note that this differentiates this routine from \*Lxdr_u_long\*O
in that they both take a pointer to an \*Lunsigned long\*O as an argument, while
\*Lxdr_u_long\*O only translates 4 bytes of data to the
.SM XDR
stream. This routine returns one if it succeeds, zero otherwise.
.IP
The \*Lxdr_u_hyper\*O routine is functionally equivalent to the
\*Lxdr_u_longlong_t\*O routine.
.IP
See the following section that explains the differences between
\*Lxdr_long\*O and \*Lxdr_hyper\*O.
.br
.if t .ne 9
.PP
.ft B
.nf
.sp 0.5
xdr_u_int(xdrs, up)
\s-1XDR\s0 *xdrs;
unsigned *up;
.fi
.ft R
.IP
A filter primitive that translates between C
.B unsigned
integers and their external representations.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 7
.PP
.ft B
.nf
.sp 0.5
xdr_u_long(xdrs, ulp)
\s-1XDR\s0 *xdrs;
unsigned long *ulp;
.fi
.ft R
.IP
A filter primitive that translates between C
.B "unsigned long"
integers and their external representations.
This routine returns one if it succeeds, zero otherwise.
.IP
Prior to serializing the data on the \*LENCODE\*O side the \*Lxdr_u_long\*O performs
a validity check to insure that the value represents a valid 32-bit
unsigned number.  This involves determining that the unsigned value is
no greater than the largest 32-bit unsigned quantity (which is
the hexadecimal value 0xffffffff).  If the value pointed to by the argument
\*Vulp\*O is not within this range, the \*Lxdr_u_long\*O interface returns
an error.
.IP
For \*LDECODE\*O operations, the 32-bit unsigned value is sign extended
into the 64-bit unsigned long referred to by the argument \*Lulp\*O.
.IP
Note that this routine actually translates 4 bytes of the data to or
from the
.SM XDR
stream. Refer to the description of \*Lxdr_long\*O for a more detailed
explanation.
.br
.if t .ne 7
.PP
.ft B
.nf
.sp 0.5
xdr_u_longlong_t(xdrs, uhp)
\s-1XDR\s0 *xdrs;
u_longlong_t *uhp;
.fi
.ft R
.IP
A filter primitive that translates between C
.B "unsigned long"
integers and their external representations.
(The \*Ltypedef u_longlong_t\*O is defined
as \*Lunsigned long\*O in the file \*L<rpc/types.h>\*O, which is included from
the file \*L<rpc/xdr.h>\*O.) This routine will translate all 8 bytes of
data to the
.SM XDR
stream. Note that this differentiates this routine from \*Lxdr_u_long\*O
in that they both take a pointer to an \*Lunsigned long\*O as an argument, while
\*Lxdr_u_long\*O only translates 4 bytes of data to the
.SM XDR
stream. This routine returns one if it succeeds, zero otherwise.
.IP
The \*Lxdr_u_longlong\*O routine is functionally equivalent to the
\*Lxdr_u_hyper\*O routine.
.IP
See the following section that explains the differences between
\*Lxdr_long\*O and \*Lxdr_hyper\*O.
.PP
.ft B
.nf
.sp 0.5
xdr_u_short(xdrs, usp)
\s-1XDR\s0 *xdrs;
unsigned short *usp;
.fi
.ft R
.IP
A filter primitive that translates between C
.B "unsigned short"
integers and their external representations.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 16
.PP
.ft B
.nf
.sp 0.5
xdr_union(xdrs, dscmp, unp, choices, dfault)
\s-1XDR\s0 *xdrs;
int *dscmp;
char *unp;
struct xdr_discrim *choices;
bool_t (*defaultarm) (\|);  /* may equal \s-1NULL\s0 */
.fi
.ft R
.IP
A filter primitive that translates between a discriminated C
.B union
and its corresponding external representation. It first
translates the discriminant of the union located at
.IR dscmp .
This discriminant is always an
.BR enum_t .
Next the union located at
\*Vunp\*O
is translated.  The parameter
\*Vchoices\*O
is a pointer to an array of
.B xdr_discrim(\|)
structures. Each structure contains an ordered pair of
.RI [ value , proc ].
If the union's discriminant is equal to any of the values,
the associated
\*Vproc\*O
is called to translate the union.  The end of the
.B xdr_discrim(\|)
structure array is denoted by a
.SM NULL\s0
pointer. If the discriminant is not found in the
\*Vchoices\*O
array, then the
\*Vdefaultarm\*O
procedure is called (if it is not
.SM NULL\s0).
Returns one if it succeeds, zero otherwise.
.br
.if t .ne 6
.PP
.ft B
.nf
.sp 0.5
xdr_vector(xdrs, arrp, size, elsize, elproc)
\s-1XDR\s0 *xdrs;
char *arrp;
u_int size, elsize;
xdrproc_t elproc;
.fi
.ft R
.IP
A filter primitive that translates between fixed-length
arrays
and their corresponding external representations.  The
parameter
\*Varrp\*O
is the address of the array, while
\*Vsize\*O
is the element count of the array.  The parameter
\*Velsize\*O
is the
\*Vsizeof\*O
each of the array's elements, and
\*Velproc\*O
is an
.SM XDR
filter that translates between
the array elements' C form, and their external
representation.
This routine returns one if it succeeds, zero otherwise.
.br
.if t .ne 5
.PP
.ft B
.nf
.sp 0.5
xdr_void(\|)
.fi
.ft R
.IP
This routine always returns one.
It may be passed to
.SM RPC
routines that require a function parameter,
where nothing is to be done.
.br
.if t .ne 10
.PP
.ft B
.nf
.sp 0.5
xdr_wrapstring(xdrs, sp)
\s-1XDR\s0 *xdrs;
char **sp;
.fi
.ft R
.IP
A primitive that calls
.B "xdr_string(xdrs, sp,\s-1MAXUNSIGNED\s0 );"
where
.BR \s-1MAXUNSIGNED\s0
is the maximum value of an unsigned integer.
.B xdr_wrapstring(\|)
is handy because the
.SM RPC
package passes a maximum of two
.SM XDR
routines as parameters, and
.BR xdr_string(\|) ,
one of the most frequently used primitives, requires three.
\*Vsp\*O
is the address of the pointer to the string. While decoding if
\*V*sp\*O
is
.SM NULL ,
the necessary storage is allocated to hold the null \-terminated string
and
\*V*sp\*O
is set to point to this. This storage can be freed by using
.BR xdr_free(\|)
(see
.BR xdr_simple (3)
). Returns one if it succeeds, zero otherwise.
.SS Differences Between xdr_long and xdr_hyper Routines
On DEC OSF/1 platforms, the C programming language and the XDR routines
apply different conventions to the definitions of the \*Llong\*O data
type.
.PP
On DEC OSF/1 platforms, the C programming language applies the following
conventions for \*Lint\*O and \*Llong\*O data types:
.PP
.TS
tab(@);
lfHBlfHBlfHB
lll.
_
.sp 4p
Data Type@bits@bytes
.sp 4p
_
int@32@4 bytes
.sp
long@64@8 bytes
_
.TE
.PP
The XDR routines apply the following conventions:
.PP
.TS
tab(@);
lfHBlfHBlfHB
lll.
_
.sp 4p
Data Type@bits@bytes
.sp 4p
_
int@32@4 bytes
.sp
long@32@4 bytes
.sp
hyper@64@8 bytes
_
.TE
.PP
The \*Lxdr_long\*O() and \*Lxdr_u_long\*O() interfaces serialize 4 bytes
of data. The \*Lxdr_hyper\*O() and \*Lxdr_u_hyper\*O() serialize 8 bytes
of data.
.PP
On DEC OSF/1 systems, the second argument to both \*Lxdr_long\*O and
\*Lxdr_hyper\*O must be either a pointer or of the C language type long
(8 bytes).  When \*Lxdr_hyper\*O is called with a parameter that points to
a long all 8-bytes are serialized.  In contrast, when \*Lxdr_long\*O
is called with a parameter that points to a long only the low order
4-bytes are serialized.
.PP
When calling \*Lxdr_long\*O on the \*LDECODE\*O operation, the upper
4-bytes of the long are sign extended in accordance with the high order bit
of the lower 4-byte quantity. This is necessary to maintain the XDR
convention of \*Lxdr_long\*O serializing 4-bytes.
.PP
If you want all 8-bytes to be serialized, use the \*Lxdr_hyper\*O
interface.
.PP
The \*Lxdr_longlong_t\*O and the \*Lxdr_u_longlong_t\*O perform the same
function as the \*Lxdr_hyper\*O and the \*Lxdr_u_hyper\*O interfaces
respectively.
.SH RELATED INFORMATION
.PP
.BR rpc (3)
.PP
.EQ
delim off
.EN

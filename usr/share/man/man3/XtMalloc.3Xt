.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: XtMalloc.3Xt,v $ $Revision: 1.2.4.2 $ (DEC) $Date: 1993/05/03 16:52:32 $
.\" 
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xL Xlib \- C Language X Interface
.ny0
.TH XtMalloc 3Xt "" "" "" "X11R5"
.SH NAME
XtMalloc, XtCalloc, XtRealloc, XtFree, XtNew, XtNewString \- memory management functions
.SH SYNTAX
.NX R "XtMalloc routine"
.NX R "XtCalloc routine"
.NX R "XtRealloc routine"
.NX R "XtFree routine"
.NX R "XtNew routine"
.NX R "XtNeString routine"
char *XtMalloc(\f2size\fP);
.br
      Cardinal \f2size\fP;
.PP
char *XtCalloc(\f2num\fP, \f2size\fP);
.br
      Cardinal \f2num\fP;
.br
      Cardinal \f2size\fP;
.PP
char *XtRealloc(\f2ptr\fP, \f2num\fP);
.br
      char *\f2ptr\fP;
.br
      Cardinal \f2num\fP;
.PP
void XtFree(\f2ptr\fP);
.br
      char *\f2ptr\fP;
.PP
\f2type\fP *XtNew(\f2type\fP);
.br
      \f2type\fP;
.PP
String XtNewString(\f2string\fP);
.br
      String \f2string\fP;
.SH ARGUMENTS
.IP \f2num\fP 1i
Specifies the number of bytes or array elements.
.ds Po to the old storage or to the block of storage that is to be freed
.IP \f2ptr\fP 1i
Specifies a pointer \*(Po.
.IP \f2size\fP 1i
Specifies the size of an array element (in bytes) or the number of bytes
desired.
.IP \f2string\fP 1i
Specifies a previously declared string.
.IP \f2type\fP 1i
Specifies a previously declared data type.
.SH DESCRIPTION
The
.PN XtMalloc
functions returns a pointer to a block of storage of at least
the specified size bytes.
If there is insufficient memory to allocate the new block,
.PN XtMalloc
calls
.PN XtErrorMsg .
.PP
The
.PN XtCalloc
function allocates space for the specified number of array elements
of the specified size and initializes the space to zero.
If there is insufficient memory to allocate the new block,
.PN XtCalloc
calls
.PN XtErrorMsg .
.PP
The
.PN XtRealloc
function changes the size of a block of storage (possibly moving it).
Then, it copies the old contents (or as much as will fit) into the new block
and frees the old block.
If there is insufficient memory to allocate the new block,
.PN XtRealloc
calls
.PN XtErrorMsg .
If ptr is NULL,
.PN XtRealloc
allocates the new storage without copying the old contents;
that is, it simply calls
.PN XtMalloc .
.PP
The
.PN XtFree
function returns storage and allows it to be reused.
If ptr is NULL,
.PN XtFree
returns immediately.
.PP
.PN XtNew
returns a pointer to the allocated storage.
If there is insufficient memory to allocate the new block,
.PN XtNew
calls
.PN XtErrorMsg .
.PN XtNew
is a convenience macro that calls
.PN XtMalloc
with the following arguments specified:
.PP
\f(CW((type *) XtMalloc((unsigned) sizeof(type))\fP
.PP
.PN XtNewString
returns a pointer to the allocated storage.
If there is insufficient memory to allocate the new block,
.PN XtNewString
calls
.PN XtErrorMsg .
.PN XtNewString
is a convenience macro that calls
.PN XtMalloc
with the following arguments specified:
.PP
\f(CW(strcpy(XtMalloc((unsigned) strlen(str) + 1), str))\fP
.PP
.SH "SEE ALSO"
.br
\f2\*(xT\fP
.br
\f2\*(xL\fP
.EQ
delim off
.EN

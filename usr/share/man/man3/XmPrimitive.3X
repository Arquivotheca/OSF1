.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: XmPrimitive.3X,v $ $Revision: 3.2.4.5 $ (DEC) $Date: 1993/12/14 20:17:09 $
.\"
.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
.\" **      Maynard, MA.  All Rights Reserved.
.\" **
.\" **
.TH XmPrimitive 3X "" "" "" "OSF/Motif"
.SH NAME
\*LXmPrimitive\*O \- The Primitive widget class
.SH SYNOPSIS
.sS
.iS
\&#include <Xm/Xm.h>
.iE
.sE
.SH DESCRIPTION
.iX "XmPrimitive"
.iX "widget class" "Primitive"
Primitive is a widget class used as a supporting superclass
for other widget classes.  It handles border drawing and highlighting,
traversal activation and deactivation, and various callback lists needed by
Primitive widgets.
.SS "Classes"
Primitive inherits behavior and resources from \*LCore\*O class.
.PP 
The class pointer is \*LxmPrimitiveWidgetClass\*O.
.PP 
The class name is \*LXmPrimitive\*O.
.nL
.ne 12
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \*LXmN\*O or
\*LXmC\*O prefix and use the remaining letters.  To specify one of the defined
values for a resource in a .Xdefaults file, remove the \*LXm\*O prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (C),
set by using \*LXtSetValues\*O (S),
retrieved by using \*LXtGetValues\*O (G), or is not applicable (N/A).
.PP
.ne 10
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmPrimitive Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNbottomShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCBottomShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNbottomShadowPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCBottomShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNforeground	dynamic	CSG
\ \ \ \ \ \ XmCForeground	\ \ \ \ \ \ \ Pixel
_
XmNhelpCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNhighlightColor	dynamic	CSG
\ \ \ \ \ \ XmCHighlightColor	\ \ \ \ \ \ \ Pixel
_
XmNhighlightOnEnter	False	CSG
\ \ \ \ \ \ XmCHighlightOnEnter	\ \ \ \ \ \ \ Boolean
_
XmNhighlightPixmap	dynamic	CSG
\ \ \ \ \ \ XmCHighlightPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNhighlightThickness	2	CSG
\ \ \ \ \ \ XmCHighlightThickness	\ \ \ \ \ \ \ Dimension
_
.wH .tH
XmNnavigationType	XmNONE	CSG
\ \ \ \ \ \ XmCNavigationType	\ \ \ \ \ \ \ XmNavigationType
_
XmNshadowThickness	2	CSG
\ \ \ \ \ \ XmCShadowThickness	\ \ \ \ \ \ \ Dimension
_
XmNtopShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNtopShadowPixmap	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNtraversalOn	True	CSG
\ \ \ \ \ \ XmCTraversalOn	\ \ \ \ \ \ \ Boolean
_
XmNunitType	dynamic	CSG
\ \ \ \ \ \ XmCUnitType	\ \ \ \ \ \ \ unsigned char
_
XmNuserData	NULL	CSG
\ \ \ \ \ \ XmCUserData	\ \ \ \ \ \ \ XtPointer
_
.TE
.\" NROFF HACK END
.nL
.ne 3
.VL  
.LI "\*LXmNbottomShadowColor\*O"
Specifies the color to use to draw the bottom and right sides of the
border shadow.
This color is used if the \*LXmNtopShadowPixmap\*O resource is
unspecified.
.LI "\*LXmNbottomShadowPixmap\*O"
Specifies the pixmap to use to draw the bottom and right sides of the
border shadow.
.LI "\*LXmNforeground\*O"
Specifies the foreground drawing color used by Primitive widgets.
.LI "\*LXmNhelpCallback\*O"
Specifies the list of callbacks that is called when the help key
is pressed.  The reason sent by the callback is \*LXmCR_HELP\*O.
.LI "\*LXmNhighlightColor\*O"
Specifies the color of the highlighting rectangle.
This color is used if the highlight pixmap resource is
\*LXmUNSPECIFIED_PIXMAP\*O.
.LI "\*LXmNhighlightOnEnter\*O"
Specifies if the highlighting rectangle is drawn when the cursor moves
into the widget.
If the shell's focus policy is \*LXmEXPLICIT\*O, this resource is
ignored, and the widget is highlighted when it has the focus.
If the shell's focus policy is \*LXmPOINTER\*O and if this resource is
True, the highlighting rectangle is drawn when the the cursor moves into
the widget.
If the shell's focus policy is \*LXmPOINTER\*O and if this resource is
False, the highlighting rectangle is not drawn when the the cursor moves
into the widget.
The default is False.
.LI "\*LXmNhighlightPixmap\*O"
Specifies the pixmap used to draw the highlighting rectangle.
.LI "\*LXmNhighlightThickness\*O"
Specifies the thickness of the highlighting rectangle.
.LI "\*LXmNnavigationType\*O"
Determines whether the widget is a tab group.
.wH .rS 
.ML
.LI
\*LXmNONE\*O indicates that the widget is not a tab group.
.LI
\*LXmTAB_GROUP\*O indicates that the widget is a tab group, unless
another widget in the hierarchy has an \*LXmNnavigationType\*O of
\*LXmEXCLUSIVE_TAB_GROUP\*O.
.LI
\*LXmSTICKY_TAB_GROUP\*O indicates that the widget is a tab group, even
if another widget in the hierarchy has an \*LXmNnavigationType\*O of
\*LXmEXCLUSIVE_TAB_GROUP\*O.
.LI
\*LXmEXCLUSIVE_TAB_GROUP\*O indicates that the widget is a tab group and
that widgets in the hierarchy whose \*LXmNnavigationType\*O is
\*LXmTAB_GROUP\*O are not tab groups.
.sp
When a parent widget has an \*LXmNnavigationType\*O of
\*LXmEXCLUSIVE_TAB_GROUP\*O, traversal of non-tab-group widgets within
the group is based on the order of those widgets in their parent's
\*LXmNchildren\*O list.
.sp
When any widget in a hierarchy has an \*LXmNnavigationType\*O of
\*LXmEXCLUSIVE_TAB_GROUP\*O, traversal of tab groups in the hierarchy
proceeds to widgets in the order in which their \*LXmNnavigationType\*O
resources were specified as \*LXmEXCLUSIVE_TAB_GROUP\*O or
\*LXmSTICKY_TAB_GROUP\*O, whether by creating the widgets with that value,
by calling \*LXtSetValues\*O, or by calling \*LXmAddTabGroup\*O.
.LE
.wH .rE
.LI "\*LXmNshadowThickness\*O"
Specifies the size of the drawn border shadow.
.LI "\*LXmNtopShadowColor\*O"
Specifies the color to use to draw the top and left sides of the border
shadow.
This color is used if the \*LXmNtopShadowPixmap\*O resource is
unspecified.
.LI "\*LXmNtopShadowPixmap\*O"
Specifies the pixmap to use to draw the top and left sides of the border
shadow.
.LI "\*LXmNtraversalOn\*O"
Specifies if traversal is activated for this widget.  In CascadeButton
and CascadeButtonGadget, this resource is forced to TRUE unless the parent
is an OptionMenu.
.LI "\*LXmNunitType\*O"
Provides the basic support for resolution independence.
It defines the type of units a widget uses with sizing and
positioning resources.
If the widget's parent is a subclass of \*LXmManager\*O and if the
\*LXmNunitType\*O resource is not explicitly set, it defaults to the
unit type of the parent widget.
If the widget's parent is not a subclass of \*LXmManager\*O, the
resource has a default unit type of \*LXmPIXELS\*O.
.sp
\*LXmNunitType\*O can have the following values:
.wH .rS 
.ML
.LI
\*LXmPIXELS\*O\(emall values provided to the widget are treated as normal
pixel values.
.LI
\*LXm100TH_MILLIMETERS\*O\(emall values provided to the widget are treated
as 1/100 millimeter.
.LI
\*LXm1000TH_INCHES\*O\(emall values provided to the widget are treated as
1/1000 inch.
.LI
\*LXm100TH_POINTS\*O\(emall values provided to the widget are treated as
1/100 point.  A point is a unit used in text processing
applications and is defined as 1/72 inch.
.LI
\*LXm100TH_FONT_UNITS\*O\(emall values provided to the widget are
treated as 1/100 of a font unit.
A font unit has horizontal and vertical components.
These are the values of the XmScreen resources \*LXmNhorizontalFontUnit\*O
and \*LXmNverticalFontUnit\*O.
.LE 
.LI "\*LXmNuserData\*O"
Allows the application to attach any necessary specific data to the widget.
It is an internally unused resource.
.LE 
.SS "Dynamic Color Defaults"
The foreground, background, top shadow, bottom shadow, and
highlight color resources are dynamically defaulted.
If no color data is specified, the colors are
automatically generated.  On a single-plane system, a black and white color
scheme is generated.  Otherwise, four colors are
generated, which display the correct shading for the 3-D visuals.
If the background is the only color specified for a widget, the top
shadow and bottom shadow colors are generated to give the 3-D appearance.
Foreground and highlight colors are generated to provide sufficient
contrast with the background color.
.PP 
Colors are generated only at creation.  Resetting the background through
\*LXtSetValues\*O does not regenerate the other colors.
\*LXmChangeColor\*O can be used to recalculate all associated colors
based on a new background color.
.SS "Inherited Resources"
Primitive inherits behavior and resources from the following
superclass.  For a complete description of each resource, refer to the
man page for that superclass.
.PP
.wH .in 0 
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Core Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNaccelerators	dynamic	CSG
\ \ \ \ \ \ XmCAccelerators	\ \ \ \ \ \ \ XtAccelerators
_
XmNancestorSensitive	dynamic	G
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNbackground	dynamic	CSG
\ \ \ \ \ \ XmCBackground	\ \ \ \ \ \ \ Pixel
_
XmNbackgroundPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderColor	XtDefaultForeground	CSG
\ \ \ \ \ \ XmCBorderColor	\ \ \ \ \ \ \ Pixel
_
XmNborderPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderWidth	0	CSG
\ \ \ \ \ \ XmCBorderWidth	\ \ \ \ \ \ \ Dimension
_
XmNcolormap	dynamic	CG
\ \ \ \ \ \ XmCColormap	\ \ \ \ \ \ \ Colormap
_
XmNdepth	dynamic	CG
\ \ \ \ \ \ XmCDepth	\ \ \ \ \ \ \ int
_
XmNdestroyCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNheight	dynamic	CSG
\ \ \ \ \ \ XmCHeight	\ \ \ \ \ \ \ Dimension
_
XmNinitialResourcesPersistent	True	C
\ \ \ \ \ \ XmCInitialResourcesPersistent	\ \ \ \ \ \ \ Boolean
_
XmNmappedWhenManaged	True	CSG
\ \ \ \ \ \ XmCMappedWhenManaged	\ \ \ \ \ \ \ Boolean
_
XmNscreen	dynamic	CG
\ \ \ \ \ \ XmCScreen	\ \ \ \ \ \ \ Screen *
_
.wH .tH
XmNsensitive	True	CSG
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNtranslations	dynamic	CSG
\ \ \ \ \ \ XmCTranslations	\ \ \ \ \ \ \ XtTranslations
_
XmNwidth	dynamic	CSG
\ \ \ \ \ \ XmCWidth	\ \ \ \ \ \ \ Dimension
_
XmNx	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
XmNy	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
.TE
.\" NROFF HACK END
.wH .in  
.SS "Callback Information"
A pointer to the following structure is passed to each callback:
.sS
.iS
.ta .25i 1.50i
typedef struct
{
	int	\*Vreason\*L;
	\*LXEvent	\*V* event\*L;
} XmAnyCallbackStruct;
.iE
.sE
.wH .fi
.VL .75i 
.LI "\*Vreason\*O"
Indicates why the callback was invoked.
For this callback, \*Vreason\*O is set to \*LXmCR_HELP\*O.
.LI "\*Vevent\*O"
Points to the \*LXEvent\*O that triggered the callback.
.LE 
.SS "Translations"
The XmPrimitive translations are listed below.
These translations may not directly correspond to a
translation table.
.PP 
Note that for buttons in menus, altering translations in \*L#override\*O
or \*L#augment\*O mode is undefined.
.iS
.ta 1.5i
KUp:	PrimitiveTraverseUp()
KDown:	PrimitiveTraverseDown()
KLeft:	PrimitiveTraverseLeft()
KRight:	PrimitiveTraverseRight()
.sp \n(PDu
KBeginLine:	PrimitiveTraverseHome()
.sp \n(PDu
KNextField:	PrimitiveNextTabGroup()
KPrevField:	PrimitivePrevTabGroup()
.sp \n(PDu
KActivate:	PrimitiveParentActivate()
KCancel:	PrimitiveParentCancel()
.sp \n(PDu
KHelp:	PrimitiveHelp()
.wH .fi
.iE
.SS "Action Routines"
The XmPrimitive action routines are described below:
.VL  
.LI "\*LPrimitiveHelp()\*O:"
Calls the callbacks for \*LXmNhelpCallback\*O if any exist.  If there are no help
callbacks for this widget, this action calls the help callbacks
for the nearest ancestor that has them.
.LI "\*LPrimitiveNextTabGroup()\*O:"
Traverses to the first item in the next tab group.  If
the current tab group is the last entry in the tab group list, it
wraps to the beginning of the tab group list.
.LI "\*LPrimitiveParentActivate()\*O:"
If the parent is a manager,
passes the \*LKActivate\*O event received by the widget
to the parent.
.LI "\*LPrimitiveParentCancel()\*O:"
If the parent is a manager,
Passes the \*LKCancel\*O event received by the widget
to the parent.
.LI "\*LPrimitivePrevTabGroup()\*O:"
Traverses to the first item in the previous tab group.
If the beginning of the tab group list is reached, it wraps to the end
of the tab group list.
.LI "\*LPrimitiveTraverseDown()\*O:"
Traverses to the next item below the current widget in the current tab
group, wrapping if necessary.
.LI "\*LPrimitiveTraverseHome()\*O:"
Traverses to the first widget or gadget in the current tab group.
.LI "\*LPrimitiveTraverseLeft()\*O:"
Traverses to the next item to the left of the current widget in the
current tab group, wrapping if necessary.
.LI "\*LPrimitiveTraverseNext()\*O:"
Traverses to the next item in the current tab group, wrapping if
necessary.
.LI "\*LPrimitiveTraversePrev()\*O:"
Traverses to the previous item in the current tab group, wrapping if
necessary.
.nL
.ne 10
.LI "\*LPrimitiveTraverseRight()\*O:"
Traverses to the next item to the right of the current gadget in the
current tab group, wrapping if necessary.
.nL
.ne 3
.LI "\*LPrimitiveTraverseUp()\*O:"
Traverses to the next item above the current gadget in the current tab
group, wrapping if necessary.
.LE
.SS "Additional Behavior"
This widget has the additional behavior described below:
.VL  
.LI "\*L<FocusIn>\*O:"
If the shell's keyboard focus policy is \*LXmEXPLICIT\*O, highlights the
widget and gives it the focus.
.LI "\*L<FocusOut>\*O:"
If the shell's keyboard focus policy is \*LXmEXPLICIT\*O, unhighlights
the widget and removes the focus.
.LE
.SS "Virtual Bindings"
The bindings for virtual keys are vendor specific.
For information about bindings for virtual buttons and keys, see \*LVirtualBindings(3X)\*O.
.SH RELATED INFORMATION
.na
\*LCore(3X)\*O,
\*LXmChangeColor(3X)\*O, and
\*LXmScreen(3X)\*O.
.ad
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: pthread_mutex_lock.3,v $ $Revision: 3.2.2.3 $ (DEC) $Date: 1992/10/14 14:01:55 $
.\"
...\" Copyright 1991, Open Software Foundation, Inc. ALL RIGHTS RESERVED.
.wH ********************************************************************
.wH                                                                    *
.wH COPYRIGHT (c) 1990 BY DIGITAL EQUIPMENT CORPORATION,               *
.wH Maynard, Mass.                                                     *
.wH                                                                    *
.wH This document is furnished under a license and may be used and     *
.wH copied only in accordance with the terms of such license and with  *
.wH the inclusion of the above copyright notice. This document or any  *
.wH other copies thereof may not be provided or otherwise made         *
.wH available to any other person. No title to or ownership of the     *
.wH document is hereby transferred.                                    *
.wH                                                                    *
.wH The information in this document is subject to change without      *
.wH notice and should not be construed as a commitment by DIGITAL      *
.wH Equipment Corporation.                                             *
.wH                                                                    *
.wH ********************************************************************
.wH "<routine_section>"
.TH pthread_mutex_lock 3
.SH NAME
\*Lpthread_mutex_lock\*O \- Locks an unlocked mutex. If the mutex is locked, this routine causes the thread to wait for the mutex to become available.
.SH SYNOPSIS
.PP
.sS
\*L#include <pthread.h>
.fS "int pthread_mutex_lock"
.dS "pthread_mutex_t"
\*V*mutex\*O
.dE
.fE
.sE
.wH "<endformat>"
.SH PARAMETERS
.PP
.VL 5m
.LI "\*Vmutex\*O"
Mutex locked.
.LE
.wH "<endparameters>"
.SH DESCRIPTION
.iX "Mutex" "locking"
.iX "Locking a mutex"
.iX "Priority inversion" "avoiding"
.iX "Thread" "waiting for a mutex"
.PP
This routine locks a mutex. If the mutex is locked when a thread calls this
routine, the thread waits for the mutex to become available.
.PP
The thread that has locked a mutex becomes its current owner and remains the
owner until the same thread has unlocked it. This routine returns with the
mutex in the locked state and with the current thread as the mutex's current
owner.
.PP
If you specified a fast mutex in a call to
\*Lpthread_mutexattr_setkind_np\*O,
.wH "<mark>"
a deadlock can result
.wH "<endmark>"
if the current owner of a mutex calls this routine in an attempt to lock the
mutex a second time. If you specified a recursive mutex in a call to
\*Lpthread_mutexattr_setkind_np\*O, the current owner of a mutex can
relock the same mutex without blocking.
.PP
The preemption of a lower-priority thread that locks a mutex might result in
the indefinite blocking of higher-priority threads waiting for the same
mutex. The execution of the waiting, higher-priority threads are blocked for
as long as there is a sufficient number of runnable threads of any priority
between the lower- and higher- priority values. Priority inversion occurs
.wH "<mark>"
when any resource is shared between threads with different priorities.
.wH "<endmark>"
.PP
Priority inversion is a problem because it counters the intent of scheduling
policy by defeating the effect of priority.
Following are possible solutions that an implementation can choose to
prevent or reduce the severity of this problem:
.ML
.LI
Increase the priority of a thread when it first locks a mutex.
.LI
Increase the priority of the owner of a mutex whenever a thread of
higher priority starts to wait for the same mutex.
.LI
Adjust thread priorities to ensure that no ready thread is blocked
indefinitely from access to a processor. (Note that this solution applies to
all cases of priority inversion, not just those associated with mutexes.)
.LE
.SH RETURN VALUES
.PP
If an error condition occurs, this routine returns \-1 and sets
\*Eerrno\*O to the corresponding error value. Possible return values
are as follows:
.sp
.TS
center, tab(@);
l l l.
\*LReturn@Error@Description\*O
_
\00@@Successful completion.
\&\-1@[\*LEINVAL\*O]@The value specified by \*Vmutex\*O is invalid.
\&\-1@[\*LEDEADLK\*O]@A deadlock condition is detected.
.TE
.wH "<endnas_return>"
.cS
.SH EXAMPLES
.PP
.oS
int pthread_mutex_lock (pthread_mutex_t *mutex);
.oE
.cE
.wH "<endnas_examples>"
.SH RELATED INFORMATION
.PP
\*Lpthread_mutexattr_setkind_np\*O(3),
\*Lpthread_mutex_destroy\*O(3),
\*Lpthread_mutex_init\*O(3),
\*Lpthread_mutex_trylock\*O(3),
\*Lpthread_mutex_unlock\*O(3)
.EQ
delim off
.EN

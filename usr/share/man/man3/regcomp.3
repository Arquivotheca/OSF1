.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: regcomp.3,v $ $Revision: 1.1.3.4 $ (DEC) $Date: 1993/11/29 21:10:58 $
.\"
.\"
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.TH regcomp 3
.SH NAME
.PP
\*Lregcomp\*O, \*Lregerror\*O, \*Lregexec\*O, \*Lregfree\*O \- Compares string to regular expression
.SH LIBRARY
.PP
Standard C Library (\*Llibc. a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <sys/types.h>
.sp 0.4v
#include <regex.h>
.sp 0.4v
\*Lint regcomp(
.nL
	regex_t *\*Vpreg\*L,
.nL
	const char *\*Vpattern\*L,
.nL
	int \*Vcflags\*L);
.sp 0.4v
\*Lsize_t regerror(
.nL
	int \*Verrcode\*L\|,
.nL
	const regex_t \*Vpreg\*L\|,
.nL
	char *\*Verrbuf\*L\|,
.nL
	size_t \*Verrbuf_size\*L\|);
.sp 0.4v
\*Lint regexec(
.nL
	const regex_t *\*Vpreg\*L,
.nL
	const char  *\*Vstring\*L,
.nL
	size_t \*Vnmatch\*L,
.nL
	regmatch_t *\*Vpmatch\*L,
.nL
	int \*Veflags\*L);
.sp 0.4v
\*Lvoid regfree(
.nL
	regex_t *\*Vpreg\*L);
.sE
.SH PARAMETERS
.PP
.VL 1i
.LI "\*Vcflags\*O"
Contains the bitwise inclusive OR of flags for \*Lregcomp(\|)\*O.
.IP
The \*Vcflags\*O parameter is the bitwise inclusive OR of zero or more of the
following flags. These flags are defined in the
\*L/usr/include/regex.h\*O file.
.VL
.LI "\*LREG_EXTENDED\*O"
Uses extended regular expressions.
.LI "\*LREG_ICASE\*O"
Ignores case in match.
.LI "\*LREG_NOSUB\*O"
If this flag is not set,
the \*Lregcomp(\|)\*O function sets the \*Vpreg\*L.re_nsub\*O field to
the number of parenthetic expressions found in the \*Vpattern\*O parameter. Otherwise, a
subexpression will result in an error.
.LI "\*LREG_NEWLINE\*O"
Treats newline as a special character marking the end and beginning of lines.
.LE
.LI "\*Vpattern\*O"
Contains the basic or extended regular expression
to be compiled by \*Lregcomp(\|)\*O.
.IP
The default regular expression type for the \*Vpattern\*O parameter is a basic
regular expression. An application can specify extended regular
expressions with
the \*LREG_EXTENDED\*O flag. If the \*LREG_NOSUB \*O flag is not set in the
\*Vcflags\*O parameter, the \*Lregcomp(\|)\*O function sets the number of
parenthetic subexpressions (delimited by a \e( (backslash left
parenthesis) and \e) (backslash right parenthesis) pair in basic regular
expressions, or ( ) (parentheses) in extended regular
expressions) to the number found in the \*Vpattern\*O parameter.
.LI "\*Vpreg\*O"
The structure that contains the compiled basic or extended regular expression.
.LI "\*Verrcode\*O"
Identifies the error code.
.LI "\*Verrbuf\*O"
Points to the buffer where \*Lregerror(\|)\*O stores the message text.
.LI "\*Verrbuf_size\*O"
Specifies the size of the \*Verrbuf\*O buffer.
.LI "\*Vstring\*O"
Contains the data to be matched.
.LI "\*Vnmatch\*O"
Contains the number of subexpressions to match.
.LI "\*Vpmatch\*O"
Contains the array of offsets into the \*Vstring\*O parameter that match the
corresponding subexpression in the \*Vpreg\*O parameter.
.LI "\*Veflags\*O"
Contains the bitwise inclusive OR of zero or more of the flags controlling the
customizable behavior of the \*Lregexec\*O function.
.IP
The \*Veflags\*O parameter modifies the interpretation of the contents of the
\*Vstring\*O parameter.  The value for this parameter is formed by
bitwise inclusive ORing zero or more of the
following flags, which are defined in the \*L/usr/include/regex.h\*O file.
.VL
.LI "\*LREG_NOTBOL\*O"
The first character of the string pointed to by the \*Vstring\*O parameter is
not the beginning of the line. Therefore, the circumflex character \*L^\*O
(circumflex), when taken as a special character, does not match the beginning of
the \*Vstring\*O parameter.
.LI "\*LREG_NOTEOL\*O"
The last character of the string pointed to by the \*Vstring\*O parameter is not
the end of the line. Therefore, the \*L$\*O (dollar sign), when taken as a
special character, does not match the end of the \*Vstring\*O parameter.
.LE
.LE
.SH DESCRIPTION
.PP
.iX "regcomp function"
.iX "regexec function"
.iX "regfree function"
.iX "regerror function"
The \*Lregcomp(\|)\*O, \*Lregerror(\|)\*O, \*Lregexec(\|)\*O, and
\*Lregfree(\|)\*O functions perform regular expression matching. The
\*Lregcomp(\|)\*O function compiles a regular expression and the
\*Lregexec(\|)\*O function compares the compiled regular expression to
a string.  The \*Lregerror(\|)\*O function returns text associated with
an error condition encountered by \*Lregcomp(\|)\*O or
\*Lregexec(\|)\*O. The \*Lregfree(\|)\*O function frees the internal
storage allocated for the compiled regular expression.
.PP
The \*Lregcomp(\|)\*O function compiles the basic or extended
regular expression specified by the \*Vpattern\*O parameter and
places the output in the \*Vpreg\*O structure.
.PP
The \*Lregexec(\|)\*O function compares the NULL terminated string in the
\*Vstring\*O parameter against the compiled basic or extended regular
expression in the \*Vpreg\*O parameter.  If a match is found, the
\*Lregexec(\|)\*O function
returns a value of 0 (zero). The \*Lregexec(\|)\*O function returns a
nonzero value if there is no match or if there is an error.
.PP
If the value of the \*Vnmatch\*O parameter is 0 (zero), or if the
\*LREG_NOSUB\*O
flag was set on the call to the \*Lregcomp(\|)\*O function, the
\*Lregexec(\|)\*O function ignores the \*Vpmatch\*O parameter. Otherwise, the
\*Vpmatch\*O parameter points to an array of at least the number of elements
specified by the \*Vnmatch\*O parameter. The \*Lregexec(\|)\*O
function fills in
the elements of the array pointed to by the \*Vpmatch\*O parameter with offsets
of the substrings of the \*Vstring\*O parameter.  The elements of the
\*Vpmatch\*O array correspond to the
parenthetic subexpressions of the original \*Vpattern\*O parameter that was
specified to the \*Lregcomp(\|)\*O function. The \*Lpmatch[\*Vi\*L].rm_so\*O
structure is
the byte offset of the beginning of the substring, and the
\*Lpmatch[\*Vi\*L].rm_eo\*O
structure is one greater than the byte offset of the end of the substring.
Subexpression \*Vi\*O begins at the \*Vi\*Oth matched open
parenthesis, counting
from 1. The 0 (zero) element of the array corresponds to the entire
pattern. Unused elements of the \*Vpmatch\*O parameter, up to the value
\*Vpmatch\*L[\*Vnmatch\*L-1\*L]\*O, are filled with -1. If
there are more than
the number of subexpressions specified by the \*Vnmatch\*O parameter (the
\*Vpattern\*O parameter itself counts as a subexpression), only the first
\*Vnmatch\*L-1\*O are recorded.
.PP
When matching a basic or extended regular expression, any given parenthetic
subexpression of the \*Vpattern\*O parameter can participate in the match of
several different substrings of the \*Vstring\*O parameter; however,
it may not
match any substring even though the pattern as a whole did match. The following
rules are used to determine which substrings to report in the \*Vpmatch\*O
parameter when matching regular expressions:
.ML
.LI
If a subexpression in a regular expression participated in the match several
times, the offset of the last matching substring is
reported in the \*Vpmatch\*O parameter.
.LI
If a subexpression did not participate in a match,
then the byte offset in the \*Vpmatch\*O parameter is a value of -1.
.LI
If a subexpression is contained in a subexpression,
the data in the \*Vpmatch\*O parameter refers to the last such subexpression.
.LI
If a subexpression is contained in a subexpression
and the byte offsets in the \*Vpmatch\*O parameter have a value
of -1, the pointers in the \*Vpmatch\*O parameter also have a value of -1.
.LI
If a subexpression matched a zero-length string, the offsets in the \*Vpmatch\*O
parameter refer to the byte immediately following the matching string.
.LE
.PP
If the \*LREG_NOSUB\*O flag was set in the \*Vcflags\*O parameter in
the call to
the \*Lregcomp(\|)\*O function, and the \*Vnmatch\*O parameter is not
equal to 0
(zero) in the call to the \*Lregexec\*O
function, the content of the \*Vpmatch\*O array is unspecified.
.PP
If the \*LREG_NEWLINE\*O flag was not set in the \*Vcflags\*O
parameter when the
\*Lregcomp(\|)\*O function was called, then a newline character in the
\*Vpattern\*O or \*Vstring\*O parameter is treated as an ordinary character. If
the \*LREG_NEWLINE\*O flag was set when the \*Lregcomp(\|)\*O function was
called, the newline character is treated as an
ordinary character, except as follows:
.ML
.LI
A newline character in the \*Vstring\*O parameter is not matched by a
\*L\&.\*O (dot)
outside of a bracket expression or by any form of a nonmatching list.
.\" .IP
.\" A non-matching list expression begins with a \*L^\*O (circumflex) and
.\" specifies a
.\" list that matches any character or collating element and the expression in the
.\" list after the leading circumflex. For example, the regular expression
.\" \*C[^abc]\*O matches any character except \*Ca\*O, \*Cb\*O, or \*Cc\*O. 
.\" The circumflex has this special meaning only when it is the first 
.\" character in the list, immediately following the left bracket.
.LI
A \*L^\*O (circumflex) in the \*Vpattern\*O parameter, when used to specify
expression anchoring, matches the zero-length string immediately after a newline
character in the \*Vstring\*O parameter, regardless of the setting of the
\*LREG_NOTBOL\*O flag.
.LI
A \*L$\*O (dollar sign) in the \*Vpattern\*O parameter, when used to specify
expression anchoring, matches the zero-length string immediately before a
newline character in the \*Vstring\*O parameter, regardless of the setting of
the \*LREG_NOTEOL\*O flag.
.LE
.PP
The \*Lregerror(\|)\*O function returns the text associated with the
specified error code. If the \*Lregcomp(\|)\*O or \*Lregexec(\|)\*O
function fails, it returns a nonzero error code. If this return value
is assigned to the \*Verrcode\*O parameter, the \*Lregerror(\|)\*O
function returns the text of the associated message.
.PP
The \*Lregfree(\|)\*O function frees any memory allocated by the
\*Lregcomp(\|)\*O function associated with the \*Vpreg\*O parameter. An
expression defined by the \*Vpreg\*O parameter is
no longer treated as a compiled basic or extended regular expression
after it is given to the \*Lregfree(\|)\*O function.
.SH EXAMPLES
.PP
.AL
.LI
The following example demonstrates how the \*LREG_NOTBOL\*O
flag can be used with the \*Lregexec(\|)\*O function to find all
substrings in a line that match a pattern supplied by a user. The
\*Lmain(\|)\*O function in the example accepts two input strings from
the user. The \*Lmatch(\|)\*O function in the example uses
\*Lregcomp(\|)\*O and \*Lregexec(\|)\*O to search for matches.
.IP
.oS
#include <sys/types.h>
#include <regex.h>
#include <locale.h>
#include <stdio.h>
#include <string.h>
\&#define SLENGTH 80

main()
{
    char    patt[SLENGTH], strng[SLENGTH];
    char    *eol;

    (void)setlocale(LC_ALL, "");

    printf("Enter a regular expression:");
    fgets(patt, SLENGTH, stdin);
    if ((eol = strchr(patt, '\en')) != NULL)
        *eol = '\e0';  /* Replace newline with null */
    else
        return;  /* Line entered too long */
    printf("Enter string to compare\enString: ");
    fgets(strng, SLENGTH, stdin);
    if ((eol = strchr(strng, '\en')) != NULL)
        *eol = '\e0';  /* Replace newline with null */
    else
        return;  /* Line entered too long */

    match(patt, strng);
}


int    match(char *pattern, char *string)
{
    char    message[SLENGTH];
    char    *start_search;
    int    error, msize, count;
    regex_t preg;
    regmatch_t pmatch;

    error = regcomp(&preg, pattern,
            REG_ICASE | REG_EXTENDED);
    if (error) {
        msize = regerror(error, &preg, message, SLENGTH);
        printf("%s\en", message);
        if (msize > SLENGTH)
            printf("Additional text lost\en");
        return;
    }
    error = regexec(&preg, string, 1, &pmatch, 0);
    if (error == REG_NOMATCH) {
        printf("No matches in string\en");
        return;
    } else if (error != 0) {
        msize = regerror(error, &preg, message, SLENGTH);
        printf("%s\en", message);
        if (msize > SLENGTH)
            printf("Additional text lost\en");
        return;
    };
    count = 1;
    start_search = string + pmatch.rm_eo;
    while (error == 0) {
        error =
            regexec(&preg, start_search, 1, &pmatch,
            REG_NOTBOL);
        start_search = start_search + pmatch.rm_eo;
        count++;
    };
    count--;
    printf("There are %i matches\en", count);
    regfree(&preg);
}
.oE
.LI
The following example finds out which subexpressions in the regular
expression have matches in the string. This example uses the same
\*Lmain(\|)\*O program as the preceding example. This example does not
specify \*LREG_EXTENDED\*O in the call to \*Lregcomp(\|)\*O and,
consequently, uses basic regular expressions, not extended regular
expressions.
.IP
.oS
\&#define MAX_MATCH 10
int    match(char *pattern, char *string)
{
    char    message[SLENGTH];
    char    *start_search;
    int    error, msize, count, matches_tocheck;
    regex_t preg;
    regmatch_t pmatch[MAX_MATCH];

    error = regcomp(&preg, pattern, REG_ICASE);
    if (error) {
        msize = regerror(error, &preg, message, SLENGTH);
        printf("regcomp: %s\en", message);
        if (msize > SLENGTH)
            printf("Additional text lost\en");
        return;
    }

    if (preg.re_nsub > MAX_MATCH) {
        printf("There are %i subexpressions, checking %i\en",
            preg.re_nsub, MAX_MATCH);
        matches_tocheck = MAX_MATCH;
    } else {
        printf(
          "There are %i subexpressions in re\en", preg.re_nsub);
        matches_tocheck = preg.re_nsub;
    }
    error = regexec(&preg, string, MAX_MATCH, &pmatch[0], 0);
    if (error == REG_NOMATCH) {
        printf("String did not contain match for entire re\en");
        return;
    } else if (error != 0) {
        msize = regerror(error, &preg, message, SLENGTH);
        printf("regexe: %s\en", message);
        if (msize > SLENGTH)
            printf("Additional text lost\en");
        return;
    } else
        printf("String contained a match for the entire re\en");
    for (count = 0; count <= matches_tocheck; count++) {
        if (pmatch[count].rm_so != -1) {
            printf(
              "Subexpression %i matched in string\en", count);
            printf(
              "Match starts at %i. Byte after match is %i\en",
                pmatch[count].rm_so, pmatch[count].rm_eo);
        } else
            printf(
              "Subexpression %i had NO match\en", count);
    }
    regfree(&preg);
}
.oE
.LE
.SH RETURN VALUES
.PP
Upon successful completion, the \*Lregcomp(\|)\*O function returns a
value of 0 (zero).  Otherwise, \*Lregcomp(\|)\*O returns one the following nonzero
values indicating the type of failure. If the \*Lregcomp(\|)\*O
function fails, the contents of the \*Vpreg\*O parameter is undefined.
If the \*Lregexec(\|)\*O function finds a match, the function returns a value of
0 (zero). If the \*Lregexec(\|)\*O function does not find a match or fails for
another reason,
the function returns one of the following nonzero values indicating the type of
failure.  If the \*Lregexec(\|)\*O function does not find a match or
fails for another reason, the contents of the \*Vpmatch\*O parameter
is undefined.
.VL
.LI "\*LREG_BADBR\*O"
The contents within the pair \*L\e{\*O (backslash left brace) and \*L\e}\*O
(backslash right brace) are unusable: Not a number,
number too large, more than two numbers, or first number larger than second.
.LI "\*LREG_BADPAT\*O"
There is an unusable basic regular expression or extended regular expression.
.LI "\*LREG_BADRPT\*O"
The \*L?\*O, \*L*\*O, or \*L+\*O symbols are not
preceded by a valid basic regular expression or an extended regular expression.
.LI "\*LREG_EBRACE\*O"
The use of a pair of \*L\e{\*O (backslash left brace) and \*L\e}\*O
(backslash right brace) or \*L{\|}\*O (braces) is unbalanced.
.LI "\*LREG_EBRACK\*O"
The use of \*L[]\*O (square brackets) is unbalanced.
.LI "\*LREG_ECOLLATE\*O"
There is an unusable collating element referenced.
.LI "\*LREG_ECTYPE\*O"
There is an unusable character class type referenced.
.LI "\*LREG_EESCAPE\*O"
There is a trailing \*L\e\*O (backslash) in the pattern.
.LI "\*LREG_ENOSYS\*O"
Function is unsupported.
.LI "\*LREG_EPAREN\*O"
The use of a pair of \*L\e(\*O (backslash left parenthesis) and \*L\e)\*O
(backslash right parenthesis) or \*L(\|)\*O (parentheses) is unbalanced.
.LI "\*LREG_ERANGE\*O"
There was an unusable endpoint in the range expression.
.LI "\*LREG_ESPACE\*O"
There is insufficient memory space.
.LI "\*LREG_ESUBREG\*O"
The number in \*L\e\*Vdigit\*O is unusable or in error.
.LI "\*LREG_NOMATCH\*O"
The \*Lregexec(\|)\*O function failed to match.
.LE
.PP
If the \*Lregcomp(\|)\*O function detects an illegal basic or
extended regular expression, it may return \*LREG_BADPAT\*O, or
it may return an error code that more precisely describes the error.
.PP
The \*Lregerror(\|)\*O function returns the number of bytes required
to store the message. This value may be greater than the value of the
\*Verrbuf_size\*O parameter.
.PP
The \*Lregfree\*O function does not return a value.
.SH ERRORS
.PP
These functions do not set \*Lerrno\*O to indicate an error.
.SH RELATED INFORMATION
.PP
Commands: \*Lgrep\*O(1).
.EQ
delim off
.EN

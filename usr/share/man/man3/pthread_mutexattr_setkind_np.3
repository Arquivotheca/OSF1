.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: pthread_mutexattr_setkind_np.3,v $ $Revision: 3.2.2.2 $ (DEC) $Date: 1992/05/27 11:11:51 $
.\"
...\" Copyright 1991, Open Software Foundation, Inc. ALL RIGHTS RESERVED.
.wH ********************************************************************
.wH                                                                    *
.wH COPYRIGHT (c) 1990 BY DIGITAL EQUIPMENT CORPORATION,               *
.wH Maynard, Mass.                                                     *
.wH                                                                    *
.wH This document is furnished under a license and may be used and     *
.wH copied only in accordance with the terms of such license and with  *
.wH the inclusion of the above copyright notice. This document or any  *
.wH other copies thereof may not be provided or otherwise made         *
.wH available to any other person. No title to or ownership of the     *
.wH document is hereby transferred.                                    *
.wH                                                                    *
.wH The information in this document is subject to change without      *
.wH notice and should not be construed as a commitment by DIGITAL      *
.wH Equipment Corporation.                                             *
.wH                                                                    *
.wH ********************************************************************
.wH "<routine_section>"
.TH pthread_mutexattr_setkind_np 3
.SH NAME
\*Lpthread_mutexattr_setkind_np\*O \- Specifies the mutex type attribute that is used when a mutex is created.
.SH SYNOPSIS
.PP
.sS
\*L#include <pthread.h>\*O
.fS "int pthread_mutexattr_setkind_np"
.dS "pthread_mutexattr_t"
\*V*attr\*L
.dE
.dS "int"
\*Vkind\*O
.dE
.fE
.sE
.wH "<endformat>"
.SH PARAMETERS
.PP
.VL 5m
.LI "\*Vattr\*O"
Mutex attributes object modified.
.LI "\*Vkind\*O"
New value for the mutex type attribute. The \*Vkind\*O parameter
specifies the type of mutex that is created. Valid values are
\*LMUTEX_FAST_NP\*O (default) and \*LMUTEX_RECURSIVE_NP\*O.
.LE
.wH "<endparameters>"
.SH DESCRIPTION
.iX "Mutex" "fast"
.iX "Mutex" "recursive"
.iX "Fast mutex"
.iX "Recursive mutex"
.PP
This routine sets the mutex type attribute that is used when a mutex is
created.
.PP
A \*Lfast\*O
.gL "fast"
mutex locks and unlocks a mutex in the fastest manner
possible. A fast mutex can only be locked (obtained) once. All subsequent
calls to \*Lpthread_mutex_lock\*O cause the calling thread to block
until the mutex is freed by the thread that owns it. If the thread that owns
the mutex attempts to lock it again, the thread waits for itself to release
the mutex (causing a deadlock).
.PP
A \*Lrecursive\*O
.gL "recursive"
mutex can be locked more than once by the same thread
without causing that thread to deadlock. In other words, a single thread can
make consecutive calls to \*Lpthread_mutex_lock\*O without blocking.
The thread must then call \*Lpthread_mutex_unlock\*O the same number of
times as it called \*Lpthread_mutex_lock\*O before another thread can
lock the mutex.
.PP
A recursive mutex is useful when a routine needs to lock a mutex to protect
data for exclusive access by the current thread, and it calls another
routine (or itself) that also needs to protect data for exclusive access.
Using a recursive mutex allows nested attempts to lock the mutex to succeed
rather than deadlock. The application must be coded so that such routines
operating on the same set of shared data work together cooperatively.
.PP
.wH "<mark>"
A recursive mutex should never be used with condition variables, because the
implicit unlock performed for a \*Lpthread_cond_wait\*O or
\*Lpthread_cond_timedwait\*O might not actually release the mutex. In
that case, no other thread can satisfy the condition of the predicate.
.wH "<endmark>"
.SH RETURN VALUES
.PP
If an error condition occurs, this routine returns \-1 and sets
\*Eerrno\*O to the corresponding error value. Possible return values
are as follows:
.sp
.TS
center, tab(@);
l l l.
\*LReturn@Error@Description\*O
_
\00@@Successful completion.
\&\-1@[\*LEINVAL\*O]@The value specified by \*Vattr\*O or \*Vkind\*O is invalid.
\&\-1@[\*LESRCH\*O]@T{
The value specified by \*Vattr\*O does not refer to an existing mutex attributes object.
T}
.TE
.wH "<endnas_return>"
.cS
.SH EXAMPLES
.PP
.oS
int pthread_mutexattr_setkind_np (pthread_mutexattr_t *attr,
 int kind);
.oE
.cE
.wH "<endnas_examples>"
.SH RELATED INFORMATION
.PP
\*Lpthread_mutexattr_create\*O(3),
\*Lpthread_mutexattr_getkind_np\*O(3),
\*Lpthread_mutex_init\*O(3)
.EQ
delim off
.EN

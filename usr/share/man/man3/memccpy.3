.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: memccpy.3,v $ $Revision: 3.2.5.3 $ (DEC) $Date: 1993/10/05 15:51:55 $
.\" 
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.\"
.TH memccpy 3
.SH NAME
.PP
\*Lmemccpy\*O, \*Lmemchr\*O, \*Lmemcmp\*O, \*Lmemcpy\*O, \*Lmemset\*O, \*Lmemmove\*O \- Perform memory operations
.SH LIBRARY
.PP
Standard C Library  (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <string.h>\*O
.PP
\*Lvoid *memccpy(
.nL
        \*Lvoid *\*Vs1\*L,
.nL
        \*Lvoid *\*Vs2\*L,
.nL
        \*Lint \*Vc\*L,
.nL
        \*Lsize_t \*Vn\*L);\*O
.PP
\*Lvoid *memchr(
.nL
        \*Lconst void *\*Vs\*L,
.nL
        \*Lint \*Vc\*L,
.nL
        \*Lsize_t \*Vn\*L);\*O
.PP
\*Lint memcmp(
.nL
        \*Lconst void *\*Vs1\*L,
.nL
        \*Lconst void *\*Vs2\*L,
.nL
        \*Lsize_t \*Vn\*L);\*O
.PP
\*Lvoid *memcpy(
.nL
        \*Lvoid *\*Vs1\*L,
.nL
        \*Lconst void *\*Vs2\*L,
.nL
        \*Lsize_t \*Vn\*L);\*O
.PP
\*Lvoid *memmove(
.nL
        \*Lvoid *\*Vs1\*L,
.nL
        \*Lconst void *\*Vs2\*L,
.nL
        \*Lsize_t \*Vn\*L);\*O
.PP
\*Lvoid *memset(
.nL
        \*Lvoid *\*Vs\*L,
.nL
        \*Lint \*Vc\*L,
.nL
        \*Lsize_t \*Vn\*L);\*O
.sE
.SH PARAMETERS
.PP
.VL
.LI "\*Vs\*O"
Points to the location of a string.
.LI "\*Vs1\*O"
Points to the location of a destination string.
.LI "\*Vs2\*O"
Points to the location of a source string.
.LI "\*Vc\*O"
Specifies a character for which to search
.\" .zA "defect, 7523, R1.1.2, Added memset() case"
(except for the
\*Lmemset(\|)\*O case, in which \*Vc\*O is the target of the copy).
.\" .zZ "defect, 7523, R1.1.2, Added memset() case"
.LI "\*Vn\*O"
Specifies the number of characters to search.
.LE
.SH DESCRIPTION
.PP
.iX "memccpy function"
.iX "memchr function"
.iX "memcmp function"
.iX "memcpy function"
.iX "memset function"
.iX "memmove function"
.iX "memory operations"
.iX "memory area" "manipulating strings in"
.iX "strings" "manipulating in memory area"
The \*Lmemccpy(\|)\*O, \*Lmemchr(\|)\*O, \*Lmemcmp(\|)\*O, \*Lmemcpy(\|)\*O,
\*Lmemset(\|)\*O, and \*Lmemmove(\|)\*O
functions operate on strings in memory areas. A memory
area is a group of contiguous characters bound by a count and not
terminated by a null character. These memory functions do not check
for overflow of the receiving memory area. All of these memory
functions are declared in the \*Lstring.h\*O header file.
.PP
The \*Lmemccpy(\|)\*O function sequentially copies characters from the
.\" Digital correction, per QAR 15138.  Source and destination strings
.\" were reversed.
location pointed to by the \*Vs2\*O parameter into the location pointed to
by the \*Vs1\*O parameter until one of the following occurs:
.ML
.LI
The character specified by the \*Vc\*O parameter, which is converted to an
.\" .zA "defect, 7523, R1.1.2, Changed int to char"
\*Lunsigned char\*O, is encountered.
.\" .zZ "defect, 7523, R1.1.2, Changed int to char"
.LI
The number of characters specified by the \*Vn\*O parameter have been copied
to the string at location \*Vs1\*O.
.LE
.PP
A pointer to character \*Vc\*O in the string pointed to by \*Vs1\*O is
returned. When character \*Vc\*O is not encountered after \*Vn\*O
characters have been copied to the string at location \*Vs1\*O, a null
pointer is returned.
.PP
The \*Lmemchr(\|)\*O function sequentially searches the string at the
location pointed to by the \*Vs\*O parameter until one of the following occurs:
.ML
.LI
The character specified by the \*Vc\*O parameter, which is converted to an
.\" .zA "defect, 7523, R1.1.2, Changed int to char"
\*Lunsigned char\*O, is encountered.
.\" .zZ "defect, 7523, R1.1.2, Changed int to char"
.LI
The number of characters specified by the \*Vn\*O parameter have been copied
to the string at location \*Vs\*O.
.LE
.PP
A pointer to character \*Vc\*O in the string pointed to by \*Vs\*O is
returned. When character \*Vc\*O is not encountered after \*Vn\*O
characters have been copied to the string at location \*Vs\*O, a null
pointer is returned.
.PP
The \*Lmemcmp(\|)\*O function compares the first \*Vn\*O
characters, which are converted to \*Lunsigned char\*O, of the string
pointed to by the \*Vs1\*O parameter with the first \*Vn\*O
characters (also interpreted as \*Lunsigned char\*O) of the string
pointed to by the \*Vs2\*O parameter.
.PP
The \*Lmemcmp(\|)\*O function uses native character comparison, which may
have signed values on some machines. This function returns one of the
following values:
.ML
.LI "Less than 0"
When \*Vs1\*O is less than \*Vs2\*O
.LI "Equal to 0"
When \*Vs1\*O is equal to \*Vs2\*O
.LI "Greater than 0"
When \*Vs1\*O is greater than \*Vs2\*O
.LE
.PP
The \*Lmemcpy(\|)\*O function copies \*Vn\*O characters
from the string pointed to by the \*Vs2\*O parameter into the location pointed
to by the \*Vs1\*O parameter.
When copying overlapping strings, the behavior of this function is unreliable.
.PP
The \*Lmemset(\|)\*O function copies the value of the character specified by
the \*Vc\*O parameter, which is converted to an \*Lunsigned char\*O, into each
of the first \*Vn\*O locations of the string pointed to by the
\*Vs\*O parameter.
.PP
The \*Lmemmove(\|)\*O function copies \*Vn\*O characters
from the string at the location pointed to by the \*Vs2\*O parameter to
the string at the location
pointed to by the \*Vs1\*O parameter.  Copying takes place as though the \*Vn\*O
number of characters from string \*Vs2\*O are first copied
into a temporary location having \*Vn\*O bytes that do not
overlap either of the strings pointed to by \*Vs1\*O and \*Vs2\*O. Then,
\*Vn\*O number of characters from the temporary location are copied
to the string pointed to by \*Vs1\*O. Consequently, this operation is
nondestructive and proceeds from left to right.
.SH NOTES
.PP
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Full use (\*Lmemchr(\|)\*O,
\*Lmemcmp(\|)\*O,
\*Lmemcpy(\|)\*O,
\*Lmemmove(\|)\*O,
\*Lmemset(\|)\*O).
.IP
Trial use (\*Lmemccpy(\|)\*O).
.LE
.SH RETURN VALUES
.PP
The \*Lmemccpy(\|)\*O function returns a pointer to the character following
the character specified by the \*Vc\*O parameter in the string pointed to by
the \*Vs1\*O parameter. When character \*Vc\*O is not found after the number of
characters specified by the \*Vn\*O parameter are scanned, a null pointer is
returned.
.PP
The \*Lmemccpy(\|)\*O function returns a pointer to the character
specified by the \*Vc\*O parameter. When character \*Vc\*O does not occur
after \*Vn\*O characters in the string pointed to by the \*Vs\*O
parameter are scanned, a null pointer is returned.
.PP
The \*Lmemcmp(\|)\*O function returns a value greater than, equal to, or
less than 0 (zero), accordingly as the string pointed to by
the \*Vs1\*O parameter has a value greater than, equal to, or less than the
string pointed to by the \*Vs2\*O parameter.
.PP
The \*Lmemcpy(\|)\*O and \*Lmemmove(\|)\*O
functions return the string pointed to by the \*Vs1\*O parameter.
.PP
The \*Lmemset(\|)\*O function returns the string pointed to by the
\*Vs\*O parameter.
.SH RELATED INFORMATION
.PP
Functions:
\*Lbcopy\*O(3),
\*Lstring\*O(3),
\*Lswab\*O(3).
.EQ
delim off
.EN

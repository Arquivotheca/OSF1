.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: XmRowColumn.3X,v $ $Revision: 3.2.4.5 $ (DEC) $Date: 1993/12/14 20:18:09 $
.\"
.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
.\" **      Maynard, MA.  All Rights Reserved.
.\" **
.\" **
.TH XmRowColumn 3X "" "" "" "OSF/Motif"
.SH NAME
\*LXmRowColumn\*O \- The RowColumn widget class
.SH SYNOPSIS
.sS
.iS
\&#include <Xm/RowColumn.h>
.iE
.sE
.SH DESCRIPTION
.iX "XmRowColumn"
.iX "widget class" "RowColumn"
The RowColumn widget is a general purpose RowColumn manager capable
of containing any widget type as a child.
In general, it requires no special
knowledge about how its children function and provides nothing
beyond support for several different layout styles.  However, it can be
configured as a menu, in which case, it expects only certain children, and
it configures to a particular layout.  The menus supported are:  MenuBar,
Pulldown or Popup MenuPanes, and OptionMenu.  
.nL
.ne 9
.PP
The type of layout performed is controlled by how the application has set
the various layout resources.
It can be configured to lay out its children in either rows or
columns.  In addition, the application can specify how the children are
laid out, as follows:
.ML
.LI
The children are packed tightly together into either rows or columns.
.LI
Each child is placed in an identically sized
box (producing a symmetrical look).
.LI
A specific layout (the current \*Vx\*O and \*Vy\*O positions of the children
control their location).
.LE 
.PP 
In addition, the application has control over both the spacing that
occurs between each row and column and the margin spacing
present between the edges of the RowColumn widget and any children
that are placed against it.
.PP 
In a MenuBar, Pulldown MenuPane, or Popup MenuPane the default for the
\*LXmNshadowThickness\*O resource is 2.
In an OptionMenu or a WorkArea (such as a RadioBox or CheckBox) this
resource is not applicable and its use is undefined.
If an application wishes to place a 3-D shadow around an OptionMenu or
WorkArea, it can create the RowColumn as a child of a Frame widget.
.PP 
In a MenuBar, Pulldown MenuPane, or Popup MenuPane the
\*LXmNnavigationType\*O resource is not applicable and its use is
undefined.
In a WorkArea the default for \*LXmNnavigationType\*O is
\*LXmTAB_GROUP\*O.
In an OptionMenu the default for \*LXmNnavigationType\*O is
\*LXmNONE\*O.
.PP 
In a MenuBar, Pulldown MenuPane, or Popup MenuPane the
\*LXmNtraversalOn\*O resource is not applicable and its use is
undefined.
In an OptionMenu or WorkArea the default for \*LXmNtraversalOn\*O is
True.
.PP 
If the parent of the RowColumn is a MenuShell, the
\*LXmNmappedWhenManaged\*O resource is forced to False when the widget
is realized.
.PP
The user can specify resources in a resource file for the automatically
created widgets and gadgets of an OptionMenu.  The following list
identifies the names of these widgets (or gadgets) and the associated
OptionMenu areas:
.ML
.LI
Option Menu Label Gadget\(em"OptionLabel"
.LI
Option Menu Cascade Button\(em"OptionButton"
.LE
.SS "Tear-off Menus"
Pulldown and Popup MenuPanes support tear-off menus, which enable the
user to retain a MenuPane on the display to facilitate subsequent
menu selections.  A MenuPane that can be torn-off is identified by
a tear-off button that spans the width of the MenuPane and displays
a dashed line.  A torn-off MenuPane contains a window manager system
menu icon and a title bar.  The window title displays the label of the
cascade button that initiated the action when the label type is
\*LXmSTRING\*O.  If the label contains a pixmap the window title is
empty.  A tear-off menu from a Popup MenuPane also displays
an empty title.
.PP
The user can tear-off a MenuPane using the mouse or keyboard.
Clicking \*LBSelect\*O or pressing \*LKActivate\*O (or \*LKSelect\*O)
on the tear-off button, tears off the MenuPane at the current
position.  Pressing \*LBDrag\*O on the tear-off button tears off the
MenuPane, and allows the user to drag the torn-off menu to a new
position designated by releasing the mouse button.  Tearing off a
MenuPane unposts the current active menu.  Only one tear-off copy
for each MenuPane is allowed.  Subsequent tear-off actions of a
torn MenuPane unpost the existing copy first.
.PP
The name of the tear-off button of a torn-off menu pane is
"TearOffControl".  The name can be used to set resources in a resource
file.  An application can also obtain the tear-off button itself using
\*LXmGetTearOffControl\*O and then set resource values by calling
\*LXtSetValues\*O.
.PP
The tear-off button has Separator-like behavior.  Its appearance can be
specified using the following tear-off button resources:
\*LXmNbackground\*O, \*LXmNbackgroundPixmap\*O,\*LXmNbottomShadowColor\*O, \*LXmNforeground\*O, \*LXmNheight\*O,
\*LXmNmargin\*O, \*LXmNseparatorType\*O, \*LXmNshadowThickness\*O, and
\*LXmNtopShadowColor\*O.  Refer to the \*LXmSeparator\*O man page for a
complete description of each of these resources.
.PP
RowColumn resources that affect tear-off menu behavior are
\*LXmNtearOffModel\*O, \*LXmNtearOffMenuActivateCallback\*O, and
\*LXmNtearOffMenuDeactivateCallback\*O.
.PP 
By default, menus do not tear off; tear off functionality may be 
enabled by setting the \*LXmNtearOffModel\*O resource to
\*LXmTEAR_OFF_ENABLED\*O.  There is no resource converter
pre-registered for \*LXmNtearOffModel\*O.  To allow tear-off
functionality to be enabled through the resource database call the
function \*LXmRepTypeInstallTearOffModelConverter\*O.
.PP
Tear-off menu focus policy follows standard window
manager policy.  It is recommended that the following 
\*Lmwm\*O resources are set to True:
\*LstartupKeyFocus\*O and \*LautoKeyFocus\*O.
.nL
.ne 10
.SS "Classes"
RowColumn inherits behavior and resources from \*LCore\*O, \*LComposite\*O,
\*LConstraint\*O, and \*LXmManager\*O classes.
.PP 
The class pointer is \*LxmRowColumnWidgetClass\*O.
.PP 
The class name is \*LXmRowColumn\*O.
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \*LXmN\*O or
\*LXmC\*O prefix and use the remaining letters.  To specify one of the defined
values for a resource in a .Xdefaults file, remove the \*LXm\*O prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (C),
set by using \*LXtSetValues\*O (S),
retrieved by using \*LXtGetValues\*O (G), or is not applicable (N/A).
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmRowColumn Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNadjustLast	True	CSG
\ \ \ \ \ \ XmCAdjustLast	\ \ \ \ \ \ \ Boolean
_
XmNadjustMargin	True	CSG
\ \ \ \ \ \ XmCAdjustMargin	\ \ \ \ \ \ \ Boolean
_
XmNentryAlignment	XmALIGNMENT_BEGINNING	CSG
\ \ \ \ \ \ XmCAlignment	\ \ \ \ \ \ \ unsigned char
_
XmNentryBorder	0	CSG
\ \ \ \ \ \ XmCEntryBorder	\ \ \ \ \ \ \ Dimension
_
XmNentryCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNentryClass	dynamic	CSG
\ \ \ \ \ \ XmCEntryClass	\ \ \ \ \ \ \ WidgetClass
_
XmNentryVerticalAlignment	XmALIGNMENT_CENTER	CSG
\ \ \ \ \ \ XmCVerticalAlignment	\ \ \ \ \ \ \ unsigned char
_
XmNisAligned	True	CSG
\ \ \ \ \ \ XmCIsAligned	\ \ \ \ \ \ \ Boolean
_
XmNisHomogeneous	dynamic	CG
\ \ \ \ \ \ XmCIsHomogeneous	\ \ \ \ \ \ \ Boolean
_
XmNlabelString	NULL	C
\ \ \ \ \ \ XmCXmString	\ \ \ \ \ \ \ XmString
_
XmNmapCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNmarginHeight	dynamic	CSG
\ \ \ \ \ \ XmCMarginHeight	\ \ \ \ \ \ \ Dimension
_
XmNmarginWidth	dynamic	CSG
\ \ \ \ \ \ XmCMarginWidth	\ \ \ \ \ \ \ Dimension
_
XmNmenuAccelerator	dynamic	CSG
\ \ \ \ \ \ XmCAccelerators	\ \ \ \ \ \ \ String
_
.wH .tH
XmNmenuHelpWidget	NULL	CSG
\ \ \ \ \ \ XmCMenuWidget	\ \ \ \ \ \ \ Widget
_
XmNmenuHistory	NULL	CSG
\ \ \ \ \ \ XmCMenuWidget	\ \ \ \ \ \ \ Widget
_
XmNmenuPost	NULL	CSG
\ \ \ \ \ \ XmCMenuPost	\ \ \ \ \ \ \ String
_
XmNmnemonic	NULL	CSG
\ \ \ \ \ \ XmCMnemonic	\ \ \ \ \ \ \ KeySym
_
XmNmnemonicCharSet	XmFONTLIST_DEFAULT_TAG	CSG
\ \ \ \ \ \ XmCMnemonicCharSet	\ \ \ \ \ \ \ String
_
XmNnumColumns	1	CSG
\ \ \ \ \ \ XmCNumColumns	\ \ \ \ \ \ \ short
_
XmNorientation	dynamic	CSG
\ \ \ \ \ \ XmCOrientation	\ \ \ \ \ \ \ unsigned char
_
XmNpacking	dynamic	CSG
\ \ \ \ \ \ XmCPacking	\ \ \ \ \ \ \ unsigned char
_
XmNpopupEnabled	True	CSG
\ \ \ \ \ \ XmCPopupEnabled	\ \ \ \ \ \ \ Boolean
_
.\"XmNpostFromCount	0	CSG
\ \ \ \ \ \ XmCPostFromCount	\ \ \ \ \ \ \ int
_
.\"XmNpostFromList	NULL	CSG
\ \ \ \ \ \ XmCPostFromList	\ \ \ \ \ \ \ WidgetList
_
XmNradioAlwaysOne	True	CSG
\ \ \ \ \ \ XmCRadioAlwaysOne	\ \ \ \ \ \ \ Boolean
_
XmNradioBehavior	False	CSG
\ \ \ \ \ \ XmCRadioBehavior	\ \ \ \ \ \ \ Boolean
_
XmNresizeHeight	True	CSG
\ \ \ \ \ \ XmCResizeHeight	\ \ \ \ \ \ \ Boolean
_
XmNresizeWidth	True	CSG
\ \ \ \ \ \ XmCResizeWidth	\ \ \ \ \ \ \ Boolean
_
XmNrowColumnType	XmWORK_AREA	CG
\ \ \ \ \ \ XmCRowColumnType	\ \ \ \ \ \ \ unsigned char
_
.wH .tH
XmNspacing	dynamic	CSG
\ \ \ \ \ \ XmCSpacing	\ \ \ \ \ \ \ Dimension
_
XmNsubMenuId	NULL	CSG
\ \ \ \ \ \ XmCMenuWidget	\ \ \ \ \ \ \ Widget
_
XmNtearOffMenuActivateCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNtearOffMenuDeactivateCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNtearOffModel	XmTEAR_OFF_DISABLED	CSG
\ \ \ \ \ \ XmCTearOffModel	\ \ \ \ \ \ \ unsigned char
_
XmNunmapCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNwhichButton	dynamic	CSG
\ \ \ \ \ \ XmCWhichButton	\ \ \ \ \ \ \ unsigned int
_
.TE
.\" NROFF HACK END
.VL  
.LI "\*LXmNadjustLast\*O"
Extends the last row of children to the bottom edge of RowColumn (when
\*LXmNorientation\*O is \*LXmHORIZONTAL\*O) or extends the last column to the
right edge of RowColumn (when \*LXmNorientation\*O is \*LXmVERTICAL\*O).
This feature is disabled by setting \*LXmNadjustLast\*O to
False.
.LI "\*LXmNadjustMargin\*O"
Specifies whether the inner minor margins of all
items contained within the RowColumn widget are
forced to the same value.  The inner minor margin
corresponds to the \*LXmNmarginLeft\*O, \*LXmNmarginRight\*O,
\*LXmNmarginTop\*O,
and \*LXmNmarginBottom\*O resources supported by \*LXmLabel\*O and
\*LXmLabelGadget\*O.
.sp
A horizontal orientation causes \*LXmNmarginTop\*O and
\*LXmNmarginBottom\*O for all items in a particular row to be forced to the
same value; the value is the largest margin specified
for one of the Label items.
.sp
A vertical orientation causes
\*LXmNmarginLeft\*O and \*LXmNmarginRight\*O for all items in a particular
column to be forced to the same value; the value is the largest
margin specified for one of the Label items.
.nL
.ne 6
.sp
This keeps all text within each row or column
lined up with all other text in its row or column.
If the \*LXmNrowColumnType\*O is either \*LXmMENU_POPUP\*O or
\*LXmMENU_PULLDOWN\*O and this resource is True, only button children
have their margins adjusted.
.nL
.ne 9
.LI "\*LXmNentryAlignment\*O"
Specifies the alignment type for children that are subclasses of
\*LXmLabel\*O or \*LXmLabelGadget\*O when \*LXmNisAligned\*O is enabled.
The following are textual alignment types:
.sp
\*LXmALIGNMENT_BEGINNING\*O\(emthe default
.sp
\*LXmALIGNMENT_CENTER\*O
.sp
\*LXmALIGNMENT_END\*O
.sp
See the description of \*LXmNalignment\*O in the \*LXmLabel(3X)\*O man page
for an explanation of these actions.
.LI "\*LXmNentryBorder\*O"
Imposes a uniform border width upon all RowColumn's children.
The default value is 0, which disables the feature.
.LI "\*LXmNentryCallback\*O"
Disables the \*LXmNactivateCallback\*O and \*LXmNvalueChangedCallback\*O
callbacks for all CascadeButton, DrawnButton, PushButton, and
ToggleButton widgets and gadgets contained within the RowColumn widget.
If the application supplies this resource, the \*LXmNactivateCallback\*O
and \*LXmNvalueChangedCallback\*O callbacks are then revectored to the
\*LXmNentryCallback\*O callbacks.
This allows an application to supply a single callback routine for
handling all items contained in a RowColumn widget.
The callback reason is \*LXmCR_ACTIVATE\*O.
If the application does not supply this resource, the
\*LXmNactivateCallback\*O and \*LXmNvalueChangedCallback\*O
callbacks for each item in the RowColumn widget work as normal.
.sp
The application must supply this resource when this widget is created.
Changing this resource using the \*LXtSetValues\*O is not
supported.
.nL
.ne 8
.LI "\*LXmNentryClass\*O"
Specifies the only widget class that can be added
to the RowColumn widget; this resource is meaningful only when the
\*LXmNisHomogeneous\*O resource is set to True.
Both widget and gadget variants of the specified class may be added to
the widget.
.sp
When \*LXmCreateRadioBox\*O is called or when \*LXmNrowColumnType\*O is
set to \*LXmWORK_AREA\*O and \*LXmNradioBehavior\*O is True, the default
value of \*LXmNentryClass\*O is \*LxmToggleButtonGadgetClass\*O.
When \*LXmNrowColumnType\*O is set to \*LXmMENU_BAR\*O, the value of
\*LXmNentryClass\*O is forced to \*LxmCascadeButtonWidgetClass\*O.
.LI "\*LXmNentryVerticalAlignment\*O"
Specifies the type of vertical alignment for children that are
subclasses of \*LXmLabel\*O, \*LXmLabelGadget, and \*LXmText\*O.
This resource is invalid if \*LXmNorientation\*O is \*LXmVERTICAL\*O
and \*LXmNpacking\*O is \*LXmPACK_TIGHT\*O because this layout 
preserves variable heights among the children.  The vertical alignment
types include:
.ML
.LI
\*LXmALIGNMENT_BASELINE_BOTTOM\*O\(emcauses the bottom baseline of all
children in a row to be aligned.
This resource is applicable only when all children in a row
contain textual data.  
.LI
\*LXmALIGNMENT_BASELINE_TOP\*O\(emcauses the top baseline of all
children in a row to be aligned.
This resource is applicable only when all children in a
row contain textual data.
.LI
\*LXmALIGNMENT_CONTENTS_BOTTOM\*O\(emcauses the bottom of the
contents (text or
pixmap) of all children in a row to be aligned.
.LI
\*LXmALIGNMENT_CENTER\*O\(emcauses the center of all children in a row to be
aligned.
.LI
\*LXmALIGNMENT_CONTENTS_TOP\*O\(emcauses the top of the contents (text or
pixmap) of all children in a row to be aligned.
.LE
.LI "\*LXmNisAligned\*O"
Specifies text alignment for each item within the RowColumn widget;
this applies only to items that are subclasses of
\*LXmLabel\*O or \*LXmLabelGadget\*O.
However, if the item is a Label widget or gadget and its parent is either
a Popup MenuPane or a Pulldown MenuPane, alignment is not
performed; the Label is treated as the
title within the MenuPane, and the alignment
set by the application is not overridden.
\*LXmNentryAlignment\*O controls the type of textual alignment.
.LI "\*LXmNisHomogeneous\*O"
Indicates whether the RowColumn
widget should enforce exact homogeneity among the items
it contains; if True, only the widgets that are
of the class indicated by \*LXmNentryClass\*O
are allowed as children of the RowColumn widget.
This is most often used when creating a MenuBar.
Attempting to insert a child that is not a member of the
specified class generates a warning message.
.sp
In a MenuBar the value of \*LXmNisHomogeneous\*O is forced to True.
In an OptionMenu the value is forced to False.
When \*LXmCreateRadioBox\*O is called the default value is True.
Otherwise, the default value is False.
.nL
.ne 7
.LI "\*LXmNlabelString\*O"
Points to a text string, which displays the
label to one side of the selection area
when \*LXmNrowColumnType\*O is set to \*LXmMENU_OPTION\*O.
This resource is not meaningful for all other RowColumn types.
If the application wishes to change the label after creation, it must get the
LabelGadget ID (\*LXmOptionLabelGadget\*O) and call \*LXtSetValues\*O on the
LabelGadget directly.  The default value is no label.
.LI "\*LXmNmapCallback\*O"
Specifies a widget-specific callback function that is
invoked when the window associated with the RowColumn widget
is about to be mapped.  The callback reason is \*LXmCR_MAP\*O.
.LI "\*LXmNmarginHeight\*O"
Specifies the amount of blank space between the top
edge of the RowColumn widget and the first item in each column,
and the bottom edge of the RowColumn widget and the last item
in each column.
The default value is 0 for Pulldown and Popup MenuPanes, and 3
pixels for other RowColumn types.
.LI "\*LXmNmarginWidth\*O"
Specifies the amount of blank space between the left
edge of the RowColumn widget and the first item in each row,
and the right edge of the RowColumn widget and the last item in
each row.
The default value is 0 for Pulldown and Popup MenuPanes, and 3
pixels for other RowColumn types.
.LI "\*LXmNmenuAccelerator\*O"
This resource is useful only when the RowColumn widget has been configured
to operate as a Popup MenuPane or a MenuBar.
The format of this resource is similar to the left side specification
of a translation string, with the limitation that it must specify a key
event.
For a Popup MenuPane, when the accelerator is typed by the user, the Popup
MenuPane is posted.
For a MenuBar, when the accelerator is typed by the user, the first item
in the MenuBar is highlighted, and traversal is enabled in the
MenuBar.
The default for a Popup MenuPane is \*LKMenu\*O.
The default for a MenuBar is \*LKMenuBar\*O.
The accelerator can be disabled by setting the \*LXmNpopupEnabled\*O resource
to False.
.LI "\*LXmNmenuHelpWidget\*O"
Specifies the widget ID for the CascadeButton, which is treated as
the Help widget if \*LXmNrowColumnType\*O is set to \*LXmMENU_BAR\*O.
The MenuBar always places the Help widget at the bottom right corner (in a lef
to right environment) of the MenuBar.
If the RowColumn widget is any type other than \*LXmMENU_BAR\*O,
this resource is not meaningful.
.LI "\*LXmNmenuHistory\*O"
Specifies the widget ID of the last menu entry to be activated.  It is
also useful for specifying the current selection for an OptionMenu.  If
\*LXmNrowColumnType\*O is set to \*LXmMENU_OPTION\*O, the specified
menu item is positioned under the cursor when the menu is displayed.
.sp
If the RowColumn widget has the \*LXmNradioBehavior\*O resource set to
True,
the widget field associated with this resource
contains the widget ID of the last ToggleButton or ToggleButtonGadget
to change from unselected to selected.
The default value is the widget ID of the first child in
the widget.
.LI "\*LXmNmenuPost\*O"
Specifies an X event description indicating a button event that posts a menu
system.
The default for \*LXmMENU_POPUP\*O is \*LBMenu Press\*O.
The default for \*LXmMENU_OPTION\*O, \*LXmMENU_BAR\*O, and
\*LXmWORK_AREA\*O is \*LBSelect Press\*O.
The \*LXmNmenuPost\*O resource for pulldowns should be consistent with that of 
top-level parent menu (although the event type is ignored).
Setting this resource to \*LBDrag Press\*O will conflict with drag and drop
operations, which use \*LBDrag Press\*O as a default button binding.
.LI "\*LXmNmnemonic\*O"
This resource is useful only when \*LXmNrowColumnType\*O is
set to \*LXmMENU_OPTION\*O.
Specifies a keysym for a key that, when pressed by the user along with
the \*LMAlt\*O modifier, posts
the associated Pulldown MenuPane.
The first character in the OptionMenu label string that exactly matches
the mnemonic in the character set specified in \*LXmNmnemonicCharSet\*O
is underlined.
The user can post the menu by pressing either the shifted or the
unshifted mnemonic key.
The default is no mnemonic.
.LI "\*LXmNmnemonicCharSet\*O"
Specifies the character set of the mnemonic for an OptionMenu.
The default is \*LXmFONTLIST_DEFAULT_TAG\*O.
If the RowColumn widget is any type other than \*LXmMENU_OPTION\*O,
this resource is not meaningful.
.nL
.ne 6
.LI "\*LXmNnumColumns\*O"
Specifies the number of minor dimension extensions
that are made to accommodate the entries; this
attribute is meaningful only when \*LXmNpacking\*O is set to
\*LXmPACK_COLUMN\*O.
.sp
For vertically oriented RowColumn widgets, this attribute
indicates how many columns are built; the number of
entries per column is adjusted to maintain this
number of columns, if possible.
.sp
For horizontally oriented RowColumn widgets, this attribute
indicates how many rows are built.
.sp
The default value is 1.
In an OptionMenu the value is forced to 1.
The value must be greater than 0.
.LI "\*LXmNorientation\*O"
Determines whether RowColumn layouts are row-major or column-major.
In a column-major layout, the children of the RowColumn
are laid out in
columns top to bottom within the widget.  In a row-major layout the children of
the RowColumn are laid out in rows.  \*LXmVERTICAL\*O resource value
selects a column-major layout.
\*LXmHORIZONTAL\*O resource value selects a row-major layout.
.sp
When creating a MenuBar or an OptionMenu, the default is
\*LXmHORIZONTAL\*O.
Otherwise, the default value is \*LXmVERTICAL\*O.
The results of specifying a value of \*LXmVERTICAL\*O for a MenuBar are
undefined.
.LI "\*LXmNpacking\*O"
Specifies how to pack the items contained within a
RowColumn widget.  This can be set to \*LXmPACK_TIGHT, XmPACK_COLUMN\*O or \*LXmPACK_NONE\*O.  When a RowColumn widget
packs the items it contains, it determines its major
dimension using the value of the \*LXmNorientation\*O resource.
.nL
.ne 9
.sp
\*LXmPACK_TIGHT\*O indicates that given the current major
dimension (for example, vertical if \*LXmNorientation\*O is \*LXmVERTICAL\*O), entries
are placed one after the other until
the RowColumn widget must wrap.  RowColumn wraps when there is no room left
for a complete child in that dimension.
Wrapping occurs
by beginning a new row or column in the next available
space.  Wrapping continues, as often as necessary, until
all of the children are laid out.
In the vertical dimension (columns), boxes are set to the same width; in the
horizontal dimension (rows), boxes are set to the same depth.  Each
entry's position in the major dimension is left unaltered (for example,
\*LXmNy\*O is left unchanged when \*LXmNorientation\*O is \*LXmVERTICAL\*O); its
position in the minor
dimension is set to the same value as the greatest entry
in that particular row or column.  The position in the minor
dimension of any particular row or column is independent
of all other rows or columns.
.sp
\*LXmPACK_COLUMN\*O indicates that all entries are placed in
identically sized boxes.  The box is based on the largest height
and width values of all the children widgets.
The value of the \*LXmNnumColumns\*O
resource determines how many boxes are placed in the
major dimension, before extending in the minor dimension.
.sp
\*LXmPACK_NONE\*O indicates that no packing is performed.
The x and y attributes of each entry are left alone, and
the RowColumn widget attempts to become large enough to enclose all
entries.
.sp
When \*LXmCreateRadioBox\*O is called or when \*LXmNrowColumnType\*O
is set to \*LXmWORK_AREA\*O and \*LXmNradioBehavior\*O is True, the
default value of \*LXmNpacking\*O is \*LXmPACK_COLUMN\*O.
In an OptionMenu the value is initialized to \*LXmPACK_TIGHT\*O.
Otherwise, the value defaults to \*LXmPACK_TIGHT\*O.
.nL
.ne 12
.LI "\*LXmNpopupEnabled\*O"
Allows the menu system
to enable keyboard input (accelerators and mnemonics) defined for the Popup
MenuPane and any of its submenus.
The Popup MenuPane needs to be informed whenever its accessibility to the user
changes because posting of the Popup MenuPane is controlled by the
application.
The default value of this resource is True (keyboard
input\(emaccelerators and mnemonics\(emdefined for the Popup MenuPane
and any of its submenus is enabled).
.\" .IP "\*LXmNpostFromCount\*O"
.\" This resource is useful only when \*LXmNrowColumnType\*O is
.\" set to \*LXmMENU_POPUP\*O or \*LXmMENU_PULLDOWN\*O.
.\" Specifies the number of widgets in the \*LXmNpostFromList\*O resource.
.\" .IP "\*LXmNpostFromList\*O"
.\" This resource is useful only when \*LXmNrowColumnType\*O is
.\" set to \*LXmMENU_POPUP\*O or \*LXmMENU_PULLDOWN\*O.
.\" Specifies a list of the widgets from which the MenuPane is to be
.\" accessible.
.\" If the menu is a Popup MenuPane and this resource is NULL, the menu is
.\" accessible from its parent.
.\" If the menu is a Pulldown MenuPane and this resource is NULL, the menu
.\" is accessible from the appropriate CascadeButton widget or gadget.
.\" The default is NULL.
.LI "\*LXmNradioAlwaysOne\*O"
If True, forces the active ToggleButton or ToggleButtonGadget
to be automatically selected after having
been unselected (if no other toggle was activated).
If False, the active toggle may be unselected.
The default value is True.  This resource is important only when
\*LXmNradioBehavior\*O is True.
.sp
The application can always add and subtract toggles from
RowColumn regardless of the selected/unselected state of the toggle.  The
application can also manage and unmanage toggle
children of RowColumn at any time regardless of state.  Therefore,
the application can sometimes
create a RowColumn that has \*LXmNradioAlwaysOne\*O set to
True and none
of the toggle children selected.
The result is undefined if the value of this resource is True and the
application sets more than one ToggleButton at a time.
.LI "\*LXmNradioBehavior\*O"
Specifies a Boolean value that when True, indicates
that the RowColumn widget should enforce a RadioBox-type behavior
on all of its children that are ToggleButtons or
ToggleButtonGadgets.
.sp
When the value of this resource is True,
\*LXmNindicatorType\*O defaults to \*LXmONE_OF_MANY\*O
for ToggleButton and ToggleButtonGadget children.
.nL
.ne 9
.sp
RadioBox
behavior dictates that when one toggle is selected and the user selects another
toggle, the first toggle is unselected
automatically.
The RowColumn usually does not enforce this behavior if the application,
rather than the user, changes the state of a toggle.
The RowColumn does enforce this behavior if a toggle child is selected
using \*LXmToggleButtonSetState\*O or \*LXmToggleButtonGadgetSetState\*O
with a \*Vnotify\*O argument of True.
.sp
When \*LXmCreateRadioBox\*O is called the default value of
\*LXmNradioBehavior\*O is True.
Otherwise, the default value is False.
.LI "\*LXmNresizeHeight\*O"
Requests a new height if necessary, when set to True.  When set to
False, the widget does not request a new height regardless of any
changes to the widget or its children.
.nL
.ne 7
.LI "\*LXmNresizeWidth\*O"
Requests a new width if necessary, when set to True.  When set to
False, the widget does not request a new width regardless of any
changes to the widget or its children.
.LI "\*LXmNrowColumnType\*O"
Specifies the type of RowColumn widget
to be created.
It is a non-standard resource that cannot be changed after it is set.
If an application uses any of the
convenience routines, except \*LXmCreateRowColumn\*O,
this resource is automatically forced to the appropriate
value by the convenience routine.  If an application uses
the Xt Intrinsics API to create its RowColumn widgets,
it must specify this resource itself.  The set
of possible settings for this resource are:
.sp
\*LXmWORK_AREA\*O\(emthe default
.sp
\*LXmMENU_BAR\*O
.sp
\*LXmMENU_PULLDOWN\*O
.sp
\*LXmMENU_POPUP\*O
.sp
\*LXmMENU_OPTION\*O
.nL
.ne 4
.sp
This resource cannot be changed after the RowColumn widget
is created.  Any changes attempted through \*LXtSetValues\*O
are ignored.
.sp
The value of this resource is used to determine the value of a number
of other resources.  The descriptions of RowColumn resources explain
this when it is the case.  The resource \*LXmNnavigationType\*O,
inherited from \*LXmManager\*O, is changed to \*LXmNONE\*O if
\*LXmNrowColumnType\*O is \*LXmMENU_OPTION\*O.
.nL
.ne 6
.LI "\*LXmNspacing\*O"
Specifies the horizontal and vertical spacing between
items contained within the RowColumn widget.
The default value is 3 pixels for \*LXmOPTION_MENU\*O and
\*LXmWORK_AREA\*O and 0 for other RowColumn types.
.LI "\*LXmNsubMenuId\*O"
Specifies the widget ID for the Pulldown MenuPane to be associated with
an OptionMenu.  This resource is useful only when \*LXmNrowColumnType\*O is
set to \*LXmMENU_OPTION\*O.
The default value is NULL.
.LI "\*LXmNtearOffMenuActivateCallback\*O"
Specifies the callback list that notifies the application when
the tear-off MenuPane is about to be activated.  It precedes the tear-off's
map callback.  
.sp
Use this resource when your application has shared MenuPanes and when
the torn-off menu can have two or 
more parents that can have opposing sensitivity states for the same
menu item.  This resource enables
the application to track 
whether a menu item is sensitive or insensitive and to set the state to the 
original parent's menu item state when the torn-off menu is reposted.  
The application can use \*LXmGetPostedFromWidget\*O to determine from which 
parent the menu was torn.  The callback reason is \*LXmCR_TEAR_OFF_ACTIVATE\*O.
The default is NULL.
.LI "\*LXmNtearOffMenuDeactivateCallback\*O".
Specifies the callback list that notifies the application when
the tear-off MenuPane is about to be deactivated.  It follows the tear-off's
unmap callback.  
.sp
Use this resource when your application has shared MenuPanes and when
the torn-off menu can have two or 
more parents that can have opposing sensitivity states for the same
menu item.  This resource enables 
the application to track
whether a menu item is sensitive or insensitive and to set the state to the 
original parent's menu item state when the torn-off menu is reposted.  
The application can use \*LXmGetPostedFromWidget\*O to determine from which 
parent the menu was torn.
The callback reason is \*LXmCR_TEAR_OFF_DEACTIVATE\*O.  The default is NULL.
.LI "\*LXmNtearOffModel\*O"
Indicates whether tear-off functionality is enabled or disabled
when \*LXmNrowColumnType\*O is set to \*LXmMENU_PULLDOWN\*O or
\*LXmMENU_POPUP\*O.  The values are: \*LXmTEAR_OFF_ENABLED\*O or
\*LXmTEAR_OFF_DISABLED\*O (default value).  This resource is
invalid for type \*LXmMENU_OPTION\*O; however, it does affect
any pulldown submenus within an OptionMenu.
The function \*LXmRepTypeInstallTearOffModelConverter\*O installs
a resource converter for this resource.
.LI "\*LXmNunmapCallback\*O"
Specifies a list of callbacks that is called
after the window associated with the RowColumn
widget has been unmapped.  The callback reason is \*LXmCR_UNMAP\*O.
The default value is NULL.
.LI "\*LXmNwhichButton\*O"
This resource is obsolete; it has been replaced by \*LXmNmenuPost\*O and
is present for compatibility with older releases of 1/Motif.
.LE
.sp
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmRowColumn Constraint Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNpositionIndex	XmLAST_POSITION	CSG
\ \ \ \ \ \ XmCPositionIndex	\ \ \ \ \ \ \ short
_
.TE
.\" NROFF HACK END
.VL
.LI "\*LXmNpositionIndex\*O"
Specifies the position of the widget in its parent's list of
children (the value of the \*LXmNchildren\*O resource).  The value
is an integer that is no less than zero and no greater than
the number of children in the list at the time the value is  
specified.  A value of zero means that the child is placed at the
beginning of the list.  The value can also be  specified as
\*LXmLAST_POSITION\*O (the default), which means that the child
is placed at the end of the list.  Any other value is ignored.
\*LXtGetValues\*O returns the position of the widget in its parent's
child list at the time of the call to \*LXtGetValues\*O.
.sp
When a widget is inserted into its parent's child list, the positions
of any existing children that are greater than or equal to the
specified widget's \*LXmNpositionIndex\*O are increased by one.
The effect of a call to \*LXtSetValues\*O for \*LXmNpositionIndex\*O
is to remove the specified widget from its parent's child list, decrease
by one the positions of any existing children that are greater than
the specified widget's former position in the list, and then insert
the specified widget into its parent's child list as described in the
preceding sentence.
.LE
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Simple Menu Creation Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNbuttonAccelerators	NULL	C
\ \ \ \ \ \ XmCButtonAccelerators	\ \ \ \ \ \ \ StringTable
_
XmNbuttonAcceleratorText	NULL	C
\ \ \ \ \ \ XmCButtonAcceleratorText	\ \ \ \ \ \ \ XmStringTable
_
XmNbuttonCount	0	C
\ \ \ \ \ \ XmCButtonCount	\ \ \ \ \ \ \ int
_
XmNbuttonMnemonicCharSets	NULL	C
\ \ \ \ \ \ XmCButtonMnemonicCharSets	\ \ \ \ \ \ \ XmStringCharSetTable
_
XmNbuttonMnemonics	NULL	C
\ \ \ \ \ \ XmCButtonMnemonics	\ \ \ \ \ \ \ XmKeySymTable
_
XmNbuttons	NULL	C
\ \ \ \ \ \ XmCButtons	\ \ \ \ \ \ \ XmStringTable
_
XmNbuttonSet	\-1	C
\ \ \ \ \ \ XmCButtonSet	\ \ \ \ \ \ \ int
_
XmNbuttonType	NULL	C
\ \ \ \ \ \ XmCButtonType	\ \ \ \ \ \ \ XmButtonTypeTable
_
XmNoptionLabel	NULL	C
\ \ \ \ \ \ XmCOptionLabel	\ \ \ \ \ \ \ XmString
_
XmNoptionMnemonic	NULL	C
\ \ \ \ \ \ XmCOptionMnemonic	\ \ \ \ \ \ \ KeySym
_
XmNpostFromButton	\-1	C
\ \ \ \ \ \ XmCPostFromButton	\ \ \ \ \ \ \ int
_
XmNsimpleCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackProc
_
.TE
.\" NROFF HACK END
.wH .in  
.VL
.LI "\*LXmNbuttonAccelerators\*O"
This resource is for use with the simple menu creation routines.
It specifies a list of accelerators for the buttons created.
The list contains one element for each button, separator, and title
created.
.nL
.ne 6
.LI "\*LXmNbuttonAcceleratorText\*O"
This resource is for use with the simple menu creation routines.
It specifies a list of compound strings to display for the accelerators for
the buttons created.
The list contains one element for each button, separator, and title
created.
.LI "\*LXmNbuttonCount\*O"
This resource is for use with the simple menu creation routines.
It specifies the total number of menu buttons, separators, and titles to
create.
The value must not be negative.
.LI "\*LXmNbuttonMnemonicCharSets\*O"
This resource is for use with the simple menu creation routines.
It specifies a list of character sets with which button mnemonics are to be
displayed.
The list contains one element for each button, separator, and title
created.
The default is determined dynamically depending on the locale of the
widget.
.LI "\*LXmNbuttonMnemonics\*O"
This resource is for use with the simple menu creation routines.
It specifies a list of mnemonics for the buttons created.
The list contains one element for each button, separator, and title
created.
.LI "\*LXmNbuttons\*O"
This resource is for use with the simple menu creation routines.
It specifies a list of compound strings to use as labels for the buttons
created.
The list contains one element for each button, separator, and title
created.
.LI "\*LXmNbuttonSet\*O"
This resource is for use with the simple menu creation routines.
It specifies which button of a RadioBox or OptionMenu Pulldown submenu
is initially set.
The value is an integer \*Vn\*O indicating the \*Vn\*Oth
ToggleButtonGadget specified for a RadioBox or the \*Vn\*Oth
PushButtonGadget specified for an OptionMenu Pulldown submenu.
The first button specified is number 0.
The value must not be negative.
.nL
.ne 4
.LI "\*LXmNbuttonType\*O"
This resource is for use with the simple menu creation routines.
It specifies a list of button types associated with the buttons to be
created.
The list contains one element for each button, separator, and title
created.
If this resource is not specified, each button in a MenuBar is a
CascadeButtonGadget, each button in a RadioBox or CheckBox is a
ToggleButtonGadget, and
each button in any other type of RowColumn widget is a PushButtonGadget.
Each button type is of type \*LXmButtonType\*O, an enumeration with the
following possible values:
.sp
\*LXmCASCADEBUTTON\*O\(emSpecifies a CascadeButtonGadget for a
MenuBar, Popup MenuPane, or Pulldown MenuPane.
.sp
\*LXmCHECKBUTTON\*O\(emSpecifies a ToggleButtonGadget for a CheckBox,
Popup MenuPane, or Pulldown MenuPane.
.sp
\*LXmDOUBLE_SEPARATOR\*O\(emSpecifies a SeparatorGadget for a Popup
MenuPane, Pulldown MenuPane, or OptionMenu Pulldown submenu.
The separator type is \*LXmDOUBLE_LINE\*O.
.sp
\*LXmPUSHBUTTON\*O\(emSpecifies a PushButtonGadget for a Popup MenuPane,
Pulldown MenuPane, or OptionMenu Pulldown submenu.
.sp
\*LXmRADIOBUTTON\*O\(emSpecifies a ToggleButtonGadget for a RadioBox,
Popup MenuPane, or Pulldown MenuPane.
.sp
\*LXmSEPARATOR\*O\(emSpecifies a SeparatorGadget for a Popup MenuPane,
Pulldown MenuPane, or OptionMenu Pulldown submenu.
.sp
\*LXmTITLE\*O\(emSpecifies a LabelGadget used as a title for a Popup
MenuPane or Pulldown MenuPane.
.LI "\*LXmNoptionLabel\*O"
This resource is for use with the simple menu creation routines.
It specifies a compound string for the label string to be used on the left
side of an OptionMenu.
.nL
.ne 8
.LI "\*LXmNoptionMnemonic\*O"
This resource is for use with the simple menu creation routines.
It specifies a keysym for a key that, when pressed by the user along
with the \*LMAlt\*O modifier, posts
the associated Pulldown MenuPane for an OptionMenu.
.LI "\*LXmNpostFromButton\*O"
This resource is for use with the simple menu creation routines.
For a Pulldown MenuPane, it specifies the button in the parent to which
the submenu is attached.
The menu is then posted from this button.
The value is an integer \*Vn\*O indicating the \*Vn\*Oth
CascadeButton or CascadeButtonGadget specified for the parent of the
Pulldown MenuPane.
The first button specified is number 0.
The value must not be negative.
.LI "\*LXmNsimpleCallback\*O"
This resource is for use with the simple menu creation routines.
It specifies a callback procedure to be called when a button is
activated or when its value changes.
This callback function is added to each button after creation.
For a CascadeButtonGadget or a PushButtonGadget, the callback is added
as the button's \*LXmNactivateCallback\*O, and it is called when the
button is activated.
For a ToggleButtonGadget, the callback is added as the button's
\*LXmNvalueChangedCallback\*O, and it is called when the button's value
changes.
The button number is passed in the \*Vclient_data\*O field.
.LE
.SS "Inherited Resources"
RowColumn inherits behavior and resources from the following named
superclasses.  For a complete description of each resource, refer to the
man page for that superclass.
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmManager Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNbottomShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCBottomShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNbottomShadowPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCBottomShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNforeground	dynamic	CSG
\ \ \ \ \ \ XmCForeground	\ \ \ \ \ \ \ Pixel
_
XmNhelpCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNhighlightColor	dynamic	CSG
\ \ \ \ \ \ XmCHighlightColor	\ \ \ \ \ \ \ Pixel
_
XmNhighlightPixmap	dynamic	CSG
\ \ \ \ \ \ XmCHighlightPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNinitialFocus	NULL	CSG
\ \ \ \ \ \ XmCInitialFocus	\ \ \ \ \ \ \ Widget
_
XmNnavigationType	dynamic	CSG
\ \ \ \ \ \ XmCNavigationType	\ \ \ \ \ \ \ XmNavigationType
_
XmNshadowThickness	dynamic	CSG
\ \ \ \ \ \ XmCShadowThickness	\ \ \ \ \ \ \ Dimension
_
XmNstringDirection	dynamic	CG
\ \ \ \ \ \ XmCStringDirection	\ \ \ \ \ \ \ XmStringDirection
_
XmNtopShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNtopShadowPixmap	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNtraversalOn	dynamic	CSG
\ \ \ \ \ \ XmCTraversalOn	\ \ \ \ \ \ \ Boolean
_
XmNunitType	dynamic	CSG
\ \ \ \ \ \ XmCUnitType	\ \ \ \ \ \ \ unsigned char
_
XmNuserData	NULL	CSG
\ \ \ \ \ \ XmCUserData	\ \ \ \ \ \ \ XtPointer
_
.TE
.\" NROFF HACK END
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Composite Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNchildren	NULL	G
\ \ \ \ \ \ XmCReadOnly	\ \ \ \ \ \ \ WidgetList
_
XmNinsertPosition	default procedure	CSG
\ \ \ \ \ \ XmCInsertPosition	\ \ \ \ \ \ \ XtOrderProc
_
XmNnumChildren	0	G
\ \ \ \ \ \ XmCReadOnly	\ \ \ \ \ \ \ Cardinal
_
.TE
.\" NROFF HACK END
.PP
.wH .in 0 
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Core Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNaccelerators	dynamic	CSG
\ \ \ \ \ \ XmCAccelerators	\ \ \ \ \ \ \ XtAccelerators
_
XmNancestorSensitive	dynamic	G
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNbackground	dynamic	CSG
\ \ \ \ \ \ XmCBackground	\ \ \ \ \ \ \ Pixel
_
XmNbackgroundPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderColor	XtDefaultForeground	CSG
\ \ \ \ \ \ XmCBorderColor	\ \ \ \ \ \ \ Pixel
_
XmNborderPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderWidth	0	CSG
\ \ \ \ \ \ XmCBorderWidth	\ \ \ \ \ \ \ Dimension
_
XmNcolormap	dynamic	CG
\ \ \ \ \ \ XmCColormap	\ \ \ \ \ \ \ Colormap
_
XmNdepth	dynamic	CG
\ \ \ \ \ \ XmCDepth	\ \ \ \ \ \ \ int
_
XmNdestroyCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNheight	dynamic	CSG
\ \ \ \ \ \ XmCHeight	\ \ \ \ \ \ \ Dimension
_
XmNinitialResourcesPersistent	True	C
\ \ \ \ \ \ XmCInitialResourcesPersistent	\ \ \ \ \ \ \ Boolean
_
XmNmappedWhenManaged	True	CSG
\ \ \ \ \ \ XmCMappedWhenManaged	\ \ \ \ \ \ \ Boolean
_
XmNscreen	dynamic	CG
\ \ \ \ \ \ XmCScreen	\ \ \ \ \ \ \ Screen *
_
.wH .tH
XmNsensitive	True	CSG
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNtranslations	dynamic	CSG
\ \ \ \ \ \ XmCTranslations	\ \ \ \ \ \ \ XtTranslations
_
XmNwidth	dynamic	CSG
\ \ \ \ \ \ XmCWidth	\ \ \ \ \ \ \ Dimension
_
XmNx	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
XmNy	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
.TE
.\" NROFF HACK END
.wH .in  
.SS "Callback Information"
A pointer to the following structure is passed to each callback:
.sS
.iS
.ta .25i 1.1i
typedef struct
{
	int	\*Vreason\*L;
	XEvent	\*V* event\*L;
	Widget	\*Vwidget\*L;
	char	\*V* data\*L;
	char	\*V* callbackstruct\*L;
} XmRowColumnCallbackStruct;
.iE
.sE
.wH .fi
.VL 1i 
.LI "\*Vreason\*O"
Indicates why the callback was invoked
.LI "\*Vevent\*O"
Points to the \*LXEvent\*O that triggered the callback
.LE 
.PP 
The following fields apply only when the callback reason is \*LXmCR_ACTIVATE\*O;
for all other callback reasons, these fields are set to NULL.
The \*LXmCR_ACTIVATE\*O callback reason is generated only when the application
has supplied an entry callback, which overrides any activation callbacks
registered with the individual RowColumn items.
.VL 1i 
.LI "\*Vwidget\*O"
Is set to the widget ID of the RowColumn item that has been activated
.LI "\*Vdata\*O"
Contains the client-data value supplied by the
application when the RowColumn item's activation callback was registered
.LI "\*Vcallbackstruct\*O"
Points to the callback structure
generated by the RowColumn item's activation callback
.LE 
.SS "Translations"
XmRowColumn translations depend on the value of
the \*LXmNrowColumnType\*O resource.
.sp
If \*LXmNrowColumnType\*O is set to \*LXmWORK_AREA\*O,
XmRowColumn inherits translations from XmManager.
.sp
If \*LXmNrowColumnType\*O is set to \*LXmMENU_OPTION\*O,
XmRowColumn inherits traversal, KActivate, and KCancel
translations from XmManager
and has the additional translations listed below.
These translations may not directly correspond to a
translation table.
.iS
.ta 1.5i
BSelect Press:	MenuBtnDown()
BSelect Release:	MenuBtnUp()
KSelect:	ManagerGadgetSelect()
KHelp:	Help()
.wH .fi
.iE
.PP 
The translations for XmRowColumn if
\*LXmNrowColumnType\*O is set to \*LXmMENU_BAR\*O
\*LXmMENU_PULLDOWN\*O, or \*LXmMENU_POPUP\*O
are listed below.
In a Popup menu system, \*LBMenu\*O also performs the \*LBSelect\*O
actions.
These translations may not directly correspond to a
translation table.
.iS
.ta 1.5i
BSelect Press:	MenuBtnDown()
BSelect Release:	MenuBtnUp()
KActivate:	ManagerGadgetSelect()
KSelect:	ManagerGadgetSelect()
MAny KCancel:	MenuGadgetEscape()
KHelp:	Help()
KLeft:	MenuGadgetTraverseLeft()
KRight:	MenuGadgetTraverseRight()
KUp:	MenuGadgetTraverseUp()
KDown:	MenuGadgetTraverseDown()
.wH .fi
.iE
.SS "Action Routines"
The XmRowColumn action routines are described below:
.VL
.LI "\*LHelp()\*O:"
Calls the callbacks for \*LXmNhelpCallback\*O if any exist.  If there are no help
callbacks for this widget, this action calls the help callbacks
for the nearest ancestor that has them.
.LI "\*LManagerGadgetSelect()\*O:"
When a gadget child of the menu has the focus, invokes the gadget
child's behavior associated with \*LKSelect\*O.
This generally has the effect of unposting the menu hierarchy and arming
and activating the gadget, except that for a CascadeButtonGadget with a
submenu, it posts the submenu.
.LI "\*LMenuBtnDown()\*O:"
When a gadget child of the menu has the focus, invokes the gadget
child's behavior associated with \*LBSelect Press\*O.
This generally has the effect of unposting any menus posted by the
parent menu, enabling mouse traversal in the menu, and arming the
gadget.
For a CascadeButtonGadget with a submenu, it also posts the associated
submenu.
.nL
.ne 9
.LI "\*LMenuBtnUp()\*O:"
When a gadget child of the menu has the focus, invokes the gadget
child's behavior associated with \*LBSelect Release\*O.
This generally has the effect of unposting the menu hierarchy and
activating the gadget,
.ne 4
except that for a CascadeButtonGadget with a
submenu, it posts the submenu and enables keyboard traversal in the
menu.
.LI "\*LMenuGadgetEscape()\*O:"
In a toplevel Pulldown MenuPane from a MenuBar, unposts the menu,
disarms the MenuBar CascadeButton and the MenuBar, and, when the shell's
keyboard focus policy is \*LXmEXPLICIT\*O, restores keyboard focus to
the widget that had the focus before the MenuBar was entered.
In other Pulldown MenuPanes, unposts the menu.
.sp
In a Popup MenuPane, unposts the menu and, when the shell's keyboard
focus policy is \*LXmEXPLICIT\*O, restores keyboard focus to the widget
from which the menu was posted.
In a TearOff MenuPane that has no submenus posted, dismisses the
menu; otherwise, if one or more submenus are posted, unposts the last
menu pane.  
.LI "\*LMenuGadgetTraverseDown()\*O:"
If the current menu item has a submenu and is in a MenuBar, then this
action posts the submenu, disarms the current menu item, and arms
the submenu's first traversable menu item.
.sp
If the current menu item is in a MenuPane, then this action disarms the
current menu item and arms the item below it.  This action wraps within the
MenuPane.  When the current menu item is at the MenuPane's
bottom edge, then this action wraps to the topmost menu item in the column
to the right, if one exists.  When the current menu item is at the bottom,
rightmost corner of the MenuPane, then this action wraps to the tear-off
control, if present, or to the top, leftmost menu item.
.LI "\*LMenuGadgetTraverseLeft()\*O:"
When the current menu item is in a MenuBar, then this action disarms the
current item and arms the MenuBar item to the left.
This action wraps within the MenuBar.
.sp
In MenuPanes, if the current menu item is not at the left edge of a MenuPane,
this action disarms the current item and arms the item to its left.
If the current menu item is at the left edge of a submenu attached to a
MenuBar item, then this action unposts the submenu and traverses to the
MenuBar item to the left, wrapping if necessary.  If that MenuBar item
has a submenu, it posts the submenu and arms the first traversable
item in the submenu.
If the current menu item is at the left edge of a submenu not directly
attached to a MenuBar item, then this action unposts the current submenu only.
.sp
In Popup or Torn-off MenuPanes, when the current menu item is at the
left edge, this  action wraps within the MenuPane.  If the current menu
item is at the left edge of the MenuPane and not in the top row, this
action wraps to the rightmost menu item in the row above.  If the current
menu item is in the upper, leftmost corner, this action wraps
to the tear-off control, if present, or else it wraps to the bottom,
rightmost menu item in the MenuPane.
.nL
.ne 8
.LI "\*LMenuGadgetTraverseRight()\*O:"
If the current menu item is in a MenuBar, then this action disarms the
current item and arms the MenuBar item to the right.
This action wraps within the MenuBar.
.sp
In MenuPanes, if the current menu item is a CascadeButton, then this
action posts its associated submenu.
If the current menu item is not a CascadeButton and is not at the right
edge of a MenuPane, this action disarms the current item and arms the
item to its right, wrapping if necessary.
If the current menu item is not a CascadeButton and is at the right edge of a
submenu that is a descendent of a MenuBar, then this action unposts all
submenus and traverses to the MenuBar item to the right.
If that MenuBar item has a submenu, it posts the submenu and arms
the submenu's first traversable item.
.sp
In Popup or Torn-off menus, if the current menu item is not a
CascadeButton and is at the right edge of a row (except the
bottom row), this action wraps to the leftmost menu item in the
row below.  If the current menu item is not a CascadeButton and
is in the bottom, rightmost corner of a Popup or Pulldown MenuPane, this
action wraps to the tear-off control, if present, or else it wraps to
the top, leftmost menu item of the MenuPane.
.LI "\*LMenuGadgetTraverseUp()\*O:"
When the current menu item is in a MenuPane, then
this action disarms the current menu item and arms the item above it.  This
action wraps within the MenuPane.  When the current menu item is at the
MenuPane's top edge, then this action wraps to the bottommost menu item in the
column to the left, if one exists.  When the current menu item is at the top,
leftmost corner of the MenuPane, then this action wraps to the tear-off
control, if present, or to the bottom, rightmost menu item.
.LE
.SS "Related Behavior"
The following menu functions are available.
.VL
.LI "\*LKMenuBar\*O:"
In any non-popup descendant of a MenuBar's parent, excluding the MenuBar
itself, this action enables keyboard traversal and moves keyboard focus
to the first item in the MenuBar.  
In the MenuBar or any menu cascaded from it, this action unposts the
menu hierarchy and, when the shell's keyboard focus policy is
\*LXmEXPLICIT\*O, restores focus to the widget that had the focus
when the menu system was entered.
.LI "\*LKMenu\*O:"
Pops up the menu associated with the control that has the keyboard focus.
Enables keyboard traversal in the menu.
In the Popup menu system or any menu cascaded from it, this action
unposts the menu hierarchy and, when the shell's keyboard focus policy
is \*LXmEXPLICIT\*O, restores focus to the widget that had the focus
when the menu system was entered.
.LE
.SS "Virtual Bindings"
The bindings for virtual keys are vendor specific.
For information about bindings for virtual buttons and keys, see \*LVirtualBindings(3X)\*O.
.SH RELATED INFORMATION
.na
\*LComposite(3X)\*O,
\*LConstraint(3X)\*O,
\*LCore(3X)\*O,
\*LXmCreateMenuBar(3X)\*O,
\*LXmCreateOptionMenu(3X)\*O,
\*LXmCreatePopupMenu(3X)\*O,
\*LXmCreatePulldownMenu(3X)\*O,
\*LXmCreateRadioBox(3X)\*O,
\*LXmCreateRowColumn(3X)\*O,
\*LXmCreateSimpleCheckBox(3X)\*O,
\*LXmCreateSimpleMenuBar(3X)\*O,
\*LXmCreateSimpleOptionMenu(3X)\*O,
\*LXmCreateSimplePopupMenu(3X)\*O,
\*LXmCreateSimplePulldownMenu(3X)\*O,
\*LXmCreateSimpleRadioBox(3X)\*O,
\*LXmCreateWorkArea(3X)\*O,
\*LXmGetMenuCursor(3X)\*O,
\*LXmGetPostedFromWidget(3X)\*O,
\*LXmGetTearOffControl\*O,
\*LXmLabel(3X)\*O,
\*LXmManager(3X)\*O,
\*LXmMenuPosition(3X)\*O,
\*LXmOptionButtonGadget(3X)\*O,
\*LXmOptionLabelGadget(3X)\*O,
\*LXmRepTypeInstallTearOffModelConverter\*O,
\*LXmSetMenuCursor(3X)\*O,
\*LXmUpdateDisplay(3X)\*O,
\*LXmVaCreateSimpleCheckBox(3X)\*O,
\*LXmVaCreateSimpleMenuBar(3X)\*O,
\*LXmVaCreateSimpleOptionMenu(3X)\*O,
\*LXmVaCreateSimplePopupMenu(3X)\*O,
\*LXmVaCreateSimplePulldownMenu(3X)\*O, and
\*LXmVaCreateSimpleRadioBox(3X)\*O.
.ad
.EQ
delim off
.EN

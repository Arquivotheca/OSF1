.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: XmClipboardStartCopy.3X,v $ $Revision: 3.2.4.4 $ (DEC) $Date: 1993/10/25 18:54:11 $
.\"
.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **  (c) Copyright 1988 by Massachusetts Institute of Technology
.\" **
.\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
.\" **      Maynard, MA.  All Rights Reserved.
.\" **
.\" **
.TH XmClipboardStartCopy 3X "" "" "" "OSF/Motif"
.SH NAME
\*LXmClipboardStartCopy\*O \- A clipboard function that sets up a storage and data structure
.SH SYNOPSIS
.sS
.iS
\&#include <Xm/Xm.h>
\&#include <Xm/CutPaste.h>
.sp \n(PDu
.ta 1i
int \*LXmClipboardStartCopy\*L (\*Vdisplay, window, clip_label,
	timestamp, widget, callback, item_id\*L)
.ta .5i 1.5i
	Display	\*V* display\*L;
	Window	\*Vwindow\*L;
	XmString	\*Vclip_label\*L;
	Time	\*Vtimestamp\*L;
	Widget	\*Vwidget\*L;
	XmCutPasteProc	\*Vcallback\*L;
	long	\*V* item_id\*L;
.wH .fi
.iE
.sE
.SH DESCRIPTION
.iX "XmClipboardStartCopy"
.iX "clipboard functions" "XmClipboardStartCopy"
\*LXmClipboardStartCopy\*O
sets up storage and data structures to receive clipboard data.
An application calls this function during a cut or copy operation.
The data item that these structures receive then becomes
the next data item in the clipboard.
.PP 
Copying a large piece of data to the clipboard can take a long time.
It is possible that, once copied, no application will ever request that
data.
The Motif Toolkit provides a mechanism so that an application does not need to
actually pass data to the clipboard until the data has been requested by
some application.
.PP 
Instead, the application passes format and length information
in \*LXmClipboardCopy\*O to the
clipboard functions, along with a widget ID and a callback function
address that is passed in \*LXmClipboardStartCopy\*O.
The widget ID is needed for communications between the clipboard
functions in the application that owns the data and the clipboard
functions in the application that requests the data.
.PP 
The callback functions are responsible for copying the actual data to
the clipboard via \*LXmClipboardCopyByName\*O.
The callback function is also called if the data item is removed from
the clipboard, and the actual data is therefore no longer needed.
.VL 1.2i 
.LI "\*Vdisplay\*O"
Specifies a pointer to the \*LDisplay\*O structure that was returned in a
previous call to \*LXOpenDisplay\*O or \*LXtDisplay\*O.
.LI "\*Vwindow\*O"
Specifies a widget's window ID that relates the application window to the
clipboard.  The widget's window ID can be obtained by using
\*LXtWindow\*O.
The same application instance should pass the same window ID to each of the
clipboard functions that it calls.
.LI "\*Vclip_label\*O"
Specifies the label to be associated with the data item.
This argument
is used to identify the data item, for example, in a clipboard viewer.
An example of a label is the name of the application that places the
data in the clipboard.
.LI "\*Vtimestamp\*O"
Specifies the time of the event that triggered the copy.
A valid timestamp must be supplied; it is not sufficient to use
\*LCurrentTime\*O.
.LI "\*Vwidget\*O"
Specifies the ID of the widget that receives messages requesting data
previously passed by name.
This argument must be present in order to pass data by name.
Any valid widget ID in your application can be used for this purpose and
all the message handling is taken care of by the cut and paste
functions.
.LI "\*Vcallback\*O"
Specifies the address of the callback function that is
called when the clipboard
needs data that was originally passed by name.
This is also the callback to receive the \*Ldelete\*O message for items
that were originally passed by name.
This argument must be present in order to pass data by name.
.LI "\*Vitem_id\*O"
Specifies the number assigned to this data item.
The application uses this number in calls to
\*LXmClipboardCopy\*O, \*LXmClipboardEndCopy\*O, and
\*LXmClipboardCancelCopy\*O.
.LE 
.PP 
For more information on passing data by name, see
\*LXmClipboardCopy(3X)\*O and \*LXmClipboardCopyByName(3X)\*O.
.PP 
The \*Vwidget\*O and \*Vcallback\*O arguments must be present in order to
pass data by name. The callback format is as follows:
.sS
.iS
.ta .25i 1.2i
void (*\*Vcallback)\*L (\*Vwidget, data_id, private, reason\*L)
	Widget	\*Vwidget\*L;
	int	*\*Vdata_id\*L;
	int	*\*Vprivate\*L;
	int	*\*Vreason\*L;
.iE
.sE
.wH .fi
.VL 1.2i 
.LI "\*Vwidget\*O"
Specifies the ID of the widget passed to this function.
.LI "\*Vdata_id\*O"
Specifies the identifying number returned by
\*LXmClipboardCopy\*O, which identifies the pass-by-name data.
.LI "\*Vprivate\*O"
Specifies the private information passed to
\*LXmClipboardCopy\*O.
.LI "\*Vreason\*O"
Specifies the reason, which is either \*LXmCR_CLIPBOARD_DATA_DELETE\*O
or \*LXmCR_CLIPBOARD_DATA_REQUEST\*O.
.LE
.nL
.ne 15
.SH RETURN VALUE
.VL 1.2i 
.LI "\*LClipboardSuccess\*O"
The function is successful.
.LI "\*LClipboardLocked\*O"
The function failed because the clipboard was locked by another
application.  The application can continue to call the function again with
the same parameters until the lock goes away.  This gives the application
the opportunity to ask if the user wants to keep trying or to give up
on the operation.
.LE 
.SH RELATED INFORMATION
.na
\*LXmClipboardCancelCopy(3X)\*O, \*LXmClipboardCopy(3X)\*O,
\*LXmClipboardCopyByName(3X)\*O,
\*LXmClipboardEndCopy(3X)\*O, \*LXmClipboardEndRetrieve(3X)\*O,
\*LXmClipboardInquireCount(3X)\*O, \*LXmClipboardInquireFormat(3X)\*O,
\*LXmClipboardInquireLength(3X)\*O, \*LXmClipboardInquirePendingItems(3X)\*O,
\*LXmClipboardLock(3X)\*O, \*LXmClipboardRegisterFormat(3X)\*O,
\*LXmClipboardRetrieve(3X)\*O,
\*LXmClipboardStartRetrieve(3X)\*O, \*LXmClipboardUndoCopy(3X)\*O,
\*LXmClipboardUnlock(3X)\*O, and \*LXmClipboardWithdrawFormat(3X)\*O.
.ad
.EQ
delim off
.EN

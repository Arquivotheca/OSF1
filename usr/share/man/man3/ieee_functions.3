.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\" 
.\" @(#)$RCSfile: ieee_functions.3,v $ $Revision: 1.1.6.2 $ (DEC) $Date: 1994/01/13 00:25:46 $
.\"
.\" (c) Copyright 1992, OPEN PROVENCHER FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\" 
.TH ieee_functions 3
.SH NAME
.PP
\*Lcopysign\*O, \*Lisnan\*O, \*Lfinite\*O, \*Lfp_class\*O, \*Lnextafter\*O, \*Lunordered\*O  \- appendix and related miscellaneous functions for IEEE arithmetic
.SH LIBRARY
.PP
\*OMath Library (\*Llibm.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <math.h>
.PP
\*Ldouble copysign   (double \*Vx\*L, double \*Vy\*L);
.nL
\*Lfloat  copysignf  (float  \*Vx\*L, float  \*Vy\*L);
.nL
\*Lint    finite     (double \*Vx\*L);
.nL
\*Lint    finitef    (float  \*Vx\*L);
.nL
\*Lint    fp_class   (double \*Vx\*L);
.nL
\*Lint    fp_classf  (float  \*Vx\*L);
.nL
\*Lint    isnan      (double \*Vx\*L);
.nL
\*Lint    isnanf     (float  \*Vx\*L);
.nL
\*Ldouble nextafter  (double \*Vx\*L, double \*Vy\*L);
.nL
\*Lfloat  nextafterf (float  \*Vx\*L, float  \*Vy\*L);
.nL
\*Lint    unordered  (double \*Vx\*L, double \*Vy\*L);
.nL
\*Lint    unorderedf (float  \*Vx\*L, float  \*Vy\*L);
.sE
.SH DESCRIPTION
.PP
.iX "copysign function"
.iX "isnan function"
.iX "finite function"
.iX "fp_class function"
.iX "nextafter function"
.iX "unordered function"
\*Lcopysign(\|)\*O and \*Lcopysignf(\|)\*O
return \*Vx\*O with the same sign as \*Vy\*O.
IEEE 754 requires copysign(x,NaN) and copysignf(x,NaN) = +x  or -x.
.PP
\*Lfinite(\|)\*O and \*Lfinitef(\|)\*O
return the integer value 1 (True) or 0 (False).
finite(x) and finitef(x) = 1 when -infinity < x < +infinity.
finite(x) and finitef(x) = 0 when |x| = infinity or x is a NaN.
.PP
\*Lfp_class(\|)\*O and \*Lfp_classf(\|)\*O
determine the class of IEEE floating-point
values.  They return one of the constants in the file <fp_class.h> and
never cause an exception, even for signaling NaNs.  These routines are
to implement the recommended function class(x) in the appendix of the
IEEE 754-1985 standard for binary floating-point arithmetic.
The constants in <fp_class.h> refer to the following classes of values:
.PP
.\"    
.\"                   Constant               Class
.\"                   -------------  ----------------------------
.\"                   FP_SNAN        Signaling NaN (Not-a-Number)
.\"                   FP_QNAN        Quiet NaN (Not-a-Number)
.\"                   FP_POS_INF     +infinity
.\"                   FP_NEG_INF     -infinity
.\"                   FP_POS_NORM    positive normalized 
.\"                   FP_NEG_NORM    negative normalized 
.\"                   FP_POS_DENORM  positive denormalized
.\"                   FP_NEG_DENORM  negative denormalized
.\"                   FP_POS_ZERO    +0.0 (positive zero)
.\"                   FP_NEG_ZERO    -0.0 (negative zero)
.\"    
.TS
tab(@);
lfHB lfHB lfHB
l l l .
_
.sp 4p
Constant@Class@
.sp 4p
_
.sp 6p
FP_SNAN        @Signaling NaN (Not-a-Number)	@
FP_QNAN        @Quiet NaN (Not-a-Number)	@
FP_POS_INF     @+infinity			@
FP_NEG_INF     @-infinity			@
FP_POS_NORM    @positive normalized		@
FP_NEG_NORM    @negative normalized		@
FP_POS_DENORM  @positive denormalized		@
FP_NEG_DENORM  @negative denormalized		@
FP_POS_ZERO    @+0.0 (positive zero)		@
FP_NEG_ZERO    @-0.0 (negative zero)		@
.sp 6p
_
_
.TE
.PP
\*Lisnan(\|)\*O and \*Lisnanf(\|)\*O
return 1 (True) if \*Vx\*O  is NaN
(the IEEE floating point reserved not-a-number value)
and 0 (False) otherwise.
.PP
\*Lnextafter(\|)\*O and \*Lnextafterf(\|)\*O
return the next machine representable
number from \*Vx\*O  in the direction of \*Vy\*O.
.PP
\*Lunordered(\|)\*O and \*Lunorderedf(\|)\*O
return the value 1 (True)
if either \*Vx\*O  or \*Vy\*O  or both is a NaN,
and returns the value 0 (False) otherwise.
.SH RELATED INFORMATION
.PP
\*Ldrem\*O(3), \*Llogb\*O(3), \*Lscalb\*O(3), \*Lrint\*O(3), \*Lsqrt\*O(3), and ANSI/IEEE Std 754-1985,
IEEE Standard for Binary Floating-Point Arithmetic
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: msem_lock.3,v $ $Revision: 3.2.2.2 $ (DEC) $Date: 1992/05/18 13:27:51 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\"
.\"
.TH msem_lock 3
.SH NAME
\*Lmsem_lock\*O \- Locks a semaphore
.SH LIBRARY
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS 
.sS
\*L#include <sys/mman.h>\*O
.sp .4v
\*Lint msem_lock (\*O
.nL
	\*Lmsemaphore \(**\*Vsem\*O,\*L
.nL
	int \*Vcondition \*L);
.sE
.SH PARAMETERS
.\"from TP "  
.VL 
.LI "\*Vsem\*O"
Points to an
\*Lmsemaphore\*O
structure which specifies
the semaphore to be locked.
.\"from TP "  
.LI "\*Vcondition\*O" 
Determines whether the
\*Lmsem_lock(\|)\*O
function waits for a currently locked semaphore to unlock.
.LE 
.SH DESCRIPTION
.iX "msem_lock function"
.iX "semaphore " "locking binary"
.PP 
The
\*Lmsem_lock(\|)\*O
function attempts to lock a binary semaphore.
.PP 
If the semaphore is not currently locked, it is locked and
the
\*Lmsem_lock(\|)\*O
function returns successfully.
.PP 
If the semaphore is currently locked, and the
\*Vcondition\*O
parameter is
MSEM_IF_NOWAIT, then the
\*Lmsem_lock(\|)\*O
function returns with an error.  If the
semaphore is currently locked, and the
\*Vcondition\*O
parameter is 0 (zero),
then
\*Lmsem_lock(\|)\*O
will not return until either the calling process is
able to successfully lock the semaphore, or an error condition occurs.
.PP 
All calls to
\*Lmsem_lock(\|)\*O
and
\*Lmsem_unlock(\|)\*O
by multiple processes sharing a common
\*Lmsemaphore\*O
structure
behave as if the calls were serialized.
.PP 
If the
\*Lmsemaphore\*O
structure contains any value not resulting from a
call to
\*Lmsem_init(\|)\*O
followed by a (possibly empty) sequence of calls
to
\*Lmsem_lock(\|)\*O
and
\*Lmsem_unlock(\|)\*O,
the results are undefined.
The address of an
\*Lmsemaphore\*O
structure may be significant.
If the
\*Lmsemaphore\*O
structure contains any value copied from an
\*Lmsemaphore\*O
structure at a different address, the result is undefined.
.SH NOTES
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Trial use
.LE
.SH RETURN VALUES
.PP 
On successful completion, the
\*Lmsem_lock(\|)\*O
function returns 0 (zero).
On error, the
\*Lmsem_lock(\|)\*O
function returns -1 and sets
\*Lerrno\*O
to indicate the error.
.SH ERRORS
.PP 
If the
\*Lmsem_lock(\|)\*O
function fails,
\*Lerrno\*O
may be set to one of the following values:
.\"from TP 1i"  
.VL 1i
.LI "[EAGAIN]"
MSEM_IF_NOWAIT was specified and the semaphore was already locked.
.\"from TP 1i"  
.LI "[EINVAL]" 
The
\*Vsem\*O
parameter points to an
\*Lmsemaphore\*O
structure which specifies a semaphore
which has been removed, or the
\*Vcondition\*O
parameter is invalid.
.\"from TP 1i"  
.LI "[EINTR]" 
The
\*Lmsem_lock(\|)\*O
function was interrupted by a signal which was caught.
.LE 
.SH RELATED INFORMATION
.PP 
Functions:
\*Lmsem_init\*O(3),
\*Lmsem_remove\*O(3),
\*Lmsem_unlock\*O(3)
.iX "msem_lock function"
.EQ
delim off
.EN

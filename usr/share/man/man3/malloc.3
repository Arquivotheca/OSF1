.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: malloc.3,v $ $Revision: 3.2.7.5 $ (DEC) $Date: 1994/01/20 01:57:58 $
.\"
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.TH malloc 3
.SH NAME
.PP
\*Lmalloc\*O, \*Lfree\*O, \*Lrealloc\*O, \*Lcalloc\*O, \*Lmallopt\*O, \*Lmallinfo\*O, \*Lalloca\*O, \*Lvalloc\*O \- Provides a memory allocator
.SH LIBRARY
.PP
\*OStandard C Library (\*Llibc.a\*O)
.nL
Berkeley Compatibility Library (\*Llibbsd.a\*O)
.nL
Pthreads library (\*Llibpthreads.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <malloc.h>\*O
.\" Begin Digital-specific information CORRECTION
.\" Added the following line per QAR 9856.
.br
.\"per Sterling bl7, stdlib.h is included in malloc.h
.\"\*L#include <stdlib.h>\*O
.\" End Digital-specific information CORRECTION
.sp
\*Lvoid *malloc(
.nL
        \*Lsize_t \*Vsize\*L);
.sp
\*Lchar *alloca(
.nL
        \*Lint \*Vsize\*L);
.sp
\*Lvoid free(
.nL
        \*Lvoid \(**\*Vpointer\*L);
.sp
\*Lvoid *realloc(
.nL
        \*Lvoid \(**\*Vpointer\*L,
.nL
        \*Lsize_t \*Vsize\*L);
.sp
\*Lint mallopt(
.nL
        \*Lint \*Vcommand\*L,
.nL
        \*Lint \*Vvalue\*\*O);
.sp
\*Lstruct mallinfo mallinfo(void);\*O
.sp
\*Lvoid *calloc(
.nL
        \*Lsize_t \*Vnum_of_elts\*L,
.nL
        \*Lsize_t \*Velt_size\*L);
.sp
\*Lvoid *valloc(            /* libc.a version */
.nL
        \*Lsize_t \*Vsize\*L);    /* returns pointer to void */\*L
.sp
\*Lchar *valloc(            /* libbsd.a */
.nL
        \*Lsize_t \*Vsize\*L);    /* returns pointer to char */\*L
.sE
.SH PARAMETERS
.PP
.VL 5m
.LI "\*Vsize"
\*OSpecifies a number of bytes of memory.
.LI "\*Vpointer"
\*OPoints to the block of memory that was returned
by the \*Lmalloc(\|)\*O or \*Lcalloc(\|)\*O function.
.LI "\*Vcommand"
\*OSpecifies a \*Lmallopt(\|)\*O function command.
.LI "\*Vvalue"
\*OSpecifies M_MXFAST, M_NLBLKS, M_GRAIN, or M_KEEP.
.LI "\*Vnum_of_elts"
\*OSpecifies the number of elements in the array.
.LI "\*Velt_size"
\*OSpecifies the size of each element in the array.
.LE
.SH DESCRIPTION
.PP
.iX "malloc function"
.iX "free function"
.iX "realloc function"
.iX "calloc function"
.iX "mallopt function"
.iX "mallinfo function"
.iX "alloca function"
.iX "valloc function"
.iX "memory allocator functions"
.iX "memory" "allocating"
.iX "memory" "freeing"
.iX "memory" "changing size of allocated"
.iX "memory" "allocating space for an array"
.iX "memory" "tuning allocation algorithm"
.iX "memory" "allocating specified boundaries"
The \*Lmalloc(\|)\*O and \*Lfree(\|)\*O functions provide
a simple, general-purpose memory allocation package.
.PP
The \*Lmalloc(\|)\*O function returns a pointer to a block of
memory of at least the number of bytes specified by the
\*Vsize\*O parameter.  The block is aligned so that it can be used for any type of data.  If the
\*Vsize\*O
parameter is 0 (zero), the
\*Lmalloc(\|)\*O
function returns a null pointer.
.PP
The \*Lfree(\|)\*O function frees the block of memory pointed
to by the \*Vpointer\*O parameter for further allocation.  The block
pointed to by the \*Vpointer\*O parameter must have been previously
allocated by either the \*Lmalloc(\|)\*O,
\*Lrealloc(\|)\*O,
\*Lcalloc(\|)\*O, or
\*Lvalloc(|)\*O
functions.
.PP
The \*Lrealloc(\|)\*O function changes the size of the block
of memory pointed to by the \*Vpointer\*O parameter to the number
of bytes specified by the \*Vsize\*O parameter, and returns
a pointer to the block. The contents of the block remain unchanged
up to the lesser of the old and new sizes.
If necessary, a new block is allocated, and data is copied
to it.  If the
\*Vpointer\*O
parameter is a null pointer, the
\*Lrealloc(\|)\*O
function simply allocates a new block of the requested size.  If
the
\*Vsize\*O
parameter is 0 (zero), the
\*Lrealloc(\|)\*O
function frees the specified block.
.PP
The \*Lcalloc(\|)\*O function allocates space for an array with
the number of elements specified by the \*Vnum_of_elts\*O
parameter, where each element is of the size specified by the \*Velt_size\*O
parameter. The space is initialized to zeros.
.PP
The \*Lalloca(\|)\*O function allocates the number of bytes of
space specified by the \*Vsize\*O parameter in the stack frame
of the caller. This space is automatically freed when the function
that called the \*Lalloca(\|)\*O function returns to its caller.
.PP
The \*Lvalloc(\|)\*O function, found in many BSD systems, is supported in two
ways:
.ML
.LI
in libbsd.a, as a BSD-compatible interface returning a pointer to a \*Lchar\*O
.LI
in libc.a, returning a pointer to \*Lvoid\*O
.LE
.PP
Both interfaces automatically align requests to a page boundary (that is,
the value returned by a call to \*Lgetpagesize(\|)\*O).
.PP
The \*Lmallopt(\|)\*O and \*Lmallinfo(\|)\*O functions
allow tuning the allocation algorithm at execution time.
.PP
The \*Lmallopt(\|)\*O function initiates a mechanism that can
be used to allocate small blocks of memory quickly. You can use the
\*Lmallopt(\|)\*O
function to allocate
a large group (called a holding block) of these small blocks
at one time.  Then, each time a program requests a small amount of
memory, a pointer to one of the preallocated small blocks is returned.
Different holding blocks are created for different sizes of small
blocks
and are created when needed.  This function allows the programmer
to set the following three parameters to maximize efficient small
block allocation for a particular application:
.VL
.LI "\*Lsize"
\*OBelow this value, requests to the \*Lmalloc(\|)\*O
function are filled using the special small block algorithm.  Initially,
this value, which is called \*Lmaxfast\*O, is zero, which means
that the small block option is not normally in use by \*Lmalloc(\|)\*O.
.LI "\*Lnumber\*O"
\*OThe number of small blocks in a holding block.
If holding blocks have many more small blocks than the program is
using, space will be wasted.  If holding blocks are too small or have
too few small blocks in each, performance gain is lost.
.LI "\*Lgrain"
\*OThe grain of small block sizes.  This value determines
what range of small block sizes is considered the same size, which
influences the number of separate holding blocks allocated.  For example,
if the \*Lgrain\*O parameter is 16 bytes, all small blocks of
16 bytes or less belong to one holding block and blocks from
17 to 32 bytes belong to another
holding block.  Thus, if the \*Lgrain\*O parameter is too
small, space may be wasted because many holding blocks are created.
.LE
.PP
The values for the \*Vcommand\*O parameter to the \*Lmallopt(\|)\*O
function are:
.VL 1i
.LI "M_MXFAST"
Sets \*Lmaxfast\*O to the \*Vvalue\*O parameter\*V\&.\*O
The algorithm allocates all blocks below the size of \*Lmaxfast\*O
in large groups and then doles them out very quickly. The default
value for \*Lmaxfast\*O is 0 (zero).
.LI "M_NLBLKS"
Sets \*Lnumblks\*O to the \*Vvalue\*O parameter.
The aforementioned large groups each contain \*Lnumblks\*O
blocks.  The value for \*Lnumblks\*O must be greater than 1.  The
default value is 100.
.LI "M_GRAIN"
Sets \*Lgrain\*O to the \*Vvalue\*O parameter
\*O(must be greater than 0 (zero)).  The sizes of all blocks smaller than \*Lmaxfast\*O
are considered to be rounded up to the nearest multiple of \*Lgrain\*O\&.
The default value for the \*Lgrain\*O parameter is the smallest
number of bytes that allows alignment of any data type. When the \*Lgrain
\*Oparameter is set, the \*Vvalue\*O parameter is rounded up to
a multiple of the default
.LI "M_KEEP"
Preserves data in a free block until the next
call to the \*Lmalloc(\|)\*O, \*Lrealloc(\|)\*O, or \*Lcalloc(\|)\*O function.
This option is provided only for compatibility with the older version
of the \*Lmalloc(\|)\*O function and is not recommended.
.LE
.PP
The \*Lmallopt(\|)\*O function may be called repeatedly, but
parameters cannot be changed after the first small block is allocated
from a holding block.  If the \*Lmallopt(\|)\*O function is called
again after the first small block is allocated, it returns an error.
.PP
The \*Lmallinfo(\|)\*O function can be used during program development
to determine the best settings of these parameters for a particular
application.  It must only be called after some storage has been allocated.
Information describing space usage is returned.  Refer to the \*L<malloc.h>\*O
file for details of the \*Lmallinfo\*O structure.
.SH NOTES
.PP
The
\*Lmallopt(\|)\*O
and
\*Lmallinfo(\|)\*O
functions are not supported for multi-threaded applications.
.PP
The
\*Lmallopt(\|)\*O
and
\*Lmallinfo(\|)\*O
functions are provided for System V compatibility only, and should
not be used by new, portable applications.  The behavior of the
\*Lmalloc(\|)\*O
and
\*Lfree(\|)\*O
functions may not be affected by calls to
\*Lmallopt(\|)\*O.
The structure returned by the
\*Lmallinfo(\|)\*O
function may not contain any useful information.  The
\*Lmallopt(\|)\*O
and
\*Lmallinfo(\|)\*O
functions are designed for tuning a specific algorithm.
This operating system uses a new, more efficient algorithm.
.SH RETURN VALUES
.PP
Each of the allocation functions returns a pointer to space
suitably aligned for storage of any type of object. Cast the pointer
to the type pointer-to-element before using it.
.PP
The \*Lmalloc(\|)\*O, \*Lrealloc(\|)\*O, \*Lcalloc(\|)\*O, and
\*Lvalloc(\|)\*O  functions
return a null pointer if there is no available
memory or if the memory arena has been corrupted by storing
outside the bounds of a block. When this happens, the block
pointed to by the \*Vpointer\*O parameter could be destroyed.
.PP
Upon successful completion, the
\*Lmallopt(\|)\*O
function returns 0 (zero).  Otherwise, a nonzero value
is returned.
.PP
The
\*Lmallinfo(\|)\*O
function returns a pointer to a
\*Lmallinfo\*O
structure, defined in
the
\*L<malloc.h>\*O
header file.
.iX "malloc function"
.iX "free function"
.iX "realloc function"
.iX "calloc function"
.iX "mallopt function"
.iX "mallinfo function"
.iX "alloca function"
.SH ERRORS
.PP
No errors are defined for this routine.
.EQ
delim off
.EN

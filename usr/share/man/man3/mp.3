.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: mp.3,v $ $Revision: 3.2.5.3 $ (DEC) $Date: 1994/01/15 00:05:13 $
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\" @(#)mp.3x	6.4 (Berkeley) 6/4/86
.\" 
.TH mp 3
.SH NAME
.PP
\*Lmadd\*O, \*Lmsub\*O, \*Lmult\*O, \*Lmdiv\*O, \*Lpow\*O, \*Lgcd\*O, \*Linvert\*O, \*Lrpow\*O, \*Lmsqrt\*O, \*Lmcmp\*O, \*Lmin\*O, \*Lomin\*O, \*Lfmin\*O, \*Lm_in\*O, \*Lmout\*O, \*Lomout\*O, \*Lfmout\*O, \*Lm_out\*O, \*Lsdiv\*O, \*Litom\*O \- Performs multiple precision integer arithmetic
.SH LIBRARY
.PP
Object Code Library (\*Llibmp.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <mp.h>\*O
.nL
\*L#include <stdio.h>\*O
.sp .4v
\*Ltypedef struct mint { int len; short *val; } MINT;\*O
\*Lmadd(
.nL
	MINT *\*Va\*L,
.nL
	MINT *\*Vb\*L,
.nL
	MINT *\*Vc \*L);
.sp .4v
msub(
.nL
	MINT *\*Va\*L,
.nL
	MINT *\*Vb\*L,
.nL
	MINT *\*Vc \*L);
.sp .4v
mult(
.nL
	MINT *\*Va\*L,
.nL
	MINT *\*Vb\*L,
.nL
	MINT *\*Vc \*L);
.sp .4v
mdiv(
.nL
	MINT *\*Va\*L,
.nL
	MINT *\*Vb\*L,
.nL
	MINT *\*Vq\*L,
.nL
	MINT *\*Vr \*L);
.sp .4v
pow(
.nL
	MINT *\*Va\*L,
.nL
	MINT *\*Vb\*L,
.nL
	MINT *\*Vm\*L,
.nL
	MINT *\*Vc \*L);
.sp .4v
gcd(
.nL
	MINT *\*Va\*L,
.nL
	MINT *\*Vb\*L,
.nL
	MINT *\*Vc \*L);
.sp .4v
invert(
.nL
	MINT *\*Va\*L,
.nL
	MINT *\*Vb\*L,
.nL
	MINT *\*Vc \*L);
.sp .4v
rpow(
.nL
	MINT *\*Va\*L,
.nL
	int \*Vn\*O,\*L
.nL
	MINT *\*Vc \*L);
.sp .4v
msqrt(
.nL
	MINT *\*Va\*L,
.nL
	MINT *\*Vb\*L,
.nL
	MINT *\*Vr \*L);
.sp .4v
mcmp(
.nL
	MINT *\*Va\*L,
.nL
	MINT *\*Vb \*L);
.sp .4v
move(
.nL
	MINT *\*Va\*L,
.nL
	MINT *\*Vb \*L);
.sp .4v
min(
.nL
	MINT *\*Va \*L);
.sp .4v
omin(
.nL
	MINT *\*Va \*L);
.sp .4v
fmin(
.nL
	MINT *\*Va\*L,
.nL
	FILE *\*Vf\*O );\*L
.sp .4v
m_in(
.nL
	MINT *\*Va\*L,
.nL
	int \*Vn\*O,\*L
.nL
	FILE *\*Vf\*O );\*L
.sp .4v
mout(
.nL
	MINT *\*Va \*L);
.sp .4v
omout(
.nL
	MINT *\*Va \*L);
.sp 4v
fmout(
.nL
	MINT *\*Va\*L,
.nL
	FILE *\*Vf\*O );\*L
.sp .4v
m_out(
.nL
	MINT *\*Va\*L,
.nL
	int \*Vn\*O,\*L
.nL
	FILE *\*Vf\*O );\*L
.sp .4v
sdiv(
.nL
	MINT *\*Va\*L,
.nL
	short \*Vn\*O,\*L
.nL
	MINT *\*Vq\*L,
.nL
	short *\*Vr\*O );\*L
.sp .4v
*itom(
.nL
	short \*Vn\*O );\*L
.sE
.SH DESCRIPTION
.PP
.\"
.\" Removed move from NAME line because its associated pointer file
.\" clobbers the curses move/wmove manpage or pointer.  The curses
.\" routines are much more widely used and it is more important to
.\" support all pointer files for curses; njo and brett approve of this
.\" decision.  LW 
.\" 
.iX "integer arithmetic functions"
.iX "madd function"
.iX "msub function"
.iX "mult function"
.iX "mdiv function"
.iX "pow function"
.iX "gcd function"
.iX "invert function"
.iX "rpow function"
.iX "msqrt function"
.iX "mcmp function"
.iX "move function"
.iX "min function"
.iX "omin function"
.iX "fmin function"
.iX "m_in function"
.iX "mout function"
.iX "omout function"
.iX "fmout function"
.iX "m_out function"
.iX "sdiv function"
.iX "itom function"
These functions perform arithmetic on integers of
arbitrary length.
The integers are stored using the defined type
\*LMINT\*O.
Pointers to a
\*AMINT
can be initialized using the
\*Litom(\|)\*O
function, which sets the initial value to
\*Vn\*O.
After that, space is managed automatically by the routines.
.PP
The
\*Lmadd(\|)\*O,\*L msub(\|) \*O, and\*L mult(\|)\*O
functions
assign to
\*Vc\*O
the sum, difference, and
product, respectively, of
\*Va\*O and \*Vb\*O.
.PP
The
\*Lmdiv(\|)\*O
function
assigns to
\*Vq\*O and \*Vr\*O
the quotient and remainder obtained
from dividing
\*Va\*O by \*Vb.\*O
The
\*Lsdiv(\|)\*O
function
is like the
\*Lmdiv(\|)\*O
function
except that the divisor is a short integer
\*Vn\*O
and the remainder is placed in a short integer
whose address is given as
\*Vr\*O.
.PP
The
\*Lmsqrt(\|)\*O
function
produces the integer square root of
\*Va\*O in \*Vb\*O
and places the remainder in
\*Vr\*O.
.PP
The
\*Lrpow(\|)\*O
function
calculates in
\*Vc\*O
the value of
\*Va\*O
raised to the (``regular'' integral) power
\*Vn\*O,
while the
\*Lpow(\|)\*O
function
calculates this with a full multiple precision exponent
\*Vb\*O
and the result is reduced modulo
\*Vm\*O.
.PP
The
\*Lgcd(\|)\*O
function
returns the greatest common denominator of
\*Va\*O and \*Vb\*O in \*Vc\*O,
and the
\*Linvert(\|)\*O
function
computes
\*Vc\*O such that \*Va*c\*O mod \*Vb\*O = 1,
for
\*Va\*O and \*Vb\*O
relatively prime.
.PP
The
\*Lmcmp(\|)\*O
function
returns a negative, zero, or positive integer value when
\*Va\*O
is less than, equal to, or greater than
\*Vb\*O,
respectively.
.PP
The
\*Lmove(\|)\*O
function
copies
\*Va\*O to \*Vb\*O.
.PP
The
\*Lmin(\|)\*O and \*Lmout(\|)\*O
functions
do decimal input and output while
the
\*Lomin(\|)\*O and \*Lomout(\|)\*O
functions
do octal input and output.
More generally,
the
\*Lfmin(\|)\*O and \*Lfmout(\|)\*O
functions
do decimal input and output using file
\*Vf\*O,
and
\*Lm_in(\|)\*O and \*Lm_out\*O
do input and output with arbitrary radix
\*Vn\*O.
.PP
On input, records should have the form of
strings of digits terminated by a newline;
output records have a similar form.
.SH NOTES
.PP
Programs which use the multiple-precision arithmetic library
must be compiled with
\*L\-lmp\*O.
.iX "integer arithmetic functions"
.iX "madd function"
.iX "msub function"
.iX "mult function"
.iX "mdiv function"
.iX "pow function"
.iX "gcd function"
.iX "invert function"
.iX "rpow function"
.iX "msqrt function"
.iX "mcmp function"
.iX "move function"
.iX "min function"
.iX "omin function"
.iX "fmin function"
.iX "m_in function"
.iX "mout function"
.iX "omout function"
.iX "fmout function"
.iX "m_out function"
.iX "sdiv function"
.iX "itom function"
.EQ
delim off
.EN

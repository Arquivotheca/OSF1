.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: ndbm.3,v $ $Revision: 3.2.7.4 $ (DEC) $Date: 1994/01/15 00:11:14 $
.\"
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\" Copyright (c) 1985 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\" 
.\" @(#)ndbm.3	6.8 (Berkeley) 1/2/90
.\" 
.TH ndbm 3
.SH NAME
.PP
\*Ldbm_open\*O, \*Ldbm_close\*O, \*Ldbm_fetch\*O, \*Ldbm_store\*O, \*Ldbm_delete\*O, \*Ldbm_firstkey\*O, \*Ldbm_nextkey\*O, \*Ldbm_forder\*O, \*Ldbm_error\*O, \*Ldbm_clearerr\*O \- Database subroutines
.SH SYNOPSIS
.PP
.sS
\*L#include <ndbm.h>
.sp 0.4v
\*Ltypedef struct {
.nL
    char *\*Vdptr\*L;
.nL
    int \*Vdsize\*L;
.nL
} datum;
.sp 0.4v
\*LDBM *dbm_open(
.nL
	char *\*Vfile\*L,
.nL
	int \*Vflags\*L,
.nL
	int \*Vmode\*L );
.sp 0.4v
\*Lvoid dbm_close(
.nL
	DBM *\*Vdb\*L );
.sp 0.4v
\*Ldatum dbm_fetch(
.nL
	DBM *\*Vdb\*L,
.nL
	datum \*Vkey\*L );
.sp 0.4v
\*Lint dbm_store(
.nL
	DBM *\*Vdb\*L,
.nL
	datum \*Vkey\*L,
.nL
	datum \*Vcontent\*L,
.nL
	int \*Vflags\*L );
.sp 0.4v
\*Lint dbm_delete(
.nL
	DBM *\*Vdb\*L,
.nL
	datum \*Vkey\*L );
.sp 0.4v
\*Ldatum dbm_firstkey(
.nL
	DBM *\*Vdb\*L );
.sp 0.4v
\*Ldatum dbm_nextkey(
.nL
	DBM *\*Vdb\*L );
.sp 0.4v
\*Llong dbm_forder(
.nL
	DBM *\*Vdb\*L,
.nL
	datum \*Vkey\*L );
.sp 0.4v
\*Lint dbm_error(
.nL
	DBM *\*Vdb\*L );
.sp 0.4v
\*Lint dbm_clearerr(
.nL
	DBM *\*Vdb\*L );
.sE
.SH PARAMETERS
.PP
.VL
.LI "\*Vdb\*O"
Specifies the database.
.LI "\*Vfile\*O"
Specifies the file to be opened.
If the
\*Vfile\*O parameter refers to a symbolic link, the
\*Ldbm_open(\|)\*O function opens the file
pointed to by the symbolic link.  See the \*Lopen(\|)\*O manual page
for further details.
.LI "\*Vmode\*O"
Specifies the read, write, and execute permissions
of the file to be created (requested by the O_CREAT flag).
If the file already exists, this parameter is ignored. This parameter
is constructed by logically ORing values described in
the \*Lsys/mode.h\*O header file.  See the \*Lopen(\|)\*O manual page
for further details.
.LI "\*Vflags\*O"
Specifies one of the following
flags for opening:
.VL
.LI "DBM_INSERT"
Only insert new entries into the database.  Do not
change an existing entry with the same key.
.LI "DBM_REPLACE"
Replace an existing entry if it has the same key.
.LE
.LI "\*Vkey\*O"
Specifies the key.
.LI "\*Vcontent\*O"
Specifies a value associated with
\*Vkey\*O.
.LE
.SH DESCRIPTION
.PP
.iX "ndbm library"
.iX "dbm_open function"
.iX "dbm_close function"
.iX "dbm_fetch function"
.iX "dbm_store function"
.iX "dbm_delete, function"
.iX "dbm_firstkey function"
.iX "dbm_nextkey function"
.iX "dbm_forder function"
.iX "dbm_error function"
.iX "dbm_clearerr function"
The
\*Ldbm_open(\|)\*O,
\*Ldbm_close(\|)\*O,
\*Ldbm_fetch(\|)\*O,
\*Ldbm_store(\|)\*O,
\*Ldbm_delete(\|)\*O,
\*Ldbm_firstkey(\|)\*O,
\*Ldbm_nextkey(\|)\*O,
\*Ldbm_forder(\|)\*O,
\*Ldbm_error(\|)\*O,
and
\*Ldbm_clearerr(\|)\*O
functions maintain key/content pairs in a database.
The functions handle very large
databases (a billion blocks)
and access a keyed item in one or two file system accesses.
Arbitrary binary data, as well as normal ASCII strings, are allowed.
.PP
The database is stored in two files.
One file is a directory containing a bit map and has
\*L.dir\*O
as its suffix.
The second file contains all data and has
\*L.pag\*O
as its suffix.
.PP
Before a database can be accessed, it must be opened by the
\*Ldbm_open(\|)\*O
function.
The
\*Ldbm_open(\|)\*O
function opens (and if necessary, creates) the
\*Vfile\*L.dir\*O
and
\*Vfile\*L.pag\*O
files,
depending on the
\*Vflags\*O
parameter.
.PP
Once open, the data stored under a key is accessed by the
\*Ldbm_fetch(\|)\*O
function
and data is placed under a key by the
\*Ldbm_store(\|)\*O
function.
A key (and its associated contents) is deleted by the
\*Ldbm_delete(\|)\*O
function.
A linear pass through all keys in a database may be made,
in an (apparently) random order, by use of the
\*Ldbm_firstkey(\|)\*O
and
\*Ldbm_nextkey(\|)\*O
functions.
The
\*Ldbm_firstkey(\|)\*O
function
returns the first key in the database.
The
\*Ldbm_nextkey(\|)\*O
function
returns the next key in the database.
The order of keys presented by the
\*Ldbm_firstkey(\|)\*O
and
\*Ldbm_nextkey(\|)\*O
functions
depends on a hashing function.
The following code traverses the database:
.oS
for (key = dbm_firstkey(db); key.dptr != NULL; key = dbm_nextkey(db))
.oE
.PP
The
\*Ldbm_error(\|)\*O
function returns a nonzero
value when an error has occurred reading or writing the database.
The
\*Ldbm_clearerr(\|)\*O
function
resets the error condition on the named database.
.PP
The
\*Ldbm_forder(\|)\*O
function
returns the block number in the
\*L.pag\*O
file that the specified
key will map to.
.SH RETURN VALUES
.PP
Upon successful completion, all functions that return an
\*Lint\*O
return a value of 0 (zero).  Otherwise, a negative value is returned.
Routines that return a
\*Ldatum\*O
indicate errors with a null (0)
\*Vdptr.\*O
If the
\*Ldbm_store(\|)\*O
function is
called with a
\*Vflags\*O
value of
DBM_INSERT,
and
finds an existing entry with the same key,
it returns 1.
.\" The following section was added per the request of Neil O'Brien QAR 15087
.SH ERRORS
.PP
If any of the following conditions occurs, the
\*Ldbm_open(\|)\*O, \*Ldbm_delete(\)\*O, and \*Ldbm_store(\)\*O functions set
\*Lerrno\*O to the value that corresponds to the condition:
.VL
.LI "[ENOMEM]"
Insufficient space to allocate a buffer.
.LI "[EPERM]"
An attempt was made to store or delete a key (and its associated contents) in a
database that was opened read-only.
.LI "[ENOSPC]"
An attempt was made to store a key (and its associated contents) whose size exceeds
the page block size limit as defined by PBLKSIZE in
\*L/usr/include/ndbm.h\*O.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Ldbm\*O(3),
\*Lopen\*O(2)
.iX "ndbm library"
.iX "dbm_open function"
.iX "dbm_close function"
.iX "dbm_fetch function"
.iX "dbm_store function"
.iX "dbm_delete, function"
.iX "dbm_firstkey function"
.iX "dbm_nextkey function"
.iX "dbm_forder function"
.iX "dbm_error function"
.iX "dbm_clearerr function"
.EQ
delim off
.EN

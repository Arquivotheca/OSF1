.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: regexp.3,v $ $Revision: 3.2.5.2 $ (DEC) $Date: 1993/06/25 21:05:31 $
.\"
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.TH regexp 3
.SH NAME
.PP
\*Ladvance\*O, \*Ladvance_r\*O, \*Lcompile\*O, \*Lcompile_r\*O, \*Lstep\*O, \*Lstep_r\*O \- Regular expression compile and match routines
.SH SYNOPSIS
.PP
.\" Moved the following here from name line...grrrrrr.
.\" We will create files in Section 5 for loc1, loc2, and locs.
.\" The global variables have been deleted from the NAME line so
.\" pointer files with extension .3 are not created.
.\" #ifdef LICENSEE
.\" loc[12s] are global variables.  
.\" The links should be to *.5 not * .3
.\" #endif LICENSEE
.sS
\*L#define INIT \*Vdeclarations\*L
.nL
\*L#define GETC \*Vgetc code\*L
.nL
\*L#define PEEKC \*Vpeek code\*L
.nL
\*L#define UNGETC(\*Vc\*L) \*Vungetc code\*L
.nL
\*L#define RETURN(\*Vptr\*L) \*Vreturn code\*L
.nL
\*L#define ERROR(\*Vval\*L) \*Verror code\*L
.PP
\*L#include <regexp.h>\*O
.PP
\*Lchar *compile(
.nL
        \*Lchar *\*Vinstring\*L,
.nL
        \*Lchar *\*Vexpbuf\*L,
.nL
        \*Lchar *\*Vendbuf\*L,
.nL
        \*Lint \*Veof\*L);\*O
.PP
\*Lchar *compile_r(
.nL
        \*Lchar *\*Vinstring\*L,
.nL
        \*Lchar *\*Vexpbuf\*L,
.nL
        \*Lchar *\*Vendbuf\*L,
.nL
        \*Lint \*Veof\*L,
.nL
        \*Lstruct regexp_data *\*Vregexp_data\*L);\*O
.PP
\*Lint step(
.nL
        \*Lchar *\*Vstring\*L,
.nL
        \*Lchar *\*Vexpbuf\*L);\*O
.PP
\*Lint step_r(
.nL
        \*Lchar *\*Vstring\*L,
.nL
        \*Lchar *\*Vexpbuf\*L,
.nL
        \*Lstruct regexp_data *\*Vregexp_data\*L);\*O
.PP
\*Lint advance(
.nL
        \*Lchar *\*Vstring\*L,
.nL
        \*Lchar *\*Vexpbuf\*L);\*O
.PP
\*Lint advance_r(
.nL
        \*Lchar *\*Vstring\*L,
.nL
        \*Lchar *\*Vexpbuf\*L,
.nL
        \*Lstruct regexp_data *\*Vregexp_data\*L);\*O
.PP
\*Lextern char *loc1, *loc2, *locs;\*O
.sE
.\" Brought forward DEC OSF/1 QAR change, PEEK to PEEKC in SYNOPSIS.  LW
.SH PARAMETERS
.PP
.VL
.LI "\*Vc\*O"
Is returned by the next call to the \*LGETC(\|)\*O and \*LPEEKC(\|)\*O
macros.
.LI "\*Vptr\*O"
Specifies a pointer to the character following the last character of the
compiled regular expression.
.LI "\*Vval\*O"
Specifies an error value.
.LI "\*Vinstring\*O"
Specifies a string to be passed to the \*Lcompile(\|)\*O function.
.IP
The \*Vinstring\*O parameter is never used explicitly
by the \*Lcompile(\|)\*O function, but you can use it in your macros.
For example, you may want to pass the string containing a pattern
as the \*Vinstring\*O parameter to the \*Lcompile(\|)\*O function and
use the \*LINIT(\|)\*O macro to set a pointer to the beginning of
this string. When your macros do not use \*Vinstring\*O,
call the \*Lcompile(\|)\*O function with a value of \*L((char *) 0)\*O
for this parameter.
.LI "\*Vexpbuf\*O"
Points to a character array where the
compiled regular expression is stored.
.LI "\*Vendbuf\*O"
Points to the location that immediately
follows the character array where the compiled regular expression is
stored. When the compiled expression cannot be contained in
(\*Vendbuf-expbuf\*O) number of bytes, a call to the \*LERROR(_BIGREGEXP)\*O
macro is made (see the \*LERRORS\*O section).
.LI "\*Veof\*O"
Specifies the character that marks the end
of the regular expression. For example, in \*Led\*O this character
is usually a / (slash).
.LI "\*Vstring\*O"
Points to a NULL terminated string of characters, in the \*Lstep(\|)\*O
function, to be searched for a match.
.LI "\*Vregexp_data\*O"
Is data for the \*Lcompile_r(\|)\*O, \*Lstep_r(\|)\*O, and
\*Ladvance_r(\|)\*O functions.
.LE
.SH DESCRIPTION
.PP
.iX "advance function"
.iX "compile function"
.iX "step function"
.iX "advance_r function"
.iX "compile_r function"
.iX "step_r function"
.iX "loc1 global variable"
.iX "loc2 global variable"
.iX "locs global variable"
.iX "regular expressions"
.iX "expressions" "regular"
The \*Lcompile(\|)\*O, \*Ladvance(\|)\*O, and \*Lstep(\|)\*O
functions are used for general-purpose expression matching.
.PP
The \*Lcompile(\|)\*O
function takes a simple regular expression as
input and produces a compiled expression that can be used with the
\*Lstep(\|)\*O and \*Ladvance(\|)\*O functions.
.PP
The following six macros, used in the \*Lcompile(\|)\*O function,
must be defined before the \*L#include <regexp.h>\*O statement
in programs. The \*LGETC(\|)\*O, \*LPEEKC(\|)\*O, and
\*LUNGETC(\|)\*O macros operate on the regular expression provided as input
for the \*Lcompile(\|)\*O function.
.VL 1i
.LI "\*LINIT(\|)\*O"
The
\*LINIT(\|)\*O
macro is used for dependent \*Vdeclarations\*O and
initializations. In the \*Lregexp.h\*O header file this macro is
located right after the \*Lcompile(\|)\*O function declarations and
opening \*L{\*O (left brace). Your \*LINIT(\|)\*O \*Vdeclarations\*O must end
with a \*L;\*O (semicolon).
.IP
The \*LINIT(\|)\*O macro is frequently used to set a
register variable to point to the beginning of the regular expression,
so that this pointer can be used in declarations for \*LGETC(\|)\*O,
\*LPEEKC(\|)\*O, and \*LUNGETC(\|)\*O. Alternatively, you can use
\*LINIT(\|)\*O to declare external variables that \*LGETC(\|)\*O,
\*LPEEKC(\|)\*O, and \*LUNGETC(\|)\*O need.
.LI "\*LGETC(\|)\*O"
The \*LGETC(\|)\*O
macro returns the value of the next character (byte) in the
regular-expression pattern. Successive calls to \*LGETC(\|)\*O
return successive characters of the regular expression.
.LI "\*LPEEKC(\|)\*O"
The \*LPEEKC(\|)\*O
macro returns the next character (byte) in the regular expression.
Immediate subsequent calls to this macro return the same byte, which
is also the next character returned by the \*LGETC(\|)\*O macro.
.LI "\*LUNGETC(\*Vc\*O)\*O"
The \*LUNGETC(\|)\*O
macro causes the \*Vc\*O parameter to be returned by the next call to
the \*LGETC(\|)\*O and \*LPEEKC(\|)\*O macros. No more than one character of
pushback is ever needed because this character is guaranteed to be
the last character read by the \*LGETC(\|)\*O macro. The value of the
\*LUNGETC(\|)\*O macro is always ignored.
.LI "\*LRETURN(\*Vptr\*L)\*O"
The \*LRETURN(\|)\*O
macro is used for normal exit of the \*Lcompile(\|)\*O function.
The value of the \*Vptr\*O parameter is a pointer to the character
following the last character of the compiled regular expression.
This is useful in programs that manage memory allocation.
.LI "\*LERROR(\*Vval\*L)\*O"
The \*LERROR(\|)\*O
macro is the abnormal return from the \*Lcompile(\|)\*O
function.  A call to this macro should never return a value.
In this macro, \*Vval\*O is an error number, which is described
in the \*LERRORS\*O section of this reference page.
.LE
.PP
The \*Lstep(\|)\*O function finds the first
substring of the \*Vstring\*O parameter that matches the compiled
expression pointed to by the \*Vexpbuf\*O parameter.  When there is no
match, the \*Lstep(\|)\*O
function returns a value of 0 (zero). When there is a match, the
\*Lstep(\|)\*O function returns a nonzero value and
sets two global character pointers:
\*Lloc1\*O, which points to the first character of the substring
that matches the
pattern, and \*Lloc2\*O, which points to the character
immediately following the substring that matches the pattern.
When the regular expression matches the entire expression, \*Lloc1\*O
points to the first character of the \*Vstring\*O parameter
and \*Lloc2\*O points to
the NULL character at the end of the expression specified by the
\*Vstring\*O parameter.
.PP
The \*Lstep(\|)\*O function uses the integer
variable \*Lcircf\*O, which
is set by the \*Lcompile(\|)\*O function when the regular expression
begins with a \*L^\*O
(circumflex). When this variable is set, the \*Lstep(\|)\*O function
only tries to match the regular expression to the beginning of the
string. When you compile more than one regular expression before
executing the first one, save the value of \*Lcircf\*O for each
compiled expression and set \*Lcircf\*O to the saved value before each
call to \*Lstep(\|)\*O.
.PP
The \*Ladvance(\|)\*O
function tests whether an initial substring of the \*Vstring\*O
parameter matches the expression pointed to by the
\*Vexpbuf\*O parameter.
Using the same parameters that were passed to it, the \*Lstep(\|)\*O
function calls the \*Ladvance(\|)\*O function. The \*Lstep(\|)\*O
function increments a pointer through the \*Vstring\*O parameter
characters and calls \*Ladvance(\|)\*O until a nonzero value, which
indicates a match, is returned, or until the end of the expression
pointed to by the \*Vstring\*O parameter is reached. To
unconditionally constrain \*Vstring\*O to point to the beginning of the
expression, call the \*Ladvance(\|)\*O function directly instead of
calling \*Lstep(\|)\*O.
.PP
When the \*Ladvance(\|)\*O function encounters an \*L*\*O (asterisk) or
a \*L\e{\|\e}\*O sequence in the regular expression, it advances its
pointer to the string to be matched as far as possible and
recursively calls itself, trying to match
the remainder of the regular expression. As long as there is no match,
the \*Ladvance(\|)\*O function backs up along the string until the
function finds a
match or reaches the point in the string where the initial match with
the \*L*\*O or \*L\e{\|\e}\*O character occurred.
.PP
It is sometimes desirable to stop this backing up before the initial
pointer position in the string is reached. When the \*Llocs\*O global
character pointer is matched with the character at the pointer position in the
string during the backing-up process, the \*Ladvance(\|)\*O
function breaks out of the recursive loop that backs up and returns
the value 0 (zero).
.PP
The \*Lcompile_r(\|)\*O, \*Lstep_r(\|)\*O, and \*Ladvance_r(\|)\*O
functions are the reentrant versions of the \*Lcompile(\|)\*O,
\*Lstep(\|)\*O, and \*Ladvance(\|)\*O functions.  The
\*Lregexp.h\*O header file defines the
\*Lregexp_data\*O structure.
.SH EXAMPLES
.PP
The following is an example of the regular expression macros and
calls from the \*Lgrep\*O command:
.PP
.oS
#define INIT                 register char *sp=instring;
#define GETC()               (*sp++)
#define PEEKC()              (*sp)
#define UNGETC(c)            (--sp)
#define RETURN(c)            return;
#define ERROR(c)             regerr()

#include <regexp.h>
        \&. . .
compile (patstr, expbuf, &expbuf[ESIZE], '\e0');
        \&. . .
if (step (linebuf, expbuf))
        succeed( );
        \&. . .
.oE
.SH NOTES
.PP
.\" .zA "defect, 7803, R1.1.2, updated note for R1.1.2"
This interface has been deprecated in favor of the \*Lregcomp(\|)\*O
interface specified by POSIX and
.\" .zA "defect, 8435, R1.2, XPG4 terminology cleanup"
XPG4.
.\" .zZ "defect, 8435, R1.2, XPG4 terminology cleanup"
The \*Lregexp\*O interface is
provided to support System V applications.  Traditional BSD
applications use different functions for regular expression
handling.  See the \*Lre_comp\*O(3) and \*Lre_exec\*O(3) reference pages.
.\" .zZ "defect, 7803, R1.1.2, updated note for R1.1.2"
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Trial use.
.LE
.SH RETURN VALUES
.PP
Upon successful completion, the \*Lcompile(\|)\*O function calls the
\*LRETURN(\|)\*O macro. Upon failure, this function calls the \*LERROR(\|)\*O
macro.
.PP
Whenever a successful match occurs, the \*Lstep(\|)\*O and \*Ladvance(\|)\*O
functions return a nonzero value. Upon failure, these functions return
a value of 0 (zero).
.PP
The \*Lcompile_r(\|)\*O, \*Lstep_r(\|)\*O, and \*Ladvance_r(\|)\*O
functions return the same values as their non-reentrant counterparts.
.SH ERRORS
.PP
If any of the following conditions occurs, the \*Lcompile(\|)\*O or
\*Lcompile_r(\|)\*O functions call the \*LERROR(\|)\*O macro
with an error value as its argument:
.VL
.LI "[_BIGRANGE]"
The range endpoint is too large.
.LI "[_BADNUM]"
A bad number was received.
.LI "[_BIGDIGIT]"
The number in \*L\e\|\*Vdigit\*O is out of range.
.LI "[_NODELIM]"
There is an illegal or missing delimiter.
.LI "[_NOMATCHSTR]"
There is no remembered search string.
.LI "[_BADPAREN]"
The use of a pair of \*L\e(\*O (backslash left parenthesis) and \*L\e)\*O
(backslash right parenthesis) is unbalanced.
.LI "[_BIGPAREN]"
There are too many \*L\e(\*O (backslash left parenthesis) \*L\e)\*O
(backslash right parenthesis) pairs (maximum is 9).
.LI "[_SYNBRACEFMT]"
More than two numbers are given in the \*L\e{\*O (backslash left
brace) and \*L\e}\*O (backslash right brace) pair.
.LI "[_NOCLOSEBRACE]"
A } (right brace) character was expected after a \*L\e\*O (backslash).
.LI "[_SEMBRACEFMT]"
The first number exceeds the second in the \*L\e{\*O (backslash left
brace) and \*L\e}\*O (backslash right brace) pair.
.LI "[_BADBRACKET]"
There is a \*L[ ]\*O (square bracket) pair imbalance.
.LI "[_BIGREGEXP]"
There is a regular expression overflow.
.LI "[_ABNORMAL]"
There was an unknown error.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Lctype\*O(3),
\*Lre_comp\*O(3).
.PP
Commands:
\*Led\*O(1),
\*Lsed\*O(1),
\*Lgrep\*O(1).
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: ldr_xload.3,v $ $Revision: 3.2.7.2 $ (DEC) $Date: 1993/12/06 21:15:20 $
.\" 
...\"
...\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
...\" ALL RIGHTS RESERVED
...\"
...\"
...\"
.TH ldr_xload 3
.SH NAME
\*Lldr_xload\*O -  Loads a module in another process and returns the module ID
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.iX "ldr_xload function"
.PP
.iX "loader module" "loading in another process"
.iX "loader" "loading module in another process"
.sS
\*L#include <sys/types.h>\*O
.nL
\*L#include <loader.h>\*O
.nL
\*Lint\*O
\*Lldr_xload\*O(
.nL
	\*Lldr_process_t\*O\*Vprocess\*O,
.nL
	\*Lchar\*O \*V*file_pathname\*O,
.nL
	\*Lldr_load_flags_t\*O \*Vload_flags\*O,
.nL
	\*Lldr_module_t\*O \*V*mod_id_ptr\*O);
.sE
.SH PARAMETERS
.PP
...\"from TP .5i"
.VL
.LI "\*Vprocess\*O"
Specifies the process into whose address space the object module is to be loaded.
...\"from TP "
.LI "\*Vfile_pathname\*O"
Specifies the pathname of the object module.
...\"from TP "
.LI "\*Vload_flags\*O"
Specifies options on the load.  Valid values are:
.wH O.RS  Can not be used in nested lists
...\"from TP 1i"
.VL
.LI "LDR_WIRE"
Wire the module in physical memory so that it will not be paged out.
...\"from TP "
.LI "LDR_NOFLAGS"
No flags are specified.
...\"from TP "
.LI "LDR_NOUNREFS"
Allow no unresolved references after resolving shared library references.
...\"from TP "
.LI "LDR_PREXIST"
The module must have been already loaded.
...\"from TP "
.LI "LDR_NOPREXIST"
Return an error if the module is already loaded.
.wH O.RE
...\"from TP .5i"
.LE
.LI "\*Vmod_id_ptr\*O"
Points to a variable in which the module ID of the loaded module is
returned.
.LE
.SH DESCRIPTION
.PP
The
\*Lldr_xload(\|)\*O
function loads the specified object module into the virtual
address space of the specified process.  It can be used to load both
relocatable and absolute modules.
.PP
If the object module is already loaded, the function does not load it
again, but it does return its ID.  Using the
LDR_NOPREXIST load flag forces an error if the module is
already loaded.
.PP
To obtain the unique identifier for the current process, use the
following call:
.rS
	\*Lldr_process_t ldr_my_process(\|);\*O
.rE
To obtain the unique identifier for the kernel, use the following call:
.rS
	\*Lldr_process_t ldr_kernel_process(\|);\*O
.rE
.SH NOTES
.PP
The loader assigns a unique identifier to each module when
.PP
it is loaded.  Module IDs provide a convenient way of referencing
loaded modules in other loader-related functions.
.PP
The loader
can link unresolved references in dynamically loaded kernel modules,
relocate the code as necessary, and call an initialization entry
point.  The loader, however, cannot automatically load further modules
to resolve unresolved references.  Each kernel module must link
completely against symbols exported by the kernel or by previously
loaded modules.  Circular dependencies are not allowed for dynamically
loaded kernel modules.
.PP
This function currently works only for the current process and for the
kernel.
.SH RETURN VALUES
.PP
Upon successful completion, the module is loaded and
0 (zero)
is returned.  Otherwise,
a negative value is returned and
\*Lerrno\*O
is set to indicate the error.
.SH ERRORS
.PP
If the
\*Lldr_xload(\|)\*O
function fails,
\*Lerrno\*O
may be set to one of the following values:
...\"from TP 1i"
.VL 1i
.LI "[ENOEXEC]"
The
\*Vfile_pathname\*O
parameter
specifies a file with an unrecognizable object file format.
...\"from TP "
.LI "[EINVAL]"
The
\*Vload_flags\*O
parameter
specified an invalid option or an invalid
\*Lldr_module_t\*O
has been specified.
...\"from TP 1i"
.LI "[EEXIST]"
The LDR_NOPREXIST load flag was specified and the module was already loaded.
...\"from TP 1i"
.LI "[ESRCH]"
The process identifier is invalid.
...\"from TP 1i"
.LI "[ENOPKG]"
One or more unresolved package names were found.
...\"from TP 1i"
.LI "[ENOSYM]"
One or more unresolved symbol names were found.
...\"from TP 1i"
.LI "[EDUPPKG]"
The loaded module exported a package which duplicated the package name
of a module already loaded in the same process.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Lldr_xunload\*O(3),
\*Lldr_xentry\*O(3),
\*Lldr_xlookup_package\*O(3)
.\" not supported for alpha \*Lload\*O(3)
.iX "ldr_xload function"
.EQ
delim off
.EN

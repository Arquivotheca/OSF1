.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: varargs.3,v $ $Revision: 3.2.6.3 $ (DEC) $Date: 1993/12/16 17:03:56 $
.\" 
.\"
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\"
.\"
.\" Copyright (c) 1990, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\"
.\"build rmifdef tbl eqn
.TH varargs 3
.SH NAME
\*Lvarargs\*O, \*Lva_arg\*O, \*Lva_start\*O, \*Lva_end\*O \- Handles a variable\(hylength parameter list
.SH LIBRARY
.PP
\f1Standard C Library (\f3libc.a\f1)
.SH SYNOPSIS
.PP
.iX "varargs function"
.iX "variable length parameters"
.iX "parameters" "variable length"
.\" Begin Digital-specific information CORRECTION
.\" Changed <stdargs.h> to <varargs.h> per QAR 6857.
.\" End Digital-specific information CORRECTION
.sS
\*L#include <varargs.h>\*O
.PP
\*Lva_alist\*O
.nL
\*Lva_dcl\*O
.nL
\*Lvoid va_start (
.nL
	va_alist \*Vargp\*L );\*O
.nL
\*Ltype va_arg (
.nL
	va_alist \*Vargp\*L,
.nL
	\*Vtype\*L );\*O
.nL
\*Lvoid va_end (
.nL
	va_alist \*Vargp\*L );\*O
.sE
.SH PARAMETERS
.PP
.TP
\f2argp
\f1Specifies a variable that the \f3varargs\f1 macros
use to keep track of the current location in the parameter list. Do
not modify this variable.
.TP
\f2type
\f1Specifies the type to which the expected argument
will be converted when passed as an argument. In C, arguments that
are char or short should be accessed as int; unsigned char or short
are converted to unsigned int, and float arguments are converted to
double. Different types can be mixed, but it is up to the routine
to know what type of argument is expected, since it cannot be determined
at runtime.
.sp
.ne 3i
.SH DESCRIPTION
.PP
The \f3varargs\f1 set of macros allows you to write portable
functions that accept a variable number of parameters. Subroutines
that have variable\(hylength parameter lists (such as the  \f3printf(\|)\f1
function), but that do not use the \f3varargs\f1 macros, are
inherently nonportable because different systems use different parameter-passing
conventions.
.PP
The
.B varargs
macros are as follows:
.TP
\f3va_alist(\|)
\f1Defines the type of the variable used to traverse
the list.
.TP
\f3va_start(\|)
\f1Initializes \f2argp\f1 to point to the beginning
of the list.
The \f3va_start(\|)\f1 macro will be invoked
before any access to the unnamed arguments.
.TP
\f3va_argp(\|)
\f1A variable that the \f3varargs\f1 macros use
to keep track of the current location in the parameter list.  Do not
modify this variable.
.TP
\f3va_arg(\|)
\f1Returns the next parameter in the list pointed
to by \f2argp\f1.
.TP
\f3va_end(\|)
\f1Cleans up at the end.
.PP
Your function can traverse, or scan, the parameter list more
than once. Start each traversal with a call to \f3va_start(\|)\f1 and
end it with \f3va_end(\|)\f1.
.SH EXAMPLE
.PP
\f1The following example is a possible implementation of the \f3execl(\|)\f1
function:
.PP
.oS
#include <varargs.h>
.br
#define MAXargS 100
.br
/*
.br
**  execl is called by
.br
**  execl(file, arg1, arg2,\ .\ .\ .\ , (char *) 0);
.br
*/
.br
execl(va_alist)
.br
   va_dcl
.br
{  va_list ap;
.br
   char *file;
.br
   char *args[MAXargS];
.br
   int argno = 0;
.br
   va_start(ap);
.br
   file = va_arg(ap, char *);
.br
   while ((args[argno++] = va_arg(ap, char *)) != (char *) 0)
.br
      ;   /* Empty loop body */
.br
   va_end(ap);
.br
   return (execv(file, args));
.br
}
.oE
.sp
.ne 3i
.\" Begin Digital-specific information CORRECTION
.\" Changed "va_alist ap;" to "va_list ap;" in EXAMPLE per QAR 3796.
.\" End Digital-specific information CORRECTION
.SH NOTES
.PP
The
calling routine is responsible for specifying
the number of parameters because it is not always possible to determine
this from the stack frame. For example, the \f3execl(\|)\f1
function is passed a null
pointer to signal the end of the list. The \f3printf(\|)\f1 function
determines the number of parameters from its \f2fmt\f1 parameter.
.PP
.BR "AES Support Level:"
Temporary use
.SH RELATED INFORMATION
.PP
Functions:
\*Lexec\*O(2), \*Lprintf\*O(3), \*Lvprintf\*O(3)
.iX "varargs function"
.EQ
delim off
.EN

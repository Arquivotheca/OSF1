.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: lsearch.3,v $ $Revision: 3.2.5.3 $ (DEC) $Date: 1993/11/29 20:44:28 $
.\"
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.TH lsearch 3
.SH NAME
.PP
\*Llsearch\*O, \*Llfind\*O \- Performs a linear search and update
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <search.h>
.PP
\*Lvoid *lsearch(
.nL
        \*Lconst void\*O *\*Vkey\*L,
.nL
.\" .zA "defect, 7468, R1.1.2, Removed const"
        \*Lvoid *\*Vbase\*L,
.\" .zZ "defect, 7468, R1.1.2, Removed const"
.nL
        \*Lsize_t *\*Vnelp\*L,
.nL
        \*Lsize_t \*Vwidth\*L,
.nL
        \*Lint (*\*Vcompar\*L) (const void *, const void *)\|);\*O
.PP
\*Lvoid *lfind(
.nL
        \*Lconst void *\*Vkey\*L,
.nL
        \*Lconst void *\*Vbase\*L,
.nL
        \*Lsize_t *\*Vnelp\*L,
.nL
        \*Lsize_t \*Vwidth\*L,
.nL
        \*Lint (*\*Vcompar\*L) (const void *, const void *)\|);\*O
.sE
.SH PARAMETERS
.PP
.VL
.LI "\*Vkey\*O"
Points to an entry containing
the key that specifies the entry to be searched for in the table.
.LI "\*Vbase\*O"
Points to the first entry in the table to be searched.
.LI "\*Vnelp\*O"
Points to an integer that specifies the number of entries
in the table to be searched. This integer is incremented
whenever an entry is added to the table.
.LI "\*Vwidth\*O"
Specifies the size of each entry, in bytes.
.LI "\*Vcompar\*O"
Points to the user-specified
function to be used for comparing two table entries
(\*Lstrcmp(\|)\*O, for example).
This function must return 0 (zero) when called with arguments that
point to entries whose keys compare equal, and nonzero otherwise.
.LE
.SH DESCRIPTION
.PP
.iX "lsearch function"
.iX "lfind function"
.iX "table" "performing linear search and update"
.iX "linear search" "of table"
The \*Llsearch(\|)\*O function performs a linear search of a table.
This function returns a pointer into a table indicating where
a specified key is located in the table.
When the key is not found in the table, the function adds the
key to the end of the table.
Free space must be available at the end of the table, or other program
information may be corrupted.
.PP
The \*Llfind(\|)\*O function is similar to the \*Llsearch(\|)\*O
function, except that when a key is not found in a table, the
\*Llfind(\|)\*O function does not add an entry
for the key to the table. In this case, \*Llfind(\|)\*O
returns a null pointer.
.SH NOTES
.PP
The \*Llsearch(\|)\*O function is reentrant, but care should be
taken to ensure that the function supplied as argument \*Lcompar\*O
is also reentrant.
.PP
The comparison function need not compare every byte; therefore,
the table entries can contain arbitrary data in addition to the values
undergoing comparison.
.PP
.VL 1.5i
.LI "\*LAES Support Level\*O"
Trial use.
.LE
.SH RETURN VALUES
.PP
If an entry in the table matches the key, both the
\*Llsearch(\|)\*O and \*Llfind(\|)\*O functions return a pointer
to the entry's location in the table. Otherwise, the \*Llfind(\|)\*O function
returns a null pointer, and the \*Llsearch(\|)\*O function
returns a pointer to the location of the newly added table entry.
.SH RELATED INFORMATION
.PP
Functions:
\*Lbsearch\*O(3),
\*Lhsearch\*O(3),
\*Ltsearch\*O(3),
\*Lqsort\*O(3).
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: XmDrawnButton.3X,v $ $Revision: 3.2.4.4 $ (DEC) $Date: 1993/10/25 19:07:17 $
.\"
.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **
.TH XmDrawnButton 3X "" "" "" "OSF/Motif"
.SH NAME
\*LXmDrawnButton\*O \- The DrawnButton widget class
.SH SYNOPSIS
.sS
.iS
\&#include <Xm/DrawnB.h>
.iE
.sE
.SH DESCRIPTION
.iX "XmDrawnButton"
.iX "widget class" "DrawnButton"
The DrawnButton widget consists of an empty widget window surrounded by a
shadow border.  It provides the application developer with a graphics area
that can have PushButton input semantics.
.PP 
Callback types are defined for widget exposure and widget resize to allow the
application to redraw or reposition its graphics.  If the DrawnButton
widget has a highlight and shadow thickness, the application should not draw
in that area.
To avoid drawing in the highlight and
shadow area, create the graphics context with
a clipping rectangle for drawing in the widget.
The clipping rectangle should
take into account the size of the widget's highlight thickness and
shadow.
.SS "Classes"
DrawnButton inherits behavior
and resources from \*LCore\*O, \*LXmPrimitive\*O, and
\*LXmLabel\*O Classes.
.PP 
The class pointer is \*LxmDrawnButtonWidgetClass\*O.
.PP 
The class name is \*LXmDrawnButton\*O.
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \*LXmN\*O or
\*LXmC\*O prefix and use the remaining letters.  To specify one of the defined
values for a resource in a .Xdefaults file, remove the \*LXm\*O prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (C),
set by using \*LXtSetValues\*O (S),
retrieved by using \*LXtGetValues\*O (G), or is not applicable (N/A).
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmDrawnButton Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNactivateCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNarmCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNdisarmCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNexposeCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNmultiClick	dynamic	CSG
\ \ \ \ \ \ XmCMultiClick	\ \ \ \ \ \ \ unsigned char
_
XmNpushButtonEnabled	False	CSG
\ \ \ \ \ \ XmCPushButtonEnabled	\ \ \ \ \ \ \ Boolean
_
XmNresizeCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNshadowType	XmSHADOW_ETCHED_IN	CSG
\ \ \ \ \ \ XmCShadowType	\ \ \ \ \ \ \ unsigned char
_
.TE
.\" NROFF HACK END
.VL  
.LI "\*LXmNactivateCallback\*O"
Specifies the list of callbacks that is called
when the widget becomes selected.
The reason sent by the callback is \*LXmCR_ACTIVATE\*O.
.LI "\*LXmNarmCallback\*O"
Specifies the list of callbacks that is called
when the widget becomes armed.
The reason sent by the callback is \*LXmCR_ARM\*O.
.LI "\*LXmNdisarmCallback\*O"
Specifies the list of callbacks that is called
when the widget becomes disarmed.
The reason sent by the callback is \*LXmCR_DISARM\*O.
.nL
.ne 6
.LI "\*LXmNexposeCallback\*O"
Specifies the list of callbacks that is called
when the widget receives an exposure event.
The reason sent by the callback is \*LXmCR_EXPOSE\*O.
.LI "\*LXmNmultiClick\*O"
If a button click is followed by another button click within the time
span specified by the display's multi-click time, and this resource is
set to \*LXmMULTICLICK_DISCARD\*O, do not process the second click.
If this resource is set to \*LXmMULTICLICK_KEEP\*O, process the event
and increment \*Vclick_count\*O in the callback structure.
When the button is not in a menu, the default value is
\*LXmMULTICLICK_KEEP\*O.
.LI "\*LXmNpushButtonEnabled\*O"
Enables or disables the three-dimensional shadow drawing as in
PushButton.
.LI "\*LXmNresizeCallback\*O"
Specifies the list of callbacks that is called
when the widget receives a resize event.
The reason sent by the callback is \*LXmCR_RESIZE\*O.  The event
returned for this callback is NULL.
.LI "\*LXmNshadowType\*O"
Describes the drawing style for the DrawnButton.  This resource can have
the following values:
.wH .rS 
.ML
.LI
\*LXmSHADOW_IN\*O\(emdraws the DrawnButton so that the shadow appears
inset.  This means that the bottom shadow visuals and top shadow visuals
are reversed.
.LI
\*LXmSHADOW_OUT\*O\(emdraws the DrawnButton
so that the shadow appears outset.
.nL
.ne 30
.LI
\*LXmSHADOW_ETCHED_IN\*O\(emdraws the DrawnButton using a double line.  This
gives the effect of a line etched into the window.  The thickness of the
double line is equal to the value of \*LXmNshadowThickness\*O.
.LI
\*LXmSHADOW_ETCHED_OUT\*O\(emdraws the DrawnButton using a double line.  This
gives the effect of a line coming out of the window.  The thickness of the
double line is equal to the value of \*LXmNshadowThickness\*O.
.LE 
.wH .rE
.LE 
.SS "Inherited Resources"
DrawnButton inherits behavior and resources from the following
superclasses.  For a complete description of each resource, refer to the
man page for that superclass.
.PP
.wH .in 0 
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmLabel Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNaccelerator	NULL	N/A
\ \ \ \ \ \ XmCAccelerator	\ \ \ \ \ \ \ String
_
XmNacceleratorText	NULL	N/A
\ \ \ \ \ \ XmCAcceleratorText	\ \ \ \ \ \ \ XmString
_
XmNalignment	dynamic	CSG
\ \ \ \ \ \ XmCAlignment	\ \ \ \ \ \ \ unsigned char
_
XmNfontList	dynamic	CSG
\ \ \ \ \ \ XmCFontList	\ \ \ \ \ \ \ XmFontList
_
XmNlabelInsensitivePixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCLabelInsensitivePixmap	\ \ \ \ \ \ \ Pixmap
_
XmNlabelPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCLabelPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNlabelString	"\e0"	CSG
\ \ \ \ \ \ XmCXmString	\ \ \ \ \ \ \ XmString
_
XmNlabelType	XmSTRING	CSG
\ \ \ \ \ \ XmCLabelType	\ \ \ \ \ \ \ unsigned char
_
XmNmarginBottom	0	CSG
\ \ \ \ \ \ XmCMarginBottom	\ \ \ \ \ \ \ Dimension
_
XmNmarginHeight	2	CSG
\ \ \ \ \ \ XmCMarginHeight	\ \ \ \ \ \ \ Dimension
_
XmNmarginLeft	0	CSG
\ \ \ \ \ \ XmCMarginLeft	\ \ \ \ \ \ \ Dimension
_
XmNmarginRight	0	CSG
\ \ \ \ \ \ XmCMarginRight	\ \ \ \ \ \ \ Dimension
_
XmNmarginTop	0	CSG
\ \ \ \ \ \ XmCMarginTop	\ \ \ \ \ \ \ Dimension
_
XmNmarginWidth	2	CSG
\ \ \ \ \ \ XmCMarginWidth	\ \ \ \ \ \ \ Dimension
_
.wH .tH
XmNmnemonic	NULL	N/A
\ \ \ \ \ \ XmCMnemonic	\ \ \ \ \ \ \ KeySym
_
XmNmnemonicCharSet	XmFONTLIST_DEFAULT_TAG	N/A
\ \ \ \ \ \ XmCMnemonicCharSet	\ \ \ \ \ \ \ String
_
XmNrecomputeSize	True	CSG
\ \ \ \ \ \ XmCRecomputeSize	\ \ \ \ \ \ \ Boolean
_
XmNstringDirection	dynamic	CSG
\ \ \ \ \ \ XmCStringDirection	\ \ \ \ \ \ \ XmStringDirection
_
.TE
.\" NROFF HACK END
.wH .in  
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmPrimitive Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNbottomShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCBottomShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNbottomShadowPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCBottomShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNforeground	dynamic	CSG
\ \ \ \ \ \ XmCForeground	\ \ \ \ \ \ \ Pixel
_
XmNhelpCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNhighlightColor	dynamic	CSG
\ \ \ \ \ \ XmCHighlightColor	\ \ \ \ \ \ \ Pixel
_
XmNhighlightOnEnter	False	CSG
\ \ \ \ \ \ XmCHighlightOnEnter	\ \ \ \ \ \ \ Boolean
_
XmNhighlightPixmap	dynamic	CSG
\ \ \ \ \ \ XmCHighlightPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNhighlightThickness	2	CSG
\ \ \ \ \ \ XmCHighlightThickness	\ \ \ \ \ \ \ Dimension
_
.wH .tH
XmNnavigationType	XmNONE	CSG
\ \ \ \ \ \ XmCNavigationType	\ \ \ \ \ \ \ XmNavigationType
_
XmNshadowThickness	2	CSG
\ \ \ \ \ \ XmCShadowThickness	\ \ \ \ \ \ \ Dimension
_
XmNtopShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNtopShadowPixmap	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNtraversalOn	True	CSG
\ \ \ \ \ \ XmCTraversalOn	\ \ \ \ \ \ \ Boolean
_
XmNunitType	dynamic	CSG
\ \ \ \ \ \ XmCUnitType	\ \ \ \ \ \ \ unsigned char
_
XmNuserData	NULL	CSG
\ \ \ \ \ \ XmCUserData	\ \ \ \ \ \ \ XtPointer
_
.TE
.\" NROFF HACK END
.PP
.wH .in 0 
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Core Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNaccelerators	dynamic	CSG
\ \ \ \ \ \ XmCAccelerators	\ \ \ \ \ \ \ XtAccelerators
_
XmNancestorSensitive	dynamic	G
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNbackground	dynamic	CSG
\ \ \ \ \ \ XmCBackground	\ \ \ \ \ \ \ Pixel
_
XmNbackgroundPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderColor	XtDefaultForeground	CSG
\ \ \ \ \ \ XmCBorderColor	\ \ \ \ \ \ \ Pixel
_
XmNborderPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderWidth	0	CSG
\ \ \ \ \ \ XmCBorderWidth	\ \ \ \ \ \ \ Dimension
_
XmNcolormap	dynamic	CG
\ \ \ \ \ \ XmCColormap	\ \ \ \ \ \ \ Colormap
_
XmNdepth	dynamic	CG
\ \ \ \ \ \ XmCDepth	\ \ \ \ \ \ \ int
_
XmNdestroyCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNheight	dynamic	CSG
\ \ \ \ \ \ XmCHeight	\ \ \ \ \ \ \ Dimension
_
XmNinitialResourcesPersistent	True	C
\ \ \ \ \ \ XmCInitialResourcesPersistent	\ \ \ \ \ \ \ Boolean
_
XmNmappedWhenManaged	True	CSG
\ \ \ \ \ \ XmCMappedWhenManaged	\ \ \ \ \ \ \ Boolean
_
XmNscreen	dynamic	CG
\ \ \ \ \ \ XmCScreen	\ \ \ \ \ \ \ Screen *
_
.wH .tH
XmNsensitive	True	CSG
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNtranslations	dynamic	CSG
\ \ \ \ \ \ XmCTranslations	\ \ \ \ \ \ \ XtTranslations
_
XmNwidth	dynamic	CSG
\ \ \ \ \ \ XmCWidth	\ \ \ \ \ \ \ Dimension
_
XmNx	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
XmNy	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
.TE
.\" NROFF HACK END
.wH .in  
.SS "Callback Information"
A pointer to the following structure is passed to each callback:
.sS
.iS
.ta .25i 1.1i
typedef struct
{
	int	\*Vreason\*L;
	XEvent	\*V* event\*L;
	Window	\*Vwindow\*L;
	int	\*Vclick_count\*L;
} XmDrawnButtonCallbackStruct;
.iE
.sE
.wH .fi
.VL .75i 
.LI "\*Vreason\*O"
Indicates why the callback was invoked.
.LI "\*Vevent\*O"
Points to the \*LXEvent\*O that triggered the callback.
This is  NULL for \*LXmNresizeCallback\*O.
.nL
.ne 15
.LI "\*Vwindow\*O"
Is set to the window ID in which the event occurred.
.LI "\*Vclick_count\*O"
Contains the number of clicks in the last multiclick sequence
if the \*LXmNmultiClick\*O resource is set to \*LXmMULTICLICK_KEEP\*O,
otherwise it contains \*L1\*O.
The activate callback is invoked for each click if \*LXmNmultiClick\*O
is set to \*LXmMULTICLICK_KEEP\*O.
.LE 
.SS "Translations"
XmDrawnButton includes translations from Primitive.
Additional XmDrawnButton translations are listed below.
These translations may not directly correspond to a
translation table.
.iS
.ta 1.5i
BSelect Press:	Arm()
BSelect Click:	Activate()
	Disarm()
BSelect Release:	Activate()
	Disarm()
BSelect Press 2+:	MultiArm()
BSelect Release 2+:	MultiActivate()
KSelect:	ArmAndActivate()
KHelp:	Help()
.wH .fi
.iE
.nL
.ne 30
.SS "Action Routines"
The XmDrawnButton action routines are described below:
.VL  
.LI "\*LActivate()\*O:"
If \*LXmNpushButtonEnabled\*O is True, redraws the shadow in the
unselected state; otherwise, redraws the shadow according to
\*LXmNshadowType\*O.
.\"Calls the \*LXmNexposeCallback\*O callbacks, then redraws the label.
If the pointer is within the DrawnButton, calls the
\*LXmNactivateCallback\*O callbacks.
.LI "\*LArm()\*O:"
If \*LXmNpushButtonEnabled\*O is True, redraws the shadow in the
selected state; otherwise, redraws the shadow according to
\*LXmNshadowType\*O.
.\"Calls the \*LXmNexposeCallback\*O callbacks, then redraws the label.
Calls the callbacks for \*LXmNarmCallback\*O.
.LI "\*LArmAndActivate()\*O:"
If \*LXmNpushButtonEnabled\*O is True, redraws the shadow in the
selected state; otherwise, redraws the shadow according to
\*LXmNshadowType\*O.
.\"Calls the \*LXmNexposeCallback\*O callbacks, then redraws the label.
Calls the callbacks for \*LXmNarmCallback\*O.
.PP
Arranges for the following to happen, either immediately or at a later
time:
If \*LXmNpushButtonEnabled\*O is True, the shadow is redrawn in the
unselected state; otherwise, the shadow is redrawn according to
\*LXmNshadowType\*O.
.\"Calls the \*LXmNexposeCallback\*O callbacks, then redraws the label.
The callbacks for \*LXmNactivateCallback\*O and \*LXmNdisarmCallback\*O
are called.
.LI "\*LDisarm()\*O:"
Marks the DrawnButton as unselected and calls the callbacks for
\*LXmNdisarmCallback\*O.
.LI "\*LHelp()\*O:"
Calls the callbacks for \*LXmNhelpCallback\*O if any exist.
If there are no help callbacks for this widget, this action calls the
help callbacks for the nearest ancestor that has them.
.LI "\*LMultiActivate()\*O:"
If \*LXmNmultiClick\*O is \*LXmMULTICLICK_DISCARD\*O, this action does
nothing.
.PP
If \*LXmNmultiClick\*O is \*LXmMULTICLICK_KEEP\*O, this action does the
following:
Increments \*Vclick_count\*O in the callback structure.
If \*LXmNpushButtonEnabled\*O is True, redraws the shadow in the
unselected state; otherwise, redraws the shadow according to
\*LXmNshadowType\*O.
.\"Calls the \*LXmNexposeCallback\*O callbacks, then redraws the label.
If the pointer is within the DrawnButton,  calls the
\*LXmNactivateCallback\*O callbacks.
Calls the callbacks for \*LXmNdisarmCallback\*O.
.nL
.ne 30
.LI "\*LMultiArm()\*O:"
If \*LXmNmultiClick\*O is \*LXmMULTICLICK_DISCARD\*O, this action does
nothing.
.PP
If \*LXmNmultiClick\*O is \*LXmMULTICLICK_KEEP\*O, this action does the
following:
If \*LXmNpushButtonEnabled\*O is True, redraws the shadow in the
selected state; otherwise, redraws the shadow according to
\*LXmNshadowType\*O.
.\"Calls the \*LXmNexposeCallback\*O callbacks, then redraws the label.
Calls the callbacks for \*LXmNarmCallback\*O.
.LE
.SS "Additional Behavior"
This widget has the additional behavior described below:
.VL  
.LI "\*L<EnterWindow>\*O:"
Draws the shadow in its selected state if \*LXmNpushButtonEnabled\*O is
True and if the cursor leaves and re-enters the window while \*LBSelect\*O is
pressed.
.LI "\*L<LeaveWindow>\*O:"
Draws the shadow in its unselected state if \*LXmNpushButtonEnabled\*O
is True and if the cursor leaves the window while \*LBSelect\*O is pressed.
.LE
.SS "Virtual Bindings"
The bindings for virtual keys are vendor specific.
For information about bindings for virtual buttons and keys, see \*LVirtualBindings(3X)\*O.
.SH RELATED INFORMATION
.na
\*LCore(3X)\*O, \*LXmCreateDrawnButton\*O, \*LXmLabel(3X)\*O,
\*LXmPrimitive(3X)\*O, \*LXmPushButton\*O, and \*LXmSeparator(3X)\*O.
.ad
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: XmManager.3X,v $ $Revision: 3.2.4.5 $ (DEC) $Date: 1993/12/14 21:20:59 $
.\"
.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **
.TH XmManager 3X "" "" "" "OSF/Motif"
.SH NAME
\*LXmManager\*O \- The Manager widget class
.SH SYNOPSIS
.sS
.iS
\&#include <Xm/Xm.h>
.iE
.sE
.SH DESCRIPTION
.iX "XmManager"
.iX "widget class" "Manager"
Manager is a widget class used as a supporting superclass for other
widget classes.  It supports the
visual resources, graphics contexts, and traversal resources necessary for the
graphics and traversal mechanisms.
.nL
.ne 12
.SS "Classes"
Manager inherits behavior and resources from \*LCore\*O,
\*LComposite\*O, and \*LConstraint\*O classes.
.PP 
The class pointer is \*LxmManagerWidgetClass\*O.
.PP 
The class name is \*LXmManager\*O.
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \*LXmN\*O or
\*LXmC\*O prefix and use the remaining letters.  To specify one of the defined
values for a resource in a .Xdefaults file, remove the \*LXm\*O prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (C),
set by using \*LXtSetValues\*O (S),
retrieved by using \*LXtGetValues\*O (G), or is not applicable (N/A).
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmManager Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNbottomShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCBottomShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNbottomShadowPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCBottomShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNforeground	dynamic	CSG
\ \ \ \ \ \ XmCForeground	\ \ \ \ \ \ \ Pixel
_
XmNhelpCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNhighlightColor	dynamic	CSG
\ \ \ \ \ \ XmCHighlightColor	\ \ \ \ \ \ \ Pixel
_
XmNhighlightPixmap	dynamic	CSG
\ \ \ \ \ \ XmCHighlightPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNinitialFocus	NULL	CSG
\ \ \ \ \ \ XmCInitialFocus	\ \ \ \ \ \ \ Widget
_
XmNnavigationType	XmTAB_GROUP	CSG
\ \ \ \ \ \ XmCNavigationType	\ \ \ \ \ \ \ XmNavigationType
_
XmNshadowThickness	0	CSG
\ \ \ \ \ \ XmCShadowThickness	\ \ \ \ \ \ \ Dimension
_
XmNstringDirection	dynamic	CG
\ \ \ \ \ \ XmCStringDirection	\ \ \ \ \ \ \ XmStringDirection
_
XmNtopShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNtopShadowPixmap	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNtraversalOn	True	CSG
\ \ \ \ \ \ XmCTraversalOn	\ \ \ \ \ \ \ Boolean
_
XmNunitType	dynamic	CSG
\ \ \ \ \ \ XmCUnitType	\ \ \ \ \ \ \ unsigned char
_
XmNuserData	NULL	CSG
\ \ \ \ \ \ XmCUserData	\ \ \ \ \ \ \ XtPointer
_
.TE
.\" NROFF HACK END
.nL
.ne 6
.VL  
.LI "\*LXmNbottomShadowColor\*O"
Specifies the color to use to draw the bottom
and right sides of the border shadow.
This color is used if the \*LXmNbottomShadowPixmap\*O resource is NULL.
.LI "\*LXmNbottomShadowPixmap\*O"
Specifies the pixmap to use to draw the bottom and right sides of the border
shadow.
.LI "\*LXmNforeground\*O"
Specifies the foreground drawing color used by manager widgets.
.LI "\*LXmNhelpCallback\*O"
Specifies the list of callbacks that are called when the help key
sequence is pressed.  The reason sent by this callback is \*LXmCR_HELP\*O.
.LI "\*LXmNhighlightColor\*O"
Specifies the color of the highlighting rectangle.
This color is used if the highlight pixmap resource is
\*LXmUNSPECIFIED_PIXMAP\*O.
.LI "\*LXmNhighlightPixmap\*O"
Specifies the pixmap used to draw the highlighting rectangle.
.LI "\*LXmNinitialFocus\*O"
Specifies the ID of a widget descendant of the manager.
The widget must meet these conditions:
.ML
.LI
The widget must be either a tab group or a non-tab-group widget that can
receive keyboard focus.
For the definition of a tab group, see the description of the Manager,
Primitive, and Gadget \*LXmNnavigationType\*O resources.
In general a widget can receive keyboard focus when it is a primitive, a
gadget, or a manager (such as a DrawingArea with no traversable
children) that acts as a primitive.
.LI
The widget must not be a descendant of a tab group that is itself a
descendant of the manager.
That is, the widget cannot be contained within a tab group that is
nested inside the manager.
.LI
The widget and its ancestors must have a value of True for their
\*LXmNtraversalOn\*O resources.
.LE
.sp
If the widget does not meet these conditions, \*LXmNinitialFocus\*O is
treated as if the value were NULL.
.sp
This resource is meaningful only when the nearest shell ancestor's
\*LXmNkeyboardFocusPolicy\*O is \*LXmEXPLICIT\*O.
It is used to determine which widget receives focus in these situations:
.ML
.LI
When the manager is the child of a shell and the shell hierarchy
receives focus for the first time
.LI
When focus is inside the shell hierarchy, the manager is a composite tab
group, and the user traverses to the manager via the keyboard
.LE
.sp
Focus is then determined as follows:
.ML
.LI
If \*LXmNinitialFocus\*O is a traversable non-tab-group widget, that
widget receives focus.
.LI
If \*LXmNinitialFocus\*O is a traversable tab group, that tab group
receives focus.
If that tab group is a composite with descendant tab groups or
traversable non-tab-group widgets, these procedures are used recursively
to assign focus to a descendant of that tab group.
.LI
If \*LXmNinitialFocus\*O is NULL, the first traversable non-tab-group
widget that is not contained within a nested tab group receives focus.
.LI
If \*LXmNinitialFocus\*O is NULL and no traversable non-tab-group widget
exists, the first traversable tab group that is not contained within a
nested tab group receives focus.
If that tab group is a composite with descendant tab groups or
traversable non-tab-group widgets, these procedures are used recursively
to assign focus to a descendant of that tab group.
.LE
.sp
If a shell hierarchy regains focus after losing it, focus returns to the
widget that had the focus at the time it left the hierarchy.
.sp
The use of \*LXmNinitialFocus\*O is undefined if the manager is a
MenuBar, PulldownMenu, PopupMenu, or OptionMenu.
.LI "\*LXmNnavigationType\*O"
Determines whether the widget is a tab group.
.wH .rS 
.ML
.LI
\*LXmNONE\*O indicates that the widget is not a tab group.
.LI
\*LXmTAB_GROUP\*O indicates that the widget is a tab group, unless
another widget in the hierarchy has an \*LXmNnavigationType\*O of
\*LXmEXCLUSIVE_TAB_GROUP\*O.
.LI
\*LXmSTICKY_TAB_GROUP\*O indicates that the widget is a tab group, even
if another widget in the hierarchy has an \*LXmNnavigationType\*O of
\*LXmEXCLUSIVE_TAB_GROUP\*O.
.LI
\*LXmEXCLUSIVE_TAB_GROUP\*O indicates that the widget is a tab group and
that widgets in the hierarchy whose \*LXmNnavigationType\*O is
\*LXmTAB_GROUP\*O are not tab groups.
.sp
When a parent widget has an \*LXmNnavigationType\*O of
\*LXmEXCLUSIVE_TAB_GROUP\*O, traversal of non-tab-group widgets within
the group is based on the order of those widgets in their parent's
\*LXmNchildren\*O list.
.sp
When any widget in a hierarchy has an \*LXmNnavigationType\*O of
\*LXmEXCLUSIVE_TAB_GROUP\*O, traversal of tab groups in the hierarchy
proceeds to widgets in the order in which their \*LXmNnavigationType\*O
resources were specified as \*LXmEXCLUSIVE_TAB_GROUP\*O or
\*LXmSTICKY_TAB_GROUP\*O, whether by creating the widgets with that value,
by calling \*LXtSetValues\*O, or by calling \*LXmAddTabGroup\*O.
.LE
.wH .rE
.LI "\*LXmNshadowThickness\*O"
Specifies the thickness of the drawn border shadow.
\*LXmBulletinBoard\*O and its descendants set this value dynamically.
If the widget is a top level window, this value is set to 1.
If it is not a top level window, this value is set to 0.
.LI "\*LXmNstringDirection\*O"
Specifies the initial direction to draw strings.  The values are
\*LXmSTRING_DIRECTION_L_TO_R\*O and \*LXmSTRING_DIRECTION_R_TO_L\*O.
The value of this resource is determined at creation time.  If the widget's
parent is a manager, this value is inherited from the widget's parent,
otherwise it is set to \*LXmSTRING_DIRECTION_L_TO_R\*O.
.LI "\*LXmNtopShadowColor\*O"
Specifies the color to use to draw the top and
left sides of the border shadow.
This color is used if the \*LXmNtopShadowPixmap\*O resource is NULL.
.LI "\*LXmNtopShadowPixmap\*O"
Specifies the pixmap to use to draw the top and left sides of
the border shadow.
.LI "\*LXmNtraversalOn\*O"
Specifies whether traversal is activated for this widget.
.LI "\*LXmNunitType\*O"
Provides the basic support for resolution independence.
It defines the type of units a widget uses with sizing and
positioning resources.
If the widget's parent is a subclass of \*LXmManager\*O and if the
\*LXmNunitType\*O resource is not explicitly set, it defaults to the
unit type of the parent widget.
If the widget's parent is not a subclass of \*LXmManager\*O, the
resource has a default unit type of \*LXmPIXELS\*O.
.sp
\*LXmNunitType\*O can have the following values:
.wH .rS 
.ML
.LI
\*LXmPIXELS\*O\(emall values provided to the widget are treated as normal
pixel values.
.nL
.ne 8
.LI
\*LXm100TH_MILLIMETERS\*O\(emall values provided to the widget are treated
as 1/100 millimeter.
.LI
\*LXm1000TH_INCHES\*O\(emall values provided to the widget are treated as
1/1000 inch.
.LI
\*LXm100TH_POINTS\*O\(emall values provided to the widget are treated as
1/100 point.  A point is a unit used in text processing
applications and is defined as 1/72 inch.
.LI
\*LXm100TH_FONT_UNITS\*O\(emall values provided to the widget are
treated as 1/100 of a font unit.
A font unit has horizontal and vertical components.
These are the values of the XmScreen resources \*LXmNhorizontalFontUnit\*O
and \*LXmNverticalFontUnit\*O.
.LE 
.LI "\*LXmNuserData\*O"
Allows the application to attach
any necessary specific data to the widget.  This is an internally
unused resource.
.LE 
.SS "Dynamic Color Defaults"
The foreground, background, top shadow, bottom shadow, and
highlight color resources are dynamically defaulted.
If no color data is specified, the colors are
automatically generated.  On a single-plane system, a black and white color
scheme is generated.  Otherwise, four colors are
generated, which display the correct shading for the 3-D visuals.
If the background is the only color specified for a widget, the top
shadow and bottom shadow colors are generated to give the 3-D appearance.
Foreground and highlight colors are generated to provide sufficient
contrast with the background color.
.PP 
Colors are generated only at creation.  Resetting the background through
\*LXtSetValues\*O does not regenerate the other colors.
\*LXmChangeColor\*O can be used to recalculate all associated colors
based on a new background color.
.SS "Inherited Resources"
Manager inherits the following resources from the named
superclasses.  For a complete description of each resource, refer to the
man page for that superclass.
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Composite Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNchildren	NULL	G
\ \ \ \ \ \ XmCReadOnly	\ \ \ \ \ \ \ WidgetList
_
XmNinsertPosition	NULL	CSG
\ \ \ \ \ \ XmCInsertPosition	\ \ \ \ \ \ \ XtOrderProc
_
XmNnumChildren	0	G
\ \ \ \ \ \ XmCReadOnly	\ \ \ \ \ \ \ Cardinal
_
.TE
.\" NROFF HACK END
.PP
.wH .in 0 
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Core Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNaccelerators	dynamic	CSG
\ \ \ \ \ \ XmCAccelerators	\ \ \ \ \ \ \ XtAccelerators
_
XmNancestorSensitive	dynamic	G
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNbackground	dynamic	CSG
\ \ \ \ \ \ XmCBackground	\ \ \ \ \ \ \ Pixel
_
XmNbackgroundPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderColor	XtDefaultForeground	CSG
\ \ \ \ \ \ XmCBorderColor	\ \ \ \ \ \ \ Pixel
_
XmNborderPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderWidth	0	CSG
\ \ \ \ \ \ XmCBorderWidth	\ \ \ \ \ \ \ Dimension
_
XmNcolormap	dynamic	CG
\ \ \ \ \ \ XmCColormap	\ \ \ \ \ \ \ Colormap
_
XmNdepth	dynamic	CG
\ \ \ \ \ \ XmCDepth	\ \ \ \ \ \ \ int
_
XmNdestroyCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNheight	dynamic	CSG
\ \ \ \ \ \ XmCHeight	\ \ \ \ \ \ \ Dimension
_
XmNinitialResourcesPersistent	True	C
\ \ \ \ \ \ XmCInitialResourcesPersistent	\ \ \ \ \ \ \ Boolean
_
XmNmappedWhenManaged	True	CSG
\ \ \ \ \ \ XmCMappedWhenManaged	\ \ \ \ \ \ \ Boolean
_
XmNscreen	dynamic	CG
\ \ \ \ \ \ XmCScreen	\ \ \ \ \ \ \ Screen *
_
.wH .tH
XmNsensitive	True	CSG
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNtranslations	dynamic	CSG
\ \ \ \ \ \ XmCTranslations	\ \ \ \ \ \ \ XtTranslations
_
XmNwidth	dynamic	CSG
\ \ \ \ \ \ XmCWidth	\ \ \ \ \ \ \ Dimension
_
XmNx	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
XmNy	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
.TE
.\" NROFF HACK END
.wH .in  
.SS "Callback Information"
A pointer to the following structure is passed to each callback:
.sS
.iS
.ta .25i 1.50i
typedef struct
{
	int	\*Vreason\*L;
	\*LXEvent	\*V* event\*L;
} XmAnyCallbackStruct;
.iE
.sE
.wH .fi
.VL .75i 
.LI "\*Vreason\*O"
Indicates why the callback was invoked.
For this callback, \*Vreason\*O is set to \*LXmCR_HELP\*O.
.LI "\*Vevent\*O"
Points to the \*LXEvent\*O that triggered the callback.
.LE
.SS "Translations"
The following set of translations are used by Manager widgets that
have Gadget children.  Since Gadgets cannot have translations associated
with them, it is the responsibility of the Manager widget to intercept the
events of interest and pass them to any Gadget child with focus.
These events are ignored if no Gadget child has the focus.
These translations may not directly correspond to a
translation table.
.iS
.ta 1.5i
BAny Motion:	ManagerGadgetButtonMotion()
BSelect Press:	ManagerGadgetArm()
BSelect Click:	ManagerGadgetActivate()
BSelect Release:	ManagerGadgetActivate()
BSelect Press 2+:	ManagerGadgetMultiArm()
BSelect Release 2+:	ManagerGadgetMultiActivate()
BDrag Press:	ManagerGadgetDrag()
.sp \n(PDu
KSelect:	ManagerGadgetSelect()
KActivate:	ManagerParentActivate()
.sp \n(PDu
KCancel:	ManagerParentCancel()
.sp \n(PDu
KPrevField:	ManagerGadgetPrevTabGroup()
KNextField:	ManagerGadgetNextTabGroup()
.sp \n(PDu
KUp:	ManagerGadgetTraverseUp()
KDown:	ManagerGadgetTraverseDown()
KLeft:	ManagerGadgetTraverseLeft()
KRight:	ManagerGadgetTraverseRight()
.sp \n(PDu
KBeginLine:	ManagerGadgetTraverseHome()
.sp \n(PDu
KHelp:	ManagerGadgetHelp()
.sp \n(PDu
KAny:	ManagerGadgetKeyInput()
.wH .fi
.iE
.SS "Action Routines"
The XmManager action routines are described below:
.VL
.LI "\*LManagerGadgetActivate()\*O:"
Causes the current gadget to be activated.
.LI "\*LManagerGadgetArm()\*O:"
Causes the current gadget to be armed.
.LI "\*LManagerGadgetButtonMotion()\*O:"
Causes the current gadget to process a mouse motion event.
.LI "\*LManagerGadgetDrag()\*O:"
Drags the contents of a gadget label, identified by
pressing \*LBDrag\*O.  This action creates a DragContext object
whose \*LXmNexportTargets\*O resource is set to "COMPOUND_TEXT" for
a label type of \*LXmSTRING\*O; otherwise, "PIXMAP" if the
label type is \*LXmPIXMAP\*O.  This action is undefined for
gadgets used in a menu system.
.LI "\*LManagerGadgetHelp()\*O:"
Calls the callbacks for the current gadget's \*LXmNhelpCallback\*O if
any exist.
If there are no help
callbacks for this widget, this action calls the help callbacks
for the nearest ancestor that has them.
.LI "\*LManagerGadgetKeyInput()\*O:"
Causes the current gadget to process a keyboard event.
.LI "\*LManagerGadgetMultiActivate()\*O:"
Causes the current gadget to process a multiple mouse click.
.LI "\*LManagerGadgetMultiArm()\*O:"
Causes the current gadget to process a multiple mouse button press.
.nL
.ne 6
.LI "\*LManagerGadgetNextTabGroup()\*O:"
Traverses to the first item in the next tab group.  If
the current tab group is the last entry in the tab group list, it
wraps to the beginning of the tab group list.
.LI "\*LManagerGadgetPrevTabGroup()\*O:"
Traverses to the first item in the previous tab group.
If the beginning of the tab group list is reached, it wraps to the end
of the tab group list.
.LI "\*LManagerGadgetSelect()\*O:"
Causes the current gadget to be armed and activated.
.LI "\*LManagerGadgetTraverseDown()\*O:"
Traverses to the next item below the current gadget in the current tab
group, wrapping if necessary.
.LI "\*LManagerGadgetTraverseHome()\*O:"
Traverses to the first widget or gadget in the current tab group.
.LI "\*LManagerGadgetTraverseLeft()\*O:"
Traverses to the next item to the left of the current gadget in the
current tab group, wrapping if necessary.
.LI "\*LManagerGadgetTraverseNext()\*O:"
Traverses to the next item in the current tab group, wrapping if
necessary.
.LI "\*LManagerGadgetTraversePrev()\*O:"
Traverses to the previous item in the current tab group, wrapping if
necessary.
.LI "\*LManagerGadgetTraverseRight()\*O:"
Traverses to the next item to the right of the current gadget in the
current tab group, wrapping if necessary.
.LI "\*LManagerGadgetTraverseUp()\*O:"
Traverses to the next item above the current gadget in the current tab
group, wrapping if necessary.
.LI "\*LManagerParentActivate()\*O:
If the parent is a manager,
passes the \*LKActivate\*O event received by the current widget/gadget
to its parent.
.LI "\*LManagerParentCancel()\*O:"
If the parent is a manager,
passes the \*LKCancel\*O event received by the current widget/gadget
to its parent.
.LE
.ne 10
.SS "Additional Behavior"
This widget has the additional behavior described below:
.VL
.LI "\*L<FocusIn>\*O:"
If the shell's keyboard focus policy is \*LXmEXPLICIT\*O and the event
occurs in a gadget, causes the gadget to be highlighted and to take the
focus.
.LI "\*L<FocusOut>\*O:"
If the shell's keyboard focus policy is \*LXmEXPLICIT\*O and the event
occurs in a gadget, causes the gadget to be unhighlighted and to lose
the focus.
.LE
.SS "Virtual Bindings"
The bindings for virtual keys are vendor specific.
For information about bindings for virtual buttons and keys, see \*LVirtualBindings(3X)\*O.
.SH RELATED INFORMATION
.na
\*LComposite(3X)\*O,
\*LConstraint(3X)\*O,
\*LCore(3X)\*O,
\*LXmChangeColor(3X)\*O,
\*LXmGadget(3X)\*O, and
\*LXmScreen(3X)\*O.
.ad
.EQ
delim off
.EN

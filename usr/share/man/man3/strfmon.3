.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: strfmon.3,v $ $Revision: 1.1.3.6 $ (DEC) $Date: 1993/12/21 00:17:25 $
.\"
.\"
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.TH strfmon 3
.SH NAME
.PP
\*Lstrfmon\*O \- Formats monetary strings
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <sys/types.h>
.nL
\*L#include <monetary.h>
.PP
\*Lssize_t strfmon(
.nL
	char *\*Vs\*L,
.nL
	size_t \*Vmaxsize\*L,
.nL
	const char *\*Vformat\*L
.nL
	\*O[\*L,double \*Vvalue\*O]\|.\|.\|.\*L);
.sE
.SH PARAMETERS
.PP
.VL 1i
.LI "\*Vs\*O"
Contains the output of the \*Lstrfmon(\|)\*O function.
.LI "\*Vmaxsize\*O"
Specifies the maximum number of bytes (including
the null terminating byte) that may be placed in the \*Vs\*O parameter.
.LI "\*Vformat\*O"
Contains characters and conversion specifications.
.LI "\*Vvalue\*O"
Specifies the \*Ldouble\*O data to be converted according to the
\*Vformat\*O parameter.
.LE
.SH DESCRIPTION
.PP
.iX "strfmon function"
.iX "formatting" "monetary strings"
The \*Lstrfmon(\|)\*O function converts numeric values to monetary strings
according to the specifications in the \*Vformat\*O parameter. It
converts the double-precision floating-point \*Vvalue\*O parameters
under the control of the \*Vformat\*O parameter and stores the result
in the array specified by the \*Vs\*O parameter.
.PP
The \*Vformat\*O parameter is a character string that
contains two types of objects:
.ML
.LI
Literal characters, which are copied to the output stream.
.LI
Conversion specifications, each of which causes zero or more items
to be fetched from the \*Vvalue\*O parameter list.
.LE
.PP
If there are insufficient parameters for the \*Vformat\*O parameter,
the results are undefined. If parameters remain after the \*Vformat\*O
parameter is exhausted, the excess parameters are ignored.
.SS "Conversion Specifications"
.if n .PP
A conversion specification consists of a \*L%\*O (percent sign)
character, optional flags, optional field width, optional left precision,
optional right precision, and a required conversion character that
determines the conversion to be performed.
.PP
Each conversion specification in the \*Vformat\*O parameter
has the following syntax:
.PP
.ML
.LI
A \*L%\*O (percent sign).
.LI
Zero or more optional flags can be specified to
control the conversion. The flag characters and their meanings are as
follows:
.VL 0.5i
.LI "\*L=\*Vf\*O"
An \*L=\*O (equal sign) followed by a single
character that specifies the numeric fill character. The default
numeric fill character is the space character. This flag does not
affect field-width filling, which always uses the space character.
This flag is ignored unless a left precision is specified.
.LI "\*L^\*O"
The \*L^\*O (circumflex) flag suppresses grouping digits
when formatting the currency amount. The
default is to group the digits and separate them with the
grouping characters if defined for the current locale.
.LI "\*L+\*O"
The \*L+\*O (plus) character specifies that the  locale's
equivalent of \*L+\*O and \*L-\*O are used to indicate positive
and negative values. You cannot specify both the \*L+\*O (plus)
character and the \*L(\*O (left-parenthesis) character. If you specify
neither, the locale's default method for displaying positive and
negative values is used.
.LI "\*L(\*O"
The \*L(\*O (left-parenthesis) character specifies that the locale's
equivalent of enclosing negative amounts within parentheses is used to
indicate positive and negative values.
.LI "\*L!\*O"
The \*L!\*O (exclamation mark) character
suppresses the currency symbol from the output conversion.
.LI "\*L-\*O"
The \*L-\*O (hyphen) character specifies that the field is
left justified within the minimum field width rather than right
justified. This flag is ignored unless a minimum field width is specified.
.LE
.LI
An optional decimal digit string \*Vw\*O that specifies a minimum
field width in which the result of the conversion is right justified.
If the \*L-\*O (hyphen) flag is specified, the result is left justified.
.LI
An optional left-precision consisting of a \*L#\*O (number sign)
followed by a decimal digit string \*Vn\*O. The decimal digit string
specifies the maximum number of digits to be formatted to the left of
the radix character.  This option causes an amount to be formatted as
if it has the number of digits specified by the \*Vn\*O digit string.
If more than \*Vn\*O digit positions are required, this option is
ignored. Digit positions in excess of those required are filled with
the numeric fill character set with the \*L=\*Vf\*O flag.  This option
can be specified to keep the formatted output from multiple calls to
the \*Lstrfmon(\|)\*O function aligned in the same columns. It can
also be used in conjunction with the \*L=\*Vf\*O flag to fill unused
positions with a special character (for example, $***123.45).
.IP
If grouping is defined for the current locale and has not been
suppressed with the \*L^\*O (circumflex) flag, grouping is applied to
the combined fill characters plus the regular digits. If the fill
character is not \*L0\*O (zero), however, grouping separators after a
fill character are replaced by the fill character (for example, $0,001,234.56
and $****1,234.56).
.LI
An optional right precision consisting of a \*L.\*O (period) followed
by a decimal digit string \*Vp\*O that specifies the number of digits
after the radix character. If the value of the \*Vp\*O digit string is
0 (zero), no radix character is used. If a right precision is not
specified, a default specified by the current locale is used. The
amount being formatted is rounded to the specified number of digits
prior to formatting.
.LI
A character that indicates the type of conversion to be applied:
.VL
.LI "\*L%\*O"
No parameter is converted; the conversion specification \*L%\&%\&\*O
(double percent sign) produces a single % in the output string.
.LI "\*Li\*O"
The double parameter is formatted according to the current locale's
international currency format; for example, in a U.S. locale: USD 1,234.56.
.LI "\*Ln\*O"
The double parameter is formatted according to the current
locale's national currency format; for example, in a U.S. locale: $1,234.56.
.LE
.LE
.PP
The following table lists the default values used by
the \*Lstrfmon(\|)\*O function when there are no values defined in the
locale for these members of the \*Llconv\*O structure. These are the
defaults for the C locale. For all other \*Llconv\*O members, such as
\*Lmon_thousands_sep\*O, there are no defaults.
.PP
.TS
tab(@);
lfHB lfHB lfHB
l l l .
.\"
.\"lw lw lw.
.\"
_
lconv Structure@Explanation@Default Value
_
\*Lmon_decimal_point\*O@Radix character@\*L.\*O (period)
_
\*Lnegative_sign\*O@Character to indicate@\*L-\*O (hyphen)
@negative values@
_
\*Lint_frac_digits\*O@Default right@2
@precision for \*L%i\*O@
_
\*Lfrac_digits\*O@Default right@2
@precision for \*L%n\*O@
_
\*Lleft_parenthesis\*O@Characters used@\*L(\*O (left parenthesis)
@for \*L(\*O flag@
_
\*Lright_parenthesis\*O@Characters used@\*L)\*O (right parenthesis)
@for \*L)\*O flag@
_
.TE
.SH EXAMPLES
.PP
The following table lists conversion specifications and the
output.
.PP
.\" lBp9  lBp9  lBp9 lBp9
.\" lBp9  lBp9  lBp9  lBp9
.\" lp9  lp9  lp9  lp9.
.TS
tab(@);
lfHB  lfHB  lfHB lfHB
lfHB  lfHB  lfHB lfHB
l  n  n  l .
_
Conv.@Output in@Output in
Spec.@a US Locale@C Locale@Explanation
_
\*L%n\*O@\*L$100.35\*O@\*L100.35\*O@Default
@\*L$1,225.15-\*O@\*L-1225.15\*O@national format
_
\*L%i\*O@\*LUSD 100.35\*O@\*L100.35\*O@Default
@\*LUSD 1,225.15-\*O@\*L-1225.15\*O@international format
_
\*L%(#6.3n\*O@\*L$  9,876.543\*O@\*L  9876.543\*O@Explicit
@\*L($ 25,832.000)\*O@\*L( 25832.000)\*O@left and right
@@@precision with
@@@parentheses
@@@for negative values
_
\*L%=*#7n\*O@\*L$****4,379.25\*O@\*L***4379.25\*O@Fill
@\*L-$****4,379.25\*O@\*L-***4379.25\*O@character
_
\*L%=0#7n\*O@\*L$0,004,379.25\*O@\*L0004379.25\*O@Zero fill
@\*L$0,004,379.25-\*O@\*L-0004379.25\*O
_
\*L%^.0n\*O@\*L3,225\*O@\*L3225\*O@Suppress
@\*L3,225-\*O@\*L-3225\*O@currency symbol
@@@and round to
@@@integer
_
.TE
.\" .ig ++
.\" Test data
.\" <%n> <%n>
.\" 100.348 -1225.147
.\" US: <$100.35> <$1,225.15->
.\" C: <100.35> <-1225.15>
.\" <%i> <%i>
.\" 100.348 -1225.147
.\" US: <USD 100.35> <USD 1,225.15->
.\" C: <100.35> <-1225.15>
.\" <%(#6.3n> <%(#6.3n>
.\" 9876.5434 -25832
.\" US: <$  9,876.543> <($ 25,832.000)>
.\" C: <  9876.543> <( 25832.000)>
.\" <%=*#7n> <%=*#7n>
.\" 4379.25 -4379.25
.\" US: <$****4,379.25> <$****4,379.25->
.\" C: <***4379.25> <-***4379.25>\*O
.\" <%=0#7n> <%=0#7n>
.\" 4379.248 -4379.251
.\" US: <$0,004,379.25> <$0,004,379.25->
.\" C: <0004379.25> <-0004379.25>
.\" <%^.0n> <%^.0n>
.\" 3225.4 -3324.8
.\" US: <$3225> <$3225-> 
.\" C: <3225> <-3225>
.\" <%!=&16#8.4n> <%!=&16#8.4n>
.\" 12345.67899 -12345.67899
.\" US: <&&&&&12,345.6790> <&&&&12,345.6790->
.\" C: <   &&&12345.6790> <  -&&&12345.6790>
.\" .++
.SH RETURN VALUES
.PP
If successful, and if the number of resulting bytes (including the terminating
null byte) is not more than the number of bytes specified by the
\*Vmaxsize\*O parameter, the \*Lstrfmon(\|)\*O function returns the number of bytes
placed into the array pointed to by the \*Vs\*O parameter. The
terminating null byte is not included in the return count. Otherwise,
a value of -1 is returned and the contents of the \*Vs\*O array are
indeterminate.
.SH RELATED INFORMATION
.PP
Functions:
\*Llocaleconv\*O(3),
\*Lscanf\*O(3),
\*Lstrftime\*O(3).
.EQ
delim off
.EN

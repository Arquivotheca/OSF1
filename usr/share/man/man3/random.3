.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: random.3,v $ $Revision: 3.2.6.2 $ (DEC) $Date: 1993/10/04 19:56:07 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\"
.\"
.TH random 3
.SH NAME
\*Lrandom\*O, \*Lrandom_r\*O, \*Lsrandom\*O, \*Lsrandom_r\*O, \*Linitstate\*O, \*Linitstate_r\*O, \*Lsetstate\*O, \*Lsetstate_r\*O \- Generate pseudo-random number
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*Lint random(void);
.sp 0.4v
\*Lint random_r(
.nL
	long *\*Vretval\*L,
.nL
	struct random_data *\*Vrand_data\*L);
.sp 0.4v
\*Lint srandom(
.nL
	unsigned \*Vseed\*L);
.sp 0.4v
\*Lint srandom_r(
.nL
	unsigned \*Vseed\*L,
.nL
	struct random_data *\*Vrand_data\*L);
.sp 0.4v
\*Lchar *initstate(
.nL
	unsigned \*Vseed\*L,
.nL
	char \*V*state\*L,
.nL
	int \*Vsize \*L);
.sp 0.4v
\*Lint initstate_r(
.nL
	unsigned \*Vseed\*L,
.nL
	char \*V*state\*L,
.nL
	int \*Vsize\*L,
.nL
	\*Lchar **\*Vretval\*L,
.nL
	struct random_data *\*Vrand_data\*L);
.sp 0.4v
\*Lchar *setstate (
.nL
	char *\*Vstate \*L);
.sp 0.4v
\*Lint setstate_r(
.nL
	char *\*Vstate\*L,
.nL
	\*Lchar **\*Vretval\*L,
.nL
	\*Lstruct random_data *\*Vrand_data\*L);
.sE
.SH PARAMETERS
.PP
.VL 4m
.LI "\*Vseed\*O"
Specifies an initial seed value.
.LI "\*Vstate\*O"
Points to the array of state information.
.LI "\*Vsize\*O"
Specifies the size of the state information array.
.LI "\*Vretval\*O"
Points to a place to store the random number.
.LI "\*Vrand_data\*O"
Points to a \*Lrandom_data\*O structure.
.LE
.SH DESCRIPTION
.PP
.iX "random function"
.iX "random_r function"
.iX "srandom function"
.iX "srandom_r function"
.iX "initstate function"
.iX "initstate_r function"
.iX "setstate function"
.iX "setstate_r function"
.iX "random numbers" "generating"
.iX "generating random numbers"
.PP
The \*Lrandom(\|)\*O and \*Lsrandom(\|)\*O functions are random number
generators that
have virtually the same calling sequence and initialization properties
as the \*Lrand(\|)\*O and \*Lsrand(\|)\*O functions, but
produce sequences that are more random.  The low 12 bits generated by
\*Lrand\*O go through a cyclic pattern.  All bits generated by
\*Lrandom\*O are usable.  For example, \*Lrandom(\|)&01\*O produces a
random binary value.
.PP
The \*Lrandom(\|)\*O function uses a nonlinear additive feedback
random number generator employing a default state array size of 31
integers to return successive pseudo-random numbers in the range
.\" next line commented out, coding causes problems, replaced
.\" from 0 to 2\u\s-231\s0\d\-1.  The period of this random
from 0 to (2^31)\-1.  The period of this random
.\" next line commented out, causes coding problems, replaced
.\" number generator is approximately 16 x (2\s-2\u31\d\s0-\*O1).
number generator is approximately 16*((2^31)\-1).
The size of the state array determines the period of the random number
generator.  Increasing the state array size increases the period.
.PP
With a full 256 bytes of state information, the period of the
.\" next line commented out, causes coding problems, replaced
.\" random-number generator is greater than 2\s-2\u69\s0\d, which should
random-number generator is greater than 2^69, which should
be sufficient for most purposes.
.PP
Like the \*Lrand(\|)\*O function, the \*Lrandom(\|)\*O
function produces by default a sequence of numbers that can be
duplicated by calling the \*Lsrandom(\|)\*O function with a value of 1 as the
seed. The \*Lsrandom(\|)\*O function, unlike the \*Lsrand(\|)\*O function,
does not return the old seed because the amount of state information
used is more than a single word.
.PP
The \*Linitstate(\|)\*O and \*Lsetstate(\|)\*O functions handle
restarting and changing random-number generators.
The \*Linitstate(\|)\*O function allows a state array, passed
in as an argument, to be initialized for future use.  The size in
bytes of the state array is used by the \*Linitstate(\|)\*O function
to decide how sophisticated a random-number generator to use;
the larger the state array, the more random the numbers.  Values
for the amount of state information are 8, 32, 64, 128, and 256
bytes.  Amounts less than 8 bytes generate an error, while other amounts
are rounded down to the nearest known value.  The \*Vseed\*O parameter
specifies a starting point for the random-number sequence and provides
for restarting at the same point.  The \*Linitstate(\|)\*O function
returns a pointer to the previous state information array.
.PP
Once a state has been initialized, the \*Lsetstate(\|)\*O function
allows rapid switching between states.  The array defined by the \*Vstate\*O
parameter is used for further random-number generation until the
\*Linitstate(\|)\*O function is called or the \*Lsetstate(\|)\*O function
is called again.  The \*Lsetstate(\|)\*O function returns a pointer
to the previous state array.
.PP
After initialization, a state array can be restarted at a different
point in one of two ways:
.ML
.LI
The \*Linitstate(\|)\*O function can be used, with the desired
seed, state array, and size of the array.
.LI
The \*Lsetstate(\|)\*O function, with the desired state, can
be used, followed by the \*Lsrandom(\|)\*O function with the desired
seed.  The advantage of using both of these functions is that the
size of the state array does not have to be saved once it is initialized.
.LE
.PP
The \*Lrandom_r(\|)\*O, \*Lsrandom_r(\|)\*O, \*Linitstate_r(\|)\*O, and
\*Lsetstate_r(\|)\*O functions are the reentrant versions of the
\*Lrandom(\|)\*O, \*Lsrandom(\|)\*O, \*Linitstate(\|)\*O, and
\*Lsetstate(\|)\*O functions, respectively.  Upon successful completion, the
\*Linitstate_r(\|)\*O and \*Lsetstate_r(\|)\*O functions have
\*Vretval\*O point at the returned state.  The \*Lrandom_r(\|)\*O function has
\*Vretval\*O point at the returned random number.   Note that the
\*Lsrandom_r(\|)\*O function takes the \*Vrand_data\*O structure, which
should first
be initialized by the \*Linitstate_r(\|)\*O function.  Note also that
the \*Vrand_data\*L.state\*O parameter needs to be NULL before the
\*Linitstate_r(\|)\*O or \*Lsetstate_r(\|)\*O functions are called.
.SH RETURN VALUES
.PP
.\" Begin Digital-specific information CORRECTION
.\" Removed 'and srandom()' from the following sentence and changed plurals
.\" to singulars.
The \*Lrandom(\|)\*O function returns a random number.
.\" End Digital-specific information CORRECTION
The \*Linitstate(\|)\*O and \*Lsetstate(\|)\*O
functions return a pointer to the previous state information array.
.PP
Upon successful completion, the
\*Lrandom(\|)\*O
function returns a random number.
.PP
Upon successful completion, the
\*Linitstate(\|)\*O and
\*Lsetstate(\|)\*O
functions return a pointer to the previous state information array.
Upon error, a value of 0 (zero) is returned.
.PP
Upon successful completion, the \*Lsrandom(\|)\*O function returns
success with a value of 0
(zero).  Upon failure, it returns -1 and may set \*Lerrno\*O.  The
\*Lsrandom(\|)\*O function initializes the state \*Vseed\*O.
.PP
Upon successful completion, the
\*Lrandom_r(\|)\*O, \*Lsrandom_r(\|)\*O, \*Linitstate_r(\|)\*O, and
\*Lsetstate_r(\|)\*O
functions return a value of 0 (zero).  Upon error, they return a value
of -1 and
\*Lerrno\*O
may be set.
.SH ERRORS
.PP
If the \*Linitstate(\|)\*O function is called with less than
8 bytes of state information, or if the \*Lsetstate(\|)\*O function
detects that the state information has been damaged, error messages
are written to standard error.
.PP
If any of the following conditions occurs, the \*Lrandom_r(\|)\*O,
\*Lsrandom_r(\|)\*O, \*Lsetstate_r(\|)\*O, and \*Linitstate_r(\|)\*O functions
set \*Lerrno\*O to the corresponding value:
.VL
.LI "[EINVAL]"
The \*Lretval\*O, \*Vrand_data\*O, \*Vstate\*O, \*Vseed\*O, or \*Vretval\*O
parameters are invalid, or the \*Lstate\*O field of the
\*Vrand_data\*O structure is invalid.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Ldrand48\*O(3),
\*Lrand\*O(3)
.iX "initstate function"
.iX "initstate_r function"
.iX "random function"
.iX "random_r function"
.iX "setstate function"
.iX "setstate_r function"
.iX "srandom function"
.iX "srandom_r function"
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: ldr_xunload.3,v $ $Revision: 3.2.5.2 $ (DEC) $Date: 1993/06/16 16:09:46 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\"
.\"
.TH ldr_xunload 3
.SH NAME
\*Lldr_xunload\*O \- Unloads a module previously loaded in another process
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <sys/types.h>\*O
.nL
\*L#include <loader.h>\*O
.nL
\*Lint\*O
\*Lldr_xunload\*O(
.nL
.wH 0.in +.5i
	\*Lldr_process_t\*O\*Vprocess\*O,
.nL
\*Lldr_module_t\*O
\*Vmod_id\*O);
.sE
.SH PARAMETERS
.PP
.\"from TP .5i"  
.VL
.LI "\*Vprocess\*O"
Specifies the process from whose address space the module is to be unloaded.
.\"from TP "  
.LI "\*Vmod_id\*O"
Identifies the module to be unloaded.  The module ID
is returned when the module is first loaded.
.LE
.SH DESCRIPTION
.PP
.iX "ldr_xunload function"
.iX "loaded module" "unloading in another process"
.iX "loader" "unloading module in another process"
The
\*Lldr_xunload(\|)\*O
function unloads the specified module from the virtual
address space of the specified process.  The function unmaps the
module's regions and discards the loader data structures that describe
the module.
.PP
The module is unloaded even if any references to it
remain in other modules.  The loader does not keep track of such
dangling references or attempt to unsnap any invalidated links.  These
housekeeping tasks are the responsibility of the calling process.
Attempts to refer to addresses in an unloaded module can result in
indeterminate errors.
.PP
To obtain the unique identifier for the current process, use the following
call:
.rS
	\*Lldr_process_t ldr_my_process(\|);\*O
.rE
To obtain the unique identifier for the kernel, use the following call:
.rS
	\*Lldr_process_t ldr_kernel_process(\|);\*O
.rE
.SH NOTES
.PP
This function currently works only for the current process and the
kernel process.
.PP
Once a module has been unloaded, its module ID is no longer valid.
.SH RETURN VALUES
.PP
If the unload operation is a success, the function returns a value of 0
(zero).  If the unload fails, the function returns a negative value
and
\*Lerrno\*O
is set to indicate the error.
.SH ERRORS
.PP
If the
\*Lldr_xunload(\|)\*O
function fails,
\*Lerrno\*O
may be set to one of the following values:
.\"from TP 1i"  
.VL 1i
.LI "[EINVAL]"
The specified module ID is not valid.
.\"from TP 1i"  
.LI "[EINVAL]"
The specified module cannot be unloaded (that is, it was loaded with the
flag LDR_NOUNLOAD).
.\"from TP 1i"  
.LI "[ESRCH]"
The process identifier is invalid.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Lldr_xload\*O(3),
.iX "ldr_xunload function"
.EQ
delim off
.EN

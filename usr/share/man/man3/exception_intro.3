.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\" 
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\"  This is exception_intro.3, which was originally called exception_intro.3E
.\"  by himel, but suffixes are no longer used.
.TH exception_intro 3
.PP
.SH NAME
\*Lexception_intro\*O, \*Llibexc\*O  - an overview of exception support supplied in \*Llibexc.a\*O.
.SH DESCRIPTION
.PP
.iX "exception_intro"
.iX "intro" "exception handling support"
The exception mechanism used on DEC OSF/1 requires no
execution time in user code. The only costs before an
exception occurs are one-time registering and deregistering of modules
with the runtime exception handling mechanism from the \*Linit\*O and
\*Lfini\*O sections. This one-time cost is a requirement
to support shared objects.
.PP
After an exception, there are costs to find exception handling and
unwind information for procedure activations on the stack.
This model assumes that exceptions are exceptional occurrences and
they should not cost anything until they occur. The exception system makes
every effort when an exception occurs to be as efficient as possible by using
mechanisms such as binary searches and software caches where applicable.
.PP
The routines in this section come from four sources, although these
routines might not have the same names as the routines in the sources:
.ML
.LI
ULTRIX \*Llibexc.a\*O
.LI
NT defined interfaces
.LI
\*EDEC OSF/1 Calling Standard for AXP Systems\*O
.LI
new routines required for this implementation
.LE
.PP
There may be multiple routines which do the
same things but are supported for backward compatibility. The data
structures are defined in \*Lexcpt\*O(4), \*Lpdsc\*O(4) and the
\*EDEC OSF/1 Calling Standard for AXP Systems\*O .
.PP
If you have used the runtime procedure descriptor from ULTRIX
\*Llibexc\*O as an opaque pointer, your code will port easily. If not,
you must modify field names to match the new data structures.
.PP
The exception system supports three basic services:
.ML
.LI
unwinding
.LI
access to procedure specific information
.LI
exception management
.LE
.PP
Unwinding support includes the ability to get a context, virtual and
actual unwinding of levels of procedure activations from the stack and
continuing execution in a handler or other user code. Some of the unwind
routines also support invoking handlers as they unwind so that the
language or user can clean up items at particular procedure activations.
.PP
The routines that provide access to procedure specific information
can map an address anywhere in a routine to the routine's information.
This information includes enough data to cause
an unwind or determine if a routine handles an exception.
Typically these routines take an address and then binary search a
compiler system-created table for an entry covering the address.  These
routines also contain support for multiple tables so that shared objects and
runtime generated code can participate in the exception system.
.PP
The exception management routines provide ways for languages or users
to raise exceptions or cause signals to raise exceptions.
The exception management routines also provide the mechanism to dispatch
the exceptions to the appropriate handlers. Typically, languages provide
handlers which determine if the user has specified a handler for a
particular address and exception. In the case of structured exception
handling in C, the language specific handler invokes a routine containing
user supplied code to determine what action to take (see
\*Lc_excpt\*O(4) for information on C-style structured exception
handling). Language specific
handlers can either handle the exception or return for some other procedure
activation to handle it.
.PP
The following routines are described in Section 3 reference pages:
.PP
.TS
tab(@);
lfHB lfHB
l l.
_
.sp 4p
Routine@Description
.sp 6p
_
.sp 8p
\*Lexc_continue\*O@T{
Like \*Llongjmp\*O(3)
T}
.sp
\*Lexc_dispatch_exception\*O@T{
Deliver exceptions to language handlers
T}
.sp
\*Lexc_longjmp\*O@T{
Like \*Llongjmp\*O(3) except calls handlers for cleanup
T}
.sp
\*Lexc_lookup_function_entry\*O@T{
Map address to procedure information
T}
.sp
\*Lexc_lookup_function_table_address\*O@T{
Map address to table containing procedure information
T}
.sp
\*Lexc_lookup_gp\*O@T{
Map address to GP value for a procedure
T}
.sp
\*Lexc_raise_exception\*O@T{
Raise exception given exception structure
T}
.sp
\*Lexc_raise_status_exception\*O@T{
Raise exception given exception code
T}
.sp
\*Lexc_set_last_chance_handler\*O@T{
Set user handler for unhandled exceptions
T}
.sp
\*Lexc_unwind\*O@T{
Actual unwind invoking cleanup handlers
T}
.sp
\*L\&_\|_exc_last_chance\*O@T{
Unhandled exception handler
T}
.sp
\*Lexc_resume\*O@T{
Like \*Llongjmp\*O(3)
T}
.sp
\*Lexception_dispatcher\*O@T{
Take \*Lsignal\*O(2) arguments and raises exceptions
T}
.sp
\*Lexc_find_frame_ptr\*O@T{
Returns static link of current activation
T}
.sp
\*Lfind_rpd\*O@T{
Maps address to procedure information
T}
.sp
\*Lexc_add_gp_range\*O@T{
Register range of address for a GP value
T}
.sp
\*Lexc_add_pc_range_table\*O@T{
Register procedure information table
T}
.sp
\*Lexc_remove_gp_range\*O@T{
Deregister range of addresses for a GP value
T}
.sp
\*Lexc_remove_pc_range_table\*O@T{
Deregister procedure information table
T}
.sp
\*Lexc_raise_signal_exception\*O@T{
Take \*Lsignal\*O(2) arguments and raises exceptions
T}
.sp
\*Lset_unhandled_exception\*O@T{
Set user handler for unhandled exceptions
T}
.sp
\*Lunwind\*O@T{
Virtual unwind updating activation context
T}
.sp
\*Lexc_virtual_unwind\*O@T{
Virtual unwind updating activation context
T}
.sp 4p
_
.sp 6p
.TE
.PP
See the IEEE routines in the RELATED INFORMATION section for information
on IEEE floating point exception support.
.SH FILES
.PP
\*L\/usr/ccs/lib/cmplrs/cc/libexc.a\*O - exception handling library
.nL
\*L\/usr/include/excpt.h\*O - include file
.nL
\*L\/usr/include/pdsc.h\*O - include file
.nL
\*L\/usr/include/signal.h\*O - include file
.nL
\*L\/usr/include/machine/fpu.h\*O - include file
.PP
.SH RELATED INFORMATION
.PP
Functions: \*Lexception_dispatcher\*O(3), \*Lexc_lookup_function_entry\*O(3),
\*Lsignal\*O(2), \*Lsigaction\*O(2), \*Lsetjmp\*O(3), \*Lexc_unwind\*O(3),
\*L_\|_exc_last_chance\*O(3), \*Lieee\*O(3).
.PP
Files: \*Lexcpt\*O(4), \*Lc_excpt\*O(4), \*Lsignal\*O(4), \*Lpdsc\*O(4).
.PP
\*EProgrammer's Guide\*O.
.PP
\*EAssembly Language Programmer's Guide\*O.
.PP 
\*EDEC OSF/1 Calling Standard for AXP Systems\*O.
.EQ
delim off
.EN

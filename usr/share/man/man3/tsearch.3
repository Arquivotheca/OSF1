.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: tsearch.3,v $ $Revision: 3.2.5.2 $ (DEC) $Date: 1993/06/27 19:44:58 $
.\"
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.\" Copyright (c) 1990, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\"
.TH tsearch 3
.SH NAME
.PP
\*Ltsearch\*O, \*Ltfind\*O, \*Ltdelete\*O, \*Ltwalk\*O \- Manages binary search trees
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <search.h>\*O
.PP
\*Lvoid *tsearch(
.nL
        \*Lconst void *\*Vkey\*L,
.nL
        \*Lvoid **\*Vrootp\*L,
.nL
        \*Lint (*\*Vcompar\*L) (const void *, const void *)\|);\*O
.PP
\*Lvoid *tfind(
.nL
        \*Lconst void *\*Vkey\*L,
.nL
        \*Lvoid * const *\*Vrootp\*L,
.nL
        \*Lint (*\*Vcompar\*L) (const void *, const void *)\|);\*O
.PP
\*Lvoid *tdelete(
.nL
        \*Lconst void *\*Vkey\*L,
.nL
        \*Lvoid **\*Vrootp\*L,
.nL
        \*Lint (*\*Vcompar\*L) (const void *, const void *)\|);\*O
.PP
\*Lvoid twalk(
.nL
	\*Lconst void *\*Vroot\*L,
.nL
        \*Lvoid (*\*Vaction\*L) (\*Lconst void *, VISIT, int)\|);\*O
.sE
.SH PARAMETERS
.PP
.VL
.LI "\*Vkey\*O"
Points to a key that specifies the entry to be searched in the binary tree.
.LI "\*Vrootp\*O"
Points to a variable that points to the root of the binary tree.
.LI "\*Vcompar\*O"
Specifies the name (that you supply) of a comparison function
(\*Lstrcmp(\|)\*O, for example). This function is called with two
parameters that point to the data undergoing comparison in the binary tree.
.LI "\*Vroot\*O"
Points to the root of the binary tree to be walked.
.LI "\*Vaction\*O"
The name of a routine to be invoked at each node
during a walk through the binary tree.
.LE
.SH DESCRIPTION
.PP
.iX "tsearch function"
.iX "tfind function"
.iX "tdelete function"
.iX "twalk function"
.iX "binary search trees" "managing"
.iX "managing binary search trees"
.iX "search trees"
.iX "trees, binary search"
The \*Ltsearch(\|)\*O, \*Ltfind(\|)\*O, \*Ltdelete(\|)\*O and
\*Ltwalk(\|)\*O functions are used to operate on binary search trees.
Comparisons are done with a function that you supply.  The address of
that supplied function is passed as the \*Vcompar\*O parameter in the
\*Ltsearch(\|)\*O, \*Ltfind(\|)\*O, and \*Ltdelete(\|)\*O functions.
The compare function is called with two parameters that point to
objects that are compared during the tree search.  This function
returns an integer less than, equal to, or greater than 0 (zero),
depending on whether the object pointed to by the first parameter is
less than, equal to, or greater than the object pointed to by the
second parameter.
.PP
The \*Ltsearch(\|)\*O function is used to build and search a binary
tree. The \*Vkey\*O parameter is a pointer to an entry
that is to be found in the tree or stored in the tree.  When an entry
in the tree is found that matches \*Vkey\*O, a pointer to the entry is
returned.  If a matching entry is not found, the
value pointed to by \*Vkey\*O is inserted into the
tree in its proper place, and a pointer to the inserted key is
returned. Only pointers are copied, so the calling routine must store
the data.  The \*Vrootp\*O parameter points to a variable that points
to the root of a binary tree.  A null pointer value for the variable
pointed to by \*Vrootp\*O denotes an empty tree; in this case, the
variable is set to point to the node which will be at the root of
the new tree.
.PP
As with \*Ltsearch(\|)\*O, \*Ltfind(\|)\*O searches for an entry in
the binary tree, returning a pointer to that entry when a match is
found.  However, when \*Vkey\*O is not matched, \*Ltfind(\|)\*O
returns a null pointer.
.PP
The \*Ltdelete(\|)\*O function deletes a node from a binary search
tree. Parameters for this function are used in the same way as for
the \*Ltsearch(\|)\*O function. The variable pointed to by the
\*Vrootp\*O parameter is changed when the deleted node was the root of the
binary tree.  The \*Ltdelete(\|)\*O function returns a pointer to
the parent of the deleted node, or a null pointer if the node is not found.
.PP
The \*Ltwalk(\|)\*O function traverses a binary search
tree.  The \*Vroot\*O parameter specifies the root of the binary tree
to be traversed. Any node in a binary tree can be used as the root
node for a walk below that node.  The
\*Vaction\*O parameter is the name of a routine to be invoked at each
node.  This \*Vaction\*O routine is called with three parameters.  The
first parameter specifies the address of the visited node.  The second
parameter specifies a value from an \*Lenum\*O data type, which is
defined in the \*Lsearch.h\*O include file as follows:
.PP
.oS
        typedef enum { preorder, postorder, endorder, leaf } VISIT
.oE
.PP
The value of the second parameter in the \*Vaction\*O routine depends
on whether this is the first (\*Lpreorder\*O), second
(\*Lpostorder\*O), or third (\*Lendorder\*O) time that the node has
been visited during a depth-first, left-to-right traversal of the tree,
or whether the node is a leaf.  (A leaf is a node that is not the
parent of another node).  The third parameter in the \*Vaction\*O
routine is the level of the node in the binary tree with the root
being level 0 (zero).
.SH NOTES
.PP
Note that the functions \*Ltsearch(\|)\*O, \*Ltfind(\|)\*O,
\*Ltdelete(\|)\*O, and \*Ltwalk(\|)\*O are reentrant, but care should
be taken to ensure that the functions supplied as the arguments to
\*Vcompar\*O or \*Vaction\*O are also reentrant.
.PP
The comparison function need not compare every byte; consequently,
arbitrary data can be contained in the searched keys in addition to the
values undergoing comparison.
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Trial use.
.LE
.SH RETURN VALUES
.PP
If a node is found, both the
\*Ltsearch(\|)\*O and \*Ltfind(\|)\*O functions return a pointer to it.
If not, the \*Ltfind(\|)\*O function returns a null pointer.
The \*Ltsearch(\|)\*O function inserts the entry and returns a pointer
to the newly inserted entry.
.PP
The \*Ltsearch(\|)\*O function returns a null pointer
when there is not enough space available to create a new node.
.PP
The \*Ltsearch(\|)\*O, \*Ltfind(\|)\*O, and \*Ltdelete(\|)\*O
functions return a null pointer if \*Vrootp\*O is a null pointer on
entry.
.PP
The \*Ltdelete(\|)\*O function returns a pointer to the parent of the
deleted node, or a null pointer if the node is not found.
.PP
No value is returned by the \*Ltwalk(\|)\*O function.
.SH ERRORS
.PP
If any of the following conditions occurs, the \*Ltsearch(\|)\*O,
\*Ltfind(\|)\*O, \*Ltwalk(\|)\*O, or \*Ltdelete(\|)\*O
function sets \*Lerrno\*O to the corresponding value:
.VL 1i
.LI "[ENOMEM]"
Insufficient storage space is available to add an entry to the binary tree.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Lbsearch\*O(3),
\*Lhsearch\*O(3),
\*Llsearch\*O(3),
\*Lqsort\*O(3).
.EQ
delim off
.EN

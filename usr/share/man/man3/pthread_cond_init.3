.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: pthread_cond_init.3,v $ $Revision: 3.3.2.2 $ (DEC) $Date: 1992/05/27 11:06:57 $
.\"
...\" Copyright 1991, Open Software Foundation, Inc. ALL RIGHTS RESERVED.
.wH ********************************************************************
.wH                                                                    *
.wH COPYRIGHT (c) 1990 BY DIGITAL EQUIPMENT CORPORATION,               *
.wH Maynard, Mass.                                                     *
.wH                                                                    *
.wH This document is furnished under a license and may be used and     *
.wH copied only in accordance with the terms of such license and with  *
.wH the inclusion of the above copyright notice. This document or any  *
.wH other copies thereof may not be provided or otherwise made         *
.wH available to any other person. No title to or ownership of the     *
.wH document is hereby transferred.                                    *
.wH                                                                    *
.wH The information in this document is subject to change without      *
.wH notice and should not be construed as a commitment by DIGITAL      *
.wH Equipment Corporation.                                             *
.wH                                                                    *
.wH ********************************************************************
.wH "<routine_section>"
.TH pthread_cond_init 3
.SH NAME
\*Lpthread_cond_init\*O \- Creates a condition variable.
.SH SYNOPSIS
.PP
.sS
#\*Linclude <pthread.h>\*O
.fS "int pthread_cond_init"
.dS "pthread_cond_t"
\*V*cond\*L
.dE
.dS "pthread_condattr_t"
\*Vattr\*O
.dE
.fE
.sE
.PP
.wH "<endformat>"
.SH PARAMETERS
.PP
.VL 5m
.LI "\*Vcond\*O"
Condition variable that is created.
.LI "\*Vattr\*O"
Condition variable attributes object that defines the characteristics
of the condition variable created. If you specify
\*Lpthread_condattr_default\*O, default attributes are used.
.LE
.wH "<endparameters>"
.SH DESCRIPTION
.iX "Creating a condition variable"
.iX "Initializing a condition variable"
.iX "Condition variable" "creating"
.iX "Condition variable" "definition of"
.iX "Predicate"
.PP
This routine creates and initializes a condition variable. A condition
variable is a synchronization object used in conjunction with a mutex. A
mutex controls access to shared data; a condition variable allows threads to
wait for that data to enter a defined state. The state is defined by a
Boolean expression called a \*Lpredicate\*O.
.gL "predicate"
.iX "Predicate" "definition of"
.iX "Condition variable" "definition of predicate"
.PP
A condition variable is signaled or broadcast to indicate that a predicate
might have become true. The broadcast operation indicates that all waiting
threads should resume and reevaluate the predicate. The signal operation is
used when any one waiting thread can continue.
.PP
If a thread that holds a mutex determines that the shared data is not in the
correct state for it to proceed (the associated predicate is not true), it
waits on a condition variable associated with the desired state. Waiting on
the condition variable automatically releases the mutex so that other
threads can modify or examine the shared data. When a thread modifies the
state of the shared data so that a predicate might be true, it signals or
broadcasts on the appropriate condition variable so that threads waiting for
that predicate can continue.
.PP
It is important that all threads waiting on a particular condition variable
at any time hold the \*Esame\*O mutex. If they do not, the behavior of
the wait operation is unpredictable (an implementation can use the mutex to
control internal access to the condition variable object). However, it is
legal for a client to store condition variables and mutexes and later reuse
them in different combinations. The client must ensure that no threads use
the condition variable with the old mutex. At any time, an arbitrary number
of condition variables can be associated with a single mutex, each
representing a different predicate of the shared data protected by that
mutex.
.PP
Condition variables are not owned by a particular thread. Any associated
storage is not automatically deallocated when the creating thread
terminates.
.SH RETURN VALUES
.PP
If an error condition occurs, this routine returns \-1, the
condition variable is not initialized, and the contents of \*Vcond\*O
are undefined. This routine sets \*Eerrno\*O to the corresponding
error value. Possible return values are as follows:
.sp
.TS
tab(@);
l l lw(3.0i).
\*LReturn@Error@Description\*O
_
\00@@Successful completion.
\&\-1@[\*LEAGAIN\*O]@T{
The system lacks the necessary resources to initialize another condition
variable.
T}
\&@@T{
The system-imposed limit on the total number of condition variables
under execution by a single user is exceeded.
T}
\&\-1@[\*LENOMEM\*O]@T{
Insufficient memory exists to initialize the condition variable.
T}
.TE
.wH "<endnas_return>"
.cS
.SH EXAMPLES
.PP
.oS
int pthread_cond_init (pthread_cond_t *cond,
 pthread_condattr_t attr);
.oE
.cE
.wH "<endnas_examples>"
.SH RELATED INFORMATION
.PP
\*Lpthread_cond_broadcast\*O(3),
\*Lpthread_cond_destroy\*O(3),
\*Lpthread_cond_signal\*O(3),
\*Lpthread_cond_timedwait\*O(3),
\*Lpthread_cond_wait\*O(3)
.EQ
delim off
.EN

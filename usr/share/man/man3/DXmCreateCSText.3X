.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: DXmCreateCSText.3X,v $ $Revision: 3.4.5.5 $ (DEC) $Date: 1993/12/02 19:32:55 $
.\"
.TH DXmCreateCSText 3X
.SH NAME
\*LDXmCreateCSText\*O \- Creates a compound string text widget.
.SH SYNOPSIS
.PP
.iX "DXmCreateCSText"
.sS
\*LWidget DXmCreateCSText (\*Vparent\*L, \*Vname\*L, \*Vargs\*L, \*Vnum_args\*L)
        Widget   \*Vparent\*L;
        char     *\*Vname\*L;
        Args     *\*Vargs\*L;
        int      \*Vnum_args\*L;\*O
.sE
.SH PARAMETERS
.PP
.VL 4m
.LI "\*Vparent\*O"
The identifier (widget ID) of the parent widget.
.LI "\*Vname\*O"
The name of the created widget.
.LI "\*Vargs\*O"
The application override argument list.
You can set the following widget-specific resources in the \*Vargs\*O:
.IP
.oS
Boolean              DXmNbidirectionalCursor;
int                  DXmNeditingPath;
XtCallbackList       DXmNnofontCallback;
int                  DXmNtextPath;
XtCallbackList       XmNactivateCallback;
Boolean              XmNautoShowCursorPosition;
int                  XmNblinkRate;
int                  XmNcolumns;
DXmCSTextPosition    XmNcursorPosition;
Boolean              XmNcursorPositionVisible;
Boolean              XmNeditable;
int                  XmNeditMode;
XtCallbackList       XmNfocusCallback;
XmFontlist           XmNfontList;
XtCallbackList       XmNlosingFocusCallback;
Dimension            XmNmarginHeight;
Dimension            XmNmarginWidth;
int                  XmNmaxLength;
XtCallbackList       XmNmodifyVerifyCallback;
XtCallbackList       XmNmotionVerifyCallback;
Boolean              XmNpendingDelete
Boolean              XmNresizeHeight:
Boolean              XmNresizeWidth;
int                  XmNrows;
Boolean              XmNscrollHorizontal;
Boolean              XmNscrollLeftSide;
Boolean              XmNscrollTopSide;
Boolean              XmNscrollVertical;
XmRPointer           XmNselectionArray
int                  XmNselectionArrayCount
int                  XmNselectThreshold
DXmCSTextPosition    XmNtopPosition;
XmString             XmNvalue;
XtCallbackList       XmNvalueChangedCallback;
Boolean              XmNwordWrap;
.oE
.LI "\*Vnum_args\*O"
An integer that represents the number of arguments in the
application override argument list.
.LE
.SH DESCRIPTION
.PP
The \*LDXmCreateCSText\*O routine creates a compound string text widget that
provides your application with text editing capabilities, including the
ability for users to enter and edit text in the same character set and
writing direction used throughout the user interface.
By default the text window expands or shrinks as the user enters or
deletes text characters.  Note that the text window does not
shrink below the initial size set at creation time.
.SS Resources
.VL 4m
.LI "\*LDXmNbidirectionalCursor\*O"
A Boolean resource that, when True, specifies that the shape of the
cursor at the insertion point will be dependent on the current editing
direction.  Access is CSG.  The default is False.
.LI "\*LDXmNeditingPath\*O"
A read-only value that holds the current editing text path (direction) in
the compound string text widget.  Initially, it is set to be equal
to \*LDXmNtextPath\*O.  This resource is used only if \*LXmNvalue\*O is Null.
.IP
.TS
tab(@);
lfHB lfHB
lw(2.25i) lw(2.0i) .
_
.sp
Value@Description
.sp
_
.sp
T{
\*LDXmDIRECTION_RIGHT_DOWN\*O (0)
T}@T{
The direction of the text path is right and then down.
T}
.sp
T{
\*LDXmDIRECTION_LEFT_DOWN\*O (1)
T}@T{
The direction of the text path is left and then down.
T}
.sp
_
.TE
.IP
The default is \*LDXmDIRECTION_RIGHT_DOWN\*O, or 0.  Access is CG.
.LI "\*LDXmNnofontCallback\*O"
Callback made when the compound string text widget cannot find the font
required to display text assigned (tagged) with a specific character set.
The reason for this callback is \*LDXmCR_NOFONT\*O.
Other callback fields are as follows:
.IP
.TS
tab(@);
lfHB lfHB
lw(1.0i) lw(3.0i) .
_
.sp
Field@Description
.sp
_
.sp
event@T{
A pointer to the XEvent structure that generated the callback.
T}
.sp
charset@T{
A character set identifier for which the widget has no matching font in
its font list.  The callback modifies the widget font list to include
an entry for the required character set.
T}
.sp
charset_len@T{
The length of the \*Vcharset\*O @string.
T}
.sp
_
.TE
.IP
The default is Null. Access is C.
.LI "\*LDXmNtextPath\*O"
A read-only value that holds the main text path (direction) of the
text in the compound text widget. This resource is used only if
\*LXmNvalue\*O is Null.  It is set from the initial compound string
value of the widget.  The values for this resource are as follows:
.IP
.TS
tab(@);
lfHB lfHB
lw(2.25i) lw(2.0i) .
_
.sp
Value@Description
.sp
_
.sp
T{
\*LDXmDIRECTION_RIGHT_DOWN\*O (0)
T}@T{
The direction of the text path is right and then down.
T}
.sp
T{
\*LDXmDIRECTION_LEFT_DOWN\*O (1)
T}@T{
The direction of the text path is left and then down.
T}
.sp
_
.TE
.IP
The default is \*LDXmDIRECTION_RIGHT_DOWN\*O, or 0. Access is CG.
.LI "\*LXmNactivateCallback\*O"
Callback (or callbacks) made when the user activates the CSText widget.
The reason for this callback is \*LXmCR_ACTIVATE\*O and the associated
callback structure is \*LDXmCSTextCallbackStruct\*O.
The default is Null. Access is C.
.LI "\*LXmNautoShowCursorPosition\*O"
A Boolean resource that, when True, ensures that the visible text
contains the cursor.  The default is True. Access is CSG.
.LI "\*LXmNblinkRate\*O"
 An integer indicating the blink rate of the text cursor in milliseconds.
The default is 500 milliseconds. Access is CSG.
.LI "\*LXmNcolumns\*O"
The width, in characters, of the window.  The default is 20 characters
(if no width is specified with the \*LXmNwidth\*O resource).  Access is CSG.
.LI "\*LXmNcursorPosition\*O"
An integer indicating the current location of the cursor.  The
default is 0. Access is CSG.
.LI "\*LXmNcursorPositionVisible\*O"
A Boolean resource that, when True, specifies that the cursor position
is marked by a blinking text cursor.  The default is True.  Access is CSG.
.LI "\*LXmNeditable\*O"
A Boolean resource that, when True, indicates that the user can edit the
text in the compound string text widget.  When False, the user cannot edit the
text.  Access is CSG.  The default is True.
.LI "\*LXmNeditMode\*O"
Specifies the set of keyboard bindings used for CSText.
The default set of keyboard bindings is \*LXmSINGLE_LINE_EDIT\*O.
For multiline text, use \*LXmMULTI_LINE_EDIT\*O.  Access is CSG.
.LI "\*LXmNfocusCallback\*O"
Callback (or callbacks) made when the compound string text widget
has accepted the input focus.  The reason for this callback is
\*LXmCR_FOCUS\*O and the associated callback structure is
\*LDXmCSTextCallbackStruct\*O. The default is Null. Access is C.
.LI "\*LXmNfontList\*O"
The font list to be used for the compound string text widget.
The default is the current server font list (DXmDefaultFont). Access is CSG.
.LI "\*LXmNlosingFocusCallback\*O"
Callback (or callbacks) made when the compound string text
widget loses input focus.  The callback reason is \*LXmCR_LOSING_FOCUS\*O
and the associated callback structure is \*LXmTextVerifyCallbackStruct\*O.
Other callback fields are as follows:
.IP
.TS
tab(@);
lfHB lfHB
lw(1.0i) lw(3.0i) .
_
.sp
Field@Description
.sp
_
.sp
event@T{
A pointer to the XEvent that generated this callback.
T}
.sp
doit@T{
Controls whether the action that invoked the callback is performed.
Setting this field to False negates the action.
T}
.sp
currInsert@T{
The current position of the insertion cursor.
T}
.sp
_
.TE
.IP
The default is Null. Access is C.
.LI "\*LXmNmarginHeight\*O"
The number of pixels between the top or bottom edge of the window
and the text.  The default is 6 pixels.  Access is CSG.
.LI "\*LXmNmarginWidth\*O"
The number of pixels between the left or right edge of the window
and the text.  The default is 6 pixels.  Access is CSG.
.LI "\*LXmNmaxLength\*O"
The maximum length of the text, in characters, in the compound string text
widget.  The default is the largest integer (MAXINT).  Access is CSG.
.LI "\*LXmNmodifyVerifyCallback\*O"
Callback (or callbacks) made before text is deleted from or
inserted into the CSText widget. The callback reason is
\*LXmCR_MODIFYING_TEXT_VALUE\*O and the associated callback structure is
\*LXmTextVerifyCallbackStruct\*O. Other callback fields are as follows:
.IP
.TS
tab(@);
lfHB lfHB
lw(1.0i) lw(3.0i) .
_
.sp
Field@Description
.sp
_
.sp
event@T{
A pointer to the XEvent that generated this callback.
T}
.sp
doit@T{
Controls whether the action that invoked the callback is performed.
Setting this field to False negates the action.
T}
.sp
currInsert@T{
The current position of the insertion cursor.
T}
.sp
newInsert@T{
The position of the cursor after the action has been completed.
T}
.sp
startPos@T{
The starting position of the text that is to be modified.
T}
.sp
endPos@T{
The ending position of the text that is to be modified.  If no text is
replaced or deleted, the value is the same as \*VstartPos\*O.
T}
.sp
text@T{
A pointer to an \*LXmString\*O holding the text to be inserted.
T}
.sp
_
.TE
.IP
The default is Null.  Access is C.
.LI "\*LXmNmotionVerifyCallback\*O"
Callback (or callbacks) made before the cursor is moved to another position.
The callback reason is \*LXmCR_MOVING_INSERT_CURSOR\*O and the associated
callback structure is \*LXmTextVerifyCallbackStruct\*O.  Other callback
fields are as follows:
.IP
.TS
tab(@);
lfHB lfHB
lw(1.0i) lw(3.0i) .
_
.sp
Field@Description
.sp
_
.sp
event@T{
A pointer to the XEvent that generated this callback.
T}
.sp
doit@T{
Controls whether the action that invoked the callback is performed.
Setting this field to False negates the action.
T}
.sp
currInsert@T{
The current position of the insertion cursor.
T}
.sp
newInsert@T{
The position of the cursor after the action has been completed.
T}
.sp
_
.TE
The default is Null.  Access is C.
.LI "\*LXmNpendingDelete\*O"
A Boolean resource that, when True, specifies that selected text containing
the insertion point is to be deleted when new text is entered.  The default
is True.  Access is CSG.
.LI "\*LXmNresizeHeight\*O"
A Boolean resource that specifies whether the compound string text widget
resizes its height to accommodate all the text contained in the widget.
When True, the compound string text widget resizes its height and the
text is always displayed starting from the first position in the source,
even if instructed otherwise.  This resource is ignored if
\*LXmNscrollVertical\*O is True.  The default is False.  Access is CSG.
.LI "\*LXmNresizeWidth\*O"
A Boolean resource that specifies whether the compound string text widget
resizes its width to accommodate all the text contained in the widget.
When True, the compound string text widget resizes its width.
This resource is ignored if \*LXmNwordWrap\*O is True.  The default is
False.  Access is CSG.
.LI "\*LXmNrows\*O"
The height, in characters, of the window.  This resource is ignored
if the \*LXmNeditMode\*O resource is \OXmSINGLE_LINE_EDIT\*O.
The default is 1 character (if no height has been specified with the
\*LXmNheight\*O resource).  Access is CSG.
.LI "\*LXmNscrollHorizontal\*O"
A Boolean resource that, when True, adds a scroll bar that allows the
user to scroll through the text horizontally.  The default is False.
Access is CG.
.IP
This resource is valid only for the \*LDXmCreateScrolledCSText\*O routine.
.LI "\*LXmNscrollLeftSide\*O"
A Boolean resource that, when True, places the vertical scroll bar on the
left side of the compound string text window.  This resource is ignored if
the \*LXmNscrollVertical\*O resource is False.  Access is CG.
.IP
This resource is valid only for the \*LDXmCreateScrolledCSText\*O routine.
.LI "\*LXmNscrollTopSide\*O"
A Boolean resource that, when True, places the horizontal
scroll bar at the top side of the compound string text window.
The default is False. Access is CG.
.IP
This resource is valid only for the \*LDXmCreateScrolledCSText\*O routine.
.LI "\*LXmNscrollVertical\*O"
A Boolean resource that, when True, adds a scroll bar that allows the user
to scroll through the text vertically. The default is False.  Access is CG.
.IP
This resource is valid only for the \*LDXmCreateScrolledCSText\*O routine.
.LI "\*LXmNselectionArray\*O"
Specifies actions that result from multiple mouse clicks.
The value of this resource is an array of \*LXmTextScanType\*O
elements.  The following values (listed in the order they occur in the
default array) indicate the possible actions:
.IP
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Value@Description
.sp
_
.sp
T{
\*LXmSELECT_POSITION\*O
T}@T{
Resets the insertion cursor position.
T}
.sp
T{
\*LXmSELECT_WORD\*O
T}@Selects a word.
.sp
T{
\*LXmSELECT_LINE\*O
T}@Selects a line of text.
.sp
T{
\*LXmSELECT_ALL\*O
T}@Selects all of the text.
.sp
_
.TE
.LI "\*LXmNselectionArrayCount\*O"
The number of elements in the \*LXmNselectionArray\*O resource.
The default is 4.  Access is CSG.
.LI "\*LXmNselectThreshold\*O"
The number of pixels of motion required to select the next character
during a mouse click and drag operation.  The default is 5 pixels.
Access is CSG.
.LI "\*LXmNtopPosition\*O"
Displays the position of text at the top of the window.  The default is 0.
Access is CSG.
.LI "\*LXmNvalue\*O"
The text contents of the compound string text widget.  The default is Null.
When Null, the text path and editing paths are set to
\*LDXmDIRECTION_RIGHT_DOWN\*O.
Otherwise, the text and editing paths are set from the direction of the
first segment of the value.  The access is CSG.
.LI "\*LXmNvalueChangedCallback\*O"
Callback (or callbacks) made when the value of the compound string text
widget changes.  The reason for this callback is \*LXmCR_VALUE_CHANGED\*O
and the associated callback structure is \*LDXmCSTextCallbackStruct\*O.
The default is Null.  Access is C.
.LI "\*LXmNwordWrap\*O"
A Boolean resource that specifies whether word wrap is set.  When True,
lines are broken at word breaks and text does not run off the right edge of
the window.  This resource is ignored if the \*LXmNeditMode\*O resource is
set to \*LXmSINGLE_LINE_EDIT\*O.  The default is False.  Access is CSG.
.LE
.SS Resource Exceptions
The \*LDXmCSText\*O widget supports the Core resources \*LXmNwidth\*O and
\*LXmNheight\*O differently in that the defaults for both resources
are set as large as necessary to display the rows and columns with the given
margin width and margin height.
.SS Callback Information
Following are descriptions of the two callback structures used by the
CSText widget:
.PP
\*LDXmCSTextCallback\*O Structure
.PP
.oS
\*Ltypedef struct
 {
      int           \*Vreason\*L;
      XEvent        *\*Vevent\*L;
      char          *\*Vcharset\*L;
      unsigned int  \*Vcharset_len\*L;
 } DXmCSTextCallbackStruct;\*O
.oE
.PP
The parameters are as follows:
.VL 4m
.LI "\*Vreason\*O"
An integer set to the callback reason.
.LI "\*Vevent\*O"
A pointer to the XEvent structure that generated the callback.
.LI "\*Vcharset\*O"
A character set identifier for which the widget has no matching font in its
font list.  The callback modifies the widget font list to
include an entry for the required character set.
.LI "\*Vcharset_len\*O"
The length of the \*Vcharset\*O string.
.LE
.PP
The following table lists the reasons and valid callback fields:
.PP
.TS
tab(@);
lfHB lfHB lfHB
l l l .
_
.sp
Reason@Description@Valid Fields
.sp
_
.sp
T{
\*LDXmCR_NOFONT\*O
T}@T{
There was no entry in the widget font list for the required character set.
T}@T{
reason, event, charset, charset_len
T}
.sp
T{
\*LXmCR_ACTIVATE\*O
T}@T{
The user activated the CSText widget.
T}@T{
reason, event
T}
.sp
T{
\*LXmCR_FOCUS\*O
T}@T{
The compound string text widget has received the input focus.
T}@T{
reason, event
T}
.sp
T{
\*LXmCR_HELP\*O
T}@T{
The user selected help.
T}@T{
reason, event
T}
.sp
T{
\*LXmCR_VALUE_CHANGED\*O
T}@T{
The user changed the value of the text in the compound string text widget.
T}@T{
reason
T}
.sp
_
.TE
.PP
\*LXmTextVerifyCallback\*O Structure
.PP
.oS
\*Ltypedef struct
 {
      int                \*Vreason\*L;
      XEvent             *\*Vevent\*L;
      Boolean            \*Vdoit\*L;
      DXmCSTextPosition  \*VcurrInsert\*L, \*VnewInsert\*L;
      DXmCSTextPosition  \*VstartPos\*L, \*VendPos\*L;
      XmString           \*Vtext\*L;
 } XmTextVerifyCallbackStruct, *XmTextVerifyPtr;\*O
.oE
.PP
.VL 4m
.LI "\*Vreason\*O"
An integer set to the callback reason.
.LI "\*Vevent\*O"
A pointer to the XEvent structure that generated the callback.
.LI "\*Vdoit\*O"
Controls whether the action that invoked the callback is
performed.  Setting this field to False negates the action.
.LI "\*VcurrInsert\*O"
The current position of the insertion cursor.
.LI "\*VnewInsert\*O"
The position of the cursor after the action has been completed.
(Used only by the \*LXmNmodifyVerifyCallback\*O and
\*LXmNmotionVerifyCallback\*O callback routines.)
.LI "\*VstartPos\*O"
The starting position of the text that is to be modified.
(Used only by the \*LXmNmodifyVerifyCallback\*O callback routine.)
.LI "\*VendPos\*O"
The ending position of the text that is to be modified.
If no text is replaced or deleted, the value is the same as \*VstartPos\*O.
(Used only by the \*LXmNmodifyVerifyCallback\*O callback routine.)
.LI "\*Vtext\*O"
A pointer to a compound string containing the text that is to be inserted.
(Used only by the \*LXmNmodifyVerifyCallback\*O callback routine.)
.LE
.PP
The following table lists the reasons and valid callback fields:
.TS
tab(@);
lfHB lfHB lfHB
lw(1.5i) lw(1.2i) lw(1.2i) .
_
.sp
Reason@Description@Valid Fields
.sp
_
.sp
T{
\*LXmCR_LOSING_FOCUS\*O
T}@T{
The compound string text widget has lost the input focus.
T}@T{
reason, event, doit, currInsert
T}
.sp
T{
\*LXmCR_MODIFYING_TEXT_VALUE\*O
T}@T{
The user is deleting or inserting text.
T}@T{
reason, event, doit, currInsert, newInsert, startPos, endPos, text
T}
.sp
T{
\*LXmCR_MOVING_INSERT_CURSOR\*O
T}@T{
The user is moving the insertion cursor to another position.
T}@T{
reason, event, doit, currInsert, newInsert
T}
.sp
_
.TE
.SS Compound String Text Translation Table
.TS
tab(@);
lfHB lfHB
l l .
_
.sp
Event@Action Routine
.sp
_
.sp
BSelect Press:@grab-focus()
BSelect Motion:@extend-adjust()
BSelect Release:@extend-end()
.sp
BExtend Press:@extend-start()
BExtend Motion:@extend-adjust()
BExtend Release:@extend-end()
.sp
BToggle Press:@move-destination()
.sp
BDrag Press:@process-bdrag()
BDrag Motion:@secondary-adjust()
BDrag Release:@copy-to()
.sp
MCtrl BDrag Press:@secondary-start()
MCtrl BDrag Motion:@secondary-adjust()
MCtrl BDrag Release:@copy-to()
.sp
MAlt BDrag Press:@secondary-start()
MAlt BDrag Motion:@secondary-adjust()
MAlt BDrag Release:@move-to()
.sp
KUp:@process-up()
MShift KUp:@process-shift-up()
MCtrl KUp:@backward-paragraph()
MShift MCtrl KUp:@backward-paragraph(extend)
.sp
KDown:@process-down()
MShift KDown:@process-shift-down()
MCtrl KDown:@forward-paragraph()
MShift MCtrl KDown:@forward-paragraph(extend)
.sp
KLeft:@left-character()
MShift KLeft:@key-select(left)
MCtrl KLeft:@left-word()
MShift MCtrl KLeft:@left-word(extend)
.sp
KRight:@right-character()
MShift KRight:@key-select(right)
MCtrl KRight:@right-word()
MShift MCtrl KRight:@right-word(extend)
.sp
KPageUp:@previous-page()
MShift KPageUp:@previous-page(extend)
.sp
KPageDown:@next-page()
MShift KPageDown:@next-page(extend)
.sp
MCtrl KPageUp:@page-horizontal-backward()
MCtrl KPageDown:@page-horizontal-forward()
.sp
MAlt KLeft:@left-side-of-line()
MShift Malt KLeft:@left-side-of-line(extend)
.sp
MAlt KRight:@right-side-of-line()
MShift MAlt KRight:@right-side-of-line(extend)
.sp
MCtrl MAlt KLeft:@extreme-left-of-file()
MShift MCtrl MAlt KLeft:@extreme-left-of-file(extend)
.sp
MCtrl MAlt KRight:@extreme-right-of-file()
MShift MCtrl MAlt KRight:@extreme-right-of-file(extend)
.sp
Malt <Key>F17:@toggle-text-path
<Key>F17:@toggle-editing-path-move()
MShift <Key>F17:@toggle-editing-path-stay
.sp
KTab:@process-tab()
KNextField:@next-tab-group()
KPrevField:@prev-tab-group()
.sp
KEnter:@process-return()
KActivate:@activate()
.sp
KDelete:@delete-next-character()
KBackSpace:@delete-previous-character()
.sp
KAddMode:@toggle-add-mode()
.sp
KSpace:@self-insert()
KSelect:@set-anchor()
KExtend:@key-select()
MAny KCancel:@process-cancel()
KClear:@clear-selection()
KSelectAll:@select-all()
KDeselectAll:@deselect-all()
.sp
KCut:@cut-clipboard()
KCopy:@copy-clipboard()
KPaste:@paste-clipboard()
.sp
KPrimaryCut:@cut-primary()
KPrimaryCopy:@copy-primary()
KPrimaryPaste:@copy-primary()
.sp
KQuickCut:@quick-cut-set()
KQuickCopy:@quick-copy-set()
KQuickPaste:@quick-copy-set()
KQuickExtend:@do-quick-action()
.sp
KHelp:@Help()
.sp
KAny:@self-insert()
.sp
_
.TE
.SS Action Routines
.VL 4m
.LI "\*Lactivate():\*O"
Calls the callbacks for \*LXmNactivateCallback\*O.
.LI "\*Lbackward-character():\*O"
Moves the insertion cursor one character to the left.
.LI "\*Lbackward-paragraph(extend):\*O"
If \*LXmNeditMode\*O is \*LXmMULTI_LINE_EDIT\*O and this action is called
with no argument, moves the insertion cursor to the first non-whitespace
character following the first previous blank line or beginning of the
text.  If the insertion cursor is already at the beginning of a paragraph,
moves the insertion cursor to the beginning of the previous paragraph.
.IP
If \*LXmNeditMode\*O is \*LXmMULTI_LINE_EDIT\*O and this action is called
with an argument of "extend", moves the insertion cursor as in the case of no
argument and extends the selection.
.LI "\*Lbackward-word(extend):\*O"
If this action is called with no argument, moves the insertion cursor to
the first non-whitespace character after the first whitespace character
to the left or the beginning of the line.  If the insertion cursor is
already at the beginning of a word, moves the insertion cursor to
the beginning of the previous word.
.IP
If called with an argument of "extend", moves the insertion cursor as in
the case of no argument and extends the selection.
.LI "\*Lbeep():\*O"
Causes the terminal to beep.
.LI "\*Lbeginning-of-file(extend):\*O"
If this action is called with no argument, moves the insertion cursor to
the beginning of the text.
.IP
If called with an argument of "extend", moves the insertion cursor as in
the case of no argument and extends the selection.
.LI "\*Lbeginning-of-line(extend):\*O"
If this action is called with no argument, moves the insertion cursor to
the beginning of the line.
.IP
If called with an argument of "extend", moves the insertion cursor as in
the case of no argument and extends the selection.
.LI "\*Lclear-selection():\*O"
Clears the current selection by replacing each character except <Return>
with a <space> character.
.LI "\*Lcopy-clipboard():\*O"
Copies the current selection to the clipboard.
.LI "\*Lcopy-primary():\*O"
Copies the primary selection to the insertion cursor.
.LI "\*Lcopy-to():\*O"
If a secondary selection exists, copies the secondary selection to the
insertion cursor.  If no secondary selection exists, copies the primary
selection to the pointer location.
.LI "\*Lcut-clipboard():\*O"
Cuts the current selection to the clipboard.
.LI "\*Lcut-primary():\*O"
Cuts the primary selection to the insertion cursor.
.LI "\*Ldelete-next-character():\*O"
If \*LXmNpendingDelete\*O is True and the cursor is inside the selection,
deletes the entire selection; otherwise, deletes the character following
the insert cursor.
.LI "\*Ldelete-next-word():\*O"
If \*LXmNpendingDelete\*O is True and the cursor is inside the selection,
deletes the entire selection; otherwise, deletes the characters following
the insertion cursor to the next space, tab or end of line character.
.LI "\*Ldelete-previous-character():\*O"
If \*LXmNpendingDelete\*O is True and the cursor is inside the selection,
deletes the entire selection; otherwise, deletes the character of text
immediately preceding the insertion cursor.
.LI "\*Ldelete-previous-word():\*O"
If \*LXmNpendingDelete\*O is True and the cursor is inside the selection,
deletes the entire selection; otherwise, deletes the characters preceding
the insertion cursor to the next space, tab or beginning of line character.
.LI "\*Ldelete-selection():\*O"
Deletes the current selection.
.LI "\*Ldelete-to-end-of-line():\*O"
Deletes the characters following the insertion cursor to the next end
of line character.
.LI "\*Ldelete-to-start-of-line():\*O"
Deletes the characters preceding the insertion cursor to the previous
beginning of line character.
.LI "\*Ldeselect-all():\*O"
Deselects the current selection.
.LI "\*Ldo-quick-action():\*O"
Marks the end of a secondary selection.  Performs the quick action
initiated by the quick-copy-set or quick-cut-set action.
.LI "\*Lend-of-file(extend):\*O"
If this action is called with no argument, moves the insertion cursor to
the end of the text.
.IP
If called with an argument of "extend", moves the insertion cursor as in
the case of no argument and extends the selection.
.LI "\*Lend-of-line(extend):\*O"
If this action is called with no argument, moves the insertion cursor to
the end of the line.
.IP
If called with an argument of "extend", moves the insertion cursor as in
the case of no argument and extends the selection.
.LI "\*Lextend-adjust():\*O"
Selects text from the anchor to the pointer position and deselects text
outside that range.  Moving the pointer over several lines selects text
from the anchor to the end of each line the pointer moves over and up to
the pointer position on the current line.
.LI "\*Lextend-end():\*O"
Moves the insertion cursor to the position of the pointer.
.LI "\*Lextend-start():\*O"
Adjusts the anchor using the balance-beam method.  Selects text from the
anchor to the pointer position and deselects text outside that range.
.LI "\*Lextreme-left-of-file(extend):\*O"
If this action is called with no argument and the current text path is
left to right, moves the insertion cursor to the beginning of the text.
.IP
If called with no argument and the current text path is right to left,
moves the insertion cursor to the end of the text.
.IP
If called with an argument of "extend", moves the insertion cursor as in
the case of no argument and extends the selection.
.IP
The text path can be initially set using the \*LDXmNtextPath\*O resource
or interactively (see toggle-text-path).
.LI "\*Lextreme-right-of-file(extend):\*O"
If this action is called with no argument and the current text path is
left to right, moves the insertion cursor to the end of the text.
.IP
If called with no argument and the current text path is right to left,
moves the insertion cursor to the beginning of the text.
.IP
If called with an argument of "extend", moves the insertion cursor as
in the case of no argument and extends the selection.
.IP
The text path can be set initially using the \*LDXmNtextPath\*O resource
or interactively (see toggle-text-path).
.LI "\*Lforward-character():\*O"
Moves the insertion cursor one character to the right.
.LI "\*Lforward-paragraph(extend):\*O"
If \*LXmNeditMode\*O is \*LXmMULTI_LINE_EDIT\*O, and this action is called
with no argument, moves the insertion cursor the first non-whitespace character
following the next blank line.  If the insertion cursor is already at
the beginning of a paragraph, moves the insertion cursor to the beginning
of the next paragraph.
.IP
If \*LXmNeditMode\*O is \*LXmMULTI_LINE_EDIT\*O and this action is
called with an argument of "extend", moves the insertion
cursor as in the case of no argument and extends the selection.
.LI "\*Lforward-word(extend):\*O"
If this action is called with no argument, moves the insertion cursor to
the first whitespace character or end of line following the next
non-whitespace character.  If the insertion cursor is already at the end
of a word, moves the insertion cursor to the end of the next word.
.IP
If called with an argument of "extend", moves the insertion cursor as in
the case of no argument and extends the selection.
.LI "\*Lgrab-focus():\*O"
This key binding performs the action in the \*LXmNselectArray\*O, depending
on the number of multiple mouse clicks.  The default selection array
ordering is one click to move the insertion cursor to the pointer position,
two clicks to select a word, three clicks to select a line of text, and
four clicks to select all text.
.LI "\*LHelp():\*O"
Calls the callbacks for \*LXmNhelpCallback\*O if any exist.  If there are no
help callbacks for this widget, this action calls the help callbacks
for the nearest ancestor that has them.
.LI "\*Linsert-string(string):\*O"
If \*LXmNpendingDelete\*O is True and the cursor is inside the selection,
deletes the entire selection.  Inserts "string" at the insertion cursor.
.LI "\*Lkey-select(direction):\*O"
If called with an argument of "right", moves the insertion cursor one
character to the right and extends the selection.  If called with an
argument of "left", moves the insertion cursor one character to the left
and extends the selection.  If called with no argument, extends the selection.
.LI "\*Lkill-next-character():\*O"
If \*LXmNpendingDelete\*O is True and the cursor is inside the selection,
deletes the entire selection.  Otherwise, kills the character following
the insertion cursor and stores the character in the cut buffer.
.LI "\*Lkill-next-word():\*O"
If \*LXmNpendingDelete\*O is True and the cursor is inside the selection,
deletes the entire selection.  Otherwise, kills the characters following
the insertion cursor to the next space, tab or end of line character,
and stores the characters in the cut buffer.
.LI "\*Lkill-previous-character():\*O"
If \*LXmNpendingDelete\*O is True and the cursor is inside the selection,
deletes the entire selection.  Otherwise, kills the character of text
immediately preceding the insertion cursor and stores the character in
the cut buffer.
.LI "\*Lkill-previous-word():\*O"
If \*LXmNpendingDelete\*O is True and the cursor is inside the selection,
deletes the entire selection.  Otherwise, kills the characters preceding
the insertion cursor to the next space, tab or beginning of line character,
and stores the characters in the cut buffer.
.LI "\*Lkill-selection():\*O"
Kills the currently selected text and stores the text in the cut buffer.
.LI "\*Lkill-to-end-of-line():\*O"
Kills the characters following the insertion cursor to the next end of
line character and stores the characters in the cut buffer.
.LI "\*Lkill-to-start-of-line():\*O"
Kills the characters preceding the insertion cursor to the next beginning
of line character and stores the characters in the cut buffer.
.LI "\*Lleft-character():\*O"
Moves the insertion cursor one character to the left.
.LI "\*Lleft-side-of-line(extend):\*O"
If this action is called with no argument and the current text path is
left to right, moves the insertion cursor to the beginning of the line.
.IP
If called with no argument and the current text path is right
to left, moves the insertion cursor to the end of the line.
.IP
If called with an argument of "extend", moves the insertion cursor as in
the case of no argument and extends the selection.
.IP
The text path can be set initially using the \*LDXmNtextPath\*O resource
or interactively (see toggle-text-path).
.LI "\*Lleft-word(extend):\*O"
If this action is called with no argument and the current text path is
left to right, moves the insertion cursor to the first non-whitespace
character after the first whitespace character to the left or the
beginning of the line.  If the insertion cursor is already at the
beginning of a word, moves the insertion cursor to the beginning of the
previous word.
.IP
If this action is called with no argument and the current text path is
right to left, moves the insertion cursor to the first whitespace
character or end of line following the next non-whitespace character.
If the insertion cursor is already at the end of a word, moves the insertion
cursor to the end of the next word.
.IP
If called with an argument of "extend", moves the insertion cursor as in
the case of no argument and extends the selection.
.IP
The text path can be set initially using the \*LDXmNtextPath\*O resource
or interactively (see toggle-text-path).
.LI "\*Lmove-destination():\*O"
Moves the insertion cursor to the pointer position without changing any
existing selection.  If no selection exists, also moves the destination
cursor to the pointer position.
.LI "\*Lmove-to():\*O"
If a secondary selection exists, cuts the secondary selection to the
insertion cursor.  If no secondary selection exists, cuts the primary
selection to the pointer location.
.LI "\*Lnew-line():\*O"
If \*LXmNpendingDelete\*O is True and the cursor is inside the selection,
deletes the entire selection.  Inserts a newline at the insertion cursor.
.LI "\*Lnewline-and-backup():\*O"
If \*LXmNpendingDelete\*O is True and the cursor is inside the selection,
deletes the entire selection.  Inserts a newline and repositions the
insertion cursor to the end of the line before the newline.
.LI "\*Lnewline-and-indent():\*O"
If \*LXmNpendingDelete\*O is True and the cursor is inside the selection,
deletes the entire selection.  Inserts a newline and then the same number
of whitespace characters as at the beginning of the previous line.
.LI "\*Lnext-line():\*O"
Moves the insertion cursor to the next line.
.LI "\*Lnext-page(extend):\*O"
If this action is called with no argument, moves the insertion cursor
forward one page.
.IP
If called with an argument of "extend", moves the insertion cursor as
in the case of no argument and extends the selection.
.LI "\*Lnext-tab-group():\*O"
Traverses to the next tab group.
.LI "\*Lpage-horizontal-backward():\*O"
If the current text path is left to right, scrolls the viewing window
left one path of text.
.IP
If the current text path is right to left, scrolls the viewing window
right one path of text.
.IP
The text path can be set initially using the \*LDXmNtextPath\*O resource
or interactively (see toggle-text-path).
.LI "\*Lpage-horizontal-forward():\*O"
If the current text path is left to right, scrolls the viewing window
right one path of text.
.IP
If the current text path is right to left, scrolls the viewing window
left one path of text.
.IP
The text path can be set initially using the \*LDXmNtextPath\*O resource
or interactively (see toggle-text-path).
.LI "\*Lpage-left():\*O"
Scrolls the viewing window left one page of text.
.LI "\*Lpage-right():\*O"
Scrolls the viewing window right one page of text.
.LI "\*Lpaste-clipboard():\*O"
Pastes the contents of the clipboard before the insertion cursor.
.LI "\*Lprev-tab-group():\*O"
Traverses to the previous tab group.
.LI "\*Lprevious-line():\*O"
Moves the insertion cursor to the previous line.
.LI "\*Lprevious-page(extend):\*O"
If this action is called with no argument, moves the insertion cursor
back one page.
.IP
If called with an argument of "extend", moves the insertion cursor as in
the case of no argument and extends the selection.
.LI "\*Lprocess-bdrag()\*O"
The result of this action is determined by several factors:
position of the location cursor, movement of the location cursor,
and the interval between a \*LBDrag\*O press and release.
.IP
This action copies the current selection to the insertion cursor if text
is selected, the location cursor is disjoint from the current selection,
and no motion is detected within a given time interval.
.IP
It performs a secondary selection and copies the selection to
the position where the text was last edited if the cursor is
disjoint from a current selection (if one exists), the time interval
is exceeded, and movement of the location cursor is detected.
.IP
The action drags the current selection if the location cursor is
positioned on the selection, the time interval is exceeded, and
movement of the location cursor is detected.  This action creates
a DragContext object whose \*LXmNexportTargets\*O resource value
includes target types of COMPOUND_TEXT, STRING, and TEXT.
.LI "\*Lprocess-cancel():\*O"
Cancels the current extend-adjust() or secondary-adjust() operation and
leaves the selection state as it was before the operation.
.LI "\*Lprocess-down():\*O"
If \*LXmNeditMode\*O is \*LXmSINGLE_LINE_EDIT\*O and \*LXmNnavigationType\*O
is \*LXmNONE\*O, traverses to the widget below the current one in the tab
group.
.IP
If \*LXmNeditMode\*O is \*LXmMULTI_LINE_EDIT\*O, moves the insertion
cursor down one line.
.LI "\*Lprocess-home():\*O"
Moves the insertion cursor the beginning of the line.
.LI "\*Lprocess-return():\*O"
If \*LXmNeditMode\*O is \*LXmSINGLE_LINE_EDIT\*O, calls the callbacks for
\*LXmNactivateCallback\*O.  If \*LXmNeditMode\*O is \*LXmMULTI_LINE_EDIT\*O,
inserts a newline.
.LI "\*Lprocess-shift-down():\*O"
If \*LXmNeditMode\*O is \*LXmMULTI_LINE_EDIT\*O, moves the insertion
cursor down one line.
.LI "\*Lprocess-shift-up():\*O"
If \*LXmNeditMode\*O is \*LXmMULTI_LINE_EDIT\*O, moves the insertion
cursor up one line.
.LI "\*Lprocess-tab():\*O"
If \*LXmNeditMode\*O is \*LXmSINGLE_LINE_EDIT\*O, traverses to the
next tab group.  If \*LXmNeditMode\*O is \*LXmMULTI_LINE_EDIT\*O, inserts a tab.
.LI "\*Lprocess-up():\*O"
If \*LXmNeditMode\*O is \*LXmSINGLE_LINE_EDIT\*O and \*LXmNnavigationType\*O
is \*LXmNONE\*O, traverses to the widget above the current one in tab group.
.IP
If \*LXmNeditMode\*O is \*LXmMULTI_LINE_EDIT\*O, moves the insertion
cursor up one line.
.LI "\*Lquick-copy-set():\*O"
Marks the beginning of a secondary selection for use in quick copy.
.LI "\*Lquick-cut-set():\*O"
Marks the beginning of a secondary selection for use in quick cut.
.LI "\*Lredraw-display():\*O"
Redraws the contents of the text windows.
.LI "\*Lright-character():\*O"
Moves the insertion cursor one character to the right.
.LI "\*Lright-side-of-line(extend):\*O"
If this action is called with no argument and the current text path is
left to right, moves the insertion cursor to the end of the line.
.IP
If called with no argument and the current text path is right to left,
moves the insertion cursor to the beginning of the line.
.IP
If called with an argument of "extend", moves the insertion cursor as
in the case of no argument and extends the selection.
.IP
The text path can be set initially using the \*LDXmNtextPath\*O
resource or interactively (see toggle-text-path).
.LI "\*Lright-word(extend):\*O"
If this action is called with no argument and the current text path is
left to right, moves the insertion cursor to the first whitespace
character or end of line following the next non-whitespace character.
If the insertion cursor is already at the end of a word, moves the insertion
cursor to the end of the next word.
.IP
If this action is called with no argument and the current text path is
right to left, moves the insertion cursor to the first non-whitespace
character after the first whitespace character to the left or the
beginning of the line.  If the insertion cursor is already at the
beginning of a word, moves the insertion cursor to the beginning of the
previous word.
.IP
If called with an argument of "extend", moves the insertion cursor as in
the case of no argument and extends the selection.
.IP
The text path can be set initially using the \*LDXmNtextPath\*O resource
or interactively (see toggle-text-path).
.LI "\*Lscroll-one-line-down():\*O"
Scrolls the text area down one line.
.LI "\*Lscroll-one-line-up():\*O"
Scrolls the text area up one line.
.LI "\*Lsecondary-adjust():\*O"
Extends the secondary selection to the pointer position.
.LI "\*Lsecondary-notify():\*O"
Copies the secondary selection to the destination cursor.
.LI "\*Lsecondary-start():\*O"
Marks the beginning of a secondary selection.
.LI "\*Lselect-adjust():\*O"
Extends the selection.  The amount of text selected depends on the number
of mouse clicks, as specified by the \*LXmNselectionArray\*O resource.
.LI "\*Lselect-all():\*O"
Selects all text.
.LI "\*Lselect-end():\*O"
Extends the selection.  The amount of text selected depends on the number
of mouse clicks, as specified by the \*LXmNselectionArray\*O resource.
.LI "\*Lselect-start():\*O"
Marks the beginning of a new selection region.
.LI "\*Lself-insert():\*O"
If \*LXmNpendingDelete\*O is True and the cursor is inside the selection,
deletes the entire selection.  Inserts the character associated with the
key pressed at the insertion cursor.
.LI "\*Lset-anchor():\*O"
Resets the anchor point for extended selections.  Resets the destination
of secondary selection actions.
.LI "\*Lset-insertion-point():\*O"
Sets the insertion point.
.LI "\*Lset-selection-hint():\*O"
Sets the text source and location of the selection.
.LI "\*Ltoggle-add-mode():\*O"
Toggles the state of Add Mode.
.LI "\*Ltoggle-editing-path-move():\*O"
Toggles the editing path direction.
.IP
If the direction is toggled for right to left editing, the insertion cursor
stays at the current position.
.IP
If the direction is toggled for left to right editing, the insertion cursor
will move to the right-most position of the previous right to left text.
.LI "\*Ltoggle-editing-path-stay():\*O"
Toggles the editing path direction.  The insertion cursor stays at the
current position.
.LI "\*Ltoggle-text-path():\*O"
Toggles the text path direction of the entire text.  Inverses each
segment's direction, creating a mirror image of the original text.
.LI "\*Ltraverse-home():\*O"
Traverses to the first widget in the tab group.
.LI "\*Ltraverse-next():\*O"
Traverses to the next widget in the tab group.
.LI "\*Ltraverse-prev():\*O"
Traverses to the previous widget in the tab group.
.LI "\*Lunkill():\*O"
Restores last killed text to the position of the insertion cursor.
.LE
.SS Additional Behavior
.VL 4m
.LI "\*V<FocusIn>:\*O"
Draws the insertion cursor and starts blinking the cursor.
.LI "\*V<FocusOut>:\*O"
Stops blinking the cursor.
.LE
.SS Geometry Management
The compound string text widget does not support children.
.SS Resizing
The compound string text widget does not support children.
.SH RETURN VALUES
.PP
The identifier (widget ID) of the created compound string text widget.
.SH RELATED INFORMATION
.PP
\*LDXmCSTextClearSelection\*O(3X),
\*LDXmCSTextCopy\*O(3X),
\*LDXmCSTextCut\*O(3X),
\*LDXmCSTextGetEditable\*O(3X),
\*LDXmCSTextGetInsertionPosition\*O(3X),
\*LDXmCSTextGetLastPosition\*O(3X),
\*LDXmCSTextGetMaxLength\*O(3X),
\*LDXmCSTextGetSelection\*O(3X),
\*LDXmCSTextGetSelectionInfo\*O(3X),
\*LDXmCSTextGetString\*O(3X),
\*LDXmCSTextGetTopPosition\*O(3X),
\*LDXmCSTextHasSelection\*O(3X),
\*LDXmCSTextHorizontalScroll\*O(3X),
\*LDXmCSTextInsert\*O(3X),
\*LDXmCSTextNumLines\*O(3X),
\*LDXmCSTextPaste\*O(3X),
\*LDXmCSTextPosToXY\*O(3X),
\*LDXmCSTextRemove\*O(3X),
\*LDXmCSTextReplace\*O(3X),
\*LDXmCSTextSetAddMode\*O(3X),
\*LDXmCSTextSetEditable\*O(3X),
\*LDXmCSTextSetHighlight\*O(3X),
\*LDXmCSTextSetInsertionPosition\*O(3X),
\*LDXmCSTextSetMaxLength\*O(3X),
\*LDXmCSTextSetSelection\*O(3X),
\*LDXmCSTextSetString\*O(3X),
\*LDXmCSTextSetTopPosition\*O(3X),
\*LDXmCSTextShowPosition\*O(3X),
\*LDXmCSTextVerticalScroll\*O(3X),
\*LDXmCSTextXYToPos\*O(3X)
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: pthread_cond_wait.3,v $ $Revision: 3.3.2.2 $ (DEC) $Date: 1992/05/27 11:07:35 $
.\"
...\" Copyright 1991, Open Software Foundation, Inc. ALL RIGHTS RESERVED.
.wH ********************************************************************
.wH                                                                    *
.wH COPYRIGHT (c) 1990 BY DIGITAL EQUIPMENT CORPORATION,               *
.wH Maynard, Mass.                                                     *
.wH                                                                    *
.wH This document is furnished under a license and may be used and     *
.wH copied only in accordance with the terms of such license and with  *
.wH the inclusion of the above copyright notice. This document or any  *
.wH other copies thereof may not be provided or otherwise made         *
.wH available to any other person. No title to or ownership of the     *
.wH document is hereby transferred.                                    *
.wH                                                                    *
.wH The information in this document is subject to change without      *
.wH notice and should not be construed as a commitment by DIGITAL      *
.wH Equipment Corporation.                                             *
.wH                                                                    *
.wH ********************************************************************
.wH "<routine_section>"
.TH pthread_cond_wait 3
.SH NAME
\*Lpthread_cond_wait\*O \- Causes a thread to wait for a condition variable to be signaled or broadcast.
.SH SYNOPSIS
.PP
.sS
\*L#include <pthread.h>
.fS "int pthread_cond_wait"
.dS "pthread_cond_t"
\*V*cond\*L
.dE
.dS "pthread_mutex_t"
\*V*mutex\*O
.dE
.fE
.sE
.wH "<endformat>"
.SH PARAMETERS
.PP
.VL 5m
.LI "\*Vcond\*O"
Condition variable waited on.
.LI "\*Vmutex\*O"
Mutex associated with the condition variable specified in \*Vcond\*O.
.LE
.wH "<endparameters>"
.SH DESCRIPTION
.iX "Condition variable" "waiting for"
.iX "Waiting for condition variable"
.PP
This routine causes a thread to wait for a condition variable to be signaled
or broadcast. Each condition corresponds to one or more predicates based on
shared data. The calling thread waits for the data to
reach a particular state (for the predicate to become true).
.PP
Call this routine after you have locked the mutex specified in
\*Vmutex\*O. The results of this routine are unpredictable if this
routine is called without first locking the mutex.
.PP
This routine atomically releases the mutex and causes the calling thread to
wait on the condition. If the wait is satisfied as a result of some thread
calling \*Lpthread_cond_signal\*O or \*Lpthread_cond_broadcast\*O,
the mutex is reacquired and the routine returns.
.PP
A thread that changes the state of storage protected by the mutex in such a
way that a predicate associated with a condition variable might now be true
must call either \*Lpthread_cond_signal\*O or
\*Lpthread_cond_broadcast\*O for that condition variable. If neither
call is made, any thread waiting on the condition variable continues to
wait.
.PP
This routine might (with low probability) return when the condition variable
has not been signaled or broadcast. When a spurious wakeup occurs, the mutex
is reacquired before the routine returns. (To handle this type of situation,
enclose this routine in a loop that checks the predicate.)
.SH RETURN VALUES
.PP
If an error condition occurs, this routine returns \-1 and
\*Eerrno\*O is set to the corresponding error value. Possible return
values are as follows:
.sp
.TS
center, tab(@);
l l l.
\*LReturn@Error@Description\*O
_
\00@@Successful completion.
\&\-1@[\*LEINVAL\*O]@The value specified by \*Vcond\*O or \*Vmutex\*O is invalid.
\&@@T{
Different mutexes are supplied for concurrent \*Lpthread_cond_wait\*O or \*Lpthread_cond_timedwait\*O operations.
T}
\&\-1@[\*LEDEADLK\*O]@A deadlock condition is detected.
.TE
.wH "<endnas_return>"
.cS
.SH EXAMPLES
.PP
.oS
int pthread_cond_wait (pthread_cond_t *cond,
 pthread_mutex_t *mutex);
.oE
.cE
.wH "<endnas_examples>"
.SH RELATED INFORMATION
.PP
\*Lpthread_cond_broadcast\*O(3),
\*Lpthread_cond_destroy\*O(3),
\*Lpthread_cond_init\*O(3),
\*Lpthread_cond_signal\*O(3),
\*Lpthread_cond_timedwait\*O(3)
.EQ
delim off
.EN

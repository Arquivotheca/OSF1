.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: XmDisplay.3X,v $ $Revision: 1.1.2.7 $ (DEC) $Date: 1993/12/15 22:44:15 $
.\"
.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
.\" **      Maynard, MA.  All Rights Reserved.
.\" **
.\" **
.TH XmDisplay 3X "" "" "" "OSF/Motif"
.SH NAME
\*LXmDisplay\*O \- The Display widget class
.SH SYNOPSIS
.sS
.iS
\&#include <Xm/Display.h>
.iE
.sE
.SH DESCRIPTION
.iX "XmDisplay"
.iX "widget class" "XmDisplay"
The XmDisplay object is used by the Motif widgets to store information
that is specific to a display.  It also allows the toolkit to access
certain information on widget hierarchies that would otherwise be
unavailable.  Each client has one XmDisplay object for each display
it accesses.
.PP
An XmDisplay object is automatically created when the application
creates the first shell on a display (usually accomplished by a call to
\*LXtAppInitialize\*O or \*LXtAppCreateShell\*O).
It is not necessary to create an XmDisplay object by any other means.
An application can use the function \*LXmGetXmDisplay\*O to obtain the
widget ID of the XmDisplay object for a given display.
.PP
An application cannot supply initial values for XmDisplay resources as
arguments to a call to any function that creates widgets.
The application or user can supply initial values in a resource file.
After creating the first shell on the display, the application can use
\*LXmGetXmDisplay\*O to obtain the widget ID of the XmDisplay object and
then call \*LXtSetValues\*O to set the XmDisplay resources.
.PP
XmDisplay resources specify the drag protocol style for a client
participating in drag and drop transactions.  There are two basic
protocol types, preregister and dynamic.  When a preregister protocol
is used, the toolkit handles any communication between the initiator
and receiver clients, and displays the appropriate drag-over and
drag-under visual effects.  A client registers its drop sites in
advance and this information is stored in a property for each 
top-level window.  When the drag pointer enters a top level window,
the drop site information is read by the initiator.  A dynamic
protocol allows the source and destination clients to dynamically 
communicate drag and drop state information between each other, and
to update their respective visuals accordingly.  The toolkit provides
drop site information as the pointer passes over any given drop site.
In this mode, a receiver can supply a procedure to generate its
own drag-under effects.
.SS "Classes"
Display inherits behavior and resources from \*LCore\*O, \*LComposite\*O,
\*LShell\*O, \*LWMShell\*O, \*LVendorShell\*O, \*LTopLevelShell\*O, and
\*LApplicationShell\*O classes.
.PP 
The class pointer is \*LxmDisplayClass\*O.
.PP 
The class name is \*LXmDisplay\*O.
.SS "New Resources"
The following table defines a set of widget resources used by the
programmer to specify data.  The programmer can also set the resource
values for the inherited classes to set attributes for this widget.
To reference a resource by name or by class in an \*L.Xdefaults\*O file,
remove the \*LXmN\*O or \*LXmC\*O prefix and use the remaining letters.
To specify one of the defined values for a resource in an \*L.Xdefaults\*O
file, remove the \*LXm\*O prefix and use the remaining letters (in
either lowercase or uppercase, but include any underscores between
words).  The codes in the access column indicate if the given resource
can be set at creation time (\*LC\*O), set by using \*LXtSetValues\*O
(\*LS\*O), retrieved by using \*LXtGetValues\*O (\*LG\*O), or is not
applicable (\*LN/A\*O).
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmDisplay Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNdefaultVirtualBindings	dynamic	CG
\ \ \ \ \ \ DefaultVirtualBindings	\ \ \ \ \ \ \ String
_
XmNdragInitiatorProtocolStyle	XmDRAG_PREFER_RECEIVER	CG
\ \ \ \ \ \ XmCDragInitiatorProtocolStyle	\ \ \ \ \ \ \ unsigned char
_
XmNdragReceiverProtocolStyle	XmDRAG_PREFER_PREREGISTER	CG
\ \ \ \ \ \ XmCDragReceiverProtocolStyle	\ \ \ \ \ \ \ unsigned char
_
.TE
.\" NROFF HACK END
.PP
.VL
.LI "\*LXmNdefaultVirtualBindings\*O"
Specifies the default virtual bindings for the display.
Following is an example of a specification for the
\*LdefaultVirtualBindings\*O resource in a resource file:
.oS
.ta 0.5i 2i 2.5i 3.75i
*defaultVirtualBindings: \e
	osfBackSpace	:	<Key>BackSpace	\en\e
	osfInsert	:	<Key>InsertChar	\en\e
\&...
	osfDelete	:	<Key>DeleteChar
.oE
.LI "\*LXmNdragInitiatorProtocolStyle\*O"
Specifies the drag and drop protocol requirements or preference when
the client is an initiator.  The possible values are:
.VL .25i
.LI "\*LXmDRAG_PREREGISTER\*O"
As an initiator, this client does not use the dynamic protocol and
can only arrange visual effects with receivers who provide
preregistered information.
.LI "\*LXmDRAG_DYNAMIC\*O"
As an initiator, this client does not make use of any preregistered
drop site information made available by other clients, and can only
arrange visual effects with receivers who use the dynamic protocol.
.LI "\*LXmDRAG_NONE\*O"
Specifies that drag and drop is disabled for this client.
.LI "\*LXmDRAG_DROP_ONLY\*O"
As an initiator, this client does not use either the preregistered
drop site information or the dynamic protocol.  It supports dragging,
and any time the cursor is over a client that supports drag and
drop, valid feedback is provided.  There are no other visual effects.
.LI "\*LXmDRAG_PREFER_DYNAMIC\*O"
As an initiator, this client can support both the preregister and
dynamic protocols, but prefers to use dynamic protocols whenever
possible in order to provide high-quality drag-under feedback.
.LI "\*LXmDRAG_PREFER_PREREGISTER\*O"
As an initiator, this client can support both the preregister and
dynamic protocols, but prefers to use the preregister protocol
whenever possible in order to accommodate performance needs or to
provide consistent drag-over feedback.
.LI "\*LXmDRAG_PREFER_RECEIVER\*O"
Indicates that this client can support both preregister and dynamic
protocols, but will defer to the preference of the receiver client.
This value is valid only for the \*LXmNdragInitiatorProtocolStyle\*O
resource, and is its default value.
.LE
.LI "\*LXmNdragReceiverProtocolStyle\*O"
Specifies the drag and drop protocol requirements or preference
when this client is a receiver.  The values are:
.VL .25i
.LI "\*LXmDRAG_PREREGISTER\*O"
As a receiver, this client preregisters drop site information and
does not use the dynamic protocol.  It can only arrange visual
effects with initiators who make use of the preregistered information.
.LI "\*LXmDRAG_DYNAMIC\*O"
As a receiver, this client uses the dynamic protocol and does
not preregister drop site information.  It can only arrange visual
effects with initiators who use the dynamic protocol.
.LI "\*LXmDRAG_NONE\*O"
Specifies that drag and drop is disabled for this client.
.LI "\*LXmDRAG_DROP_ONLY\*O"
As a receiver, this client neither uses the dynamic protocol
nor preregisters drop site information.  It supports
dropping, and when dragging over this client, valid feedback
is always provided, but there are no other visual effects.
.LI "\*LXmDRAG_PREFER_DYNAMIC\*O"
As a receiver, this client can support both the preregister and
dynamic protocols, but prefers to use dynamic protocol whenever
possible in order to provide high-quality drag-under feedback.
.LI "\*LXmDRAG_PREFER_PREREGISTER\*O"
As a receiver, this client can support both the preregister and
dynamic protocols, but prefers to use the preregister protocol
whenever possible in order to accommodate performance
needs.
.LE
.PP
The actual protocol used between an initiator and a receiver
is based on the protocol style of the receiver and initiator.  The
decision matrix is as follows:
.PP
.oS
_______________________________________________________
               |
Drag Initiator |       Drag Receiver Protocol Style
Protocol Style |
---------------|---------------------------------------
               |
               | Pre    Prefer Pre    Prefer Dyn    Dyn
---------------|---------------------------------------
 Pre           | Pre    Pre           Pre           D-O
               |
 Prefer Pre    | Pre    Pre           Pre           Dyn
               |
 Prefer Rec    | Pre    Pre           Dyn           Dyn
               |
 Prefer Dyn    | Pre    Dyn           Dyn           Dyn
               |
 Dyn           | D-O    Dyn           Dyn           Dyn
_______________|_______________________________________

   Pre = Preregister
   Dyn = Dynamic
   D-P = Drop Only
.oE
.\" .TS
.\" center,tab(@);
.\" cbp8 cbp8  s s s 
.\" lbp8  lbp8  lbp8  lbp8 lbp8 
.\" rbp8  lp8  lp8  lp8  lp8.
.\" T{
.\" .nf
.\" Drag Initiator
.\" Protocol Style
.\" .fi
.\" T}@Drag Receiver Protocol Style
.\" _
.\" @Preregister@Prefer Preregister@Prefer Dynamic@Dynamic
.\" _
.\" Preregister@Preregister@Preregister@Preregister@Drop Only
.\" _
.\" Prefer Preregister@Preregister@Preregister@Preregister@Dynamic
.\" _
.\" Prefer Receiver@Preregister@Preregister@Dynamic@Dynamic
.\" _
.\" Prefer Dynamic@Preregister@Dynamic@Dynamic@Dynamic
.\" _
.\" Dynamic@Drop Only@Dynamic@Dynamic@Dynamic
.sp
.\" _
.\" .TE
.PP
The value \*LXmDRAG_NONE\*O does not appear in the above
matrix.  When specified for either the initiator or receiver side,
\*LXmDRAG_NONE\*O implies that drag and drop transactions are not
supported.  A value of \*LXmDRAG_DROP_ONLY\*O (Drop Only) results
when an initiator and receiver cannot compromise protocol styles,
that is, one client requires dynamic mode while the other
can only support preregister mode, or if either explicitly has
specified \*LXmDRAG_DROP_ONLY\*O.
.LE
.SS "Inherited Resources"
All of the superclass resources inherited by XmDisplay are 
designated N/A (not applicable).
.SH RELATED INFORMATION
.na
\*LApplicationShell(3X)\*O,
\*LComposite(3X)\*O,
\*LCore(3X)\*O,
\*LTopLevelShell(3X)\*O,
\*LVendorShell(3X)\*O,
\*LWMShell(3X)\*O,
\*LXmGetXmDisplay(3X)\*O, and
\*LXmScreen(3X)\*O.
.ad
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\" 
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\" 
.\" 
.\" HISTORY
.\" 
.\" @(#)$RCSfile: frexp.3,v $ $Revision: 1.1.4.3 $ (DEC) $Date: 1994/01/19 18:23:44 $
.\"
.\"
.\" (c) Copyright 1992, OPEN PROVENCHER FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\"
.\" frexp.alphaman
.\"
.TH frexp 3
.SH NAME
.PP
\*Lfrexp\*O, \*Lldexp\*O, \*Llogb\*O, \*Lscalb\*O \- Manipulates floating-point numbers
.SH LIBRARY
.PP
\*OMath Library (\*Llibm.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <math.h>
.PP
\*Ldouble frexp  (\*Ldouble \*Vx\*L, int *\*Vn\*L);
.nL
\*Lfloat  frexpf (\*Lfloat  \*Vx\*L, int *\*Vn\*L);
.nL
\*Ldouble ldexp  (\*Ldouble \*Vy\*L, int \*Vn\*L);
.nL
\*Lfloat  ldexpf (\*Lfloat  \*Vy\*L, int \*Vn\*L);
.nL
\*Ldouble logb   (\*Ldouble \*Vx\*L);
.nL
\*Lfloat  logbf  (\*Lfloat  \*Vx\*L);
.nL
\*Ldouble scalb  (\*Ldouble \*Vx\*L, \*Ldouble \*Vn\*L);
.nL
\*Lfloat  scalbf (\*Lfloat  \*Vx\*L, \*Lfloat  \*Vn\*L);
.sE
.SH DESCRIPTION
.PP
.iX "frexp function"
.iX "ldexp function"
.iX "logb function"
.iX "scalb function"
Every nonzero number can be written uniquely as \*Vz\*O times 2 raised to
the power \*Vp\*O, where the absolute value of the mantissa (fraction)
\*Vz\*O is in the range [0.5, 1.0), and the exponent \*Vp\*O, is an integer.
.PP
\*Lfrexp(\|)\*O and \*Lfrexpf(\|)\*O
break a floating-point number into a
normalized fraction and an integral power of 2. It stores the
integer in the int object pointed to by the \*Vn\*O parameter and
returns the fraction part.
.PP
\*Lldexp(\|)\*O and \*Lldexpf(\|)\*O
multiply a floating-point number, \*Vy\*O, by an integral power of 2.
.PP
\*Llogb(\|)\*O and \*Llogbf(\|)\*O return a signed integer converted to
double-precision floating-point and so chosen that
1 <= |x|/2**n < 2 unless x = 0 or |x| = infinity or x
lies between 0 and the Underflow Threshold.
.PP
.PP
IEEE 754 defines logb(+infinity) = +infinity and logb(0) = -infinity.
The latter is required to signal Division-by-Zero.
.PP
\*Lscalb(\|)\*O and \*Lscalbf(\|)\*O = x*(2**n) computed, for integer n.
.\"
.\"
.\".iS
.\"EXCEPTIONAL CASES
.\"
.\"
.\"        Function           Exceptional Argument  Routine Behavior
.\"        ----------------   --------------------  ---------------------
.\"        frexp(), frexpf()  |x| = infinity        invalid argument
.\"
.\"        frexp(), frexpf()  |x| = infinity        invalid argument
.\"
.\"        scalb(), scalbf()  x*(2**n) > max_float  overflow
.\"
.\"        scalb(), scalbf()  x*(2**n) < min_float  underflow
.\"
.\"
.\"
.\".iE
.PP
.TS
tab(@);
lfHB lfHB lfHB
l l l .
_
.sp 4p
Function@Exceptional Argument@Routine Behavior
.sp 4p
_
.sp 6p
frexp(), frexpf()@|x| = infinity@invalid argument
.sp 4p
logb(), logbf()@|x| = infinity@invalid argument
.sp 4p
scalb(), scalbf()@x*(2**n) > max_float@overflow
.sp 4p
scalb(), scalbf()@x*(2**n) < min_float@underflow
.sp 4p
ldexp(), ldexpf()@x*(2**n) > max_float@overflow
.sp 4p
ldexp(), ldexpf()@x*(2**n) < min_float@underflow
.sp 6p
_
.TE
.TS
tab(@);
lfHB lfHB lfHB lfHB
l l l lw(1.5i).
_
.sp 4p
Value Name@Data Type@Hexadecimal Value@Decimal Value
.sp 4p
_
.sp 6p
max_float@F_FLOAT@FFFF7FFF@1.701411e38
.sp 4p
@G_FLOAT@FFFFFFFFFFFF7FFF@8.988465674311579e307
.sp 4p
@S_FLOAT@7F7FFFFF@3.402823e38
.sp 4p
@T_FLOAT@7FEFFFFFFFFFFFFF@1.797693134862316e308
.sp 4p
min_float@F_FLOAT@00000080@2.9387359e-39
.sp 4p
@G_FLOAT@0000000000000010@5.562684646268003e-309
.sp 4p
@S_FLOAT@00000001@1.4012985e-45
.sp 4p
@T_FLOAT@0000000000000001@4.940656458412465e-324
.sp 6p
_
.TE
.EQ
delim off
.EN

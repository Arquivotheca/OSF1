.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: wcstok.3,v $ $Revision: 1.1.3.4 $ (DEC) $Date: 1993/11/19 16:43:01 $
.\"
.\"
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.TH wcstok 3
.SH NAME
.PP
\*Lwcstok\*O, \*Lwcstok_r\*O \- Split wide-character strings to tokens
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include\ <wchar.h>\*O
.PP
\*Lwchar_t *wcstok(
.nL
	wchar_t *\*Vws1\*L,
.nL
	const wchar_t *\*Vws2\*L);\*O
.PP
\*Lwchar_t *wcstok_r(
.nL
	wchar_t *\*Vws1\*L,
.nL
	const wchar_t *\*Vws2\*L),
.nL
	wchar_t **\*Vsavept\*L);\*O
.sE
.SH PARAMETERS
.PP
.VL 1i
.LI "\*Vws1\*O"
Contains a pointer to the wide-character string to be searched.
.LI "\*Vws2\*O"
Contains a pointer to the string of wide-character token delimiters.
.LI "\*Vsavept\*O"
Identifies the location of the wide character where the search for tokens
should be started in the next call to \*Lwcstok_r(\|)\*O. The
\*Vsavept\*O parameter contains a pointer to a variable that contains
a pointer to the wide character in the string.
.LE
.SH DESCRIPTION
.PP
.iX "wcstok function"
.iX "wcstok_r function"
.iX "converting" "wide-character strings to tokens"
The \*Lwcstok(\|)\*O function splits the wide-character string
pointed to by the \*Vws1\*O parameter into a sequence of tokens,
each of which is delimited by a wide character from the wide-character
string pointed to by the \*Vws2\*O parameter.
.PP
Usually, the \*Lwcstok(\|)\*O function is called repeatedly to extract the
tokens in a wide-character string. The first time the application
program calls the \*Lwcstok(\|)\*O
function, it sets the \*Vws1\*O parameter to point to the input wide-character
string. The function returns a pointer to the first
token. Then the application program calls the function again with
the \*Vws1\*O
parameter set to the null pointer. This call returns a pointer to the
next token in the string. The application program repeats the
call to \*Lwcstok(\|)\*O with the
\*Vws1\*O parameter set to the null pointer until all the tokens in
the string have been returned.
.PP
In the initial call to \*Lwcstok(\|)\*O, the function first searches the
wide-character string pointed to by the \*Vws1\*O parameter to locate
the first wide character that does \*Enot\*O occur in the
wide-character delimiter string pointed to by the\*V ws2\*O parameter.
If such a wide character is found, it is the start of the first token.
The \*Lwcstok(\|)\*O function then searches from there for a wide
character that \*Edoes\*O occur in the delimiter string. If such a
wide-character delimiter is found, \*Lwcstok(\|)\*O overwrites it with
a null wide character, which terminates the current token. The
\*Lwcstok(\|) \*Ofunction saves a pointer to the wide character
following the null wide character and returns a pointer to the start
of the token.
.PP
In the subsequent calls to \*Lwcstok(\|)\*O, in which the \*Vws1\*O
parameter is set to the null pointer, the function starts at its saved
pointer and searches for the next
wide character that does \*Enot\*O occur in the
wide-character delimiter string pointed to by the\*V ws2\*O parameter.
If such a wide character is found, it is the start of the new token.
The \*Lwcstok(\|)\*O function then searches from there for a wide
character that \*Edoes\*O occur in the delimiter string. If such a
wide-character delimiter is found, \*Lwcstok(\|)\*O overwrites it with
a null wide character, which terminates the new token. The
\*Lwcstok(\|) \*Ofunction saves a pointer to the wide character
following the null wide character and returns a pointer to the start
of the new token.
.PP
If a call to the \*Lwcstok(\|)\*O function cannot find a wide
character that does \*Enot\*O occur in the delimiter string, it
returns the null pointer. If a call to the \*Lwcstok(\|)\*O function
cannot find the terminating wide character that \*Edoes\*O occur in
the delimiter string, the current token extends to the end of the
string and subsequent calls to \*Lwcstok(\|)\*O will return the null
pointer.
.PP
If the delimiters used in the wide-character string change from one
set of characters to another within the string, the application
program can set the second parameter,\*V ws2\*O, to different
wide-character strings, from call to call.
.PP
The implementation behaves as though no function calls the
\*Lwcstok(\|)\*O function.
.PP
The \*Lwcstok_r(\|)\*O function is the reentrant version of
\*Lwcstok(\|)\*O.  Upon successful completion, the \*Lwcstok_r(\|)\*O
function stores the saved pointer in \*L*\*Vsavept\*O. . If the
\*Vs1\*O parameter is a null pointer, the \*Lwcstok_r(\|)\*O function
uses the saved pointer in \*L*\*Vsavept\*O to start searching for the
next token.
.SH EXAMPLES
.PP
The following example splits a wide-character string into tokens.
.PP
.oS
#include <wchar.h>
#include <locale.h>
#include <stdio.h>
#define WLENGTH 40

main()
{
   wchar_t WCString1[WLENGTH], delimiters[WLENGTH];
   wchar_t * pwcs;
   int   counter;

   (void)setlocale(LC_ALL, "");
   printf("Enter the string to be searched: ");
   if (fgetws(WCString1, WLENGTH, stdin) != NULL) {
      printf("Enter the delimiter(s): ");
      if (fgetws(delimiters, WLENGTH, stdin) \e
!= NULL) {

         if ((pwcs = wcstok(WCString1, delimiters )) \e
!= NULL) {
            /* pwcs points to the first token */
            printf("Token 1 is %S\en", pwcs);
            counter = 2;
            while ((pwcs = wcstok((wchar_t * )NULL, delimiters )) \e
!= NULL) {
               printf("Token %d is %S\en", counter, pwcs);
               counter++;
            }
         }
      }
   }
}
.oE
.SH RETURN VALUES
.PP
Upon successful completion, the \*Lwcstok(\|)\*O and
\*Lwcstok_r(\|)\*O functions return a
pointer to the first wide character of a
token. A null pointer is returned if there is no token.
.PP
Upon successful completion, the pointer *\*Vsavept\*O is set to
the wide character from which the search for the next token starts,
or to a null pointer if there is none.
.SH RELATED INFORMATION
.PP
Functions:
\*Lstrtok\*O(3),
\*Lwcspbrk\*O(3),
\*Lwcsspn\*O(3),
\*Lwcstod\*O(3),
\*Lwcstol\*O(3),
\*Lwcstoul\*O(3).
.EQ
delim off
.EN

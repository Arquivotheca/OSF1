.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: XmSelectionBox.3X,v $ $Revision: 3.2.4.4 $ (DEC) $Date: 1993/10/25 19:29:58 $
.\"
.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
.\" **      Maynard, MA.  All Rights Reserved.
.\" **
.\" **
.TH XmSelectionBox 3X "" "" "" "OSF/Motif"
.SH NAME
\*LXmSelectionBox\*O \- The SelectionBox widget class
.SH SYNOPSIS
.sS
.iS
\&#include <Xm/SelectioB.h>
.iE
.sE
.SH DESCRIPTION
.iX "XmSelectionBox"
.iX "widget class" "SelectionBox"
SelectionBox is a general dialog widget that allows the user to
select one item from a list.
By default a SelectionBox includes the following:
.ML
.LI
A scrolling list of alternatives
.LI
An editable text field for the selected alternative
.LI
Labels for the list and text field
.LI
Three or four buttons
.LE 
.PP 
The default button labels are \*LOK\*O, \*LCancel\*O, and \*LHelp\*O.
By default an \*LApply\*O button is also created; if the parent of the
SelectionBox is a DialogShell it is managed, and otherwise it is unmanaged.
Additional children may be added to the SelectionBox after
creation.
The first child is used as a work area.  The value of
\*LXmNchildPlacement\*O determines if the work area is placed above
or below the Text area, or above or below the List area.  Additional
children are laid out in the following manner:
.ML
.LI
Menubar\(emThe first menu bar child is placed at the top of the window.
.LI
Buttons\(emAll \*LXmPushButton\*O
widgets or gadgets, and their subclasses are
placed after the \*LOK\*O button in the order of their creation.
.LI
The layout of additional children which are not in the above categories
is undefined.
.LE
.PP 
The user can select an item in two ways:
by scrolling through the list and selecting the desired
item or by entering the item name directly into the text edit area.
Selecting an item from
the list causes that item name to appear in the selection text edit
area.
.PP 
The user may select a new item
as many times as desired.  The item is not actually selected until
the user presses the \*LOK\*O PushButton.
.PP 
The default value for the \*LXmBulletinBoard\*O resource
\*LXmNcancelButton\*O is the Cancel button unless \*LXmNdialogType\*O is
\*LXmDIALOG_COMMAND\*O, when the default is NULL.
The default value for the \*LXmBulletinBoard\*O resource
\*LXmNdefaultButton\*O is the OK button unless \*LXmNdialogType\*O is
\*LXmDIALOG_COMMAND\*O, when the default is NULL.
.PP
For SelectionBox and its subclasses, the default value for
\*LXmNinitialFocus\*O is the text edit area.
.PP
The user can specify resources in a resource file for the automatically
created widgets and gadgets of SelectionBox.  The following list
identifies the names of these widgets (or gadgets) and the associated
SelectionBox areas.
.ML
.LI
List Items Label\(em"Items"
.LI
List Items\(em"ItemsList"
.LI
Selection Label\(em"Selection"
.LI
Selection Text\(em"Text"
.LI
Selection Separator\(em"Separator"
.LE
.SS "Classes"
SelectionBox inherits behavior and resources from \*LCore\*O,
\*LComposite\*O, \*LConstraint\*O, \*LXmManager\*O,
and \*LXmBulletinBoard\*O Classes.
.PP 
The class pointer is \*LxmSelectionBoxWidgetClass\*O.
.PP 
The class name is \*LXmSelectionBox\*O.
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \*LXmN\*O or
\*LXmC\*O prefix and use the remaining letters.  To specify one of the defined
values for a resource in a .Xdefaults file, remove the \*LXm\*O prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (C),
set by using \*LXtSetValues\*O (S),
retrieved by using \*LXtGetValues\*O (G), or is not applicable (N/A).
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmSelectionBox Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNapplyCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNapplyLabelString	dynamic	CSG
\ \ \ \ \ \ XmCApplyLabelString	\ \ \ \ \ \ \ XmString
_
XmNcancelCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNcancelLabelString	dynamic 	CSG
\ \ \ \ \ \ XmCCancelLabelString	\ \ \ \ \ \ \ XmString
_
XmNchildPlacement	XmPLACE_ABOVE_SELECTION	CSG
\ \ \ \ \ \ XmCChildPlacement	\ \ \ \ \ \ \ unsigned char
_
XmNdialogType	dynamic 	CG
\ \ \ \ \ \ XmCDialogType	\ \ \ \ \ \ \ unsigned char
_
XmNhelpLabelString	dynamic 	CSG
\ \ \ \ \ \ XmCHelpLabelString	\ \ \ \ \ \ \ XmString
_
XmNlistItemCount	0 	CSG
\ \ \ \ \ \ XmCItemCount	\ \ \ \ \ \ \ int
_
XmNlistItems	NULL	CSG
\ \ \ \ \ \ XmCItems	\ \ \ \ \ \ \ XmStringTable
_
XmNlistLabelString	dynamic	CSG
\ \ \ \ \ \ XmCListLabelString	\ \ \ \ \ \ \ XmString
_
XmNlistVisibleItemCount	dynamic 	CSG
\ \ \ \ \ \ XmCVisibleItemCount	\ \ \ \ \ \ \ int
_
XmNminimizeButtons	False	CSG
\ \ \ \ \ \ XmCMinimizeButtons	\ \ \ \ \ \ \ Boolean
_
XmNmustMatch	False 	CSG
\ \ \ \ \ \ XmCMustMatch	\ \ \ \ \ \ \ Boolean
_
XmNnoMatchCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
.wH .tH
XmNokCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNokLabelString	dynamic	CSG
\ \ \ \ \ \ XmCOkLabelString	\ \ \ \ \ \ \ XmString
_
XmNselectionLabelString	dynamic	CSG
\ \ \ \ \ \ XmCSelectionLabelString	\ \ \ \ \ \ \ XmString
_
XmNtextAccelerators	default	C
\ \ \ \ \ \ XmCTextAccelerators	\ \ \ \ \ \ \ XtAccelerators
_
XmNtextColumns	dynamic	CSG
\ \ \ \ \ \ XmCColumns	\ \ \ \ \ \ \ short
_
XmNtextString	""	CSG
\ \ \ \ \ \ XmCTextString	\ \ \ \ \ \ \ XmString
_
.TE
.\" NROFF HACK END
.VL  
.LI "\*LXmNapplyCallback\*O"
Specifies the list of callbacks called
when the user activates the \*LApply\*O
button.  The callback reason is \*LXmCR_APPLY\*O.
.LI "\*LXmNapplyLabelString\*O"
Specifies the string label for the \*LApply\*O button.
The default for this resource depends on the locale.
In the C locale the default is "Apply".
.LI "\*LXmNcancelCallback\*O"
Specifies the list of callbacks called
when the user activates
the \*LCancel\*O button.  The callback reason is \*LXmCR_CANCEL\*O.
.LI "\*LXmNcancelLabelString\*O"
Specifies the string label for the \*LCancel\*O button.
The default for this resource depends on the locale.
In the C locale the default is "Cancel".
.LI "\*LXmNchildPlacement\*O"
Specifies the placement of the work area child.  The 
possible values are:
.ML
.LI
\*LXmPLACE_ABOVE_SELECTION\*O\(emplaces the work area child
above the Text area
.LI
\*LXmPLACE_BELOW_SELECTION\*O\(emplaces the work area child
below the Text area
.LI
\*LXmPLACE_TOP\*O\(emplaces the work area child above the List area,
and below a menubar, if one is present
.LE
.LI "\*LXmNdialogType\*O"
Determines the set of SelectionBox children widgets that are created
and managed at initialization.  The following are possible values:
.wH .rS 
.ML
.LI
\*LXmDIALOG_PROMPT\*O\(emall standard children except the list and
list label are created, and all except the \*LApply\*O button are
managed
.LI
\*LXmDIALOG_COMMAND\*O\(emonly the list, the selection label, and the
text field are created and managed
.LI
\*LXmDIALOG_SELECTION\*O\(emall standard children are created and
managed
.LI
\*LXmDIALOG_FILE_SELECTION\*O\(emall standard children are created and
managed
.LI
\*LXmDIALOG_WORK_AREA\*O\(emall standard children are created, and all
except the \*LApply\*O button are managed
.LE 
.wH .rE
.PP
If the parent of the SelectionBox is a DialogShell, the default is
\*LXmDIALOG_SELECTION\*O; otherwise, the default is \*LXmDIALOG_WORK_AREA\*O.
\*LXmCreatePromptDialog\*O and \*LXmCreateSelectionDialog\*O set and append
this resource to the creation \*Varglist\*O supplied by the application.
This resource cannot be modified after creation.
.LI "\*LXmNhelpLabelString\*O"
Specifies the string label for the \*LHelp\*O button.
The default for this resource depends on the locale.
In the C locale the default is "Help".
.LI "\*LXmNlistItems\*O"
Specifies the items in the SelectionBox list.
\*LXtGetValues\*O for this resource returns the list items themselves,
not a copy of the list items.
The application must not free the returned items.
.LI "\*LXmNlistItemCount\*O"
Specifies the number of items in the SelectionBox
list.
The value must not be negative.
.LI "\*LXmNlistLabelString\*O"
Specifies the string label to appear above the SelectionBox list
containing the selection items.
The default for this resource depends on the locale.
In the C locale the default is "Items"
unless \*LXmNdialogType\*O is
\*LXmDIALOG_PROMPT\*O; in that case the default is NULL.
.LI "\*LXmNlistVisibleItemCount\*O"
Specifies the number of items displayed in the SelectionBox
list.
The value must be greater than 0 unless \*LXmNdialogType\*O is
\*LXmDIALOG_PROMPT\*O; in that case the value is always 0.
The default is dynamic based on the height of the list.
.LI "\*LXmNminimizeButtons\*O"
Sets the buttons to the width of the widest button and height of the
tallest button if False.  If True, button width and height are not
modified.
.LI "\*LXmNmustMatch\*O"
Specifies whether the selection widget should check if the
user's selection in the text edit field has an exact match in
the SelectionBox list when the \*LOK\*O button is activated.
If the selection does not have an exact match, and
\*LXmNmustMatch\*O is True, the \*LXmNnoMatchCallback\*O callbacks are
called.
If the selection does have an exact match or if \*LXmNmustMatch\*O is
False, \*LXmNokCallback\*O callbacks are called.
.LI "\*LXmNnoMatchCallback\*O"
Specifies the list of callbacks called
when the user makes a selection
from the text edit field that does not have an exact match with
any of the items in the list box.
The callback reason is \*LXmCR_NO_MATCH\*O.
Callbacks in this list are called only if \*LXmNmustMatch\*O
is true.
.LI "\*LXmNokCallback\*O"
Specifies the list of callbacks called
when the user activates the \*LOK\*O button.
The callback reason is \*LXmCR_OK\*O.
If the selection text does not match a list item, and
\*LXmNmustMatch\*O is True, the \*LXmNnoMatchCallback\*O callbacks are
called instead.
.LI "\*LXmNokLabelString\*O"
Specifies the string label for the \*LOK\*O button.
The default for this resource depends on the locale.
In the C locale the default is "OK".
.LI "\*LXmNselectionLabelString\*O"
Specifies the string label for the selection text edit field.
The default for this resource depends on the locale.
In the C locale the default is "Selection".
.LI "\*LXmNtextAccelerators\*O"
Specifies translations added to the Text widget child of the
SelectionBox.
The default includes bindings for the up and down keys
for auto selection of list items.
This resource is ignored if \*LXmNaccelerators\*O is initialized to a
nondefault value.
.LI "\*LXmNtextColumns\*O"
Specifies the number of columns in the Text widget.
The value must be greater than 0.
.LI "\*LXmNtextString\*O"
Specifies the text in the text edit selection field.
.LE 
.SS "Inherited Resources"
SelectionBox inherits behavior and resources from the following
superclasses.  For a complete description of each resource, refer to the
man page for that superclass.
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmBulletinBoard Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNallowOverlap	True	CSG
\ \ \ \ \ \ XmCAllowOverlap	\ \ \ \ \ \ \ Boolean
_
XmNautoUnmanage	True	CG
\ \ \ \ \ \ XmCAutoUnmanage	\ \ \ \ \ \ \ Boolean
_
XmNbuttonFontList	dynamic	CSG
\ \ \ \ \ \ XmCButtonFontList	\ \ \ \ \ \ \ XmFontList
_
XmNcancelButton	dynamic	SG
\ \ \ \ \ \ XmCWidget	\ \ \ \ \ \ \ Widget
_
XmNdefaultButton	dynamic	SG
\ \ \ \ \ \ XmCWidget	\ \ \ \ \ \ \ Widget
_
XmNdefaultPosition	True	CSG
\ \ \ \ \ \ XmCDefaultPosition	\ \ \ \ \ \ \ Boolean
_
XmNdialogStyle	dynamic	CSG
\ \ \ \ \ \ XmCDialogStyle	\ \ \ \ \ \ \ unsigned char
_
XmNdialogTitle	NULL	CSG
\ \ \ \ \ \ XmCDialogTitle	\ \ \ \ \ \ \ XmString
_
XmNfocusCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNlabelFontList	dynamic	CSG
\ \ \ \ \ \ XmCLabelFontList	\ \ \ \ \ \ \ XmFontList
_
XmNmapCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNmarginHeight	10	CSG
\ \ \ \ \ \ XmCMarginHeight	\ \ \ \ \ \ \ Dimension
_
XmNmarginWidth	10 	CSG
\ \ \ \ \ \ XmCMarginWidth	\ \ \ \ \ \ \ Dimension
_
XmNnoResize	False	CSG
\ \ \ \ \ \ XmCNoResize	\ \ \ \ \ \ \ Boolean
_
.wH .tH
XmNresizePolicy	XmRESIZE_ANY	CSG
\ \ \ \ \ \ XmCResizePolicy	\ \ \ \ \ \ \ unsigned char
_
XmNshadowType	XmSHADOW_OUT	CSG
\ \ \ \ \ \ XmCShadowType	\ \ \ \ \ \ \ unsigned char
_
XmNtextFontList	dynamic	CSG
\ \ \ \ \ \ XmCTextFontList	\ \ \ \ \ \ \ XmFontList
_
XmNtextTranslations	NULL	C
\ \ \ \ \ \ XmCTranslations	\ \ \ \ \ \ \ XtTranslations
_
XmNunmapCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
.TE
.\" NROFF HACK END
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmManager Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNbottomShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCBottomShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNbottomShadowPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCBottomShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNforeground	dynamic	CSG
\ \ \ \ \ \ XmCForeground	\ \ \ \ \ \ \ Pixel
_
XmNhelpCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNhighlightColor	dynamic	CSG
\ \ \ \ \ \ XmCHighlightColor	\ \ \ \ \ \ \ Pixel
_
XmNhighlightPixmap	dynamic	CSG
\ \ \ \ \ \ XmCHighlightPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNinitialFocus	dynamic	CSG
\ \ \ \ \ \ XmCInitialFocus	\ \ \ \ \ \ \ Widget
_
XmNnavigationType	XmTAB_GROUP	CSG
\ \ \ \ \ \ XmCNavigationType	\ \ \ \ \ \ \ XmNavigationType
_
XmNshadowThickness	dynamic	CSG
\ \ \ \ \ \ XmCShadowThickness	\ \ \ \ \ \ \ Dimension
_
XmNstringDirection	dynamic	CG
\ \ \ \ \ \ XmCStringDirection	\ \ \ \ \ \ \ XmStringDirection
_
XmNtopShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNtopShadowPixmap	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNtraversalOn	True	CSG
\ \ \ \ \ \ XmCTraversalOn	\ \ \ \ \ \ \ Boolean
_
XmNunitType	dynamic	CSG
\ \ \ \ \ \ XmCUnitType	\ \ \ \ \ \ \ unsigned char
_
XmNuserData	NULL	CSG
\ \ \ \ \ \ XmCUserData	\ \ \ \ \ \ \ XtPointer
_
.TE
.\" NROFF HACK END
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Composite Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNchildren	NULL	G
\ \ \ \ \ \ XmCReadOnly	\ \ \ \ \ \ \ WidgetList
_
XmNinsertPosition	NULL	CSG
\ \ \ \ \ \ XmCInsertPosition	\ \ \ \ \ \ \ XtOrderProc
_
XmNnumChildren	0	G
\ \ \ \ \ \ XmCReadOnly	\ \ \ \ \ \ \ Cardinal
_
.TE
.\" NROFF HACK END
.PP
.wH .in 0 
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Core Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNaccelerators	dynamic	N/A
\ \ \ \ \ \ XmCAccelerators	\ \ \ \ \ \ \ XtAccelerators
_
XmNancestorSensitive	dynamic	G
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNbackground	dynamic	CSG
\ \ \ \ \ \ XmCBackground	\ \ \ \ \ \ \ Pixel
_
XmNbackgroundPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderColor	XtDefaultForeground	CSG
\ \ \ \ \ \ XmCBorderColor	\ \ \ \ \ \ \ Pixel
_
XmNborderPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderWidth	0	CSG
\ \ \ \ \ \ XmCBorderWidth	\ \ \ \ \ \ \ Dimension
_
XmNcolormap	dynamic	CG
\ \ \ \ \ \ XmCColormap	\ \ \ \ \ \ \ Colormap
_
XmNdepth	dynamic	CG
\ \ \ \ \ \ XmCDepth	\ \ \ \ \ \ \ int
_
XmNdestroyCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNheight	dynamic	CSG
\ \ \ \ \ \ XmCHeight	\ \ \ \ \ \ \ Dimension
_
XmNinitialResourcesPersistent	True	C
\ \ \ \ \ \ XmCInitialResourcesPersistent	\ \ \ \ \ \ \ Boolean
_
XmNmappedWhenManaged	True	CSG
\ \ \ \ \ \ XmCMappedWhenManaged	\ \ \ \ \ \ \ Boolean
_
XmNscreen	dynamic	CG
\ \ \ \ \ \ XmCScreen	\ \ \ \ \ \ \ Screen *
_
.wH .tH
XmNsensitive	True	CSG
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNtranslations	dynamic	CSG
\ \ \ \ \ \ XmCTranslations	\ \ \ \ \ \ \ XtTranslations
_
XmNwidth	dynamic	CSG
\ \ \ \ \ \ XmCWidth	\ \ \ \ \ \ \ Dimension
_
XmNx	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
XmNy	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
.TE
.\" NROFF HACK END
.wH .in  
.SS "Callback Information"
A pointer to the following structure is passed to each callback:
.sS
.iS
.ta .25i 1.50i
typedef struct
{
	int	\*Vreason\*L;
	XEvent	\*V* event\*L;
	XmString	\*Vvalue\*L;
	int	\*Vlength\*L;
} XmSelectionBoxCallbackStruct;
.iE
.sE
.wH .fi
.VL .75i 
.LI "\*Vreason\*O"
Indicates why the callback was invoked
.LI "\*Vevent\*O"
Points to the \*LXEvent\*O that triggered the callback
.LI "\*Vvalue\*O"
Indicates the \*LXmString\*O value selected by the user from the
SelectionBox list or entered into the SelectionBox text field
.LI "\*Vlength\*O"
Indicates the size in bytes of the \*LXmString\*O value
.LE 
.SS "Translations"
.ne 3i
XmSelectionBox inherits translations from XmBulletinBoard.
.SS "Accelerators"
The \*LXmNtextAccelerators\*O are added to the Text descendant of
XmSelectionBox.
The default accelerators are listed below.
These accelerators may not directly correspond to a
translation table.
.iS
.ta 1.5i
KUp:	SelectionBoxUpOrDown(0)
KDown:	SelectionBoxUpOrDown(1)
KBeginData:	SelectionBoxUpOrDown(2)
KEndData:	SelectionBoxUpOrDown(3)
KRestore:	SelectionBoxRestore()
.wH .fi
.iE
.SS "Action Routines"
The XmSelectionBox action routines are described below:
.VL  
.LI "\*LSelectionBoxUpOrDown(0|1|2|3)\*O:"
When called with a 0 argument, selects the previous item in the
list and replaces the text with that item.
.PP
When called with a 1 argument, selects the next item in the
list and replaces the text with that item.
.PP
When called with a 2 argument, selects the first item in the
list and replaces the text with that item.
.PP
When called with a 3 argument, selects the last item in the
list and replaces the text with that item.
.LI "\*LSelectionBoxRestore()\*O:"
Replaces the text value with the list selection.
If no item in the list is selected, clears the text.
.PP
.ne 3i
.LE
.SS "Additional Behavior"
The SelectionBox widget has the additional behavior described below:
.VL  
.LI "\*LMAny\ KCancel\*O:"
Calls the activate callbacks for the cancel button if it is sensitive.
If no cancel button exists and the parent of the SelectionBox is a manager,
passes the event to the parent.
.LI "\*LKActivate\*O:"
Calls the activate callbacks for the button with the keyboard focus.
If no button has the keyboard focus, calls the activate callbacks
for the default button if it is sensitive.
In a List widget or single-line Text widget,
the List or Text action associated with \*LKActivate\*O
is called before the SelectionBox actions associated with
\*LKActivate\*O.
In a multi-line Text widget, any \*LKActivate\*O
event except \*LKEnter\*O calls
the Text action associated with \*LKActivate\*O,
then the SelectionBox actions associated with \*LKActivate\*O.
If no button has the focus, no default button exists, and the parent
of the SelectionBox is a manager, passes the event to the parent.
.LI "\*L<OK\ Button\ Activated>\*O:"
If \*LXmNmustMatch\*O is True and the text does not match an item in the
file list, calls the \*LXmNnoMatchCallback\*O callbacks with reason
\*LXmCR_NO_MATCH\*O.
Otherwise, calls the \*LXmNokCallback\*O callbacks with reason
\*LXmCR_OK\*O.
.LI "\*L<Apply\ Button\ Activated>\*O:"
Calls the \*LXmNapplyCallback\*O callbacks with reason \*LXmCR_APPLY\*O.
.LI "\*L<Cancel\ Button\ Activated>\*O:"
Calls the \*LXmNcancelCallback\*O callbacks with reason
\*LXmCR_CANCEL\*O.
.LI "\*L<Help\ Button\ Activated>\*O:"
Calls the \*LXmNhelpCallback\*O callbacks with reason \*LXmCR_HELP\*O.
.LI "\*L<MapWindow>\*O:"
Calls the callbacks for \*LXmNmapCallback\*O if the SelectionBox
is a child of a Dialog shell.
.LI "\*L<UnmapWindow>\*O:"
Calls the callbacks for \*LXmNunmapCallback\*O if the SelectionBox is
the child of a DialogShell.
.LE
.SS "Virtual Bindings"
The bindings for virtual keys are vendor specific.
For information about bindings for virtual buttons and keys, see \*LVirtualBindings(3X)\*O.
.SH RELATED INFORMATION
.na
\*LComposite(3X)\*O,
\*LConstraint(3X)\*O,
\*LCore(3X)\*O,
\*LXmBulletinBoard(3X)\*O,
\*LXmCreateSelectionBox(3X)\*O,
\*LXmCreateSelectionDialog(3X)\*O,
\*LXmCreatePromptDialog(3X)\*O,
\*LXmManager(3X)\*O, and
\*LXmSelectionBoxGetChild(3X)\*O.
.ad
.EQ
delim off
.EN

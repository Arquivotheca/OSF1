.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: XmTextField.3X,v $ $Revision: 3.2.4.5 $ (DEC) $Date: 1993/12/14 23:51:54 $
.\"
.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
.\" **      Maynard, MA.  All Rights Reserved.
.\" **
.\" **
.TH XmTextField 3X "" "" "" "OSF/Motif"
.SH NAME
\*LXmTextField\*O \- The TextField class
.SH SYNOPSIS
.sS
.iS
\&#include <Xm/TextF.h>
.iE
.sE
.SH DESCRIPTION
TextField widget provides a single line text editor for customizing
both user and programmatic interfaces.  It is used for single-line
string entry, and forms entry with verification procedures.
It provides an application with a consistent editing system for
textual data.
.PP 
TextField widget provides separate callback lists to verify
movement of the insert cursor, modification of the text, and
changes in input focus.  Each of
these callbacks provides the verification function with the
widget instance, the event that caused the callback, and a
data structure specific to the verification type.  From this
information the function can verify if the application considers
this to be a legitimate state change and can signal the widget
whether to continue with the action. 
.PP 
The user interface tailors a new set of actions.
The key bindings have been added for insert cursor movement, deletion,
insertion, and selection of text.
.PP 
TextField allows the user to select regions of text.
Selection is based on the model specified in the \*VInter-Client
Communication Conventions Manual\*O (ICCCM).
TextField supports primary and secondary selection.
.SS "Classes"
TextField widget inherits behavior and resources from \*LCore\*O
and \*LPrimitive\*O classes.
.wH .rS 
.PP 
The class pointer is \*LxmTextFieldWidgetClass\*O.
.PP 
The class name is \*LXmTextField\*O.
.wH .rE
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \*LXmN\*O or
\*LXmC\*O prefix and use the remaining letters.  To specify one of the defined
values for a resource in a .Xdefaults file, remove the \*LXm\*O prefix and use
the remaining letters (in either lower case or upper case, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (C),
set by using \*LXtSetValues\*O (S),
retrieved by using \*LXtGetValues\*O (G),
or is not applicable (N/A).
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmTextFieldResource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNactivateCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNblinkRate	500	CSG
\ \ \ \ \ \ XmCBlinkRate	\ \ \ \ \ \ \ int
_
XmNcolumns	dynamic	CSG
\ \ \ \ \ \ XmCColumns	\ \ \ \ \ \ \ short
_
XmNcursorPosition	0	CSG
\ \ \ \ \ \ XmCCursorPosition	\ \ \ \ \ \ \ XmTextPosition
_
XmNcursorPositionVisible	True	CSG
\ \ \ \ \ \ XmCCursorPositionVisible	\ \ \ \ \ \ \ Boolean
_
XmNeditable	True	CSG
\ \ \ \ \ \ XmCEditable	\ \ \ \ \ \ \ Boolean
_
XmNfocusCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNfontList	dynamic	CSG
\ \ \ \ \ \ XmCFontList	\ \ \ \ \ \ \ XmFontList
_
XmNgainPrimaryCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNlosePrimaryCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNlosingFocusCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNmarginHeight	5	CSG
\ \ \ \ \ \ XmCMarginHeight	\ \ \ \ \ \ \ Dimension
_
XmNmarginWidth	5	CSG
\ \ \ \ \ \ XmCMarginWidth	\ \ \ \ \ \ \ Dimension
_
XmNmaxLength	largest integer	CSG
\ \ \ \ \ \ XmCMaxLength	\ \ \ \ \ \ \ int
_
XmNmodifyVerifyCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNmodifyVerifyCallbackWcs	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNmotionVerifyCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNpendingDelete	True	CSG
\ \ \ \ \ \ XmCPendingDelete	\ \ \ \ \ \ \ Boolean
_
XmNresizeWidth	False	CSG
\ \ \ \ \ \ XmCResizeWidth	\ \ \ \ \ \ \ Boolean
_
XmNselectionArray	default array	CSG
\ \ \ \ \ \ XmCSelectionArray	\ \ \ \ \ \ \ XtPointer
_
XmNselectionArrayCount	3	CSG
\ \ \ \ \ \ XmCSelectionArrayCount	\ \ \ \ \ \ \ int
_
XmNselectThreshold	5	CSG
\ \ \ \ \ \ XmCSelectThreshold	\ \ \ \ \ \ \ int
_
XmNvalue	""	CSG
\ \ \ \ \ \ XmCValue	\ \ \ \ \ \ \ String
_
XmNvalueChangedCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNvalueWcs	(wchar_t *)""	CSG*
\ \ \ \ \ \ XmCValueWcs	\ \ \ \ \ \ \ wchar_t *
_
XmNverifyBell	dynamic	CSG
\ \ \ \ \ \ XmCVerifyBell	\ \ \ \ \ \ \ Boolean
_
.TE
.\" NROFF HACK END
*  This resource cannot be specified in a resource file.
.VL
.LI "\*LXmNactivateCallback\*O"
Specifies the list of callbacks that is called when the user invokes an
event that calls the \*LActivate()\*O function.
The type of the structure whose address is passed to this callback is
\*LXmAnyCallbackStruct\*O.
The reason sent by the callback is \*LXmCR_ACTIVATE\*O.
.LI "\*LXmNblinkRate\*O"
Specifies the blink rate of the text cursor in milliseconds.
The time indicated in the blink rate relates to the
length of time the cursor is visible and the time the
cursor is invisible (i.e., the time it will take to blink
the insertion cursor on and off will be 2 times the blink
rate).  The cursor will not blink when the blink rate
is set to zero.
The value must not be negative.
.nL
.ne 6
.LI "\*LXmNcolumns\*O"
Specifies the initial width of the text window as an integer number of
characters.  The width equals the number of characters specified by
this resource multiplied by the maximum character width of the associated
font.  For proportionate fonts, the actual number of characters that fit
on a given line may be greater than the value specified.
The value must be greater than 0.
The default value depends on the value of the \*LXmNwidth\*O resource.
If no width is specified the default is 20.
.LI "\*LXmNcursorPosition\*O"
Indicates the position in the text where the current insert cursor is to
be located.  Position is determined by the number of characters from
the beginning of the text.
.LI "\*LXmNcursorPositionVisible\*O"
Indicates that the insert cursor position is marked by a blinking text
cursor when the Boolean is True.
.LI "\*LXmNeditable\*O"
Indicates that the user can edit the text string when set to
True.
A false value will prohibit the user from editing the text.
.LI "\*LXmNfocusCallback\*O"
Specifies the list of callbacks called when TextField accepts
input focus.  The type of the structure whose address is passed to this
callback is \*LXmAnyCallbackStruct\*O.  The reason sent by the
callback is \*LXmCR_FOCUS\*O.
.LI "\*LXmNfontList\*O"
Specifies the font list to be used for TextField.  If this value
is NULL at initialization, it is initialized by looking up the
parent hierarchy of the widget for an ancestor that is a subclass
of the XmBulletinBoard or VendorShell widget class.
If such an ancestor is found, the font list is initialized to the
\*LXmNtextFontList\*O of the ancestor widget. If no such ancestor
is found, the default is implementation dependent.  Refer to
\*LXmFontList(3X)\*O for more information on a font list
structure.
.sp
TextField searches the font list for the first occurrence of a font set
that has a \*LXmFONTLIST_DEFAULT_TAG\*O.  If a default element is
not found, the first font set in the font list is used.  If the
list contains no font sets, the first font in the font list
is used.
.LI "\*LXmNgainPrimaryCallback\*O"
Specifies the list of callbacks that are called when the user invokes
an event that cause the text widget to gain ownership of the primary
selection. The callback reason for this callback is \*LXmCR_GAIN_PRIMARY\*O.
.LI "\*LXmNlosePrimaryCallback\*O"
Specifies the list of callbacks that are called when the user invokes
an event that cause the text widget to lose ownership of the primary
selection. The callback reason for this callback is \*LXmCR_LOSE_PRIMARY\*O.
.nL
.ne 12
.LI "\*LXmNlosingFocusCallback\*O"
Specifies the list of callbacks that is called
before TextField widget loses input focus.
The type of the structure whose address is passed to this callback is
\*LXmTextVerifyCallbackStruct\*O.
The reason sent by the callback is \*LXmCR_LOSING_FOCUS\*O.
.LI "\*LXmNmarginHeight\*O"
Specifies the distance between the top edge of the widget
window and the text, and the bottom edge of the widget
window and the text.
.LI "\*LXmNmarginWidth\*O"
Specifies the distance between the left edge of the widget
window and the text, and the right edge of the widget
window and the text.
.LI "\*LXmNmaxLength\*O"
Specifies the maximum length of the text string that can be entered into
text from the keyboard.
This value must be non-negative.
Strings that are entered using the \*LXmNvalue\*O resource or the
\*LXmTextFieldSetString\*O function ignore this resource.
.LI "\*LXmNmodifyVerifyCallback\*O"
Specifies the list of callbacks that is called
before text is deleted from or inserted into
TextField.
The type of the structure whose address is passed to this callback is
\*LXmTextVerifyCallbackStruct\*O.
The reason sent by the callback is \*LXmCR_MODIFYING_TEXT_VALUE\*O.
When multiple TextField widgets share the same
source, only the widget that initiates the source change will 
generate the \*LXmNmodifyVerifyCallback\*O.
.sp
If both \*LXmNmodifyVerifyCallback\*O and \*LXmNmodifyVerifyCallbackWcs\*O
are registered callback lists, the procedure(s) in the
\*LXmNmodifyVerifyCallback\*O list are always executed first; and the
resulting data, which may have been modified, is passed to the
\*LXmNmodifyVerifyCallbackWcs\*O callback routines.
.LI "\*LXmNmodifyVerifyCallbackWcs\*O"
Specifies the list of callbacks called before text is deleted from
or inserted into Text.  The type of the structure whose address is
passed to this callback is \*LXmTextVerifyCallbackStructWcs\*O.  The
reason sent by the callback is \*LXmCR_MODIFYING_TEXT_VALUE\*O.
When multiple TextField widgets share the same
source, only the widget that initiates the source change will 
generate the \*LXmNmodifyVerifyCallbackWcs\*O.
.sp
If both \*LXmNmodifyVerifyCallback\*O and \*LXmNmodifyVerifyCallbackWcs\*O
are registered callback lists, the procedure(s) in the
\*LXmNmodifyVerifyCallback\*O list are always executed first; and the
resulting data, which may have been modified, is passed to the
\*LXmNmodifyVerifyCallbackWcs\*O callback routines.
.LI "\*LXmNmotionVerifyCallback\*O"
Specifies the list of callbacks that is called
before the insert cursor is moved to a new position.
The type of the structure whose address is passed to this callback is
\*LXmTextVerifyCallbackStruct\*O.
The reason sent  by the callback is \*LXmCR_MOVING_INSERT_CURSOR\*O.
It is possible more than one \*LXmNmotionVerifyCallback\*Os to be 
generated from a single action.
.LI "\*LXmNpendingDelete\*O"
Indicates that pending delete mode is on when the Boolean is True.
Pending deletion is defined as deletion
of the selected text when an insertion is made.
.LI "\*LXmNresizeWidth\*O"
Indicates that TextField widget will attempt to resize its
width to accommodate all
the text contained in the widget when Boolean is True.
.nL
.ne 18
.LI "\*LXmNselectionArray\*O"
Defines the actions for multiple-mouse
clicks.  Each mouse click performed within a half of a second
of the previous mouse click will increment the index into
this array and perform the defined action for that index.
The possible actions are:
.wH .rS 
.ML
.LI
\*LXmSELECT_POSITION\*O\(emresets the insert cursor position.
.LI
\*LXmSELECT_WORD\*O\(emselects a word.
.LI
\*LXmSELECT_LINE\*O\(emselects a line of text.
.LE 
.wH .rE
.LI "\*LXmNselectionArrayCount\*O"
Specifies the number of actions that are defined in the
\*LXmNselectionArray\*O resource.
The value must not be negative.
.LI "\*LXmNselectThreshold\*O"
Specifies the number of pixels of motion that is required to select the
next character when selection is performed using the click-drag
mode of selection.
The value must not be negative.
.LI "\*LXmNvalue\*O"
Specifies the string value of the TextField widget as a \*Lchar*\*O
data value.  
If \*LXmNvalue\*O and \*LXmNvalueWcs\*O are both
defined, the value of \*LXmNvalueWcs\*O supersedes that of
\*LXmNvalue\*O.  \*LXtGetValues\*O returns a copy of the value of
the internal buffer and \*LXtSetValues\*O copies the string values
into the internal buffer.
.LI "\*LXmNvalueChangedCallback\*O"
Specifies the list of callbacks that is called
after text is deleted from or inserted into
TextField.
The type of the structure whose address is passed to this callback is
\*LXmAnyCallbackStruct\*O.
The reason sent by the callback is \*LXmCR_VALUE_CHANGED\*O.
When multiple TextField widgets share the same
source, only the widget that initiates the source change will 
generate the \*LXmNvalueChangedCallback\*O.  This callback represents a 
change in the source in the TextField, not in the TextField
widget.  The \*LXmNvalueChangedCallback\*O should occur only in pairs
with a \*LXmNmodifyVerifyCallback\*O, assuming that the \*Vdoit\*O
flag in the callback structure of the \*LXmNmodifyVerifyCallback\*O is
not set to False.
.LI "\*LXmNvalueWcs\*O"
Specifies the string value of the TextField widget as a \*Lwchar_t*\*O data
value.  This resource cannot be specified in a resource file.
.sp
If \*LXmNvalue\*O and \*LXmNvalueWcs\*O are both defined,
the value of \*LXmNvalueWcs\*O supersedes that of \*LXmNvalue\*O.
\*LXtGetValues\*O returns a copy of the value of the internal buffer
encoded as a wide character string.  \*LXtSetValues\*O copies the
value of the wide character string into the internal buffer.
.LI "\*LXmNverifyBell\*O"
Specifies whether a bell will sound when an action is reversed
during a verification callback.
The default depends on the value of the ancestor VendorShell's 
\*LXmNaudibleWarning\*O resource.
.LE
.SS "Inherited Resources"
TextField widget inherits behavior and resources from the following
superclasses.  For a complete description of these resources, refer to the
man page for that superclass.
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmPrimitive Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNbottomShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCBottomShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNbottomShadowPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCBottomShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNforeground	dynamic	CSG
\ \ \ \ \ \ XmCForeground	\ \ \ \ \ \ \ Pixel
_
XmNhelpCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNhighlightColor	dynamic	CSG
\ \ \ \ \ \ XmCHighlightColor	\ \ \ \ \ \ \ Pixel
_
XmNhighlightOnEnter	False	CSG
\ \ \ \ \ \ XmCHighlightOnEnter	\ \ \ \ \ \ \ Boolean
_
XmNhighlightPixmap	dynamic	CSG
\ \ \ \ \ \ XmCHighlightPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNhighlightThickness	2	CSG
\ \ \ \ \ \ XmCHighlightThickness	\ \ \ \ \ \ \ Dimension
_
.wH .tH
XmNnavigationType	XmTAB_GROUP	CSG
\ \ \ \ \ \ XmCNavigationType	\ \ \ \ \ \ \ XmNavigationType
_
XmNshadowThickness	2	CSG
\ \ \ \ \ \ XmCShadowThickness	\ \ \ \ \ \ \ Dimension
_
XmNtopShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNtopShadowPixmap	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNtraversalOn	True	CSG
\ \ \ \ \ \ XmCTraversalOn	\ \ \ \ \ \ \ Boolean
_
XmNunitType	dynamic	CSG
\ \ \ \ \ \ XmCUnitType	\ \ \ \ \ \ \ unsigned char
_
XmNuserData	NULL	CSG
\ \ \ \ \ \ XmCUserData	\ \ \ \ \ \ \ XtPointer
_
.TE
.\" NROFF HACK END
.PP
.wH .in 0 
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Core Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNaccelerators	dynamic	CSG
\ \ \ \ \ \ XmCAccelerators	\ \ \ \ \ \ \ XtAccelerators
_
XmNancestorSensitive	dynamic	G
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNbackground	dynamic	CSG
\ \ \ \ \ \ XmCBackground	\ \ \ \ \ \ \ Pixel
_
XmNbackgroundPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderColor	XtDefaultForeground	CSG
\ \ \ \ \ \ XmCBorderColor	\ \ \ \ \ \ \ Pixel
_
XmNborderPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderWidth	0	CSG
\ \ \ \ \ \ XmCBorderWidth	\ \ \ \ \ \ \ Dimension
_
XmNcolormap	dynamic	CG
\ \ \ \ \ \ XmCColormap	\ \ \ \ \ \ \ Colormap
_
XmNdepth	dynamic	CG
\ \ \ \ \ \ XmCDepth	\ \ \ \ \ \ \ int
_
XmNdestroyCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNheight	dynamic	CSG
\ \ \ \ \ \ XmCHeight	\ \ \ \ \ \ \ Dimension
_
XmNinitialResourcesPersistent	True	C
\ \ \ \ \ \ XmCInitialResourcesPersistent	\ \ \ \ \ \ \ Boolean
_
XmNmappedWhenManaged	True	CSG
\ \ \ \ \ \ XmCMappedWhenManaged	\ \ \ \ \ \ \ Boolean
_
XmNscreen	dynamic	CG
\ \ \ \ \ \ XmCScreen	\ \ \ \ \ \ \ Screen *
_
.wH .tH
XmNsensitive	True	CSG
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNtranslations	dynamic	CSG
\ \ \ \ \ \ XmCTranslations	\ \ \ \ \ \ \ XtTranslations
_
XmNwidth	dynamic	CSG
\ \ \ \ \ \ XmCWidth	\ \ \ \ \ \ \ Dimension
_
XmNx	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
XmNy	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
.TE
.\" NROFF HACK END
.wH .in  
.SS "Callback Information"
A pointer to the following structure is passed to each callback:
.sS
.iS
.ta .25i 1.5i
typedef struct
{
	int	\*Vreason\*L;
	XEvent	\*V* event\*L;
} XmAnyCallbackStruct;
.iE
.sE
.wH .fi
.wH .rS 
.VL .75i 
.LI "\*Vreason\*O"
Indicates why the callback was invoked.
.LI "\*Vevent\*O"
Points to the \*LXEvent\*O that triggered the callback.
.LE 
.wH .rE
.PP
The TextField widget defines a new callback structure
for use with verification callbacks.  Note that
not all of the fields are relevant for every
callback reason.  The application must first
look at the \*Vreason\*O field and use only the structure
members that are valid for the particular reason.
The values \*VstartPos\*O, \*VendPos\*O, and \*Vtext\*O in the
callback structure \*LXmTextVerifyCallbackStruct\*O may be modified upon
receiving the callback, and these changes will be reflected as the
change made to the source of the TextField widget.  (For example, all
keystrokes can be converted to spaces or NULL characters when a
password is entered into a TextField widget.)  The application
programmer should not overwrite the \*Vtext\*O field, but should
attach data to that pointer.
.PP
A pointer to the following structure is passed to the
callbacks for \*LXmNlosingFocusCallback\*O, \*LXmNmodifyVerifyCallback\*O,
and \*LXmNmotionVerifyCallback\*O.
.nL
.ne 15
.sS
.iS
.ta .25i 1.5i
typedef struct
{
	int		\*Vreason\*L;
	XEvent		*\*Vevent\*L;
	Boolean		\*Vdoit\*L;
	XmTextPosition	\*VcurrInsert, newInsert\*L;
	XmTextPosition	\*VstartPos, endPos\*L;
	XmTextBlock	\*Vtext\*L;
} XmTextVerifyCallbackStruct, *XmTextVerifyPtr;
.iE
.sE
.wH .fi
.wH .rS 
.VL .75i 
.LI "\*Vreason\*O"
Indicates why the callback was invoked.
.LI "\*Vevent\*O"
Points to the \*LXEvent\*O that triggered the callback.
It can be NULL.  For example, changes made to the Text widget
programmatically do not have an event that can be
passed to the associated callback.
.LI "\*Vdoit\*O"
Indicates whether that action that invoked the callback will be performed.
Setting \*Vdoit\*O to False negates the action.
.LI "\*VcurrInsert\*O"
Indicates the current position of the insert cursor.
.LI "\*VnewInsert\*O"
Indicates the position at which the user attempts to position the insert
cursor.
.LI "\*VstartPos\*O"
Indicates the starting position of the text to modify.  If the callback is
not a modify verification callback, this value is the same as \*VcurrInsert\*O.
.LI "\*VendPos\*O"
Indicates the ending position of the text to modify.  If no text is replaced or
deleted, then the value is the same as \*VstartPos\*O.  If the callback is not
a modify verification callback, this value is the same as \*VcurrInsert\*O.
.LI "\*Vtext\*O"
Points to a structure of type \*LXmTextBlockRec\*O.  This structure holds
the textual information to be inserted.
.LE
.wH .rE
.sS
.iS
.ta .25i 1.5i
typedef struct
{
	char	*\*Vptr\*L;
	int	\*Vlength\*L;
	XmTextFormat	\*Vformat\*L
} XmTextBlockRec, *XmTextBlock;
.iE
.sE
.wH .fi
.nL
.ne 10
.wH .rS 
.VL .75i 
.LI "\*Vptr\*O"
Is the text to be inserted.  \*Vptr\*O points to a temporary
storage space that is reused after the callback is finished. Therefore,
if an application needs to save the text to be inserted, it should copy
the text into its own data space.
.LI "\*Vlength\*O"
Specifies the length of the text to be inserted.
.LI "\*Vformat\*O"
Specifies the format of the text, either \*LXmFMT_8_BIT\*O or \*LXmFMT_16_BIT\*O.
.LE
.PP
A pointer to the following structure is passed to callbacks
for \*LXmNmodifyVerifyCallbackWcs\*O.
.sS
.iS
.ta .25i 1.5i
typedef struct
{
	int		\*Vreason\*L;
	XEvent		*\*Vevent\*L;
	Boolean		\*Vdoit\*L;
	XmTextPosition		\*VcurrInsert, newInsert\*L;
	XmTextPosition		\*VstartPos, endPos\*L;
	XmWcsTextBlock		\*Vtext\*L;
} XmTextVerifyCallbackStructWcs, *XmTextVerifyPtrWcs;
.iE
.sE
.iE
.sE
.wH .fi
.VL .75i
.LI "\*Vreason\*O"
Indicates why the callback was invoked.
.LI "\*Vevent\*O"
Points to the \*LXEvent\*O that triggered the callback.
It can be NULL.  For example, changes made to the Text widget
programmatically do not have an event that can be
passed to the associated callback.
.LI "\*Vdoit\*O"
Indicates whether the action that invoked the callback is performed.
Setting \*Vdoit\*O to False negates the action.
.LI "\*VcurrInsert\*O"
Indicates the current position of the insert cursor.
.LI "\*VnewInsert\*O"
Indicates the position at which the user attempts to position the insert
cursor.
.LI "\*VstartPos\*O"
Indicates the starting position of the text to modify.  If the callback is
not a modify verification callback, this value is the same 
as \*VcurrInsert\*O.
.LI "\*VendPos\*O"
Indicates the ending position of the text to modify.  If no text is 
replaced or
deleted, the value is the same as \*VstartPos\*O.  If the callback is not
a modify verification callback, this value is the same as \*VcurrInsert\*O.
.LI "\*Vtext\*O"
Points to a structure of type \*LXmTextBlockRecWcs\*O.  This structure holds
the textual information to be inserted.
.LE
.sS
.iS
.ta .25i 1.5i
typedef struct
{
        wchar_t	 *\*Vwcsptr\*L;
        int	\*Vlength\*L;
} XmTextBlockRecWcs, *XmTextBlockWcs;
.iE
.sE
.wH .fi
.VL .75i
.LI "\*Vwcsptr\*O"
.ne 15
Points to the wide character text to be inserted.
.LI "\*Vlength\*O"
Specifies the number of characters to be inserted.
.LE
.PP
The following table describes the reasons for which the individual
verification callback structure fields are valid:
.PP
.TS
center, tab(;);
cb  cb
lfB  lfH .
Reason;Valid Fields
.sp .2
_
.sp .2
XmCR_LOSING_FOCUS;T{
\*Vreason, event, doit\*O
T}
;;
XmCR_MODIFYING_TEXT_VALUE;T{
\*Vreason, event, doit, currInsert, newInsert, startPos, endPos, text\*O
T}
;;
XmCR_MOVING_INSERT_CURSOR;T{
\*Vreason, event, doit, currInsert, newInsert\*O
T}
.sp .2
.TE
.SS "Translations"
XmTextField includes translations from XmPrimitive.
The XmTextField translations are listed below.
These translations may not directly correspond to a
translation table.
The actions represent the effective behavior of the associated events,
and they may differ in a right-to-left language environment.
.sp
.iS
.ta 1.5i
BSelect Press:	grab-focus()
BSelect Motion:	extend-adjust()
BSelect Release:	extend-end()
.sp \n(PDu
BExtend Press:	extend-start()
BExtend Motion:	extend-adjust()
BExtend Release:	extend-end()
.sp \n(PDu
BToggle Press:	move-destination()
.sp \n(PDu
BDrag Press:	process-bdrag()
BDrag Motion:	secondary-adjust()
BDrag Release:	copy-to()
.sp \n(PDu
MCtrl BDrag Press:	process-bdrag()
MCtrl BDrag Motion:	secondary-adjust()
MCtrl BDrag Release:	copy-to()
.sp \n(PDu
MShift BDrag Press:	process-bdrag()
MShift BDrag Motion:	secondary-adjust()
MShift BDrag Release:	move-to()
.sp \n(PDu
MAlt BDrag Press:	process-bdrag()
MAlt BDrag Motion:	secondary-adjust()
MAlt BDrag Release:	copy-to()
MAlt MCtrl BDrag Release:	copy-to()
MAlt MShift BDrag Release:	move-to()
.sp \n(PDu
KUp:	traverse-prev()
.sp \n(PDu
KDown:	traverse-next()
.sp \n(PDu
KLeft:	backward-character()
MShift KLeft:	key-select(left)
MCtrl KLeft:	backward-word()
MShift MCtrl KLeft:	backward-word(extend)
.sp \n(PDu
KRight:	forward-character()
MShift KRight:	key-select(right)
MCtrl KRight:	forward-word()
MShift MCtrl KRight:	forward-word(extend)
.sp \n(PDu
KPageLeft:	page-left()
KPageRight:	page-right()
.sp \n(PDu
KBeginLine:	beginning-of-line()
MShift KBeginLine:	beginning-of-line(extend)
.sp \n(PDu
KEndLine:	end-of-line()
MShift KEndLine:	end-of-line(extend)
.sp \n(PDu
KNextField:	next-tab-group()
KPrevField:	prev-tab-group()
.sp \n(PDu
KActivate:	activate()
.sp \n(PDu
KDelete:	delete-next-character()
KBackSpace:	delete-previous-character()
.sp \n(PDu
KAddMode:	toggle-add-mode()
.sp \n(PDu
KSpace:	self-insert()
MShift KSpace:	self-insert()
KSelect:	set-anchor()
KExtend:	key-select()
MAny KCancel:	process-cancel()
KClear:	clear-selection()
KSelectAll:	select-all()
KDeselectAll:	deselect-all()
.sp \n(PDu
KCut:	cut-clipboard()
KCopy:	copy-clipboard()
KPaste:	paste-clipboard()
.sp \n(PDu
KPrimaryCut:	cut-primary()
KPrimaryCopy:	copy-primary()
KPrimaryPaste:	copy-primary()
.sp \n(PDu
KHelp:	Help()
.sp \n(PDu
KAny:	self-insert()
.wH .fi
.iE
.SS "Action Routines"
The XmText action routines are described below:
.VL
.LI "\*Lactivate()\*O:"
Calls the callbacks for \*LXmNactivateCallback\*O.
If the parent is a manager, passes the event to the parent.
.LI "\*Lbackward-character()\*O:"
Moves the insertion cursor one character to the left.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section in \*LXmText(3X)\*O.
This action may have different behavior in a right-to-left language
environment.
.LI "\*Lbackward-word(\*Vextend\*L)\*O:"
If this action is called with no argument,
moves the insertion cursor to the first non-whitespace character after the
first whitespace character to the left or after the beginning of the line.
If the insertion cursor is already at the beginning of a word,
moves the insertion cursor to the beginning of the previous word.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section in \*LXmText(3X)\*O.
This action may have different behavior in a locale other than the C locale.
.sp
If called with an argument of \*Lextend\*O, moves the insertion cursor as
in the case of no argument and extends the current selection.
For other effects, see the description of shifted navigation operations
in the "Keyboard Selection" section in \*LXmText(3X)\*O.
.LI "\*Lbeginning-of-line(\*Vextend\*L)\*O:"
If this action is called with no argument,
moves the insertion cursor to the beginning of the line.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section in \*LXmText(3X)\*O.
.sp
If called with an argument of \*Lextend\*O, moves the insertion cursor as
in the case of no argument and extends the current selection.
For other effects, see the description of shifted navigation operations
in the "Keyboard Selection" section in \*LXmText(3X)\*O.
.LI "\*Lclear-selection()\*O:"
Clears the current selection by replacing each character except
\*L<Return>\*O with a \*L<space>\*O character.
.LI "\*Lcopy-clipboard()\*O:"
Copies the current selection to the clipboard.
.LI "\*Lcopy-primary()\*O:"
Copies the primary selection to just before the insertion cursor.
.LI "\*Lcopy-to()\*O:"
If a secondary selection exists, copies the secondary selection to just before
the insertion cursor.
If no secondary selection exists, copies the primary selection to the
pointer location.
.LI "\*Lcut-clipboard()\*O:"
Cuts the current selection to the clipboard.
.LI "\*Lcut-primary()\*O:"
Cuts the primary selection to just before the insertion cursor.
.LI "\*Ldelete-next-character()\*O:"
In normal mode if there is a non-null selection, deletes the selection, otherwise
deletes the character following the insertion cursor.
In add mode if there is a non-null selection, the cursor is not disjoint
from the selection and \*LXmNpendingDelete\*O is set to True,
deletes the selection, otherwise
deletes the character following the insertion cursor.
This may impact the selection.
.LI "\*Ldelete-next-word()\*O:"
In normal mode if there is a non-null selection, deletes the selection, otherwise
deletes the characters following the insertion cursor to the next space, tab
or end of line character.
In add mode if there is a non-null selection, the cursor is not disjoint
from the selection and \*LXmNpendingDelete\*O is set to True,
deletes the selection, otherwise
deletes the characters following the insertion cursor to the next space, tab
or end of line character.
This may impact the selection.
This action may have different behavior in a locale other than the C locale.
.LI "\*Ldelete-previous-character()\*O:"
In normal mode if there is a non-null selection, deletes the selection, otherwise
deletes the character of text immediately preceding the insertion cursor.
In add mode if there is a non-null selection, the cursor is not disjoint
from the selection and \*LXmNpendingDelete\*O is set to True,
deletes the selection, otherwise
deletes the character of text immediately preceding the insertion cursor.
This may impact the selection.
.LI "\*Ldelete-previous-word()\*O:"
In normal mode if there is a non-null selection, deletes the selection, otherwise
deletes the characters preceding the insertion cursor to the next
space, tab or beginning of the line character.
In add mode if there is a non-null selection, the cursor is not disjoint
from the selection and \*LXmNpendingDelete\*O is set to True,
deletes the selection, otherwise
deletes the characters preceding the insertion cursor to the next space,
tab or beginning of line character..
This may impact the selection.
This action may have different behavior in a locale other than the C locale.
.LI "\*Ldelete-selection()\*O:"
Deletes the current selection.
.LI "\*Ldelete-to-end-of-line()\*O:"
In normal mode if there is a non-null selection, deletes the selection, otherwise
deletes the characters following the insertion cursor to the next end of
line character.
In add mode if there is a non-null selection, the cursor is not disjoint
from the selection and \*LXmNpendingDelete\*O is set to True,
deletes the selection, otherwise
deletes the characters following the insertion cursor to the next end
of line character.
This may impact the selection.
.LI "\*Ldelete-to-start-of-line()\*O:"
In normal mode if there is a non-null selection, deletes the selection, otherwise
deletes the characters preceding the insertion cursor to the previous
beginning of line character.
In add mode if there is a non-null selection, the cursor is not disjoint
from the selection and \*LXmNpendingDelete\*O is set to True,
deletes the selection, otherwise
deletes the characters preceding the insertion cursor
to the previous beginning of line character.
This may impact the selection.
.LI "\*Ldeselect-all()\*O:"
Deselects the current selection.
.LI "\*Lend-of-line(\*Vextend\*L)\*O:"
If this action is called with no argument,
moves the insertion cursor to the end of the line.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section in \*LXmText(3X)\*O.
If called with an argument of \*Lextend\*O, moves the insertion cursor as
in the case of no argument and extends the current selection.
For other effects, see the description of shifted navigation operations
in the "Keyboard Selection" section in \*LXmText(3X)\*O.
.LI "\*Lextend-adjust()\*O:"
Selects text from the anchor to the pointer position and deselects text
outside that range.
.LI "\*Lextend-end()\*O:"
Moves the insertion cursor to the position of the pointer.
.LI "\*Lextend-start()\*O:"
Adjusts the anchor using the balance-beam method.
Selects text from the anchor to the pointer position and deselects text
outside that range.
.LI "\*Lforward-character()\*O:"
Moves the insertion cursor one character to the right.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section in \*LXmText(3X)\*O.
This action may have different behavior in a right-to-left language
environment.
.LI "\*Lforward-word(\*Vextend\*L)\*O:"
If this action is called with no argument, moves the insertion cursor to
the first whitespace character or end of line following the next
non-whitespace character.
If the insertion cursor is already at the end of a word,
moves the insertion cursor to the end of the next word.
For other effects, see the description of navigation operations in the
"Keyboard Selection" section in \*LXmText(3X)\*O.
This action may have different behavior in a locale other than the C locale.
.sp
If called with an argument of \*Lextend\*O, moves the insertion cursor as
in the case of no argument and extends the current selection.
For other effects, see the description of shifted navigation operations
in the "Keyboard Selection" section in \*LXmText(3X)\*O.
.LI "\*Lgrab-focus()\*O:"
This key binding performs the action defined in the
\*LXmNselectionArray\*O, depending on the number of multiple mouse
clicks.
The default selection array ordering is one click to move the
insertion cursor to the pointer position, two clicks to select a word, three
clicks to select a line of text, and four clicks to select all text.
A single click also deselects any selected text and sets the anchor at
the pointer position.
This action may have different behavior in a locale other than the C locale.
.LI "\*LHelp()\*O:"
Calls the callbacks for \*LXmNhelpCallback\*O if any exist.
If there are no help
callbacks for this widget, this action calls the help callbacks
for the nearest ancestor that has them.
.LI "\*Lkey-select(\*Vdirection\*L)\*O:"
If called with an argument of \*Lright\*O, moves the insertion cursor
one character to the right and extends the current selection.
If called with an argument of \*Lleft\*O, moves the insertion cursor
one character to the left and extends the current selection.
If called with no argument, extends the current selection.
For other effects, see the description of shifted navigation operations
and \*LKExtend\*O" in the "Keyboard Selection" section in \*LXmText(3X)\*O.
.LI "\*Lmove-destination()\*O:"
Moves the insertion cursor to the pointer position without changing any
existing current selection.
If there is no current selection, sets the widget as the destination widget.
.LI "\*Lmove-to()\*O:"
If a secondary selection exists, cuts the secondary selection to just before
the insertion cursor.
If no secondary selection exists, cuts the primary selection to the
pointer location.
.LI "\*Lnext-tab-group()\*O:"
Traverses to the next tab group.
.nL
.ne 8
.LI "\*Lpage-left()\*O:"
Scrolls the viewing window left one page of text.
.LI "\*Lpage-right()\*O:"
Scrolls the viewing window right one page of text.
.LI "\*Lpaste-clipboard()\*O:"
Pastes the contents of the clipboard before the insertion cursor.
.LI "\*Lprev-tab-group()\*O:"
Traverses to the previous tab group.
.LI "\*Lprocess-bdrag()\*O"
The result of this action is determined by several factors:
position of the location cursor, movement of the location cursor,
and the interval between a \*LBDrag\*O press and release.
.sp
This action copies the current selection to the insertion cursor if text
is selected, the location cursor is disjoint from the selection,
and no motion is detected within a given time interval.
.sp
It performs a secondary selection and copies the selection to
the position where the text was last edited if the cursor is
disjoint from a current selection (if one exists), the time interval
is exceeded, and movement of the location cursor is detected.
.sp
The action drags the current selection if the location cursor is
positioned on the selection, the time interval is exceeded, and
movement of the location cursor is detected.  This action creates
a DragContext object whose \*LXmNexportTargets\*O resource value
includes target types of COMPOUND_TEXT, STRING, and TEXT.
.LI "\*Lprocess-cancel()\*O:"
Cancels the current \*Lextend-adjust()\*O, \*Lsecondary-adjust()\*O
or \*Lprocess-bdrag\*O
operation and leaves the selection state as it was before the operation,
otherwise, and the parent is a manager, it passes the event to the parent.
.LI "\*Lsecondary-adjust()\*O:"
Extends the secondary selection to the pointer position.
.LI "\*Lsecondary-start()\*O:"
Marks the beginning of a secondary selection.
.LI "\*Lselect-all()\*O:"
Selects all text.
.LI "\*Lself-insert()\*O:"
If \*LXmNpendingDelete\*O is True and the cursor is not disjoint from the
current selection, deletes the entire selection.
Inserts the character associated with the key pressed
before the insertion cursor.
.LI "\*Lset-anchor()\*O:"
Resets the anchor point for extended selections.
Resets the destination  of secondary selection actions.
.LI "\*Ltoggle-add-mode()\*O:"
Toggles the state of Add Mode.
.LI "\*Ltoggle-overstrike()\*O:"
Toggles the state of the text insertion mode.  By default,
characters typed into the TextField widget are inserted before
the position of the insertion cursor.  In overstrike
mode, characters entered into the TextField widget replace
the characters that directly follow the insertion cursor.
In overstrike mode, when the end of a line is reached,
characters are appended to the end of the line.
.LI "\*Ltraverse-home()\*O:"
Traverses to the first widget in the tab group.
.LI "\*Ltraverse-next()\*O:"
Traverses to the next widget in the tab group.
.LI "\*Ltraverse-prev()\*O:"
Traverses to the previous widget in the tab group.
.LE
.SS "Additional Behavior"
This widget has the additional behavior described below:
.VL
.LI "\*L<FocusIn>\*O:"
Draws the insertion cursor as solid and starts blinking the cursor.
.LI "\*L<FocusOut>\*O:"
Displays the insertion cursor as a stippled I-beam unless it is the destination
widget.
.LE
.SS "Virtual Bindings"
The bindings for virtual keys are vendor specific.
The following table lists the TextField-specific bindings of virtual
keys to actual key event descriptions in 1/Motif:
.PP
.TS
center,tab(@);
cb s
lb  lb.
Virtual Key Bindings
_
Virtual Key@Actual Key Events
=
KExtend@Ctrl Shift<Key>space
@Shift<Key>osfSelect
_
KSelect@Ctrl<Key>space
@<Key>osfSelect
.TE
.PP
For information about bindings for virtual buttons and keys,
see \*LVirtualBindings(3X)\*O.
.SH RELATED INFORMATION
.na
\*LCore(3X)\*O,
\*LXmCreateTextField(3X)\*O,
\*LXmFontList(3X)\*O,
\*LXmFontListAppendEntry(3X)\*O,
\*LXmPrimitive(3X)\*O,
\*LXmTextFieldClearSelection(3X)\*O,
\*LXmTextFieldCopy(3X)\*O,
\*LXmTextFieldCut(3X)\*O,
\*LXmTextFieldGetBaseline(3X)\*O,
\*LXmTextFieldGetEditable(3X)\*O,
\*LXmTextFieldGetInsertionPosition(3X)\*O,
\*LXmTextFieldGetLastPosition(3X)\*O,
\*LXmTextFieldGetMaxLength(3X)\*O,
\*LXmTextFieldGetSelection(3X)\*O,
\*LXmTextFieldGetSelectionPosition(3X)\*O,
*LXmTextFieldGetSelectionWcs(3X)\*O,
\*LXmTextFieldGetString(3X)\*O,
\*LXmTextFieldGetStringWcs(3X)\*O,
\*LXmTextFieldGetSubstring(3X)\*O,
\*LXmTextFieldGetSubstringWcs(3X)\*O,
\*LXmTextFieldInsert(3X)\*O,
\*LXmTextFieldInsertWcs(3X)\*O,
\*LXmTextFieldPaste(3X)\*O,
\*LXmTextFieldPosToXY(3X)\*O,
\*LXmTextFieldRemove(3X)\*O,
\*LXmTextFieldReplace(3X)\*O,
\*LXmTextFieldReplaceWcs(3X)\*O,
\*LXmTextFieldSetAddMode(3X)\*O,
\*LXmTextFieldSetEditable(3X)\*O,
\*LXmTextFieldSetHighlight(3X)\*O,
\*LXmTextFieldSetInsertionPosition(3X)\*O,
\*LXmTextFieldSetMaxLength(3X)\*O,
\*LXmTextFieldSetSelection(3X)\*O,
\*LXmTextFieldSetString(3X)\*O,
\*LXmTextFieldSetStringWcs(3X)\*O,
\*LXmTextFieldShowPosition(3X)\*O, and
\*LXmTextFieldXYToPos(3X)\*O.
.ad
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: pthread_cond_timedwait.3,v $ $Revision: 3.4.4.2 $ (DEC) $Date: 1994/01/13 15:16:48 $
.\"
...\" Copyright 1991, Open Software Foundation, Inc. ALL RIGHTS RESERVED.
.wH "<routine_section>"
.TH pthread_cond_timedwait 3
.SH NAME
.PP
\*Lpthread_cond_timedwait\*O \- Causes a thread to wait for a condition variable to be  signaled or broadcast for a specified period of time.
.PP
.SH SYNOPSIS
.PP
.sS
\*L#include <pthread.h>
.fS "int pthread_cond_timedwait"
.dS "pthread_cond_t"
\*V*cond\*L
.dE
.dS "pthread_mutex_t"
\*V*mutex\*L
.dE
.dS "struct timespec"
\*V*abstime\*O
.dE
.fE
.sE
.PP
.wH "<endformat>"
.SH PARAMETERS
.PP
.VL 5m
.LI "\*Vcond\*O"
Condition variable waited on.
.LI "\*Vmutex\*O"
Mutex associated with the condition variable specified in \*Vcond\*O.
.LI "\*Vabstime\*O"
Absolute time at which the wait expires, if the condition has not been
signaled or broadcast. (See the \*Lpthread_get_expiration_np\*O
routine, which is used to obtain a value for this parameter.)
.LE
.\" \&.wH "<endparameters>"
.SH DESCRIPTION
.iX "Waiting for condition variable"
.iX "Condition variable" "waiting for a specified time"
.PP
This routine causes a thread to wait until one of the following occurs:
.ML
.LI
The specified condition variable is signaled or broadcast.
.LI
The current system clock time is greater than or equal to the time
specified by the \*Vabstime\*O parameter.
.LE
.PP
This routine is identical to \*Lpthread_cond_wait\*O except that this
routine can return before a condition variable is signaled or broadcast
\(em specifically, when a specified time expires.
.PP
If the current time equals or exceeds the expiration time, this routine
returns immediately, without causing the current thread to wait. Otherwise,
waiting on the condition variable can become a nonblocking loop.
.PP
Call this routine after you lock the mutex specified in \*Vmutex\*O.
The results of this routine are unpredictable if this routine is called
without first locking the mutex.
.SH RETURN VALUES
.PP
If an error condition occurs, this routine returns \-1 and
\*Eerrno\*O is set to the corresponding error value. Possible return
values are as follows:
.sp
.TS
center, tab(@);
l l l.
\*LReturn@Error@Description\*O
_
\00@@Successful completion.
\&\-1@[\*LEINVAL\*O]@T{
The value specified by \*Vcond\*O, \*Vmutex\*O, or \*Vabstime\*O is invalid.
T}
\&@@T{
Different mutexes are supplied for concurrent \*Lpthread_cond_timedwait\*O operations or \*Lpthread_cond_wait\*O operations on the same condition variable.
T}
\&\-1@[\*LEAGAIN\*O]@The time specified by \*Vabstime\*O expired.
\&\-1@[\*LEDEADLK\*O]@A deadlock condition is detected.
.TE
.wH "<endnas_return>"
.cS
.SH EXAMPLES
.PP
.oS
int pthread_cond_timedwait (pthread_cond_t *cond,
 pthread_mutex_t *mutex, struct timespec *abstime);
.oE
.cE
.wH "<endnas_examples>"
.SH RELATED INFORMATION
.PP
\*Lpthread_cond_broadcast\*O(3),
\*Lpthread_cond_destroy\*O(3),
\*Lpthread_cond_init\*O(3),
\*Lpthread_cond_signal\*O(3),
\*Lpthread_cond_wait\*O(3),
\*Lpthread_get_expiration_np\*O(3)
.EQ
delim off
.EN

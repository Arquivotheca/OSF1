.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: complex.3,v $ $Revision: 1.1.8.2 $ (DEC) $Date: 1994/01/15 02:48:03 $
.\"
.\"
.\" (c) Copyright 1992, OPEN PROVENCHER FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\"
.\"
.TH complex 3
.SH NAME
.PP
\*Lcsin\*O, \*Lccos\*O, \*Lcdiv\*O, \*Lcexp\*O, \*Lclog\*O, \*Lcmul\*O, \*Lcpow\*O, \*Lcsqrt\*O \- Complex functions
.SH LIBRARY
.PP
.iX "sine of a complex number"
.iX "cosine of a complex number"
.iX "complex division"
.iX "complex exponential"
.iX "complex natural logarithm"
.iX "complex multiplication"
.iX "complex power"
.iX "complex square root"
.iX "complex functions" "csin"
.iX "complex functions" "ccos"
.iX "complex functions" "cdiv"
.iX "complex functions" "cexp"
.iX "complex functions" "clog"
.iX "complex functions" "cmul"
.iX "complex functions" "cpow"
.iX "complex functions" "csqrt"
.iX "csin function"
.iX "ccos function"
.iX "cdiv function"
.iX "cexp function"
.iX "clog function"
.iX "cmul function"
.iX "cpow function"
.iX "csqrt function"
\*OMath Library (\*Llibm.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <math.h>
.PP
\*Ldouble_complex csin	(double \*Vx\*L, double \*Vy\*L);
.nL
\*Lfloat_complex  csinf	(float  \*Vx\*L, float  \*Vy\*L);
.nL
\*Ldouble_complex ccos	(double \*Vx\*L, double \*Vy\*L);
.nL
\*Lfloat_complex  ccosf	(float  \*Vx\*L, float  \*Vy\*L);
.nL
\*Ldouble_complex cdiv	(double \*Va\*L, double \*Vb\*L, double \*Vc\*L, double \*Vd\*L);
.nL
\*Lfloat_complex  cdivf	(float  \*Va\*L, float  \*Vb\*L, float  \*Vc\*L, float  \*Vd\*L);
.nL
\*Ldouble_complex cexp	(double \*Vx\*L, double \*Vy\*L);
.nL
\*Lfloat_complex  cexpf	(float  \*Vx\*L, float  \*Vy\*L);
.nL
\*Ldouble_complex clog	(double \*Vx\*L, double \*Vy\*L);
.nL
\*Lfloat_complex  clogf	(float  \*Vx\*L, float  \*Vy\*L);
.nL
\*Ldouble_complex cmul	(double \*Va\*L, double \*Vb\*L, double \*Vc\*L, double \*Vd\*L);
.nL
\*Lfloat_complex  cmulf	(float  \*Va\*L, float  \*Vb\*L, float  \*Vc\*L, float  \*Vd\*L);
.nL
\*Ldouble_complex cpow	(double \*Va\*L, double \*Vb\*L, double \*Vc\*L, double \*Vd\*L);
.nL
\*Lfloat_complex  cpowf	(float  \*Va\*L, float  \*Vb\*L, float  \*Vc\*L, float  \*Vd\*L);
.nL
\*Ldouble_complex csqrt	(double \*Vx\*L, double \*Vy\*L);
.nL
\*Lfloat_complex csqrtf	(float  \*Vx\*L, float  \*Vy\*L);\*O
.nL
.sE
.SH DESCRIPTION
.PP
These functions can only be called from languages that support the
double_complex and float_complex data types.
.PP
\*Lcsin(\|)\*O and \*Lcsinf(\|)\*O
compute the sine of a complex number.
.PP
\*Lccos(\|)\*O and \*Lccosf(\|)\*O
return the cosine of a complex number.
.PP
\*Lcdiv(\|)\*O and \*Lcdivf(\|)\*O
return the quotient of two complex numbers: (\*Va+ib\*O)/(\*Vc+id\*O).
.PP
\*Lcexp(\|)\*O and \*Lcexpf(\|)\*O
return the exponential of a complex number.
.PP
\*Lclog(\|)\*O and \*Lclogf(\|)\*O
return the natural logarithm of a complex number.
.PP
\*Lcmul(\|)\*O and \*Lcmulf(\|)\*O
return the product of two complex numbers.
cmul(\*Va,b,c,d\*O) is equivalent to (\*Va + ib\*O) * (\*Vc + id\*O).
.PP
\*Lcpow(\|)\*O and \*Lcpowf(\|)\*O
raise a complex base (\*Va + ib\*O) to a complex
exponent (\*Vc + id\*O). cpow(\*Va,b,c,d\*O) is equivalent
to e**((\*Vc + id\*O) ln(\*Va + ib\*O)).
.PP
\*Lcsqrt(\|)\*O and \*Lcsqrtf(\|)\*O
compute the square root of a complex number,
\*Vx + iy\*O. The real part of csqrt is greater than
or equal to zero.
.\"
.\"
.\"EXCEPTIONAL CASES
.\"
.\"
.\"
.\"        Function           Exceptional Argument              Routine Behavior
.\"        ------------------ --------------------------------- ----------------
.\"        csin(), csinf()    |y| = infinity                    invalid argument
.\"        csin(), csinf()    (sinh x sin y) > max_float        overflow
.\"        csin(), csinf()    (cosh x cos y) > max_float        overflow
.\"
.\"        ccos(), ccosf()    |y| = infinity                    invalid argument
.\"        ccos(), ccosf()    (sin x sinh y) > max_float        overflow
.\"        ccos(), ccosf()    (cos x cosh y) > max_float        overflow
.\"
.\"        cdiv(), cdivf()    c=0 and d=0                       divide by zero
.\"        cdiv(), cdivf()    a=b=c=d=0                         invalid argument
.\"
.\"        cexp(), cexpf()    |y| = infinity                    invalid argument
.\"        cexp(), cexpf()    |e**x cos y| > max_float          overflow
.\"        cexp(), cexpf()    |e**x sin y| > max_float          overflow
.\"        cexp(), cexpf()    |e**x cos y| < min_float          underflow
.\"        cexp(), cexpf()    |e**x sin y| < min_float          underflow
.\"
.\"        clog(), clogf()    y=0 and x=0                       invalid argument
.\"        clog(), clogf()    |x| = |y| = infinity              invalid argument
.\"
.\"        cpow(), cpowf()    sqrt(a**2 + b**2) > max_float     overflow
.\"        cpow(), cpowf()    c/2 * ln(a**2 + b**2) > max_float overflow
.\"        cpow(), cpowf()    c/2 * ln(a**2 + b**2) -
.\"                                (d * atan2(b,c)) > max_float overflow
.\"
.\"
.\"
.PP
.TS
tab(@);
lfHB lfHB lfHB
l l l .
_
.sp 4p
Function@Exceptional Argument@Routine Behavior
.sp 4p
_
.sp 6p
csin(), csinf()@|y| = infinity @T{
invalid argument
T}
csin(), csinf()@(sinh x sin y) > max_float@T{
overflow
T}
csin(), csinf()@(cosh x cos y) > max_float@T{
overflow
T}
ccos(), ccosf()@|y| = infinity @T{
invalid argument
T}
ccos(), ccosf()@(sin x sinh y) > max_float@T{
overflow
T}
ccos(), ccosf()@(cos x cosh y) > max_float@T{
overflow
T}
cdiv(), cdivf()@c=0 and d=0@T{
divide by zero
T}
cdiv(), cdivf()@a=b=c=d=0@T{
invalid argument
T}
cexp(), cexpf()@|y| = infinity @T{
invalid argument
T}
cexp(), cexpf()@|e**x cos y| > max_float@T{
overflow
T}
cexp(), cexpf()@|e**x sin y| > max_float@T{
overflow
T}
cexp(), cexpf()@|e**x cos y| < min_float@T{
underflow
T}
cexp(), cexpf()@|e**x sin y| < min_float @T{
underflow
T}
clog(), clogf()@y=0 and x=0 @T{
invalid argument
T}
clog(), clogf()@|x| = |y| = infinity@T{
invalid argument
T}
cpow(), cpowf()@sqrt(a**2 + b**2) > max_float@T{
overflow
T}
cpow(), cpowf()@c/2 * ln(a**2 + b**2) > max_float@T{
overflow
T}
.\" 
.\" cpow(), cpowf()@c/2 * ln(a**2 + b**2) \- (d * atan2(b,c)) > max_float@T{
.\" overflow
.\" T}
cpow(), cpowf()@c/2 * ln(a**2 + b**2)@overflow
@\ \ \ \ \ \ \ \- (d * atan2(b,c)) > max_float
.sp 6p
_
.TE
.PP
.TS
tab(@);
lfHB lfHB lfHB lfHB
lfHB lfHB lfHB lfHB
l l l l .
_
.sp 4p
Value@Data@Hexadecimal Value@Decimal Value
Name@Type
.sp 4p
_
.sp 6p
max_float    @F_FLOAT     @FFFF7FFF            @1.701411e38
             @G_FLOAT     @FFFFFFFFFFFF7FFF    @8.988465674311579e307
             @S_FLOAT     @7F7FFFFF            @3.402823e38
             @T_FLOAT     @7FEFFFFFFFFFFFFF    @1.797693134862316e308
min_float    @F_FLOAT     @00000080            @2.9387359e-39
             @G_FLOAT     @0000000000000010    @5.562684646268003e-309
             @S_FLOAT     @00000001            @1.4012985e-45
             @T_FLOAT     @0000000000000001    @4.940656458412465e-324
.sp 6p
_
.TE
.SH RELATED INFORMATION
.PP
\*Lcabs\*O(3)
.EQ
delim off
.EN

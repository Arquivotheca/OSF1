.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: mlockall.3,v $ $Revision: 1.2.4.2 $ (DEC) $Date: 1993/06/21 14:10:18 $
.\"
.\" SCCSID: @(#)mlockall.3 6.5 1/9/92
.TH mlockall 3
.SH NAME
\*Lmlockall\*O, \*Lmunlockall\*O \- Lock or unlock all of a specified process's pages into memory (P1003.4/D11)
.SH SYNOPSIS
.PP
#include \*L<sys/mman.h>\*O
.PP
int \*Lmlockall\*O (
.br
int \*Vflags\*O);
.sp
int \*Lmunlockall\*O (void);
.SH PARAMETERS
.PP
.TP 8
.I flags
The \*Vflags\*O argument determines whether the pages to be locked are those
currently mapped by the process's address space, those that will be mapped
in the future, or both. The \*Vflags\*O argument is constructed as the OR
of one or more of the constants,
MCL_CURRENT or MCL_FUTURE, as defined in the \*L<mman.h>\*O header file.
.SH DESCRIPTION
.PP
.iX "mlockall function"
.iX "munlockall function"
.iX "memory" "unlocking all"
.iX "memory" "locking all"
The \*Lmlockall\*O function causes all of
the pages mapped by the process's address space to
be memory resident until unlocked by a call to the
\*Lmunlockall\*O function, until the process exits,
or until the process calls \*Lexec\*O.
MCL_CURRENT locks all of the pages currently mapped into the
process's address space. MCL_FUTURE locks all of the pages
that become mapped into the process's address space in the future, when
those mappings are established. You can specify MCL_CURRENT and then
subsequently specify MCL_FUTURE to lock both current and future address
space.
.PP
The \*Lmunlockall\*O function
unlocks all currently mapped pages of the process's address space.
Any pages that become mapped into a process's address space after a call to
\*Lmunlockall\*O are not locked unless otherwise specified
by a subsequent call to \*Lmlockall\*O. Pages locked or mapped into
another process's address space are unaffected by this process's call to the
\*Lmunlockall\*O function.
.PP
A lock is not inherited across a \*Lfork\*O.
All memory locks established on an address by this process
are removed if an address range associated with the lock is unmapped
with a call to the \*Lmunmap\*O function.
.PP
You must have \*Lsuperuser\*O privileges to call the \*Lmlockall\*O
function.
.PP
Note that if you use the \*Lmlockall\*O function with shared libraries,
the entire shared library is locked into memory. If you use multiple shared
libraries, you run the risk of locking the system.
.SH RETURN VALUES
.PP
On a successful call to the \*Lmlockall\*O function,
a value of 0 is returned and memory is locked.
On an unsuccessful call,
a value of \-1 is returned, no memory is locked, and \*Lerrno\*O is
set to indicate that an error occurred.
.PP
On a successful call to the \*Lmunlockall\*O function, a value of 0 is
returned and memory is unlocked. On an unsuccessful call,
a value of \-1 is returned and \*Lerrno\*O is
set to indicate that an error occurred.
.SH ERRORS
.PP
The \*Lmlockall\*O and \*Lmunlockall\*O functions
fail under the following conditions:
.TP 15
[ENOSYS]
The implementation does not support this memory locking interface.
.PP
If any of the following conditions occur, the \*Lmlockall\*O function
will fail:
.TP 15
[EAGAIN]
Some or all of the memory identified by the operation could not be
locked when the call was made.
.TP 15
[EINVAL]
The \*Vflags\*O argument is zero, or includes unimplemented flags
.TP 15
[ENOMEM]
Locking all of the pages currently mapped into the process's address space
would exceed an implementation-defined limit on the amount
of memory that the process may lock.
.TP 15
[EPERM]
The calling process does not have the appropriate privilege to
perform the requested operation.
.SH RELATED INFORMATION
.PP
Functions:
\*Lexec\*O(2), \*L_exit\*O(2), \*Lfork\*O(2), 
.\" munmap is in Section 2
.\" \*Lmunmap\*O(3)
\*Lmunmap\*O(2)
.EQ
delim off
.EN

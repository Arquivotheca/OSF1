.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: wcstod.3,v $ $Revision: 1.1.3.3 $ (DEC) $Date: 1993/06/21 19:53:53 $
.\"
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.TH wcstod 3
.SH NAME
.PP
\*Lwcstod\*O \- Converts a wide character string to a double-precision value
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include\ <wchar.h>
.sp 0.4v
\*Ldouble wcstod (
.nL
	const wchar_t * \*Vws\*L,
.nL
	wchar_t **\*Vendptr\*L);
.sE
.SH PARAMETERS
.PP
.VL 1i
.LI "\*Vws\*O"
Points to the wide-character string to be converted to
double-precision floating-point value.
.LI "\*Vendptr\*O"
Points to a pointer in which the \*Lwcstod(\|)\*O function stores the
position of the final wide-character segment of the string, which
contains unrecognized characters.
.LE
.SH DESCRIPTION
.PP
.iX "wcstod function"
The \*Lwcstod(\|)\*O function converts the initial portion of
the wide-character string pointed to by the \*Vws\*O parameter
to a double-precision floating-point value. The input wide-character string
is first broken down into three parts: an initial (possibly empty)
sequence of white-space, wide-character codes (as specified by
the \*Liswspace(\|)\*O function); a subject sequence interpreted
as a floating-point constant; and a final wide-character string
of one or more unrecognized wide-character codes including the terminating
null wide-character. The subject sequence is then (if possible)
converted to a floating-point number and returned as the result
of the \*Lwcstod(\|)\*O function.
.PP
The subject sequence is expected to consist of an optional + (plus
sign) or - (minus sign), a nonempty
sequence of digits (which may contain a radix character),
and an optional exponent. The exponent consists of e or E, followed
by an optional sign, followed by one or more decimal digits. The subject
sequence is the longest initial subsequence of the input wide-character
string (starting with the first nonwhite-space, wide-character
code) that is of the expected form. The subject sequence contains no
wide-character codes if the input wide-character string is empty or
consists entirely of white-space wide-character codes, or if the
first nonwhite-space, wide-character code is other than a
sign, a digit, or a radix character.
.PP
If the subject sequence is valid, the sequence of wide-character
codes, starting with the first digit or radix character
(whichever occurs first),
is interpreted as a floating-point or double-precision, floating-point
constant. The locale's radix character is treated as equivalent to
the . (period) within floating-point constants in the C locale.
If neither an exponent or radix character appears,
a radix character is assumed to follow the last digit in the wide-character
string. If the subject sequence begins with a - (minus sign), the
conversion value is negated.  The radix
character is determined by \*LLC_NUMERIC\*O category in the program's
current locale. In the
C locale, or in a locale where the radix character is not defined, the radix
character defaults to a . (period).
.PP
The \*Lwcstod(\|)\*O function stores
a pointer to the final wide-character segment of the string, starting
with the first invalid character,
in the object pointed to by the \*Vendptr\*O parameter,
unless the \*Vendptr\*O parameter is a null pointer.
.SH RETURN VALUES
.PP
The \*Lwcstod(\|)\*O function returns the converted value of
double-precision, floating-point value, if a valid floating-point
constant is found. If no conversion
could be performed, a value of 0 (zero) is returned. If the converted value is
outside the range (either too high or too low), the variable \*Lerrno\*O is set
to [ERANGE]. In case of overflow, plus or minus \*LHUGE_VAL\*O is returned.
In the case of underflow, a value of zero is returned. If the subject sequence
is empty or does not have the expected form, no conversion is
performed. In this
case, the value specified by the \*Vws\*O parameter is stored in the object
pointed to by the \*Vendptr\*O
parameter, provided that the \*Vendptr\*O parameter is not a null pointer.
.PP
Since the \*Lwcstod(\|)\*O function returns
0 (zero) or \*LHUGE_VAL\*O
in the event of an
error and these values are also valid returns if the \*Lwcstod(\|)\*O function
is successful,
applications should set \*Lerrno\*O to 0 (zero)
before calling the \*Lwcstod(\|)\*O
function, and check \*Lerrno\*O after return
from the function.
If \*Lerrno\*O is nonzero, an error occurred.
Additionally, if 0 (zero) is returned, applications should check if
the \*Vendptr\*O parameter equals the \*Vnptr\*O parameter. In this
case, there was no valid subject string.
.SH ERRORS
.PP
If any of the following conditions occurs, the \*Lwcstod(\|)\*O
function sets \*Lerrno\*O to the corresponding value.
.VL
.LI "[ERANGE]"
The converted value is outside the range of representable values.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Latof\*O(3),
\*Liswspace\*O(3), \*Llocaleconv\*O(3), \*Lscanf\*O(3), \*Lsetlocale\*O(3),
\*Lwcstol\*O(3).
.EQ
delim off
.EN

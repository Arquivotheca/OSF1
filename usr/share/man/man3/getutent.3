.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: getutent.3,v $ $Revision: 3.2.5.3 $ (DEC) $Date: 1994/01/14 20:07:22 $
.\"
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.TH getutent 3
.SH NAME
.PP
\*Lgetutent\*O, \*Lgetutent_r\*O, \*Lgetutid\*O, \*Lgetutid_r\*O, \*Lgetutline\*O, \*Lgetutline_r\*O, \*Lpututline\*O, \*Lpututline_r\*O, \*Lsetutent\*O, \*Lsetutent_r\*O, \*Lendutent\*O, \*Lendutent_r\*O, \*Lutmpname\*O \- Access \*Lutmp\*O file entries
.SH LIBRARY
.PP
\*OStandard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
.PP
\*L#include <utmp.h>
.sp 0.4v
struct utmp *getutent(void);
.sp 0.4v
int getutent_r(
.sp 0.4v
	struct utmp **\*Vutmp\*L,
.nL
	struct utmp_data *\*Vutmp_data\*L);
.sp 0.4v
struct utmp *getutid(
.nL
	struct utmp *\*VID\*L);
.sp 0.4v
int getutid_r(
.nL
	struct utmp *\*VID\*L,
.nL
	struct utmp **\*Vutmp\*L,
.nL
	struct utmp_data *\*Vutmp_data\*L);
.sp 0.4v
struct utmp *getutline(
.nL
	struct utmp *\*Vline\*L);
.sp 0.4v
int getutline_r(
.nL
	struct utmp *\*Vline\*L,
.nL
	struct utmp **\*Vutmp\*L,
.nL
	struct utmp_data *\*Vutmp_data\*L);
.sp 0.4v
struct utmp *pututline(
.nL
	struct utmp *\*Vutmp_ptr\*L);
.sp 0.4v
int pututline_r(
.nL
	struct utmp *\*Vutmp_ptr\*L,
.nL
	struct utmp_data *\*Vutmp_data\*L);
.sp 0.4v
\*Lvoid setutent(void);
.sp 0.4v
\*Lvoid setutent_r(
.nL
	\*Lstruct utmp_data *\*Vutmp_data\*L);
.sp 0.4v
void endutent(void);
.sp 0.4v
void endutent_r(
.nL
	\*Lstruct utmp_data *\*Vutmp_data\*L);
.sp 0.4v
void utmpname(
.nL
	char *\*Vfile\*L);
.sE
.SH PARAMETERS
.PP
.VL
.LI "\*VID"
\*OSpecifies one of the \*LRUN_LVL\*O, \*LBOOT_TIME\*O,
\*LOLD_TIME\*O, \*LNEW_TIME\*O,
\*LINIT_PROCESS\*O,
\*LLOGIN_PROCESS\*O, \*LUSER_PROCESS\*O, or \*LDEAD_PROCESS\*O entries.
.sp 0.4v
\*OIf
\*VID\*O
is one of \*LRUN_LVL\*O, \*LBOOT_TIME\*O,
\*LOLD_TIME\*O, or \*LNEW_TIME\*O entries,
the \*Lgetutid(\|)\*O
function searches forward from the current
point in the \*Lutmp\*O file until an entry with a \*Lut_type\*O
matching \*VID\*O->\*Lut_type\*O is found.
.sp 0.4v
\*OIf
\*VID\*O
is one of the \*LINIT_PROCESS\*O,
\*LLOGIN_PROCESS\*O, \*LUSER_PROCESS\*O, or \*LDEAD_PROCESS\*O entries,
the \*Lgetutid(\|)\*O function
returns a pointer to the first entry whose type is one of these four
and whose \*Lut_id\*O field matches \*VID\*O->\*Lut_id\*O.
If the end of the file is reached without a match, the \*Lgetutid(\|)\*O
function fails.
.LI "\*Vline"
\*OMatches a
\*Lutmp\*O
entry of the type \*LLOGIN_PROCESS\*O or \*LUSER_PROCESS\*O
such that the
\*Lut_line\*O
matches \*Vline\*O->\*Lut_line\*O.
The
\*Lgetutline(\|)\*O
function searches
from the current point in the \*Lutmp\*O file until it finds a
matching line.
If the end the of file is reached without
a match, the \*Lgetutline(\|)\*O function fails.
.LI "\*Vutmp_ptr"
\*OPoints to a \*Lutmp\*O structure to be placed into the \*Lutmp\*O file.
.LI "\*Vfile"
\*OSpecifies the name of the file to be examined.
.LI "\*Vutmp\*O"
Points at the returned
\*Lutmp\*O
structure.
.LI "\*Vutmp_data\*O"
Is data for the \*Lutmp\*O database.
.LE
.SH DESCRIPTION
.PP
.iX "getutent function"
.iX "getutent_r function"
.iX "getutid function"
.iX "getutid_r function"
.iX "getutline function"
.iX "getutline_r function"
.iX "pututline function"
.iX "pututline_r function"
.iX "setutent function"
.iX "setutent_r function"
.iX "endutent function"
.iX "endutent_r function"
.iX "utmpname function"
.iX "utmp file" "reading next entry"
.iX "utmp file" "opening"
.iX "utmp file" "closing"
.iX "utmp file" "changing filename"
.iX "utmp file" "writing to"
.iX "utmp file" "positioning in"
.iX "utmp file" "resetting input stream"
The \*Lgetutent(\|)\*O, \*Lgetutid(\|)\*O,
and \*Lgetutline(\|)\*O functions return a pointer to a
\*Lutmp\*O
structure.
.PP
The \*Lgetutent(\|)\*O function reads the next entry from a file
similar to the \*Lutmp\*O
file. If the file is not already open, the
\*Lgetutent(\|)\*O
function opens
it.  If the file does not exist, \*Lgetutent(\|)\*O tries to create a file.
The \*Lgetutent(\|)\*O function fails and returns a null pointer if one
or more of the following occur:
.ML
.LI
The end of the file is reached.
.LI
The file creation fails.
.LI
The read or write file permissions are inappropriate.
.LE
.PP
The \*Lpututline(\|)\*O function writes the supplied \*Vutmp_ptr\*O
parameter structure into the \*Lutmp\*O file. If you have not searched
for the proper place in the file using one of the \*Lgetut\&...\*O routines,
the \*Lpututline(\|)\*O function calls \*Lgetutid(\|)\*O to search
forward for the proper place. It is expected that the user of
\*Lpututline(\|)\*O
searched for the proper entry using one of the \*Lgetut\&...\*O
functions. If so, \*Lpututline(\|)\*O does not search. If the
\*Lpututline(\|)\*O
function does not find a matching slot for the entry, it adds
a new entry to the end of the file.  Note that the \*Lpututline(\|)\*O
function waits for a short time before it decides that the current
process holding the lock is dead and proceeds to write to the file.
.PP
\*OThe \*Lsetutent(\|)\*O function resets the input stream to the
beginning of the file. You should do this before each search for a
new entry if you want to examine the entire file.
.PP
The \*Lendutent(\|)\*O function closes the currently open file.
.PP
\*OThe \*Lutmpname(\|)\*O function changes the name of the file
to be examined from \*L/var/adm/utmp\*O to any other filename. The name
specified is usually \*L/var/adm/wtmp\*O. (For example, for accounting
purposes, you can use the \*Lutmpname(\|)\*O function to change the
name.) If the specified file
does not exist, no indication is given until the file is
referenced. The \*Lutmpname(\|)\*O
function does not open the file, but closes the old file (if it is
currently open) and saves the new filename.
.PP
The most current entry is saved in a static structure,
making the
\*Lutmpname(\|)\*O
function non-reentrant.  To make
multiple accesses, you must copy or use the structure
between each access. The \*Lgetutid(\|)\*O and \*Lgetutline(\|)\*O functions
examine the static structure first. If the contents of the static
structure match what they are searching for, they do not read the \*Lutmp\*O
file. Therefore, you must fill the static structure with zeros
after each use if you want to use these subroutines to search for
multiple occurrences.
.PP
If the \*Lpututline(\|)\*O function finds that it is not already
at the correct place in the file, the implicit read it performs does
not overwrite the contents of the static structure returned by the
\*Lgetutent(\|)\*O,
\*Lgetutid(\|)\*O, or \*Lgetutline(\|)\*O
functions. This allows you to get an entry with one of these subroutines,
modify the structure, and pass the pointer back to the \*Lpututline(\|)\*O
function for writing.
.PP
These functions use buffered standard I/O for input, but the
\*Lpututline(\|)\*O function uses an unbuffered nonstandard write to avoid
race conditions between processes trying to modify the \*Lutmp\*O
and \*Lwtmp\*O files.
.PP
The \*Lgetutent_r(\|)\*O, \*Lgetutid_r(\|)\*O, \*Lgetutline_r(\|)\*O,
\*Lpututline_r(\|)\*O, \*Lsetutline_r(\|)\*O, and \*Lendutline_r(\|)\*O
functions are the reentrant versions of the \*Lgetutent(\|)\*O,
\*Lgetutid(\|)\*O, \*Lgetutline(\|)\*O, \*Lpututline(\|)\*O,
\*Lsetutline(\|)\*O, and \*Lendutline(\|)\*O
functions,
respectively.  Upon successful completion of the \*Lgetutent_r(\|)\*O,
\*Lgetutid_r(\|)\*O, and \*Lgetutline_r(\|)\*O functions,
the returned structure is pointed to by \*Vutmp\*O.
The \*Lutmp.h\*O header file
defines the \*Lutmp_data\*O structure.
.SH NOTES
.PP
The \*Lutmpname(\|)\*O function does not close any file streams
when used for reentrant applications.
.PP
The \*Lutmpname(\|)\*O function is a function that returns \*Lvoid\*O.  If it
is given a \*Vfile\*O parameter that exceeds the maximum path length,
the function simply returns and does not change the filename.
.PP
Note that before accessing the \*Lutmp\*O file for the first time, the
\*Lut_fd\*O field of the \*Lutmp_data\*O structure must be set to a
value of -1.
.SH RETURN VALUES
.PP
Upon successful completion, the \*Lgetutent(\|)\*O,
\*Lgetutid(\|)\*O, and \*Lgetutline(\|)\*O functions return pointers
to the \*Lutmp\*O structure.  If a
read or write fails due to the end of the file, or due to
a permission conflict,
the \*Lgetutent(\|)\*O,
\*Lgetutid(\|)\*O, \*Lgetutline(\|)\*O, and \*Lpututline(\|)\*O functions
fail and return a null pointer.
.PP
The \*Lgetutid(\|)\*O function may also fail if the ID is invalid, as
does the \*Lgetutid_r(\|)\*O function.
.PP
Upon successful completion, the \*Lgetutent_r(\|)\*O,
\*Lgetutid_r(\|)\*O, and \*Lgetutline_r(\|)\*O functions return a
value of 0 (zero).  Otherwise, a value of -1 is returned.
.SH ERRORS
.PP
If any of the following conditions occurs, the \*Lgetutent_r(\|)\*O,
\*Lgetutid_r(\|)\*O, and
\*Lgetutline_r(\|)\*O functions set \*Lerrno\*O to the corresponding value:
.VL
.LI "[EINVAL]"
Either the \*Vutmp\*O, \*VID\*O, \*Vline\*O, or \*Vutmp_data\*O
parameter is invalid.
.LE
.PP
In addition, if any of the following conditions occurs, the
\*Lgetutid_r(\|)\*O and
\*Lgetutline_r(\|)\*O functions set \*Lerrno\*O to the corresponding value:
.VL
.LI "[ESRCH]"
The search failed.
.LE
.SH FILES
.PP
.VL
.LI "\*L/usr/include/utmp.h\*O"
Accounting header file that defines the format for the login database
file.
.LI "\*L/var/adm/utmp\*O, \*L/var/adm/wtmp\*O"
The active login/logoff database files.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Lopen\*O(2).
.PP
Files:
\*Lutmp\*O(4), \*Lwtmp\*O(4).
.EQ
delim off
.EN

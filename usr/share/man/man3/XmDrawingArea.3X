.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: XmDrawingArea.3X,v $ $Revision: 3.2.4.4 $ (DEC) $Date: 1993/10/25 19:07:09 $
.\"
.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **
.TH XmDrawingArea 3X "" "" "" "OSF/Motif"
.SH NAME
\*LXmDrawingArea\*O \- The DrawingArea widget class
.SH SYNOPSIS
.sS
.iS
\&#include <Xm/DrawingA.h>
.iE
.sE
.SH DESCRIPTION
.iX "XmDrawingArea"
.iX "widget class" "DrawingArea"
DrawingArea is an empty widget that is easily adaptable
to a variety of purposes.
It does no drawing and defines no behavior except for invoking
callbacks.
Callbacks notify the application when graphics need to be drawn
(exposure events or widget resize) and when the widget receives input from
the keyboard or mouse.
.PP 
Applications are responsible for defining appearance and behavior as needed
in response to DrawingArea callbacks.
.PP 
DrawingArea is also a composite widget and subclass of
\*LXmManager\*O that supports
minimal geometry management for multiple widget or gadget children.
.SS "Classes"
DrawingArea inherits behavior and resources from the \*LCore\*O,
\*LComposite\*O, \*LConstraint\*O, and \*LXmManager\*O classes.
.PP 
.ne 3
The class pointer is \*LxmDrawingAreaWidgetClass\*O.
.PP 
The class name is \*LXmDrawingArea\*O.
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \*LXmN\*O or
\*LXmC\*O prefix and use the remaining letters.  To specify one of the defined
values for a resource in a .Xdefaults file, remove the \*LXm\*O prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (C),
set by using \*LXtSetValues\*O (S),
retrieved by using \*LXtGetValues\*O (G), or is not applicable (N/A).
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmDrawingArea Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNexposeCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNinputCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNmarginHeight	10	CSG
\ \ \ \ \ \ XmCMarginHeight	\ \ \ \ \ \ \ Dimension
_
XmNmarginWidth	10 	CSG
\ \ \ \ \ \ XmCMarginWidth	\ \ \ \ \ \ \ Dimension
_
XmNresizeCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNresizePolicy	XmRESIZE_ANY	CSG
\ \ \ \ \ \ XmCResizePolicy	\ \ \ \ \ \ \ unsigned char
_
.TE
.\" NROFF HACK END
.nL
.ne 8
.VL  
.LI "\*LXmNexposeCallback\*O"
Specifies the list of callbacks that is
called when DrawingArea receives an exposure event.
The callback reason is \*LXmCR_EXPOSE\*O.
The callback structure also includes the exposure event.
.PP
The default bit gravity for Manager windows is \*LNorthWestGravity\*O.
This may cause the \*LXmNexposeCallback\*O procedures not to be invoked
when the DrawingArea window is made smaller.
.LI "\*LXmNinputCallback\*O"
Specifies the list of callbacks that is
called when the DrawingArea receives a keyboard
or mouse event (key or button, up or down).
The callback reason is \*LXmCR_INPUT\*O.
The callback structure also includes the input event.
.LI "\*LXmNmarginHeight\*O"
Specifies the minimum spacing in pixels between the top or bottom edge
of DrawingArea and any child widget.
.LI "\*LXmNmarginWidth\*O"
Specifies the minimum spacing in pixels between the left or right edge
of DrawingArea and any child widget.
.LI "\*LXmNresizeCallback\*O"
Specifies the list of callbacks that is
called when the DrawingArea is resized.
The callback reason is \*LXmCR_RESIZE\*O.
.LI "\*LXmNresizePolicy\*O"
Controls the policy for resizing DrawingArea widgets.
Possible values include \*LXmRESIZE_NONE\*O (fixed size),
\*LXmRESIZE_ANY\*O (shrink or grow as needed), and
\*LXmRESIZE_GROW\*O (grow only).
.LE 
.SS "Inherited Resources"
DrawingArea inherits behavior and resources from the following
superclasses.  For a complete description of each resource, refer to the
man page for that superclass.
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmManager Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNbottomShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCBottomShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNbottomShadowPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCBottomShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNforeground	dynamic	CSG
\ \ \ \ \ \ XmCForeground	\ \ \ \ \ \ \ Pixel
_
XmNhelpCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNhighlightColor	dynamic	CSG
\ \ \ \ \ \ XmCHighlightColor	\ \ \ \ \ \ \ Pixel
_
XmNhighlightPixmap	dynamic	CSG
\ \ \ \ \ \ XmCHighlightPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNinitialFocus	NULL	CSG
\ \ \ \ \ \ XmCInitialFocus	\ \ \ \ \ \ \ Widget
_
XmNnavigationType	XmTAB_GROUP	CSG
\ \ \ \ \ \ XmCNavigationType	\ \ \ \ \ \ \ XmNavigationType
_
XmNshadowThickness	0	CSG
\ \ \ \ \ \ XmCShadowThickness	\ \ \ \ \ \ \ Dimension
_
XmNstringDirection	dynamic	CG
\ \ \ \ \ \ XmCStringDirection	\ \ \ \ \ \ \ XmStringDirection
_
XmNtopShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNtopShadowPixmap	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNtraversalOn	True	CSG
\ \ \ \ \ \ XmCTraversalOn	\ \ \ \ \ \ \ Boolean
_
XmNunitType	dynamic	CSG
\ \ \ \ \ \ XmCUnitType	\ \ \ \ \ \ \ unsigned char
_
XmNuserData	NULL	CSG
\ \ \ \ \ \ XmCUserData	\ \ \ \ \ \ \ XtPointer
_
.TE
.\" NROFF HACK END
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Composite Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNchildren	NULL	G
\ \ \ \ \ \ XmCReadOnly	\ \ \ \ \ \ \ WidgetList
_
XmNinsertPosition	NULL	CSG
\ \ \ \ \ \ XmCInsertPosition	\ \ \ \ \ \ \ XtOrderProc
_
XmNnumChildren	0	G
\ \ \ \ \ \ XmCReadOnly	\ \ \ \ \ \ \ Cardinal
_
.TE
.\" NROFF HACK END
.PP
.wH .in 0 
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Core Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNaccelerators	dynamic	CSG
\ \ \ \ \ \ XmCAccelerators	\ \ \ \ \ \ \ XtAccelerators
_
XmNancestorSensitive	dynamic	G
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNbackground	dynamic	CSG
\ \ \ \ \ \ XmCBackground	\ \ \ \ \ \ \ Pixel
_
XmNbackgroundPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderColor	XtDefaultForeground	CSG
\ \ \ \ \ \ XmCBorderColor	\ \ \ \ \ \ \ Pixel
_
XmNborderPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderWidth	0	CSG
\ \ \ \ \ \ XmCBorderWidth	\ \ \ \ \ \ \ Dimension
_
XmNcolormap	dynamic	CG
\ \ \ \ \ \ XmCColormap	\ \ \ \ \ \ \ Colormap
_
XmNdepth	dynamic	CG
\ \ \ \ \ \ XmCDepth	\ \ \ \ \ \ \ int
_
XmNdestroyCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNheight	dynamic	CSG
\ \ \ \ \ \ XmCHeight	\ \ \ \ \ \ \ Dimension
_
XmNinitialResourcesPersistent	True	C
\ \ \ \ \ \ XmCInitialResourcesPersistent	\ \ \ \ \ \ \ Boolean
_
XmNmappedWhenManaged	True	CSG
\ \ \ \ \ \ XmCMappedWhenManaged	\ \ \ \ \ \ \ Boolean
_
XmNscreen	dynamic	CG
\ \ \ \ \ \ XmCScreen	\ \ \ \ \ \ \ Screen *
_
.wH .tH
XmNsensitive	True	CSG
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNtranslations	dynamic	CSG
\ \ \ \ \ \ XmCTranslations	\ \ \ \ \ \ \ XtTranslations
_
XmNwidth	dynamic	CSG
\ \ \ \ \ \ XmCWidth	\ \ \ \ \ \ \ Dimension
_
XmNx	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
XmNy	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
.TE
.\" NROFF HACK END
.wH .in  
.SS "Callback Information"
A pointer to the following structure is passed to each callback:
.sS
.iS
.ta .25i 1.1i
typedef struct
{
	int	\*Vreason\*L;
	XEvent	\*V* event\*L;
	Window	\*Vwindow\*L;
} XmDrawingAreaCallbackStruct;
.iE
.sE
.wH .fi
.VL .75i 
.LI "\*Vreason\*O"
Indicates why the callback was invoked
.LI "\*Vevent\*O"
Points to the \*LXEvent\*O that triggered the callback.
This is NULL for the \*LXmNresizeCallback\*O.
.LI "\*Vwindow\*O"
Is set to the widget window
.nL
.ne 10
.LE 
.SS "Translations"
XmDrawingArea inherits translations from XmManager.
Before calling the XmManager actions, all events in the inherited
translations except \*L<BtnMotion>\*O, \*L<EnterWindow>\*O,
\*L<LeaveWindow>\*O, \*L<FocusIn>\*O, and \*L<FocusOut>\*O also call the
\*LDrawingAreaInput()\*O action.
.PP 
XmDrawingArea has the additional translations listed below.
These translations may not directly correspond to a
translation table.
.iS
.ta 1.5i
MAny BAny Press:	DrawingAreaInput()
MAny BAny Release:	DrawingAreaInput()
.sp \n(PDu
MAny KAny Press:	DrawingAreaInput()
	ManagerGadgetKeyInput()
MAny KAny Release:	DrawingAreaInput()
.wH .fi
.iE
.SS "Action Routines"
The XmDrawingArea action routines are described below:
.VL  
.LI "\*LDrawingAreaInput()\*O:"
Unless the event takes place in a gadget, calls the callbacks for
\*LXmNinputCallback\*O.
.LI "\*LManagerGadgetKeyInput()\*O:"
Causes the current gadget to process a keyboard event.
.LE
.nL
.ne 10
.SS "Additional Behavior"
The XmDrawingArea widget has the additional behavior described below:
.VL  
.LI "\*L<Expose>\*O:"
Calls the callbacks for \*LXmNexposeCallback\*O.
.LI "\*L<Widget\ Resize>\*O:"
Calls the callbacks for \*LXmNresizeCallback\*O.
.PP
.PP
.ne 2i
.LE
.SS "Virtual Bindings"
The bindings for virtual keys are vendor specific.
For information about bindings for virtual buttons and keys, see \*LVirtualBindings(3X)\*O.
.SH RELATED INFORMATION
.na
\*LComposite(3X)\*O, \*LConstraint(3X)\*O, \*LCore(3X)\*O,
\*LXmCreateDrawingArea(3X)\*O,
and \*LXmManager(3X)\*O.
.ad
.EQ
delim off
.EN

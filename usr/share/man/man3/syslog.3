.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: syslog.3,v $ $Revision: 3.3.7.4 $ (DEC) $Date: 1994/01/15 01:28:27 $
.\"
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.TH syslog 3
.SH NAME
.PP
\*Lsyslog\*O, \*Lsyslog_r\*O, \*Lopenlog\*O, \*Lopenlog_r\*O, \*Lcloselog\*O, \*Lcloselog_r\*O, \*Lsetlogmask\*O, \*Lsetlogmask_r\*O \- Control system log
.SH LIBRARY
.PP
\*OStandard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <syslog.h>
.nL
int openlog(
.nL
	const char *\*Vid\*L,
.nL
	int \*Vlog_option\*L,
.nL
	int \*Vfacility\*L);
.nL
int openlog_r(
.nL
	const char *\*Vid\*L,
.nL
	int \*Vlog_option\*L,
.nL
	int \*Vfacility\*L,
.nL
	struct syslog_data \*V*syslog_data\*L);
.nL
int syslog(
.nL
	int \*Vpriority\*L,
.nL
	const char *\*Vformat\*O\*L,...);
.nL
int syslog_r(
.nL
	int \*Vpriority\*L,
.nL
	struct syslog_data *\*Vsyslog_data\*L,
.nL
	const char *\*Vformat\*L,...)\*L;
.nL
void closelog(void);
.nL
void closelog_r(
.nL
	struct syslog_data \*V*syslog_data\*L);
.nL
int setlogmask(
.nL
	int \*Vmask_priority\*L);
.nL
int setlogmask_r(
.nL
	int \*Vmask_priority\*L,
.nL
	struct syslog_data \*V*syslog_data\*L);\*O
.sE
.SH PARAMETERS
.PP
.VL
.LI "\*Vid"
\*OSpecifies a string that is attached to the beginning of every message.
.LI "\*Vlog_option"
\*OSpecifies
logging options.  Values of the \*Vlog_option\*O parameter include:
.VL
.LI "\*LLOG_PID\*O"
Logs the process ID with each message.
This option
is useful for identifying daemons.
.LI "\*LLOG_CONS\*O"
Sends messages to the console if unable to send
them to \*Lsyslogd\*O. This option is useful in daemon processes
that have no controlling terminal.
.LI "\*LLOG_NDELAY\*O"
Opens the connection to \*Lsyslogd\*O immediately,
instead of when the first message is logged. This option is useful
for programs that need to manage the order in which file descriptors
are allocated.
.LI "\*LLOG_NOWAIT\*O"
Logs messages to the console without waiting
for child processes that
are forked. Use this option for processes that enable notification
of termination of child processes
through \*LSIGCHLD\*O; otherwise, the \*Lsyslog(\|)\*O function may block,
waiting for a child process
whose exit status has already been collected.
.LE
.LI "\*Vfacility\*O"
Specifies the facility that generated the message, which is one of the
following:
.VL
.LI "\*LLOG_KERN\*O"
Messages generated by the kernel. These cannot
be generated by any user processes.
.LI "\*LLOG_USER\*O"
Messages generated by user processes. This
is the default facility when none is specified.
.LI "\*LLOG_MAIL\*O"
Messages generated by the mail system.
.LI "\*LLOG_DAEMON\*O"
Messages generated by system daemons.
.LI "\*LLOG_AUTH\*O"
Messages generated by the authorization system: \*Llogin\*O, \*Lsu\*O,
and so on.
.LI "\*LLOG_LPR\*O"
Messages generated by the line printer spooling system.
.LI "\*LLOG_RFS\*O"
Messages generated by remote file systems.
.LI "\*LLOG_LOCAL0\*O through \*LLOG_LOCAL7\*O"
Reserved for local use.
.LE
This parameter encodes a default facility from the previous list to be
assigned to messages that do not have an explicit facility encoded.
.LI "\*Vpriority\*O"
\*OMessages are tagged with codes indicating the type of \*Vpriority\*O
for each.  The \*Vpriority\*O parameter is encoded as a \*Vfacility\*O
(as previously listed), which
describes the part of the system generating the message, and as a
level, which indicates the severity of the message.
\*OThe level of severity is selected from the following
list:
.VL
.LI "\*LLOG_EMERG\*O"
A panic condition was reported to all users.
.LI "\*LLOG_ALERT\*O"
Specifies a condition to be corrected immediately;
for example, a corrupted database.
.LI "\*LLOG_CRIT\*O"
Specifies a critical conditions; for example, hard device
errors.
.LI "\*LLOG_ERR\*O"
Specifies errors.
.LI "\*LLOG_WARNING\*O"
Specifies warning messages.
.LI "\*LLOG_NOTICE\*O"
Specifies that it is not an error condition, but a condition requiring
special handling.
.LI "\*LLOG_INFO\*O"
Specifies general information messages.
.LI "\*LLOG_DEBUG\*O"
Specifies messages containing information useful
in debugging a program.
.LE
.LI "\*Vformat\*O [\*Vvalue\*O...]"
\*OSimilar to the \*Lprintf \*Vfmt\*O string,
with the difference that \*L%m\*O is replaced by the current error message
obtained from \*Lerrno\*O.  A trailing newline can be added to
the message if needed. The \*Vvalue\*O parameters are the same
as the \*Vvalue\*O parameters of the \*Lprintf(\|)\*O function.
Callers of \*Lsyslog(\|)\*O must ensure that the message is not
longer than \*LLINE_MAX\*O bytes. Results are unspecified if
\*Lsyslog(\|)\*O is called with a message larger than
\*LLINE_MAX\*O bytes.
.LI "\*Vmask_priority"
\*OSpecifies a bit mask
used to set the new log priority mask and return the previous mask.
\*OThe \*LLOG_MASK\*O and \*LLOG_UPTO\*O macros in the \*Lsys/syslog.h\*O
file are used to create the priority mask.
.LI "\*Vsyslog_data\*O"
The \*Lsyslog_r(\|)\*O, \*Lopenlog_r(\|)\*O, \*Lcloselog_r(\|)\*O, and
\*Lsetlogmask_r(\|)\*O functions use this opaque structure.
.LE
.SH DESCRIPTION
.PP
.iX "syslog function"
.iX "openlog function"
.iX "closelog function"
.iX "setlogmask function"
.iX "syslog_r function"
.iX "openlog_r function"
.iX "closelog_r function"
.iX "setlogmask_r function"
.iX "system log"
The \*Lsyslog(\|)\*O function writes messages to the system
log maintained by the \*Lsyslogd \*Odaemon.
.PP
The \*Lsyslogd\*O daemon reads messages and writes them
to the system console or to a
log file, or forwards them to the \*Lsyslogd\*O daemon
on the appropriate host.
.PP
\*OIf the \*Lsyslog(\|)\*O function cannot pass the message to \*Lsyslogd\*O,
it writes the message on \*L/dev/console\*O, provided the
\*LLOG_CONS\*O option is set.
.PP
If special processing is required, the \*Lopenlog(\|)\*O function
can be used to initialize the log file.
.ig ++
The \*Vid\*O parameter
contains a string that is attached to the beginning of every message.
The \*Vfacility\*O parameter encodes a default facility from the
previous list to be assigned to messages that do not have an explicit
facility encoded.
.++
.PP
The \*Lcloselog(\|)\*O function closes the log file.
.PP
\*OThe \*Lsetlogmask(\|)\*O function uses the bit mask in the
\*Vmask_priority\*O parameter
to set the new log priority mask and returns the previous mask.
Logging is enabled for the levels indicated by the bits in the mask
that are set and is disabled where the bits are not set. The default
mask allows all priorities to be logged.
If the \*Lsyslog(\|)\*O function is called
with a priority mask that does not allow logging of that
level of message, then the function returns without logging the
message.
.PP
The \*Vlog_option\*O, \*Vfacility\*O, and \*Vpriority\*O macros are
defined in the \*L<sys/syslog_pri.h\*O file.
.PP
The \*Lsyslog_r(\|)\*O, \*Lopenlog_r(\|)\*O, \*Lcloselog_r(\|)\*O, and
\*Lsetlogmask_r(\|)\*O functions are the reentrant versions of the
\*Lsyslog(\|)\*O, \*Lopenlog(\|)\*O, \*Lcloselog(\|)\*O, and
\*Lsetlogmask(\|)\*O functions.  They use the \*Vsyslog_data\*O
structure to maintain \*Lsyslog\*O access state.
The data object \*Vsyslog_data\*O should be initialized to
\*LSYSLOG_DATA_INIT\*O.
.SH RETURN VALUES
.PP
The
\*Lsyslog(\|)\*O
function returns a value of -1 if either the priority mask excludes this
message from being logged, or if an error occurs and it is impossible
to send the message to the
\*Lsyslogd\*O
daemon or to the system console.
.\" .zA "defect, 8066, R1.1.2, added openlog() return status"
.PP
Upon successful completion, the \*Lopenlog(\|)\*O function returns a
value of 0 (zero).
Otherwise, a value of -1 is returned and \*Lerrno\*O is set to
indicate the error.
.\" .zZ "defect, 8066, R1.1.2, added openlog() return status"
.SH RELATED INFORMATION
.PP
Functions:
\*Lprofil\*O(2).
.iX "syslog function"
.iX "openlog function"
.iX "closelog function"
.iX "setlogmask function"
.EQ
delim off
.EN

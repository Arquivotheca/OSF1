.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: pthread_setcancel.3,v $ $Revision: 3.2.2.2 $ (DEC) $Date: 1992/05/27 11:12:38 $
.\"
...\" Copyright 1991, Open Software Foundation, Inc. ALL RIGHTS RESERVED.
.wH ********************************************************************
.wH                                                                    *
.wH COPYRIGHT (c) 1990 BY DIGITAL EQUIPMENT CORPORATION,               *
.wH Maynard, Mass.                                                     *
.wH                                                                    *
.wH This document is furnished under a license and may be used and     *
.wH copied only in accordance with the terms of such license and with  *
.wH the inclusion of the above copyright notice. This document or any  *
.wH other copies thereof may not be provided or otherwise made         *
.wH available to any other person. No title to or ownership of the     *
.wH document is hereby transferred.                                    *
.wH                                                                    *
.wH The information in this document is subject to change without      *
.wH notice and should not be construed as a commitment by DIGITAL      *
.wH Equipment Corporation.                                             *
.wH                                                                    *
.wH ********************************************************************
.wH "<routine_section>"
.TH pthread_setcancel 3
.SH NAME
\*Lpthread_setcancel\*O \- Enables or disables the current thread's general cancelability.
.SH SYNOPSIS
.PP
.sS
\*L#include <pthread.h>
.fS "int pthread_setcancel"
.dS "int"
\*Vstate\*O
.dE
.fE
.sE
.wH "<endformat>"
.SH PARAMETERS
.PP
.VL 5m
.LI "\*Vstate\*O"
State of general cancelability set for the calling thread. On return,
receives the prior state of general cancelability. Valid values are as
follows:
.VL 8m
.LI "\*LCANCEL_ON\*O"
General cancelability is enabled.
.LI "\*LCANCEL_OFF\*O"
General cancelability is disabled.
.LE
.LE
.wH "<endparameters>"
.SH DESCRIPTION
.iX "Cancel" "enabling and disabling delivery of"
.iX "Cancel" "possible dangers of disabling"
.iX "Cancel" "obtaining non\(emcancelable versions of cancelable routines"
.iX "Delivery of cancels" "enabling and disabling"
.iX "Cancelability" "general"
.PP
This routine enables or disables the current thread's general cancelability
and returns the previous cancelability state to the \*Vstate\*O
parameter.
.PP
When general cancelability is set to \*LCANCEL_OFF\*O, a cancel cannot be
delivered to the thread, even if a cancelable routine is called or
asynchronous cancelability is enabled.
.PP
When a thread is created, the default general cancelability state is
\*LCANCEL_ON\*O.
.SS "Possible Dangers of Disabling Cancelability"
.PP
The most important use of cancels is to ensure that indefinite wait
operations are terminated. For example, a thread waiting on some network
connection, which may take days to respond (or may never respond), is
normally made cancelable.
.PP
However, when cancelability is disabled, no routine is cancelable. Waits
must be completed normally before a cancel can be delivered. As a result,
the program stops working and the user is unable to cancel the operation.
.PP
When disabling cancelability, be sure that no long waits can occur or that
it is necessary for other reasons to defer cancels around that particular
region of code.
.SH RETURN VALUES
.PP
If an error condition occurs, this routine returns \-1 and sets
\*Eerrno\*O to the corresponding error value. Possible return values
are as follows:
.sp
.TS
center, tab(@);
l l lw(2.5i).
\*LReturn@Error@Description\*O
_
\00@@Successful completion.
\-1@[\*LEINVAL\*O]@T{
The specified state is not \*LCANCEL_ON\*O or \*LCANCEL_OFF\*O.
T}
.TE
.wH "<endnas_return>"
.cS
.SH EXAMPLES
.PP
.oS
int pthread_setcancel (int *state);
.oE
.cE
.wH "<endnas_examples>"
.SH RELATED INFORMATION
.PP
\*Lpthread_cancel\*O(3),
\*Lpthread_setasynccancel\*O(3),
\*Lpthread_testcancel\*O(3)
.EQ
delim off
.EN

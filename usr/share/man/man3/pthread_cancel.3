.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: pthread_cancel.3,v $ $Revision: 3.3.2.3 $ (DEC) $Date: 1992/07/22 12:23:48 $
.\" 
...\" Copyright 1991, Open Software Foundation, Inc. ALL RIGHTS RESERVED.
.wH ********************************************************************
.wH                                                                    *
.wH COPYRIGHT (c) 1990 BY DIGITAL EQUIPMENT CORPORATION,               *
.wH Maynard, Mass.                                                     *
.wH                                                                    *
.wH This document is furnished under a license and may be used and     *
.wH copied only in accordance with the terms of such license and with  *
.wH the inclusion of the above copyright notice. This document or any  *
.wH other copies thereof may not be provided or otherwise made         *
.wH available to any other person. No title to or ownership of the     *
.wH document is hereby transferred.                                    *
.wH                                                                    *
.wH The information in this document is subject to change without      *
.wH notice and should not be construed as a commitment by DIGITAL      *
.wH Equipment Corporation.                                             *
.wH                                                                    *
.wH ********************************************************************
.wH "<routine_section>"
.TH pthread_cancel 3
.iX "Thread" "canceling"
.iX "Cancel" "sending to a thread"
.iX "Cancel" "delivery"
.SH NAME
\*Lpthread_cancel\*O \- Allows a
thread to request that it or another thread terminate execution.
.SH SYNOPSIS
.PP
.sS
\*L#include <pthread.h>
.fS "int pthread_cancel"
.dS "pthread_t"
\*Vthread\*L
.dE
.fE
.sE
.wH "<endformat>"
.SH PARAMETERS
.PP
.VL 10m
.LI "\*Vthread\*O"
Thread that receives a cancel request.
.LE
.wH "<endparameters>"
.SH DESCRIPTION
.PP
.wH "<mark>"
This routine sends a cancel to the specified thread. A cancel is a mechanism
by which a calling thread informs either itself or the called thread to
terminate as quickly as possible. Issuing a cancel does not guarantee that
the canceled thread receives or handles the cancel. The canceled thread
can delay processing the cancel after receiving it. For instance, if a
cancel arrives during an important operation, the canceled thread can
continue if what it is doing cannot be interrupted at the point where the
cancel is requested.
.wH "<endmark>"
.PP
Because of communication delays, the calling thread can only rely on the
fact that a cancel eventually becomes pending in the designated thread
(provided that the thread does not terminate beforehand). Furthermore, the
calling thread has no guarantee that a pending cancel is be delivered
because delivery is controlled by the designated thread.
.PP
Termination processing when a cancel is delivered to a thread is similar to
\*Lpthread_exit\*O. Outstanding cleanup routines are executed in the
context of the target thread, and a status of \-1 is made available to any
threads joining with the target thread.
.PP
This routine is preferred in implementing Ada's abort statement and any
other language (or software-defined construct) for requesting thread
cancelation.
.PP
The results of this routine are unpredictable if the value specified in
\*Vthread\*O refers to a thread that does not currently exist.
.SH RETURN VALUES
.PP
If an error condition occurs, this routine returns \-1 and sets
\*Eerrno\*O to the corresponding error value. Possible return values
are as follows:
.sp
.TS
center, tab(@);
l l l.
\*LReturn@Error@Description\*O
_
\00@@Successful completion.
\&\-1@[\*LEINVAL\*O]@The specified thread is invalid.
\&\-1@[\*LESRCH\*O]@\*Vthread\*O does not specify an existing thread.
.TE
.wH "<endnas_return>"
.cS
.SH EXAMPLES
.PP
.oS
int pthread_cancel (pthread_t *thread);
.oE
.cE
.wH "<endnas_examples>"
.SH RELATED INFORMATION
.PP
\*Lpthread_exit\*O(3),
\*Lpthread_join\*O(3),
\*Lpthread_setasynccancel\*O(3),
\*Lpthread_setcancel\*O(3),
\*Lpthread_testcancel\*O(3)
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: Uil.3X,v $ $Revision: 3.2.4.4 $ (DEC) $Date: 1993/10/25 18:48:22 $
.\"
.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
.\" **      Maynard, MA.  All Rights Reserved.
.\" **
.\" **
.TH Uil 3X "" "" "" "OSF/Motif"
.SH NAME
\*LUil\*O \- Invokes the UIL compiler from within an application
.SH SYNOPSIS
.sS
.iS
\&#include <uil/UilDef.h>
.sp \n(PDu
.ta 1i
Uil_status_type Uil (\*Vcommand_desc, compile_desc, message_cb,
	message_data, status_cb, status_data\*L)
.ta 0.5i 2.5i
	Uil_command_type	\*V*command_desc\*L;
	Uil_compile_desc_type	\*V*compile_desc\*L;
	Uil_continue_type	(\*V*message_cb\*L) ();
	char	\*V*message_data\*L;
	Uil_continue_type	(\*V*status_cb\*L) ();
	char	\*V*status_data\*L;
.wH .fi
.nL
.ne 3i
.iE
.sE
.SH DESCRIPTION
.iX "Uil"
.iX "uil functions" "Uil"
.iX "uil compiler"
The \*LUil\*O function provides a callable entry point for the UIL
compiler. The
\*LUil\*O callable interface can be used to process
a UIL source file and to
generate UID files, as well as return a detailed description of the
UIL source module in the form of a symbol table (parse tree).
.VL 20n 
.LI "\*Vcommand_desc\*O"
Specifies the \*Luil\*O command line.
.LI "\*Vcompile_desc\*O"
Returns the results of the compilation.
.LI "\*Vmessage_cb\*O"
Specifies a callback function that is called when the compiler
encounters errors in the UIL source.
.LI "\*Vmessage_data\*O"
Specifies user data that is passed to the message callback function
(message_cb). Note that this argument is not interpreted by UIL, and is
used exclusively by the calling application.
.nL
.ne 6
.LI "\*Vstatus_cb\*O"
Specifies a callback function that is called to allow X applications to service
X events such as updating the screen.  This function is called
at various check points, which have been hard coded into the UIL compiler.
The status_update_delay argument in command_desc specifies the number of
check points to be passed before the status_cb function is invoked.
.LI "\*Vstatus_data\*O"
Specifies user data that is passed to the status callback function
(status_cb). Note that this argument is not interpreted by the UIL compiler,
and is used exclusively by the calling application.
.LE 
.PP 
The data structures \*LUil_command_type\*O and
\*LUil_compile_desc_type\*O are detailed below.
.oS
typedef struct Uil_command_type {
char *source_file;
    /* single source to compile */
char *resource_file; /* name of output file */
char *listing_file; /* name of listing file */
unsigned int *include_dir_count;
    /* number of dirs. in include_dir */
char *((*include_dir) []);
    /* dir. to search for include files */
unsigned listing_file_flag: 1;
    /* produce a listing */
unsigned resource_file_flag: 1;
    /* generate UID output */
unsigned machine_code_flag: 1;
    /* generate machine code */
unsigned report_info_msg_flag: 1;
    /* report info messages */
unsigned report_warn_msg_flag: 1;
    /* report warnings */
unsigned parse_tree_flag: 1;
    /* generate parse tree */
unsigned int status_update_delay;
    /* number of times a status point is */
    /* passed before calling status_cb */
    /* function 0 means called every time */
char *database;
    /* name of database file */
unsigned database_flag: 1;
    /* read a new database file */
unsigned use_setlocale_flag: 1;
    /* enable calls to setlocale */
};
.sp 1
typedef struct Uil_compile_desc_type {
unsigned int compiler_version;
    /* version number of compiler */
unsigned int data_version;
    /* version number of structures */
char *parse_tree_root; /* parse tree output */
unsigned int message_count [Uil_k_max_status+1];
/* array of severity counts */
};
.oE
.PP 
.ne 3.5i
Following is a description of the message callback function specified by
\*Vmessage_cb\*O:
.nL
.ne 2i
.sS
.iS
.ta 1i
Uil_continue_type (\*V*message_cb\*L) (\*Vmessage_data, message_number,
	severity, msg_buffer, src_buffer, ptr_buffer, loc_buffer,
	message_count\*L)
.ta 0.5i 1.5i
	char	\*V*message_data\*L;
	int	\*Vmessage_number\*L;
	int	\*Vseverity\*L;
	char	\*V*msg_buffer\*L, \*V*src_buffer\*L;
	char	\*V*ptr_buffer\*L, \*V*loc_buffer\*L;
	int	\*Vmessage_count\*L[];
.iE
.sE
.PP 
Specifies a callback function that UIL invokes instead of printing an
error message when the compiler encounters an error in the UIL source.
The callback should return one of these values:
.VL 20n 
.LI "\*LUil_k_terminate\*O"
Tells UIL to terminate processing of the source file.
.LI "\*LUil_k_continue\*O"
Tells UIL to continue processing the source file.
.LE 
.PP 
.ne 3
Following are the arguments:
.VL 20n 
.LI "\*Vmessage_data\*O"
Data supplied by the application as the \*Vmessage_data\*O argument to
the \*LUil\*O function.
UIL does not interpret this data in any way; it just passes it to the
callback.
.LI "\*Vmessage_number\*O"
An index into a table of error messages and severities, for internal use
by UIL.
.LI "\*Vseverity\*O"
An integer that indicates the severity of the error.
The possible values are the status constants returned by the \*LUil\*O
function.
See the "RETURN VALUE" section below.
.LI "\*Vmsg_buffer\*O"
A string that describes the error.
.LI "\*Vsrc_buffer\*O"
A string consisting of the source line where the error occurred.
This is not always available; the argument is then NULL.
.nL
.ne 2i
.LI "\*Vptr_buffer\*O"
A string consisting of whitespace and a printing character in the
character position corresponding to the column of the source line where
the error occurred.
This string may be printed beneath the source line to provide a visual
indication of the column where the error occurred.
This is not always available; the argument is then NULL.
.LI "\*Vloc_buffer\*O"
A string identifying the line number and file of the source line where
the error occurred.
This is not always available; the argument is then NULL.
.LI "\*Vmessage_count\*O"
An array of integers containing the number of diagnostic messages issued
thus far for each severity level.
To find the number of messages issued for the current severity level,
use the \*Vseverity\*O argument as the index into this array.
.LE 
.PP 
.ne 7
Following is a description of the status callback function specified by
\*Vstatus_cb\*O:
.nL
.ne 2i
.sS
.iS
.ta 1i
Uil_continue_type (\*V*status_cb\*L) (\*Vstatus_data, percent_complete,
	lines_processed, current_file, message_count\*L)
.ta 0.5i 1.5i
	char	\*V*status_data\*L;
	int	\*Vpercent_complete\*L;
	int	\*Vlines_processed\*L;
	char	\*V*current_file\*L;
	int	\*Vmessage_count\*L[];
.iE
.sE
.PP 
Specifies a callback function that is invoked to allow X applications to
service X events such as updating the screen.
The callback should return one of these values:
.VL 20n 
.LI "\*LUil_k_terminate\*O"
Tells UIL to terminate processing of the source file.
.LI "\*LUil_k_continue\*O"
Tells UIL to continue processing the source file.
.LE 
.PP 
.ne 2i
Following are the arguments:
.VL 20n 
.LI "\*Vstatus_data\*O"
Data supplied by the application as the \*Vstatus_data\*O argument to
the \*LUil\*O function.
UIL does not interpret this data in any way; it just passes it to the
callback.
.LI "\*Vpercent_complete\*O"
An integer indicating what percentage of the current source file has
been processed so far.
.LI "\*Vlines_processed\*O"
An integer indicating how many lines of the current source file have
been read so far.
.LI "\*Vcurrent_file\*O"
A string containing the pathname of the current source file.
.LI "\*Vmessage_count\*O"
An array of integers containing the number of diagnostic messages issued
thus far for each severity level.
To find the number of messages issued for a given severity level, use
the severity level as the index into this array.
The possible severity levels
.ne 4
are the status constants returned by the
\*LUil\*O function.
See the "RETURN VALUE" section below.
.LE 
.SH RETURN VALUE
This function returns one of these
status return constants:
.VL 25n 
.LI "\*LUil_k_success_status\*O"
The operation succeeded.
.LI "\*LUil_k_info_status\*O"
The operation succeeded, and an informational
message is returned.
.LI "\*LUil_k_warning_status\*O"
The operation succeeded, and a warning
message is returned.
.LI "\*LUil_k_error_status\*O"
The operation failed due to an error.
.LI "\*LUil_k_severe_status\*O"
The operation failed due to an error.
.LE 
.SH RELATED INFORMATION
.na
\*LUilDumpSymbolTable(3X)\*O and
\*Luil(1X)\*O.
.ad
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: t_open.3,v $ $Revision: 3.2.7.2 $ (DEC) $Date: 1993/07/27 13:25:59 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\"
.\" Copyright (c) 1990, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\"
.TH t_open 3
.SH NAME
\*Lt_open\*O \- Establishes a transport endpoint
.SH LIBRARY
.PP
XTI Library (\*Llibxti.a\*O)
.SH SYNOPSIS
.PP
.iX "t_open function"
.iX "XTI" "t_open function"
\*L#include <xti.h>
.PP
\*L#include <fcntl.h>\*O
.PP
\*Lint t_open\*O(
.nL
    \*Lchar *\*Vpath\*L,
.nL
    \*Lint \*Voflag\*L,
.nL
    \*Lstruct t_info *\*Vinfo\*L) ;
.SH "PARAMETERS"
.PP
The \*Lt_open\*O(\|) function can be
called in the T_UNINIT transport provider state only.  The
following table summarizes the relevance of input and output
parameters before and after the \*Lt_open\*O(\|) function is called:
.sp
.TS
tab(@);
lfHB lfHB lfHB
l l l.
_
.sp
Parameter@Before Call@After Call
.sp
_
.sp
T{
\*Vpath\*O
T}@y@n
T{
\*Voflag\*O
T}@y@n
T{
\*Vinfo\*O->\*Vaddr\*O
T}@n@y
T{
\*Vinfo\*O->\*Voptions\*O
T}@n@y
T{
\*Vinfo\*O->\*Vtsdu\*O
T}@n@y
T{
\*Vinfo\*O->\*Vetsdu\*O
T}@n@y
T{
\*Vinfo\*O->\*Vconnect\*O
T}@n@y
T{
\*Vinfo\*O->\*Vdiscon\*O
T}@n@y
T{
\*Vinfo\*O->\*Vservtype\*O
T}@n@y
.sp
_
.TE
.PP
\*LNotes to Table:\*O
.VL 4m
.LI "y"
This is a meaningful parameter.
.LI "n"
This is not a meaningful parameter.
.LI "\*Vpath\*O"
Identifies the transport provider. The transport provider must define
the type of transport
service (protocol) to associate with the opened transport endpoint.
.LI "\*Voflag\*O"
The \*Voflag\*O parameter is similar to the \*Voflag\*O parameter of the
\*Lopen\*O(\|) function and is used in the same way. Use \*Voflag\*O to
establish synchronous or asynchronous operating modes of the transport
provider pointed to by the \*Vpath\*O parameter. The transport
provider operating mode is specified with the O_NONBLOCK flag.
The actual value for this parameter is obtained from the symbolic name
variable O_RDWR,
which may be optionally bitwise combined with a logical inclusive OR of flag
O_NONBLOCK, defined in the \*Lfcntl.h\*O include file.
.LI "\*Vinfo\*O"
Points to a type \*Lt_info\*O structure. The location of a type
\*Lt_info\*O structure is returned to the \*Vinfo\*O parameter when
the \*Lt_open\*O(\|) function
successfully executes. Members of the \*Lt_info\*O structure specify
default characteristics of the underlying transport protocol pointed
to by the \*Vpath\*O parameter.
.IP
When the
\*Vinfo\*O parameter is set to the null pointer value by a transport user,
no protocol information is returned by this function.
.IP
When a transport user must preserve protocol independence, data length
information defined by members of the type \*Lt_info\*O structure may
be accessed to determine how large data buffers must be to hold
exchanged data.  Alternatively, the \*Lt_alloc(\|)\*O function may be
used to allocate necessary data buffers. An error results when a
transport user exceeds the allowed data length during any data
exchange. This structure has the following seven members:
.LI "\*Laddr\*O"
Permitted number of bytes in the protocol address. A value greater
than or equal to zero indicates the maximum number of permitted bytes
in a protocol address. A value of -1 specifies that there is no limit
on the protocol address size. A value of -2 specifies that the
transport provider does not permit the transport user access to the
protocol addresses.
.LI "\*Loptions\*O"
Permitted number of bytes of options. A value greater than or equal to
zero indicates the maximum number of bytes of protocol-specific
options supported by the transport provider. A value of -1 specifies
that there is no limit to the number of options bytes. A value of -2
specifies that the transport provider does not permit a transport user
to set options.
.LI "\*Ltsdu\*O"
Permitted number of bytes in a Transport Service Data Unit (TSDU). A
value greater than zero specifies the maximum number of bytes in a
TSDU message. A value of zero specifies that the transport provider
does not support TSDU data exchanges, although it does support the
sending of a data stream with no logical boundaries preserved across a
connection.
.IP
A value of -1 specifies that there is no limit to the
number of bytes in a TSDU data exchange. A value of -2 specifies that
the transfer of normal data is not supported by the transport
provider.
.LI "\*Letsdu\*O"
Permitted number of bytes in an Expedited Transport Service
Data Unit (ETSDU). A value greater than zero specifies the maximum number of
bytes in an ETSDU data exchange. A value of zero specifies that the
transport provider does not support ETSDU data exchanges, although it
does support the sending of an expedited data stream with no logical
boundaries preserved across a connection. A value of -1 specifies that
there is no limit on the number of bytes in an ETSDU data exchange. A
value of -2 specifies that the transfer of expedited data is not
supported by the transport provider.
.LI "\*Lconnect\*O"
Permitted number of bytes of data in connect request. A value greater than or
equal to zero specifies the maximum number of data bytes that may be
exchanged using the \*Lt_connect\*O(\|) and \*Lt_rcvconnect\*O(\|) functions.
A value of -2 specifies that there is no limit to
the number of data bytes that may be sent when a connection is
requested. A value of -2 specifies that the transport provider does
not permit data to be sent when a connection is established.
.LI "\*Ldiscon\*O"
Permitted number of bytes of data in a disconnect request. A value greater than
or equal to zero specifies the maximum number of data bytes that may
be exchanged using the \*Lt_snddis(\|)\*O and \*Lt_rcvdis(\|)\*O functions.
A value of -1 specifies that there is no limit
to the number of data bytes that may be sent when a connection is closed
using these abortive release functions. A value of -2 specifies that
the transport provider does not permit data to be sent with an
abortive release function.
.LI "\*Lservtype\*O"
This member specifies only one of the following types of service supported
by the transport provider:
.VL 4m
.LI "T_COTS"
The transport provider supports connection-mode service but does not
support the optional orderly release facility.
.LI "T_COTS_ORD"
The transport provider supports connection-mode service with the
optional orderly release facility.
.LI "T_CLTS"
The transport provider supports connectionless-mode service. For this
service type, this function returns the value -2 for the \*Letsdu\*O,
\*Lconnect\*O, and \*Ldiscon\*O parameters.
.LE
.LE
.SH DESCRIPTION
.PP
The \*Lt_open(\|)\*O XTI function must be the first one called when
initializing a transport endpoint. Two modes of operation may be
specified, synchronous and asynchronous. In synchronous mode, a
transport user must wait for some specific event to occur before
control is returned (refer to the \*Lt_look(\|)\*O function). In
asynchronous mode, a transport user is not required to wait for the
event to occur; control is returned immediately.
.PP
The \*Lt_open(\|)\*O function establishes the transport endpoint by
supplying a transport provider identifier that specifies a particular
transport protocol. A file descriptor, which must subsequently
always be used to identify the established endpoint, is returned by
this function.
.SH RETURN VALUES
.PP
Upon successful completion, the \*Lt_open\*O function returns a file descriptor,
a nonnegative integer.  Otherwise, a value of -1 is returned and 
\*Lt_errno\*O is set to indicate the error.
.SH ERRORS
.PP
If the \*Lt_open(\|)\*O function fails, \*Lt_errno\*O may be set to
one of the following values:
.VL 10m
.LI "[TBADFLAG]"
An invalid flag is specified.
.LI "[TBADNAME]"
Invalid transport provider name.
.LI "[TSYSERR]"
A system error occurred during execution of this function.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Lopen\*O(2)
.EQ
delim off
.EN

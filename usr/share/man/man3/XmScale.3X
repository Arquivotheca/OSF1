.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: XmScale.3X,v $ $Revision: 3.2.4.5 $ (DEC) $Date: 1993/12/14 19:55:35 $
.\"
.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
.\" **      Maynard, MA.  All Rights Reserved.
.\" **
.\" **
.TH XmScale 3X "" "" "" "OSF/Motif"
.SH NAME
\*LXmScale\*O \- The Scale widget class
.SH SYNOPSIS
.sS
.iS
\&#include <Xm/Scale.h>
.iE
.sE
.SH DESCRIPTION
.iX "XmScale"
.iX "widget class" "Scale"
Scale is used by an application to indicate a
value from within a range of values, and it allows the user to input or modify
a value from the same range.
.PP 
A Scale has an elongated rectangular region similar to a
ScrollBar.  A slider inside this region
indicates the current value along the Scale.  The user can also
modify the Scale's value by moving the slider within the
rectangular region of the Scale.  A Scale can also include a label set
located outside the Scale region.
These can indicate the relative value at various positions
along the scale.
.PP 
A Scale can be either input/output or output only.  An input/output
Scale's value can be set by the application and also
modified by the user with the slider.  An output-only Scale
is used strictly as an indicator of the current value of something
and cannot be modified interactively by the user.
The \*LCore\*O resource \*LXmNsensitive\*O specifies whether the user can
interactively modify the Scale's value.
.PP
The user can specify resources in a resource file for the automatically
created gadget that contains the title of the Scale widget.  The name of the
gadget is "Title".
.SS "Classes"
Scale inherits behavior and resources from
\*LCore\*O, \*LComposite\*O, \*LConstraint\*O, and \*LXmManager\*O classes.
.PP 
The class pointer is \*LxmScaleWidgetClass\*O.
.PP 
The class name is \*LXmScale\*O.
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \*LXmN\*O or
\*LXmC\*O prefix and use the remaining letters.  To specify one of the defined
values for a resource in a .Xdefaults file, remove the \*LXm\*O prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (C),
set by using \*LXtSetValues\*O (S),
retrieved by using \*LXtGetValues\*O (G), or is not applicable (N/A).
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmScale Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNdecimalPoints	0	CSG
\ \ \ \ \ \ XmCDecimalPoints	\ \ \ \ \ \ \ short
_
XmNdragCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNfontList	dynamic	CSG
\ \ \ \ \ \ XmCFontList	\ \ \ \ \ \ \ XmFontList
_
XmNhighlightOnEnter	False	CSG
\ \ \ \ \ \ XmCHighlightOnEnter	\ \ \ \ \ \ \ Boolean
_
XmNhighlightThickness	2	CSG
\ \ \ \ \ \ XmCHighlightThickness	\ \ \ \ \ \ \ Dimension
_
XmNmaximum	100	CSG
\ \ \ \ \ \ XmCMaximum	\ \ \ \ \ \ \ int
_
XmNminimum	0	CSG
\ \ \ \ \ \ XmCMinimum	\ \ \ \ \ \ \ int
_
XmNorientation	XmVERTICAL	CSG
\ \ \ \ \ \ XmCOrientation	\ \ \ \ \ \ \ unsigned char
_
XmNprocessingDirection	dynamic	CSG
\ \ \ \ \ \ XmCProcessingDirection	\ \ \ \ \ \ \ unsigned char
_
XmNscaleHeight	0	CSG
\ \ \ \ \ \ XmCScaleHeight	\ \ \ \ \ \ \ Dimension
_
XmNscaleMultiple	dynamic	CSG
\ \ \ \ \ \ XmCScaleMultiple	\ \ \ \ \ \ \ int
_
XmNscaleWidth	0	CSG
\ \ \ \ \ \ XmCScaleWidth	\ \ \ \ \ \ \ Dimension
_
XmNshowValue	False	CSG
\ \ \ \ \ \ XmCShowValue	\ \ \ \ \ \ \ Boolean
_
.wH .tH
XmNtitleString	NULL	CSG
\ \ \ \ \ \ XmCTitleString	\ \ \ \ \ \ \ XmString
_
XmNvalue	dynamic	CSG
\ \ \ \ \ \ XmCValue	\ \ \ \ \ \ \ int
_
XmNvalueChangedCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
.TE
.\" NROFF HACK END
.VL  
.LI "\*LXmNdecimalPoints\*O"
Specifies the number of decimal points to shift the slider value when
displaying it.  For example, a slider value of 2,350
and an \*LXmdecimalPoints\*O
value of 2 results in a display value of 23.50.
The value must not be negative.
.LI "\*LXmNdragCallback\*O"
Specifies the list of callbacks that is called
when the slider position changes as the slider is being
dragged.  The reason sent by the callback is \*LXmCR_DRAG\*O.
.LI "\*LXmNfontList\*O"
Specifies the font list to use for the title text string specified by
\*LXmNtitleString\*O, and the label displayed when \*LXmNshowValue\*O
is True.  If this value is NULL at initialization, the
font list is initialized by looking up the parent hierarchy of the
widget for an ancestor that is a subclass of the XmBulletinBoard,
VendorShell, or XmMenuShell widget class.  If such an ancestor is
found, the font list is initialized to the \*LXmNlabelFontList\*O
of the ancestor widget.  If no such ancestor is found, the default
is implementation dependent.  Refer to \*LXmFontList(3X)\*O for more
information on the creation and structure of a font list.
.LI "\*LXmNhighlightOnEnter\*O"
Specifies whether the highlighting rectangle is drawn when the cursor moves
into the widget.
If the shell's focus policy is \*LXmEXPLICIT\*O, this resource is
ignored, and the widget is highlighted when it has the focus.
If the shell's focus policy
.ne 10
is \*LXmPOINTER\*O and if this resource is
True, the highlighting rectangle is drawn when the the cursor moves into
the widget.
If the shell's focus policy is \*LXmPOINTER\*O and if this resource is
False, the highlighting rectangle is not drawn when the the cursor moves
into the widget.
The default is False.
.LI "\*LXmNhighlightThickness\*O"
Specifies the size of the
slider's border drawing rectangle used for enter window and
traversal highlight drawing.
.LI "\*LXmNmaximum\*O"
Specifies the slider's maximum value.
\*LXmNmaximum\*O must be greater than \*LXmNminimum\*O.
.LI "\*LXmNminimum\*O"
Specifies the slider's minimum value.
\*LXmNmaximum\*O must be greater than \*LXmNminimum\*O.
.LI "\*LXmNorientation\*O"
Displays Scale vertically or horizontally.
This resource can have values of \*LXmVERTICAL and XmHORIZONTAL\*O.
.LI "\*LXmNprocessingDirection\*O"
Specifies whether the value for \*LXmNmaximum\*O is on the right or
left side of \*LXmNminimum\*O for horizontal Scales
or above or below \*LXmNminimum\*O for vertical Scales.
This resource can have values of \*LXmMAX_ON_TOP, XmMAX_ON_BOTTOM,XmMAX_ON_LEFT\*O, and \*LXmMAX_ON_RIGHT\*O.
If the XmScale is oriented vertically, the default value is
\*LXmMAX_ON_TOP\*O.
If the XmScale is oriented horizontally, the default value
may depend on the value of the \*LXmNstringDirection\*O resource.
.LI "\*LXmNscaleHeight\*O"
Specifies the height of the slider area.
The value should be in the specified unit type (the default is pixels).
If no value is specified a default height is computed.
.LI "\*LXmNscaleMultiple\*O"
Specifies the amount to move the slider when the user takes an action
that moves the slider by a multiple increment.
The default is (\*LXmNmaximum\*O \- \*LXmNminimum\*O) divided by 10,
with a minimum of 1.
.LI "\*LXmNscaleWidth\*O"
Specifies the width of the slider area.
The value should be in the specified unit type (the default is pixels).
If no value is specified a default width is computed.
.nL
.ne 6
.LI "\*LXmNshowValue\*O"
Specifies whether a label for the current slider
value should be displayed next to the slider.  If the value is True, the
current slider value is displayed.
.LI "\*LXmNtitleString\*O"
Specifies the title text string to appear in the Scale widget window.
.LI "\*LXmNvalue\*O"
Specifies the slider's current position along the scale,
between \*LXmNminimum\*O and \*LXmNmaximum\*O.
The value is constrained to be within these inclusive bounds.
The initial value of this resource is the larger of 0 and \*LXmNminimum\*O.
.LI "\*LXmNvalueChangedCallback\*O"
Specifies the list of callbacks that is called
when the value of the slider has changed.  The reason
sent by the callback is \*LXmCR_VALUE_CHANGED\*O.
.LE 
.SS "Inherited Resources"
Scale inherits behavior and resources from the following
superclasses.  For a complete description of each resource, refer to the
man page for that superclass.
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmManager Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNbottomShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCBottomShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNbottomShadowPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCBottomShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNforeground	dynamic	CSG
\ \ \ \ \ \ XmCForeground	\ \ \ \ \ \ \ Pixel
_
XmNhelpCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNhighlightColor	dynamic	CSG
\ \ \ \ \ \ XmCHighlightColor	\ \ \ \ \ \ \ Pixel
_
XmNhighlightPixmap	dynamic	CSG
\ \ \ \ \ \ XmCHighlightPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNinitialFocus	NULL	CSG
\ \ \ \ \ \ XmCInitialFocus	\ \ \ \ \ \ \ Widget
_
XmNnavigationType	XmTAB_GROUP	CSG
\ \ \ \ \ \ XmCNavigationType	\ \ \ \ \ \ \ XmNavigationType
_
XmNshadowThickness	2	CSG
\ \ \ \ \ \ XmCShadowThickness	\ \ \ \ \ \ \ Dimension
_
XmNstringDirection	dynamic	CG
\ \ \ \ \ \ XmCStringDirection	\ \ \ \ \ \ \ XmStringDirection
_
XmNtopShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNtopShadowPixmap	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNtraversalOn	True	CSG
\ \ \ \ \ \ XmCTraversalOn	\ \ \ \ \ \ \ Boolean
_
XmNunitType	dynamic	CSG
\ \ \ \ \ \ XmCUnitType	\ \ \ \ \ \ \ unsigned char
_
XmNuserData	NULL	CSG
\ \ \ \ \ \ XmCUserData	\ \ \ \ \ \ \ XtPointer
_
.TE
.\" NROFF HACK END
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Composite Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNchildren	NULL	G
\ \ \ \ \ \ XmCReadOnly	\ \ \ \ \ \ \ WidgetList
_
XmNinsertPosition	NULL	CSG
\ \ \ \ \ \ XmCInsertPosition	\ \ \ \ \ \ \ XtOrderProc
_
XmNnumChildren	0	G
\ \ \ \ \ \ XmCReadOnly	\ \ \ \ \ \ \ Cardinal
_
.TE
.\" NROFF HACK END
.PP
.wH .in 0 
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Core Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNaccelerators	dynamic	CSG
\ \ \ \ \ \ XmCAccelerators	\ \ \ \ \ \ \ XtAccelerators
_
XmNancestorSensitive	dynamic	G
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNbackground	dynamic	CSG
\ \ \ \ \ \ XmCBackground	\ \ \ \ \ \ \ Pixel
_
XmNbackgroundPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderColor	XtDefaultForeground	CSG
\ \ \ \ \ \ XmCBorderColor	\ \ \ \ \ \ \ Pixel
_
XmNborderPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderWidth	0	CSG
\ \ \ \ \ \ XmCBorderWidth	\ \ \ \ \ \ \ Dimension
_
XmNcolormap	dynamic	CG
\ \ \ \ \ \ XmCColormap	\ \ \ \ \ \ \ Colormap
_
XmNdepth	dynamic	CG
\ \ \ \ \ \ XmCDepth	\ \ \ \ \ \ \ int
_
XmNdestroyCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNheight	dynamic	CSG
\ \ \ \ \ \ XmCHeight	\ \ \ \ \ \ \ Dimension
_
XmNinitialResourcesPersistent	True	C
\ \ \ \ \ \ XmCInitialResourcesPersistent	\ \ \ \ \ \ \ Boolean
_
XmNmappedWhenManaged	True	CSG
\ \ \ \ \ \ XmCMappedWhenManaged	\ \ \ \ \ \ \ Boolean
_
XmNscreen	dynamic	CG
\ \ \ \ \ \ XmCScreen	\ \ \ \ \ \ \ Screen *
_
.wH .tH
XmNsensitive	True	CSG
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNtranslations	dynamic	CSG
\ \ \ \ \ \ XmCTranslations	\ \ \ \ \ \ \ XtTranslations
_
XmNwidth	dynamic	CSG
\ \ \ \ \ \ XmCWidth	\ \ \ \ \ \ \ Dimension
_
XmNx	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
XmNy	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
.TE
.\" NROFF HACK END
.wH .in  
.SS "Callback Information"
A pointer to the following structure is passed to each callback:
.sS
.iS
.ta .25i 1.1i
typedef struct
{
	int	\*Vreason\*L;
	XEvent	\*V* event\*L;
	int	\*Vvalue\*L;
} XmScaleCallbackStruct;
.iE
.sE
.wH .fi
.VL .75i 
.LI "\*Vreason\*O"
Indicates why the callback was invoked
.LI "\*Vevent\*O"
Points to the \*LXEvent\*O that triggered the callback
.LI "\*Vvalue\*O"
Is the new slider value
.LE 
.SS "Behavior"
XmScale behavior is described below:
.VL
.LI "\*LBSelect\ Press\*O\ or\ \*LBDrag\ Press\*O:"
(in region between an end of the Scale and the slider): Moves the
slider by one multiple increment in the direction of the end of the
Scale and calls the \*LXmNvalueChangedCallback\*O callbacks.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_RIGHT\*O or
\*LXmMAX_ON_BOTTOM\*O, movement toward the right or
bottom increments the Scale value,
and movement toward the left or top decrements the Scale value.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_LEFT\*O or
\*LXmMAX_ON_TOP\*O, movement toward the right or
bottom decrements the Scale value,
and movement toward the left or top increments the Scale value.
If the button is held down longer than a delay period, the slider is
moved again by the same increment and the same callbacks are called.
.sp
In the slider region:  Activates the interactive dragging of the slider.
.LI "\*LBSelect\ Motion\*O\ or\ \*LBDrag\ Motion\*O:"
If the button press occurs within the slider, the subsequent motion
events move the slider to the position of the pointer and call the
callbacks for \*LXmNdragCallback\*O.
.LI "\*LBSelect\ Release\*O\ or\ \*LBDrag\ Release\*O:"
If the button press occurs within the slider and the slider position
is changed, the callbacks for \*LXmNvalueChangedCallback\*O are called.
.LI "\*LMCtrl\ BSelect\ Press\*O:"
In the region between an end of the Scale and the slider: Moves the
slider to that end of the Scale and calls the
\*LXmNvalueChangedCallback\*O callbacks.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_RIGHT\*O or
\*LXmMAX_ON_BOTTOM\*O,
movement toward the right or bottom increments the Scale value,
and movement toward
the left or top
decrements
the Scale value.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_LEFT\*O or
\*LXmMAX_ON_TOP\*O, movement toward the right or
bottom decrements the Scale value,
and movement toward the left or top increments the Scale value.
.LI "\*LKUp\*O:"
For vertical Scales,
moves the slider up one increment and calls the
\*LXmNvalueChangedCallback\*O callbacks.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_TOP\*O, movement toward
the top increments the Scale value.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_BOTTOM\*O, movement toward
the top decrements the Scale value.
.LI "\*LKDown\*O:"
For vertical Scales,
moves the slider down one increment and calls the
\*LXmNvalueChangedCallback\*O callbacks.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_BOTTOM\*O, movement toward
the bottom increments the Scale value.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_TOP\*O, movement toward
the bottom decrements the Scale value.
.LI "\*LKLeft\*O:"
For horizontal Scales,
moves the slider one increment to the left and calls the
\*LXmNvalueChangedCallback\*O callbacks.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_LEFT\*O, movement toward
the left increments the Scale value.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_RIGHT\*O, movement toward
the left decrements the Scale value.
.LI "\*LKRight\*O:"
For horizontal Scales,
moves the slider one increment to the right and calls the
\*LXmNvalueChangedCallback\*O callbacks.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_RIGHT\*O, movement toward
the right increments the Scale value.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_LEFT\*O, movement toward
the right decrements the Scale value.
.LI "\*LMCtrl\ KUp\*O\ or\ \*LKPageUp\*O:"
For vertical Scales,
moves the slider up one multiple increment and calls the
\*LXmNvalueChangedCallback\*O callbacks.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_TOP\*O, movement toward
the top increments the Scale value.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_BOTTOM\*O, movement toward
the top decrements the Scale value.
.LI "\*LMCtrl\ KDown\*O\ or\ \*LKPageDown\*O:"
For vertical Scales,
moves the slider down one multiple increment and calls the
\*LXmNvalueChangedCallback\*O callbacks.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_BOTTOM\*O, movement toward
the bottom increments the Scale value.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_TOP\*O, movement toward
the bottom decrements the Scale value.
.LI "\*LMCtrl\ KLeft\*O\ or\ \*LKPageLeft\*O:"
For horizontal Scales,
moves the slider one multiple increment to the left and calls the
\*LXmNvalueChangedCallback\*O callbacks.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_LEFT\*O, movement toward
the left increments the Scale value.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_RIGHT\*O, movement toward
the left decrements the Scale value.
.LI "\*LMCtrl\ KRight\*O\ or\ \*LKPageRight\*O:"
For horizontal Scales,
moves the slider one multiple increment to the right and calls the
\*LXmNvalueChangedCallback\*O callbacks.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_RIGHT\*O, movement toward
the right increments the Scale value.
If \*LXmNprocessingDirection\*O is \*LXmMAX_ON_LEFT\*O, movement toward
the right decrements the Scale value.
.LI "\*LKBeginLine\*O\ or\ \*LKBeginData\*O:"
Moves the slider to the minimum value and calls the
\*LXmNvalueChangedCallback\*O callbacks.
.LI "\*LKEndLine\*O\ or\ \*LKEndData\*O:"
Moves the slider to the maximum value and calls the
\*LXmNvalueChangedCallback\*O callbacks.
.LI "\*LKNextField\*O:"
Traverses to the first item in the next tab group.  If
the current tab group is the last entry in the tab group list, it
wraps to the beginning of the tab group list.
.LI "\*LKPrevField\*O:"
Traverses to the first item in the previous tab group.
If the beginning of the tab group list is reached, it wraps to the end
of the tab group list.
.LI "\*LKHelp\*O:"
Calls the callbacks for \*LXmNhelpCallback\*O if any exist.
If there are no help
callbacks for this widget, this action calls the help callbacks
for the nearest ancestor that has them.
.LE
.SS "Virtual Bindings"
The bindings for virtual keys are vendor specific.
For information about bindings for virtual buttons and keys, see \*LVirtualBindings(3X)\*O.
.SH RELATED INFORMATION
.na
\*LComposite(3X)\*O, \*LConstraint(3X)\*O, \*LCore(3X)\*O,
\*LXmCreateScale(3X)\*O,
\*LXmManager(3X)\*O,
\*LXmScaleGetValue(3X)\*O, and
\*LXmScaleSetValue(3X)\*O.
.ad
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: sched_getscheduler.3,v $ $Revision: 1.2.4.2 $ (DEC) $Date: 1994/01/19 22:51:38 $
.\"
.TH sched_getscheduler 3
.SH NAME
.PP
\*Lsched_getscheduler\*O \- Return the scheduling policy of a process (P1003.4/D11)
.SH SYNOPSIS
.PP
#include \*L<sched.h>\*O
.PP
int \*Lsched_getscheduler\*O (
.br
pid_t \*Vpid\*O);
.SH PARAMETERS
.PP
.TP 8
.I pid
The ID of the process for which the scheduling policy is
obtained. If \*Vpid\*O is zero, the scheduling policy
of the calling process
is obtained.
.SH DESCRIPTION
.PP
.iX "sched_getscheduler function"
.iX "process" "getting scheduling policy"
The \*Lsched_getscheduler\*O function
returns the current scheduling policy of a process. The values
that can be returned are defined in the header file \*L<sched.h>\*O.
.PP
The \*Lsched_setscheduler\*O function
changes the scheduling policy and priority of a process.
Changing the scheduling policy and priority ensures that an
application can determine more effectively when a process will run.
.PP
The realtime scheduling policies are as follows:
.RS 3
.IP \(bu 3
SCHED_FIFO \- specifies the first-in, first-out (FIFO) scheduling policy
.IP \(bu
SCHED_RR \- specifies the round-robin scheduling policy
.IP \(bu
SCHED_OTHER \- specifies the standard timesharing scheduling policy
.RE
.PP
The SCHED_FIFO and SCHED_RR scheduling policies are fixed-priority
scheduling policies. You can specify a priority for your process
and the scheduler will not adjust it.
Setting priorities, in conjunction with a SCHED_FIFO scheduling policy, allows
a critical process to run as soon as it is ready, for as long as it needs
to run, because the process will preempt other lower priority
processes.
.PP
The round-robin scheduling policy is similar to first in-first out, but also
imposes a quantum on execution time. Use the \*Lsched_get_rr_interval\*O
function to determine the current quantum for process execution under
the SCHED_RR scheduling policy.
.PP
The scheduler adjusts process priorities running under the timesharing
scheduling policy.
.PP
No special privileges are needed to use the \*Lsched_getscheduler\*O function.
.SH RETURN VALUES
.PP
On a successful call to \*Lsched_getscheduler\*O the
scheduling policy of the process is returned. If there is an error,
\-1 is returned and \*Lerrno\*O is set to indicate the error.
.SH ERRORS
.PP
The \*Lsched_getscheduler\*O function fails under the following conditions:
.TP 15
[ENOSYS]
The function \*Lsched_getscheduler\*O is not supported by this implementation.
.TP 15
[ESRCH]
No process can be found corresponding to that specified by
.I pid.
.SH RELATED INFORMATION
.PP
Functions:
\*Lgetpid\*O(2), \*Lsched_getparam\*O(3), \*Lsched_setparam\*O(3),
\*Lsched_setscheduler\*O(3)
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: pthread_keycreate.3,v $ $Revision: 3.2.2.2 $ (DEC) $Date: 1992/05/27 11:09:57 $
.\"
...\" Copyright (c) 1991, Open Software Foundation, Inc. ALL RIGHTS RESERVED
.\"
.\" **************************************************************************
.\" * COPYRIGHT (c) 1990 BY                                             *
.\" * DIGITAL EQUIPMENT CORPORATION, Maynard, Mass.                          *
.\" *                                                                        *
.\" * This document is furnished under a license and may be                  *
.\" * used and copied                                                        *
.\" * only in accordance with the terms of such license and with the         *
.\" * inclusion of the above copyright notice. This document or any other    *
.\" * copies thereof may not be provided or otherwise made available to any  *
.\" * other person. No title to or ownership of the document is hereby       *
.\" * transferred.                                                           *
.\" *                                                                        *
.\" * The information in this document is subject to change without notice   *
.\" * and should not be construed as a commitment by DIGITAL Equipment       *
.\" * Corporation.                                                           *
.\" **************************************************************************
.wH "<routine_section>"(P1003.4a routines\3THR)
.wH "<set_template_routine>"(ROUTINE\DOUBLERUNNINGHEADS)
.TH pthread_keycreate 3
.SH NAME
\*Lpthread_keycreate\*O \- Generates a unique per-thread context key value.
.SH SYNOPSIS
.PP
.sS
\*L#include <pthread.h>
.fS "int pthread_keycreate"
.dS "pthread_key_t"
\*V*key\*L
.dE
.dS "pthread_destructor_t"
\*Vdestructor\*O
.dE
.fE
.sE
.wH "<endformat>"
.SH PARAMETERS
.PP
.VL 5m
.LI "\*Vkey\*O"
Value of the new per-thread context key.
.LI "\*Vdestructor\*O"
Procedure to be called to destroy a context value associated with
the created key when the thread terminates or when the value is changed (for
example, by calling \*Lpthread_setspecific\*O.)
.LE
.wH "<endargdeflist>"
.SH DESCRIPTION
.iX "Per-thread context" "generating key value for"
.iX "Per-thread context" "uses for"
.iX "Context" "generating key value for"
.iX "Context" "uses for"
.iX "Creating per-thread context key value"
.iX "Key value" "generating for per-thread context"
.iX "Thread" "per-thread context of"
.PP
This routine generates a unique per-thread context key value. This
key value identifies a per-thread context, which is an address of
memory generated by the client containing arbitrary data of any size.
.PP
Per-thread context is a mechanism that allows client software to
associate context information with the current thread. (This mechanism
can be thought of as a means for a client to add unique fields
to the thread control block.)
.PP
For example, per-thread context can be used by a language run-time
library that needs to associate a language-specific thread-private
data structure with an individual thread. The per-thread context
routines also provide a portable means of implementing the class of
storage called \*Lthread-private static\*O, which is needed
to support parallel decomposition in the FORTRAN language.
.PP
This routine generates and returns a new key value. Each call to this
routine within a process returns a key value that is unique
within an application invocation. Keys must be generated from
initialization code that is guaranteed to be called only once within
each process. (Refer to the description of \*Lpthread_once\*O
for more information.)
.PP
When multiple facilities share access to per-thread context, the
facilities must agree on the key value that is associated with the
context. The key value must be created only once and should be stored
in a location known to each facility. (It may be desirable to encapsulate
the creation of a key and the setting and getting of context values
for that key, within a special facility created for that purpose.)
.PP
An implementation can choose to predefine some number of keys for
favored clients, such as certain compilers, run-time libraries, or the
debugger.
.PP
When a thread terminates, per-thread context is automatically
destroyed. For each per-thread context currently associated with the
thread, the \*Ldestructor\*O
.gL "destructor"
routine associated with the key
value of that context is called. The order in which per-thread
context destructors are called at thread termination is
undefined. Implementations can provide non-portable
per-thread context attributes to control this ordering.
.SH RETURN VALUES
.PP
If an error condition occurs, this routine returns \-1 and sets
\*Eerrno\*O to the corresponding error value.
Possible return values are as follows:
.sp
.TS
center, tab(@);
l l lw(2.5).
\*LReturn@Error@Description\*O
_
\00@@Successful completion.
\&\-1@[\*LENOMEM\*O]@T{
An attempt was made to allocate a key when the key name space is exhausted.
This is not a temporary condition.
T}
.sp 4p
\-1@[\*LEAGAIN\*O]@Insufficient memory exists to create the key.
.TE
.wH "<endreturn>"
.cS
.SH EXAMPLES
.PP
.oS
int pthread_keycreate(pthread_destructor_t destructor,
 pthread_key_t *key);
.oE
.cE
.wH "<endexample>"
.SH RELATED INFORMATION
.PP
\*Lpthread_getspecific\*O(3),
\*Lpthread_setspecific\*O(3)
.EQ
delim off
.EN

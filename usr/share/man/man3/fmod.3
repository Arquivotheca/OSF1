.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: fmod.3,v $ $Revision: 1.1.4.2 $ (DEC) $Date: 1993/05/20 15:10:29 $
.\"
.\"
.\" (c) Copyright 1992, OPEN PROVENCHER FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\"
.\"
.TH fmod 3
.SH NAME
.PP
\*Lfmod\*O, \*Ldrem\*O, \*Lremainder\*O \- Computes the Modulo Remainder, and a floating-point remainder
.SH LIBRARY
.PP
\*OMath Library (\*Llibm.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <math.h>
.PP
\*Ldouble	fmod       (\*Ldouble \*Vx\*L, double \*Vy\*L);
.nL
\*Lfloat	fmodf      (\*Lfloat  \*Vx\*L, float  \*Vy\*L);
.nL
\*Ldouble	drem       (\*Ldouble \*Vx\*L, double \*Vy\*L);
.nL
\*Lfloat	dremf      (\*Lfloat  \*Vx\*L, float  \*Vy\*L);
.nL
\*Ldouble	remainder  (\*Ldouble \*Vx\*L, double \*Vy\*L);
.nL
\*Lfloat	remainderf (\*Lfloat  \*Vx\*L, float  \*Vy\*L);
.nL
.sE
.SH DESCRIPTION
.PP
.iX "fmod function"
.iX "drem function"
.iX "remainder function"
\*Lfmod(\|)\*O and \*Lfmodf(\|)\*O
return the remainder  r = x - n*y, where n = trunc(x/y).
The result has the same sign as \*Vx\*O and
magnitude less than the magnitude of \*Vy\*O.
.PP
\*Ldrem(\|)\*O, \*Ldremf(\|)\*O,
\*Lremainder(\|)\*O, and \*Lremainderf(\|)\*O
return the remainder  r = x - n*y, where n = rint(x/y).
Additionally if |n-x/y|=1/2,
then n is even.  Consequently the remainder is computed exactly and |r|
is less than or equal to |y|/2.
.PP
\*Ldrem(\|)\*O, \*Ldremf(\|)\*O,
\*Lremainder(\|)\*O, and \*Lremainderf(\|)\*O are equivalent functions.
.PP
.\"      
.\"              Function            Exceptional Argument  Routine Behavior
.\"             ------------------  ---------------------  ----------------
.\"      
.\"       	fmod(),  fmodf()    x = infinity           invalid argument
.\"      	fmod(),  fmodf()    y = 0                  invalid argument
.\"             drem(),  dremf()    x = infinity           invalid argument
.\"             drem(),  dremf()    y = 0                  invalid argument
.\"             remainder()         x = infinity           invalid argument
.\"             remainderf()        x = infinity           invalid argument
.\"             remainder()         y = 0                  invalid argument
.\"             remainderf()        y = 0                  invalid argument
.\"      
.\"      
.\"      
.TS
tab(@);
lfHB lfHB lfHB
l l l.
_
.sp 4p
Function@Exceptional Argument@Routine Behavior
.sp 4p
_
.sp 6p
fmod(),  fmodf()    @x = infinity         @T{
invalid argument
T}
fmod(),  fmodf()    @y = 0                  @T{
invalid argument
T}
drem(),  dremf()    @x = infinity           @T{
invalid argument
T}
drem(),  dremf()    @y = 0                  @T{
invalid argument
T}
remainder()         @x = infinity           @T{
invalid argument
T}
remainderf()        @x = infinity           @T{
invalid argument
T}
remainder()         @y = 0                  @T{
invalid argument
T}
remainderf()        @y = 0                  @T{
invalid argument
T}
.sp 6p
_
.TE
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: XmToggleButton.3X,v $ $Revision: 3.2.4.5 $ (DEC) $Date: 1993/12/14 23:52:21 $
.\"
.\" **
.\" **
.\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
.\" **      All Rights Reserved.
.\" **
.\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
.\" **
.\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
.\" **      Maynard, MA.  All Rights Reserved.
.\" **
.\" **
.TH XmToggleButton 3X "" "" "" "OSF/Motif"
.SH NAME
\*LXmToggleButton\*O \- The ToggleButton widget class
.SH SYNOPSIS
.sS
.iS
\&#include <Xm/ToggleB.h>
.iE
.sE
.SH DESCRIPTION
.iX "XmToggleButton"
.iX "widget class" "ToggleButton"
ToggleButton sets nontransitory state data within an
application.  Usually this widget consists of an indicator
(square or diamond) with either text or a pixmap on one side of it.
However, it can also consist of just text or a pixmap without the indicator.
.PP 
The toggle graphics display a \*L1-of-many\*O
or \*LN-of-many\*O selection state.
When a toggle indicator is displayed, a square indicator shows an
\*LN-of-many\*O
selection state and a diamond indicator shows a
\*L1-of-many\*O selection state.
.PP 
ToggleButton
implies a selected or unselected state.
In the case of a label and an indicator, an
empty indicator (square or diamond shaped) indicates that ToggleButton
is unselected, and a filled indicator shows that it is
selected.  In the case of a pixmap
toggle, different pixmaps are used to display the selected/unselected states.
.PP 
.ne 10
The default behavior associated with a ToggleButton in a menu depends on
the type of menu system in which it resides.
By default, \*LBSelect\*O controls the behavior of the ToggleButton.
In addition, \*LBMenu\*O controls the behavior of the ToggleButton if
it resides in a PopupMenu system.
The actual mouse button used is determined by its RowColumn parent.
.PP 
To accommodate the toggle indicator when created,
Label's resource \*LXmNmarginLeft\*O may
be increased.
.SS "Classes"
ToggleButton inherits behavior and resources from
\*LCore\*O, \*LXmPrimitive\*O, and \*LXmLabel\*O Classes.
.PP 
The class pointer is \*LxmToggleButtonWidgetClass\*O.
.PP 
The class name is \*LXmToggleButton\*O.
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \*LXmN\*O or
\*LXmC\*O prefix and use the remaining letters.  To specify one of the defined
values for a resource in a .Xdefaults file, remove the \*LXm\*O prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (C),
set by using \*LXtSetValues\*O (S),
retrieved by using \*LXtGetValues\*O (G), or is not applicable (N/A).
.PP
.wH .in 0 
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmToggleButton Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNarmCallback	NULL	C
\ \ \ \ \ \ XmCArmCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNdisarmCallback	NULL	C
\ \ \ \ \ \ XmCDisarmCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNfillOnSelect	dynamic	CSG
\ \ \ \ \ \ XmCFillOnSelect	\ \ \ \ \ \ \ Boolean
_
XmNindicatorOn	True	CSG
\ \ \ \ \ \ XmCIndicatorOn	\ \ \ \ \ \ \ Boolean
_
XmNindicatorSize	dynamic	CSG
\ \ \ \ \ \ XmCIndicatorSize	\ \ \ \ \ \ \ Dimension
_
XmNindicatorType	dynamic	CSG
\ \ \ \ \ \ XmCIndicatorType	\ \ \ \ \ \ \ unsigned char
_
XmNselectColor	dynamic	CSG
\ \ \ \ \ \ XmCSelectColor	\ \ \ \ \ \ \ Pixel
_
XmNselectInsensitivePixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCSelectInsensitivePixmap	\ \ \ \ \ \ \ Pixmap
_
XmNselectPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCSelectPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNset	False	CSG
\ \ \ \ \ \ XmCSet	\ \ \ \ \ \ \ Boolean
_
XmNspacing	4	CSG
\ \ \ \ \ \ XmCSpacing	\ \ \ \ \ \ \ Dimension
_
XmNvalueChangedCallback	NULL	C
\ \ \ \ \ \ XmCValueChangedCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNvisibleWhenOff	dynamic	CSG
\ \ \ \ \ \ XmCVisibleWhenOff	\ \ \ \ \ \ \ Boolean
_
.TE
.\" NROFF HACK END
.wH .in  
.VL  
.LI "\*LXmNarmCallback\*O"
Specifies the list of callbacks called
when the ToggleButton is armed.
To arm this widget, press the active mouse button
while the pointer is inside the ToggleButton.
For this callback, the reason is \*LXmCR_ARM\*O.
.LI "\*LXmNdisarmCallback\*O"
Specifies the list of callbacks called
when ToggleButton is disarmed.
To disarm this widget, press and release the active
mouse button while the pointer is inside the ToggleButton.
This widget is also disarmed
when the user moves out of the widget
and releases the mouse button when the pointer is outside the widget.
For this callback, the reason is \*LXmCR_DISARM\*O.
.LI "\*LXmNfillOnSelect\*O"
Fills the indicator with the color specified in
\*LXmNselectColor\*O and switches the top and bottom shadow
colors when set to True.  Otherwise, it switches only the top
and bottom shadow colors.  The default is set to the value
of \*LXmNindicatorOn\*O.  When \*LXmNindicatorOn\*O is False,
and \*LXmNfillOnSelect\*O is set explicitly to True, the
background is filled with the color specified by \*LXmNselectColor\*O.
.LI "\*LXmNindicatorOn\*O"
Specifies that a toggle indicator is drawn to one side of the toggle
text or pixmap when set to True.  When set to False, no space is allocated
for the indicator, and it is not displayed.  If \*LXmNindicatorOn\*O is True,
the indicator shadows are switched when the button is selected or unselected,
but, any shadows around the entire widget are not switched.
However, if
\*LXmNindicatorOn\*O is False, any shadows around the
entire widget are switched when the toggle is selected or unselected.
.LI "\*LXmNindicatorSize\*O"
Sets the size of the indicator.
If no value is specified, the size of the indicator is based on the size
of the label string or pixmap.
If the label string or pixmap changes, the size of the indicator is
recomputed based on the size of the label string or pixmap.
Once a value has been specified for \*LXmNindicatorSize\*O, the
indicator has that size, regardless of the size of the label string or
pixmap, until a new value is specified.
.LI "\*LXmNindicatorType\*O"
Specifies if the indicator is a \*L1-of\*O or
\*LN-of\*O indicator.  For the \*L1-of\*O indicator, the
value is \*LXmONE_OF_MANY\*O.  For the \*LN-of\*O indicator,
the value is \*LXmN_OF_MANY\*O.  The \*LN-of-many\*O indicator is square.
The \*L1-of-many\*O indicator is
diamond shaped.  This resource specifies only the visuals and does not
enforce the behavior.
When the ToggleButton is in a RadioBox, the default is
\*LXmONE_OF_MANY\*O; otherwise, the default is \*LXmN_OF_MANY\*O.
.LI "\*LXmNselectColor\*O"
Allows the application to specify what color fills
the center of the square or diamond-shaped indicator when it is set.
If this color is the same as either the top or the bottom shadow color of the
indicator, a one-pixel-wide margin is left between the shadows and the fill;
otherwise, it is filled completely.
This resource's default for a color display is a color between the background
and the bottom shadow color.  For a monochrome display, the default is set to
the foreground color.  To set the background of the button to
\*LXmNselectColor\*O when \*LXmNindicatorOn\*O is False, the value of
\*LXmNfillOnSelect\*O must be explicitly set to True.
.LI "\*LXmNselectInsensitivePixmap\*O"
Specifies a pixmap used as the button face when the ToggleButton is selected
and the button is insensitive if the Label resource
\*LXmNlabelType\*O is set to \*LXmPIXMAP\*O.
If the ToggleButton is unselected and the button is insensitive,
the pixmap in
\*LXmNlabelInsensitivePixmap\*O is used as the button face.
If no value is specified for \*LXmNlabelInsensitivePixmap\*O, that
resource is set to the value specified for
\*LXmNselectInsensitivePixmap\*O.
.LI "\*LXmNselectPixmap\*O"
Specifies the pixmap to be used as the button
face if \*LXmNlabelType\*O is \*LXmPIXMAP\*O and
the ToggleButton is selected.
When the ToggleButton is unselected,
the pixmap specified in Label's \*LXmNlabelPixmap\*O is used.
If no value is specified for \*LXmNlabelPixmap\*O, that resource is set
to the value specified for \*LXmNselectPixmap\*O.
.LI "\*LXmNset\*O"
Represents the state of the ToggleButton.  A value of false indicates
that the ToggleButton is not set.   A value of true indicates that
the ToggleButton is set.  Setting this resource sets the state of the
ToggleButton.
.LI "\*LXmNspacing\*O"
Specifies the amount of spacing between the toggle indicator and the
toggle label (text or pixmap).
.LI "\*LXmNvalueChangedCallback\*O"
Specifies the list of callbacks called
when the ToggleButton value
is changed.  To change the value,
press and release the active mouse button while the pointer
is inside the ToggleButton.  This action
also causes this widget to be disarmed.
For this callback, the reason is \*LXmCR_VALUE_CHANGED\*O.
.LI "\*LXmNvisibleWhenOff\*O"
Indicates that the toggle indicator is visible in the unselected state when
the Boolean value is True.
When the ToggleButton is in a menu, the default value is False.
When the ToggleButton is in a RadioBox, the default value is True.
.LE 
.SS "Inherited Resources"
ToggleButton inherits behavior and resources from the following
superclasses.  For a complete description of each resource, refer to the
man page for that superclass.
.PP
.wH .in 0 
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmLabel Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNaccelerator	NULL	CSG
\ \ \ \ \ \ XmCAccelerator	\ \ \ \ \ \ \ String
_
XmNacceleratorText	NULL	CSG
\ \ \ \ \ \ XmCAcceleratorText	\ \ \ \ \ \ \ XmString
_
XmNalignment	dynamic	CSG
\ \ \ \ \ \ XmCAlignment	\ \ \ \ \ \ \ unsigned char
_
XmNfontList	dynamic	CSG
\ \ \ \ \ \ XmCFontList	\ \ \ \ \ \ \ XmFontList
_
XmNlabelInsensitivePixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCLabelInsensitivePixmap	\ \ \ \ \ \ \ Pixmap
_
XmNlabelPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCLabelPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNlabelString	dynamic	CSG
\ \ \ \ \ \ XmCXmString	\ \ \ \ \ \ \ XmString
_
XmNlabelType	XmSTRING	CSG
\ \ \ \ \ \ XmCLabelType	\ \ \ \ \ \ \ unsigned char
_
XmNmarginBottom	dynamic	CSG
\ \ \ \ \ \ XmCMarginBottom	\ \ \ \ \ \ \ Dimension
_
XmNmarginHeight	2	CSG
\ \ \ \ \ \ XmCMarginHeight	\ \ \ \ \ \ \ Dimension
_
XmNmarginLeft	dynamic	CSG
\ \ \ \ \ \ XmCMarginLeft	\ \ \ \ \ \ \ Dimension
_
XmNmarginRight	0	CSG
\ \ \ \ \ \ XmCMarginRight	\ \ \ \ \ \ \ Dimension
_
XmNmarginTop	dynamic	CSG
\ \ \ \ \ \ XmCMarginTop	\ \ \ \ \ \ \ Dimension
_
XmNmarginWidth	2	CSG
\ \ \ \ \ \ XmCMarginWidth	\ \ \ \ \ \ \ Dimension
_
.wH .tH
XmNmnemonic	NULL	CSG
\ \ \ \ \ \ XmCMnemonic	\ \ \ \ \ \ \ KeySym
_
XmNmnemonicCharSet	XmFONTLIST_DEFAULT_TAG	CSG
\ \ \ \ \ \ XmCMnemonicCharSet	\ \ \ \ \ \ \ String
_
XmNrecomputeSize	True	CSG
\ \ \ \ \ \ XmCRecomputeSize	\ \ \ \ \ \ \ Boolean
_
XmNstringDirection	dynamic	CSG
\ \ \ \ \ \ XmCStringDirection	\ \ \ \ \ \ \ XmStringDirection
_
.TE
.\" NROFF HACK END
.wH .in  
.PP
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
XmPrimitive Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNbottomShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCBottomShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNbottomShadowPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCBottomShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNforeground	dynamic	CSG
\ \ \ \ \ \ XmCForeground	\ \ \ \ \ \ \ Pixel
_
XmNhelpCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNhighlightColor	dynamic	CSG
\ \ \ \ \ \ XmCHighlightColor	\ \ \ \ \ \ \ Pixel
_
XmNhighlightOnEnter	False	CSG
\ \ \ \ \ \ XmCHighlightOnEnter	\ \ \ \ \ \ \ Boolean
_
XmNhighlightPixmap	dynamic	CSG
\ \ \ \ \ \ XmCHighlightPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNhighlightThickness	2	CSG
\ \ \ \ \ \ XmCHighlightThickness	\ \ \ \ \ \ \ Dimension
_
.wH .tH
XmNnavigationType	XmNONE	CSG
\ \ \ \ \ \ XmCNavigationType	\ \ \ \ \ \ \ XmNavigationType
_
XmNshadowThickness	dynamic	CSG
\ \ \ \ \ \ XmCShadowThickness	\ \ \ \ \ \ \ Dimension
_
XmNtopShadowColor	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowColor	\ \ \ \ \ \ \ Pixel
_
XmNtopShadowPixmap	dynamic	CSG
\ \ \ \ \ \ XmCTopShadowPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNtraversalOn	True	CSG
\ \ \ \ \ \ XmCTraversalOn	\ \ \ \ \ \ \ Boolean
_
XmNunitType	dynamic	CSG
\ \ \ \ \ \ XmCUnitType	\ \ \ \ \ \ \ unsigned char
_
XmNuserData	NULL	CSG
\ \ \ \ \ \ XmCUserData	\ \ \ \ \ \ \ XtPointer
_
.TE
.\" NROFF HACK END
.PP
.wH .in 0 
.\" NROFF HACK START
.TS
center ;
CB ss
lB lB lB
lB lB lB
l l l.
Core Resource Set
_
Name	Default	Access
\ \ \ \ \ \ Class	\ \ \ \ \ \ Type
_
_
XmNaccelerators	dynamic	CSG
\ \ \ \ \ \ XmCAccelerators	\ \ \ \ \ \ \ XtAccelerators
_
XmNancestorSensitive	dynamic	G
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNbackground	dynamic	CSG
\ \ \ \ \ \ XmCBackground	\ \ \ \ \ \ \ Pixel
_
XmNbackgroundPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderColor	XtDefaultForeground	CSG
\ \ \ \ \ \ XmCBorderColor	\ \ \ \ \ \ \ Pixel
_
XmNborderPixmap	XmUNSPECIFIED_PIXMAP	CSG
\ \ \ \ \ \ XmCPixmap	\ \ \ \ \ \ \ Pixmap
_
XmNborderWidth	0	CSG
\ \ \ \ \ \ XmCBorderWidth	\ \ \ \ \ \ \ Dimension
_
XmNcolormap	dynamic	CG
\ \ \ \ \ \ XmCColormap	\ \ \ \ \ \ \ Colormap
_
XmNdepth	dynamic	CG
\ \ \ \ \ \ XmCDepth	\ \ \ \ \ \ \ int
_
XmNdestroyCallback	NULL	C
\ \ \ \ \ \ XmCCallback	\ \ \ \ \ \ \ XtCallbackList
_
XmNheight	dynamic	CSG
\ \ \ \ \ \ XmCHeight	\ \ \ \ \ \ \ Dimension
_
XmNinitialResourcesPersistent	True	C
\ \ \ \ \ \ XmCInitialResourcesPersistent	\ \ \ \ \ \ \ Boolean
_
XmNmappedWhenManaged	True	CSG
\ \ \ \ \ \ XmCMappedWhenManaged	\ \ \ \ \ \ \ Boolean
_
XmNscreen	dynamic	CG
\ \ \ \ \ \ XmCScreen	\ \ \ \ \ \ \ Screen *
_
.wH .tH
XmNsensitive	True	CSG
\ \ \ \ \ \ XmCSensitive	\ \ \ \ \ \ \ Boolean
_
XmNtranslations	dynamic	CSG
\ \ \ \ \ \ XmCTranslations	\ \ \ \ \ \ \ XtTranslations
_
XmNwidth	dynamic	CSG
\ \ \ \ \ \ XmCWidth	\ \ \ \ \ \ \ Dimension
_
XmNx	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
XmNy	0	CSG
\ \ \ \ \ \ XmCPosition	\ \ \ \ \ \ \ Position
_
.TE
.\" NROFF HACK END
.wH .in  
.SS "Callback Information"
A pointer to the following structure is passed to each callback:
.sS
.iS
.ta .25i 1.50i
typedef struct
{
	int	\*Vreason\*L;
	\*LXEvent	\*V* event\*L;
	\*Lint	\*Vset\*L;
} XmToggleButtonCallbackStruct;
.iE
.sE
.wH .fi
.VL .75i 
.LI "\*Vreason\*O"
Indicates why the callback was invoked
.LI "\*Vevent\*O"
Points to the \*LXEvent\*O that triggered the callback
.LI "\*Vset\*O"
Reflects the ToggleButton's current state when the callback occurred, either
True (selected) or False (unselected)
.LE 
.SS "Translations"
.ne 12
XmToggleButton includes translations from Primitive.
Additional XmToggleButton translations for buttons not in a
menu system are listed below.
These translations may not directly correspond to a
translation table.
.PP 
Note that altering translations in \*L#override\*O
or \*L#augment\*O mode is undefined.
.sp
.iS
.ta 1.5i
BDragPress:	ProcessDrag()
BSelect Press:	Arm()
BSelect Release:	Select()
	Disarm()
KHelp:	Help()
KSelect:	ArmAndActivate()
.wH .fi
.iE
.PP 
XmToggleButton inherits menu traversal translations
from XmLabel.
Additional XmToggleButton translations for ToggleButtons in a
menu system are listed below.
In a Popup menu system, \*LBMenu\*O also performs the \*LBSelect\*O
actions.
These translations may not directly correspond to a translation table.
.sp
.iS
.ta 1.5i
BSelect Press:	BtnDown()
BSelect Release:	BtnUp()
KHelp:	Help()
KActivate:	ArmAndActivate()
KSelect:	ArmAndActivate()
MAny KCancel:	MenuShellPopdownOne()
.wH .fi
.iE
.PP
.SS "Action Routines"
The XmToggleButton action routines are described below:
.VL
.LI "\*LArm()\*O:"
If the button was previously unset, this action does the following:
If \*LXmNindicatorOn\*O is True, it draws the indicator shadow so that
the indicator looks pressed; if \*LXmNfillOnSelect\*O is True, it fills
the indicator with the color specified by \*LXmNselectColor\*O.
If \*LXmNindicatorOn\*O is False, it draws the
button shadow so that the
button looks pressed.
If \*LXmNlabelType\*O is \*LXmPIXMAP\*O, the \*LXmNselectPixmap\*O is
used as the button face.
Calls the \*LXmNarmCallback\*O callbacks.
.ne 8
.sp
If the button was previously set, this action does the following:
If both \*LXmNindicatorOn\*O and \*LXmNvisibleWhenOff\*O are True, it
draws the indicator shadow so that the indicator looks raised; if
\*LXmNfillOnSelect\*O is True, it fills the indicator with the
background color.
If \*LXmNindicatorOn\*O is False, it draws the button shadow so that the
button looks raised.
If \*LXmNlabelType\*O is \*LXmPIXMAP\*O, the \*LXmNlabelPixmap\*O is
used as the button face.
Calls the \*LXmNarmCallback\*O callbacks.
.LI "\*LArmAndActivate()\*O:"
If the ToggleButton was previously set, unsets it; if the ToggleButton
was previously unset, sets it.
.sp
In a menu, does the following:
Unposts all menus in the menu hierarchy.
Unless the button is already armed,
calls the \*LXmNarmCallback\*O callbacks.
Calls the \*LXmNvalueChangedCallback\*O and
\*LXmNdisarmCallback\*O callbacks.
.sp
Outside a menu, if the button was previously unset, this action does the
following:
If \*LXmNindicatorOn\*O is True, it draws the indicator shadow so that
the indicator looks pressed; if \*LXmNfillOnSelect\*O is True, it fills
the indicator with the color specified by
\*LXmNselectColor\*O.
If \*LXmNindicatorOn\*O is False, it draws the button shadow so that the
button looks pressed.
If \*LXmNlabelType\*O is \*LXmPIXMAP\*O, the \*LXmNselectPixmap\*O is
used as the button face.
Calls the \*LXmNarmCallback\*O, \*LXmNvalueChangedCallback\*O, and
\*LXmNdisarmCallback\*O callbacks.
.sp
Outside a menu, if the button was previously set, this action does the
following:
If both \*LXmNindicatorOn\*O and \*LXmNvisibleWhenOff\*O are True, it
draws the indicator shadow so that the indicator looks raised; if
\*LXmNfillOnSelect\*O is True, it fills the indicator with the
background color.
If \*LXmNindicatorOn\*O is False, it draws the button shadow so that the
button looks raised.
If \*LXmNlabelType\*O is \*LXmPIXMAP\*O, the \*LXmNlabelPixmap\*O is
used as the button face.
Calls the \*LXmNarmCallback\*O, \*LXmNvalueChangedCallback\*O, and
\*LXmNdisarmCallback\*O callbacks.
.LI "\*LBtnDown()\*O:"
This action unposts any menus posted by the ToggleButton's parent menu,
disables keyboard traversal for the menu, and enables mouse traversal
for the menu.
It draws the shadow in the armed state
and, unless the button is already armed, calls the \*LXmNarmCallback\*O
callbacks.
.LI "\*LBtnUp()\*O:"
This action unposts all menus in the menu hierarchy.
If the ToggleButton was previously set, unsets it; if the ToggleButton
was previously unset, sets it.
It calls the \*LXmNvalueChangedCallback\*O callbacks and then the
\*LXmNdisarmCallback\*O callbacks.
.LI "\*LDisarm()\*O:"
Calls the callbacks for \*LXmNdisarmCallback\*O.
.LI "\*LHelp()\*O:"
In a Pulldown or Popup MenuPane, unposts all menus in the menu hierarchy
and restores keyboard focus to the widget that had the focus before
the menu system was entered.
Calls the callbacks for \*LXmNhelpCallback\*O if any exist.
If there are no help callbacks for this widget, this action calls the
help callbacks for the nearest ancestor that has them.
.LI "\*LMenuShellPopdownOne()\*O:"
In a toplevel Pulldown MenuPane from a MenuBar, unposts the menu,
disarms the MenuBar CascadeButton and the MenuBar, and restores keyboard
focus to the widget that had the focus before the MenuBar was
entered.
In other Pulldown MenuPanes, unposts the menu.
.sp
In a Popup MenuPane, unposts the menu and restores keyboard focus to the
widget from which the menu was posted.
.LI "\*LProcessDrag()\*O:"
Drags the contents of a ToggleButton label, identified by
pressing \*LBDrag\*O.  This action creates a DragContext object
whose \*LXmNexportTargets\*O resource is set to "COMPOUND_TEXT" for
a label type of \*LXmSTRING\*O; otherwise, "PIXMAP" if the
label type is \*LXmPIXMAP\*O.  This action is undefined for
ToggleButtons used in a menu system.
.nL
.ne 6
.LI "\*LSelect()\*O:"
If the pointer is within the button, takes the following actions:
If the button was previously unset, sets it; if the button was
previously set, unsets it.
Calls the \*LXmNvalueChangedCallback\*O callbacks.
.LE
.SS "Additional Behavior"
This widget has the additional behavior described below:
.VL
.LI "\*L<EnterWindow>\*O:"
In a menu, if keyboard traversal is enabled, this action does nothing.
Otherwise, it draws the shadow in the armed state and calls the
\*LXmNarmCallback\*O callbacks.
.sp
If the ToggleButton is not in a menu and the cursor leaves and then
reenters the ToggleButton's window while the button is pressed, this
action restores the button's armed appearance.
.LI "\*L<LeaveWindow>\*O:"
In a menu, if keyboard traversal is enabled, this action does nothing.
Otherwise, it draws the shadow in the unarmed state and calls the
\*LXmNdisarmCallback\*O callbacks.
.sp
If the ToggleButton is not in a menu and the cursor leaves the
ToggleButton's window while the button is pressed, this action restores
the button's unarmed appearance.
.LE
.SS "Virtual Bindings"
The bindings for virtual keys are vendor specific.
For information about bindings for virtual buttons and keys, see \*LVirtualBindings(3X)\*O.
.nL
.ne 15
.SH RELATED INFORMATION
.na
\*LCore(3X)\*O,
\*LXmCreateRadioBox(3X)\*O,
\*LXmCreateToggleButton(3X)\*O, \*LXmLabel(3X)\*O,
\*LXmPrimitive(3X)\*O, \*LXmRowColumn(3X)\*O, \*LXmToggleButtonGetState(3X)\*O,
and \*LXmToggleButtonSetState(3X)\*O.
.ad
.EQ
delim off
.EN

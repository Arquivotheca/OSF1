.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: msem_init.3,v $ $Revision: 3.2.2.2 $ (DEC) $Date: 1992/05/18 13:27:35 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\"
.\"
.TH msem_init 3
.SH NAME
\*Lmsem_init\*O \- Initializes a semaphore in a mapped file or shared memory region
.SH LIBRARY
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS 
.sS
\*L#include <sys/mman.h>\*O
.sp .4v
\*Lmsemaphore \(**msem_init (\*O
.nL
	\*Lmsemaphore \(**\*Vsem\*O,\*L
.nL
	int \*Vinitial_value \*L);
.sE
.SH PARAMETERS
.\"from TP "  
.VL 
.LI "\*Vsem\*O"
Points to an
\*Lmsemaphore\*O
structure in which the
state of the semaphore is stored.
.\"from TP "  
.LI "\*Vinitial_value\*O" 
Determines whether the semaphore is locked or unlocked at allocation.
.LE 
.SH DESCRIPTION
.iX "msem_init function"
.iX "semaphore" "initializing in mapped file"
.iX "semaphore" "initializing in shared memory region"
.iX "mapped file" "initializing semaphore in"
.iX "shared memory region" "initializing semaphore in"
.PP 
The
\*Lmsem_init(\|)\*O
function allocates a new binary semaphore and initializes the state of
the new semaphore.
.PP 
If the
\*Vinitial_value\*O
parameter is MSEM_LOCKED, the new semaphore is
initialized in the locked state.  If the
\*Vinitial_value\*O
parameter is
MSEM_UNLOCKED, the new semaphore is initialized in the
unlocked state.
.PP 
The
\*Lmsemaphore\*O
structure is located within a mapped file or shared memory
region created
by a successful call to the
\*Lmmap(\|)\*O
function
and having both read and write access.
.PP 
If a semaphore is created in a mapped file region, any reference by
a process which has mapped the same file, using a
\*L(struct msemaphore *)\*O
pointer which resolves to the same file offset, is taken as
a reference
to the same semaphore.  If a semaphore is created in an anonymous
shared memory region, any reference by a process which shares the same
region, using a \*L(struct msemaphore *)\*O pointer which resolves to the
same offset from the start of the region, is taken as
a reference to the
same semaphore.
.PP 
Any previous semaphore state stored in the
\*Lmsemaphore\*O
structure is
ignored and overwritten.
.SH NOTES
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Trial use
.LE
.SH RETURN VALUES
.PP 
Upon successful completion,
the
\*Lmsem_init(\|)\*O
function returns a pointer to the initialized
\*Lmsemaphore\*O
structure.  On error, the
\*Lmsem_init(\|)\*O
function returns null and sets
\*Lerrno\*O
to indicate the error.
.SH ERRORS
.PP 
If the
\*Lmsem_init(\|)\*O
function fails,
\*Lerrno\*O
may be set to one of the following values:
.\"from TP 1i"  
.VL 1i
.LI "[EINVAL]"
The
\*Vinitial_value\*O
parameter is not valid.
.\"from TP 1i"  
.LI "[ENOMEM]" 
A new semaphore could not be created.
.LE 
.SH RELATED INFORMATION
.PP 
Functions:
\*Lmmap\*O(2),
\*Lmsem_lock\*O(3),
\*Lmsem_remove\*O(3),
\*Lmsem_unlock\*O(3)
.iX "msem_init function"
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\" 
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\" 
.\" 
.\" HISTORY
.\" 
.\" @(#)$RCSfile: printf.3,v $ $Revision: 3.2.7.4 $ (DEC) $Date: 1993/09/21 13:42:49 $
.\" 
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.TH printf 3
.SH NAME
.PP
\*Lprintf\*O, \*Lfprintf\*O, \*Lsprintf\*O \-  Print formatted output
.SH LIBRARY
.PP
Standard C Library (\*Llibc.so\*O, \*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
\*L#include <stdio.h>\*O
.PP
\*Lint printf(\*O
.nL
        \*Lconst char *\*Vformat
.nL
        \*O[\*L,\*Vvalue\*O]\|.\|.\|.\*L);\*O
.PP
\*Lint fprintf(\*O
.nL
        \*LFILE *\*Vstream\*L,
.nL
        \*Lconst char *\*Vformat
.nL
	\*O[\*L,\*Vvalue\*O]\|.\|.\|.\*L);\*O
.PP
\*Lint sprintf(\*O
.nL
        \*Lchar *\*Vstring\*L,
.nL
        \*Lconst char *\*Vformat
.nL
        \*O[\*L,\*Vvalue\*O]\|.\|.\|.\*L);
.sE
.SH PARAMETERS
.PP
.VL
.LI "\*Vformat\*O"
Specifies a character string combining literal characters with conversion
specifications.
.LI "\*Vvalue\*O"
Specifies the data to be converted according to the
\*Vformat\*O parameter.
.LI "\*Vstream\*O"
Points to a \*LFILE\*O structure specifying an open stream to which
converted values will be written.
.LI "\*Vstring\*O"
Points to a character array in which the converted values will be
stored.
.LE
.SH DESCRIPTION
.PP
.iX "printf function"
.iX "fprintf function"
.iX "sprintf function"
.iX "printing output"
.iX "formatting output"
.iX "output" "printing and formatting"
The \*Lprintf(\|)\*O function converts, formats, and writes its
\*Vvalue\*O parameters, under control of the \*Vformat\*O parameter,
to the standard output stream \*Lstdout\*O.
.PP
The \*Lfprintf(\|)\*O function converts, formats, and writes
its \*Vvalue\*O parameters, under control of the \*Vformat\*O
parameter, to the output stream specified by the \*Vstream\*O parameter.
.PP
The \*Lsprintf(\|)\*O function converts, formats, and stores
its \*Vvalue\*O parameters, under control of the \*Vformat\*O
parameter, into consecutive bytes starting at the address specified
by the \*Vstring\*O parameter. The \*Lsprintf(\|)\*O function
places a null character \e0 at the end.  You must
ensure that enough storage space is available to contain the formatted
string.
.PP
The \*Vformat\*O parameter is a character string that
contains two types of objects:
.ML
.LI
Literal characters, which are copied to the output stream.
.LI
Conversion specifications, each of which causes zero or more items
to be fetched from the \*Vvalue\*O parameter list.
.LE
.PP
If there are not enough items for \*Vformat\*O in the
\*Vvalue\*O parameter list, the results are unpredictable. If more \*Vvalue\*Os
remain after the entire \*Vformat\*O has been processed,
they are ignored.
.SS "Conversion Specifications"
.if n .PP
Each conversion specification in the \*Vformat\*O parameter
has the following syntax:
.ML
.LI
A \*L%\*O (percent sign).
.IP
The \*Lprintf(\|)\*O
functions can handle a format string that enables the system
to process elements of the parameter list in variable order. In such
a case, the normal conversion character \*L%\*O (percent sign) is replaced
by \*L%\*Vdigit\*L$\*O, where \*Vdigit\*O is a decimal number in the range
from 1 to \*LNL_ARGMAX\*O. Conversion is then applied to the specified
argument, rather than
to the next unused argument.  This feature provides
for the definition of format strings in an order
appropriate to specific languages.  When variable ordering
is used, the \*L*\*O (asterisk) specification for
field width in precision is replaced by \*L*\*Vdigit\*L$\*O.  If the
variable ordering feature is used, it must be specified for all conversions.
.LI
Zero or more flags that modify the
meaning of the conversion specification. The flag characters
and their meanings are as follows:
.VL
.LI "\*L-\*O"
Left align within the field the result of the conversion.
.LI "\*L+\*O"
Begin the result of a signed conversion with a sign (+ or -).
.LI "(space)"
Prefix a space character to the result if the first
character of a signed conversion is not a sign. If both the (space)
and \*L+\*O flags appear, the (space) flag is ignored.
.LI "\*L#\*O"
Convert the value to an alternative form.
For \*Lo\*O conversion, the function increases the precision to force the
first digit of the result to be a 0 (zero). For \*Lx\*O and \*LX\*O
conversions, a nonzero result has \*L0x\*O or \*L0X\*O prefixed to it. For
\*Le\*O, \*LE\*O, \*Lf\*O, \*Lg\*O, and \*LG\*O conversions, the result
always contains
a radix character, even if no digits follow it. For \*Lg\*O and \*LG\*O
conversions, trailing zeros are not removed from the result.
For \*Lc\*O, \*LC\*O, \*Ld\*O, \*Li\*O,
\*Ls\*O, \*LS\*O, and \*Lu\*O conversions, the flag has no effect.
.LI "\*L0\*O"
Pad to field width using leading zeros (following any
indication of sign or base) for \*Ld\*O, \*Li\*O, \*Lo\*O, \*Lu\*O,
\*Lx\*O, \*LX\*O, \*Le\*O, \*LE\*O, \*Lf\*O, \*Lg\*O,
and \*LG\*O conversions; no space padding is performed. If the \*L0\*O
and \*L-\*O (dash) flags both appear, the \*L0\*O flag is ignored.
For \*Ld\*O, \*Li\*O, \*Lo\*O \*Lu\*O, \*Lx\*O, and
\*LX\*O conversions, if a precision is specified, the \*L0\*O flag is
also ignored.  For other conversions, the behavior is undefined.
.LE
.LI
An optional decimal digit string that specifies the minimum field
width. If the converted value has fewer characters than the field
width, the field is padded on the left to the length specified by
the field width. If the left-adjustment flag is specified,
the field is padded on the right.
.IP
A field width can be indicated
by an * (asterisk) instead of a digit string. In this case,
an integer (\*Lint\*O) \*Vvalue\*O parameter supplies the field width.
The \*Vvalue\*O parameter converted for
output is not fetched until the conversion letter is reached, so the
parameters specifying field width or precision
must appear before the value (if any) to be converted.
If the corresponding parameter has a negative value, it is treated as
a \*L-\*O left alignment option followed by a positive field width.
.\" Changed L to % in following line as per njo
When variable ordering with the \*L%\*Vdigit\*L$\*O format
is used, the \*L*\*O (asterisk) specification for
field width in precision is replaced by \*L*\*Vdigit\*L$\*O.
.LI
An optional precision. The precision is a \*L\&.\*O
(dot) followed by a decimal digit string. If no precision
is given, the decimal digit string is treated as 0 (zero).
The precision specifies:
.ML
.LI
The minimum number of digits to appear for the \*Ld\*O, \*Lu\*O,
\*Lo\*O, \*Lx\*O, or \*LX\*O conversions.
.LI
The number of digits to appear after the radix character for the
\*Le\*O, \*LE\*O, and \*Lf\*O conversions.
.LI
The maximum number of significant digits for the \*Lg\*O  and
\*LG\*O conversions.
.LI
The maximum number of bytes to be printed from a string in
the \*Ls\*O or the \*LS\*O conversion.
.LE
.IP
A field precision can be indicated
by an \*L*\*O (asterisk) instead of a digit string. In this case,
an integer (\*Lint\*O) \*Vvalue\*O parameter supplies the field
precision. The \*Vvalue\*O parameter converted for
output is not fetched until the conversion letter is reached, so the
parameters specifying field width or precision
must appear before the value (if any) to be converted.
If the value of the corresponding parameter is negative, the value is treated
as if the precision had not been specified.
.\" Changed L to % in following line as per njo.
When variable ordering with the \*L%\*Vdigit\*L$\*O format
is used, the \*L*\*O (asterisk) specification for
field width in precision is replaced by \*L*\*Vdigit\*L$\*O.
.LI
.\" Removed reference to L in following line as per njo
An optional \*Lh\*O or \*Ll\*O indicating the size of the
argument corresponding to the following
integer or floating-point conversion specifier.
An \*Lh\*O followed by a \*Ld\*O, \*Li\*O, \*Lo\*O, \*Lu\*O, \*Lx\*O,
or \*LX\*O conversion specifier indicates that the argument will be
treated as a \*Lshort int\*O or \*Lunsigned short int\*O. An \*Lh\*O
followed by a \*Ln\*O indicates that the argument will be treated as a
pointer to a \*Lshort int\*O.
An \*Ll\*O followed by a \*Ld\*O, \*Li\*O, \*Lo\*O, \*Lu\*O, \*Lx\*O,
or \*LX\*O conversion specifier indicates that the argument will be
treated as a \*Llong int\*O or \*Lunsigned long int\*O. An \*Ll\*O
followed by a \*Ln\*O indicates that the argument will be treated as a
pointer to a \*Llong int\*O.
.\" Removed following lines as per njo
.\" An \*LL\*O followed by a \*Le\*O, \*LE\*O, \*Lf\*O, \*Lg\*O, or
.\" \*LG\*O indicates that the argument will be treated as a \*Llong double\*O.
.LI
A character that indicates the type of conversion to be applied:
.VL
.LI "\*L%\*O"
Performs no conversion. Prints \*L%\*O.
.LI "\*Ld\*O or \*Li\*O"
Accepts an integer (\*Lint\*O) \*Vvalue\*O and converts it
to signed decimal notation. The precision specifies the minimum number
of digits to appear. If the value being converted can be represented
in fewer digits, it is expanded with leading zeros. The default precision
is 1. The result of converting a 0 (zero) value with a precision of
0 (zero) is a null string. Specifying a field width
with a 0 (zero) as a leading character causes the field width value
to be padded with leading zeros.
.LI "\*Lu\*O"
Accepts an integer (\*Lint\*O) \*Vvalue\*O and converts it to
unsigned decimal notation. The precision specifies the minimum
number of digits to appear. If the value being converted can be represented
in fewer digits, it is expanded with leading zeros. The default precision
is 1. The result of converting a 0 (zero) value with a precision
of 0 (zero) is a null string. Specifying a field width with
a 0 (zero) as a leading character causes the field width value to be padded
with leading zeros.
.LI "\*Lo\*O"
Accepts an integer (\*Lint\*O) \*Vvalue\*O and converts it to
unsigned octal notation. The precision specifies the minimum
number of digits to appear. If the value being converted can be represented
in fewer digits, it is expanded with
leading zeros. The default precision is 1.
The result of converting a 0 (zero) value with a precision of 0 (zero) is
a null string. Specifying a field width with a 0 (zero) as a
leading character causes the field width value to be padded with leading
zeros. An octal value for field width is not implied.
.LI "\*Lx, X\*O"
Accepts an integer (\*Lint\*O) \*Vvalue\*O and converts it
to unsigned hexadecimal notation. The letters
.\" removed rq as per njo
.\" \*Lrqabcdef\*O 
\*Labcdef\*O
are used for
the \*Lx\*O conversion and the letters \*LABCDEF\*O are used for the
\*LX\*O conversion. The precision specifies the minimum number
digits to appear. If the value being converted can be represented
in fewer digits, it is expanded with leading zeros. The default precision
is 1. The result of converting a 0 (zero) value with a precision
of 0 (zero) is a null string. Specifying a field width with
a 0 (zero) as a leading character causes the field width value
to be padded with leading zeros.
.LI "\*Lf\*O"
Accepts a \*Lfloat\*O or \*Ldouble\*O \*Vvalue\*O
and converts it to decimal notation in the format \%[-]\*Vddd.ddd\*O.
The number of digits after the radix character is equal to the precision
specification. If no precision is specified, six digits are output.
If the precision is 0 (zero), no radix character appears (unless the
\*L#\*O flag is specified).
If a radix character is output, at least one digit is output before it.
The value is rounded to the appropriate number of digits.
.LI "\*Le\*O or \*LE\*O"
Accepts a \*Lfloat\*O or \*Ldouble\*O \*Vvalue\*O and converts
it to the exponential form \%[-]\*Vd.ddd\*Le\*O+/-\*Vdd\*O.
There is one digit before the radix character and the number of digits
after the radix character is equal to the precision specification. If
no precision is specified, six digits are output.
If the precision is 0 (zero), no radix character
appears (unless the \*L#\*O flag is specified). The \*LE\*O conversion
character produces a number with \*LE\*O instead of \*Le\*O
before the exponent.  The exponent always contains at least two digits.
If the value is 0 (zero), the exponent is 0 (zero).
.LI "\*Lg\*O or \*LG\*O"
Accepts a \*Lfloat\*O or \*Ldouble\*O \*Vvalue\*O and
converts it in the style of the \*Le\*O, \*LE\*O, or \*Lf\*O
conversion characters, with the precision specifying
the number of significant digits. Trailing zeros are removed from
the result. A radix character appears only if it is followed by a
digit (except that the radix character always appears if
the \*L#\*O flag is specified).
The style used depends on the value converted. Style \*Le\*O (\*LE\*O,
if \*LG\*O is the flag used) results only if the exponent resulting
from the conversion is less than -4, or if the exponent is greater or equal
to the precision.
.LI "\*Lc\*O"
Accepts and prints an integer (\*Lint\*O) \*Vvalue\*O converted to an
\*Lunsigned char\*O.
.LI "\*LC\*O"
Accepts a \*Lwchar_t\*O \*Vvalue\*O, converts it to an array of bytes
containing a multibyte character, and
prints the character. If a minimum field width is specified and the multibyte
character occupies fewer bytes than the specified width, the multibyte
character is padded with space characters to the specified width.
.LI "\*Ls\*O"
Accepts a pointer to an array of \*Lchar\*O type. Bytes from the array
are printed until a null character is encountered or the number of
characters indicated by the precision is reached. If no precision is
specified, all characters up to the first null character are printed.
If the precision is not specified or is greater than the size of the
array, then the array must be terminated by a null byte.  If the
string pointer \*Vvalue\*O has a value of 0 (zero) or null, the
results are undefined.
.LI "\*LS\*O"
Accepts a pointer to an array of \*Lwchar_t\*O type.  Wide characters
from the array are converted to an array of bytes containing
multibyte characters and the multibyte
characters up to (but not including) the null character are printed.
If a precision is specified, then no more than the number of bytes
specified by the precision are printed. If the precision is not
specified or is greater than the size of the array of bytes, then the
array of wide characters must be terminated by a null wide character.
If a minimum field width is specified and the array of bytes occupy
fewer bytes than the specified width, the array is padded with space
characters to the specified width.
.LI "\*Lp\*O"
Accepts a pointer to void. The value of the pointer
is converted to a sequence of printable characters, the same as unsigned
.\" Begin Digital-specific information
.\" QAR 15479 fix: Added "long" and changed "x" to "lx" in following line
long hexadecimal (\*Llx\*O).
.\" End Digital-specific information
.LI "\*Ln\*O"
Accepts a pointer to an integer into which is written
the number of characters written to the output stream so far by this
call. No argument is converted.
.LE
.LE
.PP
If the result of a conversion is wider than the field width, the
field is expanded to contain the converted result. No truncation occurs.
However, a small precision can cause truncation
on the right.
.PP
The \*Le\*O, \*LE\*O, \*Lf\*O, and \*Lg\*O formats
represent the special floating-point values as follows:
.VL
.LI "Quiet NaN"
+NaNQ or -NaNQ
.LI "Signaling NaN"
+NaNS or -NaNS
.LI "+/-INF"
+INF or -INF
.LI "+/-0"
+0 or -0
.LE
.PP
The representation of the \*L+\*O (plus sign) depends on whether the
\*L+\*O or (space) formatting flag is specified.
.PP
All forms of the \*Lprintf(\|)\*O functions allow for the insertion of
a language-dependent radix character in the output string.
The radix character is defined by
\*Llanginfo\*O data in the program's locale (category \*LLC_NUMERIC\*O).
In the C locale, or in a locale where
the radix character is not defined,
the radix character defaults to \*L\&.\*O (period).
.PP
The \*Lst_ctime\*O and \*Lst_mtime\*O
fields of the file are marked for update between the successful
execution of the \*Lprintf(\|)\*O or \*Lfprintf(\|)\*O function
and the next successful completion of a call to one of the
following:
.ML
.LI
The \*Lfflush(\|)\*O
or \*Lfclose(\|)\*O function on the same stream
.LI
The \*Lexit(\|)\*O or \*Labort(\|)\*O function
.LE
.SH NOTES
.PP
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Full use.
.LE
.SH RETURN VALUES
.PP
Upon successful completion, each of these functions returns
the number of bytes in the output string.
Otherwise, a negative value is returned.
.PP
The value returned by the \*Lsprintf(\|)\*O function
does not include the final '\e0' (null) character.
.SH ERRORS
.PP
The \*Lprintf(\|)\*O or \*Lfprintf(\|)\*O functions fail if
either \*Vstream\*O is unbuffered or \*Vstream\*O's
buffer needed to be flushed and the function call caused an underlying
\*Lwrite(\|)\*O or \*Llseek(\|)\*O function to be invoked.
In addition, if the \*Lprintf(\|)\*O or \*Lfprintf(\|)\*O
function fails, \*Lerrno\*O is set to one of the following values:
.VL 1i
.LI "[EAGAIN]"
The \*LO_NONBLOCK\*O flag is set for the file descriptor
underlying \*Vstream\*O
and the process would be delayed in the write operation.
.LI "[EBADF]"
The file descriptor underlying \*Vstream\*O
is not a valid file descriptor open for writing.
.LI "[EFBIG]"
An attempt was made to write to a file that exceeds the
process's file size limit or the maximum file size.
.LI "[EILSEQ]"
An invalid wide character was detected.
.LI "[EINTR]"
The read operation was interrupted by a signal that was caught,
and no data was transferred.
.LI "[EIO]"
The implementation supports job control; the process is a member
of a background process group and is attempting to write to its
controlling terminal; \*LTOSTOP\*O is set;
the process is neither ignoring nor
blocking \*LSIGTTOU\*O; and the process group of the process is
orphaned.
This error may also be returned under implementation-defined conditions.
.LI "[ENOSPC]"
There was no free space remaining on the device containing
the file.
.LI "[EPIPE]"
An attempt was made to write to a pipe or FIFO that is not open
for reading by any process.
A \*LSIGPIPE\*O signal will also be sent to the process.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Lconv\*O(3),
\*Lecvt\*O(3),
\*Lputc\*O(3),
\*Lscanf\*O(3).
.EQ
delim off
.EN

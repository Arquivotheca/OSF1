.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: tcpdump.8,v $ $Revision: 1.1.2.9 $ (DEC) $Date: 1993/12/20 22:14:13 $
.\"
.\" Copyright (c) 1988, 1989, 1990, 1991, 1992
.\" The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that: (1) source code distributions
.\" retain the above copyright notice and this paragraph in its entirety, (2)
.\" distributions including binary code include the above copyright notice and
.\" this paragraph in its entirety in the documentation or other materials
.\" provided with the distribution, and (3) all advertising materials mentioning
.\" features or use of this software display the following acknowledgement:
.\" ``This product includes software developed by the University of California,
.\" Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
.\" the University nor the names of its contributors may be used to endorse
.\" or promote products derived from this software without specific prior
.\" written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
.\" WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\"
.TH tcpdump 8
.SH NAME
.PP
\*Ltcpdump\*O \- Dump traffic on a network
.SH SYNOPSIS
.iX "tcpdump"
.iX "network" "monitoring traffic"
.PP
.sS
\*L/usr/sbin/tcpdump\*O [\*L-deflnNOpqStvx\*O] [\*L-c \*Vcount\*O] [\*L-F\*Vfile\*O]
.nL
   [\*L-i\*Vinterface\*O] [\*L-r\*Vfile\*O] [\*L-s\*Vsnaplen\*O]
.nL
   [\*L-w\*Vfile\*O] \*Vexpression\*O
.sE
.SH FLAGS
.PP
.VL 4m
.LI "\*L-c\*O"
Exits after receiving \*Vcount\*O packets.
.LI "\*L-d\*O"
Dumps the compiled packet-matching code to standard output and stop.
.LI "\*L-e\*O"
Prints the link-level header on each dump line.
.LI "\*L-f\*O"
Prints `foreign' internet addresses numerically rather than symbolically.
.\"Removed by BAC - Inappropriate
.\"this option is intended to get around serious brain damage in
.\"Sun's yp server \(em usually it hangs forever translating non-local
.\"internet numbers).
.LI "\*L-F\*O"
Uses \*Vfile\*O as input for the filter expression.
Any additional expressions on the command line are ignored.
.LI "\*L-i\*O"
Listens on \*Vinterface\*O. If unspecified, \*Ltcpdump\*O searches the system
interface list for the lowest numbered, configured up interface (excluding
loopback). Ties are broken by choosing the earliest match.
.LI "\*L-l\*O"
Makes stdout line buffered.  This is useful if you want to see the data
while capturing it.
.\"  E.g.,
.\".br
.\"tcpdump\ \ \-l\ \ |\ \ tee dat
.\"``tcpdump\ \ \-l \ \ > dat\ \ &\ \ tail\ \ \-f\ \ dat''.
.LI "\*L-n\*O"
Does not convert addresses (for example, host addresses and port numbers) to
names.
.LI "\*L-N\*O"
Does not print domain name qualification of host names. For example,
with the \*L-N\*O flag, \*Ltcpdump\*O prints \*Lnic\*O instead of
\*Lnic.ddn.mil\*O.
.LI "\*L-O\*O"
Does not run the packet-matching code optimizer.  This is useful only
if you suspect a bug in the optimizer.
.LI "\*L-p\*O"
Does not put the interface into promiscuous mode.  Note the interface might be
in promiscuous mode for some other reason; therefore, \*L-p\*O
cannot be used as an abbreviation for
\*Lether host {\*Vlocalhost\*L} or broadcast\*O.
.LI "\*L-q\*O"
Quick (quiet) output.  Prints less protocol information so output
lines are shorter.
.LI "\*L-r\*O"
Reads packets from \*Vfile\*O (which was created with the \*L-w\*O option).
Standard input is used if a hyphen (\*L\-\*O) is used to specify \*Vfile\*O.
.LI "\*L-s\*O"
Displays \*Vsnaplen\*O bytes of data from each packet rather than the
default of 68 (with NIT, the minimum is 96).  The default of
68 bytes is adequate for IP, ICMP, TCP, and UDP, but may truncate protocol
information from name server and NFS packets (discussed later in this
reference page).  Packets truncated
because of a limited snapshot are indicated in the output with
``[|\*Vproto\*O]'', where \*Vproto\*O is the name of the protocol level at
which the truncation has occurred. Note: Taking larger snapshots both increases
the amount of time it takes to process packets and decreases the amount of
packet buffering.  This may cause packets to be lost.  You should limit
\*Vsnaplen\*O to the smallest number that will capture the needed protocol
information.
.LI "\*L-S\*O"
Prints absolute, rather than relative, TCP sequence numbers.
.LI "\*L-t\*O"
Does not print a timestamp on each dump line.
.LI "\*L-tt\*O"
Prints an unformatted timestamp on each dump line.
.LI "\*L-v\*O"
Prints slightly more verbose output.  For example, the time to live
and type of service information in an IP packet is printed.
.LI "\*L-vv\*O"
Prints even more verbose output.  For example, additional fields are
printed from NFS reply packets.
.LI "\*L-w\*O"
Writes the raw packets to \*Vfile\*O rather than parsing and printing
them.  They can later be printed with the \*L-r\*O option.
Standard output is used if a hyphen (\*L\-\*O) is used to specify \*Vfile\*O.
.LI "\*L-x\*O"
Prints each packet (minus its link level header) in hex.
The smaller of the entire packet or \*Vsnaplen\*O bytes is printed.
.LI "\*V expression\*O"
Selects the packets to dump.  If no \*Vexpression\*O
is given, all packets on the network are dumped.  Otherwise,
only packets for which \*Vexpression\*O is `true' are dumped.
.IP
The \*Vexpression\*O consists of one or more \*Vprimitives\*O.
Primitives usually consist of an \*Vid\*O (name or number) preceded by one or
more of the following qualifiers:
.VL 4m
.LI "\*Vtype\*O"
Defines the object to which the id name or number refers.
The following types are allowed: \*Lhost\*O, \*Lnet\*O, and \*Lport\*O.
For example:
.oS
host foo
net 128.3
port 20
.oE
If no \*Ltype\*O qualifier is specified, \*Lhost\*O is the default.
.LI "\*Vdir\*O"
Specifies a particular transfer direction to or from \*Vid\*O.
The following directions are allowed: \*Lsrc\*O, \*Ldst\*O, \*Lsrc or dst\*O,
and \*Lsrc and dst\*O. For example:
.oS
src foo
dst net 128.3
src or dst port 20
src and dst port 123
.oE
If no \*Ldir\*O qualifier is specified, \*Lsrc\*O or \*Ldst\*O is the default.
.LI "\*Vproto\*O"
Restricts the match to a particular protocol.  The following protocols are
are allowed: \*Lether\*O, \*Lfddi\*O, \*Lip\*O, \*Larp\*O, \*Lrarp\*O,
\*Ldecnet\*O, \*Llat\*O, \*Lmoprc\*O, \*Lmopdl\*O, \*Ltcp\*O, and
\*Ludp\*O. For example:
.oS
ether src foo
arp net 128.3
tcp port 21
.oE
If no \*Lproto\*O qualifier is specified, all protocols consistent with the
type are assumed.  For example, \*Lsrc foo\*O means (\*Lip\*O or \*Larp\*O or
\*Lrarp\*O) \*Lsrc foo\*O (except the latter is not legal syntax),
\*Lnet\*O bar means (\*Lip\*O or \*Larp\*O or \*Lrarp\*O) \*Lnet\*O
\*Lbar\*O, \*Lport 53\*O means (\*Ltcp\*O or \*Ludp\*O) \*Lport 53\*O.
.IP
The \*Lfddi\*O argument is an alias for \*Lether\*O; the parser treats them
identically as meaning ``the data link level used on the specified
network interface.''  FDDI headers contain Ethernet-like source
and destination addresses, and often contain Ethernet-like packet
types, so you can filter on these FDDI fields just as with the
analogous Ethernet fields.  FDDI headers also contain other fields,
but you cannot name them explicitly in a filter expression.
.LE
.IP
In addition to the above, there are some special `primitive' keywords
that do not follow the pattern:
\*Lgateway\*O, \*Lbroadcast\*O, \*Lless\*O, \*Lgreater\*O,
and arithmetic expressions.  All of these are described later in this
reference page.
.IP
More complex filter expressions are built up by using the words
\*Land\*O, \*Lor\*O, and \*Lnot\*O to combine primitives.  For example:
.oS
host foo and not port ftp and not port ftp-data
.oE
To save typing, identical qualifier lists can be omitted.  For example, the
following two lines are treated the same:
.oS
.ps -1
tcp dst port ftp or ftp-data or domain
tcp dst port ftp or tcp dst port ftp-data or tcp dst port domain
.ps +1
.oE
.IP
Allowable primitives are:
.VL 4m
.LI "\*Ldst host \*Vhost\*O"
True if the IP destination field of the packet is \*Vhost\*O,
which may be either an address or a name.
.LI "\*Lsrc host \*Vhost\*O"
True if the IP source field of the packet is \*Vhost\*O.
.LI "\*Lhost \*Vhost\*O"
True if either the IP source or destination of the packet is \*Vhost\*O.
The following keywords can precede any of these host expressions:
\*Lip\*O, \*Larp\*O, or \*Lrarp\*O. For example, the following examples are
equivalent:
.oS
ip host \*Vhost\*O
\*Lether proto \*V\\ip and host \*Vhost\*O
.oE
If \*Vhost\*O is a name with multiple IP addresses, each address
is checked for a match.
.LI "\*Lether dst \*Vehost\*O"
True if the Ethernet destination address is \*Vehost\*O.  \*VEhost\*O
may be either a name from \*L/etc/ethers\*O or a number (see
\*Lethers\*O(3) for numeric format).
.LI "\*Lether src \*Vehost\*O"
True if the Ethernet source address is \*Vehost\*O.
.LI "\*Lether host \*Vehost\*O"
True if either the Ethernet source or destination address is \*Vehost\*O.
.LI "\*Lgateway\*O \*Vhost\*O"
True if the packet used \*Vhost\*O as a gateway.  That is, the Ethernet
source or destination address was \*Vhost\*O but neither the IP source
nor the IP destination was \*Vhost\*O.  The \*Vhost\*O argument must
be a name and
must be found in both \*L/etc/hosts\*O and \*L/etc/ethers\*O.
.IP
The following expression is equivalent:
.oS
ether host \*Vehost \*Land not host \*Vhost\*O
.oE
You can use either names or numbers for \*Vhost\*O and \*Vehost\*O.
.LI "\*Ldst net \*Vnet\*O"
True if the IP destination address of the packet has a network
number of \*Vnet\*O, which may be either an address or a name.
.LI "\*Lsrc net \*Vnet\*O"
True if the IP source address of the packet has a network
number of \*Vnet\*O.
.LI "\*Lnet \*Vnet\*O"
True if either the IP source or destination address of the packet has a network
number of \*Vnet\*O.
.LI "\*Ldst port \*Vport\*O"
True if the packet is IP/TCP or IP/UDP and has a
destination port value of \*Vport\*O.
The \*Vport\*O can be a number or a name used in \*L/etc/services\*O (see
\*Ltcp\*O(7) and \*Ludp\*O(7)).
If a name is used, both the port
number and protocol are checked.  If a number or ambiguous name is used,
only the port number is checked.  (For example, \*Ldst port 513\*O prints
both TCP login service traffic and UDP who service traffic, and
\*Lport domain\*O prints both TCP/DOMAIN and UDP/DOMAIN traffic).
.LI "\*Lsrc port \*Vport\*O"
True if the packet has a source port value of \*Vport\*O.
.LI "\*Lport \*Vport\*O"
True if either the source or destination port of the packet is \*Vport\*O.
The following keywords can precede any of these port expressions:
\*Ltcp\*O or \*Ludp\*O. For example, the following example matches
only TCP packets.
.oS
tcp src port \*Vport\*O
.oE
.LI "\*Lless \*Vlength\*O"
True if the packet has a length less than or equal to \*Vlength\*O.
The following example is equivalent:
.oS
len <= \*Vlength\*O
.oE
.LI "\*Lgreater \*Vlength\*O"
True if the packet has a length greater than or equal to \*Vlength\*O.
The following example is equivalent:
.oS
len >= \*Vlength\*O.
.oE
.LI "\*Lip proto \*Vprotocol\*O"
True if the packet is an IP packet (see \*Lip\*O(7)) of protocol type
\*Vprotocol\*O. \*VProtocol\*O can be a number or one of the names
\*Vicmp\*O, \*Vudp\*O, \*Vnd\*O, or \*Vtcp\*O.
Note: the identifiers \*Vtcp\*O, \*Vudp\*O, and \*Vicmp\*O are also
keywords and must be escaped via backslash (\\), which is \\\\ in the C-shell.
.LI "\*Lether broadcast\*O"
True if the packet is an Ethernet broadcast packet.  The \*Vether\*O
keyword is optional.
.LI "\*Lip broadcast\*O"
True if the packet is an IP broadcast packet.  It checks for both
the all-zeroes and all-ones broadcast conventions, and looks up
the local subnet mask.
.LI "\*Lether multicast\*O"
True if the packet is an Ethernet multicast packet.  The \*Vether\*O
keyword is optional. This is shorthand for `\*Lether[0] & 1 != 0\*O'.
.LI "\*Lip multicast\*O"
True if the packet is an IP multicast packet.
.LI  "\*Lether proto \*Vprotocol\*O"
True if the packet is of \*Lether\*O type \*Vprotocol\*O.
The \*Vprotocol\*O argument can be a number or a name like
\*Vip\*O, \*Varp\*O, or \*Vrarp\*O.
Note these identifiers are also keywords
and must be escaped via backslash (\\).
(In the case of FDDI (for example, \*Lfddi protocol arp\*O), the
protocol identification comes from the 802.2 Logical Link Control
(LLC) header, which is usually layered on top of the FDDI header.
The \*Ltcpdump\*O utility assumes, when filtering on the protocol identifier,
that all FDDI packets include an LLC header, and that the LLC header
is in so-called SNAP format.)
.LI "\*Ldecnet src \*Vhost\*O"
True if the DECNET source address is \*Vhost\*O,
which may be an address of the form ``10.123'', or a DECNET host
name.  (DECNET host name support is only available on systems that are
configured to run DECNET.)
.LI "\*Ldecnet dst \*Vhost\*O"
True if the DECNET destination address is \*Vhost\*O.
.LI "\*Ldecnet host \*Vhost\*O"
True if either the DECNET source or destination address is
\*Vhost\*O.
.LI "\*Lip\*O, \*Larp\*O, \*Lrarp\*O, \*Ldecnet\*O"
Abbreviations for:
.oS
ether proto \*Vp\*O
.oE
.IP
Where \*Vp\*O is one of the above protocols.
.LI "\*Llat\*O, \*Lmoprc\*O, \*Lmopdl\*O"
Abbreviations for:
.oS
ether proto \*Vp\*O
.oE
Where \*Vp\*O is one of the above protocols.
Note: The \*Ltcpdump\*O utility does not currently know how to parse these
protocols.
.LI  "\*Ltcp\*O, \*Ludp\*O, \*Licmp\*O"
Abbreviations for:
.oS
ip proto \*Vp\*O
.oE
Where \*Vp\*O is one of the protocols listed earlier.
.LI  "\*Vexpr relop expr\*O"
True if the relation holds, where \*Vrelop\*O is >, <, >=, <=, =, or !=,
and \*Vexpr\*O is an arithmetic expression composed of integer constants
(expressed in standard C syntax), the normal binary operators
[+, -, *, /, &, |], a length operator, and special packet data accessors.
To access data inside the packet, use the following syntax:
.oS
\*Vproto\*O [ \*Vexpr\*O : \*Vsize\*O ]
.oE
The \*Vproto\*O variable is one of \*Lether, fddi,
ip, arp, rarp, tcp, udp,\*O or \*Licmp\*O, and
indicates the protocol layer for the index operation.
The byte offset, relative to the indicated protocol layer, is
given by \*Vexpr\*O.
The \*Vsize\*O variable is optional and indicates the number of bytes in the
field of interest; it can be either one, two, or four, and defaults to one.
The length operator, indicated by the keyword \*Llen\*O, gives the
length of the packet.
.IP
For example, `\*Lether[0] & 1 != 0\*O' catches all multicast traffic.
The expression `\*Lip[0] & 0xf != 5\*O'
catches all IP packets with options. The expression
`\*Lip[2:2] & 0x1fff = 0\*O'
catches only unfragmented datagrams and frag zero of fragmented datagrams.
This check is implicitly applied to the \*Ltcp\*O and \*Ludp\*O
index operations.
For instance, \*Ltcp[0]\*O always means the first
byte of the TCP \*Vheader\*O, and never means the first byte of an
intervening fragment.
.LE
.IP
Primitives may be combined using:
.ML
.LI
A parenthesized group of primitives and operators
(parentheses are special to the Shell and must be escaped).
.LI
Negation (\*L!\*O or \*Lnot\*O)
.LI
Concatenation (\*Land\*O)
.LI
Alternation (\*Lor\*O)
.LE
.IP
Negation has highest precedence. Alternation and concatenation have equal
precedence and associate left to right.  Note that explicit \*Land\*O tokens
(not juxtaposition) are required for concatenation.
.IP
If an identifier is given without a keyword, the most recent keyword
is assumed. For example, the following two examples are equivalent:
.oS
not host vs and ace
.sp
not host vs and host ace
.oE
However, the following example is not equivalent to the previous two:
.oS
not ( host vs or ace )
.oE
Expression arguments can be passed to \*Ltcpdump\*O as either a single argument
or as multiple arguments, whichever is more convenient.
Generally, if the expression contains shell metacharacters, it is
easier to pass it as a single, quoted argument.
Multiple arguments are concatenated with spaces before being parsed.
.LE
.SH DESCRIPTION
.PP
The \*Vtcpdump\*O utility prints out the headers of packets on a network
interface that match the boolean \*Vexpression\*O.
Your kernel must be configured with the packetfilter option.
(See \*Lpacketfilter\*O(7).) After kernel configuration,
any user can invoke \*Ltcpdump\*O once the superuser has enabled
promiscuous-mode operation using \*Lpfconfig\*O(8).
.SH RESTRICTIONS
.PP
To watch either outbound or inbound traffic,
you need to have enabled \*Lcopyall\*O mode using the \*Lpfconfig\*O
command. For example, \*Lpfconfig +c Ln0\*O.
.PP
Name server inverse queries are not dumped correctly: The (empty)
question section is printed rather than real query in the answer
section.
.PP
A packet trace that crosses a daylight saving time change produces
skewed time stamps (the time change is ignored).
.PP
Filter expressions that manipulate FDDI headers assume that all FDDI
packets are encapsulated Ethernet packets.  This is true for IP, ARP,
and DECNET Phase IV, but is not true for protocols such as ISO CLNS.
Therefore, the filter may inadvertently accept certain packets that
do not properly match the filter expression.
.SH EXAMPLES
.PP
To print all packets arriving at or departing from \*Vsundown\*O:
.oS
tcpdump host sundown
.oE
To print traffic between \*Vhelios\*O and either \*Vhot\*O or \*Vace\*O:
.oS
tcpdump host helios and \\( hot or ace \\)
.oE
Note that to ease typing complex expressions, you can enclose
expressions in single quotation marks (\*L` '\*O) to prevent the shell from
processing special characters.  For example, the previous example could
be entered as follows:
.oS
tcpdump `host helios and \\( hot or ace \\)'
.oE
To print all IP packets between \*Vace\*O and any host except \*Vhelios\*O:
.oS
tcpdump ip host ace and not helios
.oE
To print all traffic between local hosts and hosts at Berkeley:
.oS
tcpdump net ucb-ether
.oE
To print all FTP traffic through Internet gateway \*Vsnup\*O:
.oS
tcpdump 'gateway snup and (port ftp or ftp-data)'
.oE
To print traffic neither sourced from nor destined for local hosts
(if your network is connected to one other network by a gateway, the
following does not produce any results on your local network):
.oS
tcpdump ip and not net \*Vlocalnet\*O
.oE
To print the start and end packets (the SYN and FIN packets) of each
TCP conversation that involves a nonlocal host:
.oS
tcpdump 'tcp[13] & 3 != 0 and not src and dst net \*Vlocalnet\*L'\*O
.oE
To print IP packets longer than 576 bytes sent through gateway \*Vsnup\*O:
.oS
tcpdump 'gateway snup and ip[2:2] > 576'
.oE
To print IP broadcast or multicast packets that were not
sent via Ethernet broadcast or multicast:
.oS
tcpdump 'ether[0] & 1 = 0 and ip[16] >= 224'
.oE
To print all ICMP packets that are not echo requests or replies (that is, not
\*Lping\*O packets):
.oS
tcpdump 'icmp[0] != 8 and icmp[0] != 0'
.oE
.SH OUTPUT FORMAT
.PP
The output of the \*Ltcpdump\*O utility is protocol dependent.  The following
sections describe most of the formats and provide examples.
.SS Link Level Headers
.if n .PP
The \*L-e\*O option is used to print the link level header.
On Ethernets, the source and destination addresses, protocol,
and packet length are printed.
.PP
On FDDI networks, the  \*L-e\*O option causes the \*Ltcpdump\*O utility
to print the \*Lframe control\*O field, the source and destination addresses,
and the packet length.  (The \*Lframe control\*O field governs the
interpretation of the rest of the packet.  Normal packets (such
as those containing IP datagrams) are \*Lasync\*O packets, with a priority
value between 0 and 7; for example, \*Lasync4\*O.  Such packets
are assumed to contain an 802.2 Logical Link Control (LLC) packet;
the LLC header is printed if it is not an ISO datagram or a
so-called SNAP packet.
.PP
Note: The following description assumes familiarity with
the SLIP compression algorithm described in RFC 1144.
.PP
On SLIP links, a direction indicator (``I'' for inbound, ``O'' for outbound),
packet type, and compression information are printed.
.PP
The packet type is printed first.
The three types of packets are \*Vip\*O, \*Vutcp\*O, and \*Vctcp\*O.
No further link information is printed for \*Vip\*O packets.
.PP
For TCP packets, the connection identifier is printed after the type.
If the packet is compressed, its encoded header is printed.
The special cases are printed as
\*L*S+\*Vn\*O and \*L*SA+\*Vn\*O, where \*Vn\*O is the amount by which
the sequence number (or sequence number and acknowledgement) has changed.
If it is not a special case,
zero or more changes are printed.
A change is indicated by \*LU\*O (urgent pointer), \*LW\*O (window), \*LA\*O
(acknowledgement), \*LS\*O (sequence number), and \*LI\*O (packet ID),
followed by a delta (\*L+n\*O or \*L-n\*O), or a new value (\*L=n\*O).
Finally, the amount of data in the packet and compressed header length
are printed.
.PP
The following example shows an outbound compressed TCP packet,
with an implicit connection identifier; the value of the acknowledgement
has changed by 6, the sequence number by 49, and the packet ID by 6;
there are 3 bytes of data and 6 bytes of compressed header:
.oS
O ctcp * A+6 S+49 I+6 3 (6)
.oE
.SS ARP/RARP Packets
.if n .PP
ARP and RARP output shows the type of request and its arguments.  The
format is intended to be self explanatory.
The following example is taken from the start of an \*Lrlogin\*O from
host \*Vrtsg\*O to host \*Vcsam\*O:
.oS
arp who-has csam tell rtsg
arp reply csam is-at CSAM
.oE
The first line indicates that host \*Lrtsg\*O sent an ARP packet asking
for the Ethernet address of Internet host \*Lcsam\*O.  Host \*Lcsam\*O
replies with its Ethernet address (in this example, Ethernet addresses
are uppercase and Internet addresses in lowercase).
.PP
This would look less redundant if we had done \*Ltcpdump -n\*O:
.oS
arp who-has 128.3.254.6 tell 128.3.254.68
arp reply 128.3.254.6 is-at 02:07:01:00:01:c4
.oE
If you issue the \*Ltcpdump -e\*O command, the first packet is explicitly a
broadcast packet and the second is a point-to-point packet:
.oS
RTSG Broadcast 0806  64: arp who-has csam tell rtsg
CSAM RTSG 0806  64: arp reply csam is-at CSAM
.oE
For the first packet, the Ethernet source address is RTSG, the
destination is the broadcast address, the type field
contain hex 0806 (type ETHER_ARP) and the total length is 64 bytes.
.SS TCP Packets
.if n .PP
The following description assumes familiarity with
the TCP protocol described in RFC 793.
.PP
The general format of a TCP protocol line is:
.oS
\*Vsrc > dst: flags data-seqno ack window urgent options\*O
.oE
The fields represent the following:
.VL 4m
.LI "\*Vsrc\*O"
The destination IP addresses and ports.
.LI "\*Vdst\*O"
The destination IP addresses and ports.
.LI "\*Vflags\*O"
The sum combination of \*LS\*O (SYN),
\*LF\*O (FIN), \*LP\*O (PUSH) or \*LR\*O (RST) or a single period (\*L.\*O)
for no flags.
.LI "\*Vdata-seqno\*O"
The portion of sequence space covered by the data in this packet
(see the following example).
.LI "\*Vack\*O"
The sequence number of the next data expected from the other
direction on this connection.
.LI "\*Vwindow\*O"
The number of bytes of receive buffer space available from
the other direction on this connection.
.LI "\*Vurg\*O"
Indicates there is urgent data in the packet.
.LI "\*Voptions\*O"
The TCP options enclosed in angle brackets. For example,
.oS
<mss 1024>
.oE
.LE
The \*Vsrc\*O, \*Vdst\*O, and \*Vflags\*O fields are always present.
The other fields depend on the contents of the packet's TCP protocol header and
are output only if appropriate.
.PP
The following example shows the opening portion of an \*Lrlogin\*O session
from host \*Vrtsg\*O to host \*Vcsam\*O:
.oS
rtsg.1023 > csam.login: S 768512:768512(0) win 4096 <mss 1024>
csam.login > rtsg.1023: S 947648:947648(0) ack 768513 win 4096 <mss 1024>
rtsg.1023 > csam.login: . ack 1 win 4096
rtsg.1023 > csam.login: P 1:2(1) ack 1 win 4096
csam.login > rtsg.1023: . ack 2 win 4096
rtsg.1023 > csam.login: P 2:21(19) ack 1 win 4096
csam.login > rtsg.1023: P 1:2(1) ack 21 win 4077
csam.login > rtsg.1023: P 2:3(1) ack 21 win 4077 urg 1
csam.login > rtsg.1023: P 3:4(1) ack 21 win 4077 urg 1
.oE
.PP
The first line indicates that TCP port 1023 on system \*Lrtsg\*O sent a packet
to port \*Vlogin\*O on host \*Lcsam\*O.  The \*LS\*O indicates that the
\*VSYN\*O flag was
set. The packet sequence number was 768512 and it contained no data.
(The notation is \*Lfirst:last(nbytes)\*O which means
\*Lsequence numbers \*Vfirst\*O
up to but not including \*Vlast\*O which is \*Vnbytes\*O bytes of user data.)
There was no piggy-backed \*Lack\*O, the available receive window was 4096
bytes and there was a \*Lmax-segment-size\*O option requesting an \*Lmss\*O of
1024 bytes.
.PP
Host \*Lcsam\*O replies with a similar packet except it includes a
piggy-backed \*Lack\*O for the \*LSYN\*O sent by \*Lrtsg\*O.  Host \*Lrtsg\*O
then sends an \*Lack\*O reply to the \*LSYN\*O sent by \*Lcsam\*O.
The period (.) means no flags were set.
The packet contained no data so there is no data sequence number.
Note that the \*Lack\*O sequence
number is a small integer (1).  The first time \*Ltcpdump\*O sees a
TCP conversation, it prints the sequence number from the packet.
On subsequent packets of the conversation, the difference between
the current packet's sequence number and this initial sequence number
is printed.  This means that sequence numbers after the
first can be interpreted
as relative byte positions in the conversation's data stream (with the
first data byte each direction being 1).  The \*L-S\*O flag overrides this
feature, causing the original sequence numbers to be output.
.PP
The sixth line indicates that host \*Lrtsg\*O sends host
\*Lcsam\*O 19 bytes of data
(bytes 2 through 20 in the \*Lrtsg\*O to \*Lcsam\*O side of the conversation).
The \*LPUSH\*O flag is set in the packet.
The seventh line indicates that host \*Lcsam\*O has received data sent by
host \*Lrtsg\*O up to
but not including byte 21.  Most of this data is apparently sitting in the
socket buffer because the receive window  on host \*Lcsam\*O is 19 bytes
smaller.  Host \*Lcsam\*O also sends one byte of data to host \*Lrtsg\*O in
this packet.  The eighth and nineth lines show that host
\*Lcsam\*O sends two bytes of urgent, pushed data to \*Lrtsg\*O.
.SS UDP Packets
.if n .PP
The UDP format is illustrated by the following \*Lrwho\*O packet:
.oS
actinide.who > broadcast.who: udp 84
.oE
This line of output indicates that port \*Vwho\*O on host \*Vactinide\*O
sent a UDP datagram to port \*Vwho\*O on host \*Vbroadcast\*O, the Internet
broadcast address.  The packet contained 84 bytes of user data.
.PP
Some UDP services are recognized (from the source or destination
port number) and the higher level protocol information printed.
In particular, Domain Name service requests (RFC 1034 and RFC 1035) and Sun
RPC calls (RFC 1050) to NFS.
.SS UDP Name Server Requests
.if n .PP
The following description assumes familiarity with
the Domain Service protocol described in RFC-1035.
.PP
Name server requests are formatted as follows:
.oS
\*Vsrc > dst: id op? flags qtype qclass name (len)\*O
.oE
For example:
.oS
h2opolo.1538 > helios.domain: 3+ A? ucbvax.berkeley.edu. (37)
.oE
Host \*Lh2opolo\*O queried the domain server on host \*Lhelios\*O for an
address record (\*Lqtype=A\*O) associated with the name
\*Lucbvax.berkeley.edu\*O. The query ID was \*L3\*O.  The plus sign (\*L+\*O)
indicates the recursion desired flag
was set.  The query length was 37 bytes, not including the UDP and
IP protocol headers.  The query operation was the normal one, \*VQuery\*O,
so the \*Lop\*O field was omitted.  If the \*Lop\*O field had been anything
else, it would have been printed between the \*L3\*O and the plus sign
(\*L+\*O).
Similarly, the \*Lqclass\*O was the normal one,
\*VC_IN\*O, and omitted.  Any other \*Lqclass\*O would have been printed
immediately after the \*LA\*O.
.PP
A following anomalies are checked and may result in extra fields enclosed in
square brackets:
.ML
.LI
If a query contains an answer, name server or
authority section, \*Vancount\*O, \*Vnscount\*O, or \*Varcount\*O
are printed as [\*Vn\*Oa], [\*Vn\*On] or  [\*Vn\*Oau] where \*Vn\*O
is the appropriate count.
.LI
If any of the response bits are set (AA, RA or rcode) or any of the
`must be zero' bits are set in bytes and 3, [b2&3=\*Vx\*O]
is printed, where \*Vx\*O is the hex value of header bytes 2 and 3.
.LE
.SS UDP Name Server Responses
.if n .PP
Name server responses are formatted as follows:
.oS
\*Vsrc > dst:  id op rcode flags a/n/au type class data (len)\*O
.oE
For example:
.oS
helios.domain > h2opolo.1538: 3 3/3/7 A 128.32.137.3 (273)
helios.domain > h2opolo.1537: 2 NXDomain* 0/1/0 (97)
.oE
In the first example, host \*Lhelios\*O responds to query ID 3 from host
\*Lh2opolo\*O with 3 answer records, 3 name server records, and 7 authority
records.  The first answer record is type A (address) and its data is Internet
address 128.32.137.3.  The total size of the response is 273 bytes,
excluding UDP and IP headers.  The \*Lop\*O (Query) and response code
(NoError) are omitted, as is the \*Lclass\*O (C_IN) of the A record.
.PP
In the second example, host \*Lhelios\*O responds to query 2 with a
response code of nonexistent domain (NXDomain) with no answers,
one name server and no authority records.  The asterisk (\*L*\*O) indicates
that the authoritative answer bit is set.  Since there are no
answers, no type, class or data are printed.
.PP
Other flag characters that might appear are the minus sign (\-)
(recursion available, RA, \*Vnot\*O set) and vertical bar (|)
(truncated message, TC, set).  If the
`question' section doesn't contain exactly one entry, [\*Vn\*Oq]
is printed.
.PP
Note that name server requests and responses tend to be large, and the
default value of \*Vsnaplen\*O, 96 bytes,  may not capture enough of the
packet to print.  Use the \*L\-s\*O flag to increase the \*Lsnaplen\*O if you
need to seriously investigate name server traffic.
.\" We have to remove the following or change it.
.\"`\*L\-s 128\*O' has worked well for me.
.SS NFS Requests and Replies
.if n .PP
NFS requests and replies are printed as follows:
.oS
\*Vsrc.xid > dst.nfs: len op args\*O
\*Vsrc.nfs > dst.xid: reply stat len op results\*O
.oE
For example:
.oS
sushi.6709 > wrl.nfs: 112 readlink fh 21,24/10.731657119
wrl.nfs > sushi.6709: reply ok 40 readlink "../var"
sushi.201b > wrl.nfs:
	144 lookup fh 9,74/4096.6878 "xcolors"
wrl.nfs > sushi.201b:
	reply ok 128 lookup fh 9,74/4134.3150
.oE
In the first line, host \*Lsushi\*O sends a transaction with ID \*L6709\*O
to host \*Lwrl\*O (the number following the \*Lsrc\*O host is a
transaction ID, \*Vnot\*O the source port).  The request was 112 bytes,
excluding the UDP and IP headers.  The operation was a \*Vreadlink\*O
(read symbolic link) on file handle (\*Vfh\*O) 21,24/10.731657119.
(In some cases, the file handle can be interpreted
as a major and minor device number pair, followed by the inode number and
generation number.)  Host \*Vwrl\*O replies \*Lok\*O with the contents of
the link.
.PP
In the third line, host \*Lsushi\*O asks host \*Lwrl\*O to look up the name
\*Lxcolors\*O in directory file 9,74/4096.6878.  Note that the data printed
depends on the operation type.  The format is intended to be self
explanatory if read in conjunction with
an NFS protocol specification.
.PP
If the \*L-v\*O (verbose) flag is given, additional information is printed.
For example:
.oS
sushi.1372a > wrl.nfs:
	148 read fh 21,11/12.195 8192 bytes @ 24576
wrl.nfs > sushi.1372a:
	reply ok 1472 read REG 100664 ids 417/0 sz 29388
.oE
(The \*L-v\*O flag also prints the IP header TTL, ID, and fragmentation fields,
that have been omitted from this example.)  In the first line,
host \*Lsushi\*O asks host \*Lwrl\*O to read 8192 bytes from file 21,11/12.195,
at byte offset 24576.  Host \*LWrl\*O replies \*Lok\*O;
the packet shown on the
second line is the first fragment of the reply, and therefore is only 1472
bytes long.  (The other bytes will follow in subsequent fragments, but
these fragments do not have NFS or UDP headers and so might not be
printed, depending on the filter expression used.)  Because the \*L-v\*O flag
is given, some of the file attributes (that are returned in addition
to the file data) are printed: the file type (\*LREG\*O, for regular file),
the file mode (in octal), the UID and GID, and the file size.
.PP
If the \*L-v\*O flag is given more than once, even more details are printed.
.PP
Note that NFS requests are very large and much of the detail is not printed
unless the value of \*Vsnaplen\*O is increased.  Try using \*L\-s 192\*O to
watch NFS traffic.
.PP
NFS reply packets do not explicitly identify the RPC operation.
Instead, \*Ltcpdump\*O keeps track of recent requests, and matches
them to the replies using the transaction ID.  If a reply does not
closely follow the corresponding request, it might not be parsable.
.PP
NFS and Sun are registered trademarks of Sun Microsystems, Inc.
.SS KIP AppleTalk (DDP in UDP)
.if n .PP
AppleTalk DDP packets encapsulated in UDP datagrams are de-encapsulated
and dumped as DDP packets (for example, all the UDP header information is
discarded).  The file \*L/etc/atalk.names\*O
is used to translate AppleTalk network numbers and node numbers to names.
Lines in this file have the following form:
.oS
\*Vnumber	name\*O
.oE
For example:
.oS
1.254		ether
16.1		icsd-net
1.254.110	ace
.oE
The first two lines provide the names of AppleTalk networks.  The third
line provides the name of a particular host (a host is distinguished
from a network by the third octet in the number.
(A network number must have two octets and a host number must
have three octets.)  The number and name are separated by
either blanks or tabs.
The \*L/etc/atalk.names\*O file may contain blank lines or comment lines (lines
starting with a pound sign (#)).
.PP
AppleTalk addresses are printed in the following form:
.oS
\*Vnet.host.port\*O
.oE
For example:
.oS
144.1.209.2 > icsd-net.112.220
office.2 > icsd-net.112.220
jssmag.149.235 > icsd-net.2
.oE
(If the \*L/etc/atalk.names\*O
file does not exist or does not contain an entry for some AppleTalk
host or network number, addresses are printed in numeric form.)
.PP
In the first example, the name binding protocol (NBP) (DDP port 2) on network
144.1 node 209
sends to whatever is listening on port 220 of network \*Licsd\*O node 112.
The second line is the same except the full name of the source node
is known (\*Loffice\*O).  The third line sends from port 235 on
network \*Ljssmag\*O node 149 to broadcast on the \*Licsd-net\*O NBP port.
(Note that the broadcast address (255) is indicated by a network name with
no host number.  For this reason it is a good idea to keep node names and
network names distinct in \*L/etc/atalk.names\*O).
.PP
NBP and ATP (AppleTalk transaction protocol)
packets have their contents interpreted.  Other protocols dump
the protocol name (or number if no name is registered for the
protocol) and packet size.
.PP
NBP packets are formatted as shown in the following examples:
.oS
.ps -1
icsd-net.112.220 > jssmag.2: nbp-lkup 190: "=:LaserWriter@*"
jssmag.209.2 > icsd-net.112.220: nbp-reply 190: "RM1140:LaserWriter@*" 250
techpit.2 > icsd-net.112.220: nbp-reply 190: "techpit:LaserWriter@*" 186
.ps +1
.oE
The first line shows a name lookup request for laserwriters sent by network
host \*Licsd\*O 112 and broadcast on network \*Ljssmag\*O.  The NBP ID for
the lookup is 190.
The second line shows a reply to this request (it has the
same ID) from host \*Ljssmag.209\*O indicating that it has a laserwriter
resource named \*LRM1140\*O registered on port 250.  The third line shows
another reply to the same request indicating host \*Ltechpit\*O has laserwriter
\*Ltechpit\*O registered on port 186.
.PP
\*LATP packet\*O formatting is demonstrated by the following example:
.oS
jssmag.209.165 > helios.132: atp-req  12266<0-7> 0xae030001
helios.132 > jssmag.209.165: atp-resp 12266:0 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:1 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:2 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:4 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:6 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp*12266:7 (512) 0xae040000
jssmag.209.165 > helios.132: atp-req  12266<3,5> 0xae030001
helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000
jssmag.209.165 > helios.132: atp-rel  12266<0-7> 0xae030001
jssmag.209.133 > helios.132: atp-req* 12267<0-7> 0xae030002
.oE
Host \*Ljssmag.209\*O initiates transaction ID 12266 with host \*Lhelios\*O
by requesting up to eight packets (0-7).  The hex number at the end of the line
is the value of the \*Luserdata\*O field in the request.
.PP
Host \*Lhelios\*O responds with eight 512-byte packets.  The \*L:digit\*O
following the transaction ID gives the packet sequence number in the
transaction and the number in parenthesis is the amount of data in the packet,
excluding the ATP header.  The asterisk (*) on packet 7 indicates that the
EOM bit was set.
.PP
Host \*Ljssmag.209\*O then requests that packets 3 and 5 be retransmitted.
Host \*Lhelios\*O resends them, then \*Ljssmag.209\*O releases the transaction. Finally, \*Ljssmag.209\*O initiates the next request.  The asterisk (*) on
the request indicates that exactly once (XO) was not set.
.PP
AppleTalk is a registered trademark of Apple Computer, Inc.
.SS IP Fragmentation
.if n .PP
Fragmented Internet datagrams are printed as follows:
.oS
(frag \*Vid\*O:\*Vsize\*O@\*Voffset\*O+)
(\*Lfrag \*Vid\*O:\*Vsize\*O@\*Voffset\*O)
.oE
The first line indicates there are more fragments.  The second
indicates this is the last fragment.
.PP
The following list explains the fields:
.VL 4m
.LI "\*Vid\*O"
The fragment ID
.LI "\*Vsize\*O"
The fragment size (in bytes) excluding the IP header
.LI "\*Voffset\*O"
The fragment's offset (in bytes) in the original datagram
.LE
.PP
The fragment information is output for each fragment.  The first
fragment contains the higher level protocol header and the fragment
information is printed after the protocol information.  Fragments
after the first contain no higher level protocol header and the
fragment information is printed after the source and destination addresses.
The following example shows part of an FTP session from \*Larizona.edu\*O to
\*Llbl-rtsg.arpa\*O over a CSNET connection that does not appear to handle
576 byte datagrams:
.oS
arizona.ftp-data > rtsg.1170: . 1024:1332(308) ack 1 win 4096 (frag 595a:328@0+)
arizona > rtsg: (frag 595a:204@328)
rtsg.1170 > arizona.ftp-data: . ack 1536 win 2560
.oE
Note the following:
.ML
.LI
Addresses in the second line do not include port numbers.
This is because the TCP
protocol information is in the first fragment and we do not know
what the port or sequence numbers are when we print the later fragments.
.LI
TCP sequence information in the first line is printed as if there
were 308 bytes of user data; however, there are 512 bytes (308 in
the first fragment and 204 in the second).  If you are looking for holes
in the sequence space or trying to match up acknowledgements
with packets, this can be misleading.
.IP
A packet with the IP `do not fragment' flag is marked with a
trailing \*L(DF)\*O.
.LE
.SS Timestamps
.if n .PP
By default, all output lines are preceded by a timestamp.  The timestamp
is the current clock time in the following form:
.oS
\*Vhh:mm:ss.frac\*O
.oE
It is as accurate as the kernel's clock.
The timestamp reflects the time the kernel first saw the packet.  No attempt
is made to account for the time difference between when the
Ethernet interface removed the packet from the wire and when the kernel
serviced the new packet interrupt.
.\".SH AUTHORS
.\"Van Jacobson (van@helios.ee.lbl.gov),
.\"Craig Leres (leres@helios.ee.lbl.gov) and
.\"Steven McCanne (mccanne@helios.ee.lbl.gov), all of
.\"Lawrence Berkeley Laboratory, University of California, Berkeley, CA.
.SH RELATED INFORMATION
.PP
Commands: \*Lnfswatch\*O(8), \*Lpfstat\*O(1), \*Lpfconfig\*O(8)
.PP
Files: \*Lpacketfilter(7)\*O, \*Lbpf\*O(7)
.\" Originally not commented out - BAC
.\".SH Copyright
.\".Copyright (c) 1988-1990 The Regents of the University of California.
.\"All rights reserved.
.\".PP
.\"Redistribution and use in source and binary forms, with or without
.\"modification, are permitted provided that: (1) source code distributions
.\"retain the above copyright notice and this paragraph in its entirety, (2)
.\"distributions including binary code include the above copyright notice and
.\"this paragraph in its entirety in the documentation or other materials
.\"provided with the distribution, and (3) all advertising materials mentioning
.\"features or use of this software display the following acknowledgement:
.\"``This product includes software developed by the University of California,
.\"Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
.\"the University nor the names of its contributors may be used to endorse
.\"or promote products derived from this software without specific prior
.\"written permission.
.\"THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
.\"WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
.\"MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.EQ
delim off
.EN

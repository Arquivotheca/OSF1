.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: exec.2,v $ $Revision: 3.5.5.3 $ (DEC) $Date: 1994/01/11 23:22:13 $
.\"
.\" (c) Copyright 1990, 1991, 1992 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 Release 1.0.4
.\"
.TH exec 2
.SH NAME
.PP
\*Lenviron\*O, \*Lexecl\*O, \*Lexecv\*O, \*Lexecle\*O, \*Lexecve\*O, \*Lexeclp\*O, \*Lexecvp\*O \- Executes a file
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O):
\*Lexeclp()\*O, \*Lexecvp()\*O
.SH SYNOPSIS
.PP
.sS
\*L#include <unistd.h>\*O
.nL
\*Lextern char \(**\(**environ;
.nL
\*Lint execl (
.nL
	\*Lconst char \(**\*Vpath\*L,
.nL
	\*Lconst char \(**\*Varg\*L,
.nL
	\|.\|.\|.  );
.sp .4v
\*Lint execv (
.nL
	\*Lconst char \(**\*Vpath\*L,
.nL
	\*Lchar \(** const \*Vargv\*L\|[ ] );
.sp .4v
\*Lint execle (
.nL
	\*Lconst char \(**\*Vpath\*L,
.nL
	\*Lconst char \(**\*Varg\*L,
.nL
	\|.\|.\|.
.nL
	char \(** const \*Venvp\*O\|[ ] );\*L
.sp .4v
\*Lint execve (
.nL
	\*Lconst char \(**\*Vpath\*L,
.nL
	\*Lchar \(** const \*Vargv\*L[ ],
.nL
	\*Lchar \(** const \*Venvp\*L[ ] );
.sp .4v
\*Lint execlp (
.nL
	\*Lconst char \(**\*Vfile\*L,
.nL
	\*Lconst char \(**\*Varg\*L,
.nL
	\|.\|.\|. );
.sp .4v
\*Lint execvp (
.nL
	\*Lconst char \(**\*Vfile\*L,
.nL
	\*Lchar \(** const \*Vargv\*L[ ] );
.sE
.SH PARAMETERS
.PP
.VL
.LI "\*Vpath\*O"
Points to a pathname identifying the new process image file.
.\" from TP  
.LI "\*Varg\*O"
Specifies a pointer to a null-terminated string.
.\" from TP  
.LI "\*Vargv\*O"
Specifies an array of character pointers to null-terminated strings.
.\" from TP  
.LI "\*Venvp\*O"
Specifies an array of character pointers to null-terminated strings,
constituting the environment for the new process.
.\" from TP  
.LI "\*Vfile\*O"
Identifies the new process image file.
.LE
.SH DESCRIPTION
.PP
.iX "exec function"
.iX "execl function"
.iX "execv function"
.iX "execle function"
.iX "execve function"
.iX "execlp function"
.iX "execvp function"
.iX "file" "executing"
.iX "file" "executable"
.iX "process image" "current"
.iX "process image" "new"
The
\*Lexec\*O
functions replace the current process image with a
new process image.
The new image is constructed from a regular executable file,
called a
new process image file.
A successful
\*Lexec\*O
does not return,
because the calling process image is overlaid by the new process
image.
.PP
When a program is executed as a result of an
\*Lexec\*O
call, it is
entered as a function call as follows:
.PP
.RS
\*Lint main (
.nL
	int \*Vargc\*O,
.nL
	\*Lchar \(**\*Vargv\*O[ ] );\*O
.RE
.PP
Here,
\*Vargc\*O
is the argument count and
\*Vargv\*O[ ]
is an array of character pointers to the arguments themselves.
In addition, the following variable
is initialized as a pointer to an array of character pointers to
the environment strings:
.RS
\*Lextern char \(**\(**\*Venviron\*O;
.RE
\*OThe
\*Vargv\*O
and
\*Venviron\*O
arrays are each terminated by a null pointer.
The null pointer terminating the
\*Vargv\*O
array is not counted in
\*Vargc\*O.
.PP
The arguments specified by a program with one of the
\*Lexec\*O
functions are passed on to the new process image in the
corresponding
arguments to
\*Lmain(\|)\*O.
.PP
The
\*Vpath\*O argument
points to a pathname that identifies the new process image file.
.PP
The
\*Vfile\*O argument
is used to construct a pathname that identifies the new process
image file.
If the
\*Vfile\*O
argument contains a slash character, the
\*Vfile\*O
argument is used as the pathname for this file.
Otherwise, the path prefix for
this file is obtained by a search of the directories passed as
the
\*LPATH\*O environment variable.
.PP
The new process image file is formatted as an executable text or
binary file, in one of the formats recognized by the
\*Lexec\*O
functions.  An executable text file is identified by a header line
with the following syntax:
.PP
.RS
\*L#! \*Vinterpreter_name\*O [ \*Voptional_string\*O ]
.RE
.PP
The \*L#!\*O identifies the file as an executable text file.  The new
process image is constructed from the process image file named by the
\*Vinterpreter_name\*O string.  The arguments are modified as follows:
.\" from TP 4  
.ML
.LI
\*Vargv\*L[0]\*O is set to the name of the interpreter.
.\" from TP  
.LI
If the \*Voptional_string\*O is present, \*Vargv\*L[1]\*O is set to
the \*Voptional_string\*O.
.\" from TP  
.LI
The next element of \*Vargv\*L[\|]\*O is set to the original value of
\*Vpath\*O.
.\" from TP  
.LI
The remaining elements of \*Vargv\*L[\|]\*O are set to the original
elements of \*Vargv\*L[\|]\*O, starting at \*Vargv\*L[1]\*O.  The
original \*Vargv\*L[0]\*O is discarded.
.LE
.PP
An executable binary file can be loaded either directly by the
\*Lexec\*O
function, or indirectly by the program loader.  The
\*Lexec\*O
function chooses to use direct or indirect loading based on the
contents of the new process image file.  For example, indirect loading
is used if the new process image file has unresolved symbols,
requiring use of a shared library.
.PP
When indirect loading is used, the new process image is constructed
from the default program loader,
\*L/sbin/loader\*O,
in the same manner as described for the
\*Lexec_with_loader(\|)\*O
function.  The default program loader is then responsible for
completing the new program image by loading the new process image file
and any shared libraries on which it depends.
.PP
If the process image file is not a valid executable object, the
\*Lexeclp(\|)\*O
and
\*Lexecvp(\|)\*O
functions use the contents of that file as standard input to a
command interpreter conforming to the
\*Lsystem(\|)\*O
function.
In this case, the command interpreter becomes the new process image.
.PP
The
\*Vargv\*O argument
is an array of character pointers to null-terminated strings.
The last member of this array is a null pointer.
These strings constitute the argument list available to the new
process image.
The value in
\*Vargv\*L[0]\*O
should point to a filename that is associated with the process
being started by one of the
\*Lexec\*O
functions.
.PP
The
\*Lconst char *\*Varg\*O
and subsequent ellipses in the
\*Lexecl(\|)\*O,
\*Lexeclp(\|)\*O,
and
\*Lexecle(\|)\*O
functions can be thought of as
\*Varg0\*O,
\*Varg1\*O,
\&...,
\*Vargn\*O.
Together they describe a list of one or more pointers to
null-terminated character strings that represent the argument list
available to the new program.  The first argument must point to a
filename that is associated with the process being started by one of
the
\*Lexec\*O
functions, and the last argument must be a null pointer.
For the
\*Lexecle(\|)\*O
function, the environment is provided by following the null pointer
that will terminate the list of arguments in the parameter list to
\*Lexecle(\|)\*O
with an additional parameter as if it were declared as:
.PP
\*Lchar * const \*Venvp\*O\|[\|]
.PP
The
\*Venvp\*O
argument to
\*Lexecve(\|)\*O,
and the final argument to
\*Lexecle(\|)\*O,
name an array of character pointers to null-terminated strings.  These
strings constitute the environment for the new process image.  The
environment array is terminated with a null pointer.
.PP
For those forms not containing an
\*Venvp\*O
pointer
\*O(\*Lexecl(\|)\*O,
\*Lexecv(\|)\*O,
\*Lexeclp(\|)\*O
and
\*Lexecvp(\|)\*O)
the environment for the new process image is taken from the
external variable
\*Lenviron\*O
in the calling process.
.PP
The number of bytes available for the new process' combined
argument and environment lists is ARG_MAX.
ARG_MAX includes the null terminators on the strings;  it does not
include the pointers.
.PP
File descriptors open in the calling process image remain open in
the new process image, except for those whose close-on-exec flag
FD_CLOEXEC is set (see the
\*Lfcntl(\|)\*O
function).
For those file descriptors that remain open, all attributes of
the open file description, including file locks, remain
unchanged.
.PP
The state of directory streams
and message catalog descriptors
in the new process image is undefined.
.PP
Each mapped file and shared memory region created with the
\*Lmmap(\|)\*O
function is unmapped by a successful call to any of the
\*Lexec\*O
functions,
except those regions mapped with the MAP_INHERIT option.  Regions
mapped with the MAP_INHERIT option remain mapped in the new process
image.
.PP
Signals set to the default action (SIG_DFL) in the calling process image
are set to the default action in the new process image. Signals set to be
ignored (SIG_IGN) by the calling process image are set to be
ignored by the new
process image.  Signals set to be caught by the calling process image are
set to the default action in the new process image (see the
\*Lsignal.h\*O
header file).
.PP
If the set user ID mode bit of the new process image file is set (see
the
\*Lchmod(\|)\*O
function),
the effective user ID of the new process image is set to the owner ID
of the new process image file.  Similarly, if the set group ID mode bit of
the new process image file is set, the effective group ID of the new
process image is set to the group ID of the new process image file.  The
real user ID, real group ID, and supplementary group IDs of the new process
image remain the same as those of the calling process image.
The effective user ID and effective group
ID of the new process image are saved (as the
saved set user ID
and the
saved set group ID)
for use by the
\*Lsetuid(\|)\*O
function.
.PP
The following
attributes of the calling process image
are unchanged after successful completion of any of the \*Lexec\*O functions:
.\" .RS .5i
.\" from TP 4  
.ML
.LI
Process
ID
.\" from TP  
.LI
Parent process
ID
.\" from TP  
.LI
Process group
ID
.\" from TP  
.LI
Session membership
.\" from TP  
.LI
Real user
ID
.\" from TP  
.LI
Real group
ID
.\" from TP  
.LI
Supplementary group
IDs
.\" from TP  
.LI
Time left until an alarm clock signal (see the
\*Lalarm(\|)\*O
function)
.\" from TP  
.LI
Current working directory
.\" from TP  
.LI
Root directory
.\" from TP  
.LI
File mode creation mask (see the
\*Lumask(\|)\*O
function)
.\" from TP  
.LI
Process signal mask (see the
\*Lsigprocmask(\|)\*O
function)
.\" from TP  
.LI
Pending signals (see the
\*Lsigpending(\|)\*O
function)
.\" from TP  
.LI
The
\*Ltms_utime\*O,
\*Ltms_stime\*O,
\*Ltms_cutime\*O,
and
\*Ltms_cstime\^\*O
fields of the
\*Ltms\*O
structure.
.\" from TP  
.LI
File size limit (see the
\*Lulimit(\|)\*O
function)
.\" from TP  
.LI
Nice value (see the
\*Lnice(\|)\*O
function)
.\" .RE
.LE
.PP
Upon successful completion, the
\*Lexec\*O
functions mark for update the
\*Lst_atime\*O
field of the file.
.SH NOTES
.PP
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Full use
.LE
.SH RETURN VALUES
.PP
If one of the
\*Lexec\*O
functions returns to the calling process image, an error has occurred;
the return value is \-1, and
\*Lerrno\*O
is set to indicate the error.
.SH ERRORS
.PP
If the
\*Lexec\*O
functions
fail,
\*Lerrno\*O
may be set to one of the following values:
.\" from TP 1i  
.VL 1i
.LI "[E2BIG]"
The number of bytes used by the new process image's
argument list and environment list is greater than the system-imposed
limit of ARG_MAX bytes.
.\" from TP 1i  
.LI "[EACCES]"
Search permission is denied for a directory listed in the new
process image file's path prefix, or the new process image file
denies execution permission, or the new process image file
is not a regular file and the implementation does not support
execution of files of its type.
.\" from TP 1i  
.LI "[ENAMETOOLONG]"
The length of the
\*Vpath\*O
or
\*Vfile\*O
arguments, or an element of the environment variable
\*LPATH\*O
prefixed to a file, exceeds PATH_MAX, or a pathname component
is longer than NAME_MAX and _POSIX_NO_TRUNC is in effect for
that file.
.\" from TP 1i  
.LI "[ENOENT]"
One or more components of the new process image file's pathname
do not exist, or the
\*Vpath\*O
or
\*Vfile\*O
argument points to an empty string.
.\" from TP 1i  
.LI "[ENOTDIR]"
A component of the new process image file's path prefix is
not a directory.
.\" from TP 1i  
.LI "[EFAULT]"
The \*Vpath\*O argument is an invalid address.
.\" from TP 1i  
.LI "[ELOOP]"
Too many symbolic links were encountered in pathname resolution.
.\" from TP 1i  
.LI "[ENOMEM]"
Insufficient memory is available.
.\" from TP 1i  
.\".LI "[ETXTBSY]" 
.\"The new process image
.\"file is
.\"currently open for writing by some process.
.\" from TP  
.LI "[EACCES]"
The security attributes of the program file do not allow execute
permission.
.\"#ifdef SEC_ILB
.\" from TP  
.\".LI "[EACCES]" 
.\"The information label of the file would cause the process'
.\"information level
.\"to float such that it was no longer dominated by the process'
.\"sensitivity
.\"level.
.\"#endif /* SEC_ILB */
.LE
.PP
If the
\*Lexecl(\|)\*O,
\*Lexecv(\|)\*O,
\*Lexecle(\|)\*O,
or
\*Lexecve(\|)\*O
function fails,
\*Lerrno\*O
may be set to the following value:
.PP
.\" from TP 1i  
.VL 1i
.LI "[ENOEXEC]"
The new process image file has the appropriate access permission but
is not in the proper format.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Lalarm\*O(3),
\*Lexit\*O(2),
\*Lfcntl\*O(2),
\*Lfork\*O(2),
\*Lgetenv\*O(3),
\*Lnice\*O(3),
\*Lputenv\*O(3),
\*Lsigaction\*O(2),
\*Lsystem\*O(3),
\*Ltimes\*O(3),
\*Lulimit\*O(3),
\*Lumask\*O(2),
\*Lmmap\*O(2),
\*Lexec_with_loader\*O(2)
.iX "exec function"
.iX "execl function"
.iX "execv function"
.iX "execle function"
.iX "execve function"
.iX "execlp function"
.iX "execvp function"
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: getaddressconf.2,v $ $Revision: 3.2.2.2 $ (DEC) $Date: 1992/05/15 08:58:57 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\"
.\"
.TH getaddressconf 2
.SH NAME
\*Lgetaddressconf\*O \- Gets information about system address space configuration
.SH SYNOPSIS 
.sS
.sp .4v
\*L#include <sys/types.h>
.nL
#include <sys/addrconf.h>\*O
.sp .4v
\*Lint getaddressconf (
.nL
	struct addressconf \*V*buffer\*L,
.nL
	size_t \*Vlength \*L);
.sE 
.SH PARAMETERS
.\" from TP  
.VL 
.LI "\*Vbuffer\*O"
Points to an array of
\*Laddressconf\*O
structures.
.\" from TP  
.LI "\*Vlength\*O" 
Specifies the size in bytes of the array pointed to by the
\*Vbuffer\*O
parameter.
.LE 
.SH DESCRIPTION
.iX "getaddressconf function"
.iX "system address space" "returning configuration of"
.PP 
The \*Lgetaddressconf(\|)\*O function fills in the array of
structures pointed to by the \*Vbuffer\*O parameter with information
describing the configuration of process address spaces on this system.
This information is intended to be used by programs such as the
program loader, which need to manage the contents of a process'
address space using the memory management primitives such as the
\*Lmmap(\|)\*O function.
.PP 
The \*Vbuffer\*O parameter points to an array of \*Laddressconf\*O
structures, occupying a total of \*Vlength\*O bytes.  Each element of
the array describes a single area of the process address space.  The
\*Laddressconf\*O structure is defined in the \*Lsys/addrconf.h\*O
header file, and it contains the following members:
.rS 
\*Lcaddr_t ac_base;
.nL
unsigned ac_flags;\*O
.rE 
.VL
.LI "\*Lac_bas"
\*OThe base virtual address of the area.  For an upward-growing area,
this is the lowest virtual address in the area; for a downward-growing
area, this is the lowest virtual address above the area.
.\" from TP .75i  
.LI "\*Lac_flags" 
\*OThe flags describe the area.  They are also defined in the
\*Lsys/addrconf.h\*O header file, and are described as follows:
.wH .RS  Can not be used in nested lists
.\" from TP 1i  
.VL
.LI "AC_UPWARD" 
The area grows towards higher addresses.  The base address specified
is the lowest address in the area.
.\" from TP  
.LI "AC_DOWNWARD" 
The area grows towards lower addresses.  The base address specified
is the lowest address above the area.
.\" from TP  
.LI "AC_FIXED" 
The area always starts at the specified base address.  For example, on
many machines the text area is a fixed area.
.\" from TP  
.LI "AC_FLOAT" 
The area floats to the first available virtual address above the
specified base address.  For example, on many machines, the data area
floats above the text area.
.wH .RE
.LE
.LE 
.PP 
Each element in the array of \*Laddressconf\*O structures describes a
separate area of the process' address space.  These areas have been
defined in the \*Lsys/addrconf.h\*O
header file; other areas may be defined in the
future or on other machine types.  The array elements are indexed with
the following constants:
.\" from TP 1i  
.VL
.LI "AC_TEXT"
The area that normally contains the text region of an absolute
executable program.
.\" from TP  
.LI "AC_DATA" 
The area that normally contains the data region of an absolute
executable program.
.\" from TP  
.LI "AC_BSS" 
The area that normally contains the bss region of an absolute
executable program.
.\" from TP  
.LI "AC_STACK" 
The area that normally contains the process' user-mode stack.
.\" from TP  
.LI "AC_LDR_TEXT\*O" 
The area reserved for the text region of the default program loader see
the \*Lexec_with_loader(\|)\*O function.
.\" from TP  
.LI "AC_LDR_DATA\*O" 
The area reserved for the data region of the default program loader.
.\" from TP  
.LI "AC_LDR_BSS\*O" 
The area reserved for the bss region of the default program loader.
.\" from TP  
.LI "AC_LDR_PRIV\*O" 
The area that normally contains the default program
loader's private keep-on-exec data.  See the \*Lmmap(\|)\*O function.
.\" from TP  
.LI "AC_LDR_GLB\*O" 
The area that normally contains the default program loader's
Global Installed Package tables.  See the
\*Llibadmin\*O
administrative command.
.\" from TP  
.LI "AC_LDR_PRELOAD\*O" 
The area that normally contains the text, data, and bss regions of the
preloaded shared libraries.
.\" from TP  
.LI "AC_MMAP_TEXT\*O" 
The area that normally contains text regions of relocatable files
loaded by the program loader, or otherwise mapped using the \*Lmmap(\|)\*O
function.
.\" from TP  
.LI "AC_MMAP_DATA\*O" 
The area that normally contains data regions of relocatable files
loaded by the program loader, or otherwise mapped using the \*Lmmap(\|)\*O
function.
.\" from TP  
.LI "AC_MMAP_BSS\*O" 
The area that normally contains the bss regions of relocatable files
loaded by the program loader, or anonymous regions mapped using the
\*Lmmap(\|)\*O function.
.wH .RE
.LE 
.PP 
The \*Lsys/addrconf.h\*O header file also defines the
AC_N_AREAS symbol to be the number of distinct areas currently defined
for this system.  Normally, the \*Vbuffer\*O parameter supplied to the
\*Lgetaddressconf(\|)\*O function should be large enough to hold
information for AC_N_AREAS regions.  If
\*Vbuffer\*O
is not large enough, the remaining information is truncated.
The \*Lgetaddressconf(\|)\*O call fills in the first AC_N_AREAS
records in the  user-supplied buffer with the address configuration
information for this system, as described above.
.SH RETURN VALUES
.PP 
Upon successful completion, the number of bytes actually written to the
user's buffer is returned.  If an error occurs, -1 is
returned, and
\*Lerrno\*O is set to indicate the error.
.SH ERRORS
\*OIf the \*Lgetaddressconf(\|)\*O function fails,
\*Lerrno\*O
may be set to the following value:
.\" from TP 1i  
.VL 1i
.LI "[EFAULT]"
The address specified for \*Vbuffer\*O is not
valid.
.LE 
.SH RELATED INFORMATION
.PP 
Functions:
\*Lmmap\*O(2),
\*Lexec\*O(2),
\*Lexec_with_loader\*O(2),
\*Lbrk\*O(2)
.PP 
Commands:
\*Llibadmin\*O(8)
.iX "getaddressconf function"
.EQ
delim off
.EN

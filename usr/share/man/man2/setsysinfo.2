.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: setsysinfo.2,v $ $Revision: 3.2.5.4 $ (DEC) $Date: 1994/01/05 17:55:57 $
.\"
.TH setsysinfo 2
.SH NAME
\*Lsetsysinfo\*O \- Sets system information
.SH SYNOPSIS
.PP
#include <sys/types.h>
.nL
#include <sys/sysinfo.h>
.PP
setsysinfo(\*Vop, buffer, nbytes, arg, flag\*O)
.nL
\*Lunsigned long \*Vop\*O;
.nL
\*Lcaddr_t *\*Vbuffer\*);
.nL
\*Lunsigned long \*Vnbytes\*O;
.nL
\*Lcaddr_t  \*Varg\*O;
.nL
\*Lunsigned long \*Vflag\*O;
.SH DESCRIPTION
.PP
.iX "setsysinfo system call"
The \*Lsetsysinfo\*O system call modifies system information.
The \*Vop\*O argument specifies the operation to be performed.
Values for \*Lop\*O are defined in the \*L<sys/sysinfo.h>\*O
header file.  The optional \*Vbuffer\*O and \*Lnbytes\*O
arguments are used to pass data, which varies depending upon
\*Vop\*O.  When \*Vbuffer\*O and \*Vnbytes\*O
are not required, they should be set to NULL.
The optional \*Varg\*O argument can be used with certain
\*Vop\*O values for additional information.
When \*Varg\*O is not required, it should be set to NULL.
The optional \*Vflag\*O argument can be used with certain
\*Vop\*O and \*Varg\*O values for additional information.
When \*Vflag\*O is not required it should be set to NULL.
.PP
Possible \*Vop\*O  values are:
.VL
.LI "SSI_NVPAIRS"
.\" Begin CORRECTION
This operation uses pairs of values or their named equivalents to
modify system behavior.  The
.\" End CORRECTION
\*Vbuffer\*O variable is an array of
.\" Begin CORRECTION
paired values (or their named equivalents).
.\" End CORRECTION
One member of a pair is from a set of system names defined in
the \*L<sys/sysinfo.h>\*O header file.
.IP
The other member can be one of the following:
\*LA_BSD\*O, \*LA_POSIX\*O, \*LA_SYSV\*O, or a system name defined as
a flag for UAC (unaligned access control)
in the \*L<sys/proc.h>\*O header file and set on a per task basis.
.\" End CORRECTION
.IP
The following UAC flags can be specified in any combination:
\*LUAC_NOPRINT\*O, \*LUAC_NOFIX\*O, and \*LUAC_SIGBUS\*O.
.IP
\*LUAC_NOPRINT\*O suppresses the printing of the unaligned error message
to the user.
.IP
\*LUAC_NOFIX\*O instructs the operating system not to
fix the unaligned access fault.
.IP
\*LUAC_SIGBUS\*O causes a SIGBUS signal to be delivered to the thread.
.IP
UAC settings are inherited by a forked process so that the process will have
the same UAC characteristics as its parent.
.IP
Possible \*Vname\*O values for the first member, are:
.VL
.LI "SSIN_NFSPORTMON"
.\" Begin CORRECTION
Determines
.\" End CORRECTION
whether incoming NFS traffic is originating at a privileged port or not.
.\" Begin CORRECTION
Its paired value must be 0 or 1.
.\" End CORRECTION
.\" Begin CORRECTION
.\".LI "SSIN_NFSSETLOCK"
.\"Determines whether NFS (daemon) style file
.\"and record locking are enabled or not.
.\" End CORRECTION
.LI "SSIN_PROG_ENV"
Sets the compatibility mode of the process.
.\" Begin CORRECTION
This value is paired with one of the following:
\*LA_BSD\*O, \*LA_POSIX\*O, or \*LA_SYSV\*O.
.LI "SSIN_UACSYS"
This is a system-specified value that
accepts the UAC_NOPRINT flag only, as its paired value,
even if other UAC flags are specified.  Accordingly, it
toggles an "unaligned access fixup" message.  Use of this value
is restricted to the
superuser and supersedes a user setting that requests printing.
.LI "SSIN_UACPARNT"
A value that is set in the current process's parent proc
structure.
.\" Begin CORRECTION 
This value is paired with the UAC flags
UAC_NOPRINT, UAC_NOFIX, and UAC_SIGBUS, specified in any combination
with inclusive \*LOR\*O.
Accordingly, it toggles printing of ``unaligned access fixups,'' fixing of
UAC faults, and delivery of a SIGBUS signal to the thread.
.\" End CORRECTION
This value is inherited across forks and execs.
If parent is init, it returns EPERM.
.LI "SSIN_UACPROC"
A value that is set in the proc structure.
.\" Begin CORRECTION
This value is paired with UAC flags
UAC_NOPRINT, UAC_NOFIX, and UAC_SIGBUS, specified in any combination,
it toggles printing of ``unaligned access fixups,'' fixing of
UAC faults, and delivery of a SIGBUS signal to the thread.
.\" End CORRECTION
.IP
The \*Vvalue\*O is a legal value for \*Vname\*O.
The \*Vnbytes\*O argument defines the number of pairs in \*Vbuffer\*O.
The \*Varg\*O and \*Vflag\*O arguments are not used.
.LE
.LI "SSI_ZERO_STRUCT"
Each member of a system structure is set to zero.  The \*Varg\*O
defines the structure type.
.IP
Possible values for \*Varg\*O are:
.VL
.LI "SSIS_NFS_CLSTAT"
NFS client statistics.
.LI "SSIS_NFS_SVSTAT"
NFS server statistics.
.LI "SSIS_RPC_STAT"
RPC statistics.
The \*Vflag\*O argument is used for a particular \*Varg\*O
value, to further define the operation or a resultant
action to be performed.
The \*Vbuffer\*O and \*Vnbytes\*O arguments are not used.
.IP
Permission checking is done on a structure-by-structure basis.
.LE
.LI "SSI_SET_STRUCT"
Each member of a system structure is set to a supplied value. The
\*Varg\*O defines the structure type.
.IP
Possible values for \*Varg\*O are as defined for op SSI_STRUCT_ZERO.
The \*Vflag\*O argument is used for a particular \*Varg\*O
value, to further define the operation or a resultant action to be performed.
The \*Vbuffer\*O
argument is the address of a structure of the appropriate type that
contains the desired values.  The \*Vnbytes\*O
argument specifies the amount of data to be transferred that is stored at
\*Vbuffer\*O.
.LE
.\" Begin Digital-specific information
.SH EXAMPLES
.PP
.oS
#include <sys/sysinfo.h>
#include <sys/proc.h>
\*O\&.\*L
int \*Vbuf\*L[2], \*Vval\*L, \*Varg\*L;
\*O\&.\*L
\*L/* \*A Don\&'t print the warning to the user \*L*/
\*Vbuf[0]\*L = SSIN_UACPROC;
\*Vbuf[1]\*L = UAC_NOPRINT;
\*Verror\*L = \*Vsetsysinfo\*L(SSI_NVPAIRS, \*Vbuf\*L, \*N1\*L, \*N0\*L, \*N0\*L);
\*O\&.\*L
\*O\&.\*L
\*O\&.\*L
\*L/* \*ADeliver a SIGBUS signal and don't print the warning \*L*/
\*Vbuf\*L[0] = SSIN_UACPROC;
\*Vbuf\*L[1] = UAC_SIGBUS | UAC_NOPRINT;
\*Verror\*L = \*Vsetsysinf\*L(SSI_NVPAIRS,
             \*Vbuf\*L, \*N1\*L, \*N0\*L, *N0\*L);
.oE
.PP
The example below, shows that you can pass more than one pair of values
to the \*LSSI_PAIRS\*O call.  Notice that members of a pair are
contiguous, and an SSI_* value appears in the even number position
beginning with array position\ *L[0]\*O.
.PP
.iS
\*Vbuf\*L[0] = SSIN_UACPARNT;
\*Vbuf\*L[1] = UAC_NOPRINT;
\*Vbuf\*L[2] = SSIN_NSFPORTMON;
\*Vbuf\*L[3] = \*N1\*L;
\*Lif (\*Vsetsysinfo\*L(SSI_NVPAIRS, \*Vbuf\*L, \*N2\*L, \*N0\*L) < \*N0\*L)
 \*L{
    \*Vperror\*L("\*Vsetsysinfo\*L");
    \*Vreturn\*L;
           \*L}\*O
.iE
.\" End Digital-specific information
.SH RETURN VALUES
.PP
A zero (0) is returned if the call succeeds. If the call fails, \-1
is returned, and the global variable \*Lerrno\*O
is set to indicate the error.
.SH ERRORS
.PP
.VL 10m
.LI "[EFAULT]"
Either \*Vbuffer\*O or \*Varg\*O causes an illegal address to be referenced.
.LI "[EINVAL]"
The \*Vop\*O, \*Varg\*O, or \*Vflag\*O argument is invalid.
.LI "[EPERM]"
Permission is denied for the operation requested
.LE
.SH RELATED INFORMATION
.PP
\*Luac\*O(1),
\*Lgetsysinfo\*O(2)
.EQ
delim off
.EN

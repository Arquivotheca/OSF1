.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: sigaltstack.2,v $ $Revision: 1.1.2.4 $ (DEC) $Date: 1993/12/08 15:43:04 $
.\"
.TH sigaltstack 2
.SH NAME
.PP
\*Lsigaltstack\*O \- set or get signal alternate stack context
.SH SYNOPSIS
.PP
.sS
\*L#include <signal.h>\*O
.PP
\*Lint sigaltstack (
.nL
       const  stack_t \*V*ss\*L,
.nL
              stack_t \*V*oss\*O );
.sE
.SH PARAMETERS
.PP
.VL 4m
.LI "\*Vss\*O"
If valid, specifies a pointer to a structure that indicates what
will be in effect upon return from the call to the \*Lsigaltstack\*O
function.
.LI "\*Voss\*O"
If not NULL, specifies the pointer to a structure that contains the
alternate signal stack that was in effect prior to the call to
the \*Lsigaltstack\*O function.
.LE
.SH DESCRIPTION
.PP
.iX "sigaltstack function"
This function enables another stack area to be defined where
signals can be examined for their execution status and processed.
If a signal's action, specified by the \*Lsigaction\*O(2) function,
indicates that a signal should execute on a different stack,
that signal is examined for its processing status.  A signal that
is not currently executing on the signal stack is switched to
an alternate stack for the duration of the handler's execution.
.PP
The \*Lsigaltstack\*O structure is set up as follows:
.sS
\*L
     int    \*V*ss_sp\*L
.nL
     long    \*Vss_size\*L
.nL
     int     \*Vss_flags\*O
.sE
.PP
The values for each field is as follows:
.VL
.LI "\*Vss_sp\*O"
Specifies the new base for the stack.
.LI "\*Vss_size\*O"
Specifies the size of the stack.
.LI "\*Vss_flags\*O"
Specifies the new stack state and may be set to either \*LSS_DISABLE\*O
or \*LSS_ONSTACK\*O as follows:
.IP
If \*Vss\*O is not NULL, the new state may be set to
\*LSS_DISABLE\*O, which specifies that the stack is to be
disabled and \*Vss_sp\*O and \*Vss_size\*O are ignored.
If \*LSS_DISABLE\*O is not set, the stack will be enabled.
.IP
If \*Voss\*O is not NULL, the stack state may be
either \*LSS_ONSTACK\*O or \*LSS_DISABLE\*O.  The value
\*LSS_ONSTACK\*O indicates that the process is currently
executing on the alternate stack and that any attempt to
modify it during execution will fail.  The value \*LSS_DISABLE\*O
indicates that the current signal stack is disabled.
.LE
.SH RESTRICTIONS
.PP
The value \*LSIGSTKSZ\*O defines the
average number of bytes used when allocating an alternate stack
area.  The value \*LMINSIGSTKSZ\*O defines the minimum stack
size for a signal handler.  When processing an alternate stack
size, your program should include these values in the stack
requirement to plan for the overhead of the operating system.
.SH RETURN VALUES
.PP
Upon successful completion, zero (0) is returned.  On error,
the value -1 is returned and \*Lerrrno\*O is set to indicate
the error.
.SH RELATED INFORMATION
.PP
Functions: \*Lgetcontext\*O(2), \*Lsigaction\*O(2). 
.PP
Routines: \*Lsigsetjmp\*O(3).
.PP
Files: \*Lucontext\*O(5).
.EQ
delim off
.EN

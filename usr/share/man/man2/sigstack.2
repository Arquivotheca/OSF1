.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: sigstack.2,v $ $Revision: 3.2.2.2 $ (DEC) $Date: 1992/05/15 14:50:22 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\"
.\"
.TH sigstack 2
.SH NAME
\*Lsigstack\*O \- Sets and gets signal stack context
.SH SYNOPSIS 
.sS
\*L#include <signal.h>\*O
.sp .4v
\*Lint sigstack (\*O
.nL
	\*Lstruct sigstack *\*Vinstack\*L,
.nL
	\*Lstruct sigstack *\*Voutstack \*L);
.sE 
.SH PARAMETERS
.\"from TP "  
.VL 
.LI "\*Vinstack"
\*OSpecifies the stack pointer of the new signal
stack.
.PP 
If the value of the \*Vinstack\*O parameter is nonzero, it
points to a \*Lsigstack(\|)\*O structure, which has the following members:
.rS 
\*Lstruct sigstack{\*O
.nL
	\*Lcaddr_t	ss_sp;\*O
.nL
	\*Lint ss_onstack;
}\*O
.rE 
.PP 
The value of \*Vinstack\*O->\*Lss_sp\*O specifies the stack pointer
of the new signal stack.
The value of
\*Vinstack\*O->\*Lss_onstack\*O should be set
to 1 if the process is currently running on that stack;
otherwise, it should be 0 (zero).
.PP 
If the value of the \*Vinstack\*O parameter is 0 (that is,
a null pointer), the signal stack state is not set.
.wH .RE
.\"from TP "  
.LI "\*Voutstack"
\*OPoints to the structure where the current signal stack
state is stored.
\*OIf the value of the \*Voutstack\*O parameter is nonzero, it
points to a \*Lsigstack(\|)\*O structure into which the \*Lsigstack(\|)\*O
function stores the current signal stack state.
\*OIf the value of the \*Voutstack\*O parameter is 0 (zero), the previous
signal stack state is not reported.
.LE 
.SH DESCRIPTION
.iX "sigstack function"
.iX "signal" "setting and getting stack context"
.iX "stack" "setting and getting context"
.iX "stack" "defining alternates"
.iX "signal" "defining alternate stacks"
.PP 
The \*Lsigstack(\|)\*O function defines an alternate stack on
which signals are to be processed.
.PP 
When a signal occurs and its handler is to run on the signal stack,
the system checks to see if the process is already running on that
stack.  If so, the process continues to run even after the handler returns.
If not, the signal handler runs on the signal stack, and the original
stack is restored when the handler returns.
.PP 
Use the \*Lsigaction(\|)\*O
function to specify whether a given signal handler routine is to
run on the signal stack.
.SH CAUTION
.PP 
A signal stack does not automatically
increase in size as a normal stack does. If the stack overflows, unpredictable
results can occur.
.SH RETURN VALUES
.PP 
Upon successful completion, a value of 0 (zero) is returned.
Otherwise, a value of -1 is returned and
\*Lerrno\*O is set to indicate the error.
.SH ERRORS
.PP 
If the \*Lsigstack(\|)\*O function fails,
\*Lerrno\*O
may be set to the following value:
.\"from TP 1i"  
.VL 1i
.LI "[EFAULT]"
The \*Vinstack\*O or \*Voutstack\*O parameter
points outside of the address space of the process.
.LE 
.SH RELATED INFORMATION
.PP 
Functions:
\*Lsetjmp\*O(3),
\*Lsigaction\*O(2),
\*Lsigvec\*O(2)
.iX "sigstack function"
.EQ
delim off
.EN

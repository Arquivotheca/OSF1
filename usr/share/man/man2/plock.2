.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: plock.2,v $ $Revision: 3.5.5.2 $ (DEC) $Date: 1993/10/04 17:45:22 $
.\"
...\" (c) Copyright 1990, 1991, 1992 OPEN SOFTWARE FOUNDATION, INC. 
...\" ALL RIGHTS RESERVED 
...\" OSF/1 Release 1.0.4
...\"build rmifdef
...\"
...\"
.TH plock 2
.iX "plock function"
.SH NAME
.PP
\*Lplock\*O \-  Locks a process' text and/or data segments in memory
.iX "locks" "on process' text and/or data segments in memory"
.iX "process" "locking text and/or data segments in memory"
.SH SYNOPSIS 
.sS
\*L#include\*O <\*Lsys/lock.h\*O>\*L
.sp .4v
\*Lint plock\*O(\*L
.nL
	\*Lint\*O \*Vopr\*O) ;\*L
.sE 
.SH PARAMETERS
.VL 
.LI "\*Vopr\*O"
Specifies one of the following operations:
.VL
.LI "PROCLOCK" 
Locks the text and data segments into memory.
...\"from TP "  
.LI "TXTLOCK" 
Locks the text segment into memory.
...\"from TP "  
.LI "DATLOCK" 
Locks the data segment into memory.
...\"from TP "  
.LI "UNLOCK" 
Removes locks.
.wH .RE
.LE
.LE 
.SH DESCRIPTION
.PP
The
\*Lplock(\|)\*O
function locks or unlocks a process' text segments,
data segments,
or both in physical memory.  When locked, the physical pages
containing the text or data segment will not be paged out.  It is an
error to lock a segment that is already locked.
.PP 
The caller must have
superuser
privilege to use the
\*Lplock(\|)\*O
function.
.PP 
Note that memory acquired subsequent to a
\*Lplock(\|)\*O
function may or
may not be locked in memory, depending on the specific acquisition
method.  Memory acquired using the
\*Lbrk(\|)\*O
function (or the
\*Lsbrk(\|)\*O
function) is locked if the data segment was locked.  Memory
acquired via the
\*Lmmap(\|)\*O
or
\*Lvm_allocate(\|)\*O
functions will not be locked.
.SH RETURN VALUES
.PP
Upon successful completion, a value of 0 (zero)
is returned to the calling
process.  Otherwise, a value of -1 is
returned and \*L errno\*O is set to indicate the error.
.SH ERRORS
.PP
If the
\*Lplock(\|)\*O
function fails,
\*Lerrno\*O
may be set to one of the following values:
...\"from TP 1i"  
.VL 1i
.LI "[EPERM]"
The caller does not have appropriate privilege.
...\"from TP 1i"  
.LI "[EAGAIN]"
There are insufficient resources to perform the operation.
.LI "[EINVAL]" 
The
\*Vopr\*O
parameter is PROCLOCK, but the text segment or
the data segment is already locked.
...\"from TP 1i"  
.LI "[EINVAL]" 
The
\*Vopr\*O
parameter is TXTLOCK, but the text segment is
already locked.
...\"from TP 1i"  
.LI "[EINVAL]" 
The
\*Vopr\*O
parameter is DATLOCK, but the data segment is
already locked.
...\"from TP 1i"  
.LI "[EINVAL]" 
The
\*Vopr\*O
parameter is UNLOCK, but neither the text
segment nor the data segment is locked.
.LE 
.SH RELATED INFORMATION
.PP 
Functions:
\*Lbrk\*O(2),
\*Lmmap\*O(2)
.iX "plock function"
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: setsockopt.2,v $ $Revision: 3.6.7.3 $ (DEC) $Date: 1993/10/04 18:22:30 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\"build rmifdef
.\"
.\"
.TH setsockopt 2
.SH NAME
\*Lsetsockopt\*O \- Sets socket options
.SH SYNOPSIS
.PP
.sS
\*L#include <sys/types.h>
.sp
\*L#include <sys/socket.h>\*O
.sp
\*Lint setsockopt\*O (\*L
.nL
	\*Lint \*Vsocket\*L,
.nL
	int \*Vlevel\*L,
.nL
	int \*Voption_name\*L,
.nL
	\*Lchar *\*Voption_value\*L,
.nL
	\*Lint \*Voption_len \*L);
.sE
.SH PARAMETERS
.PP
.VL
.LI "\*Vsocket"
\*OSpecifies the unique socket name.
.LI "\*Vlevel"
\*OSpecifies the protocol level at which the option resides.  To set
options at the socket
level,
specify the \*Vlevel\*O parameter as SOL_SOCKET.
To set options at
other levels,
supply the appropriate protocol number for the
protocol controlling the option.  For example, to indicate that an
option will be interpreted by the
\*OTCP protocol, set
\*Vlevel\*O to the protocol number of TCP,
as defined in the \*Lnetinet/in.h\*O
file or as determined by using
the
\*Lgetprotobyname(\|)\*O
function.
.LI "\*Voption_name"
\*OSpecifies the option to set.  The \*Voption_name\*O
parameter and any specified
options are passed uninterpreted to the appropriate protocol module
for interpretation.  The \*Lsys/socket.h\*O header file
defines the socket level
options.  The socket level options can be enabled or disabled.
The options are:
.VL 4m
.LI "SO_DEBUG"
Turns on recording of debugging information.  This
option  enables or disables debugging in the underlying protocol
modules.
This option takes an
\*Lint\*O
value.
.\".LI "SO_ACCEPTCONN"
.\"Enables or disables socket listening.
.\"This option takes an
.\"\*Lint\*O
.\"value.
.LI "SO_BROADCAST"
Permits sending of broadcast messages.
This option takes an
\*Lint\*O
value.
.LI "SO_REUSEADDR"
Specifies that the rules used in validating
addresses supplied by a \*Lbind(\|)\*O function should
allow reuse of \*Olocal addresses.
This option takes an
\*Lint\*O
value.
.LI "SO_KEEPALIVE"
Keeps connections active.  Enables the periodic
transmission of messages on a connected socket.  If the connected
socket fails to respond to these messages, the connection is broken
and processes using that socket are notified with a
SIGPIPE signal.
.LI "SO_DONTROUTE"
Indicates that outgoing messages should bypass the standard routing
facilities.  Instead, they are directed to the appropriate network
interface according to the network portion of the destination address.
.LI "SO_USELOOPBACK"
Valid only for routing sockets.  Determines if a sending socket
receives a copy of its own message.
.LI "SO_LINGER"
Lingers on a \*Lclose(\|)\*O function if
data is present.  This option controls the action taken when unsent
messages queue on a socket and a \*Lclose(\|)\*O function is
performed.
If SO_LINGER is set, the system blocks the process during
the\*L close(\|)\*O function until it can transmit the data or until
the time expires.  If SO_LINGER is not specified and a
\*Lclose(\|)\*O function is issued, the system handles the call in a
way that allows the process to continue as quickly as possible.
This option takes a
\*Lstruct linger\*O value,
defined in the \*Lsys/socket.h\*O header file, to specify
the state of the option and linger interval.
.LI "SO_OOBINLINE"
Leaves received out-of-band data (data marked
urgent) in line.
This option takes an
\*Lint\*O
value.
.LI "SO_SNDBUF"
Sets send buffer size.
This option takes an
\*Lint\*O
value.
.LI "SO_RCVBUF"
Sets receive buffer size.
This option takes an
\*Lint\*O
value.
.LI "SO_SNDLOWAT"
Sets send low-water mark.
This option takes an
\*Lint\*O
value.
.LI "SO_RCVLOWAT"
Sets receive low-water mark.
This option takes an
\*Lint\*O
value.
.LI "SO_SNDTIMEO"
Sets send time out.
This option takes an
\*Lint\*O
value.
.LI "SO_RCVTIMEO"
Sets receive time out.
This option takes an
\*Lint\*O
value.
.LI "SO_REUSEPORT"
Allows more than one process to receive UDP datagrams
destined for the same port.  The \*Lbind\*O system call binding
a process to that port must be preceded by a \*Lsetsockopt\*O system call
specifying this option.
.LE
.IP
Options at other protocol levels
vary in format and name.
.LI "\*Voption_value\*O"
To enable
a Boolean option or integer value, set the \*Voption_value\*O parameter to a nonzero
value.  To disable an option, set the \*Voption_value\*O parameter
to 0 (zero).
.LI "\*Voption_len\*O"
The \*Voption_len\*O parameter contains the size of the buffer
pointed to by the \*Voption_value\*O parameter.
.LE
.SH DESCRIPTION
.PP
.iX "setsockopt function"
.iX "socket" "setting options"
.iX "socket" "controlling socket communication"
The \*Lsetsockopt(\|)\*O function sets options associated with
a socket.  Options may exist at multiple
protocol levels.  The SO_
options are always present at the uppermost socket level.
.PP
The \*Lsetsockopt(\|)\*O function provides an application program
with the means to control a socket communication.  An application
program can use the \*Lsetsockopt(\|)\*O function to  enable debugging
at the protocol level, allocate buffer space, control timeouts, or
permit socket data broadcasts.  The \*Lsys/socket.h\*O
file defines all the options available to the \*Lsetsockopt(\|)\*O function.
.PP
\*OWhen setting socket options, specify the protocol level at which
the option resides and the name of the option.
.PP
Use the
\*Voption_value\*O and
\*Voption_len\*O parameters to access
option values for the \*Lsetsockopt(\|)\*O function.  These parameters
identify a buffer in which the value for the requested option or options
is returned.
.SH RETURN VALUES
.PP
Upon successful completion, a value of 0 (zero) is returned.
\*OOtherwise,
a value of -1 is returned and
\*Lerrno\*O is set to indicate the error.
.SH ERRORS
.PP
If the \*Lsetsockopt(\|)\*O function fails,
\*Lerrno\*O
may be set to one of the following values:
.VL 1i
.LI "[EBADF]"
The \*Vsocket\*O parameter is not valid.
.LI "[ENOTSOCK]"
The \*Vsocket\*O parameter refers to a file,
not a socket.
.LI "[ENOPROTOOPT]"
The option is unknown.
.LI "[EFAULT]"
The \*Voption_value\*O parameter is not in a readable
part of the user address space.
.LI "[EINVAL]"
The \*Voption_len\*O parameter is not valid.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Lbind\*O(2),
\*Lendprotoent\*O(3),
\*Lgetsockopt\*O(2),
\*Lgetprotobynumber\*O(3),
\*Lgetprotoent\*O(3),
\*Lsetprotoent\*O(3),
\*Lsocket\*O(2)
.EQ
delim off
.EN

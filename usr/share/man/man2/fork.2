.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: fork.2,v $ $Revision: 3.5.5.8 $ (DEC) $Date: 1994/01/14 23:24:49 $
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.TH fork 2
.SH NAME
.PP
\*Lfork\*O, \*Lvfork\*O \- Creates a new process
.SH SYNOPSIS
.PP
.sS
\*L#include <sys/types.h>
.br
\*Lpid_t fork ( void );
.br
\*Lpid_t vfork ( void );
.sE
.SH DESCRIPTION
.PP
.iX "fork function"
.iX "process" "creating via fork"
.iX "process" "forking"
.iX "child process" "creating via fork"
The \*Lfork(\|)\*O and
\*Lvfork(\|)\*O
functions create a new process
(child process) that is identical to the calling process (parent process).
.PP
The child process inherits the following attributes from the parent
process:
.\" from TP 4  
.ML
.LI
\*OEnvironment
.\" from TP 4  
.LI
\*OClose-on-exec flags
.\" from TP 4  
.LI
\*OSignal handling settings
.\" from TP 4  
.LI
\*OSet user ID mode bit
.\" from TP  
.LI
\*OSet group ID mode bit
.\" from TP  
.LI
\*OTrusted state
.\" from TP  
.LI
\*OProfiling on/off status
.\" from TP  
.LI
\*ONice value
.\" from TP  
.LI
\*OAll attached shared libraries
.\" from TP  
.LI
\*OProcess group ID
.\" from TP  
.LI
\*Ltty\*O group ID
.\" from TP  
.LI
\*OCurrent directory
.\" from TP  
.LI
\*ORoot directory
.\" from TP  
.LI
\*OFile mode creation mask
.\" from TP  
.LI
\*OFile size limit
.\" from TP  
.LI
\*OAttached shared memory segments
.\" from TP  
.LI
\*OAttached mapped file segments
.\" from TP  
.LI
All mapped regions with the same protection
and sharing mode as in the parent process
.\" from TP  
.LI
Its own copy of the parent's open directory
streams
.\" NON_SILVER
.\" #ifdef SEC_BASE
.\" from TP  
.\" .LI
.\" Login user ID
.\" .\" from TP  
.\" .LI
.\" Audit disposition and control masks
.\" #ifdef SEC_MAC
.\" .\" from TP  
.\" .LI
.\" Sensitivity label and clearance
.\" #endif /* SEC_MAC */
.\" #ifdef SEC_ILB
.\" .\" from TP  
.\" .LI
.\" Information label
.\" #endif /* SEC_ILB */
.\" #endif /* SEC_BASE */
.LE
.PP
The child process differs from the parent process in the following
ways:
.\" from TP 4  
.ML
.LI
\*OThe child process has a unique process ID and does not match any
active process group ID.
.\" from TP  
.LI
\*OThe parent process ID of the child process matches the process ID
of the parent.
.\" from TP  
.LI
\*OThe child process has its own copy of the parent process's file
descriptors.  However, each of the child's file descriptors shares
a common file pointer with the corresponding file descriptor of the
parent process.
.\" from TP  
.LI
\*OAll \*Lsemadj\*O values are cleared.
.\" from TP  
.LI
\*OProcess locks, text locks, and data locks are not inherited by
the child process.
.\" from TP  
.LI
\*OThe child process's \*Lutime(\|)\*O, \*Lstime(\|)\*O, \*Lcutime(\|)\*O,
and \*Lcstime(\|)\*O are set to 0 (zero).
.\" from TP  
.LI
\*OAny pending alarms are cleared in the child process.
.\" from TP  
.LI
Any interval timers enabled by the parent process are disabled in the
child process.
.\" from TP  
.LI
Any signals pending for the parent process are disabled for the child
process.
.LE
.PP
If a multithreaded process calls
the
\*Lfork(\|)\*O
function, the new process contains a replica of the calling thread
and its entire address space, possibly including the states of mutexes
and other resources.  Consequently, to avoid errors, the child process
should only execute operations it knows will not cause deadlock
until one of the
\*Lexec\*O
functions is called.
.SH NOTES
.PP
The
\*Lfork(\|)\*O
function is supported for multi-threaded applications.
.PP
The \*Lvfork(\|)\*O function is supported as a compatibility
interface for older BSD system programs, and can be used by compiling
with Berkeley Compatibility Library (\*Llibbsd.a\*O).\*L \*OThe
memory sharing semantics of the \*Lvfork(\|)\*O function are synonymous
with the \*Lfork(\|)\*O function.
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Full use (\*Lfork(\|)\*O)
.LE
.SH RETURN VALUES
.PP
Upon successful completion, the \*Lfork(\|)\*O function returns
a value of 0 (zero) to the child process and returns the process ID of the
child process to the parent process.  If the \*Lfork(\|)\*O function
fails, a value of -1 is returned to the parent process, no child process
is created, and \*Lerrno\*O is set to indicate
the error.
.SH ERRORS
.PP
If the
\*Lfork(\|)\*O
function fails,
\*Lerrno\*O
may be set to one of the following values:
.\" from TP 1i  
.VL 1i
.LI "[EAGAIN]"
The system-imposed limit on the total number of
processes executing for a single user would be exceeded.
This limit can be exceeded by a process with
.\" NON_SILVER
.\" #ifdef SEC_BASE
.\" the
.\" \*Llimit\*O effective
.\" #else /* SEC_BASE */
superuser
.\" #endif /* SEC_BASE */
privilege.
.\" from TP 1i  
.LI "[ENOMEM]"
There is not enough space left for this process.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Lexec\*O(2),
\*Lexit\*O(2),
\*Lgetpriority\*O(2),
\*Lgetrusage\*O(2),
\*Lnice\*O(3),
\*Lplock\*O(2),
\*Lptrace\*O(2),
\*Lraise\*O(3),
\*Lsemop\*O(2),
\*Lshmat\*O(2),
\*Lsigaction\*O(2),
\*Lsigvec\*O(2),
\*Ltimes\*O(3),
\*Lulimit\*O(3),
\*Lumask\*O(2),
\*Lwait\*O(2)
.iX "fork function"
.EQ
delim off
.EN

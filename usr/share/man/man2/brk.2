.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: brk.2,v $ $Revision: 3.2.2.5 $ (DEC) $Date: 1992/11/23 18:17:01 $
.\" 
...\"
...\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
...\" ALL RIGHTS RESERVED
...\"
...\"
...\"
...\" Copyright (c) 1980 Regents of the University of California.
...\" All rights reserved.  The Berkeley software License Agreement
...\" specifies the terms and conditions for redistribution.
...\"
...\" @(#)brk.2	6.4 (Berkeley) 6/17/86
...\"
.TH brk 2
.SH NAME
.PP
\*Lbrk\*O, \*Lsbrk\*O \- Changes data segment size
.SH LIBRARY
.PP
Standard C Library (\*Llibc.a\*O)
.SH SYNOPSIS
.PP
.sS
.\" Begin Digital-specific information CORRECTION
.\" changing 'char *addr' to 'void *addr'
.\" changing 'int sbrk' to 'void *sbrk'
.\" changing 'int incr' to 'ssize_t incr' per QAR 8851
\*Lint brk(
.nL
	void *\*Vaddr \*L);
.sp
\*Lvoid *sbrk(
.nL
	ssize_t \*Vincr \*L);
.sE
.\" End Digital-specific information CORRECTION
.SH PARAMETERS
.PP
.VL 4m
.LI "\*Vaddr\*O"
Points to the effective address of the maximum available data.
.LI "\*Vincr\*O"
Specifies the number of bytes to be added to the current break.
The value of
\*Vincr\*O
may be positive or negative.
.LE
.SH DESCRIPTION
.PP
.iX "brk function"
.iX "sbrk function"
.iX "data segment" "changing size for break"
.iX "break" "changing data segment size"
The
\*Lbrk(\|)\*O
function
sets the lowest data segment
location not used by the program (called the \*Vbreak\*O)
to
\*Vaddr\*O.
.\" commented out for Silver IFT 
.\" rounded up to the next multiple of the system's page size.
.PP
In the alternate function
\*Lsbrk(\|)\*O,
\*Vincr\*O
more bytes are added to the
program's data space, and a pointer to the
start of the new area is returned.
.PP
When a program begins execution with the
\*Lexecve(\|)\*O
function,
the break is set at the
highest location defined by the program
and data storage areas.
Therefore, only programs with growing
data areas should need to use
\*Lsbrk(\|)\*O.
.PP
The current value of the program break is reliably returned by
``\*Lsbrk(0)\*O''.
The
\*Lgetrlimit(\|)\*O
function may be used to determine
the maximum permissible size of the
data
segment.
It is not possible to set the break
beyond the
value returned from a call to the
\*Lgetrlimit(\|)\*O
function.
.PP
If the data segment was locked at the time of the
\*Lbrk(\|)\*O
function, additional memory allocated to the data segment by
\*Lbrk(\|)\*O
will also be locked.
.SH NOTES
.PP
Programmers should be aware that the concept of a current break is a
historical remnant of earlier UNIX systems.  Many existing UNIX
programs were designed using this memory model, and these programs
typically use the
\*Lbrk(\|)\*O
or
\*Lsbrk(\|)\*O
functions
to increase or decrease their available memory.  OSF/1 provides a more
flexible memory model and allows the use of discontiguous memory areas
(see, for example, the
\*Lmmap(\|)\*O
function).  Therefore, references to areas above the break may be
legitimate memory references which will not produce memory
violations.
.SH RETURN VALUES
.PP
Upon successful completion, the
\*Lbrk(\|)\*O
function returns a value of 0 (zero), and the
\*Lsbrk\*O
function returns the old break value.  If either call fails,
a value of -1 is returned and
\*Lerrno\*O
is set to indicate the error.
.SH ERRORS
.PP
If the
\*Lbrk(\|)\*O
or
\*Lsbrk(\|)\*O
function fails, no additional memory is allocated and
\*Lerrno\*O
may be set to the following value:
.VL 1i
.LI "[ENOMEM]"
The requested change would allocate more space than allowed by the
limit as returned by the
\*Lgetrlimit(\|)\*O
function.
.LE
.PP
If the
\*Lbrk(\|)\*O
function cannot allocate the requested memory, the following
message is printed:
.oS
\*Lcmd\*C: could not sbrk, return = \*Vn\*O
.oE
The
\*Vcmd\*O
specifier is the name of the command currently executing, and
\*Vn\*O
is the internal kernel error code returned from the memory allocation
routine,
\*Lvm_allocate(\|)\*O.
Note that this may occur if the requested break value would cause the
data segment to collide with previously allocated memory (for example,
memory
obtained via the
\*Lmmap(\|)\*O
or
\*Lvm_allocate(\|)\*O
call).
...\" See the \*(Rs for more information on
...\" \*Lvm_allocate(\|)\*O.
.SH RELATED INFORMATION
.PP
Functions:
\*Lexec\*O(2),
\*Lgetrlimit\*O(2),
\*Lmalloc\*O(3),
\*Lplock\*O(2),
\*Lmmap\*O(2)
.iX "brk function"
.iX "sbrk function"
.EQ
delim off
.EN

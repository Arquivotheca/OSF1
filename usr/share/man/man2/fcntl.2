.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: fcntl.2,v $ $Revision: 3.2.5.6 $ (DEC) $Date: 1994/01/13 21:30:30 $
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\"
.TH fcntl 2
.SH NAME
.PP
\*Lfcntl\*O, \*Ldup\*O, \*Ldup2\*O \- Controls open file descriptors
.SH SYNOPSIS
.PP
.sS
.sp 0.4v
\*L#include <fcntl.h>
.sp 0.4v
\*L#include <sys/types.h>
.sp 0.4v
\*L#include <unistd.h>
.sp 0.4v
\*Lint fcntl (
.nL
	int \*Vfiledes\*L,
.nL
	int \*Vrequest\*O [ \*L,
.nL
	int \*Vargument\*O | \*Lstruct flock *\*Vargument\*O  ]  \*L);\*O
.sp 0.4v
\*Lint dup(
.nL
	int \*Vfiledes \*L);
.sp 0.4v
\*Lint dup2(
.nL
	int \*Vold\*L,
.nL
	int \*Vnew \*L);
.sE
.SH PARAMETERS
.PP
.VL
.LI "\*Vfiledes\*O"
Specifies an open file descriptor obtained
from a successful \*Lopen(\|)\*O, \*Lfcntl(\|)\*O, or \*Lpipe(\|)\*O
function.
.LI "\*Vrequest\*O"
Specifies the operation to be performed.
.LI "\*Vargument\*O"
Specifies a variable that depends on the value
of the \*Vrequest\*O parameter.
.LI "\*Vold\*O"
Specifies an open file descriptor.
.LI "\*Vnew\*O"
Specifies an open file descriptor that is returned
by the \*Ldup2(\|)\*O function.
.LE
.SH DESCRIPTION
.PP
.iX "fcntl function"
.iX "dup function"
.iX "dup2 function"
.iX "file" "control operations"
.iX "control operations" "on a file"
.iX "file" "retrieving and setting status information"
.iX "status" "controlling for a file"
.iX "locks" "shared and exclusive on a file"
.iX "file" "retrieving and setting locks"
.iX "file" "locks"
.iX "file" "access modes"
.iX "access modes" "retrieving and setting for a file"
.iX "file" "retrieving and setting access modes"
The \*Lfcntl(\|)\*O function performs controlling operations
on the open file specified by the \*Vfiledes\*O parameter.
.PP
When the
\*Lfcntl(\|)\*O,
\*Ldup(\|)\*O
and
\*Ldup2(\|)\*O
functions need to block, only the calling thread is suspended rather
than all threads in the calling process.
.PP
The following are values for the \*Vrequest\*O parameter:
...\" from TP 1i
.VL
.LI "F_DUPFD"
Returns a new file descriptor as follows:
.wH 0.RS  Can not be used in nested lists
...\" from TP 4
.ML
.LI
Lowest numbered available file descriptor greater than or equal
to the \*Vargument\*O parameter, taken as type
\*Lint\*O.
...\" from TP
.LI
Same object references as the original file.
...\" from TP
.LI
Same file pointer as the original file.  (That is, both file descriptors
share one file pointer if the object is a file).
...\" from TP
.LI
Same access mode (read, write, or read-write).
...\" from TP
.LI
Same file status flags.  (That is, both file descriptors share the
same file status flags).
...\" from TP
.LI
The close-on-exec flag (FD_CLOEXEC bit) associated with
the new file descriptor is cleared so that the file will remain open across \*Lexec\*O
functions.
...\" from TP 1i
.LE
.LI "F_GETFD"
Gets the value of the close-on-exec flag
associated with the file descriptor \*Vfiledes\*O.
File descriptor flags are associated with a single file descriptor and
do not affect other file descriptors that refer to the same file.
The\*V argument\*O parameter is ignored.
...\" from TP 1i
.LI "F_SETFD"
Sets the close-on-exec flag
associated with the \*Vfiledes\*O parameter to the
value of the\*V argument\*O parameter, taken as type
\*Lint\*O.
If the
\*Vargument\*O
parameter is 0 (zero), the file remains open across the
\*Lexec\*O
functions.
If the
\*Vargument\*O
parameter is FD_CLOEXEC, the file is closed on successful execution of
the next
\*Lexec\*O
function.
...\" from TP 1i
.LI "F_GETFL"
Gets the file status flags and file access modes for the file referred
to by the \*Vfiledes\*O parameter.
The file access modes can be extracted by using the mask O_ACCMODE on
the return value.
File status flags and file access modes are associated with the file
description and do not affect other file descriptors that refer to the
same file with different open file descriptions.
The \*Vargument \*Oparameter
is ignored.
...\" from TP 1i
.LI "F_SETFL"
Sets the file status flags to the \*Vargument\*O
parameter, taken as type \*Lint\*O,
for the file to which the \*Vfiledes\*O parameter
refers.  The file access mode is not changed.
.P
...\" from TP 1i
.LI "F_GETOWN"
Gets the process ID or process group currently
receiving SIGIO and SIGURG signals. Process groups
are returned as negative values.
...\" from TP 1i
.LI "F_SETOWN"
Sets the process or process group to receive
SIGIO and SIGURG signals.  Process groups are specified by
supplying the \*Vargument\*O parameter as negative; otherwise the \*Vargument\*O
parameter,
taken as type
\*Lint\*O,
is interpreted as a process ID. If the file to which the \*Vfiledes\*O
parameter refers is a terminal, it must be the controlling terminal of the
calling process.
.\" The following text was added as per Diane Lebel's request.
.LI "F_RSETLK"
Is used by the network lock daemon (\*Lrpc.lockd\*O(8)) to communicate
with the NFS server kernel to handle locks on the NFS files.
.LI "F_RSETLKW"
Is used by the network lock daemon (\*Lrpc.lockd\*O(8)) to communicate
with the NFS server kernel to handle locks on the NFS files.
.LI "F_RGETLK"
Is used by the network lock daemon (\*Lrpc.lockd\*O(8)) to communicate
with the NFS server kernel to handle locks on the NFS files.
.\" Begin Digital correction.
.LI "F_CNVT"
.\" End Digital correction.
Is used by the network lock daemon (\*Lrpc.lockd\*O(8)) to communicate
with the NFS server kernel to handle locks on the NFS files.
.LE
.PP
The following values for the
\*Vrequest\*O
parameter
are available for record locking:
...\" from TP 1i
.VL
.LI "F_GETLK"
Gets the first lock that blocks the lock description pointed to by the
\*Vargument\*O
parameter,
taken as a pointer to type
\*Lstruct flock\*O.
The information retrieved overwrites the information passed to
the
\*Lfcntl(\|)\*O
function in the
\*Lflock\*O
structure.
If no lock is found that would prevent this lock from being created,
then the structure is left unchanged except for the lock type, which
is set to F_UNLCK.
...\" from TP 1i
.LI "F_SETLK"
Sets or clears a file segment lock according to the lock description
pointed to by
\*Vargument\*O,
taken as a pointer to type
\*Lstruct flock\*O.
F_SETLK is used to establish shared locks (F_RDLCK), or
exclusive locks (F_WRLCK), as well as remove either type of
lock (F_UNLCK).   If a shared (read) or exclusive (write)
lock cannot be set, the
\*Lfcntl(\|)\*O
function returns immediately with a value of -1.
...\" from TP 1i
.LI "F_SETLKW"
Same as F_SETLK except that if a shared or exclusive lock is blocked
by other locks, the process will wait until it is unblocked.
If a signal is received while
\*Lfcntl(\|)\*O
is waiting for a region, the function is interrupted, -1 is
returned, and
\*Lerrno\*O
is set to [EINTR].
.wH 0.RE
.LE
.PP
The O_NDELAY and O_NONBLOCK requests affect only operations against
file descriptors derived from the same \*Lopen(\|)\*O function.
In BSD, these apply to all file descriptors that refer to the object.
.PP
When a shared lock is set on a segment of a file, other
processes are able to set shared locks on that segment
or a portion of it.
A shared lock prevents any other process from setting an
exclusive lock on any portion of the protected area.
A request for a shared lock fails if the file descriptor
was not opened with read access.
.PP
An exclusive lock prevents any other process from setting
a shared lock or an exclusive lock on any portion of the
protected area.
A request for an exclusive lock fails if the file
descriptor was not opened with write access.
.PP
The
\*Lflock(\|)\*O structure
describes the type
(\*Ll_type\*O),
starting offset
(\*Ll_whence\*O),
relative offset
(\*Ll_start\*O),
size
(\*Ll_len\*O)
and
process ID
(\*Ll_pid\*O)
of the segment of the file to be affected.
.PP
The value of
\*Ll_whence\*O
is set to SEEK_SET, SEEK_CUR or SEEK_END,
to indicate that the relative offset
\*Ll_start\*O
bytes is measured from
the start of the file, from the
current position, or from the end of the file,
respectively.
The value of
\*Ll_len\*O
is the
number of consecutive bytes to be locked.
The \*Ll_len\*O value
may be negative (where the definition of
\*Loff_t\*O
permits negative values of
\*Ll_len\*O).
The
\*Ll_pid\*O
field is only used with F_GETLK to return
the process ID of the process holding
a blocking lock. After a successful F_GETLK request, the value of
\*Ll_whence\*O
becomes SEEK_SET.
.PP
If \*Ll_len\*O is positive, the area affected starts at
\*Ll_start\*O and ends at \*Ll_start\*O +
\*Ll_len \- 1\*O.
If \*Ll_len\*O is negative, the area affected starts at
\*Ll_start\*O + \*Ll_len\*O and ends at
\*Ll_start \- 1\*O.
Locks may start and extend beyond the current end of a file,
but may not be negative relative to the beginning of the file.
If
\*Ll_len\*O
is set to 0 (zero),
a lock may be set to always extend to the largest possible value
of the file offset for that file.
If such a lock also has
\*Ll_start\*O
set to 0 (zero) and
\*Ll_whence\*O
is set to SEEK_SET, the whole file is locked.
Changing or unlocking a portion from the middle of a larger locked
segment leaves a smaller segment at either end.
Locking a segment that is already locked by the calling process
causes the old lock type to be removed and the new lock type
to take effect.
All locks associated with a file for a given process are removed
when a file descriptor for that file is closed by that process
or the process holding that file descriptor terminates.
Locks are not inherited by a child process in a
\*Lfork(\|)\*O
function.
.\" The following 2 paragraphs were added as per Diane Lebel's
.\" request.
.PP
\*Lfcntl\*O() record locks are implemented in the kernel for local locks
and throughout the network by the network lock daemon
(\*Lrpc.lockd\*O(8)) for remote locks on NFS files. If the file server
crashes and has to be rebooted, the lock daemon attempts to recover all
locks that were associated with that server. If a lock cannot be
reclaimed, the process that held the lock is issued a \*LSIGLOST\*O
signal.
.PP
In order to maintain consistency in the network case, data must not be
cached on client machines. For this reason, file buffering for an NFS
file is turned off when the first lock is attempted on the file.
Buffering remains off as long as the file is open. Programs that do I/O
buffering in the user address space, however, may have inconsistent
results. The standard I/O package, for instance, is a common source of
unexpected buffering.
.PP
If a regular file has enforced record locking enabled, record locks on
the file will affect calls to other calls, including
\*Lcreat(\|)\*O,
\*Lopen(\|)\*O,
\*Lread(\|)\*O,
\*Lwrite(\|)\*O,
\*Ltruncate(\|)\*O,
and
\*Lftruncate(\|)\*O.
.PP
A potential for deadlock occurs if a process controlling
a locked region is put to sleep by attempting to lock
another process' locked region.
If the system detects that sleeping until a locked
region is unlocked would cause a deadlock, the
\*Lfcntl(\|)\*O
function fails with an [EDEADLK] error.
.SH NOTES
.PP
The
\*Ldup(\*Vfiledes\*L)\*O
function
is equivalent to
\*Lfcntl(\*Vfiledes\*L, F_DUPFD, 0)\*O.
.PP
The
\*Ldup2(\*Voldfiledes\*L, \*Vnewfiledes\*L) \*O
function
has similar functionality to:
.rS
    \*Lclose(\*Vnewfiledes\*L)
.nL
    \*Lfcntl(\*Voldfiledes\*L, F_DUPFD, \*Vnewfiledes\*L)\*O
.rE
.PP
The file locks set by the
\*Lfcntl(\|)\*O
and
\*Llockf(\|)\*O
functions
do not interact in any way with the file locks set by the
\*Lflock(\|)\*Ofunction.
If a process sets an exclusive
lock on a file using the
\*Lfcntl(\|)\*O
or
\*Llockf(\|)\*O
function, the lock will not affect any process that is setting or
clearing locks on the same file using the
\*Lflock(\|)\*O
function.  It is therefore
possible for an inconsistency to arise if
a file is locked by different processes using
\*Lflock(\|)\*O
and
\*Lfcntl(\|)\*O.
(The
\*Lfcntl(\|)\*O
and
\*Llockf(\|)\*O
functions use the same mechanism for record locking.)
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Full use
.LE
.SH RETURN VALUES
.PP
Upon successful completion, the value returned depends on the
value of the \*Vrequest\*O parameter as follows:
...\" from TP 1i
.VL 1i
.LI "F_DUPFD"
Returns a new file descriptor.
...\" from TP 1i
.LI "F_GETFD"
Returns FD_CLOEXEC or 0 (zero).
...\" from TP 1i
.LI "F_SETFD"
Returns a value other than -1.
...\" from TP 1i
.LI "F_GETFL"
Returns the value of file status flags and access modes.
(The return value will not be negative.)
...\" from TP 1i
.LI "F_SETFL"
Returns a value other than -1.
...\" from TP 1i
.LI "F_GETOWN"
Returns the value of descriptor owner.
...\" from TP 1i
.LI "F_GETLK"
Returns a value other than -1.
...\" from TP 1i
.LI "F_SETLK"
Returns a value other than -1.
...\" from TP 1i
.LI "F_SETLKW"
Returns a value other than -1.
.LE
.PP
If the \*Lfcntl(\|)\*O function fails, a value of -1 is returned
and \*Lerrno\*O is set to indicate the error.
.SH ERRORS
.PP
If the \*Lfcntl(\|)\*O function fails,
\*Lerrno\*O
may be set to one of the following values:
.VL 1i
.\" Removed per Diane Lebel - BAC
.\".LI "[EAGAIN]"
.\"The
.\"\*Vrequest\*O
.\"parameter
.\"is
.\"F_SETLK,
.\"the type of lock
.\"(\*Ll_type\*O)
.\"is a shared
.\"(F_RDLCK)
.\"or exclusive
.\"(F_WRLCK)
.\"lock, and the segment of a file to be locked is already exclusive-locked
.\"by another process.
.\".LI "[EAGAIN]"
.\".IP
.\"The
.\"\*Vrequest\*O
.\"parameter
.\"is
.\"F_SETLK,
.\"and the type is an exclusive lock and some portion of the
.\"segment of a file to be locked is already shared-locked
.\"or exclusive-locked by another process.
.LI "[EBADF]"
.\" Begin Digital-specific information
.\" The original OSF description:
.\" The \*Vfiledes\*O parameter is not a valid open file descriptor.
.\" Description from an ULTRIX-compatibility Environment Note.
The \*Vfildes\*O or \*Vold\*O parameter is not a valid open file
descriptor and the \*Vargument\*O parameter file descriptor is
negative or greater than or equal to the per-process limit.
.\" End Digital-specific information
.\" Removed to avoid redundancy - BAC
.IP
The \*Vrequest\*O parameter
is F_SETLK or F_SETLKW, the type of lock (\*Ll_type\*O)
is a shared lock (F_RDLCK), and
\*Vfiledes\*O
is not a valid file descriptor open for reading.
.IP
The type of lock (\*Ll_type\*O)
is an exclusive lock (F_WRLCK), and
\*Vfiledes\*O
is not a valid file descriptor open for writing.
.LI "[EDEADLK]"
The
\*Vrequest\*O
parameter is
F_SETLKW,
the lock is blocked by some lock from another process and putting
the calling process to sleep, and
waiting for that lock to become free
would cause a deadlock.
.LI "[EFAULT]"
The
\*Vargument\*O
parameter is an invalid address.
.LI "[EINVAL]"
The \*Vrequest\*O parameter is F_DUPFD
and the \*Vargument\*O parameter is negative or greater than or
equal to OPEN_MAX.
.IP
An illegal value was provided for the \*Vrequest\*O parameter.
.IP
The
\*Vrequest\*O
parameter is F_GETLK, F_SETLK, or F_SETLKW and the data pointed to by
\*Vargument\*O
is invalid, or
\*Vfiledes\*O
refers to a file that does not support locking.
.LI "[EMFILE]"
The \*Vrequest\*O parameter is F_DUPFD and
.\" Begin Digital-specific information
.\" Adding "too many or" from ULTRIX-compatibility Environment Note.
too many or
.\" End Digital-specific information
OPEN_MAX file descriptors are currently open
in the calling process, or no file descriptors greater than or equal to
\*Vargument\*O
are available.
.LI "[ESRCH]"
The value of the \*Vrequest\*O parameter is F_SETOWN
and the process ID given as \*Vargument\*O is not
in use.
.LI "[EINTR]"
The
\*Vrequest\*O
parameter is F_SETLKW and the
\*Lfcntl(\|)\*O
function was interrupted by a signal which was caught.
.LI "[ENOLCK]"
The
\*Vrequest\*O
parameter is F_SETLK or F_SETLKW and satisfying the lock or unlock
request would exceed the configurable system limit of NLOCK_RECORD.
This will also be returned if the file is an NFS file, and if either the
client or server system is not running \*Lrpc.lockd\*O, which is the
NFS lock manager.
.\"Removed per Diane Lebel in answer to QAR 13822
.\"result in the number of locked regions in the system
.\"exceeding a system-imposed limit.
.\" Begin Digital-specific information
.\" ENOMEM added from an ULTRIX-compatibility Environment Note.
.LI "[ENOMEM]"
The system was unable to allocate kernel memory for the requested file
descriptor.
.\" End Digital-specific information
.LI "[ENOTTY]"
The
\*Vrequest\*O
parameter is F_SETOWN and the calling process does not have a controlling
terminal, the file is not the controlling terminal, or the controlling terminal
is no longer associated with the calling process' session.
.LI "[EPERM]"
The
\*Vrequest\*O
parameter is F_SETOWN and the argument specified by the pgrp_id is valid, but
matches a process ID or process group ID of a process in another session.
.LE
.PP
If the \*Ldup(\|)\*O or \*Ldup2(\|)\*O function fails,
\*Lerrno\*O
may be set to one of the following values:
.VL 1i
.LI "[EACCES]"
\*LCmd\*O is
F_SETLK
the type of lock (\*Ll_type\*O)
is a read
(F_RDLCK) lock and the segment of a file to be locked is
already write locked by another process or the type is
a write (F_WRLCK) lock and the segment of a file to be locked is
already read or write locked by another process.
.LI "[EBADF]"
The
\*Vfiledes\*O
or \*Vold\*O parameter is not a valid open
file descriptor or the \*Vnew\*O parameter file descriptor is
negative or greater than OPEN_MAX.
.LI "[EINTR]"
The
\*Ldup2(\|)\*O
function was interrupted by a signal which was caught.
.LI "[EMFILE]"
The number of file descriptors exceeds OPEN_MAX
.\" Begin Digital-specific information
.\" Adding the following clause from an ULTRIX-compatibility Environment Note.
or the per-process limit,
.\" End Digital-specific information
or there is no file descriptor above the value of the \*Vnew\*O
parameter.
.LI "[ENOLINK]"
\*LFildes\*O is on a remote machine and the link
to that machine is no longer active.
.\" Begin Digital-specific information
.\" ENOMEM added from an ULTRIX-compatibility Environment Note.
.LI "[ENOMEM]"
The system was unable to allocate kernel memory for the requested file
descriptor.
.\" End Digital-specific information
.LE
.PP
Because in the future the variable \*Lerrno\*O is
set to
EAGAIN
rather than
EACCES
when a section of a file is already locked by another process,
portable application programs should expect and test for either value.
.SH RELATED INFORMATION
.PP
Functions:
\*Lclose\*O(2),
\*Lexec\*O(2),
\*Llockf\*O(3),
\*Lopen\*O(2),
\*Lread\*O(2),
\*Ltruncate\*O(2),
\*Lwrite\*O(2)
\*Lcreat\*O(2),
\*Ldup\*O(2),
\*Lfork\*O(2),
\*Lpipe\*O(2),
.\" Begin Digital-specific information
.\" Adding pointer from an ULTRIX-compatibility Environment Note.
.\" Comma added to the reference to pipe(2).
\*Lgetdtablesize\*O(2)
.\" End Digital-specific information
.iX "fcntl function"
.iX "dup function"
.iX "dup2 function"
.\" The following 2 commands were added as per Diane Lebel's request.
.PP
Commands:
\*Lrpc.lockd\*O(8),
\*Lrpc.statd\*O(8)
.EQ
delim off
.EN

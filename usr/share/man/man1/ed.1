.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: ed.1,v $ $Revision: 3.2.7.5 $ (DEC) $Date: 1993/11/29 13:33:32 $
.\" 
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.TH ed 1
.SH NAME
.PP
\*Led\*O, \*Le\*O, \*Lred\*O \- Edits a file line by line
.SH SYNOPSIS
.PP
.sS
\*Led\*O
\*O[\*L\(hyp\*O\ \*Vstring\*O]
\*O[\*L\(hys\*O]
\*O[\*Vfile\*O]
.\" .zA "defect,6645,R1.1.1,Added syntax for e"
.PP
\*Le\*O
\*O[\*L\(hyp\*O\ \*Vstring\*O]
\*O[\*L\(hys\*O]
\*O[\*Vfile\*O]
.\" .zZ "defect,6645,R1.1.1,Added syntax for e"
.PP
\*Lred\*O
\*O[\*L\(hyp\*O\ \*Vstring\*O]
\*O[\*L\(hys\*O]
\*O[\*Vfile\*O]
.sE
.PP
The \*Led\*O command is a line editing program that works on
one file at a time by copying it into a temporary edit buffer and making
changes to that copy.
.SH FLAGS
.PP
.VL 4m
.LI "\*L-p \*Vstring\*O"
Sets the \*Led\*O prompt to \*Vstring\*O.  The default for
\*Vstring\*O is null (no prompt).
.LI "\*L-s\*O"
.\" .zA "review, R1.1.2, XPG4"
Suppresses byte counts that the editor displays with
the \*Le\*O, \*LE\*O, \*Lr\*O, and \*Lw\*O subcommands,
suppresses diagnostic messages for the \*Le\*O, \*LE\*O, and \*Lq\*O
subcommands, and suppresses the
\*L!\*O (exclamation point) prompt after
a \*L!\*Vsystem_command\*O.  This also holds true if you
invoke \*Led\*O with a filename.
.\" .zZ "review, R1.1.2, XPG4"
.IP
Note that if you
quit without writing the file, you do not get an error message.
(Generally, before ending the program, \*Lq\*O checks to determine whether
the buffer was written to a file since the last time it was
changed.  If not, \*Lq\*O displays the \*C?\*O message.)
.LE
.SH DESCRIPTION
.PP
.iX "ed command"
.iX "red command"
.iX "editing" "files by line"
.iX "files" "editing line by line"
.iX "line editors"  "ed"
.iX "line editors" "red"
The \*Led\*O command does not alter the file itself
until you use the \*Lw\*Orite subcommand.  You can specify on the
command line the \*Vfile\*O you want to edit, or you can use
\*Led\*O subcommands to read a file into the buffer.
When \*Led\*O reads a new file into the buffer, the contents of
that file replace the buffer's previous contents, if any.
.PP
There is also a restricted version of \*Led\*O, the
\*Lred\*O command, for use with the restricted shell (\*Lrsh\*O).
With \*Lred\*O, you can edit only files that reside in
the current directory, or in the \*L/tmp\*O directory, and
you cannot use the \*L!\*Vsystem_command\*O subcommand
(see \*LSUBCOMMANDS\*O).
.SS The \*Led\*O Modes
.if n .PP
The \*Led\*O program operates in one of two modes, \*Vcommand
mode\*O and \*Vtext mode\*O.  In command mode, \*Led\*O
recognizes and executes subcommands.
In text mode, \*Led\*O adds
text to the file buffer, but does not recognize subcommands.
You enter text mode by using the \*La\*O subcommand, \*Lc\*O
subcommand, or \*Li\*O subcommand.
To leave text mode, enter \*L\&.\*O (dot) alone at the beginning of a line.
.PP
The \*Le\*O command is a supported alias for the \*Led\*O command.
.SS Subcommand Syntax
.if n .PP
An \*Led\*O subcommand consists of zero, one, or two
addresses, followed by a single-character subcommand,
possibly followed by arguments to that subcommand.  These addresses
specify one or more lines in the buffer.  Because every subcommand has
default addresses, you frequently do not need to specify addresses.
.SS Pattern Matching
.if n .PP
The \*Led\*O command supports a limited form of special
\*Vpattern-matching characters\*O that you can use as \*Vregular
expressions\*O (REs) to construct \*Vpattern
strings\*O.  You can use these patterns in addresses to specify lines
and in some subcommands to specify portions of a line.
.PP
For information about regular expressions (REs), see the \*Lgrep\*O
command.
.SS Addressing
.if n .PP
There are three types of \*Led\*O addresses:  line number
addresses, addresses relative to the current line, and pattern
addresses.
.PP
The current line is the point of reference in the buffer
and is represented by a \*L\&.\*O (dot).
When you start the \*Led\*O program, the current line is the last line
in the buffer.  As you edit a file, the current line changes to the
last line affected by a subcommand.
The current line is the default
address for several \*Led\*O commands.  (See \*LSUBCOMMANDS\*O
to find out how each subcommand affects the current line.)
.PP
Subcommands for determining and changing the current line
are described in the section \*LSUBCOMMANDS\*O.
The following are guidelines for constructing addresses:
.ML
.LI
\*L\&.\*O (dot) addresses the current line.
.LI
\*L$\*O addresses the last line of the buffer.
.LI
\*Vn\*O addresses the \*Vn\*Oth line of the buffer.
.LI
\*L\'\*Vx\*O addresses the line marked with a lowercase
letter, \*Vx\*O, by the \*Lk\*O subcommand.
.LI
The \*L/\*Vpattern\*L/\*O construct
addresses the next line that contains a matching string.  The search begins
with the line after the current line and stops when it finds a match for
the pattern.  If necessary, the search moves to the end of the buffer,
wraps around to the beginning of the buffer, and continues until it
either finds a match or returns to the current line.
.LI
The \*L?\*Vpattern\*L?\*O construct
addresses the previous line that contains a match for
the pattern.  The \*L?\*Vpattern\*L?\*O construct,
like \*L/\*Vpattern\*L/\*O, can search the entire buffer, but
it does so in the opposite direction.
.LI
An address followed by \*L\(pl\*Vnumber\*O or \*L\-\*Vnumber\*O
specifies an
address plus or minus the indicated number of lines.  (The \*L\(pl\*O
(plus sign) is optional.)
.LI
An address that begins with \*L\(pl\*O or \*L\-\*O specifies a line
relative to the current line.  For example, \*L-5\*O is the
equivalent of \*L\&.-5\*O (five lines above the current line).
.LI
An address that ends with \*L\-\*O or \*L\(pl\*O specifies the line
immediately before (\*L\-\*O) or immediately after (\*L\(pl\*O) the addressed
line.  Used alone, the \*L\-\*O character addresses the line immediately
before the current line.  The \*L\(pl\*O character addresses the line
immediately after the current line; however, the \*L\(pl\*O character is
optional.  The \*L\(pl\*O and \*L\-\*O characters have a cumulative effect;
for example, the address \*L\-\-\*O addresses the line two lines
above the current line.
.LI
For convenience, a \*L,\*O (comma) stands for the address pair
\*L1,$\*O (first line through last line) and a \*L;\*O (semicolon) stands
for the pair \*L\&.,$\*O (current line through last line).
.LE
.PP
Commands that do not accept addresses regard the presence of an
address as an error.  Commands that do accept addresses can use either
given or default addresses.  When given more addresses than it
accepts, a command uses the last (rightmost) ones.
.PP
In most cases, a \*L,\*O (comma) separates addresses (for
example \*L2,8\*O).  A \*L;\*O (semicolon) can also separate
addresses.  A \*L;\*O between addresses causes \*Led\*O to set
the current line to the first address and then calculate the second
address (for example, to set the starting line for a search based on
guidelines 5 and 6).  In a pair of addresses, the first must be
numerically smaller than the second.
.SS The \*Led\*O Limits
.if n .PP
The following is a list of \*Led\*O size limitations:
.ML
.LI
64 bytes per filename.
.LI
512 bytes per line.
.LI
256 bytes per global subcommand list.
.LI
128 kilobyte buffer size.  (Note that the buffer not only contains
the original file, but also editing information.  Each line occupies
one word in the buffer.)
.LE
.PP
The maximum number of lines depends on
the amount of memory available to you.  The maximum file size depends on
the amount of physical data storage (disk or tape drive) available or on
the maximum number of lines permitted in user memory.
.SH SUBCOMMANDS
.PP
.\" .zA "review, R1.1.2, XPG4"
In most cases, only one \*Led\*O subcommand can be entered on a
line.  The exceptions to this rule are the \*Ln\*O, \*Lp\*O, and \*Ll\*O
subcommands, which can be added to any subcommand except
\*Le\*O, \*LE\*O, \*Lf\*O, \*Lq\*O, \*LQ\*O, \*Lr\*O, \*Lw\*O, or \*L!\*O.
.\" .zZ "review, R1.1.2, XPG4"
.PP
The \*Le\*O, \*LE\*O, \*Lf\*O, \*Lr\*O, and \*Lw\*O
subcommands accept filenames as arguments.  The \*Led\*O command
stores the last filename used with a subcommand as a default filename.
The next \*Le\*O, \*LE\*O, \*Lf\*O, \*Lr\*O, or \*Lw\*O given
without a filename uses the default filename.
.PP
The \*Led\*O command responds to an error condition with one of
two messages:  \*C?\*O (question mark) or \*C?\*Vfile\*O.
When the \*Led\*O command receives an \*LINT\*O signal,
it displays a \*C?\*O and returns to command mode.
When \*Led\*O reads a file, it discards NULL characters
and all characters after the last newline character.
.PP
Unless otherwise noted, all subcommands work by default on the current
line; an address is optional.  If you specify an address, you do not type
the brackets.
.PP
When used as an address, a \*L\&.\*O (dot) refers to the current line.
When a \*L\&.\*O (dot) is shown in the first position
on an otherwise blank line, it terminates text mode and returns to
command mode.  \*Vtext\*O denotes user input in text mode.
Note that \*Vaddress\*O need not be a number; it can be
a regular expression of
the form \*L/\*VRE\*L/,/\*VRE\*L/\*O or
\*L/\*VRE\*L/;/\*VRE\*L/\*O.
.VL 4m
.LI "\*O[\*Vaddress\*O]a"
.LI "\*Vtext\*O"
.LI "\*L\&.\*O"
The \*La\*O (append) subcommand adds text to the buffer after the
addressed line.  Enter a \*L\&.\*O (dot) to return to command mode.
The \*La\*O subcommand sets the current line to
the last inserted line, or, if no lines were inserted, to the addressed
line.  Address \*L0\*O causes the \*La\*O subcommand to add
text to the beginning of the buffer.
.LI "[\*Vaddress1\*L,\*Vaddress2\*O]\*Lc\*O"
.LI "\*Vtext\*O"
.LI "\*L\&.\*O"
The \*Lc\*O (change) subcommand deletes the addressed lines, then
replaces them with new input.  Enter a \*L\&.\*O (dot) to
return to command mode.  The \*Lc\*O command sets the current
line to the last new line of input, or, if there were none, to the first
line that was not deleted.
.LI "\*O[\*Vaddress1\*O,\*Vaddress2\*O]\*Ld\*O"
The \*Ld\*O (delete) subcommand removes the addressed lines from
the buffer.  The line after the last line deleted becomes the current
line.  If the deleted lines were originally at the end of the buffer,
the new last line becomes the current line.
.LI "\*Le \*Vfile\*O"
The \*Le\*O (edit) subcommand first deletes any contents from the
buffer, then loads another file into the buffer, sets the current line
to the last line of the buffer, and displays the number of bytes
read in to the buffer.  If the buffer was changed since its
contents were last saved (with the \*Lw\*O subcommand),
\*Le\*O displays \*C?\*O before it clears the buffer.
.IP
The \*Le\*O subcommand stores \*Vfile\*O as the default
filename to be used, if necessary, by subsequent \*Le\*O,
\*LE\*O, \*Lr\*O, or \*Lw\*O subcommands.  (See the \*Lf\*O subcommand.)
.IP
When the \*L!\*O (exclamation point) character replaces \*Vfile\*O,
\*Le\*O takes the rest of the line as a shell (\*Lsh\*O)
command and reads the command output.  The \*Le\*O subcommand does
not store the name of the shell command as a default filename.
.LI "\*LE \*Vfile\*O"
The \*LE\*O (Edit) subcommand works like \*Le\*O, with one
exception:  \*LE\*O does not check for changes made to the
buffer since the last \*Lw\*O subcommand.
.LI "\*Lf [\*Vfile\*O]"
The \*Lf\*O (file name) subcommand changes the default filename
(the stored name of the last file used) to \*Vfile\*O, if
\*Vfile\*O is given.  If \*Vfile\*O is not given, the
\*Lf\*O subcommand prints the default filename.
.LI "\*O[\*Vaddress1\*L,\*Vaddress2\*O]\*Lg/\*Vpattern\*L/\*Vsubcommand_list\*O"
The \*Lg\*O (global) subcommand first marks every line that matches
the pattern.  Then, for each marked line, this subcommand sets the
current line to that line and executes \*Vsubcommand_list\*O.  Place a single
subcommand, or the first subcommand of a list, on the same
line with the \*Lg\*O subcommand; place subsequent subcommands
on separate lines.  Except for the last line, end each of these lines
with a \*L\e\*O (backslash).
.IP
The \*Vsubcommand_list\*O can include the \*La\*O,
\*Li\*O, and \*Lc\*O subcommands and their input.  If the last
command in \*Vsubcommand_list\*O is normally the \*L\&.\*O
(dot) that ends input mode, the \*L\&.\*O
(dot) is optional.  If there is no \*Vsubcommand_list\*O, \*Led\*O
displays the current line.  The \*Vsubcommand_list\*O cannot include
the \*Lg\*O, \*LG\*O, \*Lv\*O, \*LV\*O, or \*L!\*O subcommands.
.IP
The \*Lg\*O subcommand is similar to the \*Lv\*O subcommand,
which executes \*Vsubcommand_list\*O for every line that does not
contain a match for the pattern.  Note that this
subcommand defaults to the entire file, not to the current line.
.LI "\*O[\*Vaddress1\*L,\*Vaddress2\*O]\*LG/\*Vpattern\*L/\*O"
The interactive \*LG\*O (Global) subcommand first marks every line
that matches the pattern, then displays the first marked line, sets the
current line to that line, and waits for a subcommand.  The \*LG\*O
subcommand accepts any but the following \*Led\*O subcommands:  \*La\*O,
\*Lc\*O, \*Li\*O, \*Lg\*O, \*LG\*O, \*Lv\*O,
\*LV\*O, and \*L!\*O.
After the subcommand finishes, \*LG\*O displays
the next marked line, and so on.  The \*LG\*O subcommand takes a newline
character as a null subcommand.
.\" .zA "review, R1.1.2, XPG4"
The \*L&\*O subcommand causes \*LG\*O to
execute the previous subcommand again, if there is one.
.\" .zZ "review, R1.1.2, XPG4"
Note that subcommands executed within the \*LG\*O subcommand can address and
change any lines in the buffer.  The \*LG\*O subcommand can be
terminated by pressing the Interrupt key sequence.  Note that this
subcommand default to the entire file, not to the current line.
.LI "\*Lh\*O"
The \*Lh\*O (help) subcommand displays a short message
that explains the reason for the most
recent \*L?\*O notification.  The current line number is unchanged.
.LI "\*LH\*O"
The \*LH\*O (Help) subcommand causes \*Led\*O
to enter a mode in which help messages (see the \*Lh\*O command)
are displayed for all subsequent \*L?\*O notifications.  The
\*LH\*O subcommand toggles this mode, and is initially set
to "off".  The current line number is unchanged.
.LI "\*O[\*Vaddress\*O]\*Li\*O"
.LI "\*Vtext\*O"
.LI "\*L\&.\*O"
The \*Li\*O (insert) subcommand inserts text before the addressed
line and sets the current line to the last inserted line.
Enter \*L\&.\*O (dot) to return to command mode.
If no lines are inserted, \*Li\*O sets the current line to the
addressed line.  This subcommand differs from the \*La\*O subcommand
only in the placement of the input text.  Address \*L0\*O is not
legal for this subcommand.
.LI "\*O[\*Vaddress1\*L,\*Vaddress1+1\*O]\*Lj\*O"
The \*Lj\*O (join) subcommand joins contiguous lines by removing the
intervening newline characters.  If given only one address, \*Lj\*O
does nothing.  (For splitting lines, see the \*Ls\*O subcommand.)
Note that lines that exceed the line length limit cannot
be joined.  If lines are joined, the current line number is set
to the address of the joined line; otherwise, the current line
number is unchanged.
.LI "\*O[\*Vaddress\*O]k\*Vx\*O"
The \*Lk\*O (mark) subcommand marks the addressed line with name
\*Vx\*O, which must be a lowercase letter.  The address \&'\*Vx\*O
(single quotation mark before the marking character)
then addresses this line.  The \*Lk\*O subcommand does not change
the current line.  Note that marks attached to lines are deleted with
the line.
.LI "\*O[\*Vaddress1\*L,\*Vaddress2\*O]\*Ll\*O"
The \*Ll\*O (list) subcommand displays the addressed lines.
The \*Ll\*O subcommand wraps long lines and, unlike the
\*Lp\*O subcommand, represents nonprinting characters as
3-digit octal numbers with a \*L\e\*O (backslash) preceding
each byte in the character.  The following characters, however,
are written as escape sequences:
.VL 4m
.LI "\*L\e\e\*O"
Backslash
.LI "\*L\ea\*O"
Alert
.LI "\*L\eb\*O"
Backspace
.LI "\*L\ef\*O"
Formfeed
.LI "\*L\en\*O"
Newline
.LI "\*L\er\*O"
Carriage return
.LI "\*L\et\*O"
Tab
.LI "\*L\ev\*O"
Vertical tab
.LE
.IP
.\" .zA "review, R1.1.2, XPG4"
A \*L$\*O (dollar sign) character is placed at the end of each line,
so that a real (literal) \*L$\*O at the end of a line cannot be
misinterpreted.
.\" .zZ "review, R1.1.2, XPG4"
.IP
An \*Ll\*O subcommand can
be appended to any \*Led\*O subcommand except:
\*Le\*O, \*LE\*O, \*Lf\*O, \*Lq\*O, \*LQ\*O, \*Lr\*O, \*Lw\*O, or \*L!\*O.
.LI "\*O[\*Vaddress1\*L,\*Vaddress2\*O]\*Lm\*Vaddress3\*O"
The \*Lm\*O (move) subcommand repositions the addressed lines.
The first moved line follows the line addressed by \*Vaddress3\*O.
Address \*L0\*O for \*Vaddress3\*O causes \*Lm\*O to move
the addressed lines to the beginning of the file.  The line
specified by \*Vaddress3\*O
cannot be one of the lines to be moved.  The \*Lm\*O subcommand sets
the current line to the last moved line.
.LI "\*O[\*Vaddress1\*L,\*Vaddress2\*O]\*Ln\*O"
The \*Ln\*O (number) subcommand displays the addressed lines, each
preceded by its line number and a tab character (displayed as
spaces); the \*Ln\*O subcommand leaves the current line
at the last line displayed.
.\" .zA "review, R1.1.2, XPG4"
An \*Ln\*O subcommand can be appended to any ed subcommand
except \*Le\*O, \*LE\*O,
\*Lf\*O, \*Lq\*O, \*LQ\*O, \*Lr\*O, \*Lw\*O, or \*L!\*O.
.\" .zZ "review, R1.1.2, XPG4"
.LI "\*O[\*Vaddress1\*L,\*Vaddress2\*O]\*Lp\*O"
The \*Lp\*O (print) subcommand displays the addressed lines and
sets the current line set to the last line displayed.  A \*Lp\*O
subcommand can be appended to any \*Led\*O subcommand except:
.\" .zA "review, R1.1.2, XPG4"
\*Le\*O, \*LE\*O, \*Lf\*O,
\*Lq\*O, \*LQ\*O, \*Lr\*O, \*Lw\*O, or \*L!\*O.  For example,
the subcommand \*Ldp\*O deletes the current line and displays the
new current line.
.\" .zZ "review, R1.1.2, XPG4"
.LI "\*LP\*O"
The \*LP\*O (Prompt) subcommand turns the \*Led\*O prompt string \*L*\*O
or the string specified by the \*L-p\*O flag
on or off.  Initially, \*LP\*O is off.
.LI "\*Lq\*O"
The \*Lq\*O (quit) subcommand exits the \*Led\*O program.
Before ending the program, \*Lq\*O checks to determine whether
the buffer was written to a file since the last time it was
changed.  If not, \*Lq\*O displays the \*C?\*O message.
Note that you do not get more than one prompt in a row; a
second consecutive \*Lq\*O quits the
\*Led\*O program without displaying a prompt.
.LI "\*LQ\*O"
The \*LQ\*O (Quit) subcommand exits the \*Led\*O program
without checking for changes to the buffer since the last \*Lw\*O
subcommand (compare with the \*Lq\*O subcommand).
.LI "\*O[\*Vaddress\*O]\*Lr \*Vfile\*O"
The \*Lr\*O (read) subcommand reads a file into the buffer after
the addressed line; \*Lr\*O does not delete the previous contents
of the buffer.  When entered without \*Vfile\*O, \*Lr\*O reads
the default file, if any, into the buffer (see \*Le\*O
and \*Lf\*O subcommands).  The \*Lr\*O subcommand does not change the default
filename.  Address \*L0\*O causes \*Lr\*O to read a file in
at the beginning of the buffer.
.\" .zA "review, R1.1.2, XPG4"
After it reads a file successfully,
\*Lr\*O, displays the number of bytes read into the buffer and
sets the current line to the last line read.
.\" .zZ "review, R1.1.2, XPG4"
.IP
If \*L!\*O
(exclamation point) replaces \*Vfile\*O in a \*Lr\*O
subcommand, \*Lr\*O takes the rest of the line as a shell
(\*Lsh\*O) command whose output is to be read.  The \*Lr\*O
subcommand does not store the names of shell commands as default filenames.
.LI "\*O[\*Vaddress1\*L,\*Vaddress2\*O]\*Ls/\*Vpattern\*O/\*Vreplacement\*L/\*Vflags\*O"
The \*Ls\*O (substitute) subcommand searches each addressed line
for a string that matches the \*Vpattern\*O and then replaces the string with
the specified \*Vreplacement\*O string.  Without a number \*Vn\*O or
the global indicator \*Lg\*O, \*Ls\*O replaces only the first matching
string on each addressed line.  With \*Vn\*O, \*Ls\*O
replaces the \*Vn\*Oth occurrence of \*Vpattern\*O on the addressed line.
With the \*Lg\*O indicator, \*Ls\*O replaces every occurrence of the
matching string on each
addressed line.
.IP
If \*Ls\*O does not find a match for the pattern,
it returns the error message \*C?\*O.  Any character except a space
or a newline character can separate (delimit) the \*Vpattern\*O and
\*Vreplacement\*O.  The \*Ls\*O subcommand sets the current
line to the last line changed.
.IP
An \*L&\*O (ampersand) in the \*Vreplacement\*O string is a
special symbol that has the same value as the \*Vpattern\*O string.
So, for example, the subcommand \*Ls/out/&ing/\*O has the same
effect as the subcommand \*Ls/out/outing/\*O and replaces
\*Lout\*O with \*Louting\*O on the current line.  A backslash
before the ampersand (\*L\e&\*O) removes this special meaning
of \*L&\*O in \*Vreplacement\*O.
.IP
The \*L%\*O (percent sign), when used by itself as
\*Vreplacement\*O, causes \*Ls\*O to use the previous
\*Vreplacement\*O again.  The \*L%\*O character does not have
this special meaning if it is part of a longer \*Vreplacement\*O or
if it is preceded by a \*L\e\*O (backslash).
.IP
Lines can be split by substituting newline characters into them.  In
\*Vreplacement\*O, the sequence \*L\e<Return>\*O quotes the newline
character (not displayed) and moves the cursor to the nextline for the
remainder of the string.
.IP
The value of \*Vflags\*O can be the following:
.VL 4m
.LI "\*Vcount\*O"
Substitutes for the \*Vcount\*Oth occurrence only of the regular
expression that is found on each addressed line.
.LI "\*Lg\*O"
Substitutes globally for all nonoverlapping instances of the regular
expression, instead of just substituting for the first instance.
.LI "\*Ll\*O"
Displays the final line in which a substitution was made in the
format specified for the \*Ll\*O subcommand.
.LI "\*Ln\*O"
Displays the final line in which a substitution was made in the
format specified for the \*Ln\*O subcommand.
.LI "\*Lp\*O"
Displays the final line in which a substitution was made in the
format specified for the \*Lp\*O subcommand.
.LE
.LI "\*O[\*Vaddress1\*L,\*Vaddress2\*O]\*Lt\*Vaddress3\*O"
The \*Lt\*O (transfer) subcommand inserts a copy of the addressed
lines after \*Vaddress3\*O.  The \*Lt\*O subcommand accepts
address \*L0\*O (for inserting lines at the beginning of the
buffer).  The \*Lt\*O subcommand sets the current line to
the last line copied.
.LI "\*Lu\*O"
The \*Lu\*O (undo) subcommand restores the buffer to the state it
was in before it was last modified by an \*Led\*O subcommand.  The
commands that \*Lu\*O can undo are \*La\*O, \*Lc\*O,
\*Ld\*O, \*Lg\*O, \*LG\*O, \*Li\*O, \*Lj\*O,
\*Lm\*O, \*Lr\*O, \*Ls\*O, \*Lt\*O, \*Lu\*O, \*Lv\*O,
and \*LV\*O.
.\" .zA "review, R1.1.2, XPG4"
All changes made to the buffer by a \*Lg\*O, \*LG\*O, \*Lv\*O, or
\*LV\*O global command are undone as a single change.  The current
line number is set to the value it had before the command being undone started.
.\" .zZ "review, R1.1.2, XPG4"
.LI "\*O[\*Vaddress1\*L,\*Vaddress2\*O]\*Lv/\*Vpattern\*O/\*Vsubcommand_list\*O"
The \*Lv\*O subcommand executes the subcommands in
\*Vsubcommand_list\*O for each line that does not contain a match for
the pattern.  The \*Lv\*O subcommand is a complement for the global
subcommand \*Lg\*O, which executes \*Vsubcommand_list\*O for
every line that does contain a match for the pattern.
.LI "\*O[\*Vaddress1\*L,\*Vaddress2\*O]\*LV/\*Vpattern\*O/"
The \*LV\*O subcommand first marks every line that does not
match the pattern, then displays the first marked line, sets the current
line to that line, and waits for a subcommand.  The \*LV\*O subcommand
complements the \*LG\*O subcommand, which marks the
lines that do match the pattern.
.LI "\*O[\*Vaddress1\*L,\*Vaddress2\*O]\*Lw \*Vfile\*O"
The \*Lw\*O (write) subcommand copies the addressed lines from the
buffer to the file named in \*Vfile\*O.  If the file does not
exist, the \*Lw\*O subcommand creates it with permission mode 666
(read and write permission for everyone), unless the \*Lumask\*O
setting specifies another file creation mode.  (For information about
file permissions, see \*Lumask\*O in \*Lsh\*O and \*Lchmod\*O.)
.IP
The \*Lw\*O subcommand does not change the default filename
(unless \*Vfile\*O is the first filename used since you started
\*Led\*O).  If you do not provide a filename, \*Led\*O uses
the default filename, if any (see the \*Le\*O, \*LE\*O, and \*Lf\*O
subcommands).  The \*Lw\*O subcommand does not change the current line.
.IP
If \*Led\*O successfully writes the file, it displays the number
of characters written.  When \*L!\*O (exclamation point)
replaces \*Vfile\*O,
\*Led\*O takes the rest of the line as a shell (\*Lsh\*O)
command whose output is to be read; \*Lw\*O does not save shell
command names as default filenames (same effect as \*L!\*O).
.\" .zA "review, R1.1.2, XPG4"
The use of the write subcommand with \*L!\*O (exclamation point) is
not considered the last \*Lw\*O command that wrote the entire buffer.
Thus, this alone does not prevent the warning to the user if an
attempt is made to destroy the editor buffer through the \*Le\*O or
\*Lq\*O subcommands.
.\" .zZ "review, R1.1.2, XPG4"
.IP
The address \*L0\*O is not a legal
address for the \*Lw\*O subcommand.  Therefore, it is not possible
to create an empty file with \*Led\*O.
.LI "\*O[\*Vaddress\*O]\*L=\*O"
Without an address, the \*L=\*O (equal sign) subcommand displays the
current line number.  With the address \*L$\*O, \*L=\*O (equal sign)
displays the
number of the last line in the buffer.  The \*L=\*O subcommand does not
change the current line and cannot be included in a \*Lg\*O or
\*Lv\*O subcommand list.
.LI "\*L!\*Vsystem_command\*O"
The \*L!\*O (exclamation point) subcommand allows system commands
to be run from within \*Led\*O.  Anything following \*L!\*O on
an \*Led\*O subcommand line is interpreted as a system command.
Within the text of that command string, \*Led\*O replaces the
unescaped character \*L%\*Owith the current filename, if there is one.
.IP
When used as the first character of a shell command (after the
\*L!\*O that runs a subshell), \*Led\*O replaces the
\*L!\*O character with the previous system command; for example, the
command \*L!!\*O repeats the previous system command.  If the
command interpreter (the \*Lsh\*O command) expands the command
string, \*Led\*O echoes the expanded line.  The \*L!\*O
subcommand does not change the current line.
.\" .zA "review, R1.1.2, XPG4"
If any replacements of \*L%\*O and/or \*L!\*O are performed, the
modified line is written to standard output before the command is
executed.
.\" .zZ "review, R1.1.2, XPG4"
.LI "\*Vnumber\*O"
.LI "\*L\(pl\*Vnumber\*O"
.LI "\*L-\*Vnumber\*O"
The \*Led\*O editor interprets a number alone on a line as an address and
displays the addressed line.  Addresses can be absolute (line numbers or
\*L$\*O) or relative to the current line
(\*L\(pl\*Vnumber\*O or \*L\-\*Vnumber\*O).  Entering a
newline character (a blank line) is equivalent to \*L\(pl1p\*O
and is useful for stepping forward through the buffer one line at a time.
.LE
.SH EXIT VALUES
.PP
The \*Led\*O editor returns a value of 0 (zero) if execution is
successfully completed; if an error occurs, a value greater
than 0 (zero) is returned.
.SH RELATED INFORMATION
.PP
Commands:  \*Lchmod\*O(1), \*Ledit\*O(1), \*Lex\*O(1),
\*Lgrep\*O(1)/\*Legrep\*O(1)/\*Lfgrep\*O(1),
\*Lrsh\*O(1), \*Lsed\*O(1), \*Lsh\*O(1),
\*Lstty\*O(1), \*Lvi\*O(1)/\*Lvedit\*O(1)/\*Lview\*O(1).
.PP
Functions:  \*Lregexp\*O(3).
.PP
Files:  \*Llocale\*O(4).
.\" Begin Digital-specific information
.\" Changed book reference to DEC OSF/1 User's Guide rather than the OSF book.
.PP
Books:
\*ECommand and Shell User's Guide\*O
.\" End Digital-specific information
.EQ
delim off
.EN

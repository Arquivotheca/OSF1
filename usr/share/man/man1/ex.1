.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: ex.1,v $ $Revision: 3.2.7.3 $ (DEC) $Date: 1993/10/19 14:19:22 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" Begin Digital-specific information CORRECTION
.\" Added the 'e' synonym to the NAME line for AES conformance.
.\" End Digital-specific information CORRECTION
.\" 
.TH ex 1
.SH NAME
\*Lex\*O, \*Le\*O \- Edits lines in a file interactively, with screen display.
.SH SYNOPSIS
.PP
.sS
.in +.5i
.ti -.5i
\*Lex\*O
\*O[\*L\(hylRsv\*O]
\*O[\*L\(hyc \*Vsubcommand\*O]
\*O[\*L\(hyw\*Vnumber\*O]
\*O[\*L+\*Vsubcommand\*O]
\*O[\*L\(hy\*O]
\*O[\*Vfile\*O\ \&.\&.\&.]
.in -.5i
.PP
\*Lex\*O
\*O[\*L\(hylRsv\*O]
\*O[\*L\(hyt\*O\ \*Vtag\*O]
\*O[\*Vfile\*O\ \&.\&.\&.]
.PP
\*Lex\*O
\*L\(hyr\*O[\*Vfile\*O]
\*O[\*L\(hylRsv\*O]
\*O[\*Vfile\*O]
.sE
.SH FLAGS
.PP
.VL 4m
.LI "\*L-c \*Vsubcommand\*O"
Executes the specified \*Lex\*O subcommand (\*Vcommand\*O)
before displaying the file for which the editor was invoked.
.LI "\*L\-l\*O"
Indents appropriately for LISP code, and accepts the \*L(\*O, \*L)\*O,
\*L{\*O, \*L}\*O,
\*L[\*O, and \*L]\*O characters (parentheses, braces, and
brackets) as text rather than
interpreting them as \*Lvi\*O subcommands.  The LISP modifier is
active in \*Lopen\*O or \*Lvisual\*O modes.
.LI "\*L\-r[\*Vfile\*O]"
Recovers \*Vfile\*O after an editor or system crash.  If you do
not specify \*Vfile\*O, a list of all saved files is displayed.
.LI "\*L\-R\*O"
Sets the \*Lreadonly\*O option, preventing
you from altering the file.
.LI "\*L-s\*O"
Does not display the filename or the \*C:\*O prompt
upon entering \*Lex\*O.  (Silent mode.)
.LI "\*L\-t\*Vtag\*O"
Loads the file that contains \*Vtag\*O and positions the
editor at \*Vtag\*O.  To use this flag, you must first create
a database of function names and locations using the
\*Lctags\*O command.
.LI "\*L\-v\*O"
Invokes the \*Lvisual\*O editor.
When the \*L\-v\*O flag is specified, an enlarged set of
subcommands is available, including screen editing and cursor movement
features.  See \*Lvi\*O.
.LI "\*L\-w\*Vnumber\*O"
Sets the default window size to \*Vnumber\*O lines.
.LI "\*L\-\*O"
Suppresses all interactive user feedback.  If you use this flag, file
input/output errors do not generate an error message.
.LI "\*L\(pl\*Vsubcommand\*O"
Begins the edit with the specified editor search or subcommand.  When
\*Vsubcommand\*O is not entered, a \(pl (plus sign)
sets the current line to
the bottom of the file.  Normally \*Lex\*O sets the current line to the
last line of the file, or to some specified tag or pattern.
.LE
.SH DESCRIPTION
.PP
.iX "ex command"
.iX "editing" "lines interactively"
.iX "line editors"
.iX "files" "editing lines interactively"
.iX "editors" "line"
.iX "editors" "ex"
The \*Lex\*O command is a line-oriented text editor that is a
subset of the \*Lvi\*O screen editor.
.\" Begin Digital-specific information CORRECTION
.\" Added this sentence to explain the 'e' in the NAME line.
(The \*Le\*O command is a synonym for \*Lex\*O.)
.\" End Digital-specific information CORRECTION
.PP
The \*Lex\*O editor is
similar to \*Led\*O, but is more powerful, providing multiline
displays and access to a screen editing mode.  You may prefer to call
\*Lvi\*O directly to have environment variables set for screen
editing.  Also \*Ledit\*O, a
limited subset of \*Lex\*O, is available for
novices or casual use.
.PP
The \*Vfile\*O argument specifies the file or files to be
edited.  If you supply more than one file, the \*Lex\*O
editor edits each file in the specified order.
.PP
To determine how your terminal can perform more efficiently,
\*Lex\*O uses the terminal capability database
\*Lterminfo\*O and the type of terminal you are using from
the \*LTERM\*O environment variable.
.PP
The \*Lex\*O editor has the following features:
.ML
.LI
The \*Lz\*O subcommand lets you
access windows of text, and you can scroll through text by pressing
\*L<Ctrl-d>\*O and \*L<Ctrl-u>\*O (visual (\*L\-v\*O) mode only).
.LI
The \*Lundo\*O subcommand allows you to reverse the last
subcommand, even if it is an \*Lundo\*O subcommand.  Thus, you
can switch back and forth between the latest change in the edit file
and the last prior file status and
view the effect of a subcommand without that effect being permanent.
Commands that affect the external environment cannot be undone, however.
The \*Lex\*O command displays changed lines and
indicates when more than a few lines are affected by a subcommand.
The \*Lundo\*O subcommand causes all marks to be lost on
lines changed and then restored if the marked lines were changed.  It
does not clear the \*Lbuffer modified\*O condition. You can:
.LI
Retrieve your work (except changes that were in the buffer)
if the system or the editor crashes by reentering the editor with
the \*L\-r\*O flag and the file name.
.LI
Edit a sequence or group of files.  You can
use the \*Lnext\*O subcommand to edit each file
on the command line in turn, or to specify
a list of file names to edit (using the shell pattern matching syntax).
The wildcard character \*L%\*O (percent sign)
represents the name of the current edit
file and can be used to form file names.
.LI
Copy and move text within a file and between files
(see the \*Lco\*O, \*Ld\*O, \*Lya\*O, and \*Lpu\*O subcommands).
You use a group of buffers (that have the names
of the ASCII letter \*La\*O to \*Lz\*O) to
move text.  You can temporarily
place text in these buffers and copy or reinsert it in a file, or you can carry
it over to another file.  The buffers are cleared when you
quit the editor.  The editor does not notify you if text is placed in a
buffer and not used before exiting the editor.
.LI
Use patterns that match words.
A pattern can be a fixed character string or a regular expression.
.IP
A regular expression is a string constructed of special pattern-matching
characters.  Using a regular expression to locate text in a file gives you
more flexibility than trying to locate a fixed character string.  For more
information about regular expressions, see \*Lgrep\*O.
.LE
.SS Editing Modes
.VL 4m
.LI "Command mode"
When you start the \*Lex\*O editor, it is in command mode.
Enter \*Lex\*O subcommands at the \&: (colon) prompt.  Pressing
\*L<Esc>\*O cancels a partial subcommand.
.LI "Text entry mode"
Entered by \*La\*O, \*Li\*O, and \*Lc\*O.  In this
state, you can enter text.  Entry state ends normally with a line
that has only a \*L\&.\*O (period) on it or ends abruptly if you press
the Interrupt key sequence.
.LI "Visual and open mode"
Entered by \*Lvi\*O, \*Lvi\&.\*O,
\*Lvi\-\*O, or \*Lo\*O.  Each of the first three commands
gives you a full screen \*Lvi\*O editor, but puts the current line
in a different place on entry.  Enter \*Lvi\*O to put the current line
at the top of the screen; enter \*Lvi\&.\*O
to put the current line in the middle of
the screen; and enter \*Lvi\-\*O to put the
current line at the bottom of the screen.
.IP
The \*Lo\*O command opens a one-line window.
All three commands share the input state of the
\*Lvi\*O editor.  Press \*L<Esc>\*O to exit text entry mode.
To return to the \*Lex\*O command state at the current line, enter
\*LQ\*O while in command mode.
.LE
.SS Limits of \*Lex\*O
The \*Lex\*O editor has the following maximum limits:
.ML
.LI
2048 bytes per line
.LI
256 bytes per global command list
.LI
128 bytes in the previous inserted and deleted text
.LI
128 bytes in a shell escape command
.LI
128 bytes in a string-valued option
.LI
30 bytes in a tag name
.LI
128 map macros with 2048 bytes total
.LE
.SS Subcommands
.IP
The \*Lex\*O subcommands affect the current line unless you specify
otherwise.  For information about how to address lines in a file,
see \*Ledit\*O and \*Lvi\*O.  For a complete description of edit
options, see \*LSetting Options\*O on the \*Lvi\*O reference page.
.\" .zA "review, R1.1.2, XPG4"
.VL 4m
.LI "\*Lab\*O[\*Lbrev\*O] \*Vword\*O \*Vabbrev\*O"
Adds the specified abbreviation to the current abbreviation list.
.LI "\*O[\*Vline\*O] \*La\*O[\*Lppend\*O][\*L!\*O]"
Enters input mode and places text after the specified line.
To place the text at the beginning of the buffer, specify line 0.
The \*L!\*O (exclamation point)
toggles the \*Lautoindent\*O editor option setting for
the execution of this subcommand.
.LI "\*Lar\*O[\*Lgs\*O]"
Writes the argument list (the list of arguments on start-up)
with the current argument inside \*L[\*O and \*L]\*O (left and
right brackets).  The argument list can later
be replaced by the arguments of the \*Lnext\*O subcommand.
.LI "\*O[\*Vrange\*O] \*Lc\*O[\*Lhange\*O][\*L!\*O] [\*Vcount\*O]"
Enters input mode and replaces the lines in \*Vrange\*O with
the input text.  The current line is the last line
input.  The \*L!\*O (exclamation point),
toggles the \*Lautoindent\*O editor option setting for
the execution of this subcommand.
.LI "\*Lchd\*O[\*Lir\*O][\*L!\*O] [\*Vdirectory\*O]"
.LI "\*Lcd\*O[\*L!\*O] [\*Vdirectory\*O]"
Changes the current working directory to \*Vdirectory\*O.  If the
current buffer has been modified since the last write, the subcommand
issues a warning and fails.  You can override this warning by
appending a \*L!\*O (exclamation point) to the subcommand name.
.LI "\*O[\*Vrange\*O] \*Lco\*O[\*Lpy\*O] \*Vline\*O [\*Vflags\*O]"
.LI "\*O[\*Vrange\*O] \*Lt \*Vline\*O [\*Vflags\*O]"
Places a copy of the lines in \*Vrange\*O after the specified
line.  Line 0 causes the lines to be
placed at the beginning of the buffer.
.LI "\*O[\*Vrange\*O] \*Ld\*O[\*Lelete\*O] [\*Vbuffer\*O] [\*Vcount\*O] [\*Vflags\*O]"
Deletes the specified lines from the buffer.  If you specify
a named buffer, the deleted text is placed there; otherwise, the deleted
text is placed in the unnamed buffer.
The current line is the line following the deleted
lines, or the last line if the deleted lines were at the end.
.LI "\*Le\*O[\*Ldit\*O][\*L!\*O] [\*L+\*Vline\*O] [\*Vfile\*O]"
.LI "\*Lex\*O[\*L!\*O] [\*L+\*Vline\*O] [\*Vfile\*O]"
Edits \*Vfile\*O.  If the current buffer has been modified
since the last write, the subcommand writes a warning and terminates.
You can override this action by appending the \*L!\*O
(exclamation point) character to the subcommand (for example,
\*Le! \*Vfile\*O).
.IP
If the \*L+\*Vline\*O argument is specified, the current line
is the specified position, where \*Vline\*O can be a
number (or \*L$\*O) or can be specified as \*L/\*Vpattern\*O or
\*L?\*Vpattern\*O.  Preceding the pattern with a \*L/\*O (slash)
starts a search from the beginning of the file.  Preceding the pattern
with a \*L?\*O (question mark) starts a search from the end of the file.
This subcommand is affected by the \*Lautowrite\*O and
\*Lwriteany\*O editor options.
.LI "\*Lf\*O[\*Lile\*O] [\*Vfile\*O]"
Writes the current pathname, the number of lines, and the current position
(if no \*Vfile\*O argument was specified).  If \*Vfile\*O is
specified, \*Lex\*O changes the current filename to \*Vfile\*O without
changing the contents of the buffer or the previous current file.
.LI "\*O[\*Vrange\*O] \*Lg\*O[\*Llobal\*O] \*L/\*Vpattern\*L/ \*O[\*Vsubcommands\*O]"
.LI "\*O[\*Vrange\*O] \*Lv\*O \*L/\*Vpattern\*L/ \*O[\*Vsubcommands\*O]"
Marks the lines within the given range that match (\*Lg\*O) or do not
match (\*Lv\*O) the given pattern.  Then executes the \*Lex\*O
subcommands with the current line set to each marked line.
.IP
You can specify multiple subcommands, one per line, by escaping each
newline character with a \*L\e\*O (backslash).  If the \*Vsubcommands\*O
argument is not specified, each line is written.  For the \*Lappend\*O,
\*Lchange\*O, and \*Linsert\*O subcommands, the input text is included
as part of the \*Lglobal\*O subcommand; in this case, you can
omit the terminating period if it ends
\*Vsubcommands\*O.  The \*Lvisual\*O subcommand
can be specified as part of \*Vsubcommands\*O.  In this mode, input is
taken from the terminal.  Entering a \*LQ\*O from visual mode selects
the next line matching the pattern and re-enters visual mode,
until the list is exhausted.
.IP
You cannot use
the \*Lglobal\*O subcommand itelf and the \*Lundo\*O subcommand
in the \*Vsubcommands\*O argument.  The
\*Lautoprint\*O, \*Lautoindent\*O, and \*Lreport\*O editor options
are inhibited for the duration of the \*Lg\*O or \*Lv\*O subcommand.
.LI "\*O[\*Vline\*O] \*Li\*O[\*Lnsert\*O][\*L!\*O]"
Enters input mode and places the input text before the specified line.
The \*L!\*O (exclamation point)
toggles the \*Lautoindent\*O editor option setting for
the execution of this subcommand.
.LI "\*O[\*Vrange\*O] \*Lj\*O[\*Loin\*O][\*L!\*O] [\*Vcount\*O] [\*Vflags\*O]"
Joins the text from the specified lines together into one line.  In
the POSIX locale, when the last character on the first line of a pair
of lines to be joined is a \*L\&.\*O (period), two spaces are added
following the period; when the last character of the first line is a
space or when the first character on the second line of the pair is a
\*L)\*O (right parenthesis), no spaces are added; otherwise, one space
is added following the last character of the first line.  Extra spaces
at the start of a line are discarded.
.IP
Appending a \*L!\*O (exclamation point) character to the \*Ljoin\*O
subcommand causes a simpler join with no whitespace processing,
independent of the current locale.
.LI "\*O[\*Vrange\*O] \*Ll\*O[\*List\*O] [\*Vcount\*O] [\*Vflags\*O]"
Writes the addressed lines;
nonprintable characters are written as multicharacter sequences.  The
end of the line is marked with a \*L$\*O (dollar sign).
.IP
Long lines are folded.  The current line is the last line written.
.LI "\*Lmap\*O[\*L!\*O] [\*Vx rhs\*O]"
Defines macros for use in visual mode.  The first argument must be a
single character or the sequence \*L#\*Vdigit\*O (one of the
terminal's numbered function keys).  When this character or function
key is entered in visual mode, the action is as if the corresponding
\*Vrhs\*O had been entered.  If the \*L!\*O (exclamation point)
character is appended to the subcommand name \*Lmap\*O, the mapping is
effective during input mode rather than command mode.  This allows
\*Vx\*O to have two different macro definitions at the same time: one
for command mode and one for input mode.  Nonprintable characters,
except for the Tab character, require escaping with \*L<Ctrl-V>\*O (or
\*L<Ctrl-Q>\*O) to be entered in the arguments.  On certain block mode
terminals, the mapping need not occur immediately (for example, it
might occur after the terminal transmits a group of characters to the
system), but it modifies the file as if it occurred immediately.
.IP
The \*Lmap\*O subcommand with no arguments writes all of the macros
currently defined.  If \*L!\*O (exclamation point) is appended to the
subcommand, only the macros effective during input mode are written;
otherwise, only the macros effective during command mode are written.
.LI "\*O[\*Vline\*O] \*Lma\*O[\*Lrk\*O] \*Vx\*O"
.LI "\*O[\*Vline\*O] \*Lk\*O \*Vx\*O"
Gives the specified line the specified mark \*Vx\*O, which must be a
single lowercase letter of the POSIX locale.  The current line
position is not affected.  The expression \*L'\*Vx\*O can then be used
as an address in any subcommand requiring one.  For example, the
following subcommand deletes all of the lines from the current one to the
marked line:
.iS
 \&.,'\*Vx\*Ld\*O
.iE
In addition, see the \*Lvi\*O \*L``\*O and \*L''\*O subcommands for uses
of the mark in visual mode.  If the \*L'\*Vx\*O subcommand is used in
nonvisual mode, the character marked is the first nonspace character
of the current line; otherwise, the character marked is the character
at the current column of the current line.
.LI "\*O[\*Vrange\*O] \*Lm\*O[\*Love\*O] \*Vline\*O"
Moves the specified lines (\*Vrange\*O) after the target line
(\*Vline\*O).  The current line is the first of the moved lines.
.LI "\*Ln\*O[\*Lext\*O][\*L!\*O] [\*Vfile\*O \&...]"
Edits the next file from the argument list.  If the current buffer has
been modified since the last write, the subcommand writes a warning and
terminates.  You can override this action by appending the
\*L!\*O (exclamation point) character to the subcommand name (\*Ln!\*O).
You can replace the argument list by specifying a new one as arguments
to this subcommand.  Editing then starts with the first file on this new
list.  The current line is reset as described for the
\*Ledit\*O subcommand.  This subcommand is affected by the
\*Lautowrite\*O and \*Lwriteany\*O editor options.
.LI "\*O[\*Vrange\*O] \*Lnu\*O[\*Lmber\*O] [\*Vcount\*O] [\*Vflags\*O]"
.LI "\*O[\*Vrange\*O] \*L#\*O [\*Vcount\*O] [\*Vflags\*O]"
Writes the selected lines, each preceded with its line number in
decimal.  Nonprintable characters, except for \*L<Tab>\*O, are
expanded as specified by the \*Lprint\*O subcommand.
.IP
The only meaningful flag is \*Ll\*O, which allows additional
expanded writing of tabs and End-of-Line characters by the
\*Llist\*O subcommand.  The current line is the last line written.
.LI "\*O[\*Vline\*O] \*Lo\*O[\*Lpen\*O] \*L/\*Vpattern\*L/ \*O[\*Vflags\*O]"
Enters open mode, which is equivalent to visual mode with a one-line
window.  All visual mode subcommands are available.  If a match is found
for the optional regular expression in \*Vline\*O, the cursor is
placed at the start of the matching pattern.  The visual mode subcommand
\*LQ\*O (see \*Lvi\*O) exits open mode.
.LI "\*Lpre\*O[\*Lserve\*O]"
Saves the current buffer in a form that can later be recovered by
using \*Lex -r\*O or by using the \*Lrecover\*O subcommand.  After
the file has been preserved, a mail message is sent to the user.
The message contains the
name of the file, the time of preservation, and an \*Lex\*O subcommand
for recovering the file.  Additional information can be
included in the mail message.
.LI "\*O[\*Vrange\*O] \*Lp\*O[\*Lrint\*O] [\*Vcount\*O] [\*Vflags\*O]"
Writes the addressed lines.  Nonprintable characters, except for the
Tab character, are written as multicharacter sequences.  Long lines are folded.  The only meaningful flags are \*L#\*O and
\*Ll\*O.  The current line is the last line written.
.LI "\*O[\*Vline\*O] \*Lpu\*O[\*Lt\*O] [\*Vbuffer\*O]"
Puts back deleted or yanked lines after the specified line.  A buffer
can be specified; otherwise, the text in the unnamed buffer (where
deleted or yanked text is placed by default) is restored.  The current
line is the first line put back.
.LI "\*Lq\*O[\*Luit\*O][\*L!\*O]"
Terminates the editing session.  If the current buffer has been
modified since the last write, the subcommand writes a warning and
terminates.  You can override this warning and force an exit, discarding
changes, by appending the character \*L!\*O to the subcommand name.
.LI "\*O[\*Vline\*O] \*Lr\*O[\*Lead\*O][\*L!\*O] [\*Vfile\*O]"
Places a copy of the specified file in the current buffer after the
target line (line 0 places text at the beginning).  If
no file is named, the current file is the default.  If there is no
current file, the specified file becomes the current file.  If there
is neither current file nor \*Vfile\*O argument, the subcommand fails.
.IP
The current line is the last line read.  In visual
mode, the current line is the first line read.  If
\*Vfile\*O is preceded by \*L!\*O, \*Vfile\*O is taken to be an
operating system command and passed to the program named in the
\*LSHELL\*O environment variable.  The resulting output is read in to
the buffer.  You can override the special meaning of \*L!\*O by
escaping it with a \*L\e\*O (backslash) character.
.LI "\*Lrec\*O[\*Lover\*O] \*Vfile\*O"
Attempts to recover \*Vfile\*O if it was saved as the result of a
\*Lpreserve\*O subcommand, the receipt of a signal, or a system or
editor crash.  The current line is reset as described for
the \*Lread\*O subcommand.
.LI "\*Lrew\*O[\*Lind\*O][\*L!\*O]"
Rewinds the argument list; that is, sets the current file to the
first file in the argument list.  This is equivalent to a \*Lnext\*O
subcommand with the current argument list as its argument.  If the
current buffer has been modified since the last write, the
subcommand writes a warning and terminates.  You can override the action by
appending the \*L!\*O (exclamation point) character to the subcommand
name (\*Lrew!\*O).  The current line is reset as described
for the \*Lread\*O editor subcommand.  This subcommand is affected by the
\*Lautowrite\*O and \*Lwriteany\*O editor options.
.LI "\*Lse\*O[\*Lt\*O] [\*Voption\*O[\*L=\*O[\*Vvalue\*O]] \&...  [\*Lno\*Voption\*O \&...] [\*Voption\*L?\*O \&...] [\*Lall\*O]"
When no arguments are specified, writes those options whose values
have been changed from the default settings; when the argument
\*Lall\*O is specified, writes all of the option values.
.IP
Specifying an option name followed by the \*L?\*O character causes the
current value of that option to be written.  The \*L?\*O can be
separated from the option name by zero or more spaces.  The \*L?\*O is
necessary only for Boolean valued options.  Boolean options can be
given values by the form \*Lse \*Voption\*O to turn them on or \*Lse
no\*Voption\*O to turn them off; string and numeric options can be
assigned by the form \*Lse \*Voption\*L=\*Vvalue\*O.  Spaces in
strings can be included as they are by preceding each such character
with a \*L\e\*O (backslash).  More than one option can be set or
listed by a single \*Lset\*O subcommand by specifying multiple
arguments, each separated from the next by one or more spaces.
.LI "\*Lsh\*O[\*Lell\*O]"
Invokes the program named in the \*LSHELL\*O environment variable with
the argument \*L-i\*O (interactive mode).  You can resume
editing when the program exits.
.LI "\*Lso\*O[\*Lurce\*O] \*Vfile\*O"
Reads and executes subcommands from the file specified by the mandatory
\*Vfile\*O argument.  Such \*Lsource\*O subcommands can be nested.
.LI "\*O[\*Vrange\*O] \*Ls\*O[\*Lubstitute\*O] [\*L/\*Vpattern\*L/\*Vrepl\*L/\*O[\*Voptions\*O] [\*Vcount\*O] [\*Vflags\*O]"
Replaces the first instance of \*Vpattern\*O by the string \*Vrepl\*O
on each specified line.  If the \*L/\*Vpattern\*L/\*Vrepl\*L/\*O
argument is not present, the \*L/\*Vpattern\*L/\*Vrepl\*L/\*O from the
previous \*Lsubstitute\*O subcommand is used.
.IP
If \*Voptions\*O includes the letter \*Lg\*O (global), all
nonoverlapping instances of the pattern in the line are substituted.
If the option letter \*Lc\*O (confirm) is included, then before each
substitution the line is written with \*L^\*O characters written on the
following line, adjacent to and identifying the pattern to be
replaced; an affirmative response causes the substitution to be done,
while any other input causes it to abort.  An affirmative response consists of
a line with the affirmative response (as defined by the current
locale) at the beginning of the line.  Such a line is subject to
editing in the same way as the command line (the \*L/\*O or \*L:\*O
line at the bottom of the screen).
.IP
The current line is the last line substituted.  When
the \*Lc\*O option is used, typing the Interrupt character or
receiving the \*LSIGINT\*O signal stops the substitute operation, and
\*Lex\*O returns to command mode.  All substitutions completed before
the interrupt occurred are retained and none are made after that
point.  The current line is the last line substituted.
.IP
This subcommand is affected by the \*LLC_MESSAGES\*O environment variable
and the \*Lwrapscan\*O option.
.LI "\*Lsu\*O[\*Lspend\*O][\*L!\*O]"
.LI "\*Lst\*O[\*Lop\*O][\*L!\*O]"
Allows control to return to the invoking process; \*Lex\*O suspends
itself as if it had received the \*LSIGTSTP\*O signal.  The suspension
occurs only if job control is enabled in the invoking shell.
.IP
Following either \*Lsuspend\*O or \*Lstop\*O with the character
\*L!\*O affects the operation of the \*Lautowrite\*O editor option for
this subcommand only.
.IP
The current suspend character (see \*Lstty\*O) also causes the suspension.
.LI "\*Lta\*O[\*Lg\*O][\*L!\*O] \*Vtagstring\*O"
Searches for the tag string, which can be in a different file.  If the
tag is in a different file, the new file is opened for editing.  If
the current buffer has been modified since the last write, the
subcommand writes a warning and terminates.  You can override the action
by appending the \*L!\*O character to the subcommand name.  The current
line is reset to the line indicated by the tag.  This
subcommand is affected by the \*Lautowrite\*O,
\*Ltags\*O, and \*Lwriteany\*O editor options.
.IP
The \*Ltag\*O subcommand searches for \*Vtagstring\*O in the tag file
referred to by the \*Ltags\*O editor option until a reference to
\*Vtagstring\*O is found.  The file pointed to by this reference is
loaded into the buffer, and the current line is set to the first
occurrence of the pattern specified in the tags file associated with
the supplied \*Vtagstring\*O.  If the tags file contained a line
number reference, the current line is set to that line.  If the
pattern or line number is not found, the subcommand writes
an error message.  If a file referred to by the
\*Ltags\*O editor option does not exist or
is not readable, the subcommand also writes an error message.
.LI "\*Luna\*O[\*Lbbrev\*O] \*Vword\*O"
Deletes \*Vword\*O from the list of abbreviations, as described by the
\*Labbrev\*O subcommand.
.LI "\*Lu\*O[\*Lndo\*O]"
Reverses the changes made by the previous editing subcommand (one that
changes the contents of the buffer).  For this purpose, \*Lglobal\*O
and \*Lvisual\*O are considered single subcommands.  An \*Lundo\*O can
itself be reversed.  Commands that affect the external environment,
such as \*Lwrite\*O, \*Ledit\*O, and \*Lnext\*O cannot be undone.
.LI "\*Lunm\*O[\*Lap\*O][\*L!\*O] \*Vx\*O"
If no \*L!\*O (exclamation point) is specified, removes the
command-mode macro definition for \*Vx\*O; otherwise, removes the
input-mode macro definition for \*Vx\*O.  See the \*Lmap\*O subcommand.
.LI "\*O[\*Vline\*O] \*Lvi\*O[\*Lsual\*O] [\*Vtype\*O] [\*Vcount\*O] [\*Vflags\*O]"
Enters visual mode with the current line set to \*Vline\*O.
The \*Vtype\*O argument is optional, and can be a \*L-\*O (minus sign),
\*L\&.\*O (period), \*L+\*O (plus sign), or \*L^\*O (circumflex),
as in the \*Lz\*O subcommand, to specify the
position of the specified line on the screen window.
(The default is to place the line at the top of the screen window.)
The \*Vcount\*O argument specifies the number of lines that are
initially written; the default is the value of the \*Lwindow\*O editor option.
The \*LQ\*O subcommand exits visual mode.  (For more information about
the \*LQ\*O subcommand, see the \*Lvi\*O reference page.)
.LI "\*O[\*Vrange\*O] \*Lw\*O[\*Lrite\*O][\*L!\*O] [\*L>>\*O] [\*Vfile\*O]"
.LI "\*O[\*Vrange\*O] \*Lw\*O[\*Lrite\*O] [\*L!\*O] [\*Vfile\*O]"
.LI "\*O[\*Vrange\*O] \*Lwq\*O[\*L!\*O] [\*L>>\*O] [\*Vfile\*O]"
Writes the specified lines (the whole buffer, if \*Vrange\*O is not
specified) out to the file represented by pathname \*Vfile\*O, writing
to standard output the number of lines and bytes written.
.IP
If \*Vfile\*O is specified and is not the current file, and the file
named by \*Vfile\*O exists, then the write fails.  If the current file
has been changed by the \*Lfile\*O subcommand and that file exists,
the write fails.  In either case, you can force the write by appending
the \*L!\*O (exclamation point) character to the subcommand name.
You can append to an existing
file by appending \*L>>\*O to the subcommand name.
.IP
If the \*Vfile\*O argument is preceded by a \*L!\*O (exclamation
point) character, the program named in the \*LSHELL\*O environment
variable is invoked with \*Vfile\*O as its second argument, and the
specified lines are passed as standard input to the subcommand.  The
\*L!\*O in this usage must be separated from the \*Lwrite\*O
subcommand by at least one space character.  You can override
the special meaning of \*L!\*O by escaping it with a \*L\e\*O (backslash)
character.  This subcommand is affected by the
\*Lwriteany\*O and \*Lreadonly\*O editor options.
.IP
The subcommand \*Lwq\*O is equivalent to a \*Lw\*O followed by a
\*Lq\*O; \*Lwq!\*O is equivalent to \*Lw!\*O followed by \*Lq\*O.  If
the current buffer has no pathname associated with it, the \*Lwrite\*O
subcommand fails.
.LI "\*O[\*Vrange\*O] \*Lx\*O[\*Lit\*O][\*L!\*O] [\*Vfile\*O]"
Performs a \*Lwrite\*O subcommand if any changes have been made to the
current buffer since the last write to any file.
.IP
Unless the subcommand fails because an attempt to write lines to a file
did not succeed, the \*Lex\*O program exits after an \*Lx\*O
subcommand.  This subcommand is affected by the
\*Lwriteany\*O and \*Lreadonly\*O editor options.
.LI "\*O[\*Vrange\*O] \*Lya\*O[\*Lnk\*O] [\*Vbuffer\*O] [\*Vcount\*O]"
Places the specified lines in the named buffer.  If no buffer is
specified, the unnamed buffer is used (where the most recently deleted
or yanked text is placed by default).
.LI "\*O[\*Vline\*O] \*Lz\*O [\*Vtype\*O] [\*Vcount\*O] [\*Vflags\*O]"
If \*Vtype\*O is omitted, \*Vcount\*O lines following the specified
line are written.  The default for \*Vcount\*O is the value of the
\*Lwindow\*O editor option.  The \*Vtype\*O argument changes the
position where \*Vline\*O is written on the screen by affecting the
number of lines written before and after \*Vline\*O.
.IP
If \*Vtype\*O is specified, it is one of the following:
.VL 4m
.LI "\*L-\*O (dash)"
Places \*Vline\*O at the bottom of the screen.
.LI "\*L+\*O (plus sign)"
Places \*Vline\*O at the top of the screen.
.LI "\*L\&.\*O (period)"
Places \*Vline\*O in the middle.
.LI "\*L^\*O (circumflex)"
Writes out \*Vcount\*O lines starting \*Vcount\*O*2 lines before the
addressed line; the net effect of this is that a \*Lz^\*O subcommand
following another \*Lz\*O subcommand writes the previous page.
.LI "\*L=\*O (equal sign)"
Centers the addressed line on the screen with a line of \*L-\*O (dash)
characters written immediately before and after it.  The number of
preceding and following lines of text written are reduced to account
for these lines of hyphens.
.LE
.IP
In all cases, the current line is the last line
written, with the exception of the \*L=\*O type, which causes the
current line to be that addressed in the subcommand.
.LI "\*L\&!\*O \*Vsubcommand\*O"
.LI "\*O[\*Vrange\*O]\*L\&!\*O \*Vsubcommand\*O"
Passes the remainder of the line after the \*L!\*O (exclamation point)
character to the program named in the \*LSHELL\*O environment variable
for execution.  A warning is issued if the buffer has been changed
since the last write.  A single \*L!\*O character is written when the
subcommand completes.  The current line position is not affected.
.IP
Within the text of \*Vsubcommand\*O, \*L%\*O (percent sign) and \*L#\*O
(number sign) are expanded as pathnames (the current and alternative
pathnames, respectively), and \*L!\*O is replaced with the text of the
previous \*L!\*O subcommand.  (Thus, \*L!!\*O repeats the previous
\*L!\*O subcommand.)  If any such expansion is performed, the expanded
line is echoed.
.IP
You can override
the special meanings of \*L%\*O, \*L#\*O, and \*L!\*O
by escaping them with a \*L\e\*O (backslash) character.
This subcommand is affected by the \*Lautowrite\*O and \*Lwriteany\*O
editor options.
.IP
In the second form of the \*L!\*O subcommand, the remainder of the
line after the \*L!\*O is passed to the program named in the
\*LSHELL\*O environment variable, as described previously.  The
specified lines are provided to the program as standard input; the
resulting output replaces the specified lines.
.LI "\*O[\*Vrange\*O] \*L\&<\*O [\*Vcount\*O] [\*Vflags\*O]"
Shifts the specified lines to the left; the number of character
positions to be shifted is determined by the \*Lshiftwidth\*O
editor option.  Only leading spaces are lost in shifting; other
characters are not affected.  The current line is the last line changed.
.LI "\*O[\*Vrange\*O] \*L\&>\*O [\*Vcount\*O] [\*Vflags\*O]"
Shifts the specified lines to the right, by inserting spaces, using
tabs where possible, as determined by the \*Lshiftwidth\*O
editor option.  Empty lines are not changed.  The current line
is the last line changed.
.LI "\*O[\*Vrange\*O] \*L\&&\*O [\*Voptions\*O] [\*Vcount\*O] [\*Vflags\*O]"
.LI "\*O[\*Vrange\*O] \*Ls\*O[\*Lubstitute\*O] [\*Voptions\*O] [\*Vcount\*O] [\*Vflags\*O]"
.LI "\*O[\*Vrange\*O] \*L\&~\*O [\*Voptions\*O] [\*Vcount\*O] [\*Vflags\*O]"
Repeats the previous substitute subcommand, as if (\*L&\*O) were
replaced by the previous \*Ls/\*Vpattern\*L/\*Vrepl\*L/\*O subcommand.
(The same effect can be obtained by omitting the
\*L/\*Vpattern\*L/\*Vrepl\*L/\*O string in the \*Lsubstitute\*O
subcommand.)  The version of the subcommand using \*L~\*O (tilde) is
the same as \*L&\*O and \*Ls\*O, but the pattern used is the last
regular expression used in any subcommand, not necessarily the one
used in the last substitute subcommand.  For example, in the
following sequence, the \*L~\*O (tilde) is equivalent to
\*Ls/green/blue/\*O:
.iS
s/red/blue/
/green
~
.iE
.LI "\*O[\*Vline\*O] \*L=\*O [\*Vflags\*O]"
Writes the line number of the specified line (the default is the last
line).  The current line position is not affected.
.LI "\*L<Ctrl-d>\*O"
Writes the next \*Vn\*O lines, where \*Vn\*O is the value of the
editor option \*Lscroll\*O.  The subcommand is invoked with the
End-of-File character.  The current line is the last line written.
.LI "\*L@ \*Vbuffer\*O"
.LI "\*L* \*Vbuffer\*O"
Executes each line of the named buffer as an \*Lex\*O subcommand.  If
no buffer is specified, or is specified as \*L@\*O or \*L*\*O, the
last buffer executed is used.  If there is no last buffer, an error occurs.
.LI "\*L#\*O"
Displays addressed lines with line numbers
.LI "\*L""""\*O"
Starts comment
.LI "\*L<Return>\*O"
Displays next line
.LE
.\" .zZ "review, R1.1.2, XPG4"
.SS Subcommand Addresses
.IP
.VL 7m
.LI "\*L$\*O"
The last line
.LI "\*L+\*O"
The next line
.LI "\*L\-\*O"
The previous line
.LI "\*L+\*Vn\*O"
The \*Vn\*Oth line forward
.LI "\*L\-\*Vn\*O"
The \*Vn\*Oth previous line
.LI "\*L%\*O"
The first through last lines
.LI "\*Vnumber\*O"
Line \*Vnumber\*O
.LI "\*L\&.\*O"
The current line
.LI "\*Vx\*L-\*Vnumber\*O"
The \*Vnumber\*Oth line before line \*Vx\*O
.LI "\*Vx\*O,\*Vy\*O"
Lines \*Vx\*O through \*Vy\*O
.LI "\*L\'\*Vm\*O"
The line marked with \*Vm\*O
.LI "\*L\'\'\*O"
The previous context
.LI "\*L/\*Vpattern\*L$\*O"
The next line with \*Vpattern\*O at end of line
.LI "\*L/^\*Vpattern\*O"
The next line with \*Vpattern\*O at start of line
.LI "\*L/\*Vpattern\*O"
The next line with \*Vpattern\*O
.LI "\*L?\*Vpattern\*O"
The previous line with \*Vpattern\*O
.LE
.SS Scanning Pattern Formation
.IP
.VL 7m
.LI "\*L^\*O"
The beginning of the line
.LI "\*L$\*O"
The end of the line
.LI "\*L\&.\*O"
Any character
.LI "\*L\e<\*O"
The beginning of the word
.LI "\*L\e>\*O"
The end of the word
.LI "\*L[\*Vstring\*O]"
Any character in \*Vstring\*O
.LI "\*L[^\*Vstring\*O]"
Any character not in \*Vstring\*O
.LI "\*L[\*Vx-y\*O]"
Any character between \*Vx\*O and \*Vy\*O, inclusive
.LI "\*L*\*O"
Any number of the preceding character
.LI "\*L~\*O"
The replacement part of the last substitute subcommand.
.LI "\*L/(\*Vpattern\*L\e)\*O"
A regular expression pattern can be enclosed in escaped parentheses
to identify them for substitution actions.
.LE
.SH FILES
.PP
.VL 20m
.LI "\*L/usr/lbin/exrecover\*O"
\*Lrecover\*O subcommand
.LI "\*L/usr/lbin/expreserve\*O"
\*Lpreserve\*O subcommand
.LI "\*L/usr/share/lib/terminfo/?/*\*O"
Terminal information database
.LI "\*L./\&.exrc\*O or \*L$HOME/\&.exrc\*O"
Editor start-up file
.LI "\*L/tmp/Ex\*Vnnnnn\*O"
Editor temporary file
.LI "\*L/tmp/Rx\*Vnnnnn\*O"
Names buffer temporary file
.LI "\*L/var/preserve\*O"
Preservation directory
.LE
.SH RELATED INFORMATION
.PP
Commands:  \*Lctags\*O(1), \*Led\*O(1)/\*Lred\*O(1), \*Ledit\*O(1),
\*Lgrep\*O(1)/\*Legrep\*O(1)/\*Lfgrep\*O(1),
\*Lvi\*O(1)/\*Lvedit\*O(1)/\*Lview\*O(1).
.PP
Files:  \*Lterminfo\*O(4).
.PP
The \*LTERM\*O environment variable.
.EQ
delim off
.EN

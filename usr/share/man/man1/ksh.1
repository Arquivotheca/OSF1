.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: ksh.1,v $ $Revision: 3.5.7.7 $ (DEC) $Date: 1993/12/01 12:23:09 $
.\" 
...\" (c) Copyright 1990, 1991, 1992 OPEN SOFTWARE FOUNDATION, INC.
...\" ALL RIGHTS RESERVED
...\" OSF/1 Release 1.0.4
...\"
...\" Revision 1.1.2.12  91/12/04  10:12:56  buckler
...\" 	Changed "true" to "TRUE" and "false" to "FALSE"
...\" 	[91/12/02  13:49:09  buckler]
...\"
...\" Revision 1.1.2.11  91/11/27  14:40:27  buckler
...\" 	Identified 0 as zero per editorial review
...\" 	[91/11/27  14:11:20  buckler]
...\"
...\" Revision 1.1.2.10  91/11/20  11:12:11  buckler
...\" 	Incorporated editorial review from Ed Doyle.
...\" 	[91/11/13  09:16:04  buckler]
...\"
...\" Revision 1.1.2.9  91/10/02  10:58:37  buckler
...\" 	Shortened syntax line for set subcommand.
...\" 	[91/10/02  10:52:28  buckler]
...\"
...\" 	Clarified - and + prefixes for set subcommand.
...\" 	[91/10/02  10:07:36  buckler]
...\"
...\" 	Fixed up SYNOPSIS, FLAGS, and set subcommand so that flags are
...\" 	consistent throughout after consulting with Steve Grainger.
...\" 	[91/10/02  10:02:47  buckler]
...\"
...\" Revision 1.1.2.8  91/09/05  15:52:27  buckler
...\" 	Entered fonts in index entries per Style Guide
...\" 	[91/09/05  14:55:24  buckler]
...\"
...\" Revision 1.1.2.7  91/08/14  12:04:50  buckler
...\" 	Modified description of echo built-in per doc bug #2219.
...\" 	[91/08/14  11:07:08  buckler]
...\"
...\" 	Fixed SEC_PRIV ifdefs and associated text.
...\" 	[91/08/06  15:25:52  nielsen]
...\"
...\" Revision 1.1.2.6  91/08/06  15:28:49  nielsen
...\" 	SEC_PRIV fixes. Bug 2759
...\"
...\" Revision 1.1.2.5  91/04/24  08:27:54  buckler
...\" 	fixed SML glitch for system messages
...\" 	[91/04/24  08:20:23  buckler]
...\"
...\" Revision 1.1.2.4  91/03/25  10:51:19  buckler
...\" 	Translated to SML with sml_tran, scripts, and editing
...\" 	[91/03/24  12:18:46  buckler]
...\"
...\" Revision 1.1.2.3  91/02/06  12:30:59  buckler
...\" 	Removed .ne macros from Prentice-Hall version
...\" 	[91/02/06  11:19:18  buckler]
...\"
...\" Revision 1.1.2.2  91/02/04  11:49:19  damon
...\" 	Final Prentice Hall version. Includes new header.
...\" 	[91/02/04  10:02:04  damon]
...\"
...\"build rmifdef
.TH ksh 1
.SH NAME
.PP
\*Lksh\*O \- Korn shell
.SH SYNOPSIS
.PP
.iX "ksh command"
.iX "Korn shell"
.iX "shell" "Korn"
.iX "shell" "Bourne"
.iX "Bourne shell"
.iX "sh command"
.sS
.in +.5i
.ti -.5i
\*Lksh\*O
\*O[\*L\-ir\*O]
\*O[\*L\-c\*O
\*Vcommand_string\*O
|
\*L\-s\*O]
\*O[\*L+\*O | \*L\-abCefhkmnopstuvx\*O]
\*O[\*L+\*O | \*L\-o\*O][\*Voption\*O
\&...]
.nL
|
\*O[\*L+\*O | \*L\-A\*O
\*Vname\*O]
\*O[\*Vargument\*O
\&...]
|
\*O[\*Vfile\*O]
\*O[\*Vargument\*O
\&...]
.in -.5i
.sE
.PP
The Korn shell is an interactive command interpreter and a command
programming language.
.SH DESCRIPTION
.PP
The Korn shell carries out commands either interactively
from a terminal keyboard or from a file.
The Korn shell is backward compatible with the Bourne shell
(invoked with the \*Lsh\*O command) and contains virtually all
of the Bourne shell features, as well as several of the best features
of the C shell.
.PP
Some important features of the Korn shell are as follows:
.ML
.LI
Command aliasing
.LI
Filename substitution
.LI
Tilde substitution
.LI
Command substitution
.LI
Parameter substitution
.LI
Job control
.LI
Inline editing
.LE
.PP
A file from which the shell carries out commands
is usually called a \*Vshell script\*O, a \*Vshell procedure\*O,
or a \*Vcommand file\*O.
.PP
A \*Vsimple command\*O is a sequence of words
separated by spaces or tabs.  A \*Vword\*O is a sequence of characters
that contains no unquoted spaces or tabs.  The first word
in the sequence (numbered as 0), usually specifies the name of
a command.  Any remaining words,
with a few exceptions, are passed to that command.
A \*Vspace\*O refers to both spaces and tabs.
.PP
The \*Vvalue\*O of a simple command is its exit value if it
ends normally, or (octal) 200 added to the signal number if it
terminates due to a signal.  For a list of
\*Vstatus\*O values, see the \*Lsignal()\*O system call.
.PP
A \*Vpipeline\*O is a sequence of one or more commands
separated by a | (vertical bar) or, for historical compatibility,
by a ^ (circumflex).
.iX "pipes"
In a pipeline, the standard output of each command becomes
the standard input of the next command.
Each command runs as a separate process, and the shell waits for the
last command to end.  A \*Vfilter\*O is a command that
reads its standard input, transforms it in some way,
then writes it to its standard output.
A pipeline normally consists of a series of filters.  Although the
processes in a pipeline (except the first process) can execute in
parallel, they are synchronized to the extent that each program
needs to read the output of its predecessor.
.PP
The exit value of a pipeline is the exit value of the last command.
.PP
A \*Vlist\*O is a sequence of one or more pipelines separated
by ; (semicolon), \*L&\*O (ampersand), \*L&&\*O (two
ampersands), or \*L||\*O (two vertical bars) and optionally ended
by a ; (semicolon), an \*L&\*O (ampersand), a \*L|&\*O (coprocess),
or a newline.  These separators and terminators have the following effects:
.VL 4m
.LI "\*L;\*O"
Causes \*Vsequential execution\*O of the preceding pipeline;
the shell waits for the pipeline to finish.
.LI "\*L&\*O"
Causes \*Vasynchronous execution\*O of the preceding pipeline;
the shell does \*Vnot\*O wait for the pipeline to finish.
.LI "\*L&&\*O"
Causes the list following it to be executed \*Vonly\*O if the
preceding pipeline returns a 0 (zero) exit value.
.LI "\*L||\*O"
Causes the list following it to be executed \*Vonly\*O if the
preceding pipeline returns a nonzero exit value.
.IP
The \*Lcd\*O command is an exception; if it returns a nonzero
exit value, no subsequent commands in a list are executed, regardless of
the separator characters.
.LE
.PP
The \*L;\*O and \*L&\*O separators have equal precedence,
as do \*L&&\*O and \*L||\*O.  The single-character
separators have lower precedence than the double-character separators.
An unquoted newline character following a pipeline functions the same
as a ; (semicolon).
.SS Comments
The shell treats as a comment any word that begins with a \*L#\*O character
and ignores that word and all characters following up to the next
newline character.
.SS Shell Flow Control Statements
Unless otherwise stated, the value returned by a
command is that of the last simple command executed in the command.
.VL 4m
.LI "\*Lfor \*Videntifier \*O[\*Lin \*Vword\*O...] \*L;do \*Vlist \*L;done\*O"
Each time a \*Lfor\*O command is executed, \*Videntifier\*O
is set to the next \*Vword\*O taken from the \*Lin \*Vword\*O list.
If \*Lin\*O \*Vword \*O...  is omitted, the \*Lfor\*O command
executes the \*Ldo \*Vlist\*O once for each positional parameter
that is set.  (See \*LParameter Substitution\*O.)  Execution
ends when there are no more words in the list.
.LI "\*Lselect \*Videntifier \*O[\*Lin \*Vword\*O...] \*L;do \*Vlist \*L;done\*O"
Prints on standard error (file descriptor 2), the set of words, each preceded
by a number.  If \*Lin \*Vword\*O...  is omitted, then the positional
parameters are used instead.  (See \*LParameter Substitution\*O.)
The \*LPS3\*O prompt is printed and a line is read from the standard
input.  If this line consists of the number of one of the listed words,
then the value of the parameter \*Videntifier \*Ois set to the word
corresponding to this number.  If this line is empty, the selection
list is printed again.  Otherwise, the value of the parameter \*Videntifier
\*Ois set to null.  The contents of the line read from standard
input is saved in the \*LREPLY\*O parameter.  \*OThe \*Vlist \*Ois
executed for each selection until a \*Lbreak\*O or End-of-File
is encountered.
.LI "\*Lcase \*Vword \*Lin \*O[[\*L(\*O] \*Vpattern \*O[| \*Vpattern\*O] ...\*L) \*Vlist \*L;;\*O] ...  \*Lesac\*O"
Executes the list associated with the
first pattern that matches \*Vword\*O.  The form of the
patterns is the same as that used for filename generation.  (See \*LFilename
Generation\*O.)
.LI "\*Lif \*Vlist \*L;then \*Vlist \*O[\*Lelif \*Vlist \*L;then \*Vlist\*O] ...  [\*L;else \*Vlist\*O] \*L;fi\*O"
Executes the list following \*Lif \*Oand, if it returns a 0 (zero) exit
status, executes the list following the first \*Lthen\*O.
Otherwise, the list following \*Lelif \*Ois executed and,
if its value is 0 (zero), the list following the next \*Lthen \*Ois
executed.  Failing that, the \*Lelse\*O list is executed.  If
no \*Lelse\*O list or \*Lthen\*O list is executed,
then the \*Lif \*Ocommand returns a 0 (zero) exit status.
.LI "\*Lwhile \*Vlist \*L;do \*Vlist \*L;done\*O"
.LI "\*Luntil \*Vlist \*L;do \*Vlist \*L;done\*O"
Executes the \*Lwhile\*O list repeatedly, and if the
exit status of the last command in the list is 0 (zero), executes
the \*Ldo\*O
list; otherwise the loop terminates.  If no commands in the \*Ldo\*O
list are executed, then the \*Lwhile \*Ocommand returns
a 0 (zero) exit status; \*Luntil\*O can be used in place of \*Lwhile \*Oto
negate the loop termination test.
.LI "\*L(\*Vlist\*L)\*O"
Executes \*Vlist \*Oin a separate
environment.  Note that if two adjacent open parentheses are needed
for nesting, a space must be inserted to avoid arithmetic evaluation
as described later.
.LI "{\*Vlist\*L;}\*O"
Executes \*Vlist\*O.  Note that unlike
the metacharacters \*L( \*Oand \*L)\*O, \*L{ \*Oand
\*L} \*Oare reserved words and must be at the beginning of
a line or after a \*L;\*O (semicolon) in order to be recognized.
.LI "\*O[[\*Vexpression\*O]]"
Evaluates \*Vexpression \*Oand
returns a 0 (zero) exit status
when \*Vexpression \*Ois TRUE.  See \*LConditional
Expressions\*O for a description of \*Vexpression\*O.
.LI "\*Lfunction\*O \*Videntifier\*O \*L{\*Vlist\*L;}\*O"
.LI "\*Videntifier\*O \*L()\*O \*L{\*Vlist\*L;}\*O"
Defines a function that is referenced by \*Videntifier\*O.  The body of
the function is the list of commands between \*L{ \*Oand \*L}\*O\&.
(See \*LFunctions\*O.)
.LI "\*Ltime\*O \*Vpipeline\*O"
Executes \*Vpipeline \*O
and prints the elapsed time as well as the user and system time
on standard error.
.LE
.PP
\*OThe following reserved words are recognized only when they appear,
without single or double quotes, as the first word of a command:
.iS
if	for	case
then	while	esac
else	until	function
elif	do	select
fi	done	time
{ }	[[ ]]
\*O\c
.iE
.SS Command Aliasing
\*OThe first word of each command is replaced by the text of an alias
(if an alias for this word was defined).  The first
character of an alias name can be any nonspecial printable
character, but the rest of the characters must be the same as for
a valid \*Videntifier\*O.  The replacement string can contain any
valid shell script, including the metacharacters previously listed.  The
first word of each command in the replaced text, other than any that
are in the process of being replaced, is tested for aliases.
If the last character of the alias value is a space,
the word following the alias will also be checked for alias substitution.
.PP
Aliases can be used to redefine special built-in commands but cannot
be used to redefine the reserved words previously listed.  Aliases can be
created, listed, and exported with the \*Lalias \*Ocommand and
can be removed with the \*Lunalias\*O command.  Exported aliases
remain in effect for scripts invoked by name, but must be reinitialized
for separate invocations of the shell.  (See \*LInvocation\*O.)
.PP
Aliasing is performed when scripts are read, not while they
are executed.  Therefore, for an alias to take
effect, the \*Lalias \*Odefinition
command has to be executed before the command that references
the alias is read.
.PP
Aliases are frequently used as shorthand for full pathnames.
An option to the aliasing facility allows the value of the alias to
be automatically set to the full pathname of the corresponding command.
These aliases are called \*Vtracked\*O aliases.
.PP
The value of a tracked
alias is defined the first time the corresponding command is looked
up and becomes undefined each time the \*LPATH\*O environment
variable is reset.  These aliases remain
tracked so that the next subsequent
reference will redefine the value.  Several tracked aliases are compiled
into the shell.  The \*L\-h \*Oflag of the \*Lset \*Ocommand
makes each referenced command name into a tracked alias.
.PP
\*OThe following exported aliases are compiled into the
shell, but can be unset or redefined:
.iS
autoload='typeset \-fu'
false='let 0'
functions='typeset \-f'
hash='alias \-t'
history='fc \-l'
integer='typeset \-i'
nohup='nohup '
r='fc \-e \-'
true=':'
type='whence \-v'
\*O\c
.iE
.SS Tilde Substitution
After alias substitution is performed, each word is checked to
see if it begins with an unquoted ~ (tilde).  If it does, then the
word up to a \*L/\*O (slash) is checked to see if it matches a username
in the \*L/etc/passwd \*Ofile.  If a match is found, the tilde
and the matched login name are replaced by the login directory of the
matched user.  This is called a \*Vtilde substitution\*O.  If no
match is found, the original text is left unchanged.  A tilde
by itself, or in front of a \*L/\*O, is replaced by the value of
the \*LHOME \*Oparameter.  A tilde followed by a \*L+\*O (plus sign)
or \*L\-\*O (dash) is replaced by \*L$PWD\*O and \*L$OLDPWD\*O, respectively.
.PP
In addition, tilde substitution is attempted when the
value of a variable assignment parameter begins with a tilde.
.SS Command Substitution
The standard output from a command enclosed in parentheses preceded
by a dollar sign \*L$( )\*O or a pair of \*L``\*O (grave accents)
can be used as part or all of a word; trailing newlines are removed.
In the second (archaic) form, the string between the grave accents
is processed for special quoting characters before
the command is executed.  (See \*LQuoting\*O.)
The command substitution \*L$(cat \*Vfile\*O) can be
replaced by the equivalent but faster \*L$(<\*Vfile\*O).  Command
substitution of most special commands that do not perform input/output
redirection are carried out without creating a separate process.  An
arithmetic expression enclosed in double parentheses preceded by a
dollar sign ( \*L$(( )) \*O) is replaced by the value of the arithmetic
expression within the double parentheses.
.SS Parameter Substitution
A \*Vparameter\*O is an identifier, one or more digits,
or any of the characters \*L*\*O, \*L@\*O, \*L#\*O, \*L?\*O, \*L\-\*O,
\*L$\*O, and \*L!\*O.  A \*Vnamed parameter\*O (a parameter
denoted by an identifier) has a \*Vvalue\*O and 0 (zero)
or more \*Vattributes\*O.
Named parameters can be assigned values and attributes
by using the \*Ltypeset \*Ospecial command.  The attributes
supported by the shell are described later with the \*Ltypeset \*Ospecial
command.  Exported parameters pass values and attributes to the environment.
.PP
The shell supports a 1-dimensional array facility.  An
element of an array parameter is referenced by a \*Vsubscript\*O.
A subscript is denoted by an \*Varithmetic\*O \*Vexpression\*O
enclosed with [ ] (brackets).  To assign values to an array, use \*Lset
\-A \*Vname value \*O...  The value of all subscripts must be in
the range of 0 to 1023.  Arrays need not be declared.  Any reference
to a named parameter with a valid subscript is legal and an array
is created if necessary.  Referencing an array without a subscript
is equivalent to referencing the element 0 (zero).
.PP
The value of a named parameter can be assigned
by the following:
.iS
\*Vname\*L=\*Vvalue\*O [ \*Vname\*L=\*Vvalue\*O ]
.iE
.PP
If the integer attribute, \*L\-i\*O, is set for \*Vname\*O, the value
is subject to arithmetic evaluation, as described later.  \*VPositional
parameters\*O, which are denoted by a number, can be assigned values
with the \*Lset \*Ospecial command.  Parameter \*L$0\*O is set
from argument 0 (zero) when the shell is invoked.  The \*L$\*O
(dollar sign) character is
used to introduce substitutable parameters.
.VL 4m
.LI "\*L${\*Vparameter\*L}\*O"
Reads all the characters
from the \*L${\*O (dollar sign left brace) to the matching
\*L}\*O (right brace) as part of the same word even if it contains
braces or metacharacters.  The value, if any,
of the parameter is substituted.
The braces are required when \*Vparameter \*Ois followed by a letter,
digit, or underscore that is not to be interpreted as part of its
name or when a named parameter is subscripted.  If \*Vparameter \*Ois
one or more digits, it is a positional parameter.  A positional
parameter of more than one digit must be enclosed in braces.  If
\*Vparameter\*O is \*L*\*O (asterisk) or \*L@\*O (at sign),
all the positional parameters,
starting with \*L$1\*O, are substituted (separated by a field separator
character).  If an array identifier with subscript \*L* \*Oor \*L@
\*Ois used, the value for each of the elements is substituted
(separated by a field separator character).
.LI "\*L${#\*Vparameter\*L}\*O"
Substitutes the number of positional parameters
if \*Vparameter \*Ois \*L* \*Oor \*L@\*O;  otherwise,
the length of the value of the \*Vparameter \*Ois substituted.
.LI "\*L${#\*Videntifier\*O[\*L*\*O]\*L}\*O"
\*OSubstitutes the number of
elements in the array \*Videntifier\*O.
.LI "\*L${\*Vparameter\*L:\-\*Vword\*L}\*O"
\*OSubstitutes the value of \*Vparameter\*O if it is
set and non-null; otherwise, substitute \*Vword\*O.
.LI "\*L${\*Vparameter\*L:=\*Vword\*L}\*O"
\*OSets \*Vparameter\*O to \*Vword\*O if it is
not set or is null; the value of the
parameter is then substituted.  Positional parameters cannot be assigned
values in this way.
.LI "\*L${\*Vparameter\*L:?[\*Vword\*L]}\*O"
\*OSubstitutes the value of \*Vparameter\*O if it is set and is non-null;
otherwise, print \*Vword \*Oand exit
from the shell.  If \*Vword \*Ois omitted, a standard message is printed.
.LI "\*L${\*Vparameter\*L:+\*Vword\*L}\*O"
\*OSubstitute \*Vword\*O if \*Vparameter
\*Ois set and is non-null; otherwise, substitute nothing.
.LI "\*L${\*Vparameter\*L#\*Vpattern\*L}\*O | \*L${\*Vparameter\*L##\*Vpattern\*L}\*O"
\*OCauses the value of this substitution to be the
value of \*Vparameter \*Owith the matched portion deleted if
the shell \*Vpattern \*Omatches the beginning of the value
of \*Vparameter\*O;
otherwise the value of \*Vparameter \*Ois substituted.  In
the first form, the smallest matching pattern is deleted and in the
second form, the largest matching pattern is deleted.
.LI "\*L${\*Vparameter\*L%\&\*Vpattern\*L}\*O | \*L${\*Vparameter\*L%\&%\&\*Vpattern\*L}\*O"
Causes the value of this
substitution to be the value of \*Vparameter \*Owith the matched
part deleted if the shell \*Vpattern \*Omatches
the end of the value of \*Vparameter\*O;
otherwise, substitute the value of \*Vparameter\*O.
In the first form, the smallest matching pattern is deleted and in
the second form, the largest matching pattern is deleted.
.LE
.PP
If the \*L:\*O (colon) is omitted from the previous
expressions, then the shell checks only whether \*Vparameter\*O is
set or not.
.PP
\*OIn the previous expressions, \*Vword\*O is not evaluated unless
it is to be used as the substituted string, so that, in the following
example, \*Lpwd \*Ois executed only if \*Ld \*Ois not set or
is null:
.iS
echo ${d:\-$(pwd)}
\*O\c
.iE
.PP
\*OThe following parameters are automatically set by the shell:
.VL 3m
.LI "\*L#\*O (hash mark)"
The number of positional parameters in decimal.
.LI "\*L\-\*O (dash)"
Flags supplied to the shell on invocation or by the \*Lset\*O command.
.LI "\*L?\*O (question mark)"
The decimal value returned by the last executed command.
.LI "\*L$\*O (dollar sign)"
The process number of this shell.
.LI "\*L_\*O (underscore)"
Initially, the value of \*L_\*O (underscore) is an absolute
pathname of the shell or script being executed as passed in the environment.
Subsequently, it is assigned the last argument of the previous
command.  This parameter is not set for commands
that are asynchronous.  This parameter is also used to hold
the name of the matching \*LMAIL\*O file when checking for mail.
.LI "\*L!\*O (exclamation point)"
The process number of the last background command invoked.
.LE
.VL 4m
.LI "\*LERRNO\*O"
\*OThe value of \*Verrno \*Oas set by the most
recently failed system call.  This value is system dependent and is
intended for debugging purposes.
.LI "\*LLINENO\*O"
\*OThe line number of the current line within the
script or function being executed.
.LI "\*LOLDPWD\*O"
\*OThe previous working directory set by the \*Lcd \*Ocommand.
.LI "\*LOPTARG\*O"
\*OThe value of the last option argument processed
by the \*Lgetopts \*Ospecial command.
.LI "\*LOPTIND\*O"
\*OThe index of the last option argument processed
by the \*Lgetopts \*Ospecial command.
.LI "\*LPPID\*O"
\*OThe process number of the parent of the shell.
.LI "\*LPWD\*O"
\*OThe present working directory set by the \*Lcd \*Ocommand.
.LI "\*LRANDOM\*O"
\*OEach time this parameter is referenced, a random
integer, uniformly distributed between 0 and 32767, is generated.
The sequence of random numbers can be initialized by assigning a numeric
value to \*LRANDOM\*O.
.LI "\*LREPLY\*O"
\*OThis parameter is set by the \*Lselect \*Ostatement
and by the \*Lread \*Ospecial command when no arguments are supplied.
.LI "\*LSECONDS\*O"
\*OEach time this parameter is referenced, the number
of seconds since shell invocation is returned.  If this parameter is
assigned a value, then the value returned upon reference is the
value that was assigned plus the number of seconds since the assignment.
.LE
.PP
\*OThe following parameters are used by the shell:
.VL 4m
.LI "\*LCDPATH\*O"
\*OThe search path for the \*Lcd \*Ocommand.
.LI "\*LCOLUMNS\*O"
\*OIf this variable is set, the value is used to
define the width of the edit window for the shell edit modes and for
printing \*Lselect \*Olists.
.LI "\*LEDITOR\*O"
\*OIf the value of this variable ends in \*Lemacs\*O,
\*Lgmacs\*O, or \*Lvi \*Oand the \*LVISUAL \*Ovariable is
not set, then the corresponding option (see \*Lset\*O under
\*LSpecial ksh Commands\*O) is turned on.
.LI "\*LENV\*O"
\*OIf this parameter is set, then parameter substitution
is performed on the value to generate the pathname of the script that
is executed when the shell is invoked.  (See \*LInvocation\*O.) This file
is typically used for \*Lalias\*O and \*Lfunction\*O definitions.
.LI "\*LFCEDIT\*O"
\*OThe default editor name for the \*Lfc \*Ocommand.
.LI "\*LFPATH\*O"
\*OThe search path for function definitions.  This
path is searched when a function with the \*L\-u\*O attribute is
referenced and when a command is not
found.  If an executable file is found, then it is read and
executed in the current environment.
.LI "\*LIFS\*O"
\*OInternal field separators, normally spaces, tabs,
and newlines that are used to separate command
words which result from command or parameter substitution and for
separating words with the \*Lread\*O special command.
The first character of the \*LIFS\*O parameter is used to separate arguments
for the \*L$* \*Osubstitution.  (See \*LQuoting\*O.)
.LI "\*LHISTFILE\*O"
\*OIf this parameter is set when the shell is invoked,
then the value is the pathname of the file that is used to store
the command history.  (See \*LCommand Reentry\*O.)
.LI "\*LHISTSIZE\*O"
\*OIf this parameter is set when the shell is invoked,
the number of previously entered commands that are accessible
by this shell is greater than or equal to this number.  The default
is 128.
.LI "\*LHOME\*O"
\*OThe default argument (home directory) for the \*Lcd\*O
command.
.LI "\*LLANG\*O"
Specifies the locale of your system, which is comprised of three parts:
language, territory, and codeset.  The default locale is the
\*LC\*O locale, which specifies the value \*LEnglish\*O
for language, \*LU.S.\*O for territory, and \*LASCII\*O for codeset.
.\" Begin Digital-specific information CORRECTION
.\" LANG locale controls language used for messages until I18N
.\" changes integrated; LC_MESSAGES controls only yes/no in R1.0.
The locale specified for the \*LLANG\*O variable controls
the language applied to messages.  Unless set explicitly, the
\*LLC_COLLATE\*O, \*LLC_CTYPE\*O, \*LLC_MESSAGES\*O, \*LLC_MONETARY\*O,
\*LLC_NUMERIC\*O, and \*LLC_TIME\*O variables also derive their
settings from the locale set for \*LLANG\*O.
.\" End Digital-specific information CORRECTION
.LI "\*LLC_COLLATE\*O"
Specifies the collating sequence to use when sorting names and when
character ranges occur in patterns.  The default value is the collating
sequence for American English.
If absent, the collating sequence can be taken
from the \*LLANG \*Oparameter.  If both \*LLC_COLLATE\*O
and \*LLANG\*O are absent, the ANSI C collating sequence is used.
.LI "\*LLC_CTYPE\*O"
Specifies the character classification information to use on your
system.  The default value is American English.
.LI "\*LLC_MESSAGES\*O"
Specifies
.\" Begin Digital-specific information CORRECTION
.\" Until I18N (R1.1) changes are integrated, LANG locale controls
.\" messages and LC_MESSAGES locale controls only yes/no prompts.
.\"
.\" the language in which system messages appear, and
.\" End Digital-specific information CORRECTION
the language that the system expects for user input of yes and no
strings.
The default value is American English.
.LI "\*LLC_MONETARY\*O"
Specifies the monetary format for your system.  The default value
is the monetary format for American English.
.LI "\*LLC_NUMERIC\*O"
Specifies the numeric format for your system.  The default value is
the numeric format for American English.
.LI "\*LLC_TIME\*O"
Specifies the date and time format for your system.  The default value
is the date and time format for American English.
.LI "\*LLINES\*O"
\*OIf this variable is set, the value is used to determine
the column length for printing \*Lselect\*O lists.  Select lists
will print vertically until about two-thirds of \*LLINES \*Olines
are filled.
.LI "\*LLOGNAME\*O"
The name of the user's login account corresponding to the login name in
the user database.
.LI "\*LMAIL\*O"
\*OIf this parameter is set to the name of a mail file and the
\*LMAILPATH \*Oparameter is not set, the shell informs
you of the arrival of mail in the specified file.
.LI "\*LMAILCHECK\*O"
\*OThis variable specifies how often (in seconds)
the shell checks for changes in the modification time of any of
the files specified by the \*LMAILPATH\*O or \*LMAIL \*Oparameters.
The default value is 600 seconds.  When the time has elapsed, the shell
checks before issuing the next prompt.
.LI "\*LMAILPATH\*O"
\*OA list of filenames separated by \*L:\*O (colons).  If
this parameter is set, the shell informs you of
any modifications to the specified files that have occurred within
the last \*LMAILCHECK\*O seconds.  Each filename can be followed
by a \*L?\*O (question mark)
and a message that is printed.  The message will
undergo parameter substitution with the parameter, \*L$\*V_ \*Odefined
as the name of the file that has changed.  The default message is
\*Cyou have mail in $\*V_\*O.
.LI "\*LNLSPATH\*O"
Specifies a list of directories to search to find message catalogs.
.LI "\*LPATH\*O"
\*OThe search path for commands.  (See \*LExecution\*O.)  You
cannot change \*LPATH \*Oif executing under \*Lrsh\*O, except in
\*L\&.profile\*O.
.LI "\*LPS1\*O"
\*OThe value of this parameter is expanded for parameter
substitution to define the primary prompt string which by default
is the \*L$\*O (dollar sign).  The \*L!\*O (exclamation point)
in the primary prompt
string is replaced by the command number.  (See \*LCommand Reentry\*O.)
.LI "\*LPS2\*O"
\*OSecondary prompt string, by default \*L>\*O (right angle bracket).
.LI "\*LPS3\*O"
\*OSelection prompt string used within a \*Lselect\*O loop,
by default \*L#?\*O (number sign, question mark).
.LI "\*LPS4\*O"
\*OThe value of this parameter is expanded for parameter
substitution and precedes each line of an execution trace.  If omitted,
the execution trace prompt is \*L+\*O (plus sign).
.LI "\*LSHELL\*O"
\*OThe pathname of the shell is kept in the environment.
.LI "\*LTMOUT\*O"
\*OIf set to a value greater than 0 (zero), the shell
terminates if a command is not entered within the prescribed number
of seconds after issuing the \*LPS1 \*Oprompt.  (Note that the shell
can be compiled with a maximum bound for this value that cannot be
exceeded.)
.LI "\*LVISUAL\*O"
\*OIf the value of this variable ends in \*Lemacs\*O,
\*Lgmacs\*O, or \*Lvi\*O, the corresponding option (see
the \*Lset \*Ocommand in \*LSpecial ksh Commands\*O) is turned on.
.LE
.PP
\*OThe shell gives default values to \*LPATH\*O, \*LPS1\*O, \*LPS2\*O,
\*LMAILCHECK\*O, \*LTMOUT\*O, and \*LIFS\*O, while \*LHOME\*O,
\*LSHELL\*O,\*L ENV\*O,\*L \*Oand \*LMAIL \*Oare
not set by the shell (although \*LHOME \*Ois\*V \*Oset by the \*Llogin
\*Ocommand).  On some systems, \*LMAIL \*Oand \*LSHELL \*Oare
also set by the \*Llogin \*Ocommand.
.SS Interpretation of Spaces
After parameter and command substitution, the results of substitutions
are scanned for the field separator characters (those found in \*LIFS\*O),
and split into distinct arguments where such characters are found.
Explicit null arguments (\*L`` \*Oor \*L''\*O) are retained.
Implicit null arguments (those resulting from parameters that
have no values) are removed.
.SS Filename Generation
Following substitution, each command \*Vword \*Ois scanned
for the characters \*L*\*O (asterisk), \*L?\*O (question mark), and
\*L[ ]\*O (brackets), unless the \*L\-f\*O
option was set.  If one of these characters appears, the
word is regarded as a pattern.  The word is replaced with
lexicographically sorted filenames that match the pattern.  If no
filename is found that matches the pattern, the word is left
unchanged.  When a pattern is used for filename generation,
the \*L\&.\*O (dot) character at the start of a filename or immediately
following a / (slash), as well as the \*L/\*O character itself, must be
matched explicitly.  In other instances of pattern matching, the \*L/\*O
and \*L\&.\*O are not treated specially.
.VL 4m
.LI "\*L*\*O"
\*OMatches any string, including the null string.
.LI "\*L?\*O"
\*OMatches any single character.
.LI "\*L[\*O...\*L]\*O"
\*OMatches any one of the enclosed characters.
In an expression such as [\*La-z\*O], the \*L\-\*O (dash) means "through"
according to the current collating sequence.  The collating sequence is
determined by the value of the \*LLC_COLLATE\*O environment variable.
If the first character following the
\*L[\*O  (left bracket) is a \*L!\*O (exclamation point),
then any character
not enclosed is matched.
A \*L\-\*O can be included in the character set
by putting it as the first or last character.
.LE
.PP
\*OA \*Vpattern_list \*Ois a list of one or more
patterns separated from each other with a \*L|\*O (vertical bar).
Composite patterns can be formed with one or more of the following:
.VL 4m
.LI "\*L?(\*Vpattern_list\*L)\*O"
\*OOptionally matches
any one of the given patterns.
.LI "\*L*(\*Vpattern_list\*L)\*O"
\*OMatches zero or more occurrences of the given patterns.
.LI "\*L+(\*Vpattern_list\*L)\*O"
\*OMatches one or more occurrences of the given patterns.
.LI "\*L@(\*Vpattern_list\*L)\*O"
\*OMatches exactly one of the given patterns.
.LI "\*L!(\*Vpattern_list\*L)\*O"
\*OMatches anything, except one of the given patterns.
.LE
.SS Character Classes
You can use the following notation to match filenames within
a range indication:
.iS
[:\*Vcharclass\*L:]
.iE
.PP
This format instructs the system to match any single character
belonging to \*Vcharclass\*O; the defined classes correspond to
\*Lctype()\*O subroutines as follows:
.iS
alnum
alpha
cntrl
digit
graph
lower
print
punct
space
upper
xdigit
.iE
.PP
Your locale might define additional character properties, such as
the following:
.iS
[:vowel:]
.iE
.PP
The preceding character class could be TRUE for \*La\*O, \*Le\*O,
\*Li\*O, \*Lo\*O, \*Lu\*O, or \*Ly\*O.  You could then use
\*L[:vowel]\*O inside a \*Lset\*O construction to
match any vowel.  Refer to \*LThe LC_CTYPE Category\*O section of the
\*Llocale\*O file format reference page for more information.
.SS Quoting
The following characters have a special meaning to the shell and cause
termination of a word unless quoted:
.iS
; & ( ) | ^ < > <newline> <space> <tab>
.iE
Each of the \*Vmetacharacters\*O previously listed has a
special meaning to the shell and causes termination
of a word unless quoted.  A character can be \*Vquoted\*O (that is,
made to stand for itself) by preceding it with a
\*L\e\*O (backslash).  The pair \*L\enewline\*O is ignored.
All characters enclosed between a pair
of \*L''\*O (single quotes) are quoted.  A single quote cannot
appear within single quotes.
.PP
Inside "" (double quotes)
parameter and command substitution occurs and \*L\e\*O quotes the
characters \*L\e\*O, \*L`\*O, \*L'\*O, and \*L$\*O.  The
meaning of \*L$* \*Oand \*L$@ \*Ois identical when not quoted
or when used as a parameter assignment value or as a filename.  However,
when used as a command
argument, \*L'$*' \*Ois equivalent to \*L'$1\*Vd\*L$2\*Vd\*O\&. \&. \&.\*L'\*O,
where \*Vd\*O is the first character
of the \*LIFS\*O parameter, whereas \*L'$@' \*Ois equivalent
to \*L'$1' '$2' \*O\&. \&. \&.  Inside
\*L``\*O (grave accents) \*L\e\*O (backslash) quotes
the characters \*L\e\*O, \*L`\*O, and \*L$\*O.  If the
grave accents occur within double quotes, then \*L\e\*O also quotes
the \*L'\*O (single quote) character.
.PP
The special meaning of reserved words or aliases can be removed
by quoting any character of the reserved word.  The recognition of
function names or special command names listed later cannot be altered
by quoting them.
.SS Arithmetic Evaluation
An ability to perform integer arithmetic is provided with the
\*Llet\*O special command.
Evaluations are performed using \*Vlong \*Oarithmetic.
Constants are of the form [\*Vbase\*L#\*O]\*Vn\*O, where \*Vbase\*O
is a decimal number between 2 and 36 representing
the arithmetic base and \*Vn\*O is a number in that base.  If \*Vbase\*O
is omitted, then base 10 is used.
.PP
An arithmetic expression uses the same syntax, precedence, and
associativity of expression as the C language.  All the integral operators,
other than \*L++\*O, \*L--\*O, \*L?:\*O, and \*L, \*Oare
supported.  Named parameters can be referenced by name within an arithmetic
expression without using the parameter substitution syntax.  When a
named parameter is referenced, its value is evaluated as an arithmetic
expression.
.PP
An internal integer representation of a named parameter can
be specified with the \*L\-i \*Ooption of the \*Ltypeset \*Ospecial
command.  Arithmetic evaluation is performed on the value of each assignment
to a named parameter with the \*L\-i \*Oattribute.  If you do not
specify an arithmetic base, the first assignment to the parameter
determines the arithmetic base.  This
base is used when parameter substitution occurs.
.PP
Because many of the arithmetic operators require quoting, an alternative
form of the \*Llet \*Ocommand is provided.  For any command that
begins with a \*L((\*O, all the characters until a matching \*L)) \*Oare
treated as a quoted expression.  More precisely, \*L((\*O...\*L)) \*Ois
equivalent to \*Llet "\*O...\*L"\*O.
.PP
Note that \*L((\*O...\*L))\*O is a command with a return value, whereas
\*L$((\*O...\*L))\*O is the way to put the string representation of
the value of an arithmetic expression into the command line
(that is, it is like a \*L$\*O variable).
.SS Prompting
When used interactively, the shell prompts with the value of \*LPS1
\*Obefore reading a command.  If at any time a newline is typed
and further input is needed to complete a command, then the secondary
prompt (that is, the value of \*LPS2\*O) is issued.
.SS Conditional Expressions
A \*Vconditional expression \*Ois used with the \*L[[ \*Ocompound
command to test attributes of files and to compare strings.  Word splitting
and filename generation are not performed on the words between \*L[[ \*Oand
\*L]]\*O.  Each expression can be constructed from one or more of
the following unary or binary expressions:
.VL 4m
.LI "\*L\-a \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists.
.LI "\*L\-b \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and is a block-special file.
.LI "\*L\-c \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and is a character-special file.
.LI "\*L\-d \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and is a directory.
.LI "\*L\-e \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists.
.LI "\*L\-f \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and is an
ordinary file.
.LI "\*L\-g \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and has
its \*Lsetgid\*O bit set.
.LI "\*L\-G \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and its group
matches the effective group ID of this process.
.LI "\*L\-k \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and has
its sticky bit set.
.LI "\*L\-L \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and is a symbolic link.
.LI "\*L\-n \*Vstring\*O"
\*OTRUE, if length of \*Vstring \*Ois nonzero.
.LI "\*L\-o \*V option\*O"
\*OTRUE, if option named \*Voption \*Ois on.
.LI "\*L\-O \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and is owned
by the effective user ID of this process.
.LI "\*L\-p \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and is a FIFO
special file or a pipe.
.LI "\*L\-r \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and is readable
by current process.
.LI "\*L\-s \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and has size
greater than 0 (zero).
.LI "\*L\-S \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and is a socket.
.LI "\*L\-t \*Vfile_des\*O"
\*OTRUE, if file descriptor number \*Vfile_des\*O is
open and associated with a terminal device.
.LI "\*L\-u \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and has
its \*Lsetuid\*O bit set.
.LI "\*L\-w \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and is writable
by current process.
.LI "\*L\-x \*Vfile\*O"
\*OTRUE, if \*Vfile \*Oexists and is executable
by current process.  If \*Vfile \*Oexists and is a directory, then
the current process has permission to search in the directory.
.LI "\*L\-z \*Vstring\*O"
\*OTRUE, if length of \*Vstring \*Ois 0 (zero).
.LI "\*Vfile1 \*L\-nt \*Vfile2\*O"
\*OTRUE, if \*Vfile1 \*Oexists
and is newer than \*Vfile2\*O.
.LI "\*Vfile1 \*L\-ot \*Vfile2\*O"
\*OTRUE, if \*Vfile1 \*Oexists
and is older than \*Vfile2\*O.
.LI "\*Vfile1 \*L\-ef \*Vfile2\*O"
\*OTRUE, if \*Vfile1 \*Oand \*Vfile2
\*Oexist and refer to the same file.
.LI "\*Vstring \*L= \*Vpattern\*O"
\*OTRUE, if \*Vstring \*Omatches \*Vpattern\*O.
.LI "\*Vstring \*L!= \*Vpattern\*O"
\*OTRUE, if \*Vstring \*Odoes not match \*Vpattern\*O.
.LI "\*Vstring1 < string2\*O"
\*OTRUE, if \*Vstring1 \*Ocollates
before \*Vstring2\*O.
.LI "\*Vstring1 \*L> \*Vstring2\*O"
\*OTRUE, if \*Vstring1 \*Ocollates
after \*Vstring2\*O.
.LI "\*Vexpression1 \*L\-eq \*Vexpression2\*O"
\*OTRUE, if \*Vexpression1 \*Ois equal
to \*Vexpression2\*O.
.LI "\*Vexpression1 \*L\-ne \*Vexpression2\*O"
\*OTRUE, if \*Vexpression1 \*Ois not
equal to \*Vexpression2\*O.
.LI "\*Vexpression1 \*L\-lt \*Vexpression2\*O"
\*OTRUE, if \*Vexpression1 \*Ois less
than \*Vexpression2\*O.
.LI "\*Vexpression1 \*L\-gt \*Vexpression2\*O"
\*OTRUE, if \*Vexpression1 \*Ois greater
than \*Vexpression2\*O.
.LI "\*Vexpression1 \*L\-le \*Vexpression2\*O"
\*OTRUE, if \*Vexpression1 \*Ois less
than or equal to \*Vexpression2\*O.
.LI "\*Vexpression1 \*L\-ge \*Vexpression2\*O"
\*OTRUE, if \*Vexpression1 \*Ois greater
than or equal to \*Vexpression2\*O.
.LE
.PP
\*OA compound expression can be constructed from these primitives
by using any of the following, listed in decreasing order of precedence.
.VL 4m
.LI "\*L(\*Vexpression\*L)\*O"
\*OTRUE, if \*Vexpression \*Ois
TRUE.  Used to group expressions.
.LI "\*L! \*Vexpression\*O"
\*OTRUE if \*Vexpression \*Ois FALSE.
.LI "\*Vexpression1 \*L&& \*Vexpression2\\*O"
\*OTRUE, if \*Vexpression1
\*Oand \*Vexpression2 \*Oare both TRUE.
.LI "\*Vexpression1 \*L|| \*Vexpression2\*O"
\*OTRUE, if either \*Vexpression1
\*Oor \*Vexpression2 \*Ois TRUE.
.LE
.SS Input/Output
\*OBefore a command is executed, you can redirect its input and output
by using a special notation interpreted by the shell.  The following can
appear anywhere in a simple command or can precede or follow a command
and are \*Vnot\*O passed on to the invoked command.  Command
and parameter substitution occurs before \*Vword \*Oor \*Vdigit \*Ois
used, except as noted in the following text.  Filename generation
occurs only if the pattern matches a single file
and interpretation of spaces is not performed.
.VL 4m
.LI "\*L<\*Vword\*O"
\*OUse file \*Vword \*Oas standard input
(file descriptor 0).
.LI "\*L>\*Vword\*O"
\*OUse file \*Vword \*Oas standard output
(file descriptor 1).  If the file does not exist, it is created.
If the file exists, and the \*Lnoclobber \*Ooption is on, this
causes an error; otherwise, it is truncated to 0 (zero) length.
.LI "\*L>|\*Vword\*O"
\*OSames as \*L>\*O, except that it overrides
the \*Lnoclobber \*Ooption.
.LI "\*L>>\*Vword\*O"
\*OUse file \*Vword \*Oas standard output.
If the file exists, output is appended to it (by first seeking
to the End-of-File); otherwise, the file is created.
.LI "\*L<>\*Vword\*O"
\*OOpen file \*Vword \*Ofor reading and
writing as standard input.
.LI "\*L<<\*O[\*L\-\*O]\*Vword\*O"
\*OThe shell input is read
up to a line that is the same as \*Vword\*O, or to an End-of-File.
No parameter substitution, command substitution, or filename generation
is performed on \*Vword\*O.  The resulting document, called a \*Vhere
document\*O, becomes the standard input.  If any character of \*Vword \*Ois
quoted, then no interpretation is placed upon the characters of the
document; otherwise, parameter and command substitution occurs,
\*L\enewline\*O is ignored, and \*L\e\*O must be
used to quote the characters \*L\e\*O,
\*L$\*O, \*L`\*O, and the first character of \*Vword\*O.
If \*L\- \*Ois appended to <<, then all leading tabs
are stripped from \*Vword\*O and from the document.
.LI "\*L<&\*Vdigit\*O"
\*OThe standard input is duplicated from file
descriptor \*Vdigit\*O (see \*Ldup()\*O).  The standard output
is duplicated using \*L>& \*Vdigit\*O.
.LI "\*L<&\-\*O"
\*OThe standard input is closed.  The standard output is closed
using \*L>&\-\*O.
.LI "\*L<&p\*O"
\*OThe input from the coprocess (or background process)
is moved to standard input.
.LI "\*L>&p\*O"
The output to the coprocess is moved to standard output.
.LE
.PP
If one of the preceding redirections is preceded
by a digit, then the file descriptor
number referred to is that specified by the digit (instead of the
default 0 or 1).  For example:
.iS
\&...  2>&1
\*O\c
.iE
.PP
means file descriptor 2 is to be opened for writing as a duplicate
of file descriptor 1.
.PP
The order in which redirections are specified is significant.
The shell evaluates each redirection in terms of the (\*Vfile descriptor\*O,
\*Vfile\*O) association at the time of evaluation.  For example:
.iS
\&...  1>fname >&1
\*O\c
.iE
.PP
first associates file descriptor 1 with file \*Lfname\*O.  It
then associates file descriptor 2 with the file associated with file
descriptor 1 (that is, \*Lfname\*O).  If the order of redirections were
reversed, file descriptor 2 is associated with the terminal
(assuming file descriptor 1 is) and then file descriptor 1 is
associated with file \*Lfname\*O.
.PP
If a command is followed by \*L&\*O and job control is not
active, the default standard input for the command is the empty
\*L/dev/null\*O file.  Otherwise, the environment for the execution
of a command contains the file descriptors of the invoking shell as
modified by input/output specifications.
.SS Environment
The \*Venvironment\*O is a list of
name-value pairs that is passed to an executed program in the
same way as a normal argument list.  The names must be identifiers
and the values are character strings.  The shell interacts with the
environment in several ways.  On invocation, the shell scans the environment
and creates a parameter for each name found, giving it the corresponding
value and marking it \*Lexport\*O.  Executed commands inherit the
environment.  If you modify the values of these parameters or
create new ones, using the \*Lexport\*O or \*Ltypeset \-x\*O
commands, they become part of the environment.  The environment
seen by any executed command is thus composed of any name-value
pairs originally inherited by the shell, whose values can be modified
by the current shell, plus any additions that must be noted in the
\*Lexport\*O or \*Ltypeset \-x\*O commands.
.\" Begin Digital-specific information - CORRECTION
.PP
When the value of an exported parameter is changed, the shell
automatically exports the new value to all child processes.  This
behavior is different from that of the Bourne shell, \*Lsh\*O(1), which
does not automatically re-export a changed parameter.
.\" End Digital-specific information - CORRECTION
.PP
You can augment the environment for any simple command or function
by prefixing it with one or more parameter assignments.
A parameter assignment argument is a word of the
form \*Videntifier\*O=\*Vvalue\*O.
.PP
Thus, the following two expressions are equivalent
(as far as the execution of \*Vcommand\*O is concerned):
.iS
TERM=450 \*Vcommand argument\*O \&.\&.\&.

\*L(export TERM; TERM=450; \*Vcommand argument\*O \&.\&.\&.)
\*O\c
.iE
.PP
If the \*L\-k\*O flag is set, \*Vall\*O parameter assignment
arguments are placed in the environment, even if they occur after
the command name.  The following first prints \*La=b c\*O and then \*Lc\*O:
.iS
echo a=b c
set \-k
echo a=b c
\*O\c
.iE
.PP
This feature is intended for use with scripts written for early
versions of the shell; its use in new scripts is strongly discouraged.
It is likely to disappear someday.
.SS Functions
The \*Lfunction\*O reserved word
is used to define shell functions.  Shell functions are
read in and stored internally.  Alias names are resolved when the function
is read.  Functions are executed like commands with the arguments passed
as positional parameters.  (See \*LExecution\*O.)
.PP
Functions execute in the same process as the caller and share
all files and the present working directory with the caller.  Traps caught
by the caller are reset to their default action inside the function.
A trap condition that is not caught or ignored by the function causes
the function to terminate and the condition to be passed on to the
caller.  A trap on \*LEXIT\*O set inside a function is executed
after the function completes in the environment of the caller.  Ordinarily,
variables are shared between the calling program and the function.
However, the special command \*Ltypeset\*O used within a function
defines local variables whose scope includes the current function
and all functions it calls.
.PP
The special command \*Lreturn\*O is used to return from function
calls.  Errors within functions return control to the caller.
.PP
Function identifiers can be listed with the \*L\-f\*O or \*L+f\*O option
of the \*Ltypeset\*O special command.  The text of functions
is also listed with \*L\-f\*O.  Function can be undefined with
the \*L\-f\*O option of the \*Lunset\*O special command.
.PP
\*OOrdinarily, functions are unset when the shell executes a shell
script.  The \*L\-xf \*Ooption of the \*Ltypeset\*O command allows
a function to be exported to scripts that are executed without a separate
invocation of the shell.  Functions that need to be defined across
separate invocations of the shell should be specified in the \*LENV \*Ofile
with the \*L\-xf \*Ooption of \*Ltypeset\*O.
.SS Jobs
If the \*Lmonitor\*O option of the \*Lset\*O command is
turned on, an interactive shell associates a job with each
pipeline.  It keeps a
table of current jobs, printed by the \*Ljobs \*Ocommand,
and assigns them small integer numbers.  When a job is started asynchronously
with \*L&\*O, the shell prints a line that looks like:
.oS
[1] 1234
\*O\c
.oE
.PP
\*OThis line indicates that the job, which was started asynchronously, was
job number 1 and had one (top-level) process, whose process
ID was 1234.
.PP
If you are running a job and want to do something else, you can enter the
Suspend key sequence (normally \*L<Ctrl-z>\*O,
which sends a \*LSIGINT\*O signal to the current job.  The shell
then normally indicates that the job has been stopped,
and it prints another prompt.  You can then manipulate the state of this job,
putting it in the background with the \*Lbg\*O command, or run some other
commands and then eventually bring the job back into the foreground with
the foreground command \*Lfg\*O.  The job suspension
takes effect immediately, and corresponds to the Interrupt key
sequence in that pending output and unread input
are discarded.  A special key sequence, \*L<Ctrl-y>\*O, does
not generate a \*LSIGINT\*O signal until a program attempts to read it.
(See the \*Lread()\*O system call for more information.)  This key sequence
can usefully be typed ahead when you have prepared some commands
for a job that you wish to stop after it has read them.
.PP
A job being run in the background will stop if it tries to read
from the terminal.  Background jobs are normally allowed to produce
output, but this can be disabled by issuing the \*Lstty tostop\*O command.
If you set this tty option, then background jobs will stop when they
try to produce output like they do when they try to read input.
.PP
\*OThere are several ways to refer to jobs in the shell.  A job can
be referred to by the process ID of any process of the job, or by one
of the following:
.VL 4m
.LI "\*L%\*Vjob_number\*O"
\*OThe job with the given number.
.LI "\*L%\*Vstring\*O"
\*OAny job whose command line begins with \*Vstring\*O.
.LI "\*L%?\*Vstring\*O"
\*OAny job whose command line contains \*Vstring\*O.
.LI "\*L%\&%\&\*O"
\*OCurrent job.
.LI "\*L%+\*O"
\*OEquivalent to \*L%\&%\&\*O.
.LI "\*L%\-\*O"
\*OPrevious job.
.LE
.PP
\*OThis shell learns immediately whenever a process changes state.
It normally informs you whenever a job becomes blocked so that no
further progress is possible, but only just before it prints a prompt.
This is done so that it does not otherwise disturb your work.
.PP
\*OWhen the monitor mode is on, each background job that is completed
triggers any trap set for \*LCHLD\*O.
.PP
\*OWhen you try to leave the shell while jobs are stopped or running,
you are warned that \*CYou have stopped(running) jobs.\*O
You can use the \*Ljobs \*Ocommand to see what they are.  If you
do this or immediately try to exit again, the shell does not warn
you a second time, and the stopped jobs are terminated.
.SS Signals
The \*LSIGINT\*O and \*LSIGQUIT\*O signals for an
invoked command are ignored if
the command is followed by \*L& \*Oand job \*Lmonitor \*Ooption
is not active.  Otherwise, signals have the values inherited by the
shell from its parent (but see also the \*Ltrap\*O command).
.SS Execution
\*OEach time a command is executed, the previous substitutions are carried
out.  If the command name matches one of the special commands
listed later, it is executed within the current shell process.
Next, the command name is checked to see if it matches one of the
user-defined functions.  If it does, the positional parameters are
saved and then reset to the arguments of the function call.
When the function is completed or issues a \*Lreturn\*O,
the positional parameter list is restored and
any trap set on \*LEXIT\*O within
the function is executed.  The value of a function is
the value of the last command executed.  A function is also executed
in the current shell process.  If a command name is not a special
command or a user-defined function, a process is
created and an attempt is made to execute the command via \*Lexec\*O.
.PP
The \*LPATH\*O shell parameter defines the search path for
the directory containing the command.  Alternative directory names
are separated by a \*L:\*O (colon).  The default path is \*L:/usr/bin:\*O
(specifying \*L/usr/bin\*O, and the current
directory in that order).  The current directory can be specified by
two or more adjacent colons, or by a colon at the beginning or end
of the path list.  If the command name contains a \*L/\*O (slash), then the
search path is not used.  Otherwise, each directory in the path is
searched for an executable file.
.PP
If the file has execute permission
but is not a directory or an \*La.out \*Ofile, it is assumed to
be a file containing shell commands.  A subshell is spawned
to read it.  All nonexported aliases, functions, and named parameters
are removed in this case.  If the shell command file does not have read
permission, or if the \*Lsetuid \*Oand/or \*Lsetgid \*Obits
are set on the file, the shell executes an agent whose job it
is to set up the permissions and execute the shell with the shell
command file passed down as an open file.  A command in parentheses
is executed in a subshell without removing nonexported quantities.
.SS Command Reentry
\*OThe text of the last \*LHISTSIZE \*O(default 128) commands
entered from a terminal device is saved in a history file.
The \*L$HOME/.sh\*V_\*Lhistory\*O file is used if the \*LHISTFILE
\*Ovariable is not set or is not writable.  A shell can access the
commands of all \*Vinteractive \*Oshells that use
the same named \*LHISTFILE\*O.  The \*Lfc\*O special command
is used to list or edit a
portion of this file.  The portion of the file to be edited or listed
can be selected by number or by giving the first character or characters
of the command.  A single command or range of commands can be specified.
If you do not specify an editor program as an argument to \*Lfc\*O, then
the value of the \*LFCEDIT\*O parameter is used.  If \*LFCEDIT\*O is
not defined, then \*L/usr/bin/ed\*O is used.  The edited commands are
printed and reexecuted upon leaving the editor.  The editor
name \*L\-\*O (dash) is used to skip the editing phase and to reexecute
the command.  In this case, a substitution parameter of the form
\*Vold\*L=\*Vnew
\*Ocan be used to modify the command before execution.  For
example, if \*Lr \*Ois aliased to \*L'fc \-e \-'\*O, then typing
`\*Lr bad=good c\*O' reexecutes the most recent command, which
starts with the letter \*Lc\*O, replacing the first occurrence
of the string \*Lbad \*Owith the string \*Lgood\*O.
.SS Inline Editing Options
Normally, each command line entered from a terminal device is
simply typed followed by a newline (\*L<Return>\*O or linefeed).
If the \*Lemacs\*O, \*Lgmacs\*O, or \*Lvi \*Ooption
is active, you can edit the command line.  To be in any of
these edit modes, \*Lset \*Othe corresponding option.  An editing
option is automatically selected each time the \*LVISUAL \*Oor \*LEDITOR
\*Ovariable is assigned a value ending in either of these option names.
.PP
\*OThe editing features require that the terminal accept \*L<Return>\*O
as carriage-return without linefeed and that a space must overwrite
the current character on the screen.  ADM terminal users should set
the space-advance switch to \*LSpace\*O.  Hewlett-Packard
series 2621 terminal users should set the straps to \*LbcGHxZ etX\*O.
.PP
\*OThe editing modes create the impression that the user is looking
through a window at the current line.  The window width is the value
of \*LCOLUMNS \*Oif it is defined, otherwise it is 80 bytes.  If the line is
longer than the window width minus 2, a mark is displayed at the
end of the window to notify the user.  As the cursor moves and reaches
the window boundaries, the window is centered about the cursor.
The mark is a \*L>\*O (right angle bracket) if the line extends
on the right side of the window, a \*L<\*O (left angle bracket) if the line
extends on the left side of the window, and an \*L*\*O (asterisk) if
the line extends on both sides of the window.
.PP
\*OThe search commands in each edit mode provide access to the history
file.  Only strings are matched, not patterns, although if the leading
character in the string is a \*L^\*O (circumflex), the match
is restricted to begin at the first character in the line.
.SS The emacs Editing Mode
\*OThis mode is entered by enabling either the \*Lemacs \*Oor \*Lgmacs\*O
option.  The only difference between these two modes is the way
they handle \*L<Ctrl-t>\*O.  To edit, the user moves the cursor to the point
needing correction and then inserts or deletes characters or words
as needed.  All the editing commands are control characters or escape
sequences.  The notation for control characters is \*L^\*O (circumflex)
followed by the character.  For example, \*L^F\*O is the notation
for \*L<Ctrl-f>\*O.  This is entered by pressing \*Lf\*O while holding down
\*L<Ctrl>\*O.  \*L<Shift>\*O is not depressed.
(The notation \*L^?\*O indicates \*L<Delete>\*O.)
.PP
\*OThe notation for escape sequences is \*LM\- \*Ofollowed by a
character.  For example, \*LM\-f \*O(pronounced Meta f) is entered
by pressing \*L<Esc>\*O (ASCII \*L033\*O) followed by \*Lf\*O.
(\*LM\-F \*Owould
be the notation for \*L<Esc>\*O followed by \*L<Shift>\*O (capital) \*LF\*O.)
.PP
\*OAll edit commands operate from any place on the line (not just
at the beginning).  Do not press \*L<Return>\*O or linefeed
after edit commands except when noted.
.VL 4m
.LI "\*L<Ctrl-f>\*O"
\*OMoves the cursor forward (right) one character.
.LI "\*L<Esc-f>\*O"
\*OMoves the cursor forward one word.  (The \*Lemacs\*O
editor's definition of a word
is a string of characters, consisting of only letters, digits, and
underscores, and delimited with spaces or tabs.)
.LI "\*L<Ctrl-b>\*O"
\*OMoves the cursor backward (left) one character.
.LI "\*L<Esc-b>\*O"
\*OMoves the cursor backward one word.
.LI "\*L<Ctrl-a>\*O"
\*OMoves the cursor to the start of the line.
.LI "\*L<Ctrl-e>\*O"
\*OMoves the cursor to the end of the line.
.LI "\*L<Ctrl-]> \*Vcharacter\*O"
\*OMoves the cursor forward on the current
line to the character indicated by the \*Vcharacter\*O argument.
.LI "\*L<Esc-Ctrl-]> \*Vcharacter\*O"
Moves the cursor backward on the
current line to the character indicated by the \*Vcharacter\*O argument.
.LI "\*L<Ctrl-x Ctrl-x>\*O"
\*OInterchanges the cursor and mark.
.LI "\*LErase\*O"
Deletes the previous character.
(User-defined Erase character as defined by the \*Lstty\*O
command, often \*L<Ctrl-h>\*O or \*L#\*O.)
.LI "\*L<Ctrl-d>\*O"
\*ODeletes the current character.
.LI "\*L<Esc-d>\*O"
\*ODeletes the current word.
.LI "\*L<Esc-Backspace>\*O"
\*ODeletes the previous word.
.LI "\*L<Esc-h>\*O"
\*ODeletes the previous word.
.LI "\*L<Esc-Delete>\*O"
\*ODeletes the previous word (if your Interrupt
character is \*L<Delete>\*O, this command does not work).
.LI "\*L<Ctrl-t>\*O"
\*OTransposes the current character with next character
in \*Lemacs \*Omode.  Transposes two previous characters in \*Lgmacs\*O mode.
.LI "\*L<Ctrl-c>\*O"
\*OCapitalizes the current character.
.LI "\*L<Esc-c>\*O"
\*OCapitalizes the current word.
.LI "\*L<Esc-l>\*O"
\*OChanges the current word to lowercase.
.LI "\*L<Ctrl-k>\*O"
\*ODeletes from the cursor to the end of the line.
If preceded by a numerical parameter whose value is less than the
current cursor position, deletes from given position up to the
cursor.  If preceded by a numerical parameter whose value is greater
than the current cursor position, deletes from the cursor up to
given cursor position.
.LI "\*L<Ctrl-w>\*O"
\*ODeletes from the cursor to the mark.
.LI "\*L<Esc-p>\*O"
\*OPushes the region from the cursor to the mark on the stack.
.LI "\*LKill\*O"
Kills the entire current
line.  If two Kill characters are entered in succession, all
Kill characters from then on cause a linefeed (useful when using
paper terminals).  (User-defined Kill character as defined by the \*Lstty\*O
command, often \*L<Ctrl-g>\*O or \*L@\*O.)
.LI "\*L<Ctrl-y>\*O"
\*ORestores the last item removed from the line.  (Yanks the
item back to the line.)
.LI "\*L<Ctrl-l>\*O"
\*OPerforms a linefeed and prints the current line.
.LI "\*L<Ctrl-@>\*O"
\*O(Null character.)  Sets the mark.
.LI "\*L<Esc \*Vspace\*L>\*O"
\*OSets the mark.
.LI "\*L<Ctrl-j>\*O"
\*OExecutes the current line (newline).
.LI "\*L<Ctrl-m>\*O"
\*OExecutes the current line (enter).
.LI "EOF"
The End-of-File character
is processed as an End-of-File only if the current line is null.
.LI "\*L<Ctrl-p>\*O"
\*OFetches the previous command.  Each time \*L<Ctrl-p>\*O is
entered, the previous command back in time is accessed.  Moves back
one line when not on the first line of a multiline command.
.LI "\*L<Esc-<>\*O"
\*OFetches the least recent (oldest) history line.
.LI "\*L<Esc->>\*O"
\*OFetches the most recent (youngest) history line.
.LI "\*L<Ctrl-n>\*O"
\*OFetches the next command line.  Each time \*L<Ctrl-n>\*O is
entered, the next command line forward in time is accessed.
.LI "\*L<Ctrl-r>\*O \*Vstring\*O"
\*OReverses the search history for a previous
command line containing \*Vstring\*O.  If an argument of 0 (zero) is
given, the search is forward.  The \*Vstring\*O command is terminated by a
\*L<Return>\*O or newline character.  If \*Vstring\*O is preceded by a
\*L^\*O (circumflex), the matched line must begin with \*Vstring\*O.
If \*Vstring \*Ois omitted, then the next command line containing
the most recent \*Vstring \*Ois accessed.  In this case, an argument
of 0 (zero) reverses the direction of the search.
.LI "\*L<Ctrl-o>\*O"
\*OExecutes the current line and fetches
the next line relative to current line from the history file.  (Operate)
.LI "\*L<Esc>\*O \*Vdigits\*O"
\*ODefines the numeric parameter (escape).
The digits are taken as an argument to the next command.  The commands
that accept a parameter are \*L<Ctrl-f>\*O, \*L<Ctrl-b>\*O,
\*L<Erase>\*O, \*L<Ctrl-c>\*O,
\*L<Ctrl-d>\*O, \*L<Ctrl-k>\*O, \*L<Ctrl-r>\*O, \*L<Ctrl-p>\*O,
\*L<Ctrl-n>\*O, \*L<Ctrl-]>\*O, \*L<Esc-.>\*O, \*L<Esc-Ctrl-]>\*O,
\*L<Esc-_>\*O, \*L<Esc-b>\*O, \*L<Esc-c>\*O, \*L<Esc-d>\*O,
\*L<Esc-f>\*O, \*L<Esc-h>\*O, \*L<Esc-l>\*O and \*L<Esc-Ctrl-h>\*O.
.LI "\*L<Esc>\*O \*Vletter\*O"
\*OYour alias list is searched
for an alias by the name \*V_letter\*O and if an alias of this
name is defined, its value is inserted on the input queue.  \*Vletter
\*Omust not be one of the preceding metafunctions. (Soft-key)
.\" Begin Digital-specific information - CORRECTION
.LI "\*L<Esc-]>\*O \*Vletter\*O"
Your alias list is searched
for an alias by the name \*V_\|_letter\*O and if an alias of this
name is defined, its value is inserted on the input queue (Soft\(hykey).
This can be used to program functions keys on many systems.
.LI "\*L<Esc-[>\*O \*Vletter\*O"
Same as \*L<Esc-]>\*O \*Vletter\*O.
.\" End Digital-specific information - CORRECTION
.LI "\*L<Esc-.>\*O"
\*OThe last word of the previous command is inserted
on the line.  If preceded by a numeric parameter, the value of this
parameter determines which word to insert, rather than the last word.
.LI "\*L<Esc-_>\*O"
\*OSame as the \*L<Esc-.>\*O combination.
.LI "\*L<Esc-*>\*O"
\*OAttempts filename generation on the current
word.  An * (asterisk) is appended if the word does not match any file or
contain any special pattern characters.
.LI "\*L<Esc-Esc>\*O"
\*OFilename completion.  Replaces the current
word with the longest common prefix of all filenames matching the
current word with an asterisk appended.  If the match is unique, a
\*L/\*O (slash) is
appended if the file is a directory, and a space is appended if the
file is not a directory.
.LI "\*L<Esc-=>\*O"
\*OLists the files matching current word pattern if
an * (asterisk) were appended.
.LI "\*L<Ctrl-u>\*O"
\*OMultiplies the argument of the next command by 4.
.LI "\*L\e\*O"
\*OEscapes the next character.  Editing characters, the
user's Erase, Kill, and Interrupt (normally by using
\*L<Delete>\*O) characters
can be entered in a command line or in a search string if preceded
by a \e (backslash).  The backslash removes the next character's
editing features (if any).
.LI "\*L<Ctrl-v>\*O"
\*ODisplays the version of the shell.
.LI "\*L<Esc-#>\*O"
\*OInserts a \*L#\*O (number sign) at the beginning of the line and
executes it.  This causes a comment to be inserted in the history file.
.LE
.SS The vi Editing Mode
\*OThere are two typing modes.  Initially, when you enter a command
you are in the \*Linput \*Omode.  To edit, the user enters \*Lcontrol
\*Omode by typing \*L<Esc>\*O (ASCII \*L033\*O) and moves the cursor to the
place needing correction and then inserts or deletes characters or
words as needed.  Most control commands accept an optional repeat count
prior to the command.  When in \*Lvi\*O mode on most systems, canonical
processing is initially enabled and the command is echoed again
if the speed is 1200 baud or greater, if it contains any control characters,
or if less than 1 second has elapsed since the prompt
was printed.  The Escape character
terminates canonical processing for the remainder
of the command and the user can then modify the command line.
.PP
This scheme has the advantages of canonical processing with the type-ahead
echoing of raw mode.  If the option \*Lviraw \*Ois also set, the
terminal always has canonical processing disabled.  This mode
is implicit for systems that do not support two alternate End-of-Line
delimiters, and can be helpful for certain terminals.
.SS Input Edit Commands
\*OBy default the editor is in input mode.
.VL 4m
.LI "\*LErase\*O"
\*O(User-defined Erase character as defined by
the \*Lstty\*O command, often \*L<Ctrl-h>\*O or \*L#\*O.) Deletes
the previous character.
.LI "\*L<Ctrl-w>\*O"
\*ODeletes the previous space-separated word.
.LI "\*L<Ctrl-d>\*O"
\*OTerminates the shell.
.LI "\*L<Ctrl-v>\*O"
\*OEscapes the next character.  Editing characters and
the user's Erase or Kill characters can be entered in a command line
or in a search string if preceded by a \*L<Ctrl-v>\*O.  \*L<Ctrl-v>\*O
removes the next character's editing features (if any).
.LI "\*L\e\*O"
\*OEscapes the next Erase or Kill character.
.LE
.SS "Motion Edit Commands"
\*OThese commands move the cursor:
.VL 4m
.LI "\*O[\*Vcount\*O]\*Ll\*O"
\*OCursor forward (right) one character.
.LI "\*O[\*Vcount\*O]\*Lw\*O"
\*OCursor forward one word.  A word is a string of characters delimited
by spaces or tabs.
.LI "\*O[\*Vcount\*O]\*LW\*O"
\*OCursor to the beginning of the
next word that follows a space.
.LI "\*O[\*Vcount\*O]\*Le\*O"
\*OCursor to the end of the word.
.LI "\*O[\*Vcount\*O]\*LE\*O"
\*OCursor to end of the current space-delimited word.
.LI "\*O[\*Vcount\*O]\*Lh\*O"
\*OCursor backward (left) one character.
.LI "\*O[\*Vcount\*O]\*Lb\*O"
\*OCursor backward one word.
.LI "\*O[\*Vcount\*O]\*LB\*O"
\*OCursor to the preceding space-delimited word.
.LI "\*O[\*Vcount\*O]\*L|\*O"
\*OCursor to the column \*Vcount\*O.
.LI "\*O[\*Vcount\*O]\*Lf\*Vc\*O"
\*OFinds the next character \*Vc \*Oin
the current line.
.LI "\*O[\*Vcount\*O]\*LF\*Vc\*O"
\*OFinds the previous character \*Vc
\*Oin the current line.
.LI "\*O[\*Vcount\*O]\*Lt\*Vc\*O"
\*OEquivalent to \*Lf \*Ofollowed by \*Lh\*O.
.LI "\*O[\*Vcount\*O]\*LT\*Vc\*O"
\*OEquivalent to \*LF \*Ofollowed
by \*Ll\*O.
.LI "\*O[\*Vcount\*O]\*L;\*O"
\*ORepeats \*Vcount \*Otimes, the
last single character find command: \*Lf\*O, \*LF\*O, \*Lt\*O,
or \*LT\*O.
.LI "\*O[\*Vcount\*O]\*L,\*O"
\*OReverses the last single character
find command \*Vcount \*Otimes.
.LI "\*L0\*O"
\*OCursor to the start of the line.
.LI "\*L^\*O"
\*OCursor to the first nonspace character in the line.
.LI "\*L$\*O"
\*OCursor to the end of the line.
.LE
.SS "Search Edit Commands"
\*OThese commands access your command history.
.VL 4m
.LI "\*O[\*Vcount\*O]\*Lk\*O"
\*OFetches the previous command.  Each time \*Lk
\*Ois entered, the previous command back in time is accessed.
.LI "\*O[\*Vcount\*O]\*L\-\*O"
\*OEquivalent to \*Lk\*O.
.LI "\*O[\*Vcount\*O]\*Lj\*O"
\*OFetches the next command.  Each time \*Lj \*Ois
entered, the next command forward in time is accessed.
.LI "\*O[\*Vcount\*O]\*L+\*O"
\*OEquivalent to \*Lj\*O.
.LI "\*O[\*Vcount\*O]\*LG\*O"
\*OFetches the command number \*Vcount\*O.
The default is the least recent \*Lhistory\*O command.
.LI "\*L/\*Vstring\*O"
\*OSearches backward through history for a previous
command containing the specified \*Vstring\*O.  \*Vstring \*Ois
terminated by \*L<Return>\*O or a newline character.  If the specified
string is preceded by a \*L^\*O (circumflex), the matched line must
begin with \*Vstring\*O.  If \*Vstring \*Ois null, the previous
string is used.
.LI "\*L?\*Vstring\*O"
\*OSame as \*L/\*O (slash) except that the search
is in the forward direction.
.LI "\*Ln\*O"
\*OSearches for next match of the last pattern to the \*L/\*O
or \*L?\*O commands.
.LI "\*LN\*O"
\*OSearches for next match of the last pattern to the \*L/\*O or
\*L?\*O commands, but in reverse direction.  Searches
the command history for the \*Vstring \*Oentered by
the previous \*L/ \*Ocommand.
.LE
.SS "Text Modification Edit Commands"
\*OThese commands modify the line.
.VL 4m
.LI "\*La\*O"
\*OEnters input mode and enters text after the current character.
.LI "\*LA\*O"
\*OAppends text to the end of the line.  Equivalent to \*L$a\*O.
.LI "\*O[\*Vcount\*O]\*Lc\*Vmotion\*O"
\*O\c
.LI "\*Lc\*O[\*Vcount\*O]\*Vmotion\*O"
\*ODeletes the current character
through the character to which \*Vmotion \*Owould move the cursor,
and enters input mode.  If \*Vmotion \*Ois \*Lc\*O, the entire
line is deleted and input mode is entered.
.LI "\*LC\*O"
\*ODeletes the current character through the end of line,
and enters input mode.  Equivalent to \*Lc$\*O.
.LI "\*LS\*O"
\*OEquivalent to \*Lcc\*O.
.LI "\*LD\*O"
\*ODeletes the current character through the end of line.
Equivalent to \*Ld$\*O.
.LI "\*O[\*Vcount\*O]\*Ld\*Vmotion\*O"
.LI "\*Ld\*O[\*Vcount\*O]\*Vmotion\*O"
\*ODeletes the current character
through the character to which \*Vmotion \*Owould move.  If \*Vmotion \*Ois
\*Ld\*O, the entire line is deleted.
.LI "\*Li\*O"
\*OEnters input mode and inserts text before the current character.
.LI "\*LI\*O"
\*OInserts text before the beginning of the line.  Equivalent to \*L0i\*O.
.LI "\*O[\*Vcount\*O]\*LP\*O"
\*OPlaces the previous text modification before the cursor.
.LI "\*O[\*Vcount\*O]\*Lp\*O"
\*OPlaces the previous text modification after the cursor.
.LI "\*LR\*O"
\*OEnters input mode and replaces characters on the screen
with the characters you type, overlay fashion.
.LI "\*O[\*Vcount\*O]\*Lr\*Vc\*O"
\*OReplaces the \*Vcount \*Ocharacters,
starting at the current cursor position with \*Vc\*O and advancing
the cursor.
.LI "\*O[\*Vcount\*O]\*Lx\*O"
\*ODeletes the current character.
.LI "\*O[\*Vcount\*O]\*LX\*O"
\*ODeletes the preceding character.
.LI "\*O[\*Vcount\*O]\*L.\*O"
\*ORepeats the previous text modification command.
.LI "\*O[\*Vcount\*O]\*L~\*O"
\*OInverts the case of the \*Vcount \*Ocharacters,
starting at the current cursor position and advancing the cursor.
.LI "\*O[\*Vcount\*O]\*V_\*O"
\*OCauses the \*Vcount \*Oword
of the previous command to be appended and input mode entered.  The
last word is used if \*Vcount \*Ois omitted.
.LI "\*L*\*O"
\*OCauses an \*L*\*O (asterisk) to be appended to the current
word and filename generation to be attempted.  If no match is found, it
rings the bell.  Otherwise, the word is replaced by the matching pattern
and input mode is entered.
.LI "\*L\e\*O"
\*OFilename completion.  Replaces the current word with
the longest common prefix of all filenames matching the current word
with an * (asterisk) appended.
If the match is unique, a \*L/\*O (slash) is appended if the file
is a directory; a space is appended if the file is not a directory.
.LE
.SS Miscellaneous vi Commands
.\"
.VL 4m
.LI "\*O[\*Vcount\*O]\*Ly\*Vmotion\*O"
.LI "\*Ly\*O[\*Vcount\*O]\*Vmotion\*O"
\*OYanks the current character
through the character to which \*Vmotion \*Owould
move the cursor and puts the characters into the delete buffer.  The text
and cursor are unchanged.
.LI "\*LY\*O"
\*OYanks from current position to the end of line.  Equivalent
to \*Ly$\*O.
.LI "\*Lu\*O"
\*OUndoes the last text-modifying command.
.LI "\*LU\*O"
\*OUndoes all the text-modifying commands performed on the line.
.LI "\*O[\*Vcount\*O]\*Lv\*O"
\*OReturns the command \*Lfc \-e
${VISUAL:-${EDITOR:-vi}} \*Vcount \*Oin the input buffer.  If \*Vcount
\*Ois omitted, the current line is used.
.LI "\*L<Ctrl-l>\*O"
\*OPerforms a linefeed and prints the current line.  Effective
only in control mode.
.LI "\*L<Ctrl-j>\*O"
\*OExecutes the current line, regardless of mode (newline).
.LI "\*L<Ctrl-m>\*O"
\*OExecutes the current line, regardless of mode (enter).
.LI "\*L#\*O"
\*OSends the line after inserting a \*L#\*O (number sign) in front
of the line.  Useful for causing the current line to be inserted in
the history without being executed.
.LI "\*L=\*O"
\*OLists the filenames that match the current word if
an * (asterisk) is appended to it.
.LI "\*L@\*Vletter\*O"
\*OSearches the alias list for an alias
by the name \*V_letter \*O.  If an alias of this name is defined,
its value is inserted in the input queue for processing.
.LE
.SS "Special ksh Commands"
\*OThe following simple commands are executed in the shell process.
Input/output redirection is permitted.  Unless otherwise indicated,
the output is written on file descriptor 1 and the exit status, when
there is no syntax error, is 0 (zero).
.PP
Commands that
are indicated as \*Vcommand\*O\u\s-21\s+2\d
or \*Vcommand\*O\u\s-22\s+2\d
are treated specially in the following ways:
.ML
.LI
\*OParameter assignment lists that precede the command remain in effect
when the command completes.
.LI
\*OI/O redirections are processed after parameter assignments.
.LI
\*OErrors cause a script that contains the commands
so marked to abort.
.LI
\*OWords, following a command specified as \*Vcommand\*O\u\s-22\s+2\d
that are in the format
of a parameter assignment, are expanded with the same rules as a parameter
assignment.  This means that \*L~\*O (tilde)
substitution is performed after
the \*L=\*O (equal sign).  Word splitting and filename generation are
not performed.
.LE
.VL 4m
.LI "\*L:\*O[\*Vargument\*O \&...]\u\s-21\s+2\d"
\*OThe command only expands arguments.
.LI "\*L\&. \*Vfile\*O [\*Vargument\*O \&...]\u\s-21\s+2\d"
\*OReads
the complete file and executes the commands.  The commands
are executed in the current shell environment.  The search path specified
by \*LPATH \*Ois used to find the directory containing \*Vfile\*O.
If any arguments are specified, they become the positional parameters.
Otherwise, the positional parameters are unchanged.  The exit status
is the exit status of the last command executed.
.LI "\*Lalias\*O [\*L\-tx\*O] [\*Vname\*O[\*L=\*Vvalue\*O \&...]]\u\s-22\s+2\d"
The \*Lalias\*O command with no arguments prints the list
of aliases in the form \*Vname\*O=\*Vvalue \*Oon standard output.
An alias is defined for each name whose value is
given.  A trailing space in \*Vvalue \*Ocauses the next word to
be checked for alias substitution.  The \*L\-t \*Oflag is used to
set and list tracked aliases.  The value of a tracked alias is the
full pathname corresponding to the given name.  The value
becomes undefined when the value of \*LPATH \*Ois reset but the
aliases remained tracked.  Without the \*L\-t \*Oflag, for each \*Vname
\*Oin the argument list for which no \*Vvalue\*O is given, the
name and value of the alias is printed.  The \*L\-x \*Oflag is used
to set or print exported aliases.  An exported alias is defined for
scripts invoked by name.  The exit status is nonzero if a name
is given without a value, and no alias was defined.
.LI "\*Lbg \*O[\*Vjob\*O \&...]"
\*OPuts each specified \*Vjob\*O into
the background.  The current job is put into the background if \*Vjob\*O
is not specified.  (See \*LJobs \*Ofor a description of
the format of \*Vjob\*O.)
.LI "\*Lbreak \*O[\*Vn\*O]\u\s-21\s+2\d"
\*OExits from the enclosing \*Lfor,
while, until, \*Oor \*Lselect \*Oloop, if any.  If \*Vn \*Ois
specified, breaks \*Vn \*Olevels.
.LI "\*Lcontinue \*O[\*Vn\*O]\u\s-21\s+2\d"
\*OResumes the next iteration
of the enclosing \*Lfor, while, until, \*Oor \*Lselect \*Oloop.
If \*Vn \*Ois specified, resumes at the \*Vn\*Oth enclosing loop.
.LI "\*Lcd \*O[\*Vargument\*O]"
.LI "\*Lcd \*Vold new\*O"
\*OThis command can be in either of two
forms.  In the first form, it changes the current directory to
\*Vargument\*O.  If \*Vargument\*O is a \*L\-\*O (dash), the
directory is changed to the previous
directory.  The \*LHOME\*O shell parameter is the default \*Vargument\*O.
The \*LPWD\*O parameter is set to the current directory.  The
\*LCDPATH\*O shell parameter defines the search path for the directory
containing \*Vargument\*O.  Alternative directory names are separated
by a \*L:\*O (colon).  The default path is a null string, specifying
the current directory.  Note that the current directory is specified
by a null pathname, which can appear immediately after the = (equal
sign) or between the colon delimiters anywhere else in the path list.
.IP
If \*Vargument\*O begins with a \*L/\*O (slash), the search path is not
used.  Otherwise, each directory in the path is searched for
\*Vargument\*O.  The second form of \*Lcd \*Osubstitutes the
string \*Vnew \*Ofor the string \*Vold \*Oin the
current directory name \*LPWD \*Oand
tries to change to this new directory.  The \*Lcd \*Ocommand cannot
be executed by \*Lrsh\*O.
.\"Begin Digital-specific information CORRECTION
.\"
.\"Removed see reference sentence as the command is fully explained here.
.\"
.LI "\*Lecho \*O[\*Vargument\*O \&...]"
Writes arguments to standard output.
.\"End Digital-specific information CORRECTION
.LI "\*Leval\*O [\*Vargument\*O \&...]\u\s-21\s+2\d"
\*OThe arguments are
read as input to the shell and the resulting commands are executed.
.LI "\*Lexec\*O [\*Vargument\*O \&...]\u\s-21\s+2\d"
\*OIf \*Vargument\*O is
given, the command specified by the arguments is executed in place
of this shell without creating a new process.  Input/output arguments
can appear and affect the current process.  If no arguments are given,
the effect of this command is to modify file descriptors as prescribed
by the input/output redirection list.  In this case, any file descriptor
numbers greater than 2 that are opened with this mechanism are closed
when invoking another program.
.LI "\*Lexit \*O[\*Vn\*O]\u\s-21\s+2\d"
\*OCauses the shell to exit
with the exit status specified by \*Vn\*O.  If \*Vn \*Ois omitted,
the exit status is that of the last command executed.  An End-of-File
also causes the shell to exit, except for a shell which has
the \*Lignoreeof \*Ooption (see \*Lset\*O) turned on.
.LI "\*Lexport \*O[\*Vname\*O[\*L=\*Vvalue\*O \&...]]\u\s-22\s+2\d"
\*OThe given names are marked for automatic export
to the environment of subsequently executed commands.
.LI "\*Lfc \*O[\*L\-e \*Veditor\*O] [\*L\-nlr\*O] [\*Vfirst \*O[\*Vlast\*O]]"
.LI "\*Lfc \-e \- \*O[\*Vold\*L=\*Vnew\*O] [\*Vcommand\*O]"
\*OIn the first form, a range of commands from \*Vfirst \*Oto \*Vlast \*Ois
selected from the last \*LHISTSIZE \*Ocommands that were entered
at the terminal.  The arguments \*Vfirst \*Oand \*Vlast\*O can
be specified as a number or as a string.  A string is used to locate
the most recent command, starting with the given string.  A negative
number is used as an offset to the current command number.  If the
\*L\-l\*O flag is selected, the commands are listed on standard
output.  Otherwise, the editor program \*Veditor\*O is invoked on
a file containing these keyboard commands.
.IP
If \*Veditor\*O is not
supplied, the value of the parameter \*LFCEDIT \*O(default
\*L/usr/bin/ed\*O) is used as
the editor.  When editing is complete, the edited
commands are executed.  If \*Vlast \*Ois not specified, then it
is set to \*Vfirst\*O.  If \*Vfirst \*Ois not specified,
the default is the previous command for editing and \-16 for listing.
The \*L\-r\*O flag reverses the order of the commands and the \*L\-n\*O flag
suppresses command numbers when listing.  In the second form, the \*Vcommand
\*Ois reexecuted after the substitution \*Vold\*L=\*Vnew \*Ois
performed.
.LI "\*Lfg \*O[\*Vjob\*O \&...]"
\*OEach \*Vjob\*O specified is
brought to the foreground.  Otherwise, the current job is brought into
the foreground.  (See \*LJobs \*Ofor a description of the format
of \*Vjob\*O.)
.LI "\*Lgetopts \*Voptstring name \*O[\*Vargument\*O \&...]"
\*OChecks \*Vargument
\*Ofor legal options.  If \*Vargument \*Ois omitted, the positional
parameters are used.  An option argument begins with a \*L+\*O
(plus sign) or
a \*L\-\*O (dash).  An option not beginning with \*L+\*O or \*L\- \*Oor
the argument \*L-- \*Oends the options.  The \*Voptstring\*O special
command contains
the letters that \*Lgetopts \*Orecognizes.  If a letter is followed
by a \*L:\*O (colon), that option is expected to have an argument.  The
options can be separated from the argument by spaces.  The \*Lgetopts\*O
special command places the next option letter it finds inside variable \*Vname \*Oeach
time it is invoked with a \*L+\*O prepended when \*Vargument \*Obegins
with a \*L+\*O.  The index of the next \*Vargument \*Ois stored in \*LOPTIND\*O.
.IP
The option argument, if any, gets stored in \*LOPTARG\*O.
A leading \*L: \*Oin \*Voptstring \*Ocauses \*Lgetopts \*Oto
store the letter of an invalid option in \*LOPTARG\*O, and to set \*Vname\*O
to a \*L?\*O (question mark) for an unknown option and to \*L:\*O when a
required option is missing.  Otherwise, \*Lgetopts \*Oprints an
error message.  The exit status is nonzero when there are no more options.
.\" Begin Digital-specific information
.LI "\*Linlib\*O \*Vlibrary_name\*O"
This command is no longer supported.  See the \*Lloader\*O(5) reference
page for information on using shared libraries.
.\" End Digital-specific information
.LI "\*Ljobs \*O[\*L\-lnp\*O] [\*Vjob\*O \&...]"
\*OLists information
about each given job; or all active jobs if \*Vjob\*O is omitted.
The \*L\-l \*Oflag lists process IDs in addition to the normal information.
The \*L\-n \*Oflag only displays jobs that have stopped or exited
since last notified.  The \*L\-p \*Oflag causes only the process
group to be listed.  (See \*LJobs \*Ofor a description of the format
of \*Vjob\*O.)
.LI "\*Lkill \*O[\*L\-\*Vsignal\*O] \*Vjob\*O \&..."
.LI "\*Lkill \-l\*O"
\*OSends either the \*LTERM\*O signal or
the specified signal to the specified jobs or processes.  Signals are
either given by number or by names (as given in \*L/usr/include/signal.h\*O,
stripped of the prefix \*LSIG\*O).  If the signal being sent is
\*LTERM\*O (terminate) or \*LHUP\*O (hangup), the job or process is
sent a \*LCONT\*O (continue)
signal if it is stopped.  The argument \*Vjob\*O can
be the process ID of a process that is not a member of one of the active
jobs.  (See \*LJobs \*Ofor a description of the format of \*Vjob\*O.)
In the second form, \*Lkill \-l\*O, the signal numbers and names
are listed.
.LI "\*Llet \*Vargument\*O \&..."
\*OEach \*Vargument\*O is a separate arithmetic
expression to be evaluated.  (See \*LArithmetic Evaluation\*O
for a description of arithmetic expression evaluation.)  The exit status
is 0 (zero)
if the value of the last expression is nonzero, and 1 otherwise.
.LI "\*Lnewgrp\*O [\*L\-\*O] [\*Vgroup\*O]"
.iX "newgrp command"
.iX "shell" "newgrp command"
Changes the primary group identification of the current shell process to
\*Vgroup\*O.  If you specify a \*L\-\*O (dash),
\*Lnewgrp\*O changes the login
environment to the login environment of the new group.  If you do not specify
a \*Vgroup\*O, \*Lnewgrp\*O changes the group identification to that specified
for the current user in the \*L/etc/passwd\*O file.  The \*Lnewgrp\*O command
recognizes
group names only; it does not recognize group ID numbers.
.IP
Only a user with superuser authority can change the primary group of the shell
to one to which that user does not belong.
.IP
Any active user-generated shell is terminated when the \*Lnewgrp\*O command is
used.
.LI "\*Lprint \*O[\*L\-Rnprsu\*O[\*Vn\*O]] [\*Vargument\*O \&...]"
\*OThe shell output mechanism.  With no flags or with flag \*L\- \*Oor
\*L--\*O, the arguments are printed on standard output as described
by \*Lecho\*O.  In raw mode, \*L\-R \*Oor \*L\-r\*O, the
escape conventions of \*Lecho \*Oare ignored.  The \*L\-R \*Ooption
prints all subsequent arguments and options other than \*L\-n\*O.
.IP
The \*L\-p \*Ooption causes the arguments to be written onto the
pipe of the process spawned with \*L|&\*O instead of standard output.
The \*L\-s \*Ooption causes the arguments to be written onto the
history file instead of standard output.  The \*L\-u \*Oflag can
be used to specify a 1-digit file descriptor unit number \*Vn \*Oon
which the output is placed.  The default is 1.  If the
\*L\-n\*O flag is used, no newline is added to the output.
.LI "\*Lpwd\*O"
\*OEquivalent to \*Lprint \-r \- $PWD.
.LI "\*Lread \*O[\*L\-prsu\*O[\*Vn\*O]] [\*Vname\*L?\*Vprompt\*O] [\*Vname\*O \&...]"
\*OThe shell input mechanism.  One line
is read and is broken up into fields using the characters in \*LIFS \*Oas
separators.  In raw mode, \*Oa \*L\e\*O (backslash) at the end of a
line does not signify line continuation.  The first field is assigned
to the first \*Vname\*O, the second field to the second \*Vname\*O,
and so on, with leftover fields assigned to the last \*Vname\*O.  The \*L\-p
\*Oflag causes the input line to be taken from the input pipe of
a process spawned by the shell using \*L|&\*O.  If the \*L\-s \*Oflag
is present, the input is saved as a command in the history file.
The \*L\-u\*O flag can be used to specify a 1-digit file descriptor
unit to read from.  The
file descriptor can be opened with the \*Lexec \*Ospecial
command.  The default value of \*Vn\*O is 0 (zero).  If \*Vname \*Ois
omitted, \*LREPLY \*Ois used as the default \*Vname\*O.
The exit status is 0 (zero) unless an End-of-File is encountered.
An End-of-File with the \*L\-p\*O flag causes cleanup
for this process so that another can be spawned.  If the first argument
contains a \*L?\*O (question mark), the remainder of
this word is used as a prompt
on standard error when the shell is interactive.  The exit status
is 0 (zero) unless an End-of-File is encountered.
.LI "\*Lreadonly \*O[\*Vname\*O[\*L=\*Vvalue\*O \&...]]\u\s-22\s+2\d"
\*OThe given names are marked read-only.  These
names cannot be changed by subsequent assignment.
.LI "\*Lreturn \*O[\*Vn\*O]\u\s-21\s+2\d"
\*OCauses a shell function
to return to the invoking script with the return status specified
by \*Vn\*O.  If \*Vn \*Ois omitted, the return status is
that of the last command executed.  If \*Lreturn \*Ois invoked while
not in a function or a \*L\&.\*O (dot) script, it is the
same as an \*Lexit\*O.
.\" Begin Digital-specific information
.LI "\*Lrmlib\*O \*Vlibrary_name\*O"
This command is no longer supported.  See the \*Lloader\*O(5) reference
page for information on using shared libraries.
.\" End Digital-specific information
.LI "\*Lset\*O [\*L+\*O | \*L\-abCefhkmnopstuvx\*O] [\*L+\*O | \*L\-o \*Voption\*O \&...] \e"
.sp -0.25
.LI "[\*L+\*O | \*L\-A \*Vname\*O] [\*Vargument\*O \&...]\*O"
Using + rather than - causes these flags to be turned off. These flags
can also be used upon invocation of the shell.
.\"Begin Digital-specific information CORRECTION
.\"OPreceding a flag with \*L\-\*O sets the parameter, and preceding
.\"the flag with \*L+\*O unsets the parameters.
.\"End Digital-specific information CORRECTION
The flags for the \*Lset\*O command have the following meanings:
.VL 4m
.LI "\*L-A\*O \*Vname\*O"
\*OArray assignment.  Unsets the variable \*Vname \*Oand
assign values sequentially from the list \*Vargument\*O.  If \*L+A \*Ois
used, the variable \*Vname \*Ois not unset first.
.LI "\*L-a\*O"
Automatically exports subsequent parameters that are defined.
.LI "\*L-b\*O"
\*OCauses the shell to notify the user asynchronously of background job completions.
.LI "\*L-C\*O"
\*OPrevent existing files from being overwritten by the shell's > redirection operator; the >|
redirection operator overrides this \*Lnoclobber\*O option for an individual file.
.LI "\*L-e\*O"
\*OIf a command has a nonzero exit status, executes
the \*LERR \*Otrap, if set, and exits.  This mode is disabled while
reading profiles.
.LI "\*L-f\*O"
\*ODisables filename generation.
.LI "\*L-h\*O"
\*OEach command becomes a tracked alias when first encountered.
.LI "\*L-k\*O"
\*OAll parameter assignment arguments are placed in the
environment for a command, not just those that precede the command name.
.LI "\*L-m\*O"
\*OBackground jobs will run in a separate process group
and a line will print upon completion.  The exit status of background
jobs is reported in a completion message.  On systems with job
control, this flag is turned on automatically for interactive
shells.
.LI "\*L-n\*O"
\*OReads commands and checks them for syntax errors, but
does not execute them.  Ignored for interactive shells.
.LI "\*L-o\*O"
\*OThe argument can be one of the following
option names:
.VL 4m
.LI "\*Lallexport\*O"
\*OSame as \*La\*O.
.LI "\*Lerrexit\*O"
\*OSame as \*Le\*O.
.LI "\*Lbgnice\*O"
\*ORuns all background jobs at a lower priority.  This is the default mode.
.LI "\*Lemacs\*O"
\*OInvokes an \*Lemacs \*Ostyle inline editor for command entry.
.LI "\*Lgmacs\*O"
\*OInvokes a \*Lgmacs\*O\-style inline editor for command entry.
.LI "\*Lignoreeof\*O"
\*OThe shell does not exit on End-of-File.
The \*Lexit\*O command must be used.
.LI "\*Lkeyword\*O"
\*OSame as \*Lk\*O.
.LI "\*Lmarkdirs\*O"
\*OAll directory names resulting from filename
generation have a trailing \*L/\*O (slash) appended.
.LI "\*Lmonitor\*O"
\*OSame as \*Lm\*O.
.LI "\*Lnoclobber\*O"
\*OPrevents redirection \*L> \*Ofrom truncating
existing files.  Requires \*L>| \*Oto truncate a file when turned on.
.LI "\*Lnoexec\*O"
\*OSame as \*Ln\*O.
.LI "\*Lnoglob\*O"
\*OSame as \*Lf\*O.
.LI "\*Lnolog\*O"
\*ODoes not save function definitions in history file.
.LI "\*Lnounset\*O"
\*OSame as \*Lu\*O.
.LI "\*Lprivileged\*O"
\*OSame as \*Lp\*O.
.LI "\*Lverbose\*O"
\*OSame as \*Lv\*O.
.LI "\*Ltrackall\*O"
\*OSame as \*Lh\*O.
.LI "\*Lvi\*O"
\*OInvokes, in insert mode, a \*Lvi\*O\-style inline
editor until you press Escape (ASCII \*L033\*O).  This changes to
move mode.  A return sends the line.
.LI "\*Lviraw\*O"
\*OEach character is processed as it is entered in \*Lvi \*Omode.
.LI "\*Lxtrace\*O"
\*OSame as \*Lx\*O.
.IP
\*OIf no option name is supplied, then the current option settings
are printed.
.LE
.LI "\*L-p\*O"
\*ODisables processing of the \*L$HOME/.profile \*Ofile
and uses the \*L/etc/suid\*V_\*Lprofile\*O file instead of
the \*LENV \*Ofile.  This mode is on whenever the effective user ID
or group ID is not equal to the real user ID or group ID.
Turning this off causes
the effective user ID and group ID to be set to the real user ID
and group ID.
.LI "\*L-s\*O"
\*OSorts the positional parameters.
.LI "\*L-t\*O"
\*OExits after reading and executing one command.
.LI "\*L-u\*O"
\*OTreats unset parameters as an error when substituting.
.LI "\*L-v\*O"
\*OPrints shell input lines as they are read.
.LI "\*L-x\*O"
\*OPrints commands and their arguments as they are executed.
.LI "\*L\-\*O"
\*OUnsets \*Lx \*Oand \*Lv \*Oflags and stops
examining arguments for flags.
.LI "\*L--\*O"
\*ODoes not change any of the flags; useful in setting \*L$1
\*Oto a value beginning with \*L\-\*O.  If no arguments follow this
flag, the positional parameters are unset.
.IP
These flags can also be used upon invocation of the
shell.  The current set of flags can be found in \*L$\-\*O.  Unless \*L\-A
\*Ois specified, the remaining arguments are positional parameters
and are assigned, in order, to \*L$1 $2 \*O....  If no arguments
are given, the names and values of all named parameters are printed
on the standard output.  If the only argument is \*L+\*O, the names
of all named parameters are printed.
.LE
.LI "\*Lshift \*O[\*Vn\*O]\u\s-21\s+2\d"
\*OThe positional parameters
from \*L$\*Vn\*L+1 \*O...  are renamed \*L$1\*O ...; the default \*Vn
\*Ois 1.  The argument \*Vn \*Ocan be any arithmetic expression
that evaluates to a nonnegative number less than or equal to \*L$#\*O.
.LI "\*Ltimes\*O\u\s-21\s+2\d"
\*OPrints the accumulated user and system
times for the shell and for processes run from the shell.
.LI "\*Ltrap \*O[\*Vargument\*O] [\*Vsignal\*O \&...]\u\s-21\s+2\d"
The \*Vargument\*O variable specifies a
command to be read and executed when the shell
receives the specified signals.  (Note
that \*Vargument\*O is scanned once when the trap
is set and once when the trap is taken.) Each \*Vsignal\*O can be
given as a number or as the name of the signal.  Trap commands are
executed in order of signal number.  Any attempt to set a trap on a
signal that was ignored on entry to the current shell is ineffective.
.IP
If \*Vargument\*O is omitted or is \*L\-\*O, all traps \*Vsignal\*O are
reset to their original values.  If \*Vargument\*O is the null string,
this signal is ignored by the shell and by the commands it invokes.
If \*Vsignal\*O is \*LERR\*O, \*Vargument\*O is executed
whenever a command has a nonzero exit status.
If \*Vsignal\*O is \*LDEBUG\*O,
\*Vargument\*O is executed after each command.  If \*Vsignal\*O is
\*L0\*O or \*LEXIT \*Oand the \*Ltrap \*Ostatement is executed
inside the body of a function, the command \*Vargument\*O is executed
after the function completes.  If \*Vsignal\*O is \*L0\*O
(zero) or \*LEXIT \*Ofor
a \*Ltrap \*Oset outside any function, the command \*Vargument\*O is
executed on exit from the shell.  The \*Ltrap \*Ocommand with no
arguments prints a list of commands associated with each signal number.
.LI "\*Ltypeset \*O[\*L+\*O | \*L\-HLRZfilrtux\*O[\*Vn\*O]] [\*Vname\*O[\*L=\*Vvalue\*O \&...]]\u\s-22\s+2\d"
\*OSets attributes and values for
shell parameters.  When invoked inside a function, a new instance of
the parameter \*Vname \*Ois created.  The parameter value and type
are restored when the function completes.  The following list of attributes
can be specified:
.VL 4m
.LI "\*L\-f\*O"
\*OThe names refer to function names rather than parameter
names.  No assignments can be made and the only other
valid flags are \*L\-t\*O,
\*L\-u\*O, and \*L\-x\*O.  The \*L\-t\*O flag turns on execution
tracing for this function.  The \*L\-u\*O flag causes this function
to be marked undefined.  The \*LFPATH \*Ovariable is searched
to find the function definition when the function is referenced.  The
\*L\-x\*O flag allows the function definition to remain in effect
across shell procedures invoked by name.
.LI "\*L\-H\*O"
\*OProvides system-to-hostname file mapping
on machines that restrict the set of characters in filenames.
.LI "\*L\-i\*O"
\*OParameter is an integer.  This makes arithmetic faster.
If \*Vn \*Ois nonzero, it defines the output arithmetic base;
otherwise, the first assignment determines the output base.
.LI "\*L\-l\*O"
\*OAll uppercase characters are converted to lowercase.
The uppercase \*L\-u\*O flag is turned off.
.LI "\*L\-L\*O"
\*OLeft justifies and removes leading spaces from \*Vvalue\*O.
If \*Vn \*Ois nonzero, it defines the width of the field;
otherwise, it is determined by the width of the value of first assignment.
When the parameter is assigned, it is filled on the right with
spaces or truncated, if necessary, to fit into the field.  Leading
zeros are removed if the \*L\-Z \*Oflag is also set.  The \*L\-R \*Oflag
is turned off.
.LI "\*L\-r\*O"
\*OThe given \*Vnames \*Oare marked read-only and these
names cannot be changed by subsequent assignment.
.LI "\*L\-R\*O"
\*ORight justifies and fills with leading spaces.  If \*Vn\*O
is nonzero, it defines the width of the field; otherwise, it
is determined by the width of the value of first assignment.  The field
is left-filled with spaces or truncated from the end if the parameter
is reassigned.  The \*LL \*Oflag is turned off.
.LI "\*L\-t\*O"
\*OTags the named parameters.  Tags are user definable
and have no special meaning to the shell.
.LI "\*L\-u\*O"
\*OAll lowercase characters are converted to uppercase
characters.  The lowercase \*L\-l\*O flag is turned off.
.LI "\*L\-x\*O"
\*OThe given names are marked for export.
.LI "\*L\-Z\*O"
\*ORight justifies and fills with leading zeros if the first
nonspace character is a digit and the \*L\-L\*O flag was
not set.  If \*Vn\*O is nonzero, it defines the width
of the field; otherwise, it is determined by the width of the value
of first assignment.
.LE
.IP
\*OUsing \*L+\*O (plus sign) rather than \*L\-\*O (dash)
causes these flags to
be turned off.  If no \*Vname \*Oarguments are given but flags are
specified, a list of \*Vnames \*O(and optionally the \*Vvalues\*O)
of the parameters that have these flags set is printed.
(Using \*L+\*O rather than \*L\-\*O
keeps the values from being
printed.)  If no names and flags are given, the names and
attributes of all parameters are printed.
.\" Begin Digital-specific information
.\" Removed p from the list of options.
.LI "\*Lulimit \*O[\*L\-HSacdfmnstvw\*O] [\*Vlimit\*O]"
.\" End Digital-specific information
Sets or displays a resource limit.  Available resources limits follow.
Many systems do not contain one or more of these limits.  The
limit for a specified resource is set when \*Vlimit \*Ois
specified.  The value of \*Vlimit \*Ocan be a number in the unit
specified with each resource, or the value \*Lunlimited\*O.
.IP
The \*LH \*Oand \*LS \*Oflags specify whether the hard limit
or the soft limit for the given resource is set.  A hard limit cannot
be increased once it is set.  A soft limit can be increased up to the
value of the hard limit.  If neither \*LH\*O nor \*LS\*O
is specified, the limit applies to both.  The current resource limit
is printed when \*Vlimit \*Ois omitted.  In this case, the soft limit
is printed unless \*LH \*Ois specified.  When more than one resource
is specified, the limit name and unit are printed before the value.
.VL 4m
.LI "\*L\-a\*O"
\*OLists all of the current resource limits.
.LI "\*L\-c\*O"
\*OThe number of 512-byte blocks on the size of core dumps.
.LI "\*L\-d\*O"
\*OThe number of Kilobytes on the size of the data area.
.LI "\*L\-f\*O"
\*OThe number of 512-byte blocks on files written
by child processes (files of any size can be read).
.LI "\*L\-m\*O"
\*OThe number of Kilobytes on the size of physical memory.
.LI "\*L\-n\*O"
\*OThe number of file descriptors.
.\"Begin Digital-specific information
.\"Removed \L*\-p\*O option because it is not supported.
.\" .LI "\*L\-p\*O"
.\" The number of 512-byte blocks for pipe buffering.
.\"End Digital-specific information 
.LI "\*L\-s\*O"
\*OThe number of Kilobytes on the size of the stack area.
.LI "\*L\-t\*O"
\*OThe number of seconds to be used by each process.
.LI "\*L\-v\*O"
.\"Begin Digital-specific information
\*OThe number of Kilobytes for virtual memory.
Note:  This option is supported only if \*LRLIMIT_VMEM\*O has been defined in
/usr/include/sys/resource.h.
.\"End Digital-specific information
.LI "\*L\-w\*O"
\*OThe number of Kilobytes for the swap area.
.\"Begin Digital-specific information
Note:  This option is supported only if \*LRLIMIT_SWAP\*O has been defined in
/usr/include/sys/resource.h.
.\"End Digital-specific information
.IP
\*OIf no option is given, \*L\-f \*Ois assumed.
.LE
.LI "\*Lumask \*O[\*L-s\*O] [\*Vmask\*O]"
\*OThe user file\(hycreation mask
is set to \*Vmask\*O  (See \*Lumask\*O.)  \*Vmask \*Ocan
either be an octal number or a symbolic value as described in \*Lchmod\*O.
If a symbolic value is given, the new \*Lumask\*O value is the complement
of the result of applying \*Vmask \*Oto the complement of the previous
\*Lumask\*O value.  If \*Vmask \*Ois omitted, the current value of the
mask is printed.
.VL 4m
.LI "\*L-s\*O"
\*OProduces Symbolic output
.LE
.LI "\*Lunalias \*Vname\*O \&..."
\*OThe parameters given by the list
of names are removed from the alias list.
.VL 4m
.LI "\*L-a\*O"
\*ORemoves all alias definitions from the current shell execution environment.
.LE
.LI "\*Lunset \*O[\*L\-f\*O] \*Vname\*O \&..."
\*OThe parameters
given by the list of names are unassigned, that is, their values
and attributes are erased.  Read-only variables cannot be unset.  If
the \*L\-f\*O flag is set, the names refer to function names.
Unsetting \*LERRNO\*O, \*LLINENO\*O, \*LMAILCHECK\*O, \*LOPTARG\*O,
\*LOPTIND\*O, \*LRANDOM\*O, \*LSECONDS\*O, \*LTMOUT\*O,
and \*L_\*O removes their special meaning even if they are
subsequently assigned.
.LI "\*Lwait \*O[\*Vjob\*O]"
\*OWaits for the specified \*Vjob
\*Oand reports its termination status.  If \*Vjob \*Ois not given,
all currently active child processes are waited for.  The exit
status from this command is that of the process waited for.  (See \*LJobs\*O
for a description of the format of \*Vjob\*O.)
.LI "\*Lwhence \*O[\*L\-pv\*O] \*Vname\*O \&..."
For each \*Vname\*O,
indicates how it would be interpreted if used as a
command name.  The \*L\-v\*O flag produces a more verbose
report.  The \*L\-p\*O flag does a path search for \*Vname \*Oeven
if name is an alias, a function, or a reserved word.
.LE
.SS Invocation
If the shell is invoked by \*Lexec\*O, and the first character
of argument zero (\*L$0\*O) is \*L\-\*O (dash), the shell is assumed
to be a login shell and commands are read from \*L/etc/profile
\*Oand then from either \*L\&.profile \*Oin the current directory
or \*L$HOME/.profile\*O, if either file exists.  Next, commands
are read from the file named by performing parameter substitution
on the value of the \*LENV\*O environment variable, if the file
exists.  If the \*L\-s \*Oflag is not present and \*Vargument\*O is present,
a path search is performed on the first \*Vargument\*O to determine
the name of the script to execute.  The script \*Vargument\*O must have
read permission and any \*Lsetuid \*Oand \*Lgetgid \*Osettings
are ignored.  Commands are then read, as described in the
following text.
.PP
See the \*LFLAGS\*O section for a complete description of
flags that can be interpreted by the shell when it is invoked.
.SH FLAGS
.PP
.VL 4m
.LI "\*L\-c \*Vcommand_string\*O"
Causes \*Lksh\*O to read commands from \*Vcommand_string\*O.
.LI "\*L\-i\*O"
Causes \*Lksh\*O to run as an interactive shell.  The \*LSIGTERM\*O
signal is thus ignored, and the \*LSIGINT\*O signal is caught,
causing the current command to be terminated and a new prompt
to be output.
.LI "\*L\-r\*O"
Causes \*Lksh\*O to run as a restricted shell.
.LI "\*L\-s\*O"
Causes \*Lksh\*O to read commands from standard input.  If you
do not specify the \*L\-c\*O flag or do not specify
any arguments to \*Lksh\*O other than flags, \*Lksh\*O automatically
invokes the \*L\-s\*O flag.  The \*L\-c\*O flag overrides the \*L\-s\*O
flag, however.
.LE
.PP
The rest of the flags that can be used with \*Lksh\*O are described
under the \*Lset\*O subcommand in the subsection \*LSpecial ksh Commands\*O.
.SH NOTES
.PP
.AL
.LI
If a command is executed, and a command with the same name is
installed in a directory in the search path before the directory
where the original command was found, the shell will execute the
original command.  Use the \*Lhash\*O command to correct this situation.
.LI
When the shell encounters the \*L>>\*O characters, it does not open the file
in append mode; instead, the shell opens the file for writing and
seeks to the end.
.LI
Failure (nonzero exit status) of a special command
preceding a \*L||\*O symbol prevents the list following \*L||\*O
from executing.
.LI
\*OIf a command that is a \*Vtracked alias \*Ois executed, and
then a command with the same name is installed in a directory in the
search path before the directory where the original command was found,
the shell continues to \*Lexec \*Othe original command.  Use
the \*L\-t \*Oflag of the \*Lalias \*Ocommand to correct this
situation.
.LI
\*OUsing the \*Lfc \*Obuilt-in command within a compound
command causes the whole command to disappear from the history file.
.LI
The built-in \*L\&.file\*O command reads the whole
file before any commands are executed.  Therefore, the \*Lalias\*O and
\*Lunalias\*O commands in the file do not apply to any functions defined
in the file.
.LI
Traps are not processed while a job is waiting for a foreground
process.  Thus, a trap on \*LCHLD\*O is not executed until the
foreground job terminates.
.LE
.SH RETURN VALUES
.PP
Errors detected by the shell, such as syntax errors, cause the
shell to return a nonzero exit status.  Otherwise, the shell
returns the exit status of the last command executed.
(See also the \*Lexit\*O command, described previously.)  If the
shell is being used noninteractively,
execution of the shell file is abandoned.  Run-time errors detected
by the shell are reported by printing the command or function name
and the error condition.  If the line number that the error occurred
on is greater than 1, the line number is also printed in \*L[ ]\*O
(brackets) after the command or function name.
.SH FILES
.PP
.VL 11m
.LI "\*L/etc/profile\*O"
System profile.
.LI "\*L$HOME/.profile\*O"
User profile.
.LI "\*L/etc/passwd\*O"
Contains user information.
.LE
.SH RELATED INFORMATION
.PP
Commands:  \*Lcat\*O(1), \*Lcd\*O(1), \*Lchmod\*O(1), \*Lcsh\*O(1),
\*Lecho\*O(1), \*Lenv\*O(1)/\*Lprintenv\*O(1),
\*Lsh\*O(1), \*Lstty\*O(1), \*Ltest\*O(1),
\*Lvi\*O(1)/\*Lvedit\*O(1)/\*Lview\*O(1).
.\"Removed reference to umask(1). No such manpage in DEC OSF/1
.\"Version 1.2
.PP
Functions:  \*Lexec\*O(2), \*Lfcntl\*O(2), \*Lfork\*O(2), \*Lioctl\*O(2),
\*Llseek\*O(2), \*Lpipe\*O(2), \*Lsigaction\*O(2),
\*Lumask\*O(2), \*Lwait\*O(2).
.PP
Routines: \*Lldr_install\*O(3), \*Lldr_remove\*O(3), \*Lrand\*O(3),
\*Lulimit\*O(3).
.PP
.\"Begin Digital-specific information CORRECTION
.\"Removed reference to osf_rose(4), which isn't part of silver.
Files:  \*Lnull\*O(7).
.\"End Digital-specific information CORRECTION
.\" Begin Digital-specific information
.PP
Miscellaneous:  \*Lloader\*O(5)
.\" End Digital-specific information
.\" .PP 
.\" some useful shell functions.
.\" .PP
.\" "Using Internationalization Features" in the 
.\" \*(Gu.
.EQ
delim off
.EN

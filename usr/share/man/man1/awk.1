.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: awk.1,v $ $Revision: 3.2.2.5 $ (DEC) $Date: 1992/11/11 12:56:18 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.TH awk 1
.SH NAME
\*Lawk\*O \- Finds lines in files and makes specified changes to them
.SH SYNOPSIS
.PP
.sS
\*Lawk\*O
\*O[\*L-F\*Vcharacter\*O]
\*L-f\*O
\*Vprogram\*O
\*O[\*Vfile\*O
\&...]
.PP
\*Lawk\*O
\*O[\*L-F\*Vcharacter\*O]
\*Vstatement\*O
\&.\&.\&.
\*O[\*Vfile\*O
\&.\&.\&.]
.sE
.PP
The \*Lawk\*O command is a more powerful pattern-matching command
than the \*Lgrep\*O command.  It can perform limited processing on
the input lines, instead of simply displaying lines that match.
.SH FLAGS
.PP
.VL 4m
.LI "\*L-F\*Vcharacter\*O"
Uses \*Vcharacter\*O as the field separator character (any white space
by default).  The \*L-F\*O flag must precede any other command-line
arguments.
.LI "\*L-f \*Vprogram\*O"
Searches for the patterns and performs the actions found in the file
\*Vprogram\*O.
.LE
.SH DESCRIPTION
.iX "awk command"
.iX "finding" "lines in files"
.iX "files" "finding and changing lines"
.iX "changing" "lines in files"
.iX "pattern-matching"
.PP
The \*Lawk\*O command provides a flexible text-manipulation language
suitable for simple report generation.  \*Lawk\*O is a more powerful tool
for text manipulation than either \*Lsed\*O or \*Lgrep\*O.
.PP
The \*Lawk\*O command:
.ML
.LI
Performs convenient numeric processing.
.LI
Allows variables within actions.
.LI
Allows general selection of patterns.
.LI
Allows control flow in the actions.
.LI
Does not require any compiling of programs.
.LE
.PP
Pattern-matching and action \*Vstatements\*O can be specified either on the
command line or in a program file.  In either case, the \*Lawk\*O
command first reads all matching and action statements,
then it reads a line of its input and compares it to each specified pattern.
If the line matches a specified pattern, \*Lawk\*O performs
the specified actions and writes the result to standard output.
When it has compared the current input line to
all patterns, it reads the next line.
.PP
The \*Lawk\*O command reads input files in the order stated
on the command line.  If you specify a filename as a \*L-\*O (dash)
or do not specify a filename, \*Lawk\*O reads standard input.
.PP
Enclose pattern-action statements on the command line in '' (single
quotes) to protect them from interpretation by the shell.
Consecutive pattern-action statements on the same command line must
be separated by a \*L;\*O (semicolon), within one set of quotes.
.\"	Consecutive pattern-action statements in an \*Lawk\*O program file must
.\"	be on separate lines.
.PP
You can assign values to variables on the \*Lawk\*O command line as follows:
.iS
\*Vvariable\*O=\*Vvalue\*O
.iE
.PP
The \*Lawk\*O command treats input lines as fields separated by
spaces, tabs, or a field separator you set with the \*LFS\*O
variable.  (Two spaces are recognized as a single separator.)
Fields are referenced as \*L$1\*O, \*L$2\*O, and so
on.  \*L$0\*O refers to the entire line.
.SS Pattern-Action Statements
.\" .PP 
Pattern-action statements follow the form:
.iS
\*Vpattern\*O {\*Vaction\*O}
.iE
\*O\c
.PP
If a \*Vpattern\*O lacks a corresponding \*Vaction\*O,
\*Lawk\*O writes the entire line that contains the pattern to
standard output.  If an \*Vaction\*O lacks a corresponding
\*Vpattern\*O, \*Lawk\*O applies it to every line.
.SS Actions
.\" .PP 
An action is a sequence of statements that follow C language syntax.
These statements can include:
.RS
.VL
.LI "\*Lif\*O \*L(\*O\*Vexpression\*O\*L)\*O \*Vstatement\*O [ \*Lelse\*O \*Vstatement\*O ]"
.LI "\*Lwhile\*O \*L(\*O\*Vexpression\*O\*L)\*O \*Vstatement\*O"
.LI "\*Lfor\*O \*L(\*O\*Vexpression\*O\*L;\*O\*Vexpression\*O\*L;\*O\*Vexpression\*O\*L)\*O \*Vstatement\*O"
.LI "\*Lfor\*O \*L(\*O\*Vvariable\*O \*Lin\*O \*Varray\*O\*L)\*O \*Vstatement\*O"
.LI "\*Lbreak\*O"
.LI "\*Lcontinue\*O"
.LI "\*L{ \*O[ \*Vstatement\*O \&.\&.\&.\ ]\*L }\*O"
.LI "\*Vvariable\*O\*L=\*O\*Vexpression\*O"
.LI "\*Lprint\*O [ \*Vexpression_list\*O ] [ \*L>\*O\*Vfile\*O | \*L>>\*O\*Vfile\*O ] [ \*L|\*O \*Vcommand\*O ]"
.LI "\*Lprintf\*O \*Vformat\*O[ \*L,\*O\*Vexpression_list\*O ] [ \*L>\*O\*Vfile\*O | \*L>>\*O\*Vfile\*O  ] [ \*L|\*O \*Vcommand\*O ]"
.\" .LI "\*Lprintf\*O \*Vformat\*O [ \*L,\*Vexpression_list\*L\\*O ] [ \*L>\*Vfile\*O ]" 
.LI "\*Lnext\*O"
.LI "\*Lexit\*O [ \*Vexpression\*O ]"
.\"	.LI "\*Ldelete\*O \*Varray\*O [ \*Vexpression\*O ]" 
.LE
.RE
.PP
Statements can end with a semicolon, a newline character, or
the right brace enclosing the action.
.PP
Expressions can have string or numeric values and
are built using the operators \*L+\*O, \*L-\*O, \*L*\*O, \*L/\*O, \*L%\*O,
.\" and \*L^\*O (exponentiation), 
a space for string concatenation, and the
C operators \*L++\*O, \*L--\*O, \*L+=\*O, \*L-=\*O,
\*L*=\*O, \*L/=\*O, \*L%=\*O, \*L^=\*O, \*L*=\*O, \*L>\*O, \*L>=\*O,
\*L<\*O, \*L<=\*O, \*L==\*O,
and \*L!=\*O.
.\"	\*L!=\*O, and \*L?:\*O.
.PP
Because the actions process fields, input white space is not
preserved in the output.
.PP
The \*Vfile\*O and \*Vcommand\*O arguments can be literal names or
expressions enclosed in quotation marks (\*L"\|"\*O).  Identical string
values in different statements refer to the same open file.
.PP
The \*Lprint\*O statement writes its arguments to standard output (or to a
\*Vfile\*O if \*L>\*O \*Vfile\*O or \*L>>\*O \*Vfile\*O is present),
separated by the current output field separator and terminated
by the current output record separator.
.PP
The \*Lprintf\*O statement formats its expression list according
to the format of the \*Lprintf()\*O subroutine,
.\" (see the %\&%\&Rp_NOMAP%\&%\&),
and writes it arguments to standard output,
separated by the output field separator and terminated by the output
record separator.  You can redirect the output into a file using the
\*Lprint \&.\&.\&. >\*O \*Vfile\*O
or \*Lprintf ( \&.\&.\&. ) >\*O \*Vfile\*O statements.
.SS Variables
.\" .PP 
Variables can be scalars, array elements (denoted \*Lx[i])\*O, or fields.
.PP
Variable names can consist of uppercase and lowercase alphabetic letters,
the underscore character,
and the digits (\*L0\*O to \*L9\*O).
.\"	the digits (\*L0\*O to \*L9\*O), and extended characters.
Variable names cannot begin with a digit.
.PP
Variables are initialized to the null string.  Array subscripts can be
any string; they do not have to be numeric.  This allows for a form of
associative memory.  Enclose string constants in expressions
in "" (double quotes).
.\"	Multiple subscripts such as [\*Vi,j,k\*O] are permitted; the
.\"	constituents are concatenated and separated by the value of
.\"	\*LSUBSEP\*O (see the description in the following list).
.PP
There are several variables with special meaning to \*Lawk\*O.  They include:
.VL 4m
.\"	.LI "\*LARGC\*O"
.\"	Argument count, assignable.
.\"	.LI "\*LARGV\*O" 
.\"	Argument array, assignable; nonnull members are
.\"	interpreted as filenames.
.LI "\*LFS\*O"
Input field separator (default is a space).
If it is a space, then any number of spaces and tabs can separate fields.
.LI "\*LNF\*O"
The number of fields in the current input line (record), with a limit
of 99.
.LI "\*LNR\*O"
The number of the current input line (record).
.\"	.LI "\*LFNR\*O" 
.\"	The number of the current input line (record) in the current file.
.LI "\*LFILENAME\*O"
The name of the current input file.
.LI "\*LRS\*O"
Input record separator (default is a newline character).
.LI "\*LOFS\*O"
The output field separator (default is a space).
.LI "\*LORS\*O"
The output record separator (default is a newline character).
.LI "\*LOFMT\*O"
The output format for numbers (default \*V% .6g\*O).
.\"	.LI "\*LSUBSEP\*O" 
.\"	Separates multiple subscripts (default is 031).
.LE
.SS Functions
.\"	.PP 
.\"	Functions are defined at the position of a pattern-action statement,
.\"	as follows:
.\"	.iS
.\"	function foo(a, b, c) { ... ; return x }
.\"	\*O\c
.\"	.iE
.\"	.PP 
.\"	Arguments are passed by value if scalar and by reference if array
.\"	name; functions can be called recursively.  Arguments are local to
.\"	the function; all other variables are global.
.\"	.PP 
There are several built-in functions that can be used in \*Lawk\*O actions.
(For information about regular expressions as referred to in this section,
see \*Lgrep\*O.)
.VL 4m
.LI "\*Llength(\*O\*Vargument\*O\*L)\*O"
Returns the length, in characters, of \*Vargument\*O, or of the entire
line if there is no \*Vargument\*O.
.\"	.LI "\*Lblength(\*O\*Vargument\*O\*L)\*O" 
.\"	Returns the length, in bytes, of \*Vargument\*O, or of the entire
.\"	line if there is no \*Vargument\*O.
.\"	.LI "\*Lclose(\*O\*Vargument\*O\*L)\*O" 
.\"	Closes the file or pipe
.\"	expression.  Note that you must enclose a filename in double quotes
.\"	when redirecting output with the \*Lawk\*O command; otherwise, it is
.\"	treated as an \*Lawk\*O variable.  For example:
.\"	.iS
.\"	print "Hello" > "/tmp/junk"
.\"	close ("/tmp/junk")
.\"	\*O\c
.\"	.iE
.LI "\*Lexp(\*O\*Vnumber\*O\*L)\*O"
Takes the exponential of its argument.
.\"	.LI "\*Lrand\*O" 
.\"	Returns a random number on (0, 1).
.\"	.LI "\*Lsrand(\*Vnumber\*O\*L)\*O" 
.\"	Sets seed for \*Lrand\*O.  The default is the time of day.
.LI "\*Llog(\*O\*Vnumber\*O\*L)\*O"
Takes the base e logarithm of its argument.
.LI "\*Lsqrt(\*O\*Vnumber\*O\*L)\*O"
Takes the square root of its argument.
.LI "\*Lint(\*O\*Vnumber\*O\*L)\*O"
Takes the integer part of its argument.
.LI "\*Lsubstr(\*O\*Vstring\*O\*L,\*O\*Vposition\*O\*L,\*O\*Vnumber\*O\*L)\*O"
Returns the substring \*Vnumber\*O characters long of
\*Vstring\*O, beginning at \*Vposition\*O.
.LI "\*Lindex(\*O\*Vstring\*O\*L,\*O\*Vstring2\*O\*L)\*O"
Returns the position in \*Vstring\*O where \*Vstring2\*O occurs, or \*L0\*O
if it does not occur.
.\"	.LI "\*Lmatch(\*O\*Vstring\*O\*L,\*O\*Vregular_expression\*O\*L)\*O" 
.\"	Returns the position in \*Vstring\*O where \*Vregular_expression\*O
.\"	occurs, or \*L0\*O if it does not occur.  The \*LRSTART\*O
.\"	and \*LRLENGTH\*O built-in variables are set to the
.\"	position and length, in bytes, of the matched string.
.LI "\*Lsplit(\*O\*Vstring\*O\*L,\*O\*Va\*O\*L,\*O[\*Vregular_expression\*O]\*L)\*O"
Splits \*Vstring\*O into array elements \*Va\*O[\*L1\*O],
\*Va\*O[\*L2\*O], \&. . ., \*Va\*O[\*Vnumber\*O], and
returns \*Vnumber\*O. The separation
is done with the specified regular expression or with the
\*LFS\*O field separator if \*Vregular_expression\*O is not given.
.\"	.LI "\*Lsub(\*O\*Vregular_expression\*O\*L,\*O\*Vstring2\*O\*L,\*O[\*Vstring\*O]\*L)\*O" 
.\"	Substitutes \*Vstring2\*O for the first occurrence of the 
.\"	\*Vregular_expression\*O in \*Vstring\*O.
.\"	If \*Vstring\*O is not given, the entire line is used.
.\"	.LI "\*Lgsub(\*O\*Vregular_expression\*O\*L,\*O\*Vstring2\*O\*L,\*O[\*Vstring\*O]\*L)\*O" 
.\"	Same as \*Lsub\*O except that all occurrences
.\"	of the regular expression are replaced; both \*Lsub\*O and \*Lgsub\*O
.\"	return the number of replacements.
.LI "\*Lsprintf(\*O\*Vfmt\*O\*L,\*O\*Vexpression1\*O\*L,\*O\*Vexpression2\*O\*L,\*O\ \&.\&.\&.\*L)\*O"
Formats the expressions according to the \*Lprintf\*O
format string \*Vfmt\*O and returns the resulting string.
.\"	.LI "\*Lsystem(\*O\*Vcommand\*O\*L)\*O" 
.\"	Executes \*Vcommand\*O and returns its exit status.
.LE
.PP
The \*Lgetline\*O function sets\*L $0 \*Oto the next input record
from the current input file.
.\"	\*Lgetline <\*O \*Vfile\*O sets
.\"	\*L$0\*O to the next record from \*Vfile\*O.  \*Lgetline x\*O sets
.\"	variable \*Vx\*O instead.  Finally, \*Vcommand\*O \*L| getline\*O
.\"	pipes the output of \*Vcommand\*O into \*Lgetline\*O.  Each call
.\"	of \*Lgetline\*O returns the next line of output from \*Vcommand\*O.
.\"	In all cases, the
The \*Vgetline\*O function returns \*L1\*O for a successful input and
\*L0\*O for End-of-File.
.\"	and \*L-1\*O for an error.
.SS Patterns
.\" .PP 
Patterns are arbitrary Boolean combinations of patterns and
relational expressions (the \*L!\*O, \*L|\*O, and
\*L\&&\*O operators and parentheses for grouping).  You must start
and end regular expressions with slashes.  You can use regular expressions
as described for \*Lgrep\*O, including the following special characters:
.VL 4m
.LI "\*L\(pl\*O"
One or more occurrences of the pattern.
.LI "\*L?\*O"
Zero or one occurrence of the pattern.
.\" Begin Digital-specific information
.\" Changed \(br to _ for tman
.LI "\*L_\*O"
.\" End Digital-specific information
Either of two statements.
.LI "\*L( )\*O"
Grouping of expressions.
.LE
.PP
Isolated regular expressions in a pattern apply to the entire line.
Regular expressions can occur in relational expressions.
Any string (constant or variable) can be used as a regular expression,
except in the position of an isolated regular
expression in a pattern.
.PP
If two patterns are separated by a
comma, the action is performed on all lines between an occurrence of
the first pattern and the next occurrence of the second.
.\"	.PP 
.\"	Regular expressions can contain extended (multibyte) characters with
.\"	one exception: range constructs in character class specifications using
.\"	brackets cannot contain multibyte extended characters.  Individual
.\"	instances of extended characters can appear within brackets; however,
.\"	extended characters are treated as separate 1-byte characters.
.\"	.PP 
.\"	As in \*Legrep\*O, inclusion in ranges is determined by the collating
.\"	sequence as defined by the
.\"	current locale. The wildcard characters \*L*\*O, \*L+\*O, and
.\"	\*L?\*O match characters and character strings, not bytes.
.PP
There are two types of relational expressions that you can use.  The first
type has the form:
.iS
\*Vexpression  match_operator  pattern\*O
.iE
.PP
where \*Vmatch_operator\*O is either: \*L~\*O (for \*Vcontains\*O) or
\*L!~\*O (for \*Vdoes not contain\*O).
.PP
The second type has the form:
.iS
\*Vexpression  relational_operator  expression\*O
.iE
where \*Vrelational_operator\*O is any of the six C relational operators:
\*L<\*O, \*L>\*O, \*L<=\*O, \*L>=\*O, \*L==\*O,
and \*L!=\*O.  A conditional can be an arithmetic expression, a
relational expression, or a Boolean combination of these.
.PP
You can use the \*LBEGIN\*O and \*LEND\*O special patterns
to capture control before the first and after the last input line is
read, respectively.
\*LBEGIN\*O must be the first pattern; \*LEND\*O must be the last.
\*LBEGIN\*O and \*LEND\*O do not combine with other patterns.
.PP
You have two ways to designate a character other than white space to
separate fields.  You can use the \*L-F\*Vcharacter\*O flag on the
command line, or you can start \*Vprogram\*O with the following
sequence:
.iS
BEGIN { FS = \*Vc\*O }
\*O\c
.iE
.PP
Either action changes the field separator to \*Vc\*O.
.PP
There are no explicit conversions between numbers and strings.  To
force an expression to be treated as a number, add \*L0\*O to it.
To force it to be treated as a string, append a null string
(\*L""\*O).
.SH EXAMPLES
.PP
.AL 3m
.LI
To display the lines of a file that are longer than 72 bytes,
enter:
.iS
awk  'length  >72'  chapter1
\*O\c
.iE
.IP
This selects each line of the file \*Lchapter1\*O that is longer
than \*L72\*O bytes.  \*Lawk\*O then writes these lines to
standard output because no action is specified.
.LI
To display all lines between the words \*Lstart\*O
and \*Lstop\*O, enter:
.iS
awk  '/start/,/stop/'  chapter1
\*O\c
.iE
.LI
To run an \*Lawk\*O program (\*Lsum2\&.awk\*O) that
processes a file (\*Lchapter1\*O), enter:
.iS
awk  -f  sum2.awk  chapter1
\*O\c
.iE
.LI
The following \*Lawk\*O program computes the sum
and average of the numbers in the second column of the input file:
.iS
	{
		sum \(pl= $2
	}
END	{
	print "Sum: ", sum;
	print "Average:", sum/NR;
	}
\*O\c
.iE
.IP
The first action adds the value of the second field of each line to
the \*Lsum\*O variable.  (\*Lawk\*O initializes \*Lsum\*O,
and all variables, to 0 (zero) before starting.)  The keyword \*LEND\*O
before the second action causes \*Lawk\*O to perform that action
after all of the input file is read.  The \*LNR\*O variable,
which is used to calculate the average, is a special variable containing
the number of records (lines) that were read.
.LI
To print the names of the users who have the C shell as the
initial shell, enter:
.iS
awk  -F: '$7 ~ /csh/ {print $1}' /etc/passwd
\*O\c
.iE
.LI
To print the first two fields in reversed order, enter:
.iS
awk '{ print $2, $1 }'
\*O\c
.iE
.LI
The following \*Lawk\*O program prints
the first two fields of the input file in reversed order, with
.\" Begin Digital-specific information - CORRECTION
.\" FS can be only a single character.
input fields separated by a comma, then adds
up the first column and prints the sum and average:
.iS
BEGIN	{ FS = "," }
.\" End Digital-specific information - CORRECTION
	{ print $2, $1}
	{ s += $1 }
END	{ print "sum is", s, "average is", s/NR\ }
\*O\c
.iE
.LE
.SH RELATED INFORMATION
.PP
Commands:  \*Lgrep\*O(1),
.\" /\*Legrep\*O(1)/\*Lfgrep\*O(1), 
\*Lsed\*O(1).
.PP
Functions:  \*Lprintf\*O(3).
.PP
\*EProgramming Support Tools\*O
.\""Using Internationalization Features" in the \*E***THIS IS NOT A VALID TAG***\*O.
.\".PP 
.\"The discussion of \*Lawk\*O in the %\&%\&NOMAP_DNOProgEnvGde_DNOProgEnvSuppl%\&%\&.
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: test.1,v $ $Revision: 3.2.5.4 $ (DEC) $Date: 1993/11/04 23:25:27 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\" Begin Digital-specific information
.\" Added '[' to the NAME line for AES conformance and completeness
.\" End Digital-specific information
.\" 
.TH test 1
.SH NAME
\*Ltest\*O, \*L[\*O  \- Evaluates conditional expressions
.SH SYNOPSIS
.PP
.sS
\*Ltest\*O
\*Vexpression\*O
.PP
.\" Begin Digital-specific information CORRECTION
.\" Added a space after the left bracket.
\*L[ \*Vexpression\*L ]\*O
.\" End Digital-specific information CORRECTION
.sE
.SH DESCRIPTION
.PP
.iX "test command"
.iX "conditional expressions"
.iX "evaluating" "conditional expressions"
The \*Ltest\*O command evaluates an \*Vexpression\*O constructed of functions
and operators.  If the value of \*Vexpression\*O is \*Ltrue\*O, \*Ltest\*O
returns an exit value of 0 (zero); otherwise,
it returns a nonzero (\*Vfalse\*O)
exit value.  The \*Ltest\*O command also returns a nonzero exit value if there
are no arguments.
.PP
The alternate form of the command surrounds \*Vexpression\*O with
\*L[ ]\*O (brackets).  When you use this form, you must surround the
brackets with spaces.
.SS The test Expressions
All of the listed functions and operators are separate arguments to
\*Ltest\*O.
.PP
The following functions are used to construct \*Vexpression\*O:
.VL 4m
.LI "\*L-r \*Vfile\*O"
TRUE if \*Vfile\*O exists and has read permission.
.LI "\*L-w \*Vfile\*O"
TRUE if \*Vfile\*O exists and has write permission.
.LI "\*L-x \*Vfile\*O"
TRUE if \*Vfile\*O exists and has execute permission.
.LI "\*L-f \*Vfile\*O"
TRUE if \*Vfile\*O exists and is a regular file.
.LI "\*L-d \*Vfile\*O"
TRUE if \*Vfile\*O exists and is a directory.
.LI "\*L-e \*Vfile\*O"
TRUE if \*Vfile\*0 exists.
.LI "\*L-c \*Vfile\*O"
TRUE if \*Vfile\*O exists and is a character-special file.
.LI "\*L-b \*Vfile\*O"
TRUE if \*Vfile\*O exists and is a block-special file.
.LI "\*L-p \*Vfile\*O"
TRUE if \*Vfile\*O exists and is a named pipe (FIFO).
.LI "\*L-u \*Vfile\*O"
TRUE if \*Vfile\*O exists and its set-user ID bit is set.
.LI "\*L-g \*Vfile\*O"
TRUE if \*Vfile\*O exists and its set-group ID bit is set.
.LI "\*L-k \*Vfile\*O"
TRUE if \*Vfile\*O exists and its sticky bit is set.
.LI "\*L-s \*Vfile\*O"
TRUE if \*Vfile\*O exists and has a size greater than 0 (zero).
.LI "\*L-t\*O [\*Vfile_descriptor\*O]"
TRUE if the open file with file descriptor
number \*Vfile_descriptor\*O (1 by default)
is associated with a terminal device.
.LI "\*L-z \*Vstring1\*O"
TRUE if the length of \*Vstring1\*O is 0 (zero).
.LI "\*L-n \*Vstring1\*O"
TRUE if the length of \*Vstring1\*O is nonzero.
.LI "\*Vstring1\*O \*L=\*O \*Vstring2\*O"
TRUE if \*Vstring1\*O and \*Vstring2\*O are identical.
.LI "\*Vstring1\*L != \*Vstring2\*O"
TRUE if \*Vstring1\*O and \*Vstring2\*O are not identical.
.LI "\*Vstring1\*O"
TRUE if \*Vstring1\*O is not the null string.
.LI "\*Vnumber1\*O \*L-eq\*O \*Vnumber2\*O"
TRUE if the integers \*Vnumber1\*O and \*Vnumber2\*O are algebraically equal.
Any of the comparisons \*L-ne\*O, \*L-gt\*O, \*L-ge\*O, \*L-lt\*O, and \*L-le\*O
can be used in place of \*L-eq\*O.
.LE
.PP
The listed functions can be combined with the following operators:
.VL 4m
.LI "\*L!\*O"
Unary negation operator.
.LI "\*L-a\*O"
Binary AND operator.
.LI "\*L-o\*O"
Binary OR operator (\*L-a\*O has higher precedence
than \*L-o\*O).
.LI "\*L\e(\*O \*Vexpression\*O \*L\e)\*O"
Parentheses for grouping.
.LE
.\" Begin Digital-specific information
.\" Commenting out this section because there is no Japanese Language support.
.\" .SS Japanese Language Support
.\" If Japanese Language Support is enabled on your system, this command is not
.\" available.
.\" End Digital-specific information
.SH EXAMPLES
.PP
.AL
.LI
To test whether a file exists and is not empty, enter:
.iS
if test ! -s "$1"
then
	echo $1 does not exist or is empty.
fi
\*O\c
.iE
.IP
If the file specified by the first positional parameter
to the shell procedure does not exist, this displays an error message.
If \*L$1\*O exists, it displays nothing.
Note that there must be a space between \*L-s\*O and the filename.
.IP
The double quotes around \*L$1\*O ensure that the test will work
properly even if the value of \*L$1\*O is the empty string.
If the double quotes are omitted and \*L$1\*O is the empty string,
\*Ltest\*O displays the error message \*Ctest: parameter expected\*O.
.LI
To do a complex comparison, enter:
.iS
if [ $# -lt 2  -o  ! -s "$1" ]
then
	exit
fi
\*O\c
.iE
.IP
If the shell procedure was given fewer than two positional
parameters or the file specified by \*L$1\*O does not exist,
then this exits the shell procedure.
The special shell variable \*L\&$\&#\*O represents the number of
positional parameters entered on the command line that started this
shell procedure.
.LE
.SH EXIT VALUES
.PP
The \*Ltest\*O command evaluates \*Vexpression\*O and, if
its value is TRUE, returns an exit value of 0;
otherwise, it returns a nonzero (FALSE) exit value;
the \*Ltest\*O command also returns a
nonzero exit value if there are no arguments.
.SH RELATED INFORMATION
.PP
Commands:  \*Lcsh\*O(1), \*Lfind\*O(1), \*Lksh\*O(1), \*Lsh\*O(1).
.EQ
delim off
.EN

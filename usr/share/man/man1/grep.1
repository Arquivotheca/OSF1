.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: grep.1,v $ $Revision: 3.2.5.4 $ (DEC) $Date: 1994/01/13 20:39:29 $
.\" 
...\"
...\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
...\" ALL RIGHTS RESERVED
...\"
.TH grep 1
.SH NAME
\*Lgrep\*O, \*Legrep\*O, \*Lfgrep\*O - Searches a file for a pattern
.SH SYNOPSIS
.PP
.iX "grep command"
.iX "fgrep command"
.iX "egrep command"
.iX "files" "searching for a pattern in"
.iX "patterns" "searching files"
.iX "searching for patterns in files"
.sS
\*Lgrep\*O
\*O[\*L-bcilnqsvw\*O]
\*O[\*L-p\*O
\*Vparagraph_separator\*O]
\*Vpattern\*O
|
\*L-e\*O
\*Vpattern\*O
\*O[\*Vfile\*O
\&... ]
.PP
\*Legrep\*O
\*O[\*L-bchilnsvw\*O]
\*Vpattern\*O
|
\*L-e\*O
\*Vpattern\*O
|
\*L-f\*O
\*Vpattern_file\*O
\*O[\*Vfile\*O
\&... ]
.PP
\*Lfgrep\*O
\*O[\*L-bchilnsvwx\*O]
\*L-e\*O
\*Vpattern\*O
|
\*L-f\*O
\*Vpattern_file\*O
\*O[\*Vfile\*O
\&... ]
.sE
.PP
The \*Lgrep\*O, \*Legrep\*O, and \*Lfgrep\*O commands
search the specified files
(standard input by default) for lines containing characters that match the
specified pattern, and then write matching lines to standard output.
.SH FLAGS
.PP
While most flags can be combined, some combinations result in one
flag overriding another.  For example, if you specify \*L-n\*O and \*L-l\*O,
the output includes filenames only (as specified by \*L-l\*O) and thus does
not include line numbers (as specified by \*L-n\*O).
.VL 4m
.LI "\*L-b\*O"
Precedes each line by the block number on which it was found.
Use this flag to help find disk block numbers by context.
.LI "\*L-c\*O"
Displays only a count of matching lines.
.LI "\*L-e \*Vpattern\*O"
Specifies a \*Vpattern\*O.  This works the same as a simple
\*Vpattern\*O, but is useful when the pattern begins with a \*L-\*O (dash).
.LI "\*L-f \*Vpattern_file\*O"
Specifies a file that contains patterns (\*Legrep\*O and \*Lfgrep\*O only).
.LI "\*L-h\*O"
Suppresses reporting of filenames when multiple files are processed
(\*Lfgrep\*O and \*Legrep\*O only).
.LI "\*L-i\*O"
Ignores the case of letters in locating \*Vpattern\*O; that is, uppercase
and lowercase in the input are considered to be identical.
(For \*Lgrep\*O and \*Lfgrep\*O, \*L-y\*O can be specified in place of
\*L-i\*O; the effect is the same.)
.LI "\*L-l\*O"
Lists the name of each file with lines matching \*Vpattern\*O.  Each filename
is listed only once; filenames are separated by newline characters.
\*Lgrep\*O returns \*Cstandard input\*O (or the local equivalent)
in place of a filename if \*L-l\*O is specified with standard input, but
\*Legrep\*O and \*Lfgrep\*O exit with a return value of \*L1\*O (see \*LEXIT
VALUES\*O).
.LI "\*L-n\*O"
Precedes each line with its relative line number in the file.
.LI "\*L-p\*Vparagraph_separator\*O"
Displays the entire paragraph containing matched lines.
Paragraphs are delimited by paragraph separators, \*Vparagraph_separator\*O,
which are patterns in the same form as the search pattern.
Lines containing the paragraph separators are used only as separators;
they are never included in the output.
The default paragraph separator is a blank line (\*Lgrep\*O only).
.LI "\*L-q\*O"
Suppresses all output except error messages.  This is useful for
checking status.  (\*Lgrep\*O only.)
.LI "\*L-s\*O"
Suppresses error messages about inaccessible files (\*Lgrep\*O only).
.IP
Suppresses all output except error messages.  This is useful for
checking status (\*Legrep\*O and \*Lfgrep\*O).
.LI "\*L-v\*O"
Displays all lines except those that match the specified pattern.
Useful for filtering unwanted lines out of a file.
.LI "\*L-w\*O"
The expression is searched for as a word (the pattern bracketed by
nonalphanumeric characters or by the beginning or end of the
.\" Begin Digital-specific information - CORRECTION
.\" QAR 18743.  -w works for all three versions of the command.
line).
.\"(\*Lgrep\*O only).
.\" End Digital-specific information - CORRECTION
See \*Lex\*O.
.LI "\*L-x\*O"
Displays lines that match the pattern exactly with no additional
characters (\*Lfgrep\*O only).
.LE
.SH DESCRIPTION
.PP
Three versions of the \*Lgrep\*O command permit you to specify
the matching pattern in varying levels of complexity:
.SS \*Lgrep\*O
The \*Lgrep\*O command searches for patterns that are limited regular
expressions as described under \*LRegular Expressions\*O.  The \*Lgrep\*O
command uses a compact, nondeterministic algorithm.
.SS \*Legrep\*O
The \*Legrep\*O command searches for patterns that are full regular
expressions, except for \e( and \e)
and with the addition of the following rules:
.PP
.ML
.LI
A regular expression followed by a \*L\(pl\*O (plus sign) matches one or
more occurrences of the regular expression.
.LI
A regular expression followed by a \*L?\*O (question mark)
matches zero or one occurrence of the regular expression.
.LI
Two regular expressions separated by a \*L|\*O (vertical bar) or by
a newline character match either expression.
.LI
A regular expression can be enclosed in \*L( )\*O (parentheses)
for grouping.
.LE
.PP
The order of precedence of operators is \*L[\^]\*O, then \*L*\*O, \*L?\*O,
and \*L+\*O, then concatenation, then \*L|\*O and the newline character.
.PP
The \*Legrep\*O command uses a deterministic algorithm that
needs exponential space.
.SS \*Lfgrep\*O
The \*Lfgrep\*O command searches for patterns that are fixed strings.
.SS Command Usage
All versions of \*Lgrep\*O precede the matched line with the name of the file
containing it if you specify more than one file (except when the
\*L-h\*O flag is specified).
.PP
.PP
Lines are limited to 512 bytes; longer lines are broken into
multiple lines of 512 or fewer bytes (\*Lgrep\*O only).
Paragraphs (under the \*L-p\*O flag) are currently limited to a
length of 10000 bytes.
.PP
Running \*Lgrep\*O on a non-text file (for example, an \*L\&.o\*O file)
produces unpredictable
results and is discouraged.
.SS Regular Expressions (REs)
The following REs match a single character:
.VL 4m
.LI "\*Vcharacter\*O"
An ordinary character (one other than one of the special
pattern-matching characters) matches itself.
.LI "\*L\&.\*O"
A \*L\&.\*O (dot) matches any single character except
for the newline character.
.LI "\*L[\*Vstring\*O]"
A string enclosed in \*L[ ]\*O (brackets)
matches any one character in that string.  In addition,
certain pattern-matching characters have special meanings within
brackets:
.VL 4m
.LI "\*L^\*O"
If the first character of \*Vstring\*O is a \*L^\*O (circumflex),
the RE \*L[^\*Vstring\*L]\*O matches any character
\*Vexcept\*O the characters in \*Vstring\*O and the newline
character.  A \*L^\*O has this special meaning only if
it occurs first in the string.
.LI "\*L\-\*O"
You can use a \*L\-\*O (dash) to indicate a range of consecutive
characters.  The characters that fall within a range are determined
by the current collating sequence, which is defined by the \*LLC_COLLATE\*O
environment variable. For example, \*L[a-d]\*O is equivalent to
\*L[abcd]\*O in the traditional ASCII collating
sequence.
.\"  but if you were using French collation rules, it would
.\" be equivalent to \*L[aa\*`a\*'a\*^bc\(c,d].\*O (doesn't work with pman)
.IP
A range can include a multicharacter collating element enclosed
within bracket-period delimiters ([. .]). These \*Lcollating symbols\*O
are necessary for languages that treat some strings as individual
collating elements. For example, in Spanish, the strings \*Lch\*O and
\*Lll\*O each are collating symbols (that is, the Spanish primary sort order
is \*La, b, c, ch, d,...,k, l, ll, m,...\*O). The bracket-period
delimiters in the RE syntax distinguish multicharacter collating
elements from a list of the individual characters that make up the element.
When using Spanish collation rules, \*L[[.ch.]]\*O is treated as an RE matching
the sequence \*Lch\*O, while \*L[ch]\*O is treated as an RE matching \*Lc\*O
or \*Lh\*O. In addition, \*L[a-[.ch.]]\*O matches \*La, b, c,\*O and \*Lch\*O.
.IP
A collating sequence can define equivalence classes for characters.
An equivalence class is a set of collating elements that all sort to the
same primary location. They are enclosed within bracket-equal
delimiters (\*L[= =]\*O). An equivalence class generally is designed to deal
with primary-secondary sorting; that is, for languages like French
that define groups of characters as sorting to the same primary
location, and then having a tie-breaking, secondary sort. For example,
if \*Le, \(e`\*O, and \*V\(e^\*O belong to the same equivalence class,
then \*L[[=e=]fg\*O, \*L[[=\(e`=]fg]\*O, and \*L[[=\(e^=]fg]\*O
are each equivalent to \*L[e\(e`\(e^fg]\*O.
.IP
The \*L-\*O (dash) character loses its
special meaning if it occurs first (\*L[\-\*Vstring\*L]\*O),
if it immediately follows an initial circumflex
(\*L[^\-\*Vstring\*L]\*O), or if it appears last
(\*L[\*Vstring\*L\-]\*O) in the string.
.LI "\*L]\*O"
When the \*L]\*O (right bracket) is the first character in the
string (\*L[]\*Vstring\*L]\*O) or when it immediately follows an
initial circumflex (\*L[^]\*Vstring\*L]\*O), it is
treated as a part of the string rather than as the string terminator.
.LE
.LI "\*L\e\*Vspecial_character\*O"
A \*L\e\*O (backslash) followed by a special pattern-matching
character matches the special character itself (as a literal character).
These special pattern-matching characters are as follows:
.VL 4m
.LI "\*L\&.\*O \*L*\*O \*L[\*O \*L\e\*O"
Always special, except when they appear within \*L[ ]\*O (brackets).
.LI "\*L^\*O"
Special at the beginning of an entire pattern or when it
immediately follows the left bracket of a pair of brackets
(\*L[^\&.\&.\&.]\*O).
.LI "\*L$\*O"
Special at the end of an entire pattern.
.IP
In addition, the character used to delimit an entire pattern is
special for that pattern.  (For example, see how \*L/\*O (slash) is
used in the \*Lg\*O subcommand.)
.LE
.LI "\*L[: :]\*O"
A character class name enclosed in bracket-colon delimiters matches
any of the set of characters in the named class. Members of each of
the sets are determined by the current setting of the \*LLC_CTYPE\*O
environment variable. The supported classes are: \*Lalpha, upper,
lower, digit, alnum, xdigit, space, print, punct, graph, cntrl.\*O
Here is an example of how to specify one of these classes:
.iS
[[:lower:]]
\*O\c
.iE
.IP
This matches any lowercase character for the current locale.
.LE
.SS Forming Patterns
The following rules describe how to form patterns from REs:
.ML
.LI
An RE that consists of a single, ordinary character matches that same
character in a string.
.LI
An RE followed by an \*L*\*O (asterisk) matches zero or more
occurrences of the character that the RE matches.  For example, the
following pattern:
.iS
ab*cd
\*O\c
.iE
.IP
matches each of the following strings:
.iS
acd
abcd
abbcd
abbbcd
\*O\c
.iE
.IP
but not the following string:
.iS
abd
\*O\c
.iE
.IP
If there is any choice, the longest matching leftmost string
is chosen.  For example, given the following string:
.iS
122333444
\*O\c
.iE
.IP
the pattern \*L\&.*\*O matches \*L122333444\*O, the
pattern \*L\&.*3\*O matches \*L122333\*O, and the
pattern \*L\&.*2\*O matches \*L122\*O.
.LI
An RE followed by:
.VL 4m
.LI "\*L\e{\*Vnumber\*O\e}"
Matches exactly \*Vnumber\*O occurrences of the character matched by the RE.
.LI "\*L\e{\*Vnumber,\*O\e}"
Matches at least number occurrences of the character matched by the RE.
.LI "\*L\e{\*Vnumber1,number2\*O\e}"
Matches any number of occurrences of the
character matched by the RE from \*Vnumber1\*O to \*Vnumber2\*O, inclusive.
.IP
The values of \*Vnumber1\*O and \*Vnumber2\*O must be integers from 0 to 255,
inclusive.  Whenever a choice exists, this pattern matches as many
occurrences as possible.
.IP
Note that if \*Vnumber\*O is 0 (zero), \*Vpattern\*O matches the
beginning of the line.
.LE
.LI
You can combine REs into patterns that match strings containing the
same sequence of characters.  For example, \*LABD\*O
matches the string \*LAB*CD\*O and
\*L[A-Za-z]*[0-9]*\*O matches any string that
contains any combination of ASCII alphabetic characters (including none),
followed by any combination of numerals (including none).
.LI
The character sequence
\*L\e(\*Vpattern\*L\e)\*O matches \*Vpattern\*O and
saves it into a numbered holding space.
Using this sequence, up to nine patterns can be saved on a line.
Counting from left to right on the line,
the first pattern saved is placed in the first holding space, the second pattern
is placed in the second holding space, and so on.
.IP
The character sequence \*L\e\*Vn\*O matches the \*Vn\*Oth saved
pattern, which is placed in the \*Vn\*Oth holding space.
(The value of \*Vn\*O is a digit, 1-9.)
Thus, the following pattern:
.iS
\e(A\e)\e(B\e)C\e2\e1
\*O\c
.iE
.IP
matches the string \*LABCBA\*O.  You can nest patterns to be saved in
holding spaces.
Whether the enclosed patterns are nested or
in a series, \*L\e\*Vn\*O refers to the \*Vn\*Oth
occurrence, counting from the left, of the delimiting characters, \*L\e)\*O.
You can also use
\*L\e\*Vn\*O expressions in replacement strings as well as address patterns.
.LE
.SS Restricting What Patterns Match
A pattern can be restricted to match from the beginning of a line,
up to the end of the line, or the entire line:
.ML
.LI
A \*L^\*O (circumflex) at the beginning of a pattern
causes the pattern to match only a string that begins in the first
character position on a line.
.LI
A \*L$\*O (dollar sign) at the end of a pattern causes that
pattern to match only if the last matched character is the
last character (not including the newline character) on a line.
.LI
The construction \*L^\*Vpattern\*L$\*O
restricts the pattern to matching only an entire line.
.LE
.PP
In addition, the null pattern
(that is, \*L//\*O) duplicates the previous pattern.
.SH EXAMPLES
.PP
.AL
.LI
To search several files for a string of characters, enter:
.iS
fgrep  'strcpy'  *.c
\*O\c
.iE
.IP
This searches for the string \*Lstrcpy\*O in all files in the
current directory with names ending in \*L\&.c\*O.
.LI
To count the number of lines that match a pattern, enter:
.iS
fgrep  -c  '{'  pgm.c
fgrep  -c  '}'  pgm.c
\*O\c
.iE
.IP
This displays the number of lines in \*Lpgm.c\*O that contain
left and right braces.
.IP
If you do not put more than one \*L{\*O or
\*L}\*O on a line in your C programs, and if the braces are
properly balanced, then the two numbers displayed will be the same.  If
the numbers are not the same, then you can display the lines that
contain braces in the order that they occur in the file
with the command:
.iS
egrep -n -E '\{|\}'  pgm.c
\*O\c
.iE
.LI
To display all lines in a file that begin with an ASCII letter, enter:
.iS
grep  '^[a-zA-Z]'  pgm.s
\*O\c
.iE
.IP
Note that because \*Lfgrep\*O searches only for fixed strings and
does not interpret pattern-matching characters, the following command
causes \*Lfgrep\*O to search only for the literal string
\*L^[a-zA-Z]\*O in \*Lpgm.s\*O:
.iS
fgrep  '^[a-zA-Z]'  pgm.s
\*O\c
.iE
.LI
To display all lines that contain ASCII letters in parentheses or digits in
parentheses (with spaces optionally preceding and following the letters
or digits), but \*Vnot\*O letter-digit combinations in parentheses, enter:
.iS
egrep \e
\&'\e(  *([a-zA-Z]*\(or[0-9]*)  *\e)'  my.txt
\*O\c
.iE
.IP
This command displays lines in \*Lmy.txt\*O such as \*L(y)\*O or
\*L(  783902)\*O, but not \*L(alpha19c)\*O.
.IP
Note that with \*Legrep\*O, \*L\e(\*O and \*L\e)\*O match
parentheses in the text and
\*L(\*O and \*L)\*O are special characters that group parts of the pattern.
With \*Lgrep\*O, the reverse is true; use \*L(\*O and \*L)\*O to match
parentheses and \*L\e(\*O and \*L\e)\*O to group characters.
.LI
To display all lines that do \*Vnot\*O match a pattern, enter:
.iS
grep  -v  '^#'
\*O\c
.iE
.IP
This displays all lines that do not begin with a \*L#\*O (number sign).
.LI
To display the names of files that contain a pattern, enter:
.iS
fgrep  -l  'rose'  *.list
\*O\c
.iE
.IP
This searches the files in the current directory that end
with \*L\&.list\*O and displays the names of those files that
contain at least one line containing the string \*Lrose\*O.
.LI
To display all lines that contain uppercase characters, enter:
.iS
grep [[:upper:]] pgm.s
\*O\c
.iE
.LI
To display all lines that begin with a range of characters that
includes a multicharacter collating symbol, enter:
.iS
grep '^[a-[.ch.]]' pgm.s
\*O\c
.iE
.IP
With your locale set to a Spanish locale, this command matches
all lines that begin with \*La\*O, \*Lb\*O, \*Lc\*O, or \*Lch\*O.
.LE
.SH EXIT VALUES
.PP
The exit values of the \*Lgrep\*O, \*Legrep\*O, and \*Lfgrep\*O commands are
as follows:
.VL 4m
.LI "\*L0\*O"
A match was found.
.LI "\*L1\*O"
No match was found.
.LI "\*L2\*O"
A syntax error was found or a file was inaccessible,
even if matches were found.
.LE
.SH RELATED INFORMATION
.PP
Commands:  \*Led\*O(1)/\*Lred\*O(1), \*Lex\*O(1), \*Lsed\*O(1), \*Lsh\*O(1).
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: dc.1,v $ $Revision: 3.2.5.2 $ (DEC) $Date: 1993/10/19 15:28:40 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.TH dc 1
.SH NAME
\*Ldc\*O \- Provides an interactive desk calculator for arbitrary precision integer arithmetic
.SH SYNOPSIS
.PP
.sS
\*Ldc\*O
.sE
.SH DESCRIPTION
.iX "dc command"
.iX "interactive desk calculator"
.iX "desk calculator"
.iX "calculator" "interactive"
.iX "arbitrary precision arithmetic"
.iX "arithmetic" "arbitrary precision"
.PP
The \*Ldc\*O command is an arbitrary precision arithmetic
calculator.  \*Ldc\*O takes its input from \*Vfile\*O or
standard input until it reads an End-of-File character.  It writes to
standard output. The \*Ldc\*O command operates on integers by default, but you
can specify an input base, output base, and a number of fractional digits
to be maintained.  The \*Ldc\*O command is structured overall as a stacking, reverse Polish calculator.
.PP
The \*Lbc \*Ocommand
is a preprocessor for \*Ldc\*O.  It provides infix notation and a
syntax similar to the C language, which implements functions and
.gL "C"
reasonable control structures for programs.
.SH EXAMPLES
.PP
.AL
.LI
To use \*Ldc\*O as a calculator proceed as follows:
.IP
Enter:
.iS
1 4 / p		[Divide 1 by 4]s.
\*O\c
.iE
.IP
The system responds as follows:
.oS
0
\*O\c
.oE
.IP
Enter:
.iS
1 k  [ Keep 1 decimal place]s.
1 4 / p
\*O\c
.iE
.IP
The system responds as follows:
.oS
0.2
\*O\c
.oE
.IP
Enter:
.iS
3 k  [ Keep 3 decimal places]s.
1 4 / p
\*O\c
.iE
.IP
The system responds as follows:
.oS
0.250
\*O\c
.oE
.IP
Enter:
.iS
16 63 5 / \(pl p 	[Divide 63 by 5, add the result to 16]s.
\*O\c
.iE
.IP
The system responds as follows:
.oS
28.600
\*O\c
.oE
.IP
Enter:
.iS
16 63 5 \(pl / p 	[Add 63 and 5, divide the result by 16]s.
\*O\c
.iE
.IP
The system responds as follows:
.oS
0.235
\*O\c
.oE
.IP
You can type the comments (enclosed in brackets), but they are
provided only for your information.
.IP
When you enter \*Ldc\*O expressions directly from the keyboard,
press the End-of-File key sequence to end the \*Ldc\*O session and return to the
shell command line.
.LI
To load and run a \*Ldc\*O program file, proceed as follows:
.IP
Enter:
.iS
dc prog.dc
5 lf x p  [  5 factorial ]s.
\*O\c
.iE
.IP
The system responds as follows:
.oS
120
\*O\c
.oE
.IP
Enter:
.iS
10 lf x p  [ 10 factorial ]s.
\*O\c
.iE
.IP
The system responds as follows:
.oS
3628800
\*O\c
.oE
.IP
This interprets the \*Ldc\*O program saved in
\*Lprog.dc\*O, then reads from standard input.
The \*Llf x\*O evaluates the function stored
in register \*Lf\*O, which could be defined in the program file
\*Lprog.dc\*O as:
.iS
[ f: compute the factorial of n ]s.

[	(n = the top of the stack) ]s.

[ If 1>n do b;  If 1<n do r ]s.
	[d 1 >b d 1 <r] sf

[ Return f(n) = 1	]s.
	[d - 1 \(pl] sb

[ Return f(n) = n * f(n-1)  ]s.
	[d 1 - lf x *] sr
\*O\c
.iE
.LE
.PP
You can create \*Ldc\*O program files with a text editor,
or with the \*L-c\*O (compile) flag of the \*Lbc\*O command.
When you enter \*Ldc\*O expressions directly from the keyboard,
press the End-of-File key sequence to end the \*Ldc\*O session
and return to the shell command line.
.SH SUBCOMMANDS
.PP
.VL 4m
.LI "\*Vnumber\*O"
Pushes the specified value onto the stack.  \*Vnumber\*O is
an unbroken string of the digits 0 to 9.  To specify a negative number,
precede it with \(ul (underscore).  A number can contain a decimal
point.
.LI "\*L\(pl - / * % ^\*O"
Adds (\(pl), subtracts (-), multiplies (*), divides
(/), remainders (%), or exponentiates (^) the top
two values on the stack.  The \*Ldc\*O command pops the top two entries off the
stack and pushes the result on the stack in their place.
.LI "\*L!\*O"
Interprets the rest of the line as a system command.
.LI "\*L?\*O"
Executes a line of input from standard input.
.LI "\*Lc\*O"
Cleans the stack: \*Ldc\*O pops all values on the stack.
.LI "\*Ld\*O"
Duplicates the top value on the stack.
.LI "\*Lf\*O"
Displays all values on the stack.
.LI "\*Li\*O"
Pops the top value on the stack and uses that value as the number
radix for further input.
.LI "\*LI\*O"
Pushes the input base on the top of the stack.
.LI "\*Lk\*O"
Pops the top of the stack, and uses that value as a nonnegative
scale factor.  The appropriate number of places is displayed on output
and is maintained during multiplication, division, and exponentiation.
The interaction of scale factor, input base, and output base is
reasonable if all are changed together.
.LI "\*Ll\*Vx\*O"
Pushes the value in register \*Vx\*O on the stack.  The
register \*Vx\*O is not changed.  All registers start with zero
value.
.LI "\*LL\*Vx\*O"
Treats \*Vx\*O as a stack and pops its top value onto the main
stack.
.LI "\*Lo\*O"
Pops the top value on the stack and uses that value as the number
radix for further output.
.LI "\*LO\*O"
Pushes the output base on the top of the stack.
.LI "\*Lp\*O"
Prints the top value on the stack.  The top value remains unchanged.
.LI "\*LP\*O"
Interprets the top value on the stack as an ASCII string,
prints it, and removes it.
.LI "\*Lq\*O"
Exits the program.  If \*Ldc\*O is executing a string, it pops
the recursion level by two.
.LI "\*LQ\*O"
Pops the top  value on the stack and
the string execution level by that value.
.LI "\*Ls\*Vx\*O"
Pops the top of the stack and stores it in a register
named \*Vx\*O, where \*Vx\*O can be any single-byte character.
.LI "\*Lv\*O"
Replaces the top element on the stack by its square root.
Any existing fractional part of the argument is taken into account, but
otherwise the scale factor is ignored.
.LI "\*LS\*Vx\*O"
Treats \*Vx\*O as a stack.  It pops the top of the main stack
and pushes that value onto stack \*Vx\*O.
.LI "\*Lx\*O"
Treats the top element of the stack as a character string and
executes it as a string of \*Ldc\*O commands.
.LI "\*LX\*O"
Replaces the number on the top of the stack with its scale factor.
.LI "\*Lz\*O"
Pushes the number of elements in the stack onto the stack.
.LI "\*LZ\*O"
Replaces the top number in the
stack with the number of digits in that number.
.LI "\*O[\*Vstring\*O]"
Puts the bracketed \*Vstring\*O onto the top of the stack.
.LI "\*L<\*Vx\*O"
.LI "\*L>\*Vx\*O"
.LI "\*L=\*Vx\*O"
Pops the top two elements of the stack and compares them.
Register \*Vx\*O is executed if the stated relationship is TRUE.
.LI "\*L;:\*O"
\*Ldc\*O uses these characters for array operations.
.LE
.SH RELATED INFORMATION
.PP
Commands:  \*Lbc\*O(1).
.PP
.EQ
delim off
.EN

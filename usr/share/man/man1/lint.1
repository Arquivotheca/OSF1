.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: lint.1,v $ $Revision: 3.2.6.4 $ (DEC) $Date: 1994/01/14 21:43:42 $
.\"
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\" @(#)lint.1 6.2 (Berkeley) 3/17/86
.\"
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	@(#)lint.1	6.2 (Berkeley) 3/17/86
.\"
.TH lint 1
.PP
.SH NAME
.PP
\*Llint\*O \- a C program checker
.SH SYNOPSIS
.PP
.iX "lint command"
.sS
.in +.5i
.ti -.5i
\*Llint\*O
.\" [ \*Voption\*O ] ... \*Vfile\*O ...
[\*L\-abchnpuxv\*O] [\*L\-D\*Vname\*O[=\*Vdefinition\*O]] [\*L\-I\*Vdirectory\*O] [\*L\-l\*Vkey\*O] [\*L\-o\*Vlibrary\*O] [\*L\-MAP\*O] [\*L\-Q\*Vsuboptions\*O] [\*L\-Nd\*Vnumber\*O] [\*L\-Nl\*Vnumber\*O] [\*L\-Nn\*Vnumber\*O] [\*L\-Nt\*Vnumber\*O] [\*L\-U\*Vname\*O] [\*L\-w\*Vclass...\*O] \*Vfile...\*O
.sE
.SH DESCRIPTION
.PP
The
\*Llint\*O
program checker attempts to detect features of the C program files that are
likely to be bugs, non-portable, or wasteful.
It also checks type usage more strictly
than the compilers.
Among the things that are currently detected are
unreachable statements,
loops not entered at the top,
automatic variables declared and not used,
and logical expressions whose value is constant.
.PP
Moreover, the usage of functions is checked to find
functions that return values in some places and not in others,
functions called with varying numbers or types of arguments,
and functions whose values are not used
or whose values are used but none returned.
.PP
Arguments whose names end with
\*L\.c\*O
are taken to be C source files.
Arguments whose names end with
\*L\.ln\*O
are taken to be the result of an earlier invocation of
\*Llint\*O
with either the
\*L\-c\*O or the \*L\-o\*O option used.
The
\*L\.ln\*O
files are analogous to
\*L\.o\*O (object) files that are produced by the
\*Lcc\*O(1)
command when given a
\*L\.c\*O file as input.
Files with other suffixes produce warnings and are ignored.
.PP
The
\*Llint\*O
program checker will take all the
\*L\.c\*O, \*L\.ln\*O ,
and
\*Lllib-l\*Vx\*L\.ln\*O
(specified by
\*L\-l\*Vx\*O)
files and process them in their command line order.
By default,
\*Llint\*O
appends the standard C lint library
(\*Lllib\-lc\.ln\*O)
to the end of the list of files.
However, if the
\*L\-p\*O
option is used, the portable C lint library
(\*Lllib\-port\.ln\*O)
is appended instead.
When the
\*L\-c\*O option is not used, the second pass of
\*Llint\*O
checks this list of files for mutual compatibility.
When the
\*L\-c\*O
option is used, the
\*L\.ln\*O and the \*Lllib-l\*Vx\*L\.ln\*O
files are ignored.
.SH FLAGS
.PP
Any number of
\*Llint\*O
options may be used, in any order, intermixed with file-name arguments.
The following options are used to suppress certain kinds of complaints:
.VL 4m
.LI "\*L\-a\*O"
Suppress complaints about assignments of long values to variables that are not
long.
.LI "\*L\-b\*O"
Suppress complaints about
\*Lbreak\*O statements that cannot be reached.
(Programs produced by
\*Llex\*O
or
\*Lyacc\*O
will often result in many such complaints).
.LI "\*L\-h\*O"
Do not apply heuristic tests that attempt to intuit bugs, improve
style, and reduce waste.
.LI "\*L\-u\*O"
Suppress complaints about functions and external
variables used and not defined, or defined and not used.
(This option is suitable for running
\*Llint\*O
on a subset of files of a larger program).
.LI "\*L\-v\*O"
Suppress complaints about unused arguments in functions.
.LI "\*L\-x\*O"
Do not report variables referred to by external declarations but never used.
.LI "\*L\-w\*Vclass\*O"
Controls the reporting of warning classes. All warning classes are
active by default. They can however, be individually activated by
including the appropriate option as part of the \*vclass\*O argument.
For example, to report only declaration consistency and Heuristic
complaints, enter the following command:
.oS
lint -wA -wdh prog.c
.oE
In the preceding example, \*L\-wA\*O deactivates all warnings and
\*L\-wdh\*O activates the desired reports. The following list describes
available classes of warnings:
.VL 4m
.LI "\*La\*O"
Non-ANSI features
.LI "\*Lc\*O"
Comparisons with unsigned values
.LI "\*Ld\*O"
Declaration consistency
.LI "\*Lh\*O"
Heuristic complaints
.LI "\*Lk\*O"
Supresses the following messages: \*Lfunction prototype not in scope\*O
and \*Lold style argument declaration\*O.
.LI "\*Ll\*O"
Assignment of long values to variables that are not long
.LI "\*Ln\*O"
Null-effect code
.LI "\*Lo\*O"
Unknown order of evaluation
.LI "\*Lp\*O"
Various portability concerns
.LI "\*Lr\*O"
Return statement consistency
.LI "\*Lu\*O"
Proper usage of variables and functions
.LI "\*LA\*O"
Deactivates all warnings
.LI "\*LC\*O"
Constants occurring in conditionals
.LI "\*LD\*O"
External declarations are never used
.LI "\*LO\*O"
Obsolete features
.LI "\*LP\*O"
Function prototype presence
.LI "\*LR\*O"
Detection of unreachable code
.LI "\*LS\*O"
Storage capacity checks
.LI "\*LU\*O"
Equivalent to \*L\-u\*O
.LE
.LE
.PP
The following arguments alter
\*Llint\*O's
behavior:
.VL 4m
.LI "\*L\-l\*Vx\*O"
Include additional lint library
\*Lllib-l\*Vx\*L\.ln\*O.
For example, you can include a lint version of the Math Library
\*Lllib-lm\.ln\*O by inserting \*L\-lm\*O
on the command line.  This argument does not suppress the default use of
\*Lllib-lc\.ln\*O.
These lint libraries must be in the assumed directory.
This option can be used to reference local lint libraries and is
useful in the development of multi-file projects.
.LI "\*L\-n\*O"
Do not check compatibility against either the standard or the portable
lint library.
.LI "\*L\-p\*O"
Attempt to check portability to other dialects
(IBM and GCOS) of C.
Along with stricter checking,
this option causes all non-external names to be truncated
to eight characters and all external names
to be truncated to six characters and one case.
.\" commented out 4/8/93, not supported silver maint release
.\" .LI "\*L\-systype\*V  sys\*O"
.\" Use include files and lint libraries from the system specified, for example,
.\" \*L\-systype bsd43\*O.
.LI "\*L\-c\*O"
Cause
\*Llint\*O
to produce a
\*L\.ln\*O
file for every
\*L\.c\*O
file on the command line.
These
\*L\.ln\*O
files are the product of
\*Llint\*O's
first pass only, and are not checked for inter-function compatibility.
.LI "\*L \-o\*Vlib\*O"
Cause
\*Llint\*O
to create a lint library with the name
\*Lllib-l\*Vlib\*L\.ln\*O.
The
\*L\-c\*O
option nullifies any use of the
\*L\-o\*O
option.
The lint library produced is the input that is given to
\*Llint\*O's
second pass.  The
\*L\-o\*O
option simply causes this file to be saved in the named lint library.
To produce a
\*Lllib-l\*Vlib\*L\.ln\*O
without extraneous messages, use of the
\*L\-x\*O
option is suggested.  The
\*L\-v\*O
option is useful if the source file(s) for the lint library
are just external interfaces (for example, the way the file
\*Lllib\-lc\*O
is written).  These option settings are also available through the
use of ``lint comments'' (see below).
.LI "\*L\-MA\*O"
Enforces ANSI C standard rules. The default mode is extended C mode.
ANSI mode prepends (adds at the beginning) the standard ANSI library
function prototypes in place of the default extended mode C library.
ANSI mode enforces a stricter interfile object reference/definition
linkage checking.
.LI "\*L\-P\*O"
Allows C preprocessor options to be specified when executing the lint command.
For example, specifying \*L\-PV\*O invokes the preprocessor with the
-V option specified.
.LE
.PP
The
\*L\-Q\*O
option provides support for migration
from ULTRIX and DEC OSF/1 Version 1.0 systems to DEC OSF/1 Version 1.2.
This option turns on checking for all common programming techniques which
might cause problems when moving from 32-bit systems to 64-bit systems.
The \*L\-Q\*O option disables checking for other programming problems,
so this switch should be used only for migration checking.
.PP
Suboptions to \*L\-Q\*O have the form \*L\-Q\*Vn\*O. You can enter more
than one suboption with the \*L\-Q\*O option, for example, \*L\-QacP\*O
to suppress checking for pointer alignment problems, problematic type
casts, and function prototype checks, respectively.
.PP
The following suboptions are available to suppress specific categories
of checking:
.VL 4m
.LI "\*La\*O"
Suppresses checking of pointer alignment problems.
.LI "\*Lb\*O"
Suppresses checking for
\*Lint long\*O
mismatches in bit operators.
.LI "\*Lc\*O"
Suppresses checking for problematic type casts.
.LI "\*Lf\*O"
Suppresses checking for format control strings in
\*Lscanf\*O
and
\*Lprintf\*O.
.LI "\*Ll\*O"
Suppresses checking for assignments of long values to variables of a type
other than long.
.LI "\*Lp\*O"
Suppresses checking for illegal combinations pointer and integer data types.
.LI "\*Ls\*O"
Suppresses checking for problematic sign extensions to long
.LI "\*Lu\*O"
Suppresses checking to see if a variable is used before it is set.
.LI "\*LC\*O"
Suppresses checking to see if there is constant truncation of
longs in an assignment.
.LI "\*LF\*O"
Suppresses checking to see if precision has been lost in field assignment.
.LI "\*LP\*O"
Suppresses function prototype checks.
.LI "\*LS\*O"
Suppresses checking for a problematic combination of structure pointers.
If structure checking and cast checking are not suppressed then the
casting of differing structures and pointers to structures are
flagged if the structures differ in size and/or alignment as described
in the following two suboptions.
.LI "\*LZ\*O"
Suppresses warnings about casting a structure or structure pointer to one
of a different size if \*Lc\*O and \*LS\*O are not specified on the
command line.
.LI "\*Lg\*O"
Suppresses warnings about casting a structure or structure pointer to on
of a different alignment if \*Lc\*O and \*LS\*O are not specified on the
command line.
.LE
.PP
The \*L\-N\*O option and its related suboptions allow you to
increase the size of various internal tables at runtime.
Suboptions to the \*L\-N\*O option take the
form \*L\-N\*Vzx\*O where \*Vz\*O is a suboption and \*Vx\*O is an
integer size.
.VL 4m
.LI "\*L\-N\*O"
Use this option with its suboptions to increase the size of various
internal tables at runtime if the default values are not sufficient.
.LI "\*Ln\*Vxxxx\*O"
Use with \*L\-N\*O when you encounter the error
"symbol table full". To increase the number of entries, use \*L\-Nn\*Vxxxx\*O
to increase the number of entries. Use a number greater than 1500, which is
the default value.
.LI "\*Ld\*Vxxxx\*O"
Use with \*L\-N\*O when you encounter the error
that the \*Ldimension table\*O has overflowed or is full. To increase the
number of base elements allocated to the members of the dimension tables.
Use a number greater than 2000, which is the default value.
.LI "\*Lt\*Vx\*O"
Use with \*L\-N\*O when you encounter the error stating that
the parse tree limit has been reached,
"out of tree space; recompile with Ntx option with x greater
than xxxx". Run \*Llint\*O again, do not recompile, on the module that
generated the error using
\*L\-Nt\*Vyyyy\*O with \*Vyyyy\*O greater than the value in the error message.
.LI "\*Ll\*Vx\*O"
Use with \*L\-N\*O when you encounter the error stating that
the local type table limit has been reached,
"out of tree space; recompile with -Nlx option with x greater than xxxx".
Run \*Llint\*O again, do not recompile, on the module that generated the error,
using \*L\-Nl\*Vyyyy\*O with \*Vyyyy\*O greater than the
value in the error message.
.LE
.PP
The
\*L\-D\*O,
\*L\-U\*O,
and
\*L\-I\*O
options of
\*Lcpp\*O(1)
and the
\*L\-g\*O
and
\*L\-O\*O
options of
\*Lcc\*O(1)
are also recognized as separate arguments.
The
\*L\-g\*O and \*L\-O\*O
options are ignored, but, by recognizing these options,
\*Llint\*O's
behavior is closer to that of the
\*Lcc\*O(1)
command.
Other options are warned about and ignored.
The pre-processor symbol ``lint'' is defined to allow certain questionable
code to be altered or removed for
\*Llint\*O.
Therefore, the symbol ``lint'' should be thought of as a reserved word
for all code that is planned to be checked by
\*Llint\*O.
.PP
Certain conventional comments in the C source
will change the behavior of
\*Llint\*O:
.VL 12m
.LI "\*L/*NOTREACHED*/\*O"
at appropriate points
stops comments about unreachable code.
(This comment is typically placed just after calls to functions like
\*Lexit\*O(2).
.LI "\*L/*VARARGS\*Vn*/\*O"
suppresses
the usual checking for variable numbers of arguments
in the following function declaration.
The data types of the first
\*Vn\*O
arguments are checked;
a missing
\*Vn\*O
is taken to be 0.
.LI "\*L/*ARGSUSED*/\*O"
turns on the
\*L\-v\*O
option for the next function.
.LI "\*L/*LINTLIBRARY*/\*O"
at the beginning of a file shuts off complaints about unused functions
and function arguments in this file.  This is equivalent to using the
\*L\-v\*O  and \*L\-x\*O
options.
.LE
.PP
The \*Llint\*O utility
produces its first output on a per-source-file basis.
Complaints regarding included files are collected and printed
after all source files have been processed.
Finally, if the
\*L\-c\*O
option is not used,
information gathered from all input files is collected and checked for
consistency.
At this point,
if it is not clear whether a complaint stems from a given source file or from
one of its included files,
the source file name will be printed followed by a question mark.
.PP
The behavior of the
\*L\-c\*O
and the
\*L\-o\*O
options allows for incremental use of
\*Llint\*O
on a set of C source files.
Generally, one invokes
\*Llint\*O
once for each source file with the
\*L\-c\*O
option.
Each of these invocations produces a
\*L\.ln\*O
file which corresponds to the
\*L\.c\*O
file, and prints all messages that are about just that source file.
After all the source files have been separately run through
\*Llint\*O,
it is invoked once more (without the
\*L\-c\*O
option), listing all the
\*L\.ln\*O
files with the needed
\*L\-l\*Vx\*O
options.  This will print all the inter-file inconsistencies.
This scheme works well with
\*Lmake\*O(1);
it allows
\*Lmake\*O
to be used to
\*Llint\*O
only the source files that have been modified since
the last time the set of source files were run through
\*Llint\*O.
.SH RESTRICTIONS
.PP
\*Lexit\*O(2),
\*Lsetjmp\*O(3)
and other functions that do not return
are not understood; this causes various lies.
.SH FILES
.PP
.VL 11m
.LI "\*L/usr/ccs/lib\*O"
The directory where the lint libraries specified by the \*L\-l\*Vx\*O
option must exist.
.LI "\*L/usr/ccs/lib/lint\*O"
The directory where the lint library sources are kept.
.LI "\*L/usr/ccs/lib/cmplrs/cc/lint[12]\*O"
first and second passes of lint
.LI "\*Lllib\-lc\.ln\*O"
declarations for C Library functions
(binary format; source is in
\*Lllib\-lc.c\*O)
.LI "\*Lllib\-port\.ln\*O"
declarations for portable functions
(binary format; source is in
\*Lllib-port.c\*O)
.LI "\*Lllib\-lm\.ln\*O"
declarations for Math Library functions
(binary format; source is in
\*Lllib\-lm.c\*O)
.LI "\*Lllib\-lcrses\.ln\*O"
declarations for Curses Library functions
(binary format; source is in
\*Lllib\-lcrses.c\*O)
.LI "\*L*lint*\*O"
temporary files (default directory /usr/tmp)
.LE
.SH RELATED INFORMATION
.PP
\*Lcc\*O(1), \*Lcpp\*O(1), \*Lmake\*O(1)
.EQ
delim off
.EN

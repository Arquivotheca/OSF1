.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: nawk.1,v $ $Revision: 1.1.2.3 $ (DEC) $Date: 1993/12/07 23:19:17 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.TH nawk 1
.SH NAME
\*Lnawk\*O \- Finds lines in files and makes specified changes to them
.SH SYNOPSIS
.PP
.sS
\*Lnawk\*O
\*O[\*L-F \*Vere\*O]
[\*L-f\*Vprogram_file\*O]...
[\*L-v \*Vvar\*L=\*Vval\*O]...
[\*Vargument\*O]...
.PP
\*Lnawk\*O
\*O[\*L-F \*Vere\*O]
[\*L-v \*Vvar\*L=\*Vval\*O]...
[\*L'\*Vprogram_text\*L'\*O]
[\*Vargument\*O]...
.sE
.SH FLAGS
.PP
.VL 4m
.LI "\*L-F \*Vere\*O"
Defines \*Vere\*O (extended regular expression) as the value of the
input field separator before any input is
read. Using this option is comparable to assigning a value to the
builtin variable \*LFS\*O.
.LI "\*L-f \*Vprogram_file\*O"
Specifies the pathname (\*Vprogram_file\*O) of a file containing a
\*Lnawk\*O program. If multiple instances of this option are specified,
the concatenation of the files specified as \*Vprogram_file\*O in the
order specified is the \*Lnawk\*O program. The \*Lnawk\*O program
can alternatively be specified in the command line as a single
argument (\*Vprogram_text\*O).
.LI "\*L-v \*Vvar\*L=\*Vval\*O"
The \*Vvar\*L=\*Vval\*O argument is an
assignment operand that specifies a value
(\*Vval\*O) for a variable (\*Vvar\*O). The specified variable assignment
occurs
prior to executing the \*Lnawk\*O program, including the actions
associated with \*LBEGIN\*O patterns (if any are in the program).
Multiple occurrences of the \*L-v\*O
option can be specified on the \*Lnawk\*O command line.
.LE
.SH DESCRIPTION
.PP
.iX "nawk command"
.iX "finding" "lines in files"
.iX "files" "finding and changing lines"
.iX "changing" "lines in files"
.iX "pattern-matching"
The \*Lnawk\*O command executes programs written in the \*Lawk\*O
programming language, a powerful pattern matching utility for textual
data manipulation. An \*Lawk\*O program is a sequence of patterns and
corresponding actions that are carried out when a
pattern is read.
The \*Lnawk\*O command is a more powerful tool
for text manipulation than either \*Lsed\*O or \*Lgrep\*O.
The \*Lnawk\*O command
differs from the commands \*Lawk\*O and \*Lgawk\*O in that \*Lnawk\*O
conforms to the X/Open Portability Guide, Issue 4 (XPG4).
The \*Lnawk\*O
command is therefore capable of handling multibyte characters
that occur in coded character sets defined for some native languages.
.PP
The \*Lnawk\*O command:
.ML
.LI
Performs convenient numeric processing
.LI
Allows variables within actions
.LI
Allows general selection of patterns
.LI
Allows control flow in the actions
.LI
Does not require any compiling of programs
.LE
.PP
The pattern-matching and action \*Vstatements\*O of the
\*Lawk\*O language can be specified either on the
command line or in a program file.  In either case, the \*Lnawk\*O
command first reads all program statements.
.PP
If \*L-f\*O \*Vprogram_file\*O is not specified, the first operand
to \*Lnawk\*O is \*Vprogram_text\*O, delimited by single
quotation (\*L'\*O) characters.
.PP
Execution of a \*Lnawk\*O program starts by executing the actions
associated with all \*LBEGIN\*O patterns in the order they occur in the
program. Then, each operand in an input-file \*Vargument\*O
(or standard input if an input file is not specified)
is processed in turn by:
.ML
.LI
Reading input data
until a record separator is seen (a newline character by default)
.LI
Splitting the current record into fields using the current value of
\*LFS\*O
.LI
Evaluating each pattern in the program in the order of occurrence
.LI
Executing the action associated with each pattern that matches the
current record
.IP
The action for a matching pattern is executed before
evaluating subsequent patterns. The actions associated with all
\*LEND\*O patterns is executed in program order.
.LE
.PP
The following two types of \*Vargument\*O can be intermixed:
.VL 4m
.LI "\*Vinput_file\*O"
A pathname of a file that contains the input to be read, which is
matched against the set of patterns in the program. If no \*Vinput_file\*O
operands are specified, or if the \*Vinput_file\*O argument
is \*L-\*O, standard input is used.
.LI "\*Vvar\*L=\*Vval\*O"
The characters before the \*L=\*O represent the name of an \*Lawk\*O
variable. If that name is an \*Lawk\*O reserved word, the behavior is
undefined. The characters following the \*L=\*O are interpreted as if they
appeared in the \*Lnawk\*O program preceded and followed by a
double quotation (\*L"\*O) character, in other words, as a string value.
If the value is considered a
numeric string, the variable is assigned a numeric value.
Each such variable assignment occurs just prior to the processing of
the following \*Vprogram_file\*O, if any. Thus, an assignment before the first
\*Vprogram_file\*O argument is executed after the \*LBEGIN\*O actions (if any),
while an assignment after the last \*Vprogram_file\*O argument occurs before
the \*LEND\*O actions (if any). If there are no \*Vprogram_file\*O arguments,
assignments are executed before processing the standard input.
.LE
.PP
Refer to the EXAMPLES section for an example that demonstrates the results of
specifying a variable assignment as a flag argument or command argument
in different positions on the \*Lnawk\*O command line.
.PP
The \*Lnawk\*O command reads input data in the order stated
on the command line.  If you specify \*Vinput_file\*O as a \*L-\*O (dash)
or do not specify a filename, \*Lnawk\*O reads standard input.
.PP
The \*Lnawk\*O command reads input data from any of the following
sources:
.ML
.LI
Any \*Vinput_file\*O operands or their equivalents, which can be
affected by modifying
the \*Lawk\*O variables \*LARGV\*O and \*LARGC\*O
.LI
Standard input, in the absence of any \*Vinput_file\*O operands
.LI
Arguments to the \*Lgetline\*O function
.LE
.PP
Input files must be text files. When the builtin variable \*LRS\*O is set
to a value other than a newline character, \*Lnawk\*O supports records
 terminated with the specified separator up to \*LLINE_MAX\*O bytes.
.PP
Pattern-action statements on the command line are enclosed in ' (single
quote characters) to protect them from interpretation by the shell.
Consecutive pattern-action statements on the same command line are
separated by a \*L;\*O (semicolon), within one set of quote
delimiters.
---
	Consecutive pattern-action statements in a \*Lnawk\*O program file must
	be on separate lines.
---
.PP
When you expect \*Lnawk\*O to read standard input, and you want to assign
a value to a variable on the command line, you must specify \*L\-\*O after
the variable assignment.
.PP
By default, the \*Lnawk\*O command treats input lines as records, separated by
spaces, tabs, or a field separator you set with the \*LFS\*O
variable.  (When a space character is the field separator,
multiple spaces are recognized as a single separator.)
Fields are referenced as \*L$1\*O, \*L$2\*O, and so
on.  The reference \*L$0\*O specifies the entire record (by default, a line).
.SS Program Structure
.if n .PP
A \*Lnawk\*O program is composed of pairs of the form:
.if t .PP
.iS
\*Vpattern\*L { \*Vaction\*L }\*O
.iE
.PP
Either the pattern or the action (including the enclosing brace
characters) can be omitted.
.PP
If \*Vpattern\*O lacks a corresponding \*Vaction\*O,
\*Lnawk\*O writes the entire record that contains the pattern to
standard output.  If \*Vaction\*O lacks a corresponding
\*Vpattern\*O, \*Lnawk\*O applies the action to every record.
.SS Actions
.if n .PP
An \*Vaction\*O is a sequence of statements that follow C language syntax.
Any single statement can be replaced by a statement list enclosed in
braces. When \*Vstatement\*O is a list of statements, they must be separated by
newline characters or semicolons, and are executed sequentially in
order of appearance. Statements in the \*Lawk\*O language include:
.PP
.sS
\*Lbreak\*O
.PP
\*Lcontinue\*O
.PP
\*Ldelete\*O \*Varray\*O [ \*Vexpression\*O ]
.PP
\*Lexit\*O [ \*Vexpression\*O ]
.PP
\*Lfor \*L(\*Vexpression\*L;\*Vexpression\*L;\*Vexpression\*L) \*Vstatement\*O
.PP
\*Lfor \*L(\*Vvariable \*Lin \*Varray\*L) \*Vstatement\*O
.PP
\*Lif (\*Vexpression\*L) \*Vstatement\*O [ \*Lelse \*Vstatement\*O ]
.PP
\*Lnext\*O
.PP
\*Lprint\*O [ \*Vexpression_list\*O ] [ \*L>\*Vfile\*O | \*L>>\*Vfile\*O ]
.nL
[ \*L| \*Vcommand\*O ]
.PP
\*Lprintf \*Vformat[ \*L,\*Vexpression_list\*O ]
.nL
[ \*L>\*O\*Vfile\*O | \*L>>\*Vfile\*O  ] [ \*L| \*Vcommand\*O ]
.PP
\*Lprintf\*O \*Vformat\*O [ \*L,\*Vexpression_list\*L\ \*O ] [ \*L>\*Vfile\*O ]
.PP
\*Lwhile (\*Vexpression\*L) \*Vstatement\*O
.PP
\*Vvariable\*L=\*Vexpression\*O
.sE
.PP
Statements can end with a semicolon, a newline character, or
the right brace enclosing the action:
.PP
\*L{ \*O[ \*Vstatement\*O \&.\&.\&.\ ]\*L }\*O
.PP
Expressions can have string or numeric values and
are built using the operators \*L+\*O, \*L-\*O, \*L*\*O, \*L/\*O, \*L%\*O,
.\" and \*L^\*O (exponentiation), 
a space for string concatenation, and the
C operators \*L++\*O, \*L--\*O, \*L+=\*O, \*L-=\*O,
\*L*=\*O, \*L/=\*O, \*L\%=\*O, \*L^=\*O, \*L?:\*O, \*L>\*O, \*L>=\*O,
\*L<\*O, \*L<=\*O, \*L==\*O, \*L$\*O, \*L()\*O, \*L~\*O, \*L!~\*O,
\*Lin\*O, \*L||\*O, \*L&&\*O, \*L!\*O, and \*L!=\*O.
.PP
Because the actions process fields, input white space is not
preserved in the output.
.PP
The \*Vfile\*O and \*Vcommand\*O arguments in \*Lawk\*O
statements can be literal names or
expressions enclosed in double quotation (\*L"\*O) characters.
Identical string values in different statements refer to the same open file.
.PP
The \*Lprint\*O statement writes its arguments to standard output (or to a
\*Vfile\*O if \*L>\*O \*Vfile\*O or \*L>>\*O \*Vfile\*O is present),
separated by the current output field separator and terminated
by the current output record separator.
.PP
The \*Lprintf\*O statement formats its expression list according
to the format of the \*Lprintf\*O subroutine,
and writes it arguments to standard output,
separated by the output field separator and terminated by the output
record separator.  You can redirect the output into a file using the
\*Lprint \&.\&.\&. > \*Vfile\*O
or \*Lprintf( \&.\&.\&. ) > \*Vfile\*O statements.
.SS Variables
.if n .PP
Variables can be scalars, array elements (denoted \*Vx\*L[\*Vi\*L]\*O), or fields.
With the exception of function parameters, variables are not explicitly
declared.
.PP
Variable names can consist of uppercase and lowercase alphabetic letters,
the underscore character, the digits (\*L0\*O to \*L9\*O), and extended
 characters.  Variable names cannot begin with a digit. Field variables are
designated by \*L$\*O (dollar sign),
followed by a number or numerical expression. The
effect of the field number \*Lexpression\*O evaluating to anything
other than a non-negative integer is unspecified.
.PP
Variables are initialized to the null string.  Array subscripts can be
any string; they do not have to be numeric.  This allows for a form of
associative memory.  Enclose string constants in expressions
in double quotation (\*L"\*O) characters.
.PP
There are several variables with special meaning to \*Lnawk\*O.  They include:
.VL 4m
.LI "\*LARGC\*O"
The number of elements in the \*LARGV\*O array.
.LI "\*LARGV\*O"
An array of command line arguments, excluding options and the
\*Vprogram_file\*O arguments, numbered from zero to \*LARGC-1\*O.
.IP
The arguments in \*LARGV\*O can be modified or added to; \*LARGC\*O
can be altered. As each input file ends, \*Lnawk\*O treats the next
non-null element of \*LARGV\*O, up to and including the current value of
\*LARGC-1\*O, as the name of the next input file.  Therefore, setting
an element of \*LARGV\*O to null means that it is not be treated
as an input file.  When the element is the character \*L-\*O, standard
input is specified. When the element matches the format for an
assignment (variable=value), the element is treated as an assignment
rather than as the name of a \*Lnawk\*O input file.
.LI "\*LCONVFMT\*O"
The \*LPRINTF\*O format for converting numbers to strings (except for
output statements, where \*LOFMT\*O is used); \*L%.6g\*O by default.
.LI "\*LENVIRON\*O"
The variable  \*LENVIRON\*O is an array representing the value of the
environment. The indexes of the array are strings consisting of the
names of the environmental variables, and the value of each array
element is a string consisting of the value of that variable.
.LI "\*LFILENAME\*O"
The name of the current input file. Inside a \*LBEGIN\*O action, the
\*LFILENAME\*O value is undefined. Inside an \*LEND\*O action, the
the value is the name of the last input file processed.
.LI "\*LFNR\*O"
The ordinal number of the current input line (record) in the current
file.
Inside a \*LBEGIN\*O action, the value is zero.  Inside an \*LEND\*O
action, the value is the number of the last record processed in the last
file processed.
.LI "\*LFS\*O"
Input field separator (default is a space).
If it is a space, then any number of spaces and tabs can separate fields.
.LI "\*LNF\*O"
The number of fields in the current input line (record) with a limit
of 99.
.LI "\*LNR\*O"
The number of the current input line (record).
.LI "\*LOFS\*O"
The \*Lprint\*O statement output field separator (default is a space).
.LI "\*LORS\*O"
The \*Lprint\*O statement output record separator (default is a newline character).
.LI "\*LOFMT\*O"
The \*Lprintf\*O statement output format for converting numbers
to strings in output statements (default is \*L%.6g\*O).
.LI "\*LRLENGTH\*O"
The length of the string matched by the \*Lmatch\*O function.
.LI "\*LRS\*O"
Input record separator (default is a newline character).
.LI "\*LRSTART\*O"
The starting position of the string matched by the \*Lmatch\*O
function, numbering from 1. This is always equivalent to the return
value of the \*Lmatch\*O function.
.LI "\*LSUBSEP\*O"
The subscript separator string for multi-dimensional arrays.
.LE
.SS Functions
.if n .PP
.\"	Functions are defined at the position of a pattern-action statement,
.\"	as follows:
.\"	.iS
.\"	function foo(a, b, c) { ... ; return x }
.\"	\*O\c
.\"	.iE
.\"	.PP 
.\"	Arguments are passed by value if scalar and by reference if array
.\"	name; functions can be called recursively.  Arguments are local to
.\"	the function; all other variables are global.
.\"	.PP 
There are a variety of built-in functions that can be used in \*Lnawk\*O actions.
.SS Arithmetic Functions
.if n .PP
The arithmetic functions, except for \*Lint\*O, are based on the ISO C
standard. The behavior is undefined in cases where the ISO C standard
specifies that an error be returned or that the behavior is
undefined.
.VL 4m
.LI "\*Latan2 (\*Vy,x\*L)\*O"
Return arctangent of \*Vy/x.
.LI "\*Lcos \*L(\*Vx\*L)\*O"
Return cosine of \*Vx\*O, where \*Vx\*O is in radians.
.LI "\*Lsin (\*Vx\*L)\*O"
Return sine of \*Vx\*O where \*Vx\*O is in radians.
.LI "\*Lexp (\*Vx\*L)\*O"
Return the exponential factor of \*Vx\*O.
.LI "\*Llog (\*Vx\*L)\*O"
Return the natural logarithm of \*Vx\*O.
.LI "\*Lsqrt (\*Vx\*L)\*O"
Return the square root of \*Vx\*O.
.LI "\*Lint (\*Vx\*L)\*O"
Truncate its argument to an integer. It is truncated toward 0
when \*Vx\*L > 0\*O.
.LI "\*Lrand ()"
Return a random number \*Vn\*O, such that \*L0 < -\*Vn\*L > 1\*O.
.LI "\*Lsrand(\*O[\*Vexpr\*O]\*L)\*O"
Set the seed value for \*Lrand\*O to \*Vexpr\*O or use the time of day
if \*Vexpr\*O is omitted. The previous seed value is returned.
.LE
.SS String Functions
.if n .PP
.VL 4m
.LI "\*Lgsub(\*Vere\*L, \*Vrepl\*O[\*L, \*Vin\*O]\*L)\*O"
Behave like \*Lsub\*O (see below), except replace all
occurrences of the regular expression (like the \*Led\*O utility
global substitute) in \*L$0\*O or in the \*Vin\*O argument, when specified.
.LI "\*Lindex(\*Vs\*L, \*Vt\*L)\*O"
Return the position, in characters, numbering from 1, in string
\*Vs\*O where string \*Vt\*O first occurs, or zero if it does not
occur at all.
.LI "\*Llength[([)]\*O"
Return the length, in characters, of its argument taken as a string,
or of the whole record, \*L$0\*O, if there is no argument.
.LI "\*Lmatch(\*Vs\*L, \*Vere\*L)\*O"
Return the position, in characters, numbering from 1, in string \*Vs\*O where
the extended regular expression \*Vere\*O occurs, or zero if it does not occur
at all. \*LRSTART\*O is set to the starting position, zero if no match is
found; \*LRLENGTH\*O is set to the length of the matched string, -1 if no
match is found.
.LI "\*Lsplit(\*Vs\*L, \*Va\*L[\*Vfs\*L])\*O"
Split the string \*Vs\*O into array elements \*Va\*O[1],
\*Va\*O[2], .../\*Va\*O[\*Vn\*O], and return \*Vn\*O.
The separation is done with the
extended regular expression \*Vfs\*O or with the field separator \*LFS\*O if
\*Vfs\*O is not given. Each array element has a string value when
created. If the string assigned to any array element, with any occurrence of
the decimal point character from the current locale changed to a period
character, would be considered a numeric string, the array element
also has the numeric value of the numeric string. The effect of a null
string as the value of \*Vfs\*O is unspecified.
.LI "\*Lsprintf(\*Vfmt\*L, \*Vexpr\*L, \*Vexpr\*L, \*O\&...\*L)\*O"
Format the expressions according to the \*Lprintf\*O format given by \*Vfmt\*O
and return the resulting string.
.LI "\*Lsub(\*Vere\*L, \*Vrepl\*O[\*L, \*Vin\*O]\*L)\*O"
Substitute the string \*Vrepl\*O in place of the first instance of the
extended regular expression \*VERE\*O in string \*Vin\*O and return the number
of substitutions. An ampersand (&) appearing in the string \*Vrepl\*O
is replaced by the string from \*Vin\*O that matches the regular expression. For
each occurrence of backslash (\e) encountered when scanning the string
\*Vrepl\*O from beginning to end, the next character is taken literally and
loses its special meaning (for example, \e& is interpreted as a literal
ampersand character). Except for & and \e, it is unspecified what the special
meaning of any such character is. If \*Vin\*O is specified and it is not an
\*Vlvalue\*O, the behavior is undefined. If \*Vin\*O is omitted, \*Lnawk\*O
substitutes in the current record (\*L$0\*O).
.LI "\*Lsubstr(\*Vs, m\*O[\*L,\*Vn\*O]\*L)\*O"
Return the at most \*Vn\*O character substring of \*Vs\*O that begins at
position \*Vm\*O, numbering from 1. If \*Vn\*O is missing, the length of the
substring is limited by the length of the string \*Vs\*O.
.LI "\*Ltolower(\*Vs\*L)\*O"
Return a string based on the string \*Vs\*O. Each character in \*Vs\*O that is
an upper case letter specified to have a \*Ltolower\*O mapping by the
\*LLC_TYPE\*O category of the current locale is replaced in the returned
string by the lower case letter specified by the mapping. Other characters in
\*Vs\*O are unchanged in the returned string.
.LI "\*Ltoupper(\*Vs\*L)\*O"
Return a string based on the string \*Vs\*O. Each character in \*Vs\*O that is
a lower case letter specified to have a \*Ltoupper\*O mapping by the
\*LLC_TYPE\*O category of the current locale is replaced in the returned
string by the upper case letter specified by the mapping. Other characters in
\*Vs\*O are unchanged in the returned string.
.LE
.SS Input/Output and General Functions
.VL 3m
.LI "\*Lclose(expression)\*O"
Close the file or pipe opened by a \*Lprint\*O or \*Lprintf\*O statement or a
call to \*Lgetline\*O with the same string-valued \*Vexpression\*O.
.\" The limit  on the number of open \*Vexpression\*O arguments is 
.\" implementation-dependent.
If the close was successful, the function returns zero; otherwise, it returns
non-zero.
.LI "\*Lexpression | getline \*O[\*Vvar\*O]"
Read a record of input from a stream piped from the output of a command. The
stream is created if no stream is currently open with the value of
\*Vexpression\*O as its common name. The stream created is equivalent to
one created by a call to the \*Lpopen\*O function with the value of
\*Vexpression\*O as the \*Vcommand\*O argument and a value of \*Lr\*O as the
\*Vmode\*O argument. As long as the stream remains open, subsequent calls in
which \*Vexpression\*O evaluates to the same string read subsequent
records from the file. The stream will remain open until the \*Lclose\*O
function is called with an expression that evaluates to the same string value.
At that time, the stream will be closed as if by a call to the \*Lpclose\*O
function. If \*Vvar\*O is missing, \*L$0\*O and \*LNF\*O will be set; otherwise,
\*Vvar\*O will be set.
.LI "\*Lgetline\*O"
Set \*L$0\*O to the next input record from the current input file. This form of
\*Lgetline\*O sets the \*LNF, NR\*O, and \*LFNR\*O variables.
.LI "\*Lgetline \*Vvar\*O"
Set variable \*Vvar\*O to the next input record from the current input file.
This form of \*Lgetline\*O sets the \*LFNR\*O and \*LNR\*O variables.
.LI "\*Lgetline \*O[\*Vvar\*O] \*L< \*Vexpression\*O"
Read the next record of input from a named file. The \*Vexpression\*O is
evaluated to produce a string that is used as a full pathname. If the file of
that name is not currently open, it is opened. As long as the stream remains
open, subsequent calls in which \*Vexpression\*O evaluates to the same string
value, read subsequent records from the file. The file remains open until the
\*Lclose\*O function is called with an expression that evaluates to the same
string value. If \*Vvar\*O is missing, \*L$0\*O and \*LNF\*O are set;
otherwise, \*Vvar\*O is set.
.LI "\*Lsystem(\*Vexpression\*L)\*O"
Execute the command given by \*Vexpression\*O in a manner equivalent to the
\*Lsystem\*O function and return the exit status to the command.
.LE
.PP
All forms of \*Lgetline\*O return 1 for successful input, zero for end of
file, and -1 for an error.
.PP
The \*Lgetline\*O function sets \*L$0\*O to the next input
record from the current input file; \*Lgetline\*O < \*Vfile\*O
sets \*L$0\*O to the next record from file. The function
\*Lgetlione\*V x\*O sets variable \*Vx\*O instead. Finally,
\*Lcommand\*O| \*Lgetline\*O pipes the output of \*Lcommand\*O
into \*Lgetline\*O. Each call of \*Lgetline\*O returns the next
line of output from \*Lcommand\*O. In all cases, \*Lgetline\*O
returns 1 for a successful input, 0 (zero) for End-of-File, and
-1 for an error.
.PP
The \*Lgetline\*O function sets $0\*O to the next input record
from the current input file. The \*Lgetline\*O function returns
1 for a successful input and 0 for End-of-File.
.PP
Where strings are used as the name of a file or pipeline, the strings must be
textually identical. The terminology "same string value" implies that
"equivalent strings", even those that differ only by space characters,
represent different files.
.SS User-defined Functions
.if n .PP
The \*Vawk\*O language also provides user-defined functions. Such functions
can be defined as:
.PP
\*Lfunction \*Vname\*L(\*Vargs\*L,\*O\&...\*L) { \*Vstatements \*L}\*O
.PP
A function can be referred to anywhere in a \*Vnawk\*O program; in particular,
the function's use can precede the function definition.
The scope of a function is global.
.PP
Function arguments can be either scalars or arrays; the behavior is undefined
if an array name is passed as an argument that the function uses as a scalar,
or if a scalar expression is passed as an argument that the function uses as
an array. Function arguments are passed by value if scalar and by reference if
array name. Argument names are local to the function; all other variable names
are global. The same name will not be used as both an argument name and as the
name of a function or special \*Vawk\*O variable. The same name must not be
used both as a variable name with global scope and as the name of a function.
The same name must not be used within the same scope both as a scalar variable
and as an array.
.PP
The number of parameters in the function definition need not match the number
of parameters in the function call. Excess formal parameters can be used as
local variables. If fewer arguments are supplied in a function call than are
in the function definition, the extra parameters that are used in the function
body as scalars is initialized with a string value of the null string and a
numeric value of zero, and the extra parameters that are used in the function
body as arrays are initialized as empty arrays. If more arguments are supplied
in a function call than are in the function definition, the behavior is
undefined.
.PP
When invoking a function, no white space can be placed between the function
name and the opening parenthesis. Function calls can be nested and recursive
calls can be made upon functions. Upon return from any nested or recursive
function call, the values of all the calling function's parameters are
unchanged, except for array parameters passed by reference. The return
statement can be used to return a value.
.PP
.SS Patterns
.if n .PP
Patterns are arbitrary Boolean combinations of patterns and
relational expressions (the \*L!\*O, \*L|\*O, and
\*L\&&\*O operators and parentheses for grouping).  You must start
and end regular expressions with slashes.  You can use regular expressions
as described for \*Lgrep\*O, including the following special characters:
.VL 4m
.LI "\*L\(pl\*O"
One or more occurrences of the pattern.
.LI "\*L?\*O"
Zero or one occurrence of the pattern.
.\" Changed \(br (box rule) to |
.LI "\*L|\*O"
Either of two statements.
.LI "\*L( )\*O"
Grouping of expressions.
.LE
.PP
Isolated regular expressions in a pattern apply to the entire line.
Regular expressions can occur in relational expressions.
Any string (constant or variable) can be used as a regular expression,
except in the position of an isolated regular
expression in a pattern.
.PP
If two patterns are separated by a
comma, the action is performed on all lines between an occurrence of
the first pattern and the next occurrence of the second.
.\"	.PP 
.\"	Regular expressions can contain extended (multibyte) characters with
.\"	one exception: range constructs in character class specifications using
.\"	brackets cannot contain multibyte extended characters.  Individual
.\"	instances of extended characters can appear within brackets; however,
.\"	extended characters are treated as separate 1-byte characters.
.\"	.PP 
.\"	As in \*Legrep\*O, inclusion in ranges is determined by the collating
.\"	sequence as defined by the
.\"	current locale. The wildcard characters \*L*\*O, \*L+\*O, and
.\"	\*L?\*O match characters and character strings, not bytes.
.PP
There are two types of relational expressions that you can use.  The first
type has the form:
.PP
\*Vexpression  match_operator  pattern\*O
.PP
where \*Vmatch_operator\*O is either: \*L~\*O (for \*Econtains\*O) or
\*L!~\*O (for \*Edoes not contain\*O).
.PP
The second type has the form:
.PP
\*Vexpression  relational_operator  expression\*O
.PP
where \*Vrelational_operator\*O is any of the six C relational operators:
\*L<\*O, \*L>\*O, \*L<=\*O, \*L>=\*O, \*L==\*O,
and \*L!=\*O.  An \*Vexpression\*O can be an arithmetic expression, a
relational expression, or a Boolean combination of these.
.SS Special Patterns
.if n .PP
You can use the \*LBEGIN\*O and \*LEND\*O special patterns
to capture control before the first and after the last input line is
read, respectively.
\*LBEGIN\*O must be the first pattern; \*LEND\*O must be the last.
.if n .PP
Each \*LBEGIN\*O pattern is matched once and its associated action
executed before the first record of input is read and before command line
assignment is done. Each \*LEND\*O pattern is matched once and its
associated action executed after the last record of input has been read. These
two patterns have associated actions.
.if n .PP
\*LBEGIN\*O and \*LEND\*O do not combine with other patterns. Multiple
\*LBEGIN\*O and \*LEND\*O patterns are allowed. The actions associated with
the \*LBEGIN\*O patterns is executed in the order specified in the program, as
are the \*LEND\*O actions. An \*LEND\*O pattern can precede a \*LBEGIN\*O
pattern in a program.
.if n .PP
You have two ways to designate an extended regular expression other than white space to
separate fields.  You can use the \*L-F\*Vere\*O flag on the
command line, or you can assign a string with the expression to the
builtin variable \*LFS\*O.
Either action changes the field separator to \*Vere\*O.
.if n .PP
There are no explicit conversions between numbers and strings.  To
force an expression to be treated as a number, add \*L0\*O to it.
To force it to be treated as a string, append a null string
(\*L""\*O).
.SH EXAMPLES
.PP
.AL
.LI
To display the file lines that are longer than 72 bytes, enter:
.IP
.iS
% nawk  'length  >72'  chapter1
.iE
.IP
This command selects each line of the file \*Lchapter1\*O that is longer
than 72 bytes.  The command then writes these lines to
standard output because no action is specified.
.LI
To display all lines between the words \*Lstart\*O
and \*Lstop\*O, enter:
.IP
.iS
% nawk  '/start/,/stop/'  chapter1
.iE
.LI
To run a \*Lnawk\*O program (\*Lsum2\&.nawk\*O) that
processes a file (\*Lchapter1\*O), enter:
.IP
.iS
% nawk  -f  sum2.nawk  chapter1
.iE
.LI
The following \*Lnawk\*O program computes the sum
and average of the numbers in the second column of the input file:
.if n .IP
.oS
	{
		sum \(pl= $2
	}
END	{
	print "Sum: ", sum;
	print "Average:", sum/NR;
	}
.oE
.IP
The first action adds the value of the second field of each line to
the \*Lsum\*O variable.  The \*Lnawk\*O command initializes \*Lsum\*O,
and all variables, to 0 (zero) before starting.  The keyword \*LEND\*O
before the second action causes \*Lnawk\*O to perform that action
after all of the input file is read.  The \*LNR\*O variable,
which is used to calculate the average, is a special variable containing
the number of records (lines) that were read.
.LI
To print the names of the users who have the C shell as the
initial shell, enter:
.IP
.iS
% nawk  -F: '$7 ~ /csh/ {print $1}' /etc/passwd
.iE
.LI
To print the first two fields in reversed order, enter:
.IP
.iS
% nawk '{ print $2, $1 }'
.iE
.LI
The following \*Lnawk\*O program prints
the first two fields of the input file in reversed order, with
input fields separated by a comma, then adds
up the first column and prints the sum and average:
.if n .IP
.oS
BEGIN	{ FS = "," }
	{ print $2, $1}
	{ s += $1 }
END	{ print "sum is", s, "average is", s/NR }
.oE
.LI
The following example shows how command line assignments
synchronize with \*Lawk\*O program statements.
.IP
Consider the following set of \*Lawk\*O statements
that make up a program named \*Ltest_program\*O:
.if n .IP
.oS
BEGIN { if (RS == ":")
        print "Assignment in effect for BEGIN statements"
      }
      { if (RS == ":")
        print "Assignment in effect for middle statements"
      }
END   { if (RS == ":")
        print "Assignment in effect for END statements"
      }
.oE
.IP
Notice the different results that are produced by
different ways of assigning a value to \*LRS\*O on the \*Lnawk\*O
command line. The file \*Ltext_file\*O contains the line "Hello,
Hello".
.IP
.iS
% nawk -f test_program -v RS=: text_file
.iE
.oS
Assignment in effect for BEGIN statements
Assignment in effect for middle statements
Assignment in effect for END statements
.oE
.IP
.iS
% nawk -f test_program RS=: text_file
.iE
.oS
Assignment in effect for middle statements
Assignment in effect for END statements
.oE
.IP
.iS
% nawk -f test_program text_file RS=:
.iE
.oS
Assignment in effect for END statements
.oE
.LE
.SH RELATED INFORMATION
.PP
Commands:  \*Lawk\*O(1), \*Lgawk\*O(1), \*Lgrep\*O(1),
.\" /\*Legrep\*O(1)/\*Lfgrep\*O(1), 
\*Lsed\*O(1).
.PP
Functions:  \*Lprintf\*O(3).
.PP
\*EProgramming Support Tools\*O
.EQ
delim off
.EN

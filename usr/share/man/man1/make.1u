.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.TH make 1u
.SH NAME
\*Lmake\*O \- Maintains, updates, and regenerates groups of programs.
.SH SYNOPSIS
.PP
.sS
\*Lmake\*O [ \*L\-f \*Vmakefile\*O ] [ \*Vflags\*O ] \*Vnames\*O ]
.sE
.SH DESCRIPTION
.PP
.iX "make keyword" "ULTRIX habitat"
.iX "make command" "ULTRIX habitat"
.iX "program" "updating, ULTRIX habitat"
.iX "file" "updating, ULTRIX habitat"
.iX "ULTRIX habitat" "make"
.iX "makefile" "ULTRIX habitat"
.iX "file" "makefiles, ULTRIX habitat"
.iX "versions" "programs"
.iX "maintaining" "program groups"
.iX "program" "versions"
.iX "program" "maintenance"
.iX "updating" "program groups"
.PP
This \*Lmake\*O command is one of several versions available.  See the
RELATED INFORMATION section for references to information about other
versions of the command.  By default, the \*Lmake\*O(1) command is
invoked if you type the command name with no path.  To access the
\*Lmake\*O(1u) version described in this reference page, use the
following command path:
.PP
\*L/usr/opt/ultrix/usr/bin/make\*O
.PP
The
\*Lmake\*O program
is designed to simplify the maintenance of other programs.
This is the SYSTEM V version of the \*Lmake\*O
command with some Berkeley compatibility added.
.SH FLAGS
.PP
.VL 4m
.LI "\*L\-b\*O"
Compatibility mode for old makefiles.
.LI "\*L\-d\*O"
Debug mode.  Displays detailed information on files and times examined.
.LI "\*L\-e\*O"
Causes environment variables to override assignments within makefiles.
.LI "\*L\-f \*Vmakefile\*O"
Uses the specified description file name. A file name of \*L\-\*O
denotes the standard input.  The contents of the file specified as
\*Vmakefile\*O override the built-in rules.
.LI "\*L\-i\*O"
Ignores error codes returned by invoked commands.  This mode is
entered if the special target name .IGNORE appears in the description file.
.LI "\*L\-k\*O"
Stops work on the current entry, but continues on other branches
that do not depend on that entry.
.LI "\*L\-n\*O"
No execute mode.  Displays commands, but does not execute them.
Even lines beginning with an at sign (@) are displayed.
.LI "\*L\-p\*O"
Displays the complete set of macro definitions and target descriptions.
.LI "\*L\-q\*O"
Question mode.  Returns a zero or nonzero status code depending on
whether the target file is or is not up to date.
.LI "\*L\-r\*O"
Does not use the built-in rules.
.LI "\*L\-s\*O"
Silent mode.  Suppresses the display of command lines before executing.
This mode is also entered if the special target name .SILENT
appears in the description file.
.LI "\*L\-S\*O"
Abandons work on the current entry if it fails; the opposite of the
\*L\-k\*O flag.  If both flags are specified, the last one specified
on the command line is used.
.LI "\*L\-t\*O"
Touches target files (causing them to be up to date) rather than
issuing the usual commands.
.LE
.SH SPECIAL NAMES
.PP
.VL 10m
.LI "\&.DEFAULT"
If a file must be made but there are no explicit commands or relevant
built-in rules, the commands associated with the name .DEFAULT are
used if it exists.
.LI "\&.PRECIOUS"
Dependents of this target are not removed when quit or interrupt is hit.
.LI "\&.SILENT"
Same effect as the \*L\-s\*O flag.
.LI "\&.IGNORE"
Same effect as the \*L\-i\*O flag.
.LI "\&.SUFFIXES"
Dependencies of the .SUFFIXES special target are added to the table of
known suffixes.
.LE
.SH DISCUSSION
.PP
The \*Lmake\*O program executes commands in \*Vmakefile\*O to update
one or more target \*Vnames\*O.  The \*Vname\*O argument is typically
a program.  If no \*L\-f\*O flag is present, \*Lmakefile\*O, \*LMakefile\*O,
\*Ls.makefile\*O, and \*Ls.Makefile\*O are tried in order.
If \*Vmakefile\*O is \*L\-\*O, the standard input is taken.
You can specify more than one \*L\-f\*O \*Vmakefile\*O argument.
.PP
The \*Lmake\*O program updates a target only if its dependents are
newer than the target.  All prerequisite files of a target are added
recursively to the list of targets.  Missing files are deemed to be
out of date.
.PP
The \*Vmakefile\*O argument contains a sequence of entries that
specify dependencies.  The first line of an entry is a blank-separated,
non-null list of targets, then a colon (:),
then a (possibly null) list of prerequisite files or dependencies.
Text following a semicolon (;) and all following lines that begin with
a tab are shell commands to be executed to update the target.
The first line that does not begin with a tab or number sign (#) begins
a new dependency or macro definition.  Shell commands can be continued
across lines with the backslash followed by a new-line (RET) sequence.
Everything printed by \*Lmake\*O (except the initial tab) is passed
directly to the shell.  For example:
.PP
.oS
echo a\\
b
.oE
.PP
These entries produce the following:
.PP
.oS
ab
.oE
.PP
This output is exactly the same as what would have been produced by the shell.
.PP
The Number sign (#) and new-line surround comments.
.PP
The following \*Vmakefile\*O says that \*Lpgm\*O depends on two files
\*La.o\*O and \*Lb.o\*O, and that they in turn depend on their corresponding
source files (\*La.c\*O and \*Lb.c\*O) and a common file \*Lincl.h\*O:
.PP
.oS
pgm: a.o b.o
   cc a.o b.o \-o pgm
a.o: incl.h a.c
   cc \-c a.c
b.o: incl.h b.c
   cc \-c b.c
.oE
.PP
.PP
Command lines are executed one at a time, each by its own shell.
The first one or two characters in a command can be the following:
\*L\-\*O, \*L@\*O, \*L\-@\*O, or \*L@\-\*O.
If @ is present, printing of the command is suppressed.
If \*L\-\*O is present, \*Lmake\*O ignores an error.
A line is printed when it is executed unless the \*L\-s\*O
flag is present, or the entry \*L.SILENT:\*O is in \*Vmakefile\*O,
or unless the initial character sequence contains a @.  The \*L\-n\*O
flag specifies printing without execution.  However, if the
command line has the string \*L$(MAKE)\*O in it, the line is
always executed.  (See the discussion of the MAKEFLAGS macro under
the Environment section).  The \*L\-t\*O (touch) flag updates the
modified date of a file without executing any commands.
.PP
Commands returning nonzero status normally terminate \*Lmake\*O.
If the \*L\-i\*O flag is present, or the entry \*L.IGNORE:\*O appears in
\*Vmakefile\*O, or the initial character sequence of the command
contains \*L\-\*O, the error is ignored.  If the \*L\-k\*O flag is
present, work stops on the current entry, but continues on other branches
that do not depend on that entry.
.PP
The \*L\-b\*O flag allows old makefiles (those written for the old
version of \*Lmake\*O) to run without errors.  The difference between the
old version of \*Lmake\*O and this version is that this version requires
all dependency lines to have a (possibly null or implicit) command
associated with them.  The previous version of \*Lmake\*O assumed,
if no command was specified explicitly, that the command was null.
.PP
Interrupt and quit cause the target to be deleted unless the target
is a dependent of the special name \*L.PRECIOUS\*O.
.SS Environment
The environment is always read by \*Lmake\*O.
All variables are assumed to be macro definitions and processed as such.
The \*L\-e\*O flag causes
the environment to override the macro assignments in a makefile.
.PP
The \*Lmake\*O command operates in three compatibility modes.  The type
of mode is determined by value of the PROG_ENV environment variable and by
the way that \*Lmake\*O is executed.  The PROG_ENV variable has three
valid values:
.ML
.LI
BSD
.LI
POSIX
.LI
SYSTEM_FIVE
.LE
.PP
In BSD mode, \*Lmake\*O executes with Berkeley compatibility.  This
means that \*L/bin/sh\*O is always used as the command interpreter
regardless of the value of SHELL, and the commands are echoed to
standard out without a prefixed <tab>.
.PP
In POSIX mode, \*Lmake\*O executes with POSIX compatibility, such that
the SHELL environment variable is always ignored, SHELL is always
overridden by MAKESHELL, the shell is always used to execute commands,
and commands are echoed to standard out with a prefixed <tab>.
.\" .PP
.\" SYSTEM_FIVE mode causes \*Lmake\*O to run with SYSTEM V compatibility 
.\" such that SHELL is used to execute commands and commands are echoed to 
.\" standard out with a prefixed <tab>.
.\" .PP
.\" For all modes, SHELL has a default value of \*L/bin/sh\*O.  When \*Lmake\*O
.\" is executed with the command name \*Ls5make\*O,
.\" it always executes in SYSTEM_FIVE mode and ignores the environment
.\" variable PROG_ENV.
.PP
The MAKEFLAGS environment variable is processed by \*Lmake\*O as containing
any legal input flag (except \*L\-f\*O, \*L\-p\*O, and \*L\-d\*O)
defined for the command line.  Further, upon invocation, \*Lmake\*O
invents the variable if it is not in the environment, puts the current
flags into it, and passes it on to invocations of commands.
Thus, MAKEFLAGS always contains the current input flags.
This proves very useful for super-makes.  In fact, as noted above, when the
\*L\-n\*O flag is used, the command $(MAKE) is executed anyway.  Hence,
one can perform a \*Lmake\*O \*L\-n\*O recursively on a whole software
system to see what would have been executed.  This is because the \*L\-n\*O
is put in MAKEFLAGS and passed to further invocations of $(MAKE).
This is one way of debugging all of the makefiles for a software project
without actually doing anything.
.SS Macros
Macros can be defined in four different ways.  Some macros are defined
by default by \*Lmake\*O internally.  All environment variables are
assumed to be macro definitions and macros can be defined in the makefile
as well as on the \*Lmake\*O command line.  By default, the internal
default macros are overridden by environment variables, macros defined
in the makefile override environment variables and macros defined on
the command line override macros defined in the makefile.  The \*L\-e\*O
flag changes this such that environment variables override macros defined
in the makefile.
.PP
Entries of the form \*Lstring1\*O = \*Lstring2\*O are macro definitions.
The \*Lstring2\*O is defined as all characters up to a comment character
or an unescaped new-line.  Subsequent appearances of
\*L$( \*Vstring1\*O [\*L: \*Vsubst1\*O \*O= \*O[ \*Vsubst2 \*O] ] \*L)\*O
are replaced by \*Vstring2\*O.  The parentheses are optional if a
single character macro name is used and there is no substitute sequence.
The optional \*L: \*Vsubst1i\*L = \*Vsubst2\*O is a substitute sequence.
If it is specified, all non-overlapping occurrences of \*Vsubst1\*O in the
named macro are replaced by \*Vsubst2\*O.  The occurrence of
\*Vsubst1\*O must be a suffix at the end of the word \*Vstring1\*O.
Strings (for the purposes of this type of substitution) are delimited by
blanks, tabs, new-line characters, and beginnings of lines.
An example of the use of the substitute sequence is shown in the Libraries
section.
.PP
The MACHINE macro is defined by \*Lmake\*O to allow for machine
independent makefiles.  The default string for MACHINE is "vax", "mips", or
"alpha", according to which machine the application is running on.
You can redefine MACHINE to one of the other strings for cross development
work.
.SS Internal Macros
There are five internally maintained macros which are useful
for writing rules for building targets.
.VL 4m
.LI "\*L$*\*O"
The macro \*L$*\*O stands for the file name part of the current
dependent with the suffix deleted.  It is evaluated only for inference rules.
.LI "\*L$@\*O"
The \*L$@\*O macro stands for the full target name of the current target.
It is evaluated only for explicitly named dependencies.
.LI "\*L$<\*O"
The \*L$<\*O macro is only evaluated for inference rules or the .DEFAULT rule.
It is the module which is out-of-date with respect to the target (that is,
the manufactured dependent file name).
Thus, in the \*L.c.o\*O rule, the \*L$<\*O macro would evaluate to
the \*L.c\*O file. Here are two examples for making optimized \*L.o\*O files
from \*L.c\*O files:
.IP
.oS
\&.c.o:
cc \-c \-O $\(**.c

\&.c.o:
cc \-c \-O $<
.oE
.LI "\*L$?\*O"
The \*L$?\*O macro is evaluated when explicit rules from the makefile
are evaluated.  It is the list of prerequisites that are out of date
with respect to the target; essentially, those modules which must be rebuilt.
.LI "\*L$%\*O"
The \*L$%\*O macro is only evaluated when the target is an
archive library member of the form \*Llib(file.o)\*O.  In this case,
\*L$@\*O evaluates to \*Llib\*O and \*L$%\*O evaluates to the
library member, \*Lfile.o\*O.
.LE
.PP
Four of the five macros can have alternative forms.
When an upper case \*LD\*O or \*LF\*O is appended to any of the four
macros, the meaning is changed to directory part for \*LD\*O
and file part for \*LF\*O.  Thus, \*L$(@D)\*O refers to the directory
part of the string \*L$@\*O.  If there is no directory part,
\&\*L./\*O is generated.  The only macro excluded from this
alternative form is \*L$?\*O.  The reasons for this are debatable.
.SS Suffixes
Certain names (for instance, those ending with \*L.o\*O) have
prerequisites such as \*L.c\*O, \*L.s\*O, which can be inferred.
If no update commands for such a file appear in \*Vmakefile\*O,
and if an inferable prerequisite exists, that prerequisite is
compiled to make the target.  In this case, \*Lmake\*O has
inference rules that allow building files from other files by examining
the suffixes and determining an appropriate inference rule to use.
The current default inference rules are:
.PP
.iS
\&.c \|.c~ \|.sh \|.sh~ \|.c.o \|.c~.o \|.c~.c \|.s.o \|.s~.o \|.y.o
\|.y~.o \|.l.o \|.l~.o \|.y.c \|.y~.c \|.l.c \|.c.a \|.c~.a \|.s~.a \|.h~.h
.iE
.PP
The internal rules for \*Lmake\*O are contained in the source file
\*Lrules.c\*O for the \*Lmake\*O program.  These rules can be locally modified.
To print out the rules compiled into \*Lmake\*O in a form suitable for
recompilation, the following command is used from \*L/bin/sh\*O:
.PP
.iS
make \-fp \- 2>/dev/null </dev/null
.iE
.PP
The only peculiarity in this output is the (null) string which \*Lprintf\*O(3)
prints when handed a null string.
.PP
A tilde in the above rules refers to an SCCS file.  Thus, the
rule \*L.c~.o\*O would transform an SCCS C source file into an
object file (\*L.o\*O).  Because the \*Ls.\*O of the SCCS files is a prefix,
it is incompatible with the \*Lmake\*O suffix point-of-view.  Hence,
the tilde is a way of changing any file reference into an SCCS file reference.
.PP
A rule with only one suffix (that is, \*L.c:\*O) is the definition of how
to build \*Vx\*O from \*Vx\*O\*L.c\*O.  In effect, the other suffix is null.
This is useful for building targets from only one source file (for
example, shell procedures, simple C programs).
.PP
Additional suffixes are given as the dependency list for .SUFFIXES.
Order is significant; the first possible name for which both
a file and a rule exist is inferred as a prerequisite.
The default list is:
.PP
.oS
\&.SUFFIXES: .o .c .y .l .s
.oE
.PP
Here again, the above command for printing the internal rules
display the list of suffixes implemented on the current machine.
Multiple suffix lists accumulate; .SUFFIXES: with no dependencies
clears the list of suffixes.
.SS Inference Rules
The first example can be done more briefly:
.PP
.oS
pgm: a.o b.o
   cc a.o b.o \-o pgm
a.o b.o: incl.h
.oE
.PP
This is because \*Lmake\*O has a set of internal rules for building
files.  The user may add rules to this list by simply putting them in the
\*Vmakefile\*O.
.PP
Certain macros are used by the default inference rules to permit
the inclusion of optional matter in any resulting commands.
For example, CFLAGS, LFLAGS, and YFLAGS are used for compiler flags to
\*Lcc\*O(1), \*Llex\*O(1), and \*Lyacc\*O(1), respectively.
Again, the previous method for examining the current rules is recommended.
.PP
The inference of prerequisites can be controlled.  The rule to create
a file with suffix \*L.o\*O from a file with suffix \*L.c\*O
is specified as an entry with \*L.c.o:\*O as the target and no dependents.
Shell commands associated with the target define the
rule for making a \*L.o\*O file from a \*L.c\*O file.
Any target that has no slashes in it and starts with a dot
is identified as a rule and not a true target.
.SS Libraries
If a target or dependency name contains parentheses, it is
assumed to be an archive library, the string within parentheses
referring to a member within the library.
Thus \*Llib(file.o)\*O and \*L$(\s-1LIB\s+1)(file.o)\*O both refer to
an archive library which contains \*Lfile.o\*O. (This assumes
the LIB macro has been previously defined.)
The expression \*L$(\s-1LIB\s+1)(file1.o file2.o)\*O is not legal.
Rules pertaining to archive libraries have the
form \*L\&. \s-1\*VXX\*L\s+1 \&.a\*O
where the \*VXX\*O is the suffix from which the archive member is to be made.
An unfortunate byproduct of the current implementation requires the
\*VXX\*O to be different from the suffix of the archive member.
Thus, one cannot have \*Llib(file.o)\*O depend upon \*Lfile.o\*O explicitly.
The most common use of the archive interface follows.
Here, it is assumed that the source files are all C type source:
.PP
.oS
lib: lib(file1.o) lib(file2.o) lib(file3.o)
   @echo lib is now up-to-date
\&.c.a:
   $(CC) \-c $(CFLAGS1) $<
   ar rv $@ $*.o
   rm \-f $*.o
.oE
.PP
In fact, the \*L.c.a\*O rule listed above is built into \*Lmake\*O and
is unnecessary in this example.
A more interesting, but more limited example of an archive library
maintenance construction follows:
.PP
.oS
lib: lib(file1.o) lib(file2.o) lib(file3.o)
   $(CC) \-c $(CFLAGS) $(?:.o=.c)
   ar rv lib $?
   rm $?
   @echo lib is now up-to-date
\&.c.a:;
.oE
.PP
Here the substitution mode of the macro expansions is used.  The \*L$?\*O
list is defined to be the set of object file names (inside \*Llib\*O) whose C
source files are out-of-date.  The substitution mode translates
the \*L.o\*O to \*L.c\*O.  (Unfortunately, one cannot transform to \*L.c~\*O.)
Note also, the disabling of the \&\*L.c.a:\*O rule, which would have
created each object file, one by one.  This particular construct speeds up
archive library maintenance considerably.
This type of construct becomes very cumbersome if the archive library
contains a mix of assembly programs and C programs.
.SH RESTRICTIONS
.PP
.ML
.LI
Some commands return non-zero status inappropriately.  Use \*L\-i\*O
to overcome the difficulty.
.LI
File names with the characters \*L=\*O, \*L:\*O, or \*L@\*O do not work.
.LI
Commands that are directly executed by the shell, notably \*Lcd\*O(1),
are ineffectual across new-lines in \*Lmake\*O.
.LI
The syntax \*L(lib(file1.o file2.o file3.o)\*O is illegal.
.LI
You cannot build \*Llib(file.o)\*O from \*Lfile.o\*O.
The macro \*L$(a:.o=.c~)\*O does not work.
.LE
.SH FILES
.PP
.VL 10m
.LI "makefile"
.LI "Makefile"
.LI "s.makefile"
.LI "s.Makefile"
.LE
.SH RELATED INFORMATION
.PP
\*Lcc\*O(1), \*Lcd\*O(1), \*Llex\*O(1), \*Lmake\*O(1),
\*Lmake\*O(1p), \*Lsh\*O(1), \*Lyacc\*O(1)
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: ctags.1,v $ $Revision: 3.2.5.2 $ (DEC) $Date: 1993/12/21 19:04:05 $
.\"
.\" 
...\"
...\" (c) Copyright 1990, 1991, 1992 OPEN SOFTWARE FOUNDATION, INC.
...\" ALL RIGHTS RESERVED
...\" OSF/1 1.1
...\"build rmifdef
.\" Begin Digital-specific information
.\" Substituted the contents of the OSF/1 Rel1.1 manpage for the
.\" Rel1.0 version to take advantage of the additional flag descriptions
.\" for -d and -v in response to QAR 8430.
.\" End Digital-specific information
.\"
.TH ctags 1
.SH NAME
\*Lctags\*O \- Makes a tags file for source file objects.
.SH SYNOPSIS
.PP
.sS
\*Lctags\*O
\*O[\*L\(hyaBdFtuvw\*O]
\*O[\*L\(hyx\*O\ |\ \*L\(hyf\ \*Vtags_file]
\*Vfile\*O\ \&.\&.\&.
.sE
.PP
The \*Lctags\*O command makes a tags file for \*Lex\*O and
\*Lvi\*O editors from the specified C, Pascal, FORTRAN,
\*Lyacc\*O, \*Llex\*O, and LISP source files.
A tags file gives the locations of specified objects (in this
case functions and type definitions) in a group of files.
.SH FLAGS
.PP
.VL 4m
.LI "\*L\-a\*O"
Adds item(s) to the tags file. Sorts the tags file unless the
\*L\-n\*O flag is used. This option can be very slow for large tags
files. For faster sorting, specify the \*L\-a\*O flag with the \*L\-n\*O flag
to cause the sort to be disabled. The tags file produced in this case must be
sorted before it is usable.
.LI "\*L\-f \*Vtags_file\*O"
Creates a tags file with the name specified by \*Vtags_file\*O.
.LI "\*L\-B\*O"
Uses backward searching pattern (?\&.\&.\&.?).
.LI "\*L\-d\*O"
Creates tags for \*L#define\*O directives that do not take arguments.
\*L#define\*O directives that take arguments are tagged automatically.
.LI "\*L\-F\*O"
Uses forward searching pattern (/\&.\&.\&./) (default).
.LI "\*L\-n\*O"
Disable the default sort from the \*L\-a\*O and \*L\-u\*O
options. This flag is included to improve the speed of these
operations, but produces a tags file which
will not operate correctly unless sorted. The command:
.sp
.iS
sort -o tags tags
.iE
will sort the tags file back into itself.
.LI "\*L\-t\*O"
Creates tags for type definitions (\*Ltypedef\*O),
and for \*Lstruct\*O, \*Lunion\*O,
and \*Lenum\*O declarations.
.LI "\*L\-u\*O"
Updates the specified files in tags; that is, all references to them
are deleted, and the new values are added to the file. The tags file
is sorted. This flag may be slow, so it is usually faster to simply
rebuild the tags file. For faster operation, use the \*L\-n\*O flag
also, then sort the resultant tags file after \*Lctags\*O is finished.
.LI "\*L\-v\*O"
Produces an index of the form expected by \*Lvgrind\*O on the
standard output.  This listing contains the
function name, filename, and page number (assuming 64-line pages).
Because the output will be sorted according to
the current collating sequence as
defined by the value of the \*LLC_COLLATE\*O environment variable,
it may be desirable to run the
output through \*Lsort -f\*O.  Sample use:
.sp
.iS
ctags -v files | sort -f > index
vgrind -x index
\*O\c
.iE
.LI "\*L\-w\*O"
Suppresses warning diagnostics.
.LI "\*L\-x\*O"
Causes \*Lctags\*O to display a list of object names, the line
number and filename on which each is defined, as well as the text of
that line.  This provides a simple index,
which can be printed out as an offline readable function index.
If you specify this flag, \*Lctags\*O does not build a tags file,
but writes to standard output.
.LE
.SH DESCRIPTION
.PP
.iX "ctags command"
.iX "tags file"
Each line of the tags file
contains the object name, the file in which it is defined, and an
address specification for the object definition.  Functions are searched
with a pattern and type definitions with a line number.
Specifiers are given in separate fields on the line,
separated by spaces or tabs.  Using the tags file, \*Lex\*O and
\*Lvi\*O can quickly find these object definitions.
.PP
If a filename ends in \*L.c\*O or \*L.h\*O, it is assumed
to be a C source file and is searched for C routine and macro
definitions.
Files whose names end in \*L\&.y\*O are assumed to be
\*Lyacc\*O source files.  Files whose names end in \*L\&.l\*O
are assumed to be either LISP files (if their first nonspace character
is ; (semicolon), ( (open parenthesis), or [ (open bracket))
or \*Llex\*O files otherwise.
Others are first examined to see if they contain any
Pascal or FORTRAN routine definitions; if not, they are processed again
for C definitions.
.PP
The tag \*Lmain\*O is treated specially in C programs.  The tag
formed is created by prefixing \*LM\*O to the filename, removing a
trailing \*L\&.c\*O (if any), and removing the leading pathname
components.  This makes use of \*Lctags\*O practical in directories
with more than one program.
.SH RESTRICTIONS
.PP
Recognition of functions, subroutines, and procedures for FORTRAN and
Pascal does not deal with block structure.  Therefore, you cannot have
two Pascal procedures in different blocks with the same name.
.PP
The \*Lctags\*O command does not know about \*Lifdef\*Os.
.SH FILES
.PP
.VL
.LI "\*Ltags\*O"
Default tags file.  Use the \*L-f\*O flag to specify another filename.
.LE
.SH RELATED INFORMATION
.PP
Commands:  \*Lex\*O(1), \*Llex\*O(1), \*Lsort\*O(1)
\*Lvi\*O(1)/\*Lvedit\*O(1)/\*Lview\*O(1), \*Lyacc\*O(1).
.\" #ifdef LICENSEE
.\" .PP 
.\" The \*Lvgrind\*O command may be available on your system, but is not provided
.\" with OSF/1.
.\" #endif /* LICENSEE */
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: indent.1,v $ $Revision: 1.1.2.3 $ (DEC) $Date: 1992/12/14 18:00:04 $
.\"
.TH indent 1
.SH NAME
.PP
\*Lindent\*O - indent and format C program source
.SH SYNOPSIS
.PP
\*Lindent\*O
\*Vinput\*O
[\|\*Voutput\*O\|] [\|\*Vflags\*O\|]
.SH DESCRIPTION
.PP
.iX "indent command"
.iX "C program" "formatting"
The \*Lindent\*O command is intended primarily as a C program
formatter.
Specifically, \*Lindent\*O indents code lines, aligns comments,
inserts spaces around operators where necessary and breaks up
declaration lists as in ``int a,b,c;''.
.PP
The \*Lindent\*O command does not break up long statements to make
them fit within the maximum line length, but it does flag lines that
are too long.
Lines are broken so that each statement starts a new line, and braces
appear alone on a line.
Also, an attempt is made to line up identifiers in declarations.
.PP
The \*Vflags\*O that can be specified follow.
They can appear before or after the file names.
If the \*Voutput\*O file is omitted, the formatted file is written
back into \*Vinput\*O and a ``backup'' copy of \*Vinput\*O is written
in the current directory.
If \*Vinput\*O is named \*L/blah/blah/file\*O the backup file is
named \*L\&.Bfile\*O.
If \*Voutput\*O is specified, \*Lindent\*O checks to make sure it
differs from \*Vinput\*O.
.SH FLAGS
.PP
The following flags are used to control the formatting style imposed
by \*Lindent\*O:
.VL 4m
.LI "\*L\-l\*Vnnn\*O"
Determines maximum length of output line.
The default is 75.
.LI "\*L\-c\*Vnnn\*O"
Determines column in which comments start.
The default is 33.
.LI "\*L\-cd\*Vnnn\*O"
Determines column in which comments on declarations start.
The default is for these comments to start in the same column as other
comments.
.LI "\*L\-i\*Vnnn\*O"
Determines number of spaces for one indentation level.
The default is 4.
.LI "\*L\-\|dj,\-\|ndj\*O"
Causes declarations to be left justified;
\*L\-ndj\*O causes them to be indented the same as code.
The default is \*L\-ndj\*O.
.LI "\*L\-\|v,\-\|nv\*O"
The \*Lv\*O flag turns on ``verbose'' mode;
\*L\-nv\*O turns it off.  When in verbose mode,
\*Lindent\*O reports when it
splits one line of input into two or more lines of output,
and it gives some size statistics at completion.
The default is \*L \-nv .\*O
.LI "\*L\-\|bc,\-\|nbc\*O"
Forces newline after each comma in a declaration.
The \*L\-nbc\*O flag turns off this option.  The default is \*L\-bc\*O.
.LI "\*L\-d\*Vnnn\*O"
Controls the placement of comments which are not to the right of code.
Specifying \*L\-d2\*O means that such comments are placed two
indentation levels to the left of code.
The default \*L\-d0\*O lines up these comments with the code.
See the section on comment indentation below.
.LI "\*L\-\|br,\-\|bl\*O"
Specifying \*L\-bl\*O causes
complex statements to be lined up in a space order.  For example:
.oS

   if (...)
   {
       code
   }

.oE
Specifying \*L\-br\*O (the default) makes them look like this:
.oS

   if (...) {
       code
   }

.oE
.LE
.PP
You can set up your own ``profile'' of defaults to \*Lindent\*O by
creating the file ``.indent.pro'' in your login directory and
including whatever switches you like.
.iX "indent command" "setting default formatting"
If \*Lindent\*O is run and a profile file exists, then it is read to
set up the program's defaults.
Switches on the command line, though, always override profile switches.
The profile file must be a single line of not more than 127 characters.
The switches should be separated on the line by spaces or tabs.
.SS "\*LMultiline expressions\*O"
.iX "indent command" "multiline expressions"
The \*Lindent\*O command does not break up complicated expressions
that extend over multiple lines.
However, it usually indents such expressions that have already been
broken up correctly.
Such an expression might look like the following:
.oS

x =
    (
        (Arbitrary parenthesized expression)
        +
        (
            (Parenthesized expression)
            *
            (Parenthesized expression)
        )
    );

.oE
.SS "\*LComments\*O"
.iX "indent command" "comments"
The \*Lindent\*O command recognizes the four following kinds of comments:
.AL
.LI
Straight text.
.LI
``Box'' comments.
.LI
UNIX-style comments.
.LI
Comments that should be passed through unchanged.
.LE
.PP
The comments are interpreted as follows:
.VL 8m
.LI "``Box'' comments"
The \*Lindent\*O command assumes that any comment with a dash
immediately after the start of comment (i.e. ``/*\-'') is a comment
surrounded by a box of stars.
Each line of such a comment is left unchanged, except that the first
non-blank character of each successive line is lined up with the
beginning slash of the first line.
Box comments are indented, as described below.
.LI "``Unix-style'' comments"
This type of section header is used extensively in the UNIX system
source.
If the start  of comment (``/*'') appears on a line by itself,
\*Lindent\*O assumes that it is a UNIX-style comment.
These are treated similarly to box comments, except that the first
non-blank character on each line is lined up with the `*' of the ``/*''.
.LI "Unchanged comments"
Any comment which starts in column 1 is left completely unchanged.
This is intended primarily for documentation header pages.
The check for unchanged comments is made before the check for
UNIX-style comments.
.LI "Straight text"
All other comments are treated as straight text.
The \*Lindent\*O command fits as many words (separated by blanks, tabs, or new
lines) on a line as possible.  Straight text comments are indented.
.LE
.SS "\*LComment indentation\*O"
Box, UNIX-style, and straight text comments may be indented.
If a comment is on a line with code it is started in the ``comment
column,'' which is set by the \*L\-cnnn\*O command line parameter.
Otherwise, the comment is started at \*Vnnn\*O indentation levels less
than where code is currently being placed, where \*Vnnn\*O is
specified by the \*L\-dnnn\*O command line parameter.
(Indented comments are never placed in column 1.)
If the code on a line extends past the comment column, the comment is
moved to the next line.
.SH RESTRICTIONS
.PP
.iX "indent command" "restricted"
Does not know how to format ``long'' declarations.
.SH ERRORS
.PP
.iX "indent command" "diagnostics"
Diagnostic error messages, mostly to tell that a text line has been
broken or is too long for the output line.
.SH FILES
.PP
.VL 12m
.LI "\*L.indent.pro\*O"
Profile file
.LE
.SH RELATED INFORMATION
.PP
Commands:
\*Lcb\*O(1)
.EQ
delim off
.EN

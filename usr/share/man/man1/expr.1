.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: expr.1,v $ $Revision: 3.2.5.2 $ (DEC) $Date: 1993/11/15 20:20:39 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.TH expr 1
.SH NAME
\*Lexpr\*O \- Evaluates arguments as expressions
.SH SYNOPSIS
.PP
.sS
\*Lexpr\*O
\*Vexpression\*O
.sE
.SH DESCRIPTION
.iX "expr command"
.iX "shell" "variable arithmetic"
.iX "arithmetic" "shell variable"
.iX "evaluating" "expressions"
.iX "expression" "evaluating"
.iX "arguments" "evaluating"
.PP
The \*Lexpr\*O command reads an expression, evaluates
it, and writes the result to standard output.  Within
the \*Vexpression\*O argument, you must separate
each term with spaces, precede
characters special to the shell with a \e (backslash), and quote
strings containing spaces or other special characters.  Note that
\*Lexpr\*O returns 0 to indicate a zero value, rather than the null
string.  Integers can be preceded by a unary minus sign.  Internally,
integers are treated as 64-bit or 32-bit two's complement numbers,
depending on the word size of the hardware platform.
.PP
The operators and keywords are described in the following listing.
Characters that need to be escaped are preceded by a \e (backslash).
The list is in order of increasing precedence with equal
precedence operators grouped within {} (braces).
.VL 4m
.LI "\*Vexpression1\*O \*L\e|\*O \*Vexpression2\*O"
Returns \*Vexpression1\*O if it is neither null nor 0 (zero);
otherwise, returns \*Vexpression2\*O.
.LI "\*Vexpression1\*O \*L\e&\*O \*Vexpression2\*O"
Returns \*Vexpression1\*O if neither \*Vexpression1\*O
nor \*Vexpression2\*O is null nor 0; otherwise, returns 0.
.LI "\*Vexpression1\*O \*L{  =,  \e>,  \e>=,  \ \e<,  \e<=,  !=  }\*O \*Vexpression2\*O"
Returns the result of an integer comparison if both expressions are
integers; otherwise, returns the result of a string comparison.
.LI "\*Vexpression1\*O \*L{\(pl,  - }\*O \*Vexpression2\*O"
Adds or subtracts integer-valued arguments.
.LI "\*Vexpression1\*O \*L{  \e*,  /,  %  }\*O \*Vexpression2\*O"
Multiplies, divides, or provides the remainder from the division
of integer-valued arguments.
.\" Begin Digital-specific information - CORRECTION
.\" Add match function
.LI "\*Vexpression1\*O \*L:\*O \*Vexpression2\*O or \*Lmatch \*Vexpression1\*O \*Vexpression2\*O"
.\" End Digital-specific information - CORRECTION
Compares \*Vexpression1\*O with \*Vexpression2\*O, which must be
a regular expression, with syntax as described for \*Lgrep\*O, except
that all patterns are \*Vanchored\*O, so \*L^\*O (circumflex)
(which anchors a pattern to the beginning of a line) is not a special
character in this context.
.IP
Normally, the matching operator returns the number of characters
matched.  Alternatively, you can use the
\*L\e(\*O\&.\&.\&.\*L\e)\*O symbols in
\*Vexpression2\*O to return a portion of \*Vexpression1\*O.
.LI "\*L(\*Vexpression\*O)"
Provides expression grouping.
.LE
.PP
To avoid unpredictable results when using a
range expression to match a class of characters, use a character
class expression rather than a standard range expression.  For
information about character class expressions, see the discussion
of this topic included in the description of the \*Lgrep\*O command.
.\" Begin Digital-specific information - CORRECTION
.\" Functions not documented in OSF manpage.
.SS FUNCTIONS
The \*Lexpr\*O command provides the following string-expression
functions.  Strings containing white space must be quoted.  The first
character of a string is position 1.  The information returned by all of
these functions is in the form of a string:
.VL 4m
.LI "\*Lindex\*O \*Vstring1\*O \*Vstring2\*O"
Compares each character in the second string against each character in
the first string and returns the position in the first string of the
first match found, where the first match is the match closest to the
beginning of \*Vstring1\*O.
.LI "\*Llength\*O \*Vstring\*O"
Returns the length of the string argument.
.LI "\*Lmatch\*O \*Vstring1\*O \*Vstring2\*O"
See the description of the \*L:\*O (colon) match operator, above.
.LI "\*Lsubstr\*O \*Vstring\*O \*Vstart\*O \*Vlength\*O"
Returns the substring of \*Vstring\*O that begins at character position
\*Vstart\*O and is \*Vlength\*O characters long.
.\" End Digital-specific information - CORRECTION
.LE
.SH EXAMPLES
.PP
.AL
.LI
To increment a shell variable, enter:
.iS
COUNT=`expr $COUNT \(pl 1`
\*O\c
.iE
.IP
This adds \*L1\*O to the \*LCOUNT\*O shell variable (see \*Lsh\*O for
details).
.LI
To find the length of a shell variable, enter:
.iS
RES=`expr "$VAR" : ".*"`
\*O\c
.iE
.IP
Note that \*LVAR\*O is in double quotes to avoid problems where
\*LVAR\*O is NULL or contains embedded spaces.  The regular
expression is also quoted to avoid expansion by the shell.
.\" Begin Digital-specific information - CORRECTION
.\" Add function example
This operation can also be performed as:
.iS
RES=`expr length "$VAR"`
\*O\c
.iE
.\" End Digital-specific information - CORRECTION
.LI
To use part of a shell variable, enter:
.iS
RES=`expr "$VAR" : "-*\e(.*\e)"`
\*O\c
.iE
.IP
This removes leading \*L-\*O (dashes), if any, from \*LVAR\*O.
If the \*L\e( \e)\*O characters were omitted, \*LRES\*O
would contain the length of \*LVAR\*O.
.\" Begin Digital-specific information - CORRECTION
.\" Add function example
.LI
To find a character from one string in another string, enter:
.iS
INDEX=`expr index "Hello World!" "Wo"`
\*O\c
.iE
.IP
Note that the returned value is 5, not 7.  The first match is the fifth
character in \*Vstring1\*O, matching the \*Lo\*O in \*Vstring2\*O
rather than the \*LW\*O, which is the seventh character in
\*Vstring1\*O.
.\" End Digital-specific information - CORRECTION
.LI
Special considerations:
.iS
RES=`expr "x$VAR" : "x-*\e(.*\e)"`
\*O\c
.iE
.IP
This succeeds even if \*LVAR\*O has the value \*L-\*O (dash).
.iS
RES=`expr "x$VAR" = "x="
\*O\c
.iE
.IP
This succeeds even if \*LVAR\*O has the value \*L=\*O (equal sign).
.LE
.SH EXIT VALUES
.PP
The \*Lexpr\*O command returns the following exit values:
.VL 4m
.LI "\*L0\*O"
The expression is neither null nor 0.
.LI "\*L1\*O"
The expression is null or 0.
.LI "\*L2\*O"
The expression is invalid.
.LE
.SH RELATED INFORMATION
.PP
Commands:  \*Lgrep\*O(1)/\*Legrep\*O(1)/\*Lfgrep\*O(1),
\*Lsh\*O(1), \*Ltest\*O(1).
.PP
.\" Begin Digital-specific information - CORRECTION
.\" Add xrefs for info on index function.
Functions:
\*Lstring\*O(3),
\*Lwstring\*O(3)
.\" End Digital-specific information - CORRECTION
.PP
.\" "Using Internationalization Features" in the 
.EQ
delim off
.EN

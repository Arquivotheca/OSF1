.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: tr.1,v $ $Revision: 3.2.5.6 $ (DEC) $Date: 1993/11/30 22:12:25 $
.\"
.\"
.\"  THIS OSF SOURCE FILE HAS BEEN MODIFIED BY DLIBRARY IN OSP
.\"  If you need information about the changes, send mail 
.\"  to dlibrary@ravine at Digital Equipment Corp.
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\" Begin Digital-specific information - CORRECTION
.\" deleted empty fields on .TH line, added .PP after .SH NAME
.\" End Digital-specific information - CORRECTION
.TH tr 1
.SH NAME
.PP
\*Ltr\*O \- Translates characters
.SH SYNOPSIS
.PP
.sS
\*Ltr\*O
\*O[\*L-Acs\*O]
\*Vstring1\*O
\*Vstring2\*O
.br
\*Ltr -ds\*O
\*O[\*L-Ac\*O]
\*Vstring1\*O
\*Vstring2\*O
.br
\*Ltr -d\*O
\*O[\*L-Ac\*O]
\*Vstring1\*O
.br
\*Ltr -s\*O
\*O[\*L-Ac\*O]
\*Vstring1\*O
.sE
.PP
The \*Ltr\*O command copies characters from the standard input
to the standard output with substitution or deletion of selected characters.
.SH DESCRIPTION
.PP
.iX "tr command"
.iX "translating" "characters"
.iX "characters" "translating"
Input characters from \*Vstring1\*O are replaced with
the corresponding characters in \*Vstring2\*O.
The \*Ltr\*O command cannot handle an ASCII \*LNUL\*O (\*L\e000\*O) in
\*Vstring1\*O or \*Vstring2\*O; it always deletes \*LNUL\*O from the
input.
.PP
The \*Ltrbsd\*O command is a BSD compatible version of \*Ltr\*O.
.PP
The following abbreviations can be used to introduce ranges of ASCII
characters or repeated characters:
.VL 4m
.LI "\*L[a-z\*O]"
Stands for a string of characters whose ASCII codes run from
character \*La\*O to character \*Lz\*O, inclusive.
.LI "\*L[a*\*Vnumber\*O]"
Stands for \*Vnumber\*O repetitions of \*La\*O.
The \*Vnumber\*O is considered to be in decimal unless
the first digit of \*Vnumber\*O is \*L0\*O; then it
is considered to be in octal.
.LI "\*L[=\*Vequiv\*L=]"
Represents all characters or collating elements belonging to
the equivalence class specified by \*Vequiv\*O, as defined
by the \*LLC_COLLATE\*O locale category.  An equivalence
class expression can be used for \*Vstring1\*O or \*Vstring2\*O
only when used in combination with the \*L-d\*O and \*L-s\*O flags.
(For more information, see the reference page for the \*Llocale\*O
file.)
.LI "\*L[:\*Vclass\*L:]\*O"
Represents all characters belonging to the defined character class, as
defined by the current setting of the \*LLC_CTYPE\*O locale category.
The following character class names are accepted when specified in
\*Vstring1\*O:
.iS
alnum   cntrl   lower   space
alpha   digit   print   upper
blank   graph   punct   xdigit
.iE
.IP
When the \*L-d\*O and \*L-s\*O flags are specified together, any of
the character class names are accepted in \*Vstring2\*O; otherwise,
only character class names \*Llower\*O or \*Lupper\*O are accepted in
\*Vstring2\*O and then only if its complement, the corresponding character class
(\*Lupper\*O and \*Llower\*O, respectively) is specified in the same
relative position in \*Vstring1\*O.  Such a specification is
interpreted as a request for case conversion.
.IP
When \*L[:lower:]\*O appears in \*Vstring1\*O and \*L[:upper:]\*O
appears in \*Vstring2\*O, the arrays contain the characters from the
\*Ltoupper\*O mapping in the \*LLC_CTYPE\*O category of the current locale.
When \*L[:upper:]\*O appears in \*Vstring1\*O and \*L[:lower:]\*O
appears in \*Vstring2\*O, the arrays contain the characters from the
\*Ltolower\*O mapping in the \*LLC_CTYPE\*O category of the current locale.
.IP
The first character from each mapping pair is in the array for
\*Vstring1\*O and the second character from each mapping pair is in
the array for \*Vstring2\*O in the same relative position.
.LE
.PP
Use the escape character \e (backslash) to remove the special
meaning from any character in a string.  Use the \e (backslash)
followed by 1, 2, or 3 octal digits for the code of a character.
.PP
When \*Vstring2\*O is shorter than \*Vstring1\*O, a difference results
between historical System V and BSD systems.  A BSD system pads
\*Vstring2\*O with the last character found in \*Vstring2\*O.  Thus,
it is possible to do the following:
.iS
tr 0123456789 d
.iE
.PP
The preceding command translates all digits to the letter \*Ld\*O.
A portable application cannot rely on the BSD behavior; it would have
to code the example in the following way:
.iS
tr 0123456789 '[d*]'
.iE
.PP
It should be noted that, despite similarities in appearance, the
string arguments used by \*Ltr\*O are not regular expressions.
.PP
The \*Ltr\*O command correctly processes NULL characters in its input
stream.  NULL characters can be stripped using the following
command:
.iS
tr -d '\e000'
.\" Begin Digital-specific information - CORRECTION
.iE
.PP
If a given character appears more than once in \*Vstring1\*O, the
character in \*Vstring2\*O corresponding to its last appearance in
\*Vstring1\*O will be used in the translation.
.\" End Digital-specific Information - CORRECTION
.\" Begin Digital-specific information
.\" Added Environment Note.
.SS "System V Compatibility"
The root of the directory tree that contains the commands modified
for SVID2 compliance is specified in the file \*L/etc/svid2_path\*O. You
can use \*L/etc/svid2_profile\*O as the basis for, or to include
in, your \*L.profile\*O.  The file \*L/etc/svid2_profile\*O reads
\*L/etc/svid2_path\*O and
sets the first entries in the \*LPATH\*O environment variable so that
the modified SVID2 commands are found first.
.PP
In the SVID2 compliant version of the \*Ltr\*O command, only
characters in the octal range of 1 to 377 are complemented when you
specify the \*L-c\*O option.  This behavior is accomplished
because the \*L-A\*O option is implicitly forced to be on when
you specify the \*L-c\*O option.
.\" End Digital-specific information
.SH FLAGS
.PP
.\" .zA "review, R1.1.2, XPG4"
.VL 4m
.LI "\*L-A\*O"
Translates on a byte-by-byte basis.  When you specify this flag,
\*Ltr\*O does not support extended characters.
.LI "\*L-c\*O"
Complements (inverts) the set of characters in \*Vstring1\*O, which is
the set of all characters in the current character set, as defined by
the current setting of \*LLC_CTYPE\*O, except for those actually
specified in the \*Vstring1\*O argument.
These characters are placed in the array in ascending collation
sequence, as defined by the current setting of \*LLC_COLLATE\*O.
.LI "\*L-d\*O"
Deletes all occurrences of input characters or collating elements
found in the array specified in \*Vstring1\*O.
.IP
If \*L-c\*O and \*L-d\*O are both specified, all characters except
those specified by \*Vstring1\*O are deleted.  The contents of
\*Vstring2\*O are ignored, unless \*L-s\*O is also specified.  Note,
however, that the same string cannot be used for both the \*L-d\*O and
the \*L-s\*O flags; when both flags are specified, both \*Vstring1\*O
(used for deletion) and \*Vstring2\*O (used for squeezing) are required.
.IP
If \*L-d\*O is not specified, each input character or collating
element found in the array specified by \*Vstring1\*O is replaced by
the character or collating element in the same relative position in
the array specified by \*Vstring2\*O.
.LI "\*L-s\*O"
Replaces any character specified in \*Vstring1\*O that occurs as a
string of two or more repeating characters as a single instance of
the character in \*Vstring2\*O.
.IP
If the \*Vstring2\*O contains a
character class, the argument's array contains all of the
characters in that character class.  For example:
.iS
tr -s '[:space:]'
.iE
In a case conversion, however, the \*Vstring2\*O array contains only
those characters defined as the second characters in each of the
\*Ltoupper\*O or \*Ltolower\*O character pairs, as appropriate.
For example:
.iS
tr -s '[:upper:]' '[:lower:]'
.iE
.LE
.\" .zZ "review, R1.1.2, XPG4"
.SH NOTES
.PP
Specifying the \*L-A\*O flag improves ASCII performance.
.SH EXAMPLES
.PP
.AL
.LI
To translate braces into parentheses, enter:
.iS
tr  '{}'  '()'  <textfile  >newfile
\*O\c
.iE
.IP
This translates each \*L{\*O (left brace) to a \*L(\*O (left parenthesis)
and each \*L}\*O (right brace) to \*L)\*O
(right parenthesis).  All other characters remain unchanged.
.LI
To translate lowercase ASCII characters to uppercase, enter:
.iS
tr 'a-z'  'A-Z'  <textfile  >newfile
\*O\c
.iE
.LI
.\" Begin Digital-specific information - CORRECTION
The two strings can be of different lengths:
.iS
tr  '0-9'  '#'  <textfile  >newfile
\*O\c
.iE
.IP
This translates each \*L0\*O into a \*L#\*O (number sign) but does not
treat the digits 1 to 9;
.\" End Digital-specific information - CORRECTION
if the two character strings are not the same length,
the extra characters in the longer one are ignored.
.LI
To translate each digit to a \*L#\*O (number sign), enter:
.iS
tr '0-9'  '[#*]'  <textfile  >newfile
\*O\c
.iE
.IP
The \*L*\*O (asterisk) tells \*Ltr\*O to repeat the
\*L#\*O (number sign) enough times to make the
second string as long as the first one.
.LI
To translate each string of digits to a single \*L#\*O (number sign),
enter:
.iS
tr -s  '0-9'  '[#*]'  <textfile  >newfile
\*O\c
.iE
.LI
To translate all ASCII characters that are \*Vnot\*O specified, enter:
.\" Begin Digital-specific information - CORRECTION
.iS
tr -c '[ -~]' '[A-_]' <textfile  >newfile
\*O\c
.iE
.IP
This translates each nonprinting ASCII character to the next following
corresponding control key letter (\*L\e001\*O translates
to \*LB\*O, \*L\e002\*O to \*LC\*O, and so on).
ASCII DEL (\*L\e177\*O), the character that
follows \*L~\*O (tilde), translates to a \*L]\*O (right bracket).
.\" End Digital-specific information - CORRECTION
.LI
To create a list of all words in \*Lfile1\*O one per line in
\*Lfile2\*O, where a word is taken to be a maximal string of letters, enter:
.iS
tr -cs '[:alpha:]' '[\en*]' < file1 > file2
.iE
.LI
To use an equivalence class to identify accented variants of the base
character \*Le\*O in \*Lfile1\*O, which are stripped of diacritical
marks and written to \*Lfile2\*O, enter:
.iS
tr '[=e=]' '[e*]' < file1 > file2
.iE
.\" .zZ "review, R1.1.2, XPG4"
.LE
.SH RELATED INFORMATION
.PP
Commands:  \*Led\*O(1)/\*Lred\*O(1), \*Lsh\*O(1), \*Ltrbsd\*O(1).
.PP
Files:  \*Lascii\*O(5).
.EQ
delim off
.EN

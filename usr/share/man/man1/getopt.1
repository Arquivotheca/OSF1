.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: getopt.1,v $ $Revision: 3.2.2.2 $ (DEC) $Date: 1992/05/13 15:25:17 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.TH getopt 1
.SH NAME
\*Lgetopt\*O \- Parses command line flags and arguments
.SH SYNOPSIS 
.PP 
.sS
\*Lgetopt\*O
\*Vformat\*O
\*Vtokens\*O
.sE 
.SH DESCRIPTION
.iX "getopt command"
.iX "parsing" "command line flags and arguments"
.iX "flags" "parsing"
.iX "arguments" "parsing"
.PP 
The \*Lgetopt\*O command is used to parse a list of tokens using
a format that specifies expected flags and arguments.  A flag
is a single ASCII letter and, when followed by a \*L:\*O (colon), is
expected to take a modifying argument that may or may not be
separated from it by one or more tabs or spaces.  (You can include
multi-byte characters in arguments, but not as flag letters.)
.PP 
The \*Lgetopt\*O command completes processing when it has read all tokens
or when it encounters the special token \*L--\*O (double dash).  It
then outputs the processed flags, a \*L--\*O, and any remaining
tokens.
.PP 
If a token fails to match a flag, \*Lgetopt\*O writes a message to
standard error.
.SH EXAMPLES
.PP 
The following is an example of the use of \*Lgetopt\*O in a skeleton
shell script to parse options:
.iS
#!/bin/sh
# parse command line into arguments
set -- `getopt a:bc $*`
# check result of parsing
if [ $? != 0 ]
then
	exit 1
fi
while [ $1 != -- ]
do
	case $1 in
	-a)	# set up the -a flag
		AFLG=1
		AARG=$2
		shift;;
	-b)	# set up the -b flag
		BFLG=1;;
	-c)	# set up the -c flag
		CFLG=1;;
	esac
	shift	# next flag
done
shift	# skip double dash
# now do the work
\&.
\&.
\&.
\*O\c
.iE
.PP
The following are all equivalent arguments to the script:
.iS
-a ARG -b -c -- A B C
-a ARG -bc -- A B C
-aARG -b -c -- A B C
-b -c -a ARG -- A B C
\*O\c
.iE
.SH NOTES
.PP 
In the \*Lcsh\*O, use the following command to run \*Lgetopt\*O:
.iS
set argv=`getopt \*Vflag_string\*L $*`
\*O\c
.iE
.SH RELATED INFORMATION
.PP 
Commands:  \*Lsh\*O(1).
.PP 
Functions: \*Lgetopt\*O(3).
.EQ
delim off
.EN

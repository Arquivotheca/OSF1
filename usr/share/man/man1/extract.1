.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: extract.1,v $ $Revision: 3.2.2.3 $ (DEC) $Date: 1992/12/10 09:19:28 $
.\"
.TH extract 1
.SH NAME
extract \- interactive string extract and replace
.SH SYNOPSIS
.PP
.B extract
[
.B \-i
\*Vignorefile\*O
] [
.B \-m
\*Vprefix\*O
] [
.B \-n
] [
.B \-p
\*Vpatternfile\*O
]
.br
[
.B \-s
\*Vstring\*O
] [
.B \-u
]
\*Vsource-program...\*O
.SH DESCRIPTION
.PP
.iX "extract utility"
The
\*Lextract\*O
command interactively extracts text strings from source programs.
The
\*Lextract\*O
command replaces the strings it extracts with calls to the
\*Lcatgets\*O
function.    The command also writes the string it extracts to a
source message catalog.
You use this command to replace hard-coded messages in
your program source file with calls to the
\*Lcatgets\*O
command and create a source message catalog.  At run time, the program
reads the message text from the message catalog.  By storing
messages in a message catalog, instead of in your program, you allow
the text of messages to be translated to a new language or modified
without the source program being
changed.
.PP
In the
\*Vsource-program\*O
argument, you name one or more source programs from which you want
messages extracted.  The
\*Lextract\*O
command does not extract messages from source programs included using
the
\*L#include\*O
directive.  Therefore, you might want to name a source program and all
the source programs it includes on a single
\*Lextract\*O
command line.
.PP
You can create a patterns file (as specified by (\f2patternfile\fP) to control
how the
\*Lextract\*O
command extracts and replaces text.  The patterns file is divided
into several sections, each of which is identified by a keyword.  The
keyword must start at the beginning of a new line, and its first character
must be a dollar sign ($).  Following the identifier, you specify a
number of patterns.  Each pattern begins on a new line and follows the
regular expression syntax you use in the
\*Lregexp\*O
routine. For more information on the patterns file, see
\*Lpatterns\*O(4)
and for more information on the
\*Lregexp\*O
routine, see
\*Lregexp\*O(3).
.PP
In addition to the patterns file, you can create a file that indicates
strings that
\*Lextract\*O
ignores.  Each line in this ignore file contains a single string to be
ignored that
follows the syntax of the
\*Lregexp\*O
routine.
.PP
When you invoke the
\*Lextract\*O
command, it reads the patterns file and the file that contains strings
it ignores.  You can specify a patterns file and an ignore file on the
\*Lextract\*O
command line.  Otherwise, the
\*Lextract\*O
command matches all strings and uses a default patterns file.
.PP
When you run
\*Lextract\*O,
it displays three windows on your terminal.
The first window contains the program source code. The string that
matches a string in the patterns file is displayed in reverse video.
.PP
The second window displays the contents of the source message catalog that
the
\*Lextract\*O
command is creating.
.PP
The third window contains a list of the commands that are available.
The
\*Lextract\*O
command displays the current command in reverse video.
You can execute the current command by pressing the RETURN key.
Select another command by typing the first letter in the
command name and pressing the RETURN key.  The
\*Lextract\*O
command is not
sensitive to the case of letters, so you can use uppercase or
lowercase letters to issue commands.
.PP
You can use the following commands to control how
\*Lextract\*O
treats the string displayed in the first window:
.IP \f3EXTRACT\f1 15
Extract the string into the catalog file and rewrite the source using the
rewrite
string in the patterns
file.
.IP DUPLICATE 15
If the string has been encountered previously, rewrite the source program
using the same message number as before.  The
\*Lextract\*O
command need not add the message to the source message catalog again,
so this command saves space in catalogs.
.IP IGNORE 15
Ignore this and all subsequent occurrences of this string during this
interactive session.  This command does not add the string to the
ignore file.
.IP PASS 15
Pass by (ignore) this occurrence of this particular string.
.IP ADD 15
Ignore this and all subsequent occurrences of this string during this
interactive session.  Add the string to the ignore file.
.IP COMMENT 15
Add the comment you enter to the source message catalog.  The
\*Lextract\*O
command prompts you to be sure the comment you entered is correct.
You answer the prompt by typing ``y,'' ``n,'' or ``q,'' without
pressing the RETURN key.
.IP \f3QUIT\f1 15
Quit from the interactive session.  The
\*Lextract\*O
command prompts you to be sure you want to quit.  Answer ``y'' or
``n'' to the prompt, without pressing the return key.
.IP
The output files that
\*Lextract\*O
creates up to this point are not removed by this command.  However,
the files contain only the result of the string extractions that
occurred before you issued the QUIT command.
.IP \f3HELP\f1 15
Display a description of all the
\*Lextract\*O
commands.
.PP
The
\*Lextract\*O
command creates two files in your current working directory.  The
command creates a new version of the source program that contains
calls to the
\*Lcatgets\*O
function, instead of hard-coded messages.  The new version of the
source program has the same name as the input source program, with the
prefix ``nl_''.  For example, if the input source program is named
\*Lupdate.c\*O,
the output source program is named
\*Lnl_update.c\*O
.PP
In addition to a new source program, the
\*Lextract\*O
command creates a source message catalog. The source message catalog
contains the text for each message extracted from your input source program.
The
\*Lextract\*O
command names the file by appending ``.msg'' to the name of the
input source program.  For example, the source message catalog for the
\*Lupdate.c\*O
source program is named
\*Lupdate.msg\*O.
You can use the source message catalog as input to the
\*Lgencat\*O
command.
.SH FLAGS
.PP
.IP \f3-i\fP 5
Ignore text strings specified in
\*Vignorefile .\*O
By default, the
\*Lextract\*O
command searches for
\*Vignorefile\*O
in the current working directory,
your home directory, and
\*L/usr/lib/nls\*O.
.IP
If you omit the
\*L\-i\*O
option,
\*Lextract\*O
recognizes all strings specified in the patterns file.
.IP \f3-m\fP 5
Add
\*Vprefix\*O
to message numbers
in the output source program and source message catalog. You can
use this prefix as a mnemonic.  You must process source message catalogs
that contain message number prefixes using the
\*Lmkcatdefs\*O
command.
.IP \f3-n\fP 5
Create a new source message catalog for each input source program. By
default, if you specify more than one input source program on the
\*Lextract\*O
command line, the command creates one source message catalog for all
the input source programs.
.IP \f3-p\fP 5
Use
\*Vpatternfile\*O
to match strings in the input source program.
By default, the command searches for the pattern file
in the current directory, your home directory, and
\*L/usr/lib/nls\*O.
.IP
If you omit the
\*L\-p\*O
option, the
\*Lextract\*O
command uses a default patterns file that is stored in
\*L/usr/lib/nls/patterns\*O.
.IP \f3-s\fP 5
Write
\*Vstring\*O
at the top of the source message catalog.
If you omit the
\*L\-s\*O
option,
\*Lextract\*O
uses the string specified in the
\*L$CATHEAD\*O
section of the patterns
file.
.IP \f3-u\fP 5
Use a
\*Lmessage\*O
file produced by a previous run of
\*Lstrextract\*O.
This file contains details of all the strings which matched the pattern file along with file offsets and line numbers.
By default
\*Lstrextract\*O
is run and its output is used to drive
\*Lextract\*O.
.SH RESTRICTIONS
.PP
Given the current syntax of the patterns file, you cannot cause
\*Lextract\*O
to ignore strings in comments that are longer than one line.
.PP
You can specify only one rewrite string for all classes of pattern matches.
.PP
The
\*Lextract\*O
command does not extract strings from files you include with the
\*L#include\*O
directive.  You must run the
\*Lextract\*O
commands on these files separately.
.PP
Your terminal screen must contain at least 80 columns and 24 lines for
\*Lextract\*O
to display its three windows.
.PP
The
\*Lextract\*O
command does not recognize strings that extend beyond one line.
.SH EXAMPLES
.PP
The following example shows the commands you issue to run the
\*Lextract\*O
command, create a message catalog from the source message catalog,
and compile the output source program:
.oS
% extract \-i newignore \-p c_patterns remove.c
% gencat remove.cat remove.msg
% vi nl_remove.c
% cc nl_remove.c
.oE
.PP
In this example, the
\*Lextract\*O
command uses the
\*Lnewignore\*O
file to determine which strings to ignore.  The command uses the
\*Lc_patterns\*O
file to determines which strings to match.  The input source program
is named
\*Lremove.c\*O.
.PP
In response to this command,
\*Lextract\*O
creates the source message catalog
\*Lremove.msg\*O
and the output source program
\*Lnl_remove.c\*O.
.PP
You must edit
\*Lnl_remove.c\*O
to include the appropriate
\*Lcatopen\*O
and
\*Lcatclose\*O
function calls.
.PP
The
\*Lgencat\*O
command creates a message catalog and the
\*Lcc\*O
command creates an executable program.
.SH RELATED INFORMATION
.PP
\*Lgencat\*O(1), \*Lmkcatdefs\*O(1), \*Lstrextract\*O(1), s
\*Lstrmerge\*O(1), \*Lregexp\*O(3),
\*Lcatopen\*O(3), \*Lcatgets\*O(3), \*Lpatterns\*O(4)
.PP
\*EWriting Software for the International Market\*O
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: patch.1,v $ $Revision: 1.1.2.5 $ (DEC) $Date: 1994/01/19 15:49:13 $
.\"
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.TH patch 1
.SH NAME
\*Lpatch\*O \- Applies changes to files
.SH SYNOPSIS
.PP
.sS
.in +.5i
.ti -.5i
\*Lpatch\*O
\*O[\*L\(hybflsvNRS\*O]
\*O[\*L\(hyc\*O\ |\ \*L\(hye\*O\ |\ \*L\(hyn\*O]
\*O[\*L\(hyB\ \*Vprefix\*O]
\*O[\*L\(hyd\ \*Vdirectory\*O]
\*O[\*L\(hyD\ \*Vdefine\*O]
\*O[\*L\(hyF\*O][\*Vnumber\*O]
\*O[\*L\(hyi\ \*Vpatchfile\*O]
\*O[\*L\(hyo\ \*Voutfile\*O]
\*O[\*L\(hyp\*O \*Vnumber\*O]
\*O[\*L\(hyr\ \*Vrejectfile\*O]
\*O[\*Voriginal_file\*O]
\*O[\*Vpatchfile\*O]
\*O[\*L+\*O] [\*Vflags\*O] [\*Voriginal_file\*O]
.in -.5i
.sE
.PP
.\" Fixed SYNOPSIS and FLAGS section to make number argument mandatory
.\" for -p flag.  Digital change for XPG4 conformance as per QAR 19106.
The \*Lpatch\*O command
takes a patch file that contains any of the three forms of difference
listing produced by the \*Ldiff\*O
program (normal, context, or \*Led\*O-style)
and applies those differences to an original file,
producing a patched version.
.SH FLAGS
.PP
.VL
.LI "\*L-b\*O"
Saves a copy of the original contents of each modified file, before
the differences are applied in a file of the same name with the
suffix \*L\&.orig\*O appended to it.  If the file already exists,
it is overwritten. If multiple patches are applied to the same
file, the \*L\&.orig\*O file is written only for the first patch.
If \*L-o \*Voutfile\*O is also specified, \*Vpatchfile\*L.orig\*O
will not be created, but if \*Voutfile\*O already exists,
\*Voutfile\*L.orig\*O is created.
.LI "\*L-B \*Vprefix\*O"
Specifies a prefix to the backup filename.
.LI "\*L-c\*O"
Interprets the patch file as a context \*Ldiff\*O (the output
of \*Ldiff\*O when \*L-c\*O or \*L-C\*O is specified).
.LI "\*L-d \*Vdirectory\*O"
Changes the current directory to \*Vdirectory\*O before processing.
.LI "\*L-D \*Vdefine\*O"
Uses the C preprocessor
\*L#ifdef \*Vdefine\*O ... \*L#endif\*O construct to mark changes.
The \*Vdefine\*O argument is used as the differentiating symbol.
.LI "\*L-e\*O"
Interprets the patch file as an \*Led\*O script, rather than
as a \*Ldiff\*O script.
.LI "\*L-f\*O"
Suppresses queries to the user.
To suppress commentary, use the \*L-s\*O flag.
.LI "\*L-F\*O[\*Vnumber\*O]"
Sets the maximum fuzz factor.
This flag applies to context \*Ldiff\*Os only, and causes \*Lpatch\*O
to ignore up to the specified number of
lines when determining where to install a hunk.
If the \*L-F\*O flag is not specified,
the default fuzz factor is 2.  If the \*L-F\*O flag is specified
without a \*Vnumber\*O argument,
the fuzz factor is taken to be 0 (zero).
The factor may not be set to more than
the number of lines of context in the context \*Ldiff\*O (ordinarily 3).
.IP
Note that a larger fuzz factor increases the odds of a faulty patch.
.LI "\*L-i \*Vpatchfile\*O"
Reads the patch information from the file named by the specified
patchfile, rather than from standard input.
.LI "\*L-l\*O"
Causes any sequence of spaces and tabs
(whitespace) in the \*Ldiff\*O script to match any sequence
of spaces in the input file.  Other characters will be matched exactly.
.LI "\*L-n\*O"
Interprets the script as a normal \*Ldiff\*O.
.LI "\*L-N\*O"
Ignores patches where the differences have already been
applied to the file; by default, already-applied patches
are rejected.  (See the \*L-R\*O flag.)
.LI "\*L-o \*Voutfile\*O"
Instead of modifying the files (specified by the \*Vpatchfile\*O
argument or the \*Ldiff\*O listings) directly, write a copy of the
file referenced by each patch, with the appropriate differences
applied, to \*Voutfile\*O.  Multiple patches for a single file
are applied to the intermediate versions of the file created by any
previous patches, and result in multiple, concatenated versions of
the file written to \*Voutfile\*O.
.LI "\*L-p\*O \*Vnumber\*O"
Sets the pathname strip count,
which controls how pathnames found in the patch file are treated.
This flag is useful if you keep your files in a different directory
than that specified by the patch.
The strip count specifies how many slashes are to be stripped from
the front of the pathname. Any intervening directory names are also stripped.
.IP
For example, if the filename in the patch file was
\*L/u/howard/src/blurfl/blurfl.c\*O,
.\" Removed text (or -p) from the following sentence. QAR 19106
entering \*L-p0\*O
leaves the entire pathname unmodified.
Entering \*L-p1\*O
results in
\*Lu/howard/src/blurfl/blurfl.c\*O
without the leading slash.
Entering \*L-p4\*O results in \*Lblurfl/blurfl.c\*O.
Omitting \*L-p\*O from the \*Lpatch\*O command line,
results in \*Lblurfl.c\*O.
.IP
The \*Lpatch\*O command looks for
the resulting pathname in the current directory,
or in the directory specified by the \*L-d\*O flag.
.LI "\*L-r \*Vrejectfile\*O"
Specifies the reject filename.  By default, the reject filename
has the same name as the output file, with the suffix
\*L\&.rej\*O appended to it.
.LI "\*L-R\*O"
Reverses the sense of the patch script; that is, \*Lpatch\*O assumes
that the \*Ldiff\*O script was created from the new version to the
old version.
The \*Lpatch\*O command tries to reverse each portion of the script
before applying it.  Rejected differences are saved in swapped format.
The \*L-R\*O flag cannot be used with \*Led\*O scripts
because there is too little information to reconstruct the reverse operation.
.IP
If this flag is not specified, and until a portion of the patch file
is successfully applied, \*Lpatch\*O tries to apply each portion
in its reversed sense as well as in its normal sense.  If the
attempt is successful, you are prompted to determine if \*L-R\*O
should be set.
.IP
Note that this method cannot detect a reversed patch if it is
a normal \*Ldiff\*O and if the first command is an append
(that is, it should have been a delete),
since appends always succeed because a \*LNULL\*O context matches anywhere.
Luckily, most patches add or change lines rather than delete them, so most
reversed normal \*Ldiff\*Os begin with a delete, which will fail, triggering
the heuristic.)
.LI "\*L-s\*O"
Patches silently unless an error occurs.
.LI "\*L-S\*O"
Ignores a patch from the patch file, but continues looking
for the next patch in the file.  Thus,
.iS
patch -S + -S + <patchfile
.iE
ignores the first and second patches in \*Lpatchfile\*O
(see the description of the \*L+\*O offset that follows).
.LI "\*L-v\*O"
Prints out the revision header and patch level.
.LI "\*L-x\*Vnumber\*O"
Sets internal debugging flags.  (This flag is of interest only to
\*Lpatch\*O patchers.)
.LI "\*L+ \*Vflags\*O [\*Voriginal_file\*O]"
Specifies flags (and possibly another original filename) for the second and
subsequent patches.  The argument list for each patch must be preceded
with a \*L+\*O.  (Note, however, that the argument list for a second or
subsequent patch may not specify a new patch file.)
.LE
.SH DESCRIPTION
.iX "patch command"
.PP
By default, the patched version is put in place of the original.
The original file can be backed up to the same name with the
extension \*L\&.orig\*O by using the \*L-b\*O flag.
You may also specify where you want the output to go with the
\*L-o\*O flag.  If the \*L-i \*Vpatchfile\*O flag
is not specified, or if \*Vpatchfile\*O is a \*L-\*O (dash), the
patch is read from standard input.
.PP
The \*Lpatch\*O command attempts to determine the type of the \*Ldiff\*O listing,
unless it is overruled by a \*L-c\*O, \*L-e\*O, or \*L-n\*O flag,
which specify context, \*Led\*O, and normal \*Ldiff\*Os, respectively.
Context \*Ldiff\*Os and normal \*Ldiff\*Os are applied by the
\*Lpatch\*O program itself, while \*Led\*O \*Ldiff\*Os are fed to the
\*Led\*O editor by means of a pipe.
.PP
The patch file must contain zero or more lines of header information
followed by one or more patches.  Each patch must contain zero or more
lines of filename identification in the format produced by \*Ldiff -c\*O,
and one or more sets of \*Ldiff\*O output, which are
customarily called "hunks".
.PP
The \*Lpatch\*O command tries to skip any leading text,
apply the \*Ldiff\*O, and then skip any trailing text.
Thus, you could feed an article or message containing a
\*Ldiff\*O listing to \*Lpatch\*O, and it would work.
If the entire \*Ldiff\*O is indented by a consistent amount,
\*Lpatch\*O takes this into account.
.PP
If no original file is specified on the command line, \*Lpatch\*O
tries to figure out the name of the file to edit from the leading text.
In the header of a context \*Ldiff\*O,
the filename is found from lines beginning
with \*L***\*O (the name of the file from which the patches
arose) or \*L---\*O (the name of the file to which
the patches should be applied), with the shortest name of an existing
file being selected.  If there is an \*LIndex:\*O line in the leading text,
\*Lpatch\*O tries to use the filename from that line.
The context \*Ldiff\*O header takes precedence over an \*LIndex:\*O line.
If no filename can be determined from the leading text, \*Lpatch\*O
asks you for the name of the file to patch.
.PP
If the original file cannot be found, but a suitable SCCS or RCS file is
available, \*Lpatch\*O attempts to get or check out the file.
.PP
Additionally, if the leading text contains a \*LPrereq:\*O line, \*Lpatch\*O
takes the first word from the prerequisites line (normally a version
number) and checks the input file to see if that word can be found.
If not, \*Lpatch\*O asks for confirmation before proceeding.
.PP
If the patch file contains more than one patch, \*Lpatch\*O
tries to apply each of them as if they came from separate patch files.
In this case, the name of the file
to patch must be determined for each \*Ldiff\*O listing,
and the header text before each \*Ldiff\*O listing is
examined for information such as filenames and revision level.
You can give flags (and another original filename) for the second and
subsequent patches by separating the corresponding argument lists
with a \*L+\*O.
.PP
For each hunk, \*Lpatch\*O takes the line
number mentioned for the hunk, plus or
minus any offset used in applying the previous hunk.
If that is not the correct place, \*Lpatch\*O
scans both forwards and backwards for a set of lines matching the context
given in the hunk.  The \*Lpatch\*O command
looks for a place where all lines of the context match.
.PP
If no such place is found, and \*Lpatch\*O is performing
a context \*Ldiff\*O, and the maximum fuzz factor
is set to 1 or more, \*Lpatch\*O performs another scan that ignores
the first and last line of context.
If that scan fails, and the maximum fuzz factor is set to 2 or more,
\*Lpatch\*O ignores the first two and last two lines of context,
and makes another scan.  (The default maximum fuzz factor is 2.)
.PP
If \*Lpatch\*O cannot find a place to
install that hunk of the patch, it places the
hunk in a reject file (normally, with the same name as the output file
and the suffix \*L\&.rej\*O).  The rejected hunk
is written in context \*Ldiff\*O form, regardless of the format of
the patch file.  If the input was a normal or \*Led\*O-style \*Ldiff\*O,
the reject file may contain \*Ldiff\*Os with zero lines of context.
The line numbers on the hunks in the reject file may be different from
the line numbers in the patch file; the reject file line numbers reflect
the approximate locations for the failed hunks in the new file
rather than the old one.
.PP
As each hunk is completed, \*Lpatch\*O tells you whether the hunk succeeded or
failed, and on which line in the new file
\*Lpatch\*O assumed the hunk should go.
If this is different from the line number specified in the \*Ldiff\*O,
\*Lpatch\*O tells you the offset.  A single large offset \*Emay\*O be an
indication that a hunk was installed in the wrong place.
The \*Lpatch\*O command also tells you if a fuzz factor was used to make the match,
in which case you should be slightly suspicious.
.SH NOTES
.PP
There are several things you should bear in mind if you are going to
be sending out patches:
.ML
.LI
It is recommended that you keep a \*Lpatchlevel.h\*O file
that is patched to increment the patch level as the first \*Ldiff\*O in the
patch file you send out.
If you put a \*LPrereq:\*O line in with the patch,
users will not be able to apply patches out of order without some warning.
.LI
Make sure you specify the filenames correctly, either in a
context \*Ldiff\*O header or with an \*LIndex:\*O line.
If you are patching something in a subdirectory, be sure to tell the patch
user to specify a \*L-p\*O flag as needed.
.LI
You can create a file by sending out a \*Ldiff\*O that compares a
null file to the file you want to create.
This works only if the file you want to create does not already exist in
the target directory.
.LI
Take care not to send out reversed patches, since this makes users wonder
whether they already applied the patch.
.LI
While you may be able to put many \*Ldiff\*O listings into
one file, it is advisable to group related patches into separate files.
.LI
The \*Lpatch\*O command
cannot tell if the line numbers are off in an \*Led\*O script,
and can only detect
bad line numbers in a normal \*Ldiff\*O when it finds a \*Lchange\*O or
a \*Ldelete\*O command.
.IP
A context \*Ldiff\*O using a fuzz factor of 3 may have the same problem.
Until a suitable interactive interface is added, you should probably do
a context \*Ldiff\*O in these cases to see if the changes make sense.
Compiling without errors is a pretty good indication that the patch
worked, but this is not an infallible indicator.
.LI
The results of the \*Lpatch\*O command are
guaranteed to be correct only when the patch is
applied to exactly the same version of the file from which the patch was
generated.
.LI
If the code has been duplicated (for example, with
\*L#ifdef OLDCODE\*O ... \*L#else\*O ...
\*L#endif\*O), \*Lpatch\*O
is incapable of patching both versions, and, if \*Lpatch\*O
works at all, it will likely
patch the wrong version and tell you that it succeeded.
.LI
If you apply a patch you've already applied, \*Lpatch\*O
assumes it is a reversed patch, and offers to undo it.
.LE
.SH DIAGNOSTICS
.PP
The message \*CHmm...\*O indicates that there is unprocessed text in
the patch file and that \*Lpatch\*O
is attempting to determine whether there is a patch in that text and, if so,
what kind of patch it is.
.PP
The \*Lpatch\*O command
exits with a nonzero status if any reject files were created.
When applying a set of patches in a loop, you should check this
exit status, so you don't apply a later patch to a partially patched file.
.SH FILES
.PP
.VL 10m
.LI "\*L/tmp/patch*\*O"
.LE
.SH RELATED INFORMATION
.PP
Commands:  \*Ldiff\*O(1).
.\" .zZ "New reference page for XPG4 conformance"
.EQ
delim off
.EN

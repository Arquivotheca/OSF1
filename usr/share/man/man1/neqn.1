.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: neqn.1,v $ $Revision: 3.2.4.3 $ (DEC) $Date: 1994/01/19 20:26:28 $
.\"
.TH neqn 1
.SH NAME
.PP
\*Lneqn\*O, \*Lcheckeq\*O \- Typesets mathematical equations and expressions
.SH SYNOPSIS
.PP
.sS
\*Lneqn\*O [ \*L\-d\*Vxy\*O ] [ \*L\-p\*Vn\*O ] [ \*L\-s\*Vn\*O ]
[ \*L\-f\*Vn\*O ] [ \*Vfile\*O ... ]  | \*Lnroff\*O ...
.sE
.PP
.sS
\*Lcheckeq\*O [ \*Vfile\*O ... ]
.sE
.SH DESCRIPTION
.PP
.iX "equations" "formatting with nroff"
.iX "text formatting" "equations"
.iX "math symbols"
The \*Lneqn\*O command is an \*Lnroff\*O(1) preprocessor for displaying
mathematical symbols and equations on terminals.  Usage almost always
involves preprocessing an \*Lnroff\*O source file with \*Lneqn\*O and
then piping the output through \*Nnroff\*O.
.PP
NOTE:  \*Lneqn\*O formatting works best on typesetting devices.  Your
terminal might not be equipped to display equations and other math symbols
in a meaningful way.  In fact, you might have difficulty viewing the
symbols and examples included in this reference page.
.PP
If no files are specified, \*Lneqn\*O reads from the standard input.
A line beginning with \*L.EQ\*O marks the start of an equation; \*L.EN\*O
at the beginning of a line marks the end of an equation.
Neither of these lines is altered, so they can be defined in macro packages
to produce centering, numbering, and so on.
.PP
It is also possible to set two characters as delimiters;
subsequent text between delimiters is also treated as input to \*Lneqn\*O.
Delimiters may be set to any two characters, such as \*Lx\*O and \*Ly\*O,
with the command-line argument \*L\-dxy\*O or more commonly by placing
\*Ldelim xy\*O between \*L.EQ\*O and \*L.EN\*O.  The left and right
delimiters can be identical.  Delimiters are turned off by \*Ldelim off\*O.
All text that is neither between delimiters nor between \*L.EQ\*O and
\*L.EN\*O is passed through untouched.
.PP
The program \*Lcheckeq\*O reports missing or unbalanced delimiters
and \*L.EQ\*O/\*L.EN\*O pairs.
.PP
Tokens within \*Lneqn\*O are separated by spaces, tabs, newlines, braces,
double quotation marks, tildes, or circumflexes.
Braces {\ } are used for grouping.  Generally speaking, anywhere a single
character could appear, a complicated construction
enclosed in braces can be used instead.
The tilde (~) represents a full space in the output; the
circumflex (^) half as much.
.PP
Subscripts and superscripts are produced with the keywords \*Lsub\*O and
\*Lsup\*O.
.PP
Fractions use the keyword \*Lover\*O.
.PP
The \*Lsqrt\*O keyword creates square roots.
.PP
The keywords \*Lfrom\*O and \*Lto\*O are used to express lower and upper
limits.
.PP
Left and right brackets, braces, and so forth that encompass more than
one line are created with the \*Lleft\*O and \*Lright\*O keywords and
tildes.  Legal characters to use with \*Lleft\*O and \*Lright\*O are
{, }, \[, \], |, c (ceiling), f (floor), and "", meaning 'nothing' (to use with
the \*Lleft\*O keyword when you want brackets or braces on the right side only).
The \*Lright\*O keyword clause is optional.
.PP
Vertical piles of things are made with \*Lpile\*O, \*Llpile\*O, \*Lrpile\*O,
and \*Lcpile\*O.  There can be an arbitrary number of elements in a
pile.  You use \*Llpile\*O to left-justify a vertical grouping and
\*Lrpile\*O to right-justify one.  The \*Lpile\*O and \*Lcpile\*O keywords
create centered piles but have different vertical spacing.
.PP
You use the \*Lmatrix\*O keyword to create matrixes.  The \*Llcol\*O,
\*Lccol\*O, and \*rcol\*O keywords are used with \*Lmatrix\*O to
specify the alignment within the matrix; that is a left-justified
column, centered column, and right-justified column, respectively.
.PP
Diacritical marks are made with the following keywords:
.TS
tab(!);
l l .
T{
\*Ldot\*O
T}!T{
Produces a period (\&.) over the character preceding the keyword.
T}
T{
\*Ldotdot\*O
T}!T{
Produces two periods (\&.\&.) over the character preceding the keyword.
T}
T{
\*Lhat\*O
T}!T{
Produces a circumflex (^) over the character preceding the keyword.
T}
T{
\*Ltilde\*O
T}!T{
Produces a tilde (\~) over the character preceding the keyword.
T}
T{
\*Lbar\*O
T}!T{
Produces a horizontal bar over the character preceding the keyword.
T}
T{
\*Lvec\*O
T}!T{
Produces a left-pointing arrow over the character preceding the keyword.
T}
T{
\*Ldyad\*O
T}!T{
Produces a bidirectional arrow over the character preceding the keyword.
T}
T{
\*Lunder\*O
T}!T{
Produces an underscore under the character preceding the keyword.
T}
.TE
.PP
Size and font changes are made with the following keywords:
.TS
tab(!);
l l .
T{
\*Lsize\*O \*Vn\*O
T}!T{
Specifies the size as \*Vn\*O points.
T}
T{
\*Lsize+\*Vn\*O
T}!T{
Increases the size \*Vn\*O points.
T}
T{
\*Lsize-\*Vn\*O
T}!T{
Decreases the size \*Vn\*O points.
T}
T{
\*Lroman\*O
T}!T{
Uses roman type font.
T}
T{
\*Litalic\*O
T}!T{
Uses italic type font.
T}
T{
\*Lbold\*O
T}!T{
Uses bold type font.
T}
T{
\*Lfont\*V n\*O
T}!T{
Uses the specified type font.
T}
.TE
.PP
Size and font can be changed globally in a document by using the
\*Lgsize \*Vn\*O and the \*Lgfont \*Vn\*O keyword expressions
or by the command-line arguments \*L\-s \*Vn\*O and \*L\-f \*Vn\*O.
.PP
Normally subscripts and superscripts are reduced by
three point sizes from the previous size.  You can change this default
with the \*L\-p \*Vn\*O command-line argument.
.PP
To aline successive display arguments, place the \*Lmark\*O keyword
before the desired lineup point in the first equation.  Then place
the \*Llineup\*O keyword
at the place that is to line up vertically in subsequent equation lines.
.PP
New keywords or new forms of existing keywords can be defined with
the \*Ldefine\*O keyword.  For example, the following \*Ldefine\*O
expression defines the new keyword \*Lcc\*O to be \*LC Language\*O:
.PP
.oS
define cc % C Language %
.oE
.PP
Whenever \*Lcc\*O appears in the source file, processing with \*Lneqn\*O
causes \*LC Language\*O to appear in the preprocessed or output file.
Note that the delimiting character surrounding the replacement string
can be any character as long as it does not appear in the replacement
string itself.
.PP
The following keywords are also recognized for typeset output:
.TS
tab(~);
l l .
T{
\*Lsum\*O
T}~T{
Produces a large Greek sigma indicating summation.
T}
T{
\*Lint\*O
T}~T{
Produces an integration sign.
T}
T{
\*Linf\*O
T}~T{
Produces an infinity sign.
T}
T{
\*L>=\*O
T}~T{
Produces a greater-than-or-equals sign.
T}
T{
\*L<=\*O
T}~T{
Produces a less-than-or-equals sign.
T}
T{
\*L\->\*O
T}~T{
Produces a right pointing arrow.
T}
T{
\*L<-\*O
T}~T{
Produces a left pointing arrow.
T}
T{
\*L!=\*O
T}~T{
Produces a not equal sign.
T}
.TE
.PP
Greek letters are spelled out in the desired case, for example,
\*Valpha\*O or \*VGAMMA\*O.
Mathematical words like sin, cos, log are output in roman type automatically.
Strings enclosed in double quotation marks ( "...")
are passed through untouched;
this feature permits keywords to be entered as text.
.SH RESTRICTIONS
.PP
To embolden digits, parentheses, and so on, you must enclose them
in quotation marks after the keyword \*Lbold\*O.  For example:
.PP
.oS
bold "12.3".
.oE
.SH EXAMPLES
.PP
.ML
.LI
Input and output for \*Lx\*O with subscript \*Li\*O:
.oS
x sub i   --->   x
                  i
.oE
.LI
Input and output for \*Lx\*O with subscript \*Li\*O and superscript \*L2\*O:
.oS
x sub i sup 2    --->   x2
                         i
.oE
.LI
Input and output for \*Le\*O with a superscript of \*Lx\*O
squared plus \*Ly\*O squared:
.oS
                                     2  2
                                    x +y
e sup {x sup 2 + y sup 2}   --->   e
.oE
.LI
Input and output for the fraction \*Lq\*O over \*Lr\*O:
.oS
                q
q over r  --->   _
                r
.oE
.LI
Input and output for the fraction of \*L1\*O over the square root of a
polynomial that includes a superscript:
.oS
                                        1
1 over sqrt {as sup 2 +bx+c}  --->  _________
                                      2
                                  \e|ax +bx+c
.oE
.LI
Input and output for an expression with a lower and upper limit:
.oS
                                                         n
lim from {n-> inf } sum from 0 to n x sub i   --->   lim Rxi
                                                    n->oo0
.oE
.LI
Input and output for an expression with large left and right braces:
.oS
                                                    { 2 y }
                                                        _2
left {x sup 2 = y sup 2 over alpha right} ~=~ 1  ---> {x +A } = 1
                                                   {     }
.oE
.LI
Input and output for a "pile" expression:
.oS
                                      a
pile { a above b above c }   --->     b
                                      c
.oE
.LI
Input and output for an expression with a matrix:
.oS
matrix {lcol { x sub i above y sub 2 } ccol { 1 above 2 }} --->

       x        1
        i

       y        2
        2
.oE
.LE
.SH RELATED INFORMATION
.PP
\*Lnroff\*O(1), \*Ltbl\*O(1), \*Lms\*O(5),
.EQ
delim off
.EN

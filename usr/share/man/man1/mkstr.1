.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: mkstr.1,v $ $Revision: 3.2.4.2 $ (DEC) $Date: 1994/01/19 19:08:24 $
.\"
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.TH mkstr 1
.SH NAME
.PP
\*Lmkstr\*O \- Creates an error message file
.SH SYNOPSIS
.PP
.sS
\*Lmkstr\*O
\*O[\*L-\*O]
\*Vmessage_file prefix file\*O
\&.\&.\&.
.sE
.PP
The \*Lmkstr\*O command
is used to create files of error messages that can be removed from a
single C source file, or from multiple source files.
.SH FLAGS
.PP
.VL 4m
.LI "\*L-\*O"
Causes messages to be appended to the specified message file, instead
of creating a new file.
.LE
.SH DESCRIPTION
.PP
.iX "mkstr command"
.iX "creating" "error message file"
.iX "files" "error message"
.iX "errors" "message file"
.iX "messages" "error"
The use of \*Lmkstr\*O can reduce the size of
programs that contain many error diagnostics
and reduce system overhead in running such programs.
.PP
The \*Lmkstr\*O command processes each of the specified files,
placing an altered version of the input file in a file whose name
consists of the specified prefix and the original name.
.PP
To process the error messages in the source to the message file,
\*Lmkstr\*O keys on the string \*L'error('\*O in the input
stream.  Each time it occurs,
the C string starting at the \*L''\*O is placed in the message file
and is followed by a null character and a newline character.  The null
character terminates the message so it can be easily used
when retrieved; the newline character makes it possible to
catalog the error message file neatly to see its contents.
.PP
The altered copy of the input file then contains a \*Llseek()\*O
pointer into the file that can be used to retrieve the message to its
appropriate source file, as shown in the following example
of a program that \*Lmkstr\*O produces.
.iS
char efilname[] =  "/usr/lib/pi_strings";
int	efil = -1;

error(int a1, int a2, int a3, int a4)
{
	char buf[256];

	if (efil < 0) {
	efil = open(efilname, 0);
	if (efil < 0) {
oops:
	perror(efilname);
		exit(1);
		}
	}
	if ((lseek(efil, (long) a1, 0)) == (long)-1 ) ||
		read(efil, buf, 256) <= 0)
	goto oops;
	printf(buf, a2, a3, a4);
}
\*O\c
.iE
.\".PP
.\"(Note that the \*Cif ((lseek(efil, \&... <= 0)\*O statement is entered as one
.\"line, not two as shown above.)
.SH EXAMPLES
.PP
.AL
.LI
To put the error messages from the current directory C source files into
a file called \*Lpi_strings\*O, and to put processed copies of the source
for these files into filenames prefixed by \*Lxx\*O, enter:
.iS
mkstr pi_strings xx *.c
\*O\c
.iE
.LI
To append the error messages from an additional source file to
\*Lpi_strings\*O, enter:
.iS
mkstr - pi_strings xx newfile.c
\*O\c
.iE
.LE
.SH RELATED INFORMATION
.PP
Commands:  \*Lxstr\*O(1).
.PP
Functions:  \*Llseek\*O(2).
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: cpp.1,v $ $Revision: 3.2.6.2 $ (DEC) $Date: 1994/01/19 20:16:23 $
.\"
.\" ------------------------------------------------------------------
.\" | Copyright Unpublished, MIPS Computer Systems, Inc.  All Rights |
.\" | Reserved.  This software contains proprietary and confidential |
.\" | information of MIPS and its suppliers.  Use, disclosure or     |
.\" | reproduction is prohibited without the prior express written   |
.\" | consent of MIPS.                                               |
.\" ------------------------------------------------------------------
.\" $Header: /usr/doc/osf1doc/refpages/rcs/src/BASE/DEC/man1/cpp.1,v 3.2.6.2 1994/01/19 20:16:23 Joyce_Demers Exp $
.\"
.TH cpp 1
.SH NAME
.PP
\*Lcpp\*O \- the C language preprocessor
.SH SYNOPSIS
.PP
\*L/usr/lib/cpp\*O [\*Voption\*O ...] [\*Vifile\*O [\*Vofile\*O] ]
.SH DESCRIPTION
.PP
.iX "cpp command"
The \*Lcpp\*O
C language preprocessor is invoked as the
first pass of any C compilation using the \*Lcc\*O(1) command.
Thus the output of
\*Lcpp\*O
is designed to be in a form acceptable as input
to the next pass of the C compiler.
The actions performed by
\*Lcpp\*O
are actually performed by
\*Lcfe\*O
running in
\*Lcpp\*O
mode.
As the C language evolves,
\*Lcpp\*O
and the rest of the C compilation package will be
modified to follow these changes.
Therefore, the use of
\*Lcpp\*O
other than in this framework is not suggested.
The preferred way to invoke
\*Lcpp\*O
is through the \*Lcc\*O(1) command since the functionality of
\*Lcpp\*O
may someday be moved elsewhere.  See \*Lm4\*O(1) for a general macro processor.
.PP
The \*Lcpp\*O preprocessor
optionally accepts two file names as arguments:
.VL 8m
.LI "\*Vifile\*O"
Input to the preprocessor
.LI "\*Vofile\*O"
Output from preprocessor
.LE
.PP
These files default to standard input
and standard output if not supplied.
.\" next sentence added to answer qar 12678
Unless directed to do otherwise, \*Lcpp\*O places the output file
(\*Vofile\*O) in the same directory in which the input file (\*Vifile\*O)
resides.
.PP
The \*Lcpp\*O preprocessor accepts C++-style end of line comments (//).
This means that everything following the two slashes (//) to the end
of the line in which they appear is considered as a comment.
.SH FLAGS
.PP
The following \*Voptions\*O to
\*Lcpp\*O
are recognized:
.VL 8m
.LI "\*L\-P\*O"
Preprocess the input without producing the line control
information used by the next pass of the C compiler.
.LI "\*L\-C\*O"
By default,
\*Lcpp\*O
strips C-style comments.  If the
\*L\-C\*O
option is specified, all comments (except those found on
\*Lcpp\*O
directive lines)
are passed along.
.LI "\*L\-w\*O"
Tells
\*Lcpp\*O
to not issue warning messages.
.LI "\*L\-nestlevel=\*Vn\*O"
Set the limit of nesting levels for #included files, default 50.
.LI "\*L\-oldcomment\*O"
Treat comments in old way by preprocessor, replace with nothing.  Default
is to replace comments by a space.
.LI "\*L\-Q\*O"
By default,
\*Lcpp\*O
uses " (double quote) for the string literal in the \*L_\|_FILE_\|_\*O
expansions.  Specifying
\*L\-Q\*O
option will cause
\*Lcpp\*O
to use ' (single quotes) for the string literal in the \*L_\|_FILE_\|_\*O
expansion.
.\" no pc.1 in tin: This option is asserted for PASCAL programs by \*Lpc\*O(1).
.\" Removed the space between -U and name per QAR 9891.
.LI "\*L\-U\*Vname\*O"
Remove any initial definition of
\*Vname\*O,
where
\*Vname\*O
is a reserved symbol
that is predefined by the particular preprocessor.  If no
\*Vname\*O
is specified, then the
\*L\-U\*O
option is ignored.
To see a list of predefined symbols, enter the
\*Lcc\*O
command with the
\*L\-v\*O
option.
.\" The current list of these possibly reserved symbols includes:
.\" .PD 0
.\" .ne 3v
.\" .RS 10
.\" .TP 21
.\" MIPSEB
.\" in big endian mode
.\" .TP
.\" MTPSEL
.\" in little endian mode
.\" .TP
.\" _\|_STDC_\|_=1
.\" ANSI C
.\" .TP
.\" LANGUAGE_C
.\" when compiling a C program
.\" .TP
.\" LANGUAGE_PASCAL
.\" when compiling a PASCAL program
.\" .TP
.\" LANGUAGE_FORTRAN
.\" when compiling a FORTRAN program
.\" .TP
.\" LANGUAGE_ASSEMBLY
.\" when assembling a program
.\" .TP
.\" LANGUAGE_PL1
.\" when compiling a PL1 program
.\" .TP
.\" LANGUAGE_COBOL
.\" when compiling a COBOL program
.\" .TP
.\" unix
.\" operating system
.\" .TP
.\" mips
.\" target hardware
.\" .TP
.\" host_mips
.\" host hardware
.\" .TP
.\" SYSTYPE_*
.\" corresponding to the systype
.\" .TP
.\" SYSTYPE_BSD
.\" asserted for BSD host systems
.\" .TP
.\" SYSTYPE_SYSV
.\" asserted for SYSV host systems
.\" .RE
.\" .PD
.\" .IP
.\" None of these are defined by
.\" \*Lcpp.
.\" Instead, the compiler drivers,
.\" \*Lcc\*O(1), \*Las\*O(1), \*Lpc\*O(1), and \*Lf77\*O(1)
.\" define these symbols.
.\" .IP
.\" OTHERS
.\" .PD 0
.\" .ne 3v
.\" .RS 10
.\" .TP 21
.\" operating system:
.\" ibm, gcos, os, tss, dmert
.\" .TP
.\" target hardware:
.\" interdata, pdp11, u370, u3b, u3b5, u3b2, u3b20d, vax
.\" .TP
.\" UNIX system variant:
.\" .SM RES\*S,
.\" .SM RT
.\" .TP
.\" \*Llint\*O(1):
.\" lint
.\" .RE
.\" .PD
.LI "\*L\-D\*Vname\*O"
.LI "\*L\-D\*Vname=def\*O"
Define \*Vname\*O
as if by a
\*L\#define\*O
directive.  If no
\*V=def\*O
is given,
\*Vname\*O
is defined as 1.  If no
\*Vname\*O
is given the
\*L\-D\*O
option is ignored.
The
\*L\-D\*O
option has lower precedence than the
\*L\-U\*O
option.
That is, if the same name is used in both a
\*L\-U\*O
option and a
\*L\-D\*O
option, the name will be undefined regardless of the order of the options.
.LI "\*L\-I\*Vdir\*O"
Change the algorithm for searching for
\*L\#include\*O
files
whose names do not begin with \*L/\*O
to look in
\*Vdir\*O
before looking in the directories on the standard list.
Thus,
\*L\#include\*O
files whose names are enclosed in \*L"\|"\*O
will be searched for
first in the directory of the
\*Vifile\*O
argument,
then in directories named in
\*L\-I\*O
options,
and last in directories on a standard list.
For
\*L\#include\*O
files whose names are enclosed in
\*L<>\*O ,
the directory of the
\*Vifile\*O
argument is not searched.
.LI "\*L\-I\*O"
This option changes the algorithm for searching for
\*L\#include\*O
files to never look in the standard list.
.LI "\*L\-M\*O"
Print, one per line on standard output; the path names of included files.
Each is prefixed with
\*Vifile\*O's
last component name with the suffix changed to `.o' followed by a `:' and
a space (for example ``hello.o: /usr/include/stdio.h'').
.LE
.PP
Two special names are understood by
\*Lcpp\*O.
The name
\*L_\|_LINE_\|_\*O
is defined as the current line number (as a decimal integer) as known by
\*Lcpp\*O,
and
\*L_\|_FILE_\|_\*O
is defined as the current file name (as a C string) as known by
\*Lcpp\*O.
They can be used anywhere (including in macros) just as any
other defined name.  Furthermore
\*Lcpp\*O
reserves the names
\*L_\|_DATE_\|_\*O
and
\*L_\|_TIME_\|_\*O
for future use.
.PP
All
\*Lcpp\*O
directives start with lines begun by
\*L#\*O.
The directives are:
.VL 8m
.LI "\*L\#define \*Vname token-string\*O"
Replace subsequent instances of
\*Vname\*O
with
\*Vtoken-string\*O.
.LI "\*L\#define \*Vname\*L(\*Varg\*L, ..., \*Varg\*L) \*Vtoken-string\*O"
Notice that there can be no space between \*Vname\*O and the
\*L(\*O. Replace subsequent instances of \*Vname\*O
followed by a \*L\,\*O
a list of comma separated tokens, and a
\*L)\*O
by
\*Vtoken-string\*O
where each occurrence of an
\*Varg\*O
in the
\*Vtoken-string\*O
is replaced by the corresponding token in the comma separated list.
When a macro with arguments is expanded, the arguments are placed
into the expanded
\*Vtoken-string\*O
unchanged.
After the entire
\*Vtoken-string\*O
has been expanded,
\*Lcpp\*O
re-starts its scan for names to expand at the beginning of the newly
created
\*Vtoken-string\*O.
.LI "\*L\#undef \*Vname\*O"
Cause the definition of
\*Vname\*O
(if any) to be forgotten from now on.
.LI "\*L\#ident \*V""""string""""\*O"
This directive is recognized for compatibility but ignored.
.LI "\*L\#include \*Vfilename\*O"
.LI "\*L\#include\*O <\*Vfilename\*O>"
Include at this point the contents of
\*Vfilename\*O
(which will then be run through
\*Lcpp\*O).
When the
<\*Vfilename\*O> notation is used, \*Vfilename\*O
is only searched for in the standard places.
See the
\*L\-I\*O
option above for more detail.
.LI "\*L\#line \*Vinteger-constant filename\*O"
Causes
\*Lcpp\*O
to generate line control information for the next pass of the
C compiler.
The \*Vinteger-constant\*O
is the line number of the next line
and
\*Vfilename\*O
is the file where it comes from.
If \*V"filename"\*O is not given, the current file name is unchanged.
.LI "\*L\#endif\*O"
Ends a section of lines begun by a test directive
(\*L\#if\*O, \*L\#ifdef\*O, or \*L\#ifndef\*O).
Each test directive must have a matching
\*L\#endif\*O.
.LI "\*L\#ifdef \*Vname\*O"
The lines following will appear in the output if and only if
\*Vname\*O
has been the subject of a previous
\*L\#define\*O
without being the subject of an intervening
\*L\#undef\*O.
.LI "\*L\#ifndef \*Vname\*O"
The lines following will not appear in the output if and only if
\*Vname\*O
has been the subject of a previous
\*L\#define\*O without being the subject of an intervening
\*L\#undef\*O.
.LI "\*L\#if \*Vconstant-expression\*O"
Lines following will appear in the output if and only if the
\*Vconstant-expression\*O
evaluates to non-zero.
All binary non-assignment C operators, the
\*L?:\*O operator, the unary \*L\-\*O,
\*L!\*O, and \*L~\*O operators are all legal in
\*Vconstant-expression\*O.
The precedence of the operators is the same as defined by the C language.
There is also a unary operator
\*Ldefined\*O, which can be used in \*Vconstant-expression\*O
in these two forms:
\*Ldefined\*O(\*Vname\*O) or \*Ldefined \*Vname\*O.
This allows the utility of
\*L\#ifdef\*O and \*L\#ifndef\*O in a \*L\#if\*O directive.
Only these operators, integer constants, and names which
are known by \*Lcpp\*O should be used in \*Vconstant-expression\*O.
In particular, the \*Lsizeof\*O operator is not available.
.sp 6p
To test whether either of two symbols,
\*Vfoo\*O and \*Vfum\*O, are defined, use
.sp
.RS 10
     \#if defined(foo) || defined(fum)
.RE
.LI "\*L\#else\*O"
Reverses the notion of the test directive which
matches this directive.  So if lines previous to
this directive are ignored, the lines following
will appear in the output.
And vice versa.
.LI "\*L\#elif \*Vconstant-expression\*O"
Similar to \*L\#else\*O followed by \*L\#if\*O,
except does not introduce another conditional level.  The same restrictions
to the \*Vconstant-expression\*O for \*L\#if\*O applies. For example:
.sp
.ne 6v
.RS 10
\#if foo==4
.br
a="foo is four";
.br
\#elif foo==2
.br
a="foo is two";
.br
\#else
.br
a="foo is not four nor two";
.br
\#endif
.RE
.sp
The test directives and the possible \*L\#else\*O
directives can be nested.  Any number of \*L\#elif\*O
may occur between a test directive and the corresponding
\*L\#else\*O or \*L\#endif\*O.
.\" .if '\*i'yes' \{
.\" .SH INTERNATIONAL FUNCTIONALITY
.\" .PP
.\" For the
.\" \*L\-D name=def
.\" option, characters from supplementary code sets can be used in
.\" \*Vdef .
.\" .PP
.\" For the directives:
.\" .TP
.\" \*L#define\*Vname\*L(\*Varg\*L, ...,\*Varg\*L )\*Vtoken-string\*O
.\" Characters from supplementary code sets can be used in
.\" \*Vtoken-string .
.\" .TP
.\" \*L#ident\*V"string"\*O
.\" Characters from supplementary code sets can be used in
.\" \*Vstring .
.\" .TP
.\" .PD 0
.\" \*L#if " constant-expression"
.\" .TP
.\" \*L#elif " constant-expression"
.\" .PD
.\" Characters from supplementary code sets can be used in
.\" \*Vconstant-expression .
.\" \}
.LE
.SH NOTES
.PP
When newline characters were found in argument lists for macros
to be expanded, previous versions of
\*Lcpp\*O
put out the newlines as they were found and expanded.
The current version of
\*Lcpp\*O
replaces these newlines with blanks to alleviate problems that the
previous versions had when this occurred.
.SH ERRORS
.PP
The error messages produced by
\*Lcpp\*O
are intended to be self-explanatory.  The line number and filename
where the error occurred are printed along with the diagnostic.
.SH FILES
.PP
.TP 1.5i
/usr/include
standard directory for
\*L\#include
files
.SH RELATED INFORMATION
.PP
\*Lcc\*O(1), \*Las\*O(1),
.\" \*Lpc\*O(1), \*Lf77\*O(1),
\*Lm4\*O(1)
.EQ
delim off
.EN

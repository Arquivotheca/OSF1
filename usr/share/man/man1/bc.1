.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: bc.1,v $ $Revision: 3.2.5.2 $ (DEC) $Date: 1993/10/18 20:33:33 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.TH bc 1
.SH NAME
.PP
\*Lbc\*O \- Provides a processor for arbitrary-precision arithmetic language
.SH SYNOPSIS
.PP
.sS
\*Lbc\*O
\*O[\*L-cl\*O]
\*O[\*Vfile\*O
\&...]
.sE
.PP
The \*Lbc\*O command is an interactive program that provides
unlimited precision arithmetic.  It is a preprocessor for the
\*Ldc\*O command.
.SH FLAGS
.PP
.VL 4m
.LI "\*L-c\*O"
Compiles \*Vfile\*O, but does not invoke \*Ldc\*O.
.LI "\*L-l\*O"
.\" Begin Digital-specific information - CORRECTION
Includes a library of mathematical functions specified by \*Vfile\*O.
Also sets the number of digits retained after the decimal point (the
scale) to 20; by default the scale is 0.
.\" End Digital-specific information - CORRECTION
.LE
.SH DESCRIPTION
.PP
.iX "bc command"
.iX "arithmetic" "arbitrary precision"
.iX "interactive processor"
.iX "arbitrary precision arithmetic"
.iX "precision arithmetic"
.iX "calculator program"
.iX "unlimited precision arithmetic"
The \*Lbc\*O command invokes \*Ldc\*O
automatically, unless the \*L-c\*O (compile only) flag is
specified.  If the \*L-c\*O flag is specified, the output from
\*Lbc\*O goes to the standard output.
.iX "dc command"
.PP
The \*Lbc\*O command lets you specify an input and output base
in decimal, octal, or hexadecimal (the default is decimal).  The command
also has a scaling provision for decimal point notation.  The syntax for
\*Lbc\*O is similar to that of the C language.
.PP
The \*Lbc\*O command takes input first from the specified
file.  When \*Lbc\*O reaches the end of the input
file, it reads standard input.
.PP
In the following description of syntax for \*Lbc\*O,
\*Vletter\*O means one of the letters \*La\*O-\*Lz\*O.
.SS Comments
.\" Begin Digital-specific information - CORRECTION
.\" deleted .PP after .SS per tman
.\" End Digital-specific information - CORRECTION
Comments are enclosed in \*L/*\*O and \*L*/\*O.
.SS Names
.\" Begin Digital-specific information - CORRECTION
.\" deleted .PP after .SS per tman
.\" End Digital-specific information - CORRECTION
Simple variables: \*Vletter\*O
.PP
Array elements: \*Vletter\*O[\*Vexpression\*O]
.PP
The words \*Libase\*O, \*Lobase\*O, and \*Lscale\*O
.PP
Comments are enclosed in /* and */
.SS "Other Operands"
.\" Begin Digital-specific information - CORRECTION
.\" deleted .PP after .SS per tman
.\" End Digital-specific information - CORRECTION
Arbitrarily long numbers with optional sign and decimal point.
.VL 12m
.LI "\*L(\*O\*Vexpression\*O\*L)\*O"
.LI "\*Lsqrt (\*O\*Vexpression\*O\*L)\*O"
.LI "\*Llength (\*O\*Vexpression\*O\*L)\*O"
Number of significant decimal digits
.LI "\*Lscale (\*O\*Vexpression\*O\*L)\*O"
Number of digits to right of decimal point
.LI "\*Vletter\*O \*L(\*O\*Vexpression\*L,\*O\&.\&.\&.\*L,\*Vexpression\*O\*L)\*O"
.LE
.SS Operators
.\" Begin Digital-specific information - CORRECTION
.\" deleted .PP after .SS per tman
.\" End Digital-specific information - CORRECTION
\(pl  -  *  /  %  ^  (% is remainder; ^ is power)
.PP
\(pl\(pl  -- (prefix and suffix; apply to names)
.PP
=\^=  <\^=  >\^=  !\^=  <\^>
.PP
=  =\^\(pl  =\^-  =\^*  =\^/  =\^%  \&^=
.PP
\(pl\^=  -\^=  *\^=  /\^=  %\^=
.SS Statements
.\" Begin Digital-specific information - CORRECTION
.\" deleted .PP after .SS per tman
.\" End Digital-specific information - CORRECTION
\*Vexpression\*O
.PP
{\*Vstatement\*L;\*O\&.\&.\&.\*L;\*Vstatement\*O}
.PP
\*Lif (\*O\*Vexpression\*O\*L)\*O \*Vstatement\*O
.PP
\*Lwhile (\*O\*Vexpression\*O\*L)\*O  \*Vstatement\*O
.PP
\*Lfor (\*O\*Vexpression\*L;\*Vexpression\*L;\*Vexpression\*O\*L)\*O \*Vstatement\*O
.PP
\*L(\*Onull statement\*L)\*O
.PP
\*Lbreak\*O
.PP
\*Lquit\*O
.SS "Function Definitions"
.\" Begin Digital-specific information - CORRECTION
.\" deleted .PP after .SS per tman
.\" End Digital-specific information - CORRECTION
.iS
define \*Vletter \*L( \*Vletter\*L,\*O\&.\&.\&.\*L,\*Vletter\*O \*L) {\*O

	\*Lauto \*Vletter\*L,\*O\&.\&.\&.\*L,\*Vletter\*O
	\*Vstatement\*L;\*O\&.\&.\&.\*Vstatement\*O
	\*Lreturn ( \*Vexpression\*O \*L)
}
\*O\c
.iE
.SS "Functions in -l Math Library"
.\" Begin Digital-specific information - CORRECTION
.\" deleted .PP after .SS per tman
.\" End Digital-specific information - CORRECTION
.VL 4m
.LI "\*Ls(x)\*O"
sine
.LI "\*Lc(x)\*O"
cosine
.LI "\*Le(x)\*O"
exponential
.LI "\*Ll(x)\*O"
log
.LI "\*La(x)\*O"
arctangent
.LI "\*Lj(n,x)\*O"
Bessel function
.LE
.SS General Syntax
.\" Begin Digital-specific information - CORRECTION
.\" deleted .PP after .SS per tman
.\" End Digital-specific information - CORRECTION
All function parameters are passed by value.
.PP
The value of a statement that is an expression is displayed, unless
the main operator is an assignment.  A semicolon or newline character
separates statements.  Assignments to \*Lscale\*O control the
number of decimal places printed on output and maintained during
multiplication, division, and exponentiation.  Assignments to
\*Libase\*O or \*Lobase\*O set the input and output
number radix, respectively.
.PP
The same letter may refer to an array, a function, and a simple
variable simultaneously.  All variables are global to the program.
Automatic variables are pushed down during function calls.
When you use arrays as function parameters, or define them as
automatic variables, empty brackets must follow the array name.
.PP
All \*Lfor\*O statements must have all three \*Vexpression\*Os.
.PP
The \*Lquit\*O statement is interpreted when read, not when executed.
.SH EXAMPLES
.PP
When you enter \*Lbc\*O expressions directly from the keyboard,
press the End-of-File key sequence to end the \*Lbc\*O session and
return to the shell command line.
.VL 3m
.LI
To use \*Lbc\*O as a calculator, proceed as follows:
.IP
Enter:
.iS
$ bc
1/4
\*O\c
.iE
.IP
The system responds as follows:
.oS
0
\*O\c
.oE
.IP
Enter:
.iS
scale = 1  /* Keep 1 decimal place  */
1/4
\*O\c
.iE
.IP
The system responds as follows:
.oS
0.2
\*O\c
.oE
.IP
Enter:
.iS
scale = 3  /* Keep 3 decimal places */
1/4
\*O\c
.iE
.IP
The system responds as follows:
.oS
0.250
\*O\c
.oE
.IP
Enter:
.iS
16\(pl63/5
\*O\c
.iE
.IP
The system responds as follows:
.oS
28.600
\*O\c
.oE
.IP
Enter:
.iS
(16\(pl63)/5
\*O\c
.iE
.IP
The system responds as follows:
.oS
15.800
\*O\c
.oE
.IP
Enter:
.iS
71/6
\*O\c
.iE
.IP
The system responds as follows:
.oS
11.833
\*O\c
.oE
.IP
Enter:
.iS
1/6
\*O\c
.iE
.IP
The system responds as follows:
.oS
0.166
\*O\c
.oE
.IP
You may type the comments (enclosed in \*L/* */\*O), but
they are provided only for your information.
The \*Lbc\*O command displays the
value of each expression when you press \*L<Return>\*O, except for
assignments.
.LI
To convert numbers from one base to another, proceed as follows:
.IP
Enter:
.iS
bc
obase = 16	/* Display numbers in Hexadecimal */
ibase = 8		/* Input numbers in Octal	*/
12
\*O\c
.iE
.IP
The system responds as follows:
.oS
A
\*O\c
.oE
.IP
Enter:
.iS
123
\*O\c
.iE
.IP
The system responds as follows:
.oS
53
\*O\c
.oE
.IP
Enter:
.iS
123456
\*O\c
.iE
.IP
The system responds as follows:
.oS
A72E
\*O\c
.oE
.LI
To write and run C-like programs, proceed as follows:
.IP
Create the following file \*Lprog.bc\*O:
.iS
/* compute the factorial of n */

  define f(n) {
	auto i, r;

	r = 1;
	for (i=2; i<=n; i\(pl\(pl) r =* i;
	return (r);
  }
.iE
.IP
Enter:
.iS
bc -l prog.bc
\*O\c
.iE
.IP
This interprets the \*Lbc\*O program saved in
\*Lprog.bc\*O, then reads more \*Lbc\*O command statements from standard
input (the keyboard).  Starting the \*Lbc\*O command with the \*L-l\*O
flag makes the math library available.  This example uses the
\*Le\*O (exponential) function from the math library, and
\*Lf\*O is defined in the program \*Lprog.bc\*O.
.IP
Enter:
.iS
e(2)	/*  e squared	*/
\*O\c
.iE
.IP
The system responds as follows:
.oS
7.38905609893065022723
\*O\c
.oE
.IP
Enter:
.iS
f(5)	/*  5 factorial */
\*O\c
.iE
.IP
The system responds as follows:
.oS
120
\*O\c
.oE
.IP
Enter:
.iS
f(10)	/* 10 factorial */
\*O\c
.iE
.IP
The system responds as follows:
.oS
3628800
\*O\c
.oE
.IP
The statement following a \*Lfor\*O or \*Lwhile\*O statement
must begin on the same line.
.LI
To convert an infix expression to Reverse Polish Notation (RPN), enter:
.IP
Enter:
.iS
bc -c
(a * b) % (3 \(pl 4 * c)
\*O\c
.iE
.IP
The system responds as follows:
.oS
lalb* 3 4lc*\(pl%ps.
\*O\c
.oE
.IP
This compiles the \*Lbc\*O infix-notation expression into one
that the \*Ldc\*O command can interpret.
The \*Ldc\*O command evaluates extended RPN expressions.
In the compiled output, the lowercase \*Ll\*O before each variable
name is the \*Ldc\*O subcommand to load the value of the variable
onto the stack.  The \*Lp\*O displays the value on top of the stack,
and the \*Ls.\*O discards the top value
by storing it in register \&. (dot).
You can save the RPN expression in a file for \*Ldc\*O to
evaluate later by redirecting the standard output of this command.
.LE
.SH FILES
.PP
.VL 11m
.LI "\*L/usr/share/lib/lib.b\*O"
Mathematical library.
.LI "\*L/usr/bin/dc\*O"
Desk calculator proper; uses \*Lbc\*O as preprocessor.
.LE
.SH RELATED INFORMATION
.PP
Commands:  \*Ldc\*O(1).
.EQ
delim off
.EN

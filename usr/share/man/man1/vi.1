.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: vi.1,v $ $Revision: 3.2.6.5 $ (DEC) $Date: 1993/12/17 17:17:17 $
.\" 
.\"
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\"
.TH vi 1
.SH NAME
.PP
\*Lvi\*O, \*Lvedit\*O, \*Lview\*O \- Edits files with a full screen display
.SH SYNOPSIS
.PP
.iX "vi command"
.sS
.in +.5i
.ti -.5i
\*Lvi\*O
\*O[\*L\(hyls\*O]
\*O[\*L\(hyR\*O]\ |\ \*O[\*L\(hyr\*O]
\*O[\*L\(hyc \*Vsubcommand\*O]
\*O[\*L\(hyt\*O\ \*Vtag\*O]
\*O[\*L\(hyw\*Vnumber\*O]
\*O[\*L+\*Vsubcommand\*O]
\*O[\*L\(hy\*O]
\*O[\*Vfile\*O\ \&.\&.\&.]
.in -.5i
.PP
.in +.5i
.ti -.5i
\*Lview\*O
\*O[\*L\(hyl\*O]
\*O[\*L\(hyt\*O\ \*Vtag\*O]
\*O[\*L\(hyc \*Vsubcommand\*O]
\*O[\*L\(hyw\*Vnumber\*O]
\*O[\*L+\*Vsubcommand\*O]
\*O[\*L\(hy\*O]
\*O[\*Vfile\*O\ \&.\&.\&.]
.in -.5i
.PP
\*Lvedit\*O
\*O[\*L\(hyl\*O]
\*O[\*L\(hyR\*O]\ |\ \*O[\*L\(hyr\*O]
\*O[\*L\(hyt\*O\ \*Vtag\*O]
\*O[\*L\(hyw\*Vnumber\*O]
\*O[\*L\(hy\*O]
\*O[\*Vfile\*O\ \&.\&.\&.]
.sE
.PP
The \*Lvi\*O command is a display editor that is based on an underlying
line editor (\*Lex\*O).
.SH FLAGS
.PP
.VL 4m
.LI "\*L-c \*Vsubcommand\*O"
Executes the specified \*Lex\*O subcommand (\*Vcommand\*O)
before displaying the file for which the editor was invoked.
.LI "\*L-l\*O"
Indents appropriately for LISP code, and accepts the \*L(\*O, \*L)\*O,
\*L{\*O, \*L}\*O,
\*L[\*O, and \*L]\*O characters (parentheses, braces, and
brackets) as text rather than
interpreting them as \*Lvi\*O subcommands.  The LISP modifier is
active in \*Lopen\*O or \*Lvisual\*O modes.
.LI "\*L-r[\*Vfile\*O]"
Recovers \*Vfile\*O after an editor or system crash.  If you do not
specify a \*Vfile\*O, \*Lvi\*O displays a list of all saved files.
.LI "\*L-s\*O"
Invokes \*Lvi\*O in \*Lopen\*O mode.  (Silent mode.)
.LI "\*L-R\*O"
Sets the \*Lreadonly\*O option to protect the file
against overwriting.
.LI "\*L-t \*Vtag\*O"
Edits the file containing the \*Vtag\*O and positions the
editor at its definition.
To use this flag, you must first create a database of function names
and their locations using the \*Lctags\*O command.
.LI "\*L-v\*O"
Invokes the \*Lvisual\*O editor.
When the \*L-v\*O flag is specified, an enlarged set of
subcommands is available, including screen editing and cursor movement
features.
.LI "\*L-w\*Vnumber\*O"
Sets the default window size to \*Vnumber\*O.  This is useful when
you use the editor over a low-speed line.
.LI "\*L-\*O"
Suppresses all interactive user feedback.  If you use this flag, file
input/output errors do not generate an error message.
.LI "\*L\(pl[\*Vsubcommand\*O]"
Performs the \*Lex\*O subcommand before editing begins.  If you
do not specify \*Vsubcommand\*O, the cursor is placed on the first line
of the file.
.LE
.SH DESCRIPTION
.PP
The \*Lex\*O editor subcommands can be used within the \*Lvi\*O editor,
because \*Lvi\*O is based on \*Lex\*O.  The \*Lview\*O command is a read-only
version of \*Lvi\*O; the \*Lreadonly\*O option is set to protect files
during browsing.  The \*Lvedit\*O command is a version of
\*Lvi\*O intended for beginners.  In it, the \*Lreport\*O
option is set to \*L1\*O, the \*Lshowmode\*O option is set,
and the \*Lnovice\*O
option (making \*Lvedit\*O a line editor, rather than a screen editor)
is set.  (For more information on these options, see \*LSetting Options\*O.)
.PP
The \*Vfile\*O argument specifies the files to be
edited.  If you supply more than one \*Vfile\*O on the command
line, \*Lvi\*O edits each file in the order specified.
.PP
When you use \*Lvi\*O, changes you make to a file are reflected
on your display.  The position of the cursor on the display indicates
its position within the file.  The subcommands affect the file at the
cursor position.
.SS Limitations of the vi Editor
The maximum limits of the \*Lvi\*O editor are as follows:
.ML
.LI
2048 bytes per line
.LI
256 bytes per global command list
.LI
128 bytes in the previous inserted and deleted text
.LI
128 bytes in a shell escape command
.LI
128 bytes in a string-valued option
.LI
30 bytes in a tag name
.LI
128 map macros with 2048 bytes total.
.LE
.SS Editing Modes
The \*Lvi\*O editor has the following operational modes:
.VL 4m
.LI "Command mode"
When you start the \*Lvi\*O editor, it is in Command mode.
Any subcommand can be entered from this mode, except
commands that can only be used in the Text Input mode
(those subcommands that make corrections during text insertion).
When subcommands and the other modes end, \*Lvi\*O returns to Command mode.
Pressing the \*L<Esc>\*O key cancels a partial subcommand.
.LI "Text Input mode"
Entered by the \*La\*O, \*LA\*O, \*Li\*O,
\*LI\*O, \*Lo\*O, \*LO\*O, \*Lc\*Vx\*O (where \*Vx\*O represents
the scope of the subcommand), \*LC\*O,
\*Ls\*O, \*LS,\*O and \*LR\*O subcommands.
After entering one of these commands,
you can enter text into the editing
buffer at the current cursor position.
To return to Command mode, press \*L<Esc>\*O for normal exit
or press the Interrupt key sequence to end abruptly.
.LI "Last Line mode"
Some subcommands (those with the prefix \*L:\*O (colon),
\*L/\*O (slash), \*L?\*O (question mark),
or \*L!!\*O) read input on a line displayed at the bottom of the
screen.  When you enter the initial
character, \*Lvi\*O places the cursor at the bottom of the screen,
where you enter the remaining characters of the command.
Press \*L<Return>\*O to perform the subcommand
and enter the Interrupt key sequence to cancel it.
.IP
When \*L!!\*O is used, the cursor moves only after the two exclamation
points are entered.  When \*L:\*O is used, special meaning is given to
the following characters if used as counts before a command:
.VL 4m
.LI "\*L%\*O"
All lines, regardless of cursor position
.LI "\*L$\*O"
Last line
.LI "\*L\&.\*O"
Current line
.LE
.LE
.SS Setting Options
The \*Lvi\*O editor allows you to customize options
so that you can use the editor for a specific task.  Use the
\*Lset\*O command to set or change an option.  To
view the current setting of options, enter \*L:set
all\*O while in \*Lvi\*O Command mode.
.PP
Some options are set to a string or a number value; other options are
simply turned on or off.  To
change an option that is set to a value,
enter a command in the form
\*L:set \*Voption\*L=\*Vvalue\*O.
To toggle an option that can be set to
on or off, enter a line of the form
\*L:set\*O \*Voption\*O to set it to on or
\*L:set no\*Voption\*O to set it to off.
.PP
Options can be abbreviated in a \*Lset\*O command.  The
following table lists some of \*Lvi\*O's options, along with
abbreviations and descriptions:
.PP
.TS
tab(~);
lfHB lfHB lfHB
l l l.
Option~Abbreviation~Description
.sp
[no]autoindent~ai~T{
Indents automatically in Text mode
to the indentation on the previous
line by using the spacing between tab stops specified by the
\*Lshiftwidth\*O option.  The
default is \*Lnoai\*O.  To back the cursor up to the
previous tab stop, type \*L<Ctrl-d>\*O.  This option is not
in effect for global commands.
T}
.sp
[no]autoprint~ap~T{
Prints the current line after any command that changes the
editing buffer. The default is \*Lap\*O.  This option applies
only to the last command in a sequence of commands on a single line,
and is not in effect for global commands.
T}
.sp
[no]autowrite~aw~T{
Writes the editing buffer to the file automatically before the
\*L:n\*O, \*L:ta\*O, \*L<Ctrl-a>\*O,
and \*L!\*O subcommands if the editing buffer was changed
since the last \*Lwrite\*O command.  The default is \*Lnoaw\*O.
T}
.sp
[no]beautifying text~bf~T{
Prevents user from entering
control characters (except for tab, newline, and
formfeed) in the editing buffer during text entry.  The default is
\*Lnobf\*O.  This option does apply to command input.
T}
.sp
directory~dir=~T{
Displays the directory that contains the editing buffer.  The
default is \*Ldir=/var/tmp\*O.
T}
.sp
[no]edcompatible~ed~T{
Retains global (\*Lg\*O)
and confirms (\*Lc\*O) subcommand suffixes during multiple
substitutions and causes the read (r) suffix to work like the
\*Lr\*O subcommand.  The default is \*Lnoed\*O.
T}
.sp
[no]errorbells~eb~T{
Precedes error messages with an \*L<Alert>\*O character.
Setting this option off (\*Lnoeb\*O) does not suppress the alerting
in visual mode.  The default is \*Lnoeb\*O.
T}
.sp
[no]\*Lexrc~"!~T{
If not set, ignores any \*L\&.exrc\*O file in the current directory
during initialization, unless the current directory is that named
by the \*LHOME\*O variable.  The default is \*Lnoexrc\*O.
T}
.sp
[no]flash~fl~T{
Uses visual flash rather than audible bell.  The default is \*Lfl\*O.
T}
.sp
hardtabs~ht=~T{
Tells \*Lvi\*O
the distance between the hardware tab stops on your display.  The
default is \*Lht=8\*O.
T}
.sp
[no]ignorecase~ic~T{
Ignores the distinction between uppercase and lowercase while
searching for regular expressions.  The default is \*Lnoic\*O.
T}
.sp
[no]lisp~lisp~T{
Enters \*Lvi\*O in LISP mode.  In this mode, \*Lvi\*O appropriately
indents for LISP code and the \*L(\*O, \*L)\*O, \*L{\*O, \*L}\*O,
\*L[[\*O, and \*L]]\*O.  The default is \*Lnolisp\*O.
T}
.sp
[no]list~list~T{
Displays text with tabs and the end of lines marked.  Tabs are
displayed as \*L^I\*O and the end of lines as
\*L$\*O.  The default is \*Lnolist\*O.
T}
.sp
[no]magic~magic~T{
Treats the characters \*L\&.\*O, \*L[\*O, and \*L*\*O as
special characters in scans.  In Off mode, only the \*L(\*O, \*L)\*O,
and \*L$\*O characters retain special meanings; however, special meaning of
other characters can still be invoked by preceding the character with a
\*L\e\*O (backslash).  The default is \*Lmagic\*O.
T}
.sp
[no]modeline~modeline~T{
Runs an editor command line if found in the first five and the
last five lines of the file.  An editor command line may be
anywhere in a line.  To be recognized
as a command line, it must contain a space or a tab followed by
the string \*Lex:\*O or \*Lvi:\*O.  The command
line is ended by a second \*L:\*O (colon).  The editor tries to
interpret any data between the first and second \*L:\*O
as editor commands.  The default is \*Lnomodeline\*O.
T}
.sp
[no]number~nu~T{
Displays lines prefixed with their line numbers.  The default
is \*Lnonu\*O.
T}
.sp
[no]optimize~opt~T{
Speeds up the operation of terminals that do not have
cursor addressing.  The default is \*Lnoopt\*O.
T}
.sp
paragraphs~para=~T{
Defines macro names that start paragraphs.  The
default is \*Lpara=IPLPPPQPP LIpplpipnpbp\*O.  Single letter
\*Lnroff\*O macros, such as \*L\&.P\*O must include the
space as a quoted character if respecifying a paragraph.
T}
.sp
[no]prompt~prompt~T{
Prompts for command mode input with a \*L:\*O (colon).
When not set, no prompt is displayed.  The default is on.
T}
.sp
readonly~"~T{
Allows writing to a different file.  In addition, the write can be
forced by using the \*L!\*O (exclamation point) character (see the
editor command \*Lwrite\*O).  The default is off, unless the file
lacks write permission or the \*L-R\*O flag is specified.
T}
.sp
[no]redraw~re~T{
Simulates a smart display on a dumb display.  The default is \*Lnore\*O.
T}
.sp
[no]remap~remap~T{
Enables following of map keys.  For example, if \*Lremap\*O
is set, \*Lmap u k map r u\*O causes \*Lr\*O to map to \*Lk\*O.
If \*Lnoremap\*O is set, \*Lr\*O maps to \*Lu\*O.  The default
is \*Lremap\*O.
T}
.sp
report~report=~T{
Sets the number of repetitions of a command before a message
is displayed.  For subcommands that can produce a number of messages,
such as global subcommands, the messages are displayed when the
command is completed.  The default is \*Lreport=5\*O.
T}
.sp
scroll~scr=~T{
Sets the number of lines to be scrolled when you
scroll the screen up or down.  The default scroll is
one-half the size of the screen.
T}
.sp
sections~sect=~T{
Defines macro names that start sections.  The
default is \*Lsect=NHSHH HUuhsh\(plc\*O.  Single letter
\*Lnroff\*O macros, such as \*L\&.P\*O must include the
space as a quoted character if respecifying a paragraph.
T}
.sp
shell~sh=~T{
Defines the shell for \*L!\*O or \*L:!\*O commands.
The default is the value of the \*LSHELL\*O environment variable.
T}
.sp
shiftwidth~sw=~T{
Sets the distance for the software tab stops used by
\*Lautoindent\*O, the shift commands (\*L>\*O and \*L<\*O), and the
text input commands (\*L<Ctrl-d>\*O and \*L<Ctrl-t>\*O) to allow the
editor to indent text and move back to a previous indentation.
The default is \*Lsw=8\*O.
T}
.sp
[no]showmatch~sm~T{
Shows the matching open parenthesis \*L(\*O  or open brace \*L{\*O as
you type the close parenthesis ) or close brace }.  The
default is \*Lnosm\*O.
T}
.sp
[no]showmode~smd~T{
Displays mode indicator at the bottom of the screen when in the insert
or replace mode.  The default is \*Lnosmd\*O.
T}
.sp
[no]slowopen~slow~T{
Postpones updating the display during inserts.  The default is
\*Lnoslow\*O.
T}
.sp
[no]sourceany~~T{
Allows the use of the \*Lsource\*O command on a file that a user
does not own.  The default is \*Lnosourceany\*O.
T}
.sp
tabstops~ts=~T{
Sets the distance between tab stops when a file is displayed.
The default is \*Lts=8\*O.
T}
.sp
taglength~tl=~T{
Determines length of tag.
T}
.sp
[no]tags~tag~T{
Specifies a list of possible filenames of tag files.  The default
is \*Ltags /usr/lib/tags\*O.
T}
.sp
term~term=~T{
Sets the kind of display you are using.  The default is
\*Lterm=$TERM\*O, where \*L$TERM\*O is the value of the
\*LTERM\*O shell variable.
T}
.sp
[no]terse~terse~T{
Allows \*Lvi\*O to display the short form of messages.  The default
is \*Lnoterse\*O.
T}
.sp
[no]timeout~to~T{
Sets a time limit of 2 seconds on entry of characters.  This
limit allows the characters in a macro to be entered and processed as
separate characters when \*Ltimeout\*O is set.  To
resume use of the macro, set \*Lnotimeout\*O.  The
default is \*Lto\*O.
T}
ttytype~tty=~T{
Same as \*Lterm\*O.
T}
.sp
[no]warn~warn~T{
Displays a warning message before the \*L!\*O subcommand executes
a shell command if this is the first time you issued
a shell command after a given set of changes were made in
the editing buffer, but not written to a file.
The default is \*Lwarn\*O.
T}
.sp
window~wi=~T{
Sets the number of lines displayed in one window
of text.  The default is dependent on the baud rate at which
you are operating:  600 baud or less / 8 lines, 1200 baud / 16 lines,
higher speeds / full screen minus 1.
T}
.sp
wrapmargin~wm=~T{
Sets the margin for automatic wordwrapping from one line to
the next.  A value of 0 indicates no wordwrapping.
The default is \*Lwm=0\*O.
T}
.sp
[no]wrapscan~ws~T{
Allows string searches to wrap from the end of the editing
buffer to the beginning.  The default is \*Lws\*O.
T}
.sp
wraptype~wt=~T{
Causes words to be wrapped in Japanese style.
\*Lwraptype=general\*O causes general-purpose wrap on word breaks,
where word break is defined as whitespace or space between two
nonASCII characters.  \*Lgeneral\*O is a combination of \*Lword\*O
and \*Lflexible\*O.
\*Lwraptype=word\*O causes wrap on words.  \*Lwraptype=rigid\*O causes
wrap on column and before closing punctuation.
\*Lwraptype=flexible\*O causes wrap on column, but closing punctuation
may extend past the margin.
T}
.sp
[no]writeany~wa~T{
Turns off the checks usually made before a \*Lwrite\*O command.  The
default is \*Lnowa\*O.
T}
.TE
.SS Defining Macros
If you use a subcommand or
sequence of subcommands frequently, you can create a
macro that issues the subcommand or sequence
when you call a macro.  To create a macro, enter
the sequence of subcommands into an editing buffer named with a letter
of the alphabet.  When used as buffer names, lowercase ASCII
letters \*La\*O through
\*Lz\*O overlay the contents of the buffer, while uppercase
ASCII letters \*LA\*O
through \*LZ\*O append text to the previous contents of the buffer, allowing the
building of a macro piece by piece.
.PP
To invoke the macro, enter \*L@\*Vx\*O, where \*Vx\*O is
the letter name of the buffer.  Enter
\*L@\*L@\*O  to repeat the last macro you invoked.
.SS Mapping Keys
You can use the \*Lmap\*O command to set a keystroke to a
subcommand or a sequence of subcommands.  To set a key mapping,
enter \*L:map\*O \*Vkey\*O \*Vsubcommand\*O
where \*Vkey\*O is the key to which you want to assign a
subcommand or sequence of subcommands and \*Vsubcommand\*O
is the subcommand or sequence of subcommands.  For example,
to set \*L@\*O to delete lines, enter:
.iS
:map  @  dd
\c
.iE
.PP
In this example,
\*L@\*O is the key to which the subcommand
is assigned and \*Ldd\*O is the subcommand.
.PP
In the next example, a subcommand sequence is mapped to a key:
.iS
:map * {>}
\c
.iE
.PP
The \*L*\*O (asterisk) is the key to which the subcommand sequence
is assigned and \*L{>}\*O
is the subcommand sequence.  The \*L{\*O (open brace) moves the
cursor to the beginning of the paragraph and the \*L>\*O (right angle
bracket) indents the paragraph to the next \*Lshiftwidth\*O.
.PP
To display the list of the current key mappings while you are
in Command mode, enter the \*L:map\*O command.
You can also remove a key mapping.  To remove a key mapping, enter
\*L:unmap\*O \*Vstring\*O or \*L:unmap!\*O \*Vstring\*O where
\*Vstring\*O is the string used after the
\*L:map\*O command to set the key and subcommand sequence.
For example, to remove key mapping for the previous example, enter:
.iS
:unmap *
\c
.iE
.PP
If function keys are defined for your terminal, they can be put in a
\*Lmap\*O or \*Lunmap\*O command by
typing \*L<Ctrl-v>\*O then pressing the desired key.  In this way,
function keys that are unused during editing can be mapped to useful
editing subcommand sequences.
.PP
If the \*L!\*O (exclamation point) character is appended to the
command name \*Lmap\*O (\*Lmap!\*O),
the mapping is effective during input mode rather
than during visual mode.
.SS Abbreviations
You can define abbreviations for long phrases that you use often.
\*Lvi\*O then automatically expands these abbreviations whenever
you enter them in insert mode. Only single-byte characters can appear in
\*Labbr_string\*O; \*Labbr_string\*O cannot contain Asian multi-byte characters.
.PP
To define an abbreviation, enter:
.iS
:abbr \*Vabbreviation\*O \*Vphrase\*O\c
.iE
.PP
\*Vabbreviation\*O is the abbreviation you specify for the longer
text specified by
\*Vphrase\*O.  For example, to specify the abbreviation
\*Limho\*O for the phrase \*LIn my humble opinion\*O, enter:
.iS
:abbr imho In my humble opinion
\c
.iE
.SS Keeping a Customized Change
When you customize \*Lvi\*O from the \*Lvi\*O command
line, the customized editor is in effect until you exit the editor.  If
you want such things as option settings and key mappings
so you can reuse them, you must put them in the \*L\&.exrc\*O file
in your home directory.
.\" Begin Digital-specific information CORRECTION
.\" Corrected EXINIT per QAR 5243, which was sent to the OSF.
\*Lvi\*O processes the commands given in the \*LEXINIT\*O variable
.\" End Digital-specific information CORRECTION
and then reads this file each time you invoke it.  When you type the commands
in a file, do not type the \*L:\*O (colon)
before each command.  The \*L:\*O is
required only if you are in the editor.  Here is an example of an
\*L\&.exrc\*O file:
.iS
set ai aw
set wm=5
map  @  dd
\c
.iE
.SS vi Character Sets
The collation sequence, as defined by the value of the \*LLC_COLLATE\*O
environment variable, defines the alphanumeric set used by your system.
This table affects the performance of \*Lvi\*O macros and subcommands.
.PP
The \*Lvi\*O editor uses the collation sequence to distinguish between a
small word and a big word.  A small word is bounded by letters
or numbers as defined in the collation table.  For example,
\*Lisn't\*O is two small words.  The ' (apostrophe) is not a number or
an alphabetic character, and it bounds both the small word \*Lt\*O and
the small word \*Lisn\*O.  A big word is bounded by spaces, tabs, or
newline indicators.  For example, \*Lstop\*O is a big word.  For more
information, see the section \*LMoving to Words\*O, and
the reference page for the \*Lctab\*O command.
.SS Subcommand Syntax
.sS
[\*Vnamed\(ulbuffer\*O] [\*Voperator\*O] \
[\*Vnumber\*O] \*Vargument\*O
.sE
.PP
Surrounding brackets indicate optional items.
.VL 4m
.LI "\*L[\*Vnamed\(ulbuffer\*O]"
A temporary text storage area.
.LI "\*L[\*Voperator\*O]"
Specifies the subcommand or
action; instructs the \*Lvi\*O editor.
.LI "\*L[\*Vnumber\*O]"
A whole decimal value
that specifies either the extent of the action or a line address.
The \*Lvi\*O editor interprets this number in one of the following
ways:
.AL
.LI
Go to line \*Vnumber\*O:
.iS
5G
10z<Return>
\*O\c
.iE
.LI
Go forward \*Vnumber\*O columns.
.iS
25<Space>
\*O\c
.iE
.LI
Scroll \*Vnumber\*O of lines:
.iS
10<Ctrl-d>
10<Ctrl-u>
\*O\c
.iE
.LI
Delete \*Vnumber\*O lines:
.iS
6dd
\*O\c
.iE
.LI
\*L%\*O means \*Vall\*O.  To yank \*Vall\*O lines:
.iS
%y
\*O\c
.iE
.IP
(The preceding command replaces \*L1,$y\*O.)
.LE
.LI "\*Vargument\*O"
Specifies what to act on.  This can be a text
object (a character, word, sentence,
paragraph, section, or character string) or a text position (a line,
position in the current line, or screen position).
.LE
.SS Moving Within a File
Enter the following subcommands in Command mode.  You can cancel an
incomplete subcommand by pressing the \*L<Esc>\*O key.
.VL 4m
.LI "\*L<Left Arrow>\*O, \*Lh\*O, \*L<Ctrl-h>\*O"
Moves the cursor one character to the left.
.LI "\*L<Down Arrow>\*O, \*Lj\*O, \*L<Ctrl-j>\*O, \*L<Ctrl-n>\*O"
Moves the cursor down one line, remaining in the same column.
.LI "\*L<Up Arrow>\*O, \*Lk\*O, \*L<Ctrl-p>\*O"
Moves the cursor up one line, remaining in the same column.
.LI "\*L<Right Arrow>\*O, \*Ll\*O \*L<Space>\*O"
Moves the cursor one character to the right.
.IP
Long lines:  Lines over one screen width are wrapped but not broken.
When using the Up Arrow or Page Up key, \*L@\*O lines are added at the bottom
of the screen when too few physical lines are available to display the
complete line.  The Down Arrow key moves the entire line off the
screen at once.
.LE
.SS Character Positioning Within a Line
Enter the following subcommands in Command mode.
.VL 4m
.LI "\*L^\*O"
Moves the cursor to the first nonspace character.
.LI "\*L0\*O"
Moves the cursor to the beginning of the line.
.LI "\*L$\*O"
Moves the cursor to the end of the line.
.LI "\*Lf\*Vx\*O"
Moves the cursor to the next \*Vx\*O character.
.LI "\*LF\*Vx\*O"
Moves the cursor to the last \*Vx\*O character.
.LI "\*Lt\*Vx\*O"
Moves the cursor to one column before the next \*Vx\*O character.
.LI "\*LT\*Vx\*O"
Moves the cursor to one column after the last \*Vx\*O character.
.LI "\*L;\*O"
Repeats the last \*Lf\*O, \*LF\*O, \*Lt\*O, or \*LT\*O subcommand.
.LI "\*L,\*O"
Repeats the last \*Lf\*O, \*LF\*O, \*Lt\*O, or
\*LT\*O subcommand in the opposite direction.
.LI "\*Vnumber\*L<Space>\*O"
Moves the cursor to the specified column.
.LE
.SS Moving to Words
Enter the following subcommands in Command mode.
.VL 4m
.LI "\*Lw\*O"
Moves the cursor to the next small word.
.LI "\*Lb\*O"
Moves the cursor to the previous small word.
.LI "\*Le\*O"
Moves the cursor to the end of the next small word.
.LI "\*LW\*O"
Moves the cursor to the next big word.
.LI "\*LB\*O"
Moves the cursor to the previous big word.
.LI "\*LE\*O"
Moves the cursor to the end of the next big word.
.LE
.SS Moving by Line Positioning
Enter the following subcommands in Command mode.
.VL 4m
.LI "\*LG\*O"
Moves to the line number given as preceding argument, or the end
of the file if no preceding count is given.
.LI "\*LH\*O"
Moves the cursor to the top line on the screen.
.LI "\*LL\*O"
Moves the cursor to the last line on the screen.
.LI "\*LM\*O"
Moves the cursor to the middle line on the screen.
.LI "\*L\(pl\*O"
Moves the cursor to the next line, at its first nonspace character.
.LI "\*L-\*O"
Moves the cursor to the previous line, at its first nonspace character.
.LI "\*L<Return>\*O"
Moves the cursor to the next line, at its first nonspace character.
.LE
.SS Moving to Sentences, Paragraphs, or Sections
Enter the following subcommands in Command mode.  You can cancel an
incomplete subcommand by pressing the \*L<Esc>\*O key.
.VL 4m
.LI "\*L(\*O"
Places the cursor at the beginning of the previous
sentence (or the previous S-expression if you are in LISP mode).
.LI "\*L)\*O"
Places the cursor at the beginning of the next sentence (or the next
S-expression if you are in LISP mode).
.LI "\*L{\*O"
Places the cursor at the beginning of the previous
paragraph (or at the next list if you are in LISP mode).
.LI "\*L}\*O"
Places the cursor at the beginning of the next
paragraph, at the next section if you are in C mode,
or at the next list if you are in LISP mode.
.LI "\*L|\*O"
Requires a count; the cursor is placed in that column (if possible).
.LI "\*L]]\*O"
Places the cursor at the next section, or function if you are in
LISP mode.
.LI "\*L[[\*O"
Places the cursor at the previous section, or function if you are
in LISP mode.
.LE
.SS Paging and Scrolling
.VL 4m
.LI "\*L<Ctrl-u>\*O"
Scrolls up (default 12 lines).
.LI "\*L<Ctrl-d>\*O"
Scrolls down (default 12 lines).
.LI "\*L<Ctrl-f>\*O"
Pages forward one screen.
.LI "\*L<Ctrl-b>\*O"
Pages backward one screen.
.LI "\*L<Ctrl-y>\*O"
Scrolls the window up one line.
.LI "\*L<Ctrl-e>\*O"
Scrolls the window down one line.
.LI "\*L<Ctrl-m>\*O"
Moves to the first non-white character in the next line.  A count
specifies the number of lines to go forward.
.LI "\*L<Ctrl-t>\*O"
Inserts \*Vshiftwidth\*O white space in input mode, if at the
beginning of the line or preceded only by white space.  This inserted
space can only be backed over using \*L<Ctrl-d>\*O.
.LI "\*L<Ctrl-[>\*O"
Cancels a partially formed command; sounds the bell if there is none.
.IP
In input mode, terminates input mode.
.IP
When entering a command on the bottom line of the screen (\*Lex\*O
command line or search pattern with \*L\e\*O or \*L?\*O), terminates
input and executes command.
.LI "\*Lz+\*O"
Pages up.
.LI "\*Lz^\*O"
Pages down.
.LE
.SS Searching for Patterns
The following commands allow you to search for patterns within a file.
Patterns can be regular expressions as described for \*Lgrep\*O.
.VL 4m
.LI "\*L/\*Vpattern\*O"
Places the cursor at the next line containing \*Vpattern\*O.
.LI "\*L?\*Vpattern\*O"
Places the cursor at the next previous line containing
\*Vpattern\*O.
.LI "\*Ln\*O"
Repeats the last search for \*Vpattern\*O in the same direction.
.LI "\*LN\*O"
Repeats the last search for \*Vpattern\*O in the opposite direction.
.LI "\*L/\*Vpattern\*O/\(pl\*Vnumber\*O"
Places the cursor at the \*Vnumber\*Oth line after
the line matching \*Vpattern\*O.
.LI "\*L?\*Vpattern\*O?-\*Vnumber\*O"
Places the cursor at the \*Vnumber\*Oth line before the line
matching \*Vpattern\*O.
.LI "\*L%\*O"
Finds the parenthesis or brace that matches the one at
the current cursor position.
.LI "\*L<Ctrl-t>\*O"
Finds the word at the cursor in the tags file then edits the proper
file, placing the cursor at the tag.  If the tag is in the current file,
moves cursor to it.
.LE
.SS Marking and Returning
Enter the following subcommands in Command mode.  You can cancel an
incomplete subcommand by pressing the \*L<Esc>\*O key.
.VL 4m
.LI "\*L``\*O"
Moves the cursor to the same cursor position of the previous current line.
.LI "\*L\&'\&'\*O"
Moves the cursor to the beginning of the previous
current line.
.LI "\*Lm\*Vx\*O"
Marks the current position with the letter specified by \*Vx\*O.
.LI "\*L`\*Vx\*O"
Moves the cursor to the same cursor position of
line marked \*Vx\*O.
.LI "\*L\&'\*Vx\*O"
Moves the cursor to the beginning of the line marked \*Vx\*O.
.LE
.SS Adjusting the Screen
Enter the following subcommands in Command mode.  An incomplete
subcommand can be canceled by pressing the \*L<Esc>\*O key.
.VL 4m
.LI "\*L<Ctrl-l>\*O"
Clears and redraws the screen.
.LI "\*L<Ctrl-r>\*O"
Redraws the screen and eliminates blank lines marked with a
\*L@\*O.
.LI "\*Lz<Return>\*O"
Redraws the screen with the current line at the top of the screen.
.LI "\*Lz-\*O"
Redraws the screen with the current line at the bottom of the screen.
.LI "\*Lz\&.\*O"
Redraws the screen with the current line at the center of the screen.
.LI "\*L/\*Vpattern\*O/z-"
Redraws the screen with the line containing \*Vpattern\*O at
the bottom.
.LI "\*Lz\*Vnumber\*L<Return>\*O"
Makes the window \*Vnumber\*O lines long.
.LE
.SS Adding Text to a File--Text Input Mode
The following subcommands are entered in Command mode and bring the
\*Lvi\*O editor into Text Input mode to allow you to add text to your
file.  End Text Input mode by pressing the \*L<Esc>\*O key.
.VL 4m
.LI "\*La\*Vtext\*O"
Inserts \*Vtext\*O after the cursor.
.LI "\*LA\*Vtext\*O"
Adds \*Vtext\*O to the end of the line.
.LI "\*Li\*Vtext\*O"
Inserts \*Vtext\*O before the
cursor.
.LI "\*LI\*Vtext\*O"
Inserts \*Vtext\*O before the first nonspace character in the
line.
.LI "\*Lo\*O"
Adds an empty line below the current line.
.LI "\*LO\*O"
Adds an empty line above the current line.
.LE
.SS Changing Text While in Input Mode
Use the following commands only while in Text Entry mode.
They have different meanings in Command mode.
.VL 4m
.LI "\*L<Ctrl-h>\*O"
Erases the last character.
.LI "\*L<Ctrl-w>\*O"
Erases the last small word.
(For more information about small words, see the section
\*Lvi Character Sets\*O.)
.LI "\*L\e\*O"
Quotes the Erase and Kill characters.
.LI "\*L<Esc>\*O"
Ends insertion, back to Command mode.
.LI "Quit key sequence"
Interrupts, terminates insert or \*L<Ctrl-d>\*O.
.LI "\*L<Ctrl-d>\*O"
Goes back to the previous \*Lautoindent\*O stop.
.LI "\*L^<Ctrl-d>\*O"
Ends \*Lautoindent\*O for this line only.
.LI "\*L0<Ctrl-d>\*O"
Moves the cursor back to the left margin.
.LI "\*L<Ctrl-v>\*O"
Quotes a nonprinting character.
.LE
.SS Changing Text from Command Mode
Use the following subcommands in Command mode.  An incomplete
subcommand can be canceled by pressing the \*L<Esc>\*O key.
.VL 4m
.LI "\*LC\*O"
Changes the rest of the line (\*Lc$\*O).
.LI "\*Lc\*O"
Must be followed by a movement command.  Deletes the specified region
of text and enters input mode to replace it with the entered text.  If
more than part of a single line is affected, the deleted text is saved
in the numeric buffers.  If only part of the current line is affected,
the last character to be deleted is marked with a \*L$\*O.  A count is
passed through to the move command.  If the command is \*Lcc\*O, the
whole of the current line is changed.
.LI "\*Lcc\*O"
Changes a line.
.LI "\*Lcw\*O"
Changes a word.
.LI "\*LD\*O"
Deletes the rest of the line (\*Ld$\*O) and puts it into the
undo buffer.
.LI "\*Ld\*O"
Must be followed by a movement command.  Deletes the specified region
of text.  If more than part of a line is affected, the text is saved
in the numeric buffers.  A count is passed through to the move
command.  If the command is \*Ldd\*O, the whole of the current line is
deleted.
.LI "\*Ldd\*O"
Deletes a line and puts it into the undo buffer.
.LI "\*Ldw\*O"
Deletes a word and puts it into the undo buffer.
.LI "\*LJ\*O"
Joins lines.
.LI "\*Lr\*Vx\*O"
Replaces the current character with the character specified by \*Vx\*O.
.LI "\*LR\*O"
Overwrites characters.
.LI "\*Ls\*O"
Substitutes characters (\*Lcl\*O).
.LI "\*LS\*O"
Substitutes lines (\*Lcc\*O).
.LI "\*Lu\*O"
Undoes the previous change.
.LI "\*Lx\*O"
Deletes a character.
.LI "\*LX\*O"
Deletes characters before cursor (\*Ldh\*O).
.LI "\*L<<\*O"
Shifts one line to the left.
.LI "\*L<L\*O"
Shifts all lines from the cursor
to the end of the screen to the left.
(The \*L<\*O character describes a range upon which the \*LL\*O
subcommand acts.)
.LI "\*L>>\*O"
Shifts one line to the right.
.LI "\*L>L\*O"
Shifts all lines from the cursor to the
end of the screen to the right.
(The \*L>\*O character describes a range upon which the \*LL\*O
subcommand acts.)
.LI "\*L~\*O"
Changes the letter at the cursor to the opposite case.
.LE
.SS Copying and Moving Text
Use the following subcommands in Command mode.  An incomplete
subcommand can be cancelled by pressing \*L<Esc>\*O.
.VL 4m
.LI "\*Lp\*O (\*LP\*O)"
Puts back text in the \*Lundo\*O buffer after (before) the cursor.
.LI "\*L""""\*Vx\*Op (\*L\*Vx\*OP)"
Puts back text from the buffer \*Vx\*O after (before) the cursor.
You must preced the character \*Vx\*O with a double quote.
.LI "\*L""""\*Vx\*Od\*Vobject\*O"
Deletes \*Vobject\*O into the buffer \*Vx\*O.
You must preced the character \*Vx\*O with a double quote.
.LI "\*Ly\*Vobject\*O"
Yanks \*Vobject\*O into the \*Lundo\*O buffer (for example, \*Lyw\*O
to yank a word).
.LI "\*L""""\*Vx\*Ly\*Vobject\*O"
Yanks \*Vobject\*O into buffer \*Vx\*O.
You must preced the character \*Vx\*O with a double quote.
.LI "\*LY\*O"
Places the line in the \*Lundo\*O buffer.
.LE
.SS Restoring and Repeating Changes
Use the following subcommands in Command mode.  An incomplete
subcommand can be canceled by pressing the \*L<Esc>\*O key.
.VL 4m
.LI "\*Lu\*O"
Undoes the last command.
.LI "\*LU\*O"
Restores the current line if the cursor has not left the line
since the last change.
.LI "\*L\&.\*O"
Repeats the last change or increments the \*Vn\*Lp\*O
command.
.IP
Note that this command is not
meant for use with a macro.  Enter \*L@@\*O to repeat a macro.
.LI "\*L""""\*Vn\*Op"
Retrieves the \*Vn\*Oth last delete of a complete line or block of lines.
You must precede the character \*Vn\*O with a double quote.
.LE
.SS Saving Changes to a File
Use the following subcommands in Command mode.  An incomplete
subcommand can be canceled by pressing \*L<Esc>\*O.
If you are using these subcommands within the \*Lex\*O editor, you do
not need to type the : (colon).
.VL 4m
.LI "\*L:w\*O"
Writes the editing buffer contents to the original file.
.LI "\*L:w \*Vfile\*O"
Writes the editing buffer contents to the named \*Vfile\*O.
.LI "\*L:w! \*Vfile\*O"
Overwrites \*Vfile\*O with the editing buffer contents.
.LE
.SS Interrupting, Cancelling, and Exiting \*Lvi\*O
.VL 4m
.LI "\*LQ\*O"
Enters the \*Lex\*O editor in Command mode.
.LI "\*LZZ\*O"
Exits \*Lvi\*O, saving changes, if any were made.
.LI "\*L:q\*O"
Quits \*Lvi\*O.  If you have changed the contents of the
editing buffer,
\*Lvi\*O displays a warning message and does not quit.
.LI "\*L:q!\*O"
Quits \*Lvi\*O, discarding the editing buffer with no warning.
.LI "\*L:sh\*O"
Runs a shell.  You can return to \*Lvi\*O by pressing \*L<Ctrl-d>\*O.
.LI "\*L:w !\*Vcommand\*O"
Runs the file through the specified shell command (causes no
change to the file).
.LI "\*L:!\*Vcommand\*O"
Runs \*Vcommand\*O, then returns.
.LI "\*L:!!\*O"
Repeats the last \*L:!\*Vcommand\*O command.
.LI "\*Vn\*O!!\*Vcommand\*O"
Executes the shell command identified by \*Vcommand\*O
and replaces the number of
lines specified by \*Vn\*O with the output of \*Vcommand\*O.
If \*Vn\*O is not specified, the default is 1.  If \*Vcommand\*O
expects standard input, the lines specified are
used as input.  (\*L10!!sort\*O sorts the next 10 lines.)
.LI "\*L!\*Vlinescommand\*O"
Works like \*Ln\*L!!\*Vcommand\*O, except that \*Vlines\*O is a
line address (for example, \*L!Gsort\*O sorts the rest of the file).
.LI "Quit key sequence"
Interrupts a subcommand.
.LE
.SS Editing a Second File
Enter the following subcommands in Command mode.  An incomplete
subcommand can be canceled by pressing the \*L<Esc>\*O key.
.VL 4m
.LI "\*L:e \*Vfile\*O"
Edits \*Vfile\*O.
If you are using this subcommand from the \*Lex\*O editor, you do not
need to type the : (colon).
.LI "\*L:e!\*O"
Reedits the current file and discards all changes.
.LI "\*L:e  \(pl  \*Vfile\*O"
Edits \*Vfile\*O, starting at the end.
.LI "\*L:e  \(pl\*Vnumber\*O"
Edits \*Vfile\*O, starting at the line \*Vnumber\*O.
.LI "\*L:e #\*O and \*L<Ctrl-a>\*O"
Edits the alternate file.
.\" Begin Digital-specific information CORRECTION
.\" Removed extra 'the' per QAR 6887.
The alternate file is usually the previous current filename.
.\" End Digital-specific information CORRECTION
However, if changes are pending on the current file when a new file
is called, the new file becomes the alternate file.
.LI "\*L:r \*Vfile\*O"
Reads the file into the editing buffer by adding new lines below
the current line.  If you are using this subcommand from the \*Lex\*O
editor, you do not need to type the : (colon).
.LI "\*L:r !\*Vcommand\*O"
Runs the shell command identified by \*Vcommand\*O and places
its output in the
file by adding new lines below the current cursor position.
.LI "\*L:ta \*Vtag\*O"
Edits a file containing \*Vtag\*O at the location
of \*Vtag\*O.  If the tag is in another file and the current file has been
changed (and \*Lnoaw\*O is set), a warning is posted.
To use this command, you must first create a database of function
names and their locations using the \*Lctags\*O command.  If you are
using this subcommand from the \*Lex\*O editor, you do not need to
type the : (colon).
.LI "\*L<Ctrl-t>\*O"
Finds the word at the cursor in the tags file and edits the indicated
file, placing the cursor at the tag.  Same as \*L:ta\*O, but the tag
is the word to the right of the cursor.
.LE
.SS Editing a List of Files
Enter the following subcommands in Command mode.
.VL 4m
.LI "\*L:n\*O"
Edits the next file in the list entered on the command line.
.LI "\*L:n \*Vfile\*O \&.\&.\&."
Specifies a new list of files to edit.
.LE
.SS Displaying File Information
Enter the following subcommand in Command mode
to show the current filename, the current line number, the number of lines
in the file, and the percentage of lines of the file that are before
the cursor:
.VL 4m
.LI "\*L<Ctrl-g>\*O"
.LE
.SH RELATED INFORMATION
.PP
Commands:  \*Lctab\*O(1), \*Lctags\*O(1), \*Led\*O(1)/red(1),
\*Ledit\*O(1), \*Lex\*O(1), \*Lgrep\*O(1)/\*Lfgrep\*O(1)/\*Legrep\*O(1),
\*Lnroff\*O(1)
.PP
Files:  \*Lctab\*O(4)
.EQ
delim off
.EN

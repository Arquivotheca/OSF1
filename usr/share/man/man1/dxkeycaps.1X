.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.TH dxkeycaps 1X
.SH NAME
\*Ldxkeycaps\*O \- Graphically display and edit the keyboard mapping
.SH SYNOPSIS
.PP
.sS
\*Ldxkeycaps\*O [-\*Vflags\*O ]
.sE
.SH FLAGS
.PP
Run \*Ldxkeycaps\*O with no command line options to edit the keyboard mapping
of the keyboard that is attached to your workstation.
.PP
The \*Ldxkeycaps\*O command accepts all of the standard toolkit options.
It also accepts the following options:
.VL 4m
.LI "\*L\-keyboard \*Vkeyboard-name\*O or \*L\-kbd\*O \*Vkeyboard-name\*O"
Specifies the type of keyboard to display.  There are many different types of
computer keyboards, and to function correctly \*Ldxkeycaps\*O must know which
one you are using. The following keyboards are known:
.oS
LK401 (American)      LK401 (Svenska)       LK444 (Dansk)
LK201 (American)      LK401 (Vlaams)        LK444 (Deutsch)
LK443 (American)      LK201 (Dansk)         LK444 (Schweiz)
LK421                 LK201 (Deutsch)       LK444 (British/Irish)
LK401 (Dansk)         LK201 (Schweiz)       LK444 (Espanol)
LK401 (Deutsch)       LK201 (UK)            LK444 (Francais)
LK401 (Schweiz)       LK201 (Espanol)       LK444 (Canadien)
LK401 (British/Irish) LK201 (Francais)      LK444 (SuisseRomande)
LK401 (Espanol)       LK201 (Canadien)      LK444 (Italiano)
LK401 (Francais)      LK201 (SuisseRomande) LK444 (Nederlands)
LK401 (Canadien)      LK201 (Italiano)      LK444 (Norsk)
LK401 (SuisseRomande) LK201 (Nederlands)    LK444 (Portugues)
LK401 (Italiano)      LK201 (Norsk)         LK444 (Suomi)
LK401 (Nederlands)    LK201 (Portugues)     LK444 (Svenska)
LK401 (Norsk)         LK201 (Suomi)         LK444 (Vlaams)
LK401 (Portugues)     LK201 (Svenska)
LK401 (Suomi)         LK201 (Vlaams)

PCXAL (American)      PCXAL (Dansk)         PCXAL (Deutsch)
PCXAL (Schweiz)       PCXAL (British/Irish) PCXAL (Espanol)
PCXAL (Francais)      PCXAL (Canadien)      PCXAL (SuisseRomande)
PCXAL (Italiano)      PCXAL (Nederlands)    PCXAL (Norsk)
PCXAL (Portugues)     PCXAL (Suomi)         PCXAL (Svenska)
PCXAL (Vlaams)

NCD N101              NCD N102              NCD N102sf
NCD N108              NCD N97               NCD vt220
.oE
If the console's keyboard language parameter is set correctly, \*Ldxkeycaps\*O
will select the correct keyboard by default if run without any command line
parameter. (Use the \*Lset language\*O command to set the console's keyboard
language. See the section on environment variables in your workstation user's
guide.)
.IP
You may specify a different flavor of the ``correct'' keyboard
(i.e., on a workstation with an LK401, you can  specify the LK421, LK443 or
LK201), but you cannot display a PCXAL or NCD keyboard layout unless you are
displaying on a machine with those keyboards attached.
.IP
If you specify
.nL
.sp 2
\*L% dxkeycaps \-kbd "pcxal (British/Irish)"\*O
.nL
.sp 2
the British/Irish keyboard layout is displayed. If you specify
.nL
.sp 2
\*L% dxkeycaps \-kbd pcxal\*O
.nL
.sp 2
the \*LPCXAL (American)\*O keyboard layout is displayed as the
default. If you specify
.nL
.sp 2
\*L% dxkeycaps \-kbd badkeyboardname\*O
.nL
.sp 2
the keyboard displayed is the ``best guess'' at the correct default keyboard
(based on kernel and console environment information), just as if you ran
\*Ldxkeycaps\*O without any parameters at all.
.IP
Case does not matter when specifying a keyboard name, but you must
quote keyboard names that contain spaces. For example:
.nL
.sp 2
\*L% dxkeycaps \-kbd "PCXAL-AE (United Kingdom)"\*O
.nL
.sp2
.LI "\*L\-gutterwidth \*Vnumber\*O or \*L\-gw\*O \*Vnumber\*O"
Specifies the number of pixels of space to leave between each key.
.LE
.SH DESCRIPTION
.PP
.iX "Keyboard simulator" "DECwindows (dxkeycaps)"
The \*Ldxkeycaps\*O command displays a keyboard with keycaps drawn according to
the current server keymap.  When you move the mouse over a key, the command
describes the key symbols and modifiers that the key generates.  Clicking MB1
on a key simulates pressing a key. Clicking MB3 on a key brings up a menu of
operations, including a command to change the key symbol that the key
generates.
.PP
This program is, in part, a graphical front-end to \*Lxmodmap\*O.
.SS Display
The bottom part of the window is a drawing of a keyboard.  In the top left of
each key is printed the string which actually appears on the surface of the
key.  In the bottom right of the key is the (hexadecimal) keycode that this
key generates.
.PP
At the top of the screen are several lines of text describing the key
under the mouse (or the most recently typed key.)  These lines are:
.VL 4m
.LI "\*LKeyCode:\*O"
Displays the text printed on the physical key, and the keycode generated
by that key in hex, decimal, and octal.
.LI "\*LKeySym:\*O"
Displays the set of Key symbols that this key currently generates.
.LI "\*LModifiers:\*O"
Displays the modifier bits that this key generates.  If a key generates
modifiers, it is a chord-key like \*VShift\*O or \*VControl\*O.
.LI "\*LAutoRepeat:\*O"
States whether the X server claims that this key autorepeats.
.LE
.SS Commands Pull-Down Menu
The Commands pull-down menu in the upper left corner of the window contains the
menu items \*LKeyboard\*O, \*LReset to Default\*O, \*LSave\*O, and \*LExit\*O:
.VL 4m
.LI "\*LKeyboard\*O"
Brings up a menu from which you can change which keyboard is displayed. For
machines with PC class keyboards, this menu offers the options of
.oS
PCXAL (American)
PCXAL (Dansk)
PCXAL (Deutsch)
PCXAL (Schweiz)
PCXAL (British/Irish)
PCXAL (Espanol)
PCXAL (Francais)
PCXAL (Canadien)
PCXAL (SuisseRomande)
PCXAL (Italiano)
PCXAL (Nederlands)
PCXAL (Norsk)
PCXAL (Portugues)
PCXAL (Suomi)
PCXAL (Svenska)
PCXAL (Vlaams)
.oE
If you run \*Ldxkeycaps\*O on a workstation with no command line arguments, you
get a pullright menu for your system's keyboard. \*Ldxkeycaps\*O detects what
type of keyboard you have on your system and limits your choices. However, if,
in the command line, you specify a keyboard, (even if it's the one attached to
the display), or use the \*L-all\*O parameter, the Keyboard menu item will
display a two-level pullright, where the first level for an LK-style keyboard
is:
.oS
     LK401>
     LK201>
     LK443>
     LK421
.oE
Selecting one of those produces the sub-menu of international variants
described above. An exception is the LK421, which does not provide
international support. If you select LK421 from the first level menu, the LK421
keyboard is displayed.
.LI "\*LReset to Default\*O"
This command restores the keyboard to its default state as defined by the
physical keycaps on the keyboard. If you execute
this command while displaying a keyboard that is not the type of keyboard
you are really using, your keymap will be in a nonsensical state.  There is
no way for \*Ldxkeycaps\*O to tell what keyboard you are using.
.LI "\*LSave\*O"
This command writes an \*Lxmodmap\*O input file representing the current
state of the keyboard (including all of your changes) to the standard output.
The file is saved in your home directory as \*L~/.dxkeycaps\*O.
It prompts you with a dialog box: you can either write an \*Lxmodmap\*O
file representing the state of every key, or you can write a smaller
file which describes only the changes.
.LI "\*LExit\*O"
Exits the program.
.LE
.PP
You can arrange for these bindings to be installed each time you log in
by placing an \*Lxmodmap\*O command in your \*L.X11Startup\*O file.
For example:
.PP
.oS
   \*Lxmodmap ~/.dxkeycaps\*O
.oE
If you place an \*Lxmodmap\*O command in your \*L.X11Startup\*O file,
be sure that the file is loaded by the Session Manager, \*Ldxsession\*O.
See \*Ldxsession\*O(1X) for information about Session Manager and the
\*L.X11Startup\*O file.
.PP
Typing a key on the \*Vreal\*O keyboard simulates
a \*LKeyPress\*O/\*LKeyRelease\*O event pair in the same way that
clicking on a key does.
.PP
You can also combine mouse and keyboard input: for example, if you use
the mouse to select the \*VShift\*O key, and type a character, the event
that is simulated will have the \*VShift\*O modifier set.  And if you
hold down the real \*VControl\*O key, and click on the \*VC\*O key in
the window, a \*VControl-C\*O event will be generated.  (Assuming
that your window manager does not intercept control-left-button for its
own purposes.)
.PP
Clicking MB3 on a key pops up a menu of commands for the given key.
They are:
.VL 4m
.LI "\*LEdit KeySyms of Key\*O"
This pops up the ``Edit Key'' window, which allows you to arbitrarily change
which key symbols and modifiers this key generates.
.IP
On the left side of the window is the list of the key symbols that this key
currently generates.  (A key may generate up to eight key symbols; the
interpretation of these key symbols is described in the X protocol document,
and is summarized here in the \*LKEYSYMS AND KEYCODES\*O section.)
.IP
The second column is a multiple-choice list of the eight modifier bits
that this key may generate.  For example, if you want a key to behave
as a \*VControl\*O key, you should select the \*LControl\*O modifier.
.IP
The third and fourth column (the scrolling lists) are for changing the
key symbol associated with the key.  When you select a keysym-position from
the first column, the character set and keysym will be displayed in
the scrolling lists.  Clicking on a key symbol in the \*LKeySym\*O column will
install that key symbol in the highlighted slot in the first column.
.IP
To select a key symbol from a different character set, click on the character
set name in the second column.  (The \*LLatin1\*O and \*LKeyboard\*O
character sets are the most commonly used.)
.IP
At the bottom of the window are three buttons: \*LUndo\*O, \*LAbort\*O, and
\*LOk\*O.  Clicking on \*LUndo\*O reverts the Edit Key window to the current
state of the key in question.  Clicking on \*LAbort\*O closes the Edit Key
window without making any changes. Clicking on \*LOk\*O closes the Edit Key
window and installs your changes (the current keyboard mapping is modified.)
.LI "\*LExchange Keys\*O"
After selecting this menu item, you are asked to click on another key.
That key and the key on which you brought up the menu will be exchanged.
This actually changes the current keyboard mapping.
.LI "\*LDuplicate Key\*O"
After selecting this menu item, you are asked to click on another key. That key
will be made a copy of the key on which you brought up the menu. That is, the
two keys will generate the same set of key symbols and modifiers. This actually
changes the current keyboard mapping and redraws the keyboard with the changed
keycap reflecting its new status.
.LI "\*LDisable Key\*O"
The key on which you brought up the menu will be made to generate no keysyms
and no modifiers. This actually changes the current keyboard mapping and
redraws the keyboard with the changed keycap reflecting its new status.
.LI "\*LReset Key To Default\*O"
The key on which you brought up the menu will be restored to its default state;
no other key will be altered. This actually changes the current keyboard
mapping and redraws the keyboard with the changed keycap reflecting its new
status.
.LE
.SH X DEFAULTS
.PP
The \*Ldxkeycaps\*O command understands all of the core resource names and
classes as well as:
.PP
.VL 4m
.LI "\*L*Keyboard.keyboard\*O (class \*LKeyboard\*O)"
Which keyboard to display; this is the same as the \*L\-keyboard\*O
command-line option.  If this is not specified, the default keyboard is
guessed, based on the server's vendor identification string. \*Ldxkeycaps\*O
can distinguish between the LK and PC class keyboards, and will not allow
displaying or editing the LK keyboard on a workstation that has a PC keyboard
(or vice-versa).
.LI "\*L*Keyboard.Key.highlight\*O (class \*LBackground\*O)"
The color to use to highlight a key when it is depressed.  If this is
the same as the background color of the key, it is highlighted with a
stipple pattern instead.
.LI "\*L*Keyboard.Key.keycapColor\*O (class \*LForeground\*O)"
The color to paint the keycap string.
.LI "\*L*Keyboard.Key.keycodeColor\*O (class \*LForeground\*O)"
The color to paint the keycode number.
.LI "\*L*Keyboard.Key.borderColor\*O (class \*LColor\*O)"
The color of the box around each key.
.LI "\*L*Keyboard.Key.keycapFont\*O (class \*LFont\*O)"
The font to use to draw the keycap string.
.LI "\*L*Keyboard.Key.keycodeFont\*O (class \*LFont\*O)"
The font to use to draw the keycode number.
.LI "\*L*Keyboard.Key.borderWidth\*O (class \*LInt\*O)"
The thickness of the box around each key.
.LI "*Keyboard.Key.gutterWidth\*O (class \*LInt\*O)"
How many pixels to leave between this key and its neighbors to the right
and bottom.
.LE
.PP
The class of each key widget is \*LKey\*O as indicated in the previous
list.  The name of each key is the string(s) printed on its face.
For example, if you wanted the \*LShift\*O keys to have wider
borders, you could specify:
.PP
.iS
   \*LDXkeycaps*Keyboard.Shift.borderWidth: 2\*O
.iE
.SH ACTIONS
.PP
It is possible to rebind the actions that happen when  you press or release
a key or mouse button. These actions are available on the \*LKeyboard\*O
widget:
.VL 4m
.LI "\*LHighlightKey(\*Vcondition\*L, \*Varg\*O)"
This places the key in question in the highlighted state.
.IP
If no \*Vargument\*O is passed to this action, then the key is determined by
the event which invoked this action.  If this action is invoked by
a \*LKeyPress\*O or \*LKeyRelease\*O event, the key-widget is the key
corresponding to the key that the event represents.  If it is
a \*LButtonPress\*O, \*LButtonRelease\*O, or \*LPointerMotion\*O event,
then the key-widget is the one under the mouse.
.IP
The \*Vargument\*O may be one of the words \*Vmouse\*O, \*Vhighlighted\*O,
or \*Vdisplayed\*O, meaning the key under the mouse, the key most recently
highlighted, or the key currently being described in the ``Info'' area
at the top of the window, respectively.
.IP
The \*Vcondition\*O may be one of the words \*Vifmod\*O, \*Vunlessmod\*O,
\*Viftracking\*O, \*Vunlesstracking\*O, \*Vifhighlighted\*O, or
\*Vunlesshighlighted\*O.  If \*Vifmod\*O was specified and the key in
question (as determined by the \*Vargument\*O or by the invoking event) is
not a modifier key, then this action is not executed.  The \*Vunlessmod\*O
condition is the opposite.  The \*Viftracking\*O and \*Vunlesstracking\*O
conditions allow you to do some actions only if (or unless) the key is
being ``tracked'' with the mouse (see below.)  The \*Vifhighlighted\*O
and \*Vunlesshighlighted\*O actions allow you to do some things only if
(or unless) the key in question is currently in the highlighted state.
.LI "\*LUnhighlightKey(\*Vcondition\*L, \*Varg\*O)"
This places the key in question in the unhighlighted state.  Arguments
are as above.
.LI "\*LToggleKey(\*Vcondition\*L, \*Varg\*O)"
This makes the key be highlighted if it is unhighlighted, or unhighlighted
if it is highlighted.  Arguments are as above.
.LI "\*LSimulateKeyPress(\*Vcondition\*L, \*Varg\*O)"
This action makes a \*LKeyPress\*O event corresponding to the key be
synthesized on the focus window.  Arguments are as above.
.LI "\*LSimulateKeyRelease(\*Vcondition\*L, \*Varg\*O)"
This action makes a \*LKeyRelease\*O event corresponding to the key be
synthesized on the focus window.  Arguments are as above.
.LI "\*LTrackKey(\*Vcondition\*L, \*Varg\*O)"
This makes the key in question begin being ``tracked,'' which means that
moving the mouse off of it will simulate a button-release action, and then
will simulate a button-press action on the key that the mouse has moved
on to.  This action may only be invoked from a \*LButtonPress\*O
or \*LButtonRelease\*O event.
.LI "\*LUntrackKey(\*Vcondition\*L, \*Varg\*O)"
This makes the key in question no longer be ``tracked.''
.LI "\*LDescribeKey(\*Vcondition\*L, \*Varg\*O)"
This action causes the key and its bindings to be displayed in the ``Info''
section at the top of the window, if it is not already described there.
.LE
.PP
The default actions for the \*LKeyboard\*O widget are:
.PP
.oS
<Motion>:   DescribeKey(mouse,unlessTracking)      \\n\\
\\
<KeyDown>:  HighlightKey()                         \\
            DescribeKey(unlessMod)                 \\
            DescribeKey(displayed)                 \\
            SimulateKeyPress()                     \\n\\
\\
<KeyUp>:    UnhighlightKey()                       \\
            DescribeKey(displayed)                 \\
            SimulateKeyRelease()                   \\n\\
\\
<Btn1Down>: HighlightKey(unlessMod)                \\
            ToggleKey(ifMod)                       \\
            TrackKey(unlessMod)                    \\
            SimulateKeyPress(ifHighlighted)        \\
            SimulateKeyRelease(unlessHighlighted)  \\n\\
\\
<Btn1Up>:   UntrackKey(highlighted)                \\
            SimulateKeyRelease(highlighted,unlessMod) \\
            UnhighlightKey(highlighted,unlessMod)  \\n\\
\\
<Btn3Down>: XawPositionSimpleMenu(keyMenu)         \\
            MenuPopup(keyMenu)                     \\n
.oE
.PP
If you do not want a key to be described each time the mouse moves over
it, you can remove the \*V<Motion>\*O action.  In that case, you should
probably add \*LDescribeKey()\*O to the \*V<Btn1Down>\*O and \*V<KeyDown>\*O
actions.
.PP
If you want the key under the mouse to be described even while the mouse
is moving with a button down, then remove the \*VunlessTracking\*O
parameter from the \*LDescribeKey\*O action bound to \*L<Motion>\*O.
.PP
If you do not want the modifier keys to toggle, change the \*VButton1\*O
actions to the following:
.PP
.oS
DXkeycaps*Keyboard.actions:  #override               \\
        <Btn1Down>: HighlightKey()                  \\
                    TrackKey(unlessmod)             \\
                    SimulateKeyPress()              \\n\\
        <Btn1Up>:   UntrackKey(highlighted)         \\
                    SimulateKeyRelease(highlighted) \\
                    UnhighlightKey(highlighted)     \\n

.oE
.PP
Remember that these actions exist on the \*VKeyboard\*O widget, not on
the \*VKey\*O widgets.  If you add actions to the \*VKey\*O widgets,
things will malfunction.
.SH KEYSYMS AND KEYCODES
.PP
The following description is from the X Protocol document, and is reprinted
here for your convenience:
.PP
.RS
A list of \*LKeySym\*Os is associated with each \*LKeyCode\*O. If that list
(ignoring trailing \*LNoSymbol\*O entries) is a single \*LKeySym\*O \*L"K"\*O,
then the list is treated as if it were the list \*L"K NoSymbol K
NoSymbol"\*O. If the list (ignoring trailing \*LNoSymbol\*O entries) is a pair
of \*LKeySym\*Os \*L"K1 K2"\*O, then the list is treated as if it were the list
\*L"K1 K2 K1 K2"\*O.  If the list (ignoring trailing \*LNoSymbol\*O entries)
is a triple of \*LKeySym\*Os \*L"K1 K2 K3"\*O, then the list is treated as if
it were the list \*L"K1 K2 K3 NoSymbol"\*O.
.PP
The first four elements of the list are split into two groups
of \*LKeySym\*Os.  Group 1 contains the first and second \*LKeySym\*Os,
Group 2 contains third and fourth \*LKeySym\*Os.  Within each group, if the
second element of the group is \*LNoSymbol\*O, then the group should be
treated as if the second element were the same as the first element, except
when the first element is an alphabetic \*LKeySym\*O \*LK\*O for which both
lowercase and uppercase forms are defined.  In that case, the group should
be treated as if the first element were the lowercase form of \*L"K"\*O and the
second element were the uppercase form of \*L"K"\*O.
.PP
The standard rules for obtaining a \*LKeySym\*O from a KeyPress event make
use of only the Group 1 and Group 2 \*LKeySym\*Os; no interpretation of
other \*LKeySym\*Os in the list is given here.  (That is, the last four
KeySyms are unused.)
.PP
Which group to use is determined by modifier state.  Switching
between groups is controlled by the \*LKeySym\*O named \*LMode_switch\*O.
.PP
By attaching that \*LKeySym\*O to some \*LKeyCode\*O and attaching
that \*LKeyCode\*O to any one of the modifiers \*LMod1\*O
through \*LMod5\*O.  This modifier is called the ``group modifier.''
For any \*LKeyCode\*O, Group 1 is used when the group modifier is off,
and Group 2 is used when the group modifier is on.
.PP
Within a group, which \*LKeySym\*O to use is also determined by
modifier state.  The first \*LKeySym\*O is used when the \*LShift\*O
and \*LLock\*O modifiers are off.  The second \*LKeySym\*O is used when
the \*LShift\*O modifier is on, or when the \*LLock\*O modifier is on
and the second \*LKeySym\*O is uppercase alphabetic, or when the \*LLock\*O
modifier is on and is interpreted as \*LShiftLock\*O.  Otherwise,
when the \*LLock\*O modifier is on and is interpreted as \*LCapsLock\*O,
the state of the \*LShift\*O modifier is applied first to select
a \*LKeySym\*O, but if that \*LKeySym\*O is lowercase alphabetic, then
the corresponding uppercase \*LKeySym\*O is used instead.
.RE
.SH MODIFIER MAPPING
.PP
The following description is from the InterClient Communications
Conventions Manual:
.PP
.RS
X11 supports eight modifier bits, three  of which are pre-assigned to
\*LShift\*O, \*LLock\*O and \*LControl\*O.  Each modifier bit is controlled by
the state of a set of keys, and these sets are specified in a table accessed by
\*LGetModifierMapping()\*O and \*LSetModifierMapping()\*O.
.PP
A client needing to use one of the pre-assigned modifiers should assume that
the modifier table has been set up correctly to control these modifiers.
The \*VLock\*O modifier should be interpreted as \*VCaps Lock\*O
or \*VShift Lock\*O according as the keycodes in its controlling set
include \*LXK_Caps_Lock\*O or \*LXK_Shift_Lock\*O.
.PP
Clients should determine the meaning of a modifier bit from the keysyms
being used to control it.
.PP
A client needing to use an extra modifier,  for example \*VMeta\*O,  should:
.RS
.PP
Scan the existing modifier mappings.
If it finds a modifier that contains a keycode whose set of keysyms
includes \*LXK_Meta_L\*O or \*LXK_Meta_R\*O, it should use that modifier bit.
.PP
If there is no existing modifier controlled by \*LXK_Meta_L\*O
or \*LXK_Meta_R\*O, it should select an unused modifier bit (one with an
empty controlling set) and:
.RS
.PP
If there is a keycode with \*LXL_Meta_L\*O in its set of keysyms, add that
keycode to the set for the chosen modifier, then
.PP
if there is a keycode with \*LXL_Meta_R\*O in its set of keysyms, add that
keycode to the set for the chosen modifier, then
.PP
if the controlling set is still empty,  interact with the user to
select one or more keys to be \*LMeta\*O.
.RE
.PP
If there are no unused modifier bits, ask the user to take corrective action.
.RE
.RE
.PP
This means that the \*LMod1\*O modifier does not necessarily mean \*VMeta\*O,
although some applications (such as \*Vtwm\*O and \*Vemacs\*O) assume that.
Any of the five unassigned modifier bits could mean Meta; what matters is
that a modifier bit is generated by a keycode which is bound to the
keysym \*LMeta_L\*O or \*LMeta-R\*O.
.PP
Therefore, if you want to make a ``meta'' key, the best way is to make the
keycode in question generate both a \*LMeta\*O keysym, and a modifier bit.
.SH ENVIRONMENT
.PP
.VL 4m
.LI "DISPLAY"
Use this environment variable to get the default host and display number.
.LI "XENVIRONMENT"
Use this environment variable to get the name of a resource file that
overrides the global resources stored in the RESOURCE_MANAGER property.
.LE
.SH RESTRICTIONS
.PP
Because this program has default colors that are not ``black and white,''
the \*L\-rv\*O command-line option does not work.  But the following
incantation does what you want on a monochrome screen:
.PP
.iS
   \*L% dxkeycaps \-fg white \-bg black \-bd white\*O
.iE
.\" .PP
.\" The \*LAutoRepeat\*O flag is useless, because all X servers I've seen
.\" ignore it.
.\" .PP
.\" The \*LType at Window\*O command doesn't seem to work on the WreckStation
.\" version of XTerm.  I assume some variation of the normal XTerm's
.\" \*LAllow SendEvents\*O command is necessary.
.\" .PP
.\" There doesn't seem to be any way to notice key-transitions when we don't
.\" have the keyboard focus.  I would like this program to track the state of
.\" the keyboard even when the user isn't focusing on it.
.\" the Athena widget set doesn't seem to come with a file-requestor widget,
.\" and I don't want to write one.
.\" .PP
.\" It needs to know about more keyboard types.
.\" .PP
.\" L-shaped keys aren't drawn accurately.  We should use the Shape extension
.\" for that.
.\" .PP
.\" In addition to displaying the ASCII version of the given character, it
.\" should display the corresponding character in the character set (such as Latin2,
.\" Kana, Greek).  This would require having fonts for all of those
.\" character sets, though, and as far as I can tell, they don't all come
.\" standard.
.\" .SH Copyright
.\" Copyright 1991, Jamie Zawinski, Satish Ramachandran.
.\" Permission to use, copy, modify, distribute,
.\" and sell this software and its documentation for any purpose is hereby granted
.\" without fee, provided that the above copyright notice appear in all copies and
.\" that both that copyright notice and this permission notice appear in supporting
.\" documentation.  No representations are made about the suitability of this
.\" software for any purpose.  It is provided ``as is'' without express or
.\" implied warranty.
.\" .SH Author
.\" Jamie Zawinski <jwz@lucid.com>, 10-nov-91.
.\" Satish Ramachandran <satish@wsl.dec.com> March, '92.
.\" Please let Satish know if you find any bugs or make any improvement.
.SH RELATED INFORMATION
.PP
\*LX\*O(1X),
\*Lxmodmap\*O(1),
\*Ldxsession\*O(1X)
.EQ
delim off
.EN

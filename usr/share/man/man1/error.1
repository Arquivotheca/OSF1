.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: error.1,v $ $Revision: 1.1.5.2 $ (DEC) $Date: 1993/06/21 14:17:35 $
.\"
.\" (c) Copyright 1990, 1991, 1992 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.1
.\" Copyright (c) 1980, 1990 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms are permitted provided
.\" that: (1) source distributions retain this entire copyright notice and
.\" comment, and (2) distributions including binaries display the following
.\" acknowledgement:  ``This product includes software developed by the
.\" University of California, Berkeley and its contributors'' in the
.\" documentation or other materials provided with the distribution and in
.\" all advertising materials mentioning features or use of this software.
.\" Neither the name of the University nor the names of its contributors may
.\" be used to endorse or promote products derived from this software without
.\" specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
.\" WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\"
.\"     @(#)error.1	6.4 (Berkeley) 6/24/90
.\"
.TH error 1
.SH NAME
.PP
\*Lerror\*O \- Analyzes and disperses compiler error messages
.SH SYNOPSIS
.PP
.sS
.in +.5i
.ti -.5i
\*Lerror\*O
\*O[\*L\(hyn\*O]
\*O[\*L\(hyq\*O]
\*O[\*L\(hys\*O]
\*O[\*L\(hyv\*O]
\*O[\*L\(hyt\ \*Vsuffix_list\*O]
\*O[\*L\(hyI\ \*Vignore_file\*O]
\*O[\*Vfile\*O]
.in -.5i
.sE
.PP
The \*Lerror\*O program
analyzes and optionally disperses the diagnostic error messages
produced by a number of compilers and language processors to the source
file and line where the errors occurred.
.SH FLAGS
.PP
.VL 4m
.LI "\*L-I \*Vignore_file\*O"
Takes the names of functions
to ignore from \*Vignore_file\*O.  If the \*L-I\*O flag
is not specified, the function names are taken from a
file named \*L\&.errorrc\*O in the users's home directory. If this
file does not exist, no error messages are nullified.
Function names must be listed one per line in \*Vignore_file\*O
or in the \*L\&.errorrc\*O file.
.LI "\*L-n\*O"
Does not touch any files; all error messages are sent to the
standard output.
.LI "\*L-q\*O"
Queries the user whether or not to touch the file.
You must enter \*Ly\*O or \*Ln\*O, or the locale's equivalent
of an affirmative or negative response, before continuing.
If you do not specify the \*L-q\*O flag, all referenced files
(except those referring to discarded error messages)
are touched by default.
.LI "\*L-s\*O"
Prints out statistics regarding the error categorization.
.LI "\*L-t \*Vsuffix_list\*O"
Does not touch files whose suffixes do not appear \*Vsuffix_list\*O.
The suffix list is dot-separated, and \*L*\*O wildcards may be used.
For example, the suffix list \*L\&.c.y.foo*.h\*O allows \*Lerror\*O
to touch files ending with \*L\&.c\*O, \*L\&.y\*O, \*L\&.foo*\*O
and \*L\&.y\*O.
.LI "\*L-v\*O"
Overlays and sets up the visual editor \*Lvi\*O
to edit all files touched, and positions the editor at the first error
in the first touched file.  If \*Lvi\*O cannot be found, try
\*Lex\*O or \*Led\*O from standard places.
.LE
.SH DESCRIPTION
.PP
.iX "error command"
.iX "error messages"
Using the \*Lerror\*O program can replace the painful,
traditional methods of scribbling abbreviations of errors on paper, and
permits error messages and source code to be viewed simultaneously
without machinations of multiple windows in a screen editor.
.PP
The \*Lerror\*O program
looks at the error messages,
either from the specified file \*Vfile\*O or from the standard input,
and performs the following operations:
.ML
.LI
Attempts to determine which
language processor produced each error message.
.LI
Determines the source file and line number to which the error message refers.
.LI
Determines if the error message is to be ignored or not.
.LI
Inserts the (possibly slightly modified) error message into
the source file as a comment on the line preceding to which the
line the error message refers.
.LI
Sends error messages that cannot be categorized by language processor
or content to the standard output; does not insert these
error messages into any file,
.LE
The \*Lerror\*O program
touches source files only after all input has been read.
.PP
\*Lerror\*O is intended to be run with its standard input
connected via a pipe to the error message source.  Some
language processors put error messages on their standard error file;
others put their messages on the standard output.  Hence,
both error sources should be piped together into \*Lerror\*O.
For example, when using the \*Lcsh\*O syntax, the following
command line analyzes all the error messages produced
by whatever programs \*Lmake\*O
runs when making \*Llint\*O:
.iS
make -s lint | error -q -v
.iE
.PP
\*Lerror\*O knows about the error messages produced by the
following programs:
.ML
.LI
\*Las\*O
.LI
\*Lcc\*O
.LI
\*Lccom\*O
.LI
\*Lcpp\*O
.LI
\*Lf77\*O
.LI
\*Lld\*O
.LI
\*Llint\*O
.LI
\*Lmake\*O
.LI
\*Lpc\*O
.LI
\*Lpi\*O
.LE
\*Lerror\*O knows a standard format for error messages produced by
the language processors, so is sensitive to changes in these formats.
For all languages except Pascal,
error messages are restricted to be on one line.  Some error
messages refer to more than one line in more than one file;
\*Lerror\*O duplicates the error message and inserts it at
all of the places referenced.
.PP
\*Lerror\*O does one of six things with error messages:
.VL 4m
.LI "Synchronizes"
Some language processors produce short errors describing
which file it is processing.  \*Lerror\*O
uses these to determine the file name for languages that
do not include the file name in each error message.
These synchronization messages are consumed entirely by \*Lerror\*O.
.LI "Discards"
Error messages from \*Llint\*O that refer to one of the two
\*Llint\*O libraries, \*L/usr/libdata/lint/llib-lc\*O and
\*L/usr/libdata/lint/llib-port\*O are discarded,
to prevent accidentally touching these libraries.
Again, these error messages are consumed entirely by \*Lerror\*O.
.LI "Nullifies"
Error messages from \*Llint\*O
can be nullified if they refer to a specific function,
which is known to generate diagnostics which are not interesting.
Nullified error messages are not inserted into the source file,
but are written to the standard output.  The names
of \*Llint\*O functions
to ignore are taken from either the file named \*L\&.errorrc\*O
in the user's home directory, or from the file named by the
\*L-I\*O flag.  If the file does not exist,
no error messages are nullified.
If the file does exist, there must be one function name per line.
.LI "Identifies Non-File-Specific Messages"
Error messages that cannot be "intuited" are grouped together,
and written to the standard output before any files are touched.
These messages are not inserted into any source file.
.LI "Identifies File-Specific Messages"
Error message that refer to a specific file, but to no specific line,
are written to the standard output when that file is touched.
.LI "Identifies True Errors"
Error messages that can be "intuited" are candidates for
insertion into the file to which they refer.
.LE
.PP
Only true error messages are candidates for inserting into
the file to which they refer.  Other error messages are consumed entirely by
\*Lerror\*O or are written to the standard output.
\*Lerror\*O inserts the error messages into the source file on the line
preceding the line the language processor found in error.
Each error message is turned into a one-line comment for the
language, and is internally flagged with the string \*L###\*O at
the beginning of the error, and \*L%\&%\&%\&\*O at the end of the error.
This makes pattern searching for errors easier with an editor,
and allows the messages to be easily removed.
In addition, each error message contains the source line number
for the line to which the message refers.  A reasonably
formatted source program can be recompiled
with the error messages still in it,
without having the error messages themselves cause future errors.
For poorly formatted source programs in free format languages,
such as C or Pascal, it is possible to insert a comment into another comment,
which can wreak havoc with a future compilation.
To avoid this, programs with comments and source
on the same line should be formatted
so that language statements appear before comments.
.PP
\*Lerror\*O catches interrupt and terminate signals,
and if in the insertion phase, will orderly terminate what it is doing.
.SH FILES
.PP
.VL 11m
.LI "\*L~/\&.errorrc\*O"
Function names to ignore for
\*Llint\*O error messages.
.LI "\*L/dev/tty\*O"
User's teletype.
.LE
.SH NOTES
.AL
.LI
Opens the teletype directly to do user querying.
.LI
Source files with links make a new copy of the file with
only one link to it.
.LI
Changing a language processor's format of error messages
may cause \*Lerror\*O
to not understand the error message.
.LI
The \*Lerror\*O program,
since it is purely mechanical,
does not filter out subsequent errors caused by "floodgating"
initiated by one syntactically trivial error.  Humans are
still much better at discarding these related errors.
.LI
Pascal error messages belong after the lines affected
(error puts them before).  The alignment of the \e\e marking
the point of error is also disturbed by \*Lerror\*O.
.LI
\*Lerror\*O was designed for work on CRTs at reasonably high speed.
It is less pleasant on slow speed terminals, and has never been
used on hardcopy terminals.
.LE
.EQ
delim off
.EN

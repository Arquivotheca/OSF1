.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: make.1,v $ $Revision: 3.2.7.3 $ (DEC) $Date: 1994/01/13 20:06:31 $
.\" 
...\"
...\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
...\" ALL RIGHTS RESERVED
...\"
.TH make 1
.SH NAME
.PP
\*Lmake\*O - Maintains up-to-date versions of target files and performs shell commands
.SH SYNOPSIS
.iX "make command"
.iX "makefiles"
.iX "files" "makefiles"
.iX "versions" "programs"
.iX "maintaining" "program groups"
.iX "programs" "versions"
.iX "programs" "maintenance"
.iX "updating" "program groups"
.iX "programs" "updating"
.PP
.sS
.in +.5i
.ti -.5i
\*Lmake\*O
\*O[\*L-bemNqrtUuxy\*O]
\*O[\*L-c\*O
|
\*L-C\*O]
\*O[\*L-F\*O
|
\*L-i\*O
|
\*L-k\*O
|
\*L-S\*O]
\*O[\*L-n\*O
|
\*L-p\*O
|
\*L-s\*O]
.nL
\*O[\*L-f\*O
\*Vmakefile\*O]
.nL
\*O[\*Vmacro_definition\*O
\&...]
\*Vtarget\*O
\&...
.in -.5i
.sE
.PP
The \*Lmake\*O command updates one or more target names
by executing commands in a description file.
.SH FLAGS
.PP
.VL 4m
.LI "\*L-b\*O"
Has no effect; exists so that older-version
\*Lmake\*O dependency files continue to work.  This flag
is on by default.
.LI "\*L-c\*O"
Does not try to find a corresponding
Revision Control System (RCS) file and check it
out if the file does not exist.
.gL "Revision Control System (RCS)"
.gL "RCS"
.LI "\*L-C\*O"
Tries to find a corresponding RCS file and check it out
if the file does not exist.  This flag is on by default.
.LI "\*L-e\*O"
Does not reassign environment variable values within the makefile.
.LI "\*L-f\*O \*Vmakefile\*O"
.iX "description files"
.iX "files" "description"
Reads \*Vmakefile\*O for a description of
how to build the target file.  If you give
only a \*L-\*O (dash) for \*Vmakefile\*O,
\*Lmake\*O reads standard input.
If you do not use the \*L-f\*O flag, \*Lmake\*O looks in the
current directory for a description file named \*Lmakefile\*O,
\*LMakefile\*O, \*Lmakefile,v\*O, \*LMakefile,v\*O, \*LRCS/makefile,v\*O,
or \*LRCS/Makefile,v\*O.
You can specify more than one description file by entering the
\*L-f\*O flag more than once (with its associated \*Vmakefile\*O argument).
.LI "\*L-F\*O"
Causes a fatal error to occur
if the description file is not present.
.LI "\*L-i\*O"
Ignores error codes returned by commands and continues to
execute until finished. This is analogous to the pseudotarget
command \*L\&.IGNORE:\*O, which would be specified in the description
file.  The \*Lmake\*O command normally stops if a command returns a
nonzero code.  Note that \*Lmake\*O does not link the resulting
modules when you use this flag.
.LI "\*L-k\*O"
Stops processing the current target if an error occurs, but continues
with other branches that do not depend on the target that failed.
.LI "\*L-m\*O"
Searches for machine-specific subdirectories automatically.  This
is used in conjunction with the internally defined macro \*LMACHINE\*O.
This subdirectory is searched first, then the current directory,
and then the directories from \*LVPATH\*O, if defined.
.LI "\*L-n\*O"
Echoes commands, but does not execute them.  Commands prefaced by
\*L@\*O (at sign) are also echoed.
.LI "\*L-N\*O"
Disables all \*LMakeconf\*O processing.
.LI "\*L-p\*O"
Echoes all of the environment variables, macro definitions, and
target descriptions before executing any commands.
.LI "\*L-q\*O"
Does not execute the commands in the makefile.  Returns a status
code of zero if the object files are up-to-date; otherwise,
returns a nonzero value.
.LI "\*L-r\*O"
Causes the default rules to be ignored. This is analogous
to the pseudotarget command \*L\&.SUFFIXES:\*O, which would be specified
in the description file.  Using this
flag produces the additional warning message:
.nL
\*CNo suffix list\*O.
.LI "\*L-s\*O"
Does not echo the commands being executed. This is analogous to the
pseudotarget command \*L\&.SILENT:\*O, which would be specified in the
description file.
.LI "\*L-S\*O"
Stops processing the current target if an error occurs and does not
continue to any other branch. This is the default.
.LI "\*L-t\*O"
Updates the last-modified date of the target file to the current date.
.LI "\*L-U\*O"
Unlinks files that were previously checked out by RCS.
This flag is set as the default. If the \*L\&.PRECIOUS:\*O pseudotarget
is defined in the dependency file, the target files are not removed.
.LI "\*L-u\*O"
Does not unlink files that were previously checked out by RCS. This is
the opposite of the \*L-U\*O option, which is the default.
.LI "\*L-x\*O"
Does not execute any commands. Performs RCS checkout on target files
if the \*L-C\*O option is also specified, which is the default. The files
will not be unlinked if the \*L-u\*O option is also specified.
This flag is useful for creating working copies of source files.
When used with another option, the \*L-x\*O option performs only the
action specified by that option without performing any actions
specified in the current makefile.
.LI "\*L-y\*O"
Checks target files for dependencies.  Use this flag to
ensure that the target files are the latest revision of the source.
.LE
.SH DESCRIPTION
.PP
This \*Lmake\*O command is one of several versions available.  See the
RELATED INFORMATION section for references to information about other
versions of the command.  By default, the \*Lmake\*O(1) command
described  in this reference page is invoked if you type the command
name with no path.
.PP
The \*Lmake\*O command updates the target
based on whether the target's dependencies
have been modified relative to the time of last modification to
the target, or if the target itself does not exist.
.PP
.\" Target names are typically executable files,
.\" but this is not always the case.  
When the \*L-f\*O flag is present, a
description file, \*Vmakefile\*O, must be specified or, if a \*L-\*O (dash)
follows this flag, standard input is used as the description
file.  If the \*L-f\*O flag is not present, \*Lmake\*O looks for the file
\*Lmakefile\*O in the current directory to be used as the description
file.  If no target is specified, \*Lmake\*O makes the first target
found in the description file.
.SS Description Files
The description file, whether it is the \*Lmakefile\*O or some other
file, can contain a sequence of entries that define dependencies.
These entries are referred to as dependency lines. A dependency
line is defined as follows:
.iS
\*Vtarget1\*O [\*Vtarget2\*O...]\*L:\*O[\*L:\*O] [\*Vdependency1\*O...] [\*L;\*O \*Vcommand\*O...]
.iE
.PP
The dependency line, starting at the leftmost margin, begins with
the target.  Specify a single target or multiple targets
on the dependency line, separated by single spaces.  A target
can appear on multiple dependency lines. The target is separated
from its dependencies by a \*L:\*O (colon).  Use a single \*L:\*O when the
target is listed on a single dependency line; use a double \*L:\*O
when the target appears on multiple dependency lines. The dependencies
are listed sequentially separated by a single space.
.PP
The use of dependencies is not mandatory, but if they are not used,
the command line is always executed when the target is made. It
is also possible to place a command line after the
dependency list, as long as it is prefaced by a \*L;\*O (semicolon).
Delimit each command with a \*L;\*O (semicolon).
.PP
The dependency line can be followed by a command line. The command line
begins at the first tab indentation and can contain
any shell command.  There is no specific limit to the number of command
lines that follow the dependency line. By default, the command line
is echoed to standard output.  You can alter
this default behavior by specifying one of the following character
sequences before the command line:
.VL 4m
.LI "\*L-\*O"
Ignores any error returned by the command line.
.LI "\*L@\*O"
Does not display the command line.
.LI "\*L-@\*O"
Does not display the command line and ignores error
returned by command line.
.LE
.PP
To indicate to \*Lmake\*O that the current line continues to the next line,
place a \*L\e\*O (backslash) as the last character in the
line.  Comment lines
begin with \*L#\*O (number sign) and all text following this symbol
up to the end of the line is considered part of the comment.
.SS Environment
The \*Lmake\*O facility uses \*L/bin/sh\*O to execute commands.
.SS Macro Definitions
You can define
a macro either on the command line when \*Lmake\*O is
invoked or in the description file or in a separate file and then include this
file into the makefile.  When a macro is defined on the
command line, it uses the same syntax as required for the description
file. When defined on the command line, no spaces are allowed surrounding
the equals sign.  If the macro is a string, enclose it in quotes, both
single and double quotes are permitted.
A macro definition begins at the leftmost margin of the description
file but does not have to begin in column one.  Spaces and tabs to the right of the assignment operator are not
ignored. They are recognized as separators in a multiple listing.
Comments are permitted on the definition line. Two forms
of macro definitions can be used in the description file.
.PP
The syntax for a simple macro definition is specified as follows:
.iS
\*VMACRO\*O \*L=\*O \*Vstring\*O
.iE
.PP
Conditional macro definitions are also available, their syntax is as follows:
.iS
\*Vtarget\*L:=\*O \*VMACRO\*O \*L=\*O \*Vstring\*O
.iE
.PP
In the simple macro definition, the assignment to the macro name
always occurs. In the conditional macro definition, the assignment
occurs only if \*Vtarget\*O is the current target name.
.PP
Macro definitions are referenced in the description as follows:
.iS
$(\*VMACRO\*L)\*O
.iE
.PP
or
.iS
${\*VMACRO\*L}\*O
.iE
.PP
If the macro name is a single byte, the \*L( )\*O (parentheses) or
\*L{ }\*O (braces) can
be omitted, but the \*L$\*O (dollar sign) must remain.
.PP
Macro nesting is also permissible to a maximum of two levels. The
syntax for macro definitions is as follows:
.iS
$($(\*VMACRO\*L))\*O
.iE
.PP
or
.iS
$($\*VMACRO\*L)\*O
.iE
.PP
There is a facility to substitute portions of a predefined
macro definition during macro evaluation. The syntax of this is as follows:
.iS
($(\*VMACRO\*L:\*Vstring1\*L=\*Vstring2\*L)\*O
.iE
.PP
When \*VMACRO\*O is evaluated, every occurrence of \*Vstring1\*O defined in
\*VMACRO\*O is substituted with \*Vstring2\*O.  A macro is
considered to be made up of
a string of characters separated by spaces or tabs.  The variable
\*Vstring1\*O is delimited by either spaces or tabs.
.PP
A more generalized form of macro substitution has the following
syntax:
.iS
$(\*VMACRO\*L/\*Vleft\*L/\*Vright\*L)\*O
.iE
.PP
This form of macro substitution evaluates the macro according to the
same rules previously mentioned, but has a limited range of
substitution parameters. The \*Vleft\*O parameter can only have the
following values:
.VL 4m
.LI "\*L^\*O (circumflex)"
Refers to the beginning of the macro
.LI "\*L*\*O (asterisk)"
Refers to the entire macro
.LI "\*L$\*O (dollar sign)"
Refers to the end of the string.
.LE
.PP
Also, \*L^\*O (circumflex) is synonymous with the &
(ampersand).  For instance, if \*VMACRO\*O \*L= a b c\*O and the macro
substitution used was \*L$(\*VMACRO\*L/*/x&y)\*O, this
would yield \*Lxay xby xcy\*O.
.PP
Another form of macro substitution has the following syntax:
.iS
$(\*VMACRO\*L?\*Vstring1\*L:\*Vstring2\*L)\*O
.iE
.PP
In this macro substitution, if \*VMACRO\*O is defined, \*Vstring1\*O
is assigned to \*VMACRO\*O; otherwise, the value of \*Vstring2\*O is assigned
to \*VMACRO\*O.
.PP
The following is a list of macros defined when \*Lmake\*O is
invoked.  These definitions can be overridden by
reassigning a new value to the macro of interest:
.iS
AR=ar		MAKE=make
AS=as		MV=mv
CC=cc		PC=pc
CO=co		RANLIB=ranlib
CP=cp		RC=f77
EC=efl		RM=rm
FC=f77		YACC=yacc
LD=ld		YACCR=yacc -r
LEX=lex		YACCE=yacc -e
LINT=lint	COFLAG=-q
RMFLAGS=-f	MAKEFILE=makefile
\*O\c
.iE
.SS Internal Macros
The internal macros, set as each successive dependency is processed,
are defined as follows:
.VL 4m
.LI "\*L$*\*O"
Represents the filename segment of the component.
Used only in conjunction with suffix rules.
.LI "\*L$<\*O"
Represents the name of the component that is being used to make the target.
Used only in conjunction with suffix rules.
.LI "\*L$?\*O"
Evaluates to the list of components that are out of last-modified-date
alignment with the current target.
.LI "\*L$@\*O"
Refers to the current target name in a shorthand notation.
.LI "\*L$$@\*O"
Refers to the current target name in a shorthand notation
and can be used only on the dependency line.
.LE
.SS Special Macros
The following are predefined macros used by the default inference
rules to the specified compiler:
.VL 4m
.LI "\*LCFLAGS\*O"
For \*Lcc\*O flags. Default is null.
.LI "\*LFFLAGS\*O"
For \*Lf77\*O flags. Default is null.
.LI "\*LPFLAGS\*O"
For \*Lpc\*O flags.  The default is null.
.LI "\*LLFLAGS\*O"
For \*Llex\*O flags. Default is null.
.LI "\*LYFLAGS\*O"
For \*Lyacc\*O flags. Default is null.
.LI "\*LLDFLAGS\*O"
For \*Lld\*O flags. Default is null.
.LI "\*LMFLAGS\*O"
Contains the initial command line options to this invocation of \*Lmake\*O,
including the \*L-\*O (dash) that prefaces the flag
character. Default is null.
.LI "\*LMAKEFLAGS\*O"
Contains the initial command line options,
not including the \*L-\*O (dash) that prefaces the
flag character.  The macro is exported and
therefore available to other invocations of
\*Lmake\*O.  As recursive calls to \*Lmake\*O are executed,
the flags are collected and passed to the
next invocation. The \*L-f\*O, \*L-p\*O, and \*L-r\*O flags are
not assigned in this macro. All command line
macro definitions are assigned to this macro
and cannot be changed. Default is null.
.LI "\*LVPATH\*O"
Set with a list of directory pathnames separated
by a \*L:\*O (colon). This is used when searching for a
dependency-related file. If this macro is defined,
then those directories are searched. If this
macro is not defined or is just defined with a \*L\&.\e\*O (dot backslash),
only the current directory is searched. Default is null.
.LE
.SS Pseudotarget Names
You can place
pseudotarget names anywhere in the description
file.  You can also redefine them at any point in the description file.
.VL 4m
.LI "\*L\&.DEFAULT:\*O"
Is executed if no dependency line or suffix definition exists for a target.
.LI "\*L\&.IGNORE:\*O"
Causes \*Lmake\*O to continue executing
commands even if an error was returned by the command.
This is analogous to the \*L-i\*O flag.
.LI "\*L\&.PRECIOUS:\*O"
Specifies the names of target files that are not to be
destroyed.  Note the use of the \*L-U\*O flag with this
pseudotarget name. The default behavior of \*Lmake\*O is to
delete the target on return of an error or an interrupt.
.LI "\*L\&.SILENT:\*O"
Prevents echoing of the command
line to standard output. This is analogous to the \*L-s\*O
flag and to the \*L-\*O (dash) placed at the beginning
of the command line.
.LI "\*L\&.SUFFIXES:\*O"
Defines the standard
suffixes utilized by the system tools to identify
specific types of files.
.IP
The following is the default list:
\*L\&.out \&.o \&.s \&.c \&.F \&.f \&.e \&.r \&.y \&.yr \&.ye \&.l \&.p \&.sh \&.csh \&.h\*O
.LE
.SS Special Targets
Special targets are used to accomplish narrow tasks. The special
target \*L\&.INOBJECTDIR\*O is used to specify that only certain targets
be built in \*LOBJECTDIR\*O. The syntax for this target is as follows:
.iS
\&.INOBJECTDIR: \*Vdependency1\*O....
.iE
.PP
To repetitively have a target executed before or after some previous
target without having to repeat its name many times, use the
special targets \*L\&.INIT\*O or \*L\&.EXIT\*O.
.SS Default Rules
The \*Lmake\*O facility
infers prerequisites for files on the dependency line for which
no explicit dependency is stated. In other words, if a \*L\&.o\*O file is
the target, then \*Lmake\*O infers that a \*L\&.c\*O file is the dependency.
.PP
For example:
.iS
program: foo.o bar.o
	cc -o program foo.o bar.o
foo.o:foo.c
	cc -c foo.c
bar.o:bar.c
	cc -c bar.c
\*O\c
.iE
.PP
can be reduced to the following:
.iS
program: foo.o bar.o
	cc -o program
foo.o bar.o:
\*O\c
.iE
.SS Configuration File Support
The configuration file \*LMakeconf\*O is used to alter the default
rules. This file can contain the definitions of several macros.
When \*Lmake\*O is invoked, it searches for this configuration
file. This file can contain rules that override the default rules
\*Lmake\*O uses.  The \*Lmake\*O facility searches for this file,
starting in the current directory and continuing through the build
tree to its root.
.PP
Due to the increased use of shared file systems, it is desirable
to have a facility to direct \*Lmake\*O to the location of object
directories. If macro \*LOBJECTDIR\*O is defined in the \*LMakeconf\*O
file, its value is used as the object root. It is formed by appending
the value assigned to \*LOBJECTDIR\*O in the \*LMakeconf\*O
file to the pathname
where the \*LMakeconf\*O file was found.  The \*Lmake\*O command
does a \*Lchdir()\*O
to the \*LOBJECTDIR\*O.  \*LVPATH\*O is
modified so that \*Lmake\*O can find the target source files.
.PP
If the macro \*LSOURCEDIR\*O is defined, it is interpreted as the
source root for \*Lmake\*O. It operates under the same rules
as \*LOBJECTDIR\*O and updates \*LVPATH\*O accordingly.
.PP
Other configuration file macros available are as follows:
.VL 4m
.LI "\*LMAKETOP\*O"
The relative path from the starting directory to
the \*LMakeconf\*O directory.
.LI "\*LMAKEDIR\*O,"
The path from the \*LMakeconf\*O directory to the starting directory.
.LI "\*LMAKECWD\*O"
The current directory for \*Lmake\*O.
.LI "\*LMAKEPSD\*O"
The path from the current directory for \*Lmake\*O to the starting directory.
.LE
.SS Recursive Makefiles
Recursive invocations of \*Lmakefiles\*O are possible from a command line.
Use of the macro \*LMAKE\*O has a special effect on the other invocations of
\*Lmake\*O.  The line is executed even if the \*L-n\*O flag
was specified. The \*L-n\*O
flag is passed to the other invocations of \*Lmake\*O through the
\*LMAKEFLAGS\*O macro. Use the macro \*LMAKE\*O
when using a hierarchy of makefiles.
.PP
The following environment variables are exported to invocations of
\*Lmake\*O: \*LMAKEFLAGS\*O, \*LMAKECONF\*O, \*LMAKECWD\*O,
and \*LMAKEPSD\*O.
.SS RCS Files
If a file is specified on the dependency line and is not present in
the current directory, \*Lmake\*O searches for it. The search path starts
in the current directory, then the \*LVPATH\*O macro components are searched,
then both the \*L\&./RCS\*O and current directory with
the extension \*L,v\*O are searched.  If an
RCS file is found, it is checked out
using the \*L-q\*O flag, used for whatever purpose is required, and then
deleted.  The \*L-c\*O flag suppresses the checkout, while the \*L-u\*O
suppresses the deletion of the file.
.PP
By default, the update time of an RCS file is taken from its last
modification. However, by specifying a rule for the special target
\*L\&.RCSTIME\*O, the real modification time of a particular revision can
be determined. \*L$<\*O sets to the name of the \*L,v\*O file before
invoking the command, which is expected to print the time (in decimal
\*Ltime_t\*O format) on standard output. The appropriate \*L\&.RCSTIME\*O
definition would be as follows:
.iS
\&.RCSTIME:
	@rcstime $(COFLAGS) $<
\*O\c
.iE
.SH EXAMPLES
.PP
.AL
.LI
To make the file specified by the first entry in the description
file, enter:
.iS
make
\*O\c
.iE
.LI
To display, but not run, the commands that \*Lmake\*O would use
to make a file, enter:
.iS
make  -n  search.o
\*O\c
.iE
.IP
You might want to do this to verify that a new description file is
correct before using it.
.LI
To display the internal rules, enter:
.iS
make  -p  -f  /dev/null
\*O\c
.iE
.IP
This lists the internal rules and macros (and error messages from
\*Lmake\*O).  All exported shell environment variables are included in
the list of macro definitions.
.LE
.SH NOTES
.PP
.AL
.LI
Some commands return a nonzero status when, in fact, they should
have returned a zero status. Use the \*L-i\*O flag to overcome this.
.LI
Commands that are directly executed by the shell (specifically
\*Lcd\*O), are ineffective across newlines in \*Lmake\*O.
.LE
.SH FILES
.PP
.VL 11m
.LI "\*Lmakefile\*O"
\*Lmake\*O commands file.
.LI "\*LMakefile\*O"
\*Lmake\*O commands file.
.LI "\*LMakeconf\*O"
Configuration file.
.LE
.SH RELATED INFORMATION
.PP
Commands:  \*Lsh\*O(1), \*Ltouch\*O(1), \*Lmake\*O(1u), \*Lmake\*O(1p).
.PP
\*EProgrammer's Guide\*O
.EQ
delim off
.EN

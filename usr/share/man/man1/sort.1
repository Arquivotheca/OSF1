.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: sort.1,v $ $Revision: 3.2.7.7 $ (DEC) $Date: 1993/12/07 23:22:45 $
.\" @(#)$RCSfile: sort.1,v $ $Revision: 3.2.7.7 $ (DEC) $Date: 1993/12/07 23:22:45 $
.\" 
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.TH sort 1
.SH NAME
\*Lsort\*O \- Sorts or merges files
.SH SYNOPSIS
.PP
.sS
\*Lsort\*O
\*O[\*L\(hym\*O]
\*O[\*L\(hyo\*O\ \*Voutput_file\*O]
\*O[\*L\(hyAbdfinru\*O]
\*O[\*L\(hyk\ \*Vkeydef\*O] \&...
\*O[\*L\(hyt\ \*Vcharacter\*O]
\*O[\*L\(hyT\*O\ \*Vdirectory\*O]
\*O[\*L\(hyy\*O][\*Vkilobytes\*O]
\*O[\*L\(hyz\ \*Vrecord_size\*O]\ \&.\&.\&.
\*Vfile\*O\ \&.\&.\&.
.PP
\*Lsort\*O
\*L\(hyc\*O
\*O[\*L\(hyu\*O]
\*O[\*L\(hyAbdfinru\*O]
\*O[\*L\(hyk\ \*Vkeydef\*O] \&...
\*O[\*L\(hyt\ \*Vcharacter\*O]
\*O[\*L\(hyT\*O\ \*Vdirectory\*O]
\*O[\*L\(hyy\*O][\*Vkilobytes\*O]
\*O[\*L\(hyz\ \*Vrecord_size\*O]\ \&.\&.\&.
\*Vfile\*O\ \&.\&.\&.
.sE
.PP
The following older syntax is now maintained for backward compatibility,
but may be withdrawn in future issues:
.PP
.sS
\*Lsort\*O
\*O[\*L\(hyAbcdfimnru\*O]
\*O[\*L\(hyo\*O\ \*Voutput_file\*O]
\*O[\*L\(hyt\ \*Vcharacter\*O]
\*O[\*L\(hyT\*O\ \*Vdirectory\*O]
\*O[\*L\(hyy\*O][\*Vkilobytes\*O]
\*O[\*L\(hyz\ \*Vrecord_size\*O]
\*O[\*L+\*Vfskip\*O][\*L\&.\*Vcskip\*O]
\*O[\*L\(hy\*Vfskip\*O][\*L\&.\*Vcskip\*O]
\*O[\*L\(hybdfinr\*O]\ \&...
\*Vfile\*O\ \&.\&.\&.
.sE
.SH FLAGS
.PP
The \*L-d\*O, \*L-f\*O, \*L-i\*O, \*L-n\*O, and \*L-r\*O flags
override the default ordering rules.  When ordering flags appear
independent of any key field specifications, the requested field
ordering rules are applied globally to all sort keys.  When attached
to a specific key (see \*L-k\*O), the specified ordering flags
override all global ordering flags for that key.  In the obsolescent
forms, if one or more of these flags follows a \*L+\*Vfskip\*O flag,
it affects only the key field specified by that preceding flag.
.VL 4m
.LI "\*L-A\*O"
Sorts on a byte-by-byte basis using each character's encoded value.
On some systems, extended characters will be considered negative
values, and so sort before ASCII characters.  If you are sorting ASCII
characters in a non-C/POSIX locale, this flag performs much faster.
.LI "\*L-b\*O"
Ignores leading spaces and tabs when determining the starting and
ending positions of a restricted sort key.  If the \*L-b\*O flag is
specified before the first \*L-k\*O flag, the \*L-b\*O flag is
applied to all \*L-k\*O flags on the command line; otherwise,
the \*L-b\*O flag can be independently attached to each \*L-k\*O
\*Vfield_start\*O or \*Vfield_end\*O argument.
.LI "\*L-c\*O"
Checks that the input is sorted according to the ordering rules
specified in the flags and the collating sequence of the current
locale.  No output is produced; only the exit code is affected.
.LI "\*L-d\*O"
Specifies that only spaces and alphanumeric characters (according to
the current setting of \*LLC_TYPE\*O) are significant in comparisons.
.LI "\*L-f\*O"
Treats all lowercase characters as their uppercase equivalents
(according to the current setting of \*LLC_TYPE\*O) for the purposes
of comparison.
.LI "\*L-i\*O"
Sorts only by printable characters (according to the current setting of
\*LLC_TYPE\*O).
.LI "\*L-k \*Vkeydef\*O"
.\" .zA "defect, 8034, R1.1.2, clarify"
Specifies one or more (up to 10) restricted sort key field definitions.  This
flag replaces the obsolescent \*L+\*Vfskip\*L\&.\*Vcskip\*O and
\*L-\*Vfskip\*L\&.\*Vcskip\*O flags.
.\" .zZ "defect, 8034, R1.1.2, clarify"
A field comprises a maximal sequence of non-separating characters and,
in the absence of the \*L-t\*O flag, any preceding field separator.
.IP
The format of a key field definition is as follows:
.iS
\*Vfield_start\*O[\*Vtype\*O][\*L,\*Vfield_end\*O[\*Vtype\*O]]
.iE
where the \*Vfield_start\*O and \*Vfield_end\*O arguments define a key
field that is restricted to a portion of the line, and \*Vtype\*O
is a modifier specified by \*Lb\*O, \*Ld\*O, \*Lf\*O, \*Li\*O, \*Ln\*O,
or \*Lr\*O.  The \*Lb\*O modifier behaves like the \*L-b\*O flag,
but applies only to the \*Vfield_start\*O or \*Vfield_end\*O argument
to which it is attached.  The other modifiers behave like their
corresponding flags, but apply only to the key field to which they are
attached; these modifiers have this effect if specified with
\*Vfield_start\*O, \*Vfield_end\*O or both.
.IP
Modifiers attached to a
\*Vfield_start\*O or \*Vfield_end\*O argument override any
specifications made by the flags.  A missing \*Vfield_end\*O argument
means the last character of the line.
.IP
The \*Vfield_start\*O portion of the \*Vkeydef\*O argument takes
the following form:
.iS
\*Vfield_number\*O[\*L\&.\*Vfirst_character\*O]
.iE
Fields and characters within fields are numbered starting with 1.
The \*Vfield_number\*O and \*Vfirst_character\*O pieces, interpreted
as positive decimal integers, specify the character to be used as part
of a sort key.  If \*Vfirst_character\*O is not specified,
the default is the first character of the field.
.IP
The \*Vfield_end\*O portion of the \*Vkeydef\*O argument takes
the following form:
.iS
\*Vfield_number\*O[\*L\&.\*Vlast_character\*O]
.iE
The \*Vfield_number\*O is the same as that described for
\*Vfield_start\*O.  The \*Vlast_character\*O argument, interpreted
as a nonnegative decimal integer, specifies the last character to be
used as part of the sort key.  If \*Vlast_character\*O evaluates to 0
(zero) or is not specified, the default is the last character of the
field specified by \*Vfield_number\*O.
.IP
If \*L-b\*O is in effect, characters within a field are counted from
the first nonspace character in the field.  (This applies separately
to \*Vfirst_character\*O and \*Vlast_character\*O.)
.IP
If \*L-k\*O is not specified, the default sort key is the entire line.
.IP
When there are multiple key fields, later keys are compared only after
all earlier keys compare as equal.  Except when the \*L-u\*O flag is
specified, lines that otherwise compare as equal are ordered as though
none of the flags \*L-d\*O, \*L-f\*O, \*L-i\*O, \*L-n\*O, or \*L-k\*O
were present (but with \*L-r\*O still in effect, if it was specified)
and with all bytes in the lines significant to the comparison.
.\" .zA "defect, 8034, R1.1.2, clarify"
.IP
The algorithm for the \*L-k\*O flag can be summarized as follows:
.oS
/*
 * -ka.b,c.d = if d==0 then +(a-1).(b-1) -c.d
 *              else +(a-1).(b-1) -(c-1).d
 */
.oE
.\" .zZ "defect, 8034, R1.1.2, clarify"
.LI "\*L-m\*O"
Merges only (assumes sorted input).
.LI "\*L-n\*O"
Sorts any initial numeric strings (including regular expressions
consisting of optional spaces, optional dashes, and zero (0) or more
digits with optional radix character and thousands separator, as
defined by the current locale) by arithmetic value.  An empty digit
string is treated as zero; leading zeros and signs on zeros do not
affect ordering.  Only one period (.) can be used in numeric
strings.  All subsequent periods (.) and any character to the
right of the period (.) will be ignored.
.LI "\*L-o \*Voutput_file\*O"
Directs output to \*Voutput_file\*O instead of standard output.
The \*Voutput_file\*O can be the same as one of the input files.
.LI "\*L-r\*O"
Reverses the order of the specified sort.
.LI "\*L-t \*Vcharacter\*O"
Sets the field separator character to \*Vcharacter\*O.  The
\*Vcharacter\*O argument is not considered to be part of a field
(although it can be included in a sort key).
Each occurrence of \*Vcharacter\*O is significant
(for example, two consecutive
occurrences of \*Vcharacter\*O delimit an empty field).  To specify the
tab character as the field separator, you must enclose it in \*L' '\*O
(single quotes).
.IP
The default field separator is one or more spaces.
.LI "\*L-T \*Vdirectory\*O"
Places all the temporary files that are created in
\*Vdirectory\*O.
.LI "\*L-u\*O"
Suppresses all but one in each set of equal lines (for example,
lines whose sort keys match exactly).  Ignored
characters such as leading tabs and spaces, and characters outside of
sort keys are not considered in this type of comparison.
.IP
If used with the \*L-c\*O flag, \*L-u\*O checks that there are no
lines with duplicate keys, in addition to checking that the input file
is sorted.
.LI "\*L-y \*O[\*Vkilobytes\*O]"
Starts the \*Lsort\*O command
using \*Vkilobytes\*O of main storage and adds storage
as needed.  (If \*Vkilobytes\*O is less than the minimum storage
size or greater than the maximum, the minimum or maximum is used
instead.)  If the \*L-y\*O flag is omitted, the \*Lsort\*O command
starts with the default storage size; \*L-y 0\*O starts with minimum
storage, and \*L-y\*O (with no value) starts with the maximum
storage.  The amount of storage used by the \*Lsort\*O command has a
significant impact on performance.  Sorting a small file in a large
amount of storage is wasteful.
.LI "\*L-z \*Vrecord_size\*O"
Prevents abnormal termination if lines being sorted are longer than
the default buffer size can handle.  When the \*L-c\*O or \*L-m\*O
flags are specified, the sorting phase is omitted and a system default
size buffer is used.  If sorted lines are longer than this size, \*Lsort\*O
terminates abnormally.  The \*L-z\*O option specifies that the longest
line be recorded in the sort phase so that adequate buffers can be allocated in
the merge phase.  The \*Vrecord_size\*O argument must be a value in bytes equal to or
greater than the number of bytes in the longest line to be merged.
.LI "\*L+\*Vfskip\*L\&.\*Vcskip\*O"
.\" .zA "defect, 8034, R1.1.2, clarify"
Specifies the start position of a key field.  See the \*L-k\*O
flag for a description of the current way to perform this
operation.  (Obsolescent)
.\" .zZ "defect, 8034, R1.1.2, clarify"
.IP
The \*Vfskip\*O variable
specifies the number of fields to skip from the
beginning of the input line, and the \*Vcskip\*O variable specifies the number
of additional characters to skip to the right beyond that point.
For both the starting point (+\*Vfskip.cskip\*O) and the ending
point (-\*Vfskip.cskip\*O) of a sort key, \*Vfskip\*O is measured
from the beginning of the input line, and \*Vcskip\*O is measured
from the last field skipped.  If you omit \*V\&.cskip\*O, \&.0 (zero) is
assumed.  If you omit \*Vfskip\*O, 0 (zero) is assumed.  If you omit the
ending field specifier (-\*Vfskip.cskip\*O), the end of the line is
the end of the sort key.
.IP
You can supply more than one sort key by repeating
+\*Vfskip.cskip\*O and -\*Vfskip.cskip\*O.  In cases where you
specify more than one sort key, keys specified further to the right
on the command line are compared only after all earlier keys are
sorted.  For example, if the first key is to be sorted in
numerical order and the second according to the collating sequence, all strings
that start with the number 1 are sorted according to the collating order
before the strings that start with the number 2.  Lines that are identical
in all keys are sorted with all characters significant.  You can
also specify different flags for different sort keys in multiple
sort keys.
.LI "\*L-\*Vfskip\*L\&.\*Vcskip\*O"
.\" .zA "defect, 8034, R1.1.2, clarify"
Specifies the end position of a key field.  See the \*L-k\*O
flag for a description of the current way to perform this
operation.  (Obsolescent)
.\" .zZ "defect, 8034, R1.1.2, clarify"
.LE
.\" .zZ "review, R1.1.2, XPG4"
.SH DESCRIPTION
.PP
The \*Lsort\*O command sorts lines in its input files and
writes the result to standard output.
.iX "sort command"
.iX "sorting" "files"
.iX "merging" "files"
.iX "files" "merging"
.iX "files" "sorting
.\" .zA "review, R1.1.2, XPG4"
.PP
The \*Lsort\*O command performs one of the following functions:
.AL
.LI
Sorts lines of all the named files together and writes the result to
the specified output.
.LI
Merges lines of all the named (presorted) files together and writes
the result to the specified output.
.LI
Checks that a single input file is correctly presorted.
.LE
.PP
Comparisons are based on one or more sort keys extracted from each
line of input (or the entire line if no sort keys are specified), and
are performed using the collating sequence of the current locale.
.\" .zZ "review, R1.1.2, XPG4"
.PP
The \*Lsort\*O command treats all of its input
files as one file when it performs the sort.
A \*L-\*O (dash) in place of a filename specifies standard input.
If you do not specify a filename, it sorts standard input.
.PP
The \*Lsort\*O command
can handle a variety of collation rules typically used in
Western European languages, including primary/secondary sorting, one-to-two
character mapping, N-to-one character mapping, and ignore-character
mapping.  To summarize briefly:
.SS Primary/Secondary Sorting
In this system, a group of characters all sort to the same primary
location.  If there is a tie, a secondary sort is applied.  For
example, in French, the plain and accented \*La\*O's all sort to the
same primary location.  If two strings collate to the same primary
location, the secondary sort goes into effect.  These words are
in correct French order:
.iS
\(a`
abord
\(a^pre
apr\(e`s
\(a^pret\(e'
azur
\*O\c
.iE
.SS One-to-Two Character Mappings
This system requires that certain single characters be treated as
if they were two characters.  For example, in German, the \*L\(ss\*O
(scharfes-S) is collated as if it were \*Lss\*O.
.SS N-to-One Character Mappings
Some languages treat a string of characters as if it were one single
collating element.  For example, in Spanish, the \*Lch\*O and \*Lll\*O
sequences are treated as their own elements within the alphabet.
(\*Lch\*O comes between \*Lc\*O and \*Ld\*O in the alphabet,
and \*Lll\*O comes between \*Ll\*O and \*Lm\*O.)
.SS Ignore-Character Mappings
In some cases, certain characters may be ignored in collation.  For example,
if \*L-\*O were defined as an ignore-character, the strings
\*Lre-locate\*O and \*Lrelocate\*O would sort to the same place.
.if n .PP
The results that you get from \*Lsort\*O depend on the collating sequence
as defined by the current setting of the \*LLC_COLLATE\*O environment
variable.  The configuration files for collation and character
classification information are \*L/usr/lib/nls/loc/src/\*Vlocale\*L\&.src\*O.
.if n .PP
A field is one or more characters bounded by the beginning of a line
and the current field separator, or one or more characters bounded by a
field separator on either side.  The space character is the default
field separator.
.if n .PP
Lines longer than 1024 bytes are truncated by
\*Lsort\*O.  The maximum number of fields on a line is 10.
.SH EXAMPLES
.PP
The following examples apply to the C locale, unless it is specifically
stated otherwise.
.\" .zA "review, R1.1.2, XPG4"
.AL
.LI
To perform a simple sort, enter:
.iS
sort  fruits
\*O\c
.iE
.IP
This displays the contents of \*Lfruits\*O sorted in ascending
lexicographic order.  This means that the characters in each column are
compared one by one, including spaces, digits, and special characters.
.IP
For instance, if \*Lfruits\*O contains the text:
.iS
banana
orange
Persimmon
apple
%\&%\&banana
apple
ORANGE
\*O\c
.iE
.IP
then \*Lsort fruits\*O displays:
.oS
%\&%\&banana
ORANGE
Persimmon
apple
apple
banana
orange
\*O\c
.oE
.IP
This order follows from the fact that in the ASCII collating
sequence, symbols (such as \*L%\*O) precede uppercase letters,
and all uppercase letters precede the lowercase letters.
If you are using a different collating order, your results may be different.
.LI
To group lines that contain uppercase and special
characters with similar lowercase lines, and remove duplicate lines, enter:
.iS
sort  -d  -f  -u  fruits
\*O\c
.iE
.IP
The \*L-u\*O flag tells \*Lsort\*O to remove duplicate
lines, making each line of the file unique.  This displays:
.oS
apple
%\&%\&banana
orange
Persimmon
\*O\c
.oE
.IP
Note that not only was the duplicate \*Lapple\*O removed,
but \*Lbanana\*O and \*LORANGE\*O were removed as well.
The \*L-d\*O flag told \*Lsort\*O to ignore symbols, so
\*L%\&%\&banana\*O and \*Lbanana\*O were considered to be duplicate lines and
\*Lbanana\*O was removed.  The \*L-f\*O flag told \*Lsort\*O not to
differentiate between uppercase and lowercase, so \*LORANGE\*O and
\*Lorange\*O were considered to be duplicate lines and \*LORANGE\*O was
removed.
.IP
When the \*L-u\*O flag is used with input that contains nonidentical lines
that are considered by \*Lsort\*O (due to other flags) to be duplicates,
there is no way to predict which lines \*Lsort\*O will
keep and which it will remove.
.LI
To sort as in Example 2, but remove duplicates unless capitalized or
punctuated differently, enter:
.iS
sort -u -k 1df -k 1  fruits
\*O\c
.iE
.IP
Flags appearing between sort key specifiers apply only to the specifier
preceding them.  There are two sorts specified in this command line.
The \*L-k 1df\*O argument specifies the first sort, of
the same type done with \*L-d -f\*O in Example 3.  Then \*L-k 1\*O performs
another comparison to distinguish lines that are not actually identical.
This prevents \*L-u\*O, which applies to both sorts because it precedes the
first sort key specifier, from removing lines that are not exactly identical
to other lines.
.IP
Given the \*Lfruits\*O file shown in Example 1, the added \*L-k 1\*O
distinguishes \*L%\&%\&banana\*O from \*Lbanana\*O
and \*LORANGE\*O from \*Lorange\*O.
However, the two instances of \*Lapple\*O are exactly identical,
so one of them is deleted.
.oS
apple
%\&%\&banana
banana
ORANGE
orange
Persimmon
\*O\c
.oE
.LI
To specify a new field separator, enter:
.iS
sort  -t : -k 2  vegetables
\*O\c
.iE
.IP
This sorts \*Lvegetables\*O, comparing the text that follows
the first colon on each line.  The \*L-t :\*O option tells \*Lsort\*O that
colons separate fields. The \*L-k 2\*O argument tells
\*Lsort\*O to ignore the first field and to compare from the start
of the second field to the end of the line.
If \*Lvegetables\*O contains:
.iS
yams:104
turnips:8
potatoes:15
carrots:104
green beans:32
radishes:5
lettuce:15
\*O\c
.iE
.IP
then \*Lsort -t : -k 2 vegetables\*O displays:
.oS
carrots:104
yams:104
lettuce:15
potatoes:15
green beans:32
radishes:5
turnips:8
\*O\c
.oE
.IP
Note that the numbers are not in ascending order.
This is because a lexicographic sort
compares each character from left to right.  In other words,
\*L3\*O comes before \*L5\*O so \*L32\*O comes before \*L5\*O.
.LI
To sort on more than one field, enter:
.iS
sort  -t : -k 2n  -k 1r  vegetables
\*O\c
.iE
.IP
This performs a numeric sort on the second field
(\*L-k 2n\*O) and then, within that ordering, sorts the
first field in reverse collating order
(\*L-k 1r\*O).  The output looks like this:
.oS
radishes:5
turnips:8
potatoes:15
lettuce:15
green beans:32
yams:104
carrots:104
\*O\c
.oE
.IP
The lines are sorted in numeric order; when two lines have the
same number, they appear in reverse collating order.
.LI
To replace the original file with the sorted text, enter:
.iS
sort  -o  vegetables  vegetables
\*O\c
.iE
.IP
The \*L-o vegetables\*O flag
stores the sorted output into the file \*Lvegetables\*O.
.LI
To collate using Spanish rules, set the \*LLC_COLLATE\*O (or \*LLANG\*O)
environment variable to a Spanish locale, and then use \*Lsort\*O
in the regular way, enter:
.iS
sort sp.words
\*O\c
.iE
.IP
If an input file named \*Lsp.words\*O contains the following
Spanish words:
.iS
dama
loro
chapa
canto
mover
chocolate
curioso
llanura
\*O\c
.iE
.IP
The sorted file looks like this:
.oS
canto
curioso
chapa
chocolate
dama
loro
llanura
mover
\*O\c
.oE
.IP
If you sort the file in the default C locale, the output looks
like this:
.oS
canto
chapa
chocolate
curioso
dama
llanura
loro
mover
\*O\c
.oE
.LE
.\" .zZ "review, R1.1.2, XPG4"
.SH FILES
.PP
.VL 18m
.LI "\*L/usr/lib/nls/loc/src/\*Vlocale\*L\&.src\*O"
Configuration files.
.LE
.\" .zA "review, R1.1.2, XPG4"
.SH EXIT VALUES
.PP
The \*Lsort\*O command returns the following exit values:
.VL 4m
.LI "0"
All input files were output successfully, or \*L-c\*O was specified
and the input file was correctly sorted.
.LI "1"
Under the \*L-c\*O flag, the file was not ordered as specified, or if
the \*L-c\*O and \*L-u\*O flags were both specified, two input lines
were found with equal keys.
.LI ">1"
An error occurred.
.LE
.\" .zZ "review, R1.1.2, XPG4"
.SH RELATED INFORMATION
.PP
.\" Begin Digital-specific information
.\" Fixed cross-references
Commands:  \*Lcomm\*O(1),
.\" \*Lctab\*O(1), 
\*Ljoin\*O(1),
\*Luniq\*O(1).
.PP
Functions: \*Lsetlocale\*O(3)
.PP
Files:  \*Llocale\*O(4).
.\" \*Lctab\*O(4).
.\" End Digital-specific information
.EQ
delim off
.EN

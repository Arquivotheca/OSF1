.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: make.1p,v $ $Revision: 1.1.2.7 $ (DEC) $Date: 1994/01/13 20:06:39 $
.\"
.\"
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.\"
.\" Copyright (c) 1990 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms are permitted provided
.\" that: (1) source distributions retain this entire copyright notice and
.\" comment, and (2) distributions including binaries display the following
.\" acknowledgement:  ``This product includes software developed by the
.\" University of California, Berkeley and its contributors'' in the
.\" documentation or other materials provided with the distribution and in
.\" all advertising materials mentioning features or use of this software.
.\" Neither the name of the University nor the names of its contributors may
.\" be used to endorse or promote products derived from this software without
.\" specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
.\" WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\"
.\"     @(#)make.1      5.5 (Berkeley) 1/11/91
.\"
.TH make 1p
.SH NAME
\*Lmake\*O \- Maintains program dependencies
.SH SYNOPSIS
.PP
.sS
.in +.5i
.ti -.5i
\*Lmake\*O
\*O[\*L\(hyeinpqrst\*O]
\*O[\*L\(hyf\ \*Vmakefile\*O]\ \&...
\*O[\*L\(hyk\*O\ |\ \*L\(hyS\*O]
\*O[\*Voperands\*O\ \&...]
.in -.5i
.sE
.SH FLAGS
.PP
.VL 4m
.LI "\*L-e\*O"
Specifies that environmental variables override macro assignments within
makefiles.
.LI "\*L-f \*Vmakefile\*O"
Specifies a makefile to read instead of the default makefile.  If
\*Vmakefile\*O is \*L\-\*O (dash), standard input is read.
Multiple makefiles may be specified, and are read in the order specified.
.LI "\*L-i\*O"
Ignores nonzero exit of shell commands in the makefile.
Equivalent to specifying \*L\-\*O (dash) before each command line in
the makefile.
.\".LI "\*L-j \*Vmax_jobs\*O"
.\"Specifies the maximum number of jobs that
.\"\*Lmake\*O
.\"may have running at any one time.
.LI "\*L-k\*O"
Continues processing after errors are encountered, but only on those targets
that do not depend on the target whose creation caused the error.
.LI "\*L-n\*O"
Displays the commands that would have been executed, but does not actually
execute them.  If the lines have \*L+\*O (plus sign) prefixes, the
commands will be executed.
.LI "\*L-p\*O"
Displays all the macro definitions and target descriptions.
.LI "\*L-q\*O"
Does not execute any commands, but returns exit value
0 (zero) if the specified targets are up-to-date and 1, otherwise.  If the
lines have \*L+\*O (plus sign) prefixes, the
commands will be executed.
.LI "\*L-r\*O"
Does not use the built-in rules specified in the system makefile.
.LI "\*L-S\*O"
Terminates \*Lmake\*O process if errors are encountered during
updates.  This is the default behavior and is the opposite of the
\*L-k\*O option.
.LI "\*L-s\*O"
Does not echo any commands as they are executed.
Equivalent to specifying \*L@\*O before each command line in the makefile.
.LI "\*L-t\*O"
Creates a target
or updates its modification time to make it appear up-to-date,
instead of rebuilding a target as specified in the makefile.   The
target command lines are typically not executed, unless the
target command lines have \*L+\*O (plus sign) prefixes, in which case
they are executed.
.LI "\*Voperand\*O"
Specifies a target name of the form \*Vtarget\*O or
sets the value of \*Vvariable\*O to \*Vvalue\*O
with the form \*Vvariable\*L=\*Vvalue\*O (macro definitions).
.LE
.SH DESCRIPTION
.iX "make command"
.iX "makefiles"
.iX "files" "makefiles"
.iX "versions" "programs"
.iX "maintaining" "program groups"
.iX "programs" "versions"
.iX "programs" "maintenance"
.iX "updating" "program groups"
.iX "programs" "updating"
.\" Begin Digital-specific information
.PP
This \*Lmake\*O command is one of several versions available.  See the
RELATED INFORMATION section for references to information about other
versions of the command.  By default, the \*Lmake\*O(1) command is
invoked if you type the command name with no path.  To access the
\*Lmake\*O(1p) version described in this reference page, use the
following command path:
.PP
\*L/usr/opt/posix/usr/bin/make\*O
.PP
Note that this version of \*Lmake\*O is optional and might not be
installed on your system.
.\" End Digital-specific information
.PP
The
\*Lmake\*O program
is designed to simplify the maintenance of other programs.
Its input is a list of specifications as to the files upon which programs
and other files depend.
.PP
.\" .zA "review, R1.1.2, XPG4"
By default, the following files are tried in sequence to provide this
list of specifications:  \*L\&./makefile\*O, \*L\&./Makefile\*O,
\*L\&./s.makefile\*O, \*L\&.SCCS/s.makefile\*O \*L\&./s.Makefile\*O, and
\*LSCCS/s.Makefile\*O.
.\" .zZ "review, R1.1.2, XPG4"
.PP
There are four different types of lines in a makefile: file dependency
lines, shell commands, variable assignments, and comments.
File dependency lines and optional shell commands define file dependency specifications.
.PP
In general, lines may be continued from one line to the next by ending
them with a \*L\e\*O (backslash).
The trailing newline character and initial white space on the following
line are compressed into a single space.
.SS File Dependency Specifications
.if n .PP
Dependency lines consist of one or more targets, an operator, zero
or more sources (prerequisites), and an optional command.
This creates a relationship where the targets depend on the sources
and are usually created from them.
The exact relationship between the target and the source is determined
by the operator that separates them.
The operators are as follows:
.VL 2m
.\" .zA "review, R1.1.2, XPG4"
.LI "\*L:\*O"
A target is considered out-of-date if its modification time is less than
those of any of its sources.
Sources for a target accumulate over dependency lines when this operator
is used.  The target is removed if \*Lmake\*O is interrupted unless
the target has the \*L\&.PRECIOUS\*O attribute.
.\" .zZ "review, R1.1.2, XPG4"
.LI "\*L::\*O"
If no sources are specified, the target is always re-created.
Otherwise, a target is considered out-of-date if any of its sources
were modified more recently than the target.
Sources for a target do not accumulate over dependency lines when this
operator is used.
The target will not be removed if
\*Lmake\*O
is interrupted.
.LE
.PP
File dependency specifications have two types of rules, inference and
target, as follows:
.VL 4m
.LI "Inference rules"
Have one target with no \*L/\*O (slash) and a minimum of one \*L.\*O
(period).  These rules specify how a target is to be made up-to-date.
.LI "Target rules"
Can have more than one target.  These rules specify how to build the target.
.LE
.SS Makefile Execution
.if n .PP
The \*Lmake\*O command executes the commands in the makefile
line by line.  As \*Lmake\*O executes each
command, it writes the command to standard output (unless otherwise
directed, for example the \*L-s\*O option).  A makefile
must have a tab in front of the commands on each line.
.if n .PP
When a command is executed through \*Lmake\*O, it uses \*Lmake\*O's
execution environment.  This includes any macros from the command line
to \*Lmake\*O, and any environment variables specified in the
\*LMAKEFLAGS\*O variable (refer to Section Variables).  The \*Lmake\*O command's
environment variables overwrite any variables of the same name in the
existing environment.
.SS Target Rules
.\" .zA "review, R1.1.2, XPG4"
.if n .PP
Target rules have the following format:
.iS
\*Vtarget \*O[\*Vtarget\&...\*O]\*L :\*O[\*L:\*O] [\*Vprerequisite\&...\*O] [\*L;\*Vcommand\*O]
\*L<Tab>\*Vcommand\*O
.nL
\&...
.iE
Multiple targets and prerequisites are separated by spaces (note that
the list of prerequisites can be empty).  Any text that follows the
\*L;\*O (semicolon) and all of the subsequent lines that begin with a
tab character are considered commands to be used to update the target.
A new target entry is started when a new
line does not begin with a tab character or \*L#\*O (number
sign).  The following section lists the special sources, or
prerequisites, and targets for a makefile.
.\" .zZ "review, R1.1.2, XPG4"
if n .PP
When sources are listed on the dependency line, \*Lmake\*O treats each
source as a dependency of the target. Each source then in turn becomes a
target. The \*Lmake\*O command assumes the file is located in the
current directory.
.if n .PP
If the target does not have a makefile entry, or the dependency
specification for the target does not contain a command or rule,
\*Lmake\*O attempts to derive a command/rule in the following order:
.VL 4m
.LI "Inference rules"
First, \*Lmake\*O attempts to derive a command/rule from inference
rules.
.LI "\&.SCCS_GET:"
Second, \*Lmake\*O attempts to apply the commands associated with this
particular target to derive a command/rule.
.LI "\&.DEFAULT:"
Third, \*Lmake\*O attempts to apply the commands associated with this
special target to derive a command/rule.
.LE
.SS Special Targets
.\" .zA "review, R1.1.2, XPG4"
.if n .PP
Special targets may not be included with other targets; that is, they must be
the only target specified.  These control the operation of the
\*Lmake\*O command.
.VL 4m
.ig ++
.LI "\*L\&.BEGIN\*O"
Any command lines attached to this target are executed before anything
else is done.
.++
.LI "\*L\&.DEFAULT:\*O"
This is used as the rule for any target (that was used only as a
source) that
\*Lmake\*O
cannot figure out any other way to create.  Only the shell script is used.
The \*L<\*O (left angle bracket) variable of
a target that inherits \*L\&.DEFAULT\*O's commands is set
to the target's own name.
.ig ++
.LI "\*L\&.END\*O"
Any command lines attached to this target are executed after everything
else is done.
.LI "\*L\&.ERRORS\*O"
If there was an error, this target is executed.
.LI "\*L\&.EXIT\*O"
This target is executed anytime that the \*L\&.END\*O,
\*L\&.ERROR\*O, or \*L\&.INTERRUPT\*O targets would have been
executed, after any of these targets.
.++
.LI "\*L\&.IGNORE:\*O"
Prerequisites of this target are targets themselves; this causes
errors from commands associated with them to be ignored.
If no prerequisites are specified, this is the equivalent of specifying the
\*L-i\*O flag.
.ig ++
.LI "\*L\&.INTERRUPT\*O"
If
\*Lmake\*O
is interrupted, the commands for this target will be executed.
.LI "\*L\&.MAIN\*O"
If no target is specified when
\*Lmake\*O
is invoked, this target will be built.
.LI "\*L\&.MAKEFLAGS\*O"
This target provides a way to specify flags for
\*Lmake\*O
when the makefile is used.
The flags are as if typed to the
shell, though the \*L-f\*O flag will have no effect.
.LI "\*L\&.PATH\*O"
The sources are directories which are to be searched for files not
found in the current directory.  If no sources are
specified, any previously specified directories are deleted.
.++
.LI "\*L\&.POSIX:\*O"
This keyword currently has no effect on \*Lmake\*O behavior, since it
is the only behavior supported.  However, you should use this as the first
non-command line of a makefile if you want to avoid possible conflicts
with future enhancements.
.LI "\*L\&.PRECIOUS:\*O"
Prerequisites of this target are targets themselves.
The special target \*L\&.PRECIOUS\*O prevents the current target from being removed.
If no sources are specified, the \*L\&.PRECIOUS\*O
attribute is applied to every target in the file.  Normally, when \*Lmake\*O
is interrupted (for example, with SIGHUP, SIGTERM, SIGINT, or
SIGQUIT), it removes any partially made targets.  If \*Lmake\*O was
invoked with the \*L-n\*O, \*L-p\*O, or \*L-q\*O flags, however,
the target is considered to have the \*L\&.PRECIOUS\*O attribute.
.LI "\*L\&.SCCS_GET:\*O"
This special target defines the commands to retrieve all files not found
in the current directory. By default, the \*Lmake\*O command assumes all
targets are located in the current directory. When the target dependency
specification has no sources, but a local \*Ltargetfile\*O is present in the
current directory, \*Lmake\*O assumes the local \*Ltargetfile\*O is
up-to-date. When this special target is enabled, \*Lmake\*O attempts to
locate a file named \*LSCCS/s.targetfile\*O. If the local
\*Ltargetfile\*O exists, \*Lmake\*O checks to be sure that the
\*Ltargetfile\*O is up-to-date with respect to \*LSCCS/s.targetfile. If
the local \*Ltargetfile\*O is missing, or if the \*LSCCS/s.targetfile\*O
is newer, \*Lmake\*O automatically issues the commands associated with
this special target to retrieve the most recent version. If the local
\*Ltargetfile\*O is writable by anyone, \*Lmake\*O does not retrieve the
latest version.
if n .PP
If an \*Ls.file\*O exists in both the current directory and an
SCCS subdirectory, the \*Ls.file\*O in the current directory is
used. The \*Ls.file\*O in the SCCS subdirectory is ignored.
.if n .PP
This special target must be specified without prerequisites. If this
special target is included in a user makefile, the commands specified
replace this special target's default command. The default command
defined in \*L/usr/share/mk/posix.mk\*O is as follows:
.oS
\*V\&.SCCS_GET\*O"
.nl
\*Vsccs $(SCCSFLAGS) get $(SCCSGETFLAGS) $@\*O
.oE
.if n .PP
To nullify the commands of this special target, specify this special
target in a user makefile without prerequisites and without commands.
.LI "\*L\&.SILENT:\*O"
Prerequisites of the target are targets themselves; this causes
commands associated with the target to not be written to standard
output before they are executed.
If no sources are specified, the \*L\&.SILENT\*O
attribute is applied to every command in the file.
.LI "\*L\&.SUFFIXES:\*O"
Prerequisites of the target are appended to the list of known suffixes.
If no suffixes are specified,
any previously specified suffixes are deleted.  These suffixes are used
by \*Vinference rules\*O.  To change the order of suffixes, you need
to specify an empty \*L.SUFFIXES\*O entry, then a new list of
\*L.SUFFIXES\*O entries.  Makefiles must not associate commands with
\*L\&.SUFFIXES\*O.
.LE
.SS Inference Rules
.if n .PP
The \*Lmake\*O command has a default set of inference rules, which you
can supplement, or overwrite, with additional inference rule
definitions in your makefile.  Inference rules
consist of target suffixes and commands.  From the suffixes,
\*Lmake\*O infers the prerequisites, and from both the suffixes and
their prerequisites, \*Lmake\*O
can \*Vinfer\*O how to make a target up-to-date.  Inference
rules have the following format:
.iS
\*Vrule:\*O
.nL
\*O<Tab>\*Vcommand\*O
.nL
\&...
.iE
where \*Vrule\*O has one of the following forms:
.VL 0.5i
.LI "\*V.s1\*O"
A single-suffix inference rule.  This describes how to build a target
that is appended with a single suffix.
.LI "\*V.s1.s2\*O"
A double-suffix inference rule.  This describes how to transform a target
that is appended with an \*V.s2\*O suffix into a prerequisite that is appended
with \*V.s1.suffix\*O.
.LE
.PP
\*Vs1\*O and \*Vs2\*O are suffixes defined as prerequisites of the
special target, \*L.SUFFIXES\*O.  The inference rules use the suffixes
in the order in which they are specified in \*L.SUFFIXES\*O.   A new
inference rule is started when a new line does not begin with a <Tab>
or # (number
sign).
.PP
If \*Vrule\*O is empty, for example:
.oS
\*Vrule\*C:
.oE
execution has no effect, and \*Lmake\*O will recognize that the suffix
exists, but take no actions when targets are out-of-date.
.\" .zA "review, R1.1.2, XPG4"
.PP
A \*L~\*O (tilde) in the preceding rules refers to an SCCS file.
Thus, the rule \*L\&.c~\&.o\*O would transform an SCCS C-language
source file into an object file (\*L\&.o\*O).  Because the \*Ls.\*O of
the SCCS files is a prefix, it is incompatible with \*Lmake\*O's
suffix point of view.  Hence, the \*L~\*O (tilde) is a way of changing
any file reference into an SCCS file reference.
.\" .zZ "review, R1.1.2, XPG4"
.SS Libraries
.if n .PP
A target or prerequisite may also be a member of an archive library,
and is treated as such if there are parentheses in the name.  For
example, \*Vlibrary\*L(\*Vname.o\*L)\*O indicates that \*Vname\*O is a
member of the archive library \*Vlibrary\*O.  To update a member of a
library from a particular file, you can use the format \*V.s1.\*La\*O,
where a file with the \*V.s1\*O suffix is used to update a member of
the archive library.  The \*L.a\*O refers to an archive library.
The member name must be appended with the ".o" suffix.
.SS Using Macros
.if n .PP
In makefiles, macro definitions are defined
in the format:
.iS
\*Vvariable\*L=\*Vvalue\*O
.iE
Macros can appear throughout the makefile, as
follows:
.ML
.LI
If a macro appears in a target line, then it is evaluated when the
target line is read.
.LI
If a macro appears in a command line, then it is evaluated when the
command is executed.
.LI
If a macro appears in a macro definition line, it is evaluated when
the new macro itself appears in a rule or command.
.LE
.PP
If a macro has no definition, it evaluates to NULL.  A new macro
definition overwrites an existing macro of the same name.  Macros
assignments can come from the following, in the listed order:
.AL
.LI
Default inference rules
.LI
Contents of the environment
.LI
makefiles
.LI
Command lines
.LE
.PP
Note, however, that the \*L-e\*O option causes environment variables
to override those defined in the makefile.
.\" .zA "review, R1.1.2, XPG4"
.PP
The \*LSHELL\*O macro is special.  It is set by \*Lmake\*O to the
pathname of the shell command interpreter (\*L/usr/bin/sh\*O).
However, if it is redefined in the makefile, or on the command
line, then this default setting is overridden.  Note that this macro
does not affect, and is not affected
by, the \*LSHELL\*O environment variable.
.\" .zZ "review, R1.1.2, XPG4"
.SS Shell Commands
.if n .PP
Each target may have associated with it a series of shell commands, normally
used to create the target.
Each of the commands in this script
\*Lmust\*O
be preceded by a tab.
While any target may appear on a dependency line, only one of these
dependencies may be followed by a creation script, unless the \*L::\*O
operator is used.
.if n .PP
If the first or first two characters of the command line are \*L@\*O and/or
\*L\-\*O and/or \*L+\*O, the command is treated specially, as follows:
.VL 3m
.LI "\*L@\*O"
Causes the command not to be echoed before it is executed.
.LI "\*L\-\*O"
Causes any nonzero exit status of the command line to be ignored.
.LI "\*L+\*O"
Causes a command line to be executed, even though the options
\*L-n\*O, \*L-q\*O, or \*L-t\*O are specified.
.LE
.SS Variable Assignments
.if n .PP
Variables in \*Lmake\*O are much like variables in the shell, and, by
tradition,
consist of all uppercase letters.
The \*L=\*O operator assigns values to variables.  Any previous
variable is then overridden.
.ig ++
.VL 4m
.LI "\*L=\*O"
Assigns the value to the variable.
Any previous value is overridden.
.LE
.++
.if n .PP
Any white space before the assigned
value
is removed; if the value is being appended, a single space is inserted
between the previous contents of the variable and the appended value.
.PP
Variables are expanded by surrounding the variable name with either
\*L{}\*O (braces) or \*L()\*O (parentheses) and preceding it with
a \*L$\*O (dollar sign).  If the
variable name contains only a single letter, the surrounding
braces or parentheses are not required.  This shorter form is not recommended.
.if n .PP
Variable substitution occurs at two distinct times, depending on where
the variable is being used.
Variables in dependency lines are expanded as the line is read.
Variables in shell commands are expanded when the shell command is executed.
.PP
The four different classes of variables (in order of increasing precedence)
are as follows:
.VL 3m
.LI "Environment variables"
Variables defined as part of
\*Lmake\*O's environment.
.LI "Global variables"
Variables defined in the makefile or in included makefiles.
.LI "Command line variables"
Variables defined as part of the command line.
.\" .zA "review, R1.1.2, XPG4"
.LI "Local variables"
Variables that are defined specific to a certain target.
The local variables are as follows:
.ig ++
.VL 4m
.LI "\*V\&.ALLSRC\*O"
The list of all sources for this target; also known as \*L>\*O.
.LI "\*V\&.ARCHIVE\*O"
The name of the archive file.
.LI "\*V\&.IMPSRC\*O"
The name/path of the source from which the target is to be transformed
(the implied source); also known as \*L<\*O.
.LI "\*V\&.MEMBER\*O"
The name of the archive member.
.LI "\*V\&.OODATE\*O"
The list of sources for this target that were deemed out-of-date; also
known as \*L?\*O.
.LI "\*V\&.PREFIX\*O"
The file prefix of the file, containing only the file portion, no suffix
or preceding directory components; also known as \*L*\*O.
.LI "\*V\&.TARGET\*O"
The name of the target; also known as \*L@\*O.
.LE
.++
.if n .PP
.VL 4m
.LI "\*L$<\*O"
Represents either the full name of a source that made a target
out-of-date (inference rule), or the full name of a target
(\*L.DEFAULT\*O rule).
.LI "\*L$*\*O"
Represents the filename section of a source that made a target
out-of-date (in an inference rule) without a suffix.
.LI "\*L$@\*O"
Represents the full target name of the current target, or the archive
filename part of the library archive target.
.LI "\*L$?\*O"
Represents the list of sources causing a target to be
out-of-date (inference and target rule).
.LI "\*L$%\*O"
Represents a library member in a target rule if the target is a member
of the archive library.
.LE
.LE
.\" .zZ "review, R1.1.2, XPG4"
.PP
You can also use these local variables appended with \*LD\*O or
\*LF\*O, where
.VL 4m
.LI "\*LD\*O"
Indicates that the local variable applies to the directory part of the
name.  This is the pathname prefix without a trailing \*L/\*O (slash).
For current directories, \*LD\*O is a \*L\&.\*O (period)
.LI "\*LF\*O"
Indicates that the local variable applies to the filename part of the
name
.LE
.PP
The \*L$?\*O local variable can represent a list of sources.  When
used with \*LD\*O or \*LF\*O, the local variable can represent a list
of directory and filename parts, respectively.
.ig ++
.PP
Four of the local variables may be used in sources on dependency lines
because they expand to the proper value for each target on the line.
These variables are \*V\&.TARGET\*O,
\*V\&.PREFIX\*O, \*V\&.ARCHIVE\*O, and \*V\&.MEMBER\*O.
.++
.PP
In addition,
\*Lmake\*O
sets or knows about the following variables:
.VL 2m
.LI "\*L$\*O"
A single dollar sign (\*L$\*O); that is, \*L$$\*O expands to a single dollar
sign.
.ig ++
.LI "\*V\&.MAKE\*O"
The name that
\*Lmake\*O
was executed with
\*L(\*Vargv\*O [\*L0\*O]\*L)\*O
.LI "\*V\&.CURDIR\*O"
A path to the directory where
\*Lmake\*O
was executed.
.++
.LE
.PP
The \*Lmake\*O command also knows about the following environment variables:
.VL
.LI "\*LLANG\*O"
Determines the locale to use for the locale
categories when both \*LLC_ALL\*O and the corresponding environment
variable (beginning with \*LLC_\*O) do not specify a locale.
.LI "\*LLC_ALL\*O"
Determines the locale to be used to override
any values for locale categories specified by the setting of \*LLANG\*O
or any other \*LLC_\*O environment variable.
.LI "\*LLC_CTYPE\*O"
Determines the locale for the interpretation
of sequences of bytes of text data as characters; for example, single-
versus multi-byte characters in arguments.
.LI "\*LLC_MESSAGES\*O"
Determines the language in which messages should be written.
.LI "\*LMAKEFLAGS\*O"
The environment variable \*VMAKEFLAGS\*O may contain anything that
may be specified on
\*Lmake\*O's command line.  Anything specified on
\*Lmake\*O's
command line is appended to the \*VMAKEFLAGS\*O variable, which is then
entered into the environment for all programs that
\*Lmake\*O executes.  Note that the operation of the \*L-f\*O and \*L-p\*O
options in
the \*LMAKEFLAGS\*O variable are undefined.  Command line options will
have precedence over the \*L-f\*O and \*L-p\*O options in this variable.
.LE
.PP
.ig ++
.PP
Variable expansion may be modified to select or modify each word of the
variable (where a word is a sequence of characters delimited by
white space).  The general format of a variable expansion is as follows:
.iS
{\*Vvariable\*O[\*L:\*Vmodifier\*O[\*L:\*O...]]\*L}
.iE
.PP
Each modifier begins with a \*L:\*O (colon) and one of the following
special characters.  The colon may be escaped with a \*L\e\*O (backslash).
.VL 4m
.LI "\*LD\*Vnewval\*O"
If the variable being modified is defined, replace
the current value with \*Vnewval\*O.
.LI "\*LE\*O"
Replaces each word in the variable with its suffix.
.LI "\*LH\*O"
Replaces each word in the variable with everything but the last component.
.LI "\*LL\*O"
Replaces any value (unlikely) with the name of
\*Vvariable\*O itself (that is, \*Vvalue\*O is literal).
.LI "\*LM\*Vpattern\*O"
Selects only those words that match the rest of the modifier.
The standard shell wildcard characters (\*L*\*O, \*L?\*O, and
\*L[]\*O) may be used.
The wildcard characters may be escaped with a backslash (\*L\e\*O).
.LI "\*LN\*Vpattern\*O"
This is identical to \*LM\*O, but selects all words which do not match
the rest of the modifier.
.LI "\*LP\*O"
Replaces any value (unlikely) with the path of
the node with the same name as \*Vvariable\*O.
.LI "\*LR\*O"
Replaces each word in the variable with everything but its suffix.
.LI "\*LS/\*Vold_pattern\*L/\*Vnew_pattern\*L/\*O[\*Lg\*O]"
Modifies the first occurrence of
\*Vold_pattern\*O
in each word to be replaced with
\*Vnew_pattern\*O.
If a \*Lg\*O is appended to the last slash of the pattern, all occurrences
in each word are replaced.  If
\*Vold_pattern\*O
begins with a carat (\*L^\*O),
\*Vold_pattern\*O
is anchored at the beginning of each word.  If
\*Vold_pattern\*O
ends with a dollar sign (\*L$\*O), it is anchored at the end of each word.
Inside \*Vnew_string\*O,
an ampersand (\*L&\*O) is replaced by
\*Vold_pattern\*O.
Any character may be used as a delimiter for the parts of the modifier
string.  The anchoring, ampersand
and delimiter characters may be escaped with a
backslash (\*L\e\*O).
.PP
Variable expansion occurs in the normal fashion inside both
\*Vold_string\*O
and
\*Vnew_string\*O
with the single exception that a backslash is used to prevent the expansion
of a dollar sign (\*L$\*O),
not a preceding dollar sign as is usual.
.LI "\*LT\*O"
Replaces each word in the variable with its last component.
.LI "\*LU\*Vnewval\*O
If the variable being modified is undefined, replace
the current value with \*Vnewval\*O.
.PP
.\".LI "\*L!\*Vcommand\*L!\*O"
.\"Runs \*Vcommand\*O through the shell 
.\"if the value when the modifier is encountered
.\"is an empty string (whitespace only).
.\".LI "\*L@\*Vtmpvar\*L@\*Vnewval\*L@\*O"
.\"Assigns a temporary variable \*Vtmpvar\*O to the value
.\"of each word in the value when the modifier was
.\"encountered and evaluates \*Vnewval\*O for each word.
.LI "\*Vold_string\*L=\*Vnew_string\*O"
This is the System V style variable substitution.
It must be the last modifier specified.
\*Vold_string\*O
is anchored at the end of each word, so only suffixes or entire
words may be replaced.
.LE
.SS Include Statements and Conditionals
.if n .PP
Makefile inclusion and conditional structures reminiscent of the C
programming language are provided in
\*Lmake\*O.  All such structures
are identified by a line beginning with a single
dot (\*L\&.\*O) character.
Files are included with either \*L\&.include\*O <\*Vfile\*O> or
\*L\&.include "\*Vfile\*L"\*O.
Variables between the angle brackets or double quotes are expanded
to form the file name.  If brackets are used,
the included makefile is expected to be in
the system makefile directory.  If double quotes are
used, the including makefile's directory and any
directories specified using the \*L-I\*O
flag are searched before the system makefile directory.
.PP
Conditional expressions are also preceded by a single dot as the first
character of a line.  The possible conditionals are as follows:
.VL 4m
.LI "\*L\&.undef \*Vvariable\*O"
Undefines the specified global variable.
Only global variables may be undefined.
.LI "\*L\&.if\*O[\*L!\*O]\*Vexpression\*O [\*Voperator expression \*O\&.\&.\&.]"
Tests the value of an expression.
.LI "\*L\&.ifdef\*O[\*L!\*O]\*Vvariable\*O [\*Voperator variable \*O\&.\&.\&.]"
Tests the value of an variable.
.LI "\*L\&.ifndef\*O[\*L!\*O]\*Vvariable\*O [\*Voperator variable \*O\&.\&.\&.]"
Tests the value of an variable.
.LI "\*L\&.ifmake\*O[\*L!\*O]\*Vtarget\*O [\*Voperator target \*O\&.\&.\&.]"
Tests the the target being built.
.LI "\*L\&.ifnmake\*O[\*L!\*O]\*Vtarget\*O [\*Voperator target \*O\&.\&.\&.]"
Tests the target being built.
.LI "\*L\&.else\*O"
Reverses the sense of the last conditional.
.LI "\*L\&.elif\*O[\*L!\*O]\*Vexpression\*O [\*Voperator expression \*O\&.\&.\&.]"
A combination of \*L\&.else\*O followed by \*L\&.if\*O.
.LI "\*L\&.elifdef\*O[\*L!\*O]\*Vvariable\*O [\*Voperator variable \*O\&.\&.\&.]"
A combination of \*L\&.else\*O followed by \*L\&.ifdef\*O.
.LI "\*L\&.elifndef\*O[\*L!\*O]\*Vvariable\*O [\*Voperator variable \*O\&.\&.\&.]"
A combination of \*L\&.else\*O followed by \*L\&.ifndef\*O.
.LI "\*L\&.elifmake\*O[\*L!\*O]\*Vtarget\*O [\*Voperator target \*O\&.\&.\&.]"
A combination of \*L\&.else\*O followed by \*L\&.ifmake\*O.
.LI "\*L\&.elifnmake\*O[\*L!\*O]\*Vtarget\*O [\*Voperator target \*O\&.\&.\&.]"
A combination of \*L\&.else\*O followed by \*L\&.ifnmake\*O.
.LI "\*L\&.endif\*O"
Ends the body of the conditional.
.LE
.PP
\*Voperator\*O
may be any one of the following:
.VL 4m
.LI "\*L||\*O"
logical OR
.LI "\*L&&\*O"
Logical AND; of higher precedence than \*L``''\*O.
.LE
.PP
As in C,
\*Lmake\*O
will only evaluate a conditional as far as is necessary to determine
its value.  Parentheses may be
used to change the order of evaluation.
The boolean operator \*L!\*O may be used to logically negate an entire
conditional.  It is of higher precedence than \*L&&\*O.
.PP
The value of
\*Vexpression\*O
may be any of the following:
.VL 4m
.LI "\*Ldefined\*O"
Takes a variable name as an argument and evaluates to TRUE if the variable
has been defined.
.LI "\*Lmake\*O"
Takes a target name as an argument and evaluates to TRUE if the target
was specified as part of
\*Lmake\*O's
command line or was declared the default target (either implicitly or
explicitly, see \*L\&.MAIN\*O) before the line containing the
conditional.
.LI "\*Lempty\*O"
Takes a variable, with possible modifiers, and evaluates to TRUE if
the expansion of the variable would result in an empty string.
.LI "\*Lexists\*O"
Takes a file name as an argument and evaluates to TRUE if the file exists.
The file is searched for on the system search path (see \*L\&.PATH\*O).
.LI "\*Ltarget\*O"
Takes a target name as an argument and evaluates to TRUE if the target
has been defined.
.LE
.PP
\*Vexpression\*O
may also be an arithmetic or string comparison, with the lefthand side
being a variable expansion.  The standard C
relational operators are all supported, and the usual
number/base conversion is performed.  Note, octal numbers are not supported.
If the righthand value of a \*L==\*O or \*L!=\*O operator begins with a
quotation mark (\*L"\*O) a string comparison is done between the expanded
variable and the text between the quotation marks.
If no relational operator is given, it is assumed that the expanded
variable is being compared against 0 (zero).
.PP
When
\*Lmake\*O
is evaluating one of these conditional expression, and it encounters
a word it doesn't recognize, either the \*Lmake\*O or \*Ldefined\*O
expression is applied to it, depending on the form of the conditional.
If the form is \*L\&.ifdef\*O or
\*L\&.ifndef\*O, the \*Ldefined\*O expression is applied.
Similarly, if the form is \*L\&.ifmake\*O or \*L\&.ifnmake\*O,
the \*Lmake\*O expression is applied.
.PP
If the conditional evaluates to TRUE the parsing of the makefile continues
as before.
If it evaluates to FALSE, the following lines are skipped.
In both cases this continues until a \*L\&.else\*O or
\*L\&.endif\*O is found.
.++
.\" .zA "defect, 8389, R1.1.2, add par"
.PP
When \*Lmake\*O encounters a line beginning with the word
\*Linclude\*O followed by another word that is the name of a makefile
(for example, \*Linclude depend\*O), \*Lmake\*O attempts to open that
file and process its contents as if the contents appeared where the
include line occurs.  This behavior occurs only if the first
noncomment line of the first makefile read by \*Lmake\*O is not the
\*L\&.POSIX\*O target; otherwise, a syntax error occurs.
.\" .zZ "defect, 8389, R1.1.2, add par"
.SS Comments
.if n .PP
Comments begin with a \*L#\*O (number sign), anywhere but in a shell
command line, and continue to the end of the line.
.SS Environment
.if n .PP
The \*Lmake\*O command
uses the \*LMAKEFLAGS\*O environment variable, if it exists.
.ig ++
\*LMAKEOBJDIR\*O
and
\*LMAKESRCDIRPATH\*O.
.++
.SH EXIT VALUES
.PP
The \*Lmake\*O command exits with 0 (zero) on success, and greater than
1 if an error occurred.  In addition, if the \*L-q\*O option was specified,
\*Lmake\*O exits with 1 if the target was not up-to-date.
.\" .zA "review, R1.1.2, XPG4"
.SH FILES
.PP
.VL 17m
.\" .zA "defect,6828,R1.1.1,added file suffix"
.LI "\*L/usr/share/mk/posix.mk\*O"
Default POSIX rules for the \*Lmake(1p)\*O utility.
.\" .zZ "defect,6828,R1.1.1,added file suffix"
.ig ++
.LI "\*L\&depend\*O"
List of dependencies.
.++
.LI "\*Lmakefile\*O"
List of dependencies.
.LI "\*LMakefile\*O"
List of dependencies.
.LI "\*Ls.makefile\*O"
List of dependencies.
.LI "\*LSCCS/s.makefile\*O"
List of dependencies.
.LI "\*Ls.Makefile\*O"
List of dependencies.
.LI "\*LSCCS/s.Makefile"
List of dependencies.
.LI "\*L/usr/opt/posix/usr/bin/make\*O"
\*Lmake\*O (1p) POSIX \*Lmake\*O command.
.LI "\*L/usr/opt/ultrix/usr/bin/make\*O"
\*Lmake\*O (1u) ULTRIX \*Lmake\*O command.
.LI "\*L/usr/bin/make\*O"
\*Lmake\*O (1) DEFAULT \*Lmake\*O command.
.ig ++
.LI "\*Lsys.mk\*O"
System makefile.
.++
.LE
.\" .zZ "review, R1.1.2, XPG4"
.SH RELATED INFORMATION
.PP
Commands: \*Lmake\*O(1), \*Lmake\*O(1u).
.EQ
delim off
.EN

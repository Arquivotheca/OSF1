.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: cc.1,v $ $Revision: 3.2.7.19 $ (DEC) $Date: 1994/01/19 19:49:52 $
.\"
.\" ---------------------------------------------------
.\" | Copyright (c) 1986, MIPS Computer Systems, Inc. |
.\" | All Rights Reserved.                            |
.\" ---------------------------------------------------
.\" $Header: /usr/doc/osf1doc/refpages/rcs/src/BASE/DEC/man1/cc.1,v 3.2.7.19 1994/01/19 19:49:52 Leslie_Wharton Exp $
.TH cc 1
.SH NAME
.PP
\*Lcc\*O, \*Lc89\*O \- C compiler
.SH SYNOPSIS
.PP
.sS
.in +.5i
.ti -.5i
\*Lcc\*O
\*O[\*Vflag\*O] ... \*Vfile\*O ...
.in -.5i
.sE
.SH DESCRIPTION
.PP
.iX "cc command"
The \*Lcc\*O command invokes the DEC OSF/1 C compiler
and produces files in the following formats: object code in
extended \*Lcoff\*O format (the normal result), binary or symbolic
\*Lucode\*O, \*Lucode\*O object files, and binary or symbolic assembly language.
The \*Lcc\*O command may also invoke the linker (\*Lld\*O) or the
assembler (\*Las\*O).
.PP
The \*Lcc\*O command accepts several types of arguments:
.ML
.LI
Arguments whose names end with
\*L\.c\*O
are assumed to be C source programs.
They are compiled, and each object program is left in the file whose name
consists of the last component of the source with
\*L\.o\*O substituted for \*L\.c\*O.  The \*L\.o\*O
file is deleted only when a single source program is compiled and
loaded all at once.
.LI
Arguments whose names end with
\*L\.s\*O are assumed to be symbolic assembly
language source programs.  They are assembled, producing a
\*L\.o\*O file.
.LI
Arguments whose names end with
\*L\.i\*O are assumed to be C source files after being processed
by the C preprocessor.
They are compiled without being processed by the C preprocessor.
.LI
If the highest level of optimization is specified (with the
\*L\-O3\*O flag) or only \*Lucode\*O object files are to be produced (with the
\*L\-j\*O
flag), each C source file is compiled into a \*Lucode\*O object file. The
\*Lucode\*O object file is left in a file whose name consists of the
last component of the source with \*L\.u\*O substituted for \*L.c\*O.
.LI
The following suffixes primarily aid compiler development and are
not generally used. Arguments whose names end with
\*L\.B\*O, \*L\.O\*O, \*L\.S\*O, and \*L\.M\*O
are assumed to be binary \*Lucode\*O, produced by the front end, optimizer,
\*Lucode\*O object file splitter and \*Lucode\*O merger respectively.
Arguments whose names end with \*L\.U\*O are assumed to be symbolic
\*Lucode\*O.  Arguments whose names end with \*L\.G\*O
are assumed to be binary assembly language, which is produced by the code
generator and the symbolic to binary assembler.
.LI
Files that are assumed to be binary \*Lucode\*O, symbolic \*Lucode\*O,
or binary assembly language by the suffix conventions are also assumed to
have their corresponding symbol table in a file with a \*L\.T\*O
suffix.
.LE
.PP
The \*Lcc\*O compiler defines the C preprocessor macro
\*Lunix\*O to the C macro preprocessor and defines the C preprocessor macro
\*LLANGUAGE_C\*O when compiling a \*L.c\*O file with the
\*L\-std0\*O flag, which is the default. The \*Lcc\*O
compiler defines the C preprocessor macro
\*LLANGUAGE_ASSEMBLY\*O when compiling a \*L\.s\*O file.
In addition, the \*Lcc\*O compiler defines the preprocessor macro
\*L_\|_LANGUAGE_C_\|_\*O for files with the \*L\.c\*O suffix and
the preprocessor macro \*L_\|_LANGUAGE_ASSEMBLY_\|_\*O for files with
the \*L\.s\*O suffix.
.\" The preprocessor macro \*LLANGUAGE_*\*O is defined only when the
.\" \*L\-std0\*O flag is included on the compiler command line.
.PP
The following table shows which macros are defined for each of the
\*L\-std\*O flags.
.\" the symbols _LONGLONG removed from the table at mjr's request
.PP
.TS
tab(@);
lfHB lfHB lfHB lfHB
llll.
_
.sp 4p
Macro@std0@std@std1
@(default)@@
.sp 4p
_
.sp 6p
LANGUAGE_C@yes@no@no
.sp 6p
\_\|_LANGUAGE_C_\|_@yes@yes@yes
.sp 6p
unix@yes@no@no
.sp 6p
\_\|_unix_\|_@yes@yes@yes
.sp 6p
\_\|_osf_\|_@yes@yes@yes
.sp 6p
\_\|_alpha@yes@yes@yes
.sp 6p
SYSTYPE_BSD@yes@no@no
.sp 6p
\_SYSTYPE_BSD@yes@yes@yes
.sp 6p
LANGUAGE_ASSEMBLY@yes@yes@yes
.sp 6p
\_\|_LANGUAGE_ASSEMBLY_\|_@yes@yes@yes
.sp 6p
_
.TE
.SH FLAGS
.PP
The following flags are interpreted by \*Lcc\*O.
See \*Lld\*O(1) for the link-time flags.
.VL 4m
.LI "\*L\-c\*O"
Suppress the loading phase of the compilation and force an object file
to be produced.
.LI "\*L\-g0\*O"
Do not produce symbol table information for symbolic debugging.
This is the default.
.LI "\*L\-g1\*O"
Produce symbol table information for accurate,
but limited, symbolic debugging of partially optimized code.
.LI "\*L\-g\*O or \*L\-g2\*O"
Produce symbol table information for full
symbolic debugging and suppress
optimizations that limit full symbolic debugging.
.LI "\*L\-g3\*O"
Produce symbol table information for full
symbolic debugging for fully optimized code.
This flag makes the debugger inaccurate.
.LI "\*L\-w\*O or \*L\-w1\*O"
Suppress warning messages.
.LI "\*L\-w2\*O"
Abort on warnings after printing them as if an error occurred.
.LI "\*L\-w3\*O"
Do not print warning messages, however exit with nonzero status when
warnings occur.
.LI "\*L\-non_shared\*O"
Do not produce a dynamic executable file. The loader uses regular archives to
resolve undefined symbols and object files (\*L\.o\*O suffix)
from archives that are included in the executable produced.
.\" the next option commented out for alpha
.\" .LI "\*L\-shared\*O"
.\" Produce dynamic shareable objects. The loader will produce a shareable object
.\" that other dynamic executables can use at run-time.
.LI "\*L\-call_shared\*O"
Produce dynamic executable file that uses shareable objects during run-time.
This is the default. The loader uses shareable objects to resolve undefined
symbols. The run-time loader (\*L/sbin/loader\*O) will be invoked to
bring in all required shareable objects and resolve any symbols that
remained undefined during static link time.
.LI "\*L\-no_archive\*O"
Prevent the linker from using archive libraries to
resolve symbols. This flag is used in conjunction with
\*L\-call_shared\*O. The \*L\-no_archive\*O
flag is position sensitive in that it affects only those flags and
variables that follow it on the command line. This flag can also be
used more than once on the command line.
.LI "\*L\-exact_version\*O"
Used in conjunction with \*L\-call_shared\*O,
this flag requests strict dependency testing for the executable file produced.
Executable files built in this manner can only be executed
if the shared libraries that they use were not modified
after the executable was built.
.LI "\*L\-p0\*O"
Do not permit any profiling.  This is the default.
If loading occurs, the standard run-time startup routine
(\*Lcrt0\.o\*O)
is used, no profiling library is searched.
.LI "\*L\-p1\*O or \*L\-p\*O"
Set up for profiling by periodically sampling the value of the program
counter. This flag affects only the loading.
When loading occurs, this flag replaces the standard run-time startup
routine with the profiling run-time startup routine (\*Lmcrt0\.o\*O)
and searches the level 1 profiling library (\*Llibprof1\.a\*O).
When profiling happens, the startup routine calls \*Lmonstartup\*O
(see \*Lmonitor\*O(3)) and produces a file named
\*Lmon\.out\*O that contains execution-profiling data for use with
the postprocessor \*Lprof\*O).
.LI "\*L\-O0\*O"
Turn off all optimizations.
.LI "\*L\-O1\*O"
Turn on all optimizations that can be done quickly.  This is the default.
.LI "\*L\-O\*O or \*L\-O2\*O"
Invoke the global \*Lucode\*O optimizer.
.LI "\*L\-O3\*O"
Do all optimizations, including global register allocation and
procedure inlining.  This flag must precede all source file
arguments.  With this flag, a \*Lucode\*O
object file is created for each C source file and left in a
\*L\.u\*O
file. The newly created \*Lucode\*O object files, the ucode object files
specified on the command line and the run-time startup routine and all the
run-time libraries are \*Lucode\*O linked.
Optimization is done on the resulting \*Lucode\*O linked file and then it is
linked as normal producing an \*La\.out\*O file. No resulting \*L\.o\*O
file is left from the \*Lucode\*O linked result. The \*L\-c\*O flag
cannot be specified with \*L\-O3\*O.
.LI "\*L\-feedback \*Vfile\*O"
Specifies which \*Vfile\*O is to be used as a feedback file. This flag
is used with the \*L\-cord\*O  or \*L\-O2\*O  or \*L\-O3\*O flag.
This \*Vfile\*O is produced by \*Lprof\*O(1) with its \*L\-feedback\*O
flag from an execution of the program produced by \*Lpixie\*O(1).
.LI "\*L\-cord\*O"
Run the procedure rearranger, \*Lcord\*O, on the resulting
file after linking.
The rearrangement is done to reduce the cache conflicts of the program's text.
The output of \*Lcord\*O is left in the file specified by the
\*L\-o \*Voutput\*O flag or \*La.out\*O by default. At least one
\*L\-feedback \*Vfile\*O must be specified.
.LI "\*L\-j\*O"
Compile the specified source programs, and leave the \*Lucode\*O
object file output in corresponding files suffixed with
\*L\.u\*O.
.LI "\*L\-no_inline\*O"
Disable the inlining optimization performed under
\*L\-O3\*O flag.  This flag is meaningful only when
\*L\-O3\*O is specified.
.LI "\*L\-ko \*Voutput\*O"
Name the output file created by the \*Lucode\*O loader as
\*Voutput\*O.  This file is not removed.
If this file is compiled, the object file is left in a file whose name
consists of \*Voutput\*O with the suffix changed to a \*L\.o\*O.
If \*Voutput\*O has no suffix, a \*L\.o\*O suffix is appended to
\*Voutput\*O.
.LI "\*L\-k\*O"
Pass flags that start with a \*L\-k\*O to the \*Lucode\*O loader.
This flag is used to specify \*Lucode\*O libraries (with
\*L\-kl x\*O) and other \*Lucode\*O loader flags.
.LI "\*L\-S\*O"
Compile the specified source programs and leave the symbolic
assembly language output in corresponding files suffixed with
\*L\.s\*O.
.LI "\*L\-P\*O"
Run only the C macro preprocessor and put the result for each source file
(by suffix convention, such as \*L.c\*O and \*L\.s\*O) in a corresponding
\*L\.i\*O file. The \*L\.i\*O file has no \*L#\*O lines in it. This sets the
\*L\-cpp\*O flag.
.LI "\*L\-E\*O"
Run only the C macro preprocessor on the files (regardless of any suffix
or not), and send the result to the standard output.
This sets the \*L\-cpp\*O flag.
.LI "\*L\-C\*O, \*L\-M\*O, \*L\-Q\*O"
These three flags are passed directly to \*Lcpp\*O.
See \*Lcpp\*O(1) for details.
.LI "\*L\-D\*Vname=def\*O"
.LI "\*L\-D\*Vname\*O"
Define the \*Vname\*O to the C macro preprocessor,
as if by a \*L#define\*O statement.
If no definition is given, the name is defined as \*L1\*O.
.LI "\*L\-U\*Vname\*O"
Remove any initial definition of \*Lname\*O.
.LI "\*L\-I\*Vdir\*O"
\*L#include\*O files whose names do not begin with `/' are always
sought first in the directory of the \*Vfile\*O argument, then in
directories specified in \*L\-I\*O flags,
and finally in the standard directory, \*L/usr/include\*O.
.LI "\*L\-I\*O"
Cause \*L#include\*O files never to be searched for
in the standard directory, \*L/usr/include\*O.
.LI "\*L\-o \*Voutput\*O"
Name the final output file \*Voutput\*O.
If this flag is used, the file \*La\.out\*O is undisturbed.
.\" the next option commented out for alpha
.\" .LI "\*L\-G \*Vnum\*O"
.\" Specify the maximum size, in bytes, of a data item that is to be placed
.\" in a small data section. The \*Vnum\*O is assumed to be a decimal number.  If
.\" \*Vnum\*O is zero, no data is placed in the small data sections.
.\" The default value for \*Vnum\*O is 8 bytes.
.LI "\*L\-v\*O"
Print the passes as they execute with their arguments and their input and
output files.  Also print resource usage in the C-shell \*Ltime\*O format.
If specified more than once, the passes are printed but not executed.
.LI "\*L\-V\*O"
Print the version of the driver and the versions of all passes.
This is done with the \*Lwhat\*O command.
.LI "\*L\-std\*O[\*L0,1\*O]"
Have the compiler produce warnings for language constructs that are not
standard in the language. The \*L\-std0\*O flag enforces the K & R standard with
some ANSI extensions, \*L\-std1\*O enforces the ANSI C standard, and
\*L\-std\*O enforces the ANSI C standard with popular extensions.
The \*L\-std\*O flag causes the macro \*L_\|_STDC_\|_=0\*O
to be passed to the preprocessor,  \*L\-std1\*O causes the macro
\*L_\|_STDC_\|_=1\*O to be passed, and \*L\-std0\*O causes
\*L_\|_STDC_\|_\*O to be undefined. The default is \*L\-std0\*O.
Note that the \*L\-std1\*O flag also affects linker defined symbols.
See the \*Lld\*O(1) reference page for more information.
.LI "\*L\-traditional\*O"
Is the same as the \*L\-std0\*O flag.
.LI "\*L\-Zp\*Vn\*O"
Align structure members on alignment specified by the integer \*Vn\*O,
where \*Vn\*O can be 1,2, or 4. This flag specifies packing so
that each structure member after the first is stored on \*Vn\*O-byte
boundaries as specified by the flag you choose. When you specify
the \*L\-Zp\*O flag without an \*Vn\*O value, structure members
are packed on 1-byte boundaries.
.LI "\*L\-proto\*O[\*Lis\*O]"
Extract prototype declarations for function definitions into a \*L.H\*O
suffixed file. The suboption \*Li\*O includes identifiers
in the prototype, and the suboption \*Ls\*O generates prototypes
for static functions as well.
.LI "\*L\-cpp\*O"
Run the C macro preprocessor on C and assembly source files before compiling.
This is the default for \*Lcc\*O.
.LI "\*L\-no_cpp\*O"
Do not run the C macro preprocessor on C and assembly source files before
compiling.
.LI "\*L\-Olimit \*Vnum\*O"
Specify the maximum size, in basic blocks, of a routine that will be
optimized by the global optimizer.
If a routine has more than this number of basic blocks it will not be
optimized and a message will be printed.
A flag specifying that the global optimizer is to be run
(\*L\-O\*O, \*L\-O2\*O, or \*L\-O3\*O) must also be specified.
The \*Vnum\*O is assumed to be a decimal number.  The default value for
\*Vnum\*O is 500 basic blocks.
.LI "\*L\-edit\*O[\*V0-9\*O]"
Invoke the editor of choice (as defined by the environment variable
\*LEDITOR\*O, or \*Lvi\*O if \*LEDITOR\*O is not defined)
when syntax or semantic errors are detected
by the compiler's frontend.
When compiling on a character based terminal, the compile job has to be
in the foreground for this flag to take effect.
For compile jobs done on a workstation, this
flag would always take effect whether it is in the foreground or
background. The editor is invoked with two files: the error message file and the
source file.
.sp
First use the error message file to locate the line numbers of
all the errors, then switch to the source file to make corrections.
Once you exit out of the editor, the compile job is restarted.
This process can be repeated up to 9 times, depending on the single digit
number specified in the flag.
If no number is specified in the flag, this compile-edit-compile process
repeats indefinitely until all errors are corrected.
The \*L\-edit0\*O flag turns off this edit feature.
.LI "\*L\-trapuv\*O"
Force all uninitialized stack variables to be initialized
with 0xfffa5a5afffa5a5a. When this value is used as
a floating point variable, it is treated as a floating point NaN and it
causes a floating point trap.  When it is used as a pointer, an
address or segmentation violation will most likely to occur.
.LI "\*L\-float_const\*O"
By default, all floating point constants are treated as double
precision. The \*L\-float_const\*O flag causes the C front end to
inspect the floating point value and treat the value as a float if
it can represented as a single precision value. To ensure that this
change has no impact on standards conformance, this flag is disabled
when strict ANSI mode is specified on the compile command line
(\*L\-std1\*O) and the compiler issues a warning message.
.LI "\*L\-framepointer\*O"
Assert the requirement of frame pointer for all procedures defined in the
source file.
.LI "\*L\-oldcomment\*O"
In the preprocessor, delete comments (replace comments with
nothing at all), rather than replacing comments with a space.
This allows traditional token concatenation.
This is the default in \*L\-std0\*O
mode.
.LI "\*L\-verbose\*O"
Cause output of the long form of error and warning messages.
These may give the user some hints as to the reason the compilation
failed.
.LI "\*L\-taso\*O"
Tell the linker that the executable file should be loaded
in the lower 31-bit addressable virtual address range. The \*L\-T\*O
and \*L\-D\*O flags to the \*Lld\*O command can also be used
to ensure that the text and data segments addresses, respectively,
are loaded into low memory. The \*L\-taso\*O flag, however, in
addition to setting default addresses for text and data segments,
also causes shared libraries linked outside the 31-bit address space
to be appropriately relocated by the loader. If you specify
\*L\-taso\*O and also specify text and data segment addresses with
\*L\-T\*O and \*L\-D\*O, those addresses override the \*L\-taso\*O
default addresses. The \*L\-taso\*O flag is useful for porting
32-bit programs to DEC OSF/1.
.\" commented out 12/23 as per chris g.
.\" .LI "\*L\-FASTMATH\*O"
.\" Cause the \*L/usr/include/math.h\*O file to redefine
.\" the names of certain common math routines, including \*Lsqrt\*O
.\" and \*Lexp\*O, so that faster but slightly less accurate functions
.\" are used.
.LI "\*L\-threads\*O"
Tell the linker to use the threadsafe version of
\*Llibc\*O, and - if it exists - the threadsafe version of any
library specified with the \*L\-l\*O flag, when linking programs.
This flag also tells the linker to include \*Llibpthreads\*O and its
support libraries when linking with a program.
.LE
.PP
The following flags are specific to the C programming language:
.VL 4m
.LI "\*L\-signed\*O"
Cause all \*Vchar\*O declarations to be \*Vsigned char\*O
declarations, the default is to treat them as \*Vsigned char\*O
declarations.
.LI "\*L\-unsigned\*O"
Cause all \*Vchar\*O declarations to be \*Vunsigned char\*O declarations.
This is usually used to override a previous \*L\-signed\*O flag.
.LI "\*L\-volatile\*O"
Cause all variables to be treated as \*Vvolatile\*O.
.LI "\*L\-varargs\*O"
Print warnings for lines that may require the \*Lvarargs\.h\*O macros.
.LI "\*L\-float\*O"
Cause the compiler to never promote expressions of type \*Vfloat\*O
to type \*Vdouble\*O.
.\" .LI "\*L\-migrate\*O"
.\" This switch enables language processing rules and language extensions
.\" common to C on other Digital operating systems. For complete
.\" information, see the \*VProgrammer's Guide\*O.
.LE
.PP
To facilitate setting of default compiler options for cross compilation
environments, use the option configuration file named \*Lcomp.config\*O.
This file, located at the compiler target
directory, contains a single line of ASCII text of compiler
options.  These options are processed ahead of the user-specified options
in the command line.
The line can be up to BUFSIZE-1 long,
with up to 64 tokens (separated by blanks and tabs).  Flags specified
in the command line override those specified in the configuration file.
.PP
The flags described below primarily aid compiler development and are
not generally used:
.VL 4m
.LI "\*L\-H\*Vc\*O"
Halt compiling after the pass specified by the character \*Vc\*O,
producing an intermediate file for the next pass.  The \*Vc\*O
can be one of the following: [ \*Lfjusmoca\*O ].
It selects the compiler pass in the same way as the \*L\-t\*O flag.
If this flag is used, the symbol table file produced and used by the passes,
is the last component of the source file with the suffix changed to
\*L\.T\*O and is not removed.
.LI "\*L\-K\*O"
Build and use intermediate file names with the last component of the source
file's name replacing its suffix with the conventional suffix for the type
of file (for example \*L\.B\*O file for binary \*Lucode\*O,
produced by the front end).
These intermediate files are never removed even when a pass encounters a
fatal error. When \*Lucode\*O linking is performed and the
\*L\-K\*O flag is specified, the base name of the files created after the
\*Lucode\*O link is \*Lu\.out\*O by default.  If
\*L\-ko \*Voutput\*O is specified, the base name of the object file is
\*Voutput\*O without the suffix if it exists, or suffixes are appended to
\*Voutput\*O if it has no suffix.
.\" 
.\" the -# flag commented out 29-nov-93 as per qar 11354 - greg lueck
.\" .LI "\*L\-#\*O"
.\" Converts binary \*Lucode\*O files (\*L\.B\*O) or optimized binary
.\" \*Lucode\*O files  (\*L\.O\*O) to symbolic \*Lucode\*O (a \*L\.U \*O file)
.\" using \*Lbtou\*O(1).
.\" If a symbolic \*Lucode\*O file is to be produced by converting the binary
.\" \*Lucode\*O from the C compiler front end then the front end option
.\" \*L\-Xu\*O is used instead of \*Lbtou\*O(1).
.LI "\*L\-W\*Vc\*O[\*Vc...\*O],\*Varg1\*O,[\*Varg2...\*O]"
Pass the argument, or arguments, \*Vargi\*O to the compiler pass, or passes:
\*Vc\*O[\*Vc..\*O]. The \*Vc\*Os
are one of \*L[ pfjusdqmocablyz ]\*O. The \*Vc\*O selects the compiler
pass in the same way as the \*L\-t\*O flag.
.LE
.PP
The flags from the set
\*L\-t [hpfjusmocablyzrnt]\*O, \*L\-h\*Vpath\*O, and \*L\-B\*Vstring\*O
select a name to use for a particular pass, startup routine, or standard
library. These arguments are processed from left to right so their order is
significant. When the \*L\-B\*O flag is encountered, the selection of names
takes place using the last \*L\-h\*O and \*L\-t\*O flags.  Therefore, the
\*L\-B\*O flag is always required when using \*L\-h\*O or \*L\-t\*O.
Sets of these flags can be used to select any combination of names.
.PP
The
\*L\-p[01]\*O flags  must precede all \*L\-B\*O
flags because they can affect the location of runtimes and what runtimes
are used.
.PP
Use the \*L\-t [hpfjusmocablyzrnt]\*O suboptions to select the names.
The names selected are those designated by the characters following the
\*L\-t\*O flag according to the following table:
.PP
.TS
tab(@);
lfHB lfHB
l l .
_
Name@Character
_
.sp
include@h (see note following table)
.sp
cfe@p, f
.sp
ujoin@j
.sp
uld@u
.sp
usplit@s
.sp
umerge@m
.sp
uopt@o
.sp
ugen@c
.sp
as0@a
.sp
as1@b
.sp
ld@l
.sp
ftoc@y
.sp
cord@z
.sp
[m]crt0.a@r
.sp
libprof1.a@n
.sp
btou, utob@t
.sp 6p
_
.TE
.PP
If the character \*Lh\*O is in the
\*L\-t\*O argument then a directory is added to the list of directories to
be used in searching for \*L#include\*O files.  This directory name has the form
\*L$COMP_TARGET_ROOT/usr/include\*Vstring\*O. This directory is to contain the
include files for the \*Vstring\*O release of the compiler.  The standard
directory is still searched.
.VL
.LI "\*L\-h\*Vpath\*O"
Use \*Vpath\*O rather than the directory where the name is normally found.
.LI "\*L\-B\*Vstring\*O"
Append \*Vstring\*O to all names specified by the \*L\-t\*O flag.  If no
\*L\-t\*O flag has been processed before the \*L\-B\*O, the \*L\-t\*O
flag is assumed to be \*Lhpfjusmocablyzrnt\*O.  This list designates all
names. If no \*L\-t\*O argument has been processed before the \*L\-B\*O,
then a \*L\-B\*Vstring\*O is passed to the loader to use with its
\*L\-l\*Vx\*O arguments.
.LE
.PP
Invoking the compiler with a name of the form \*Lcc\*Vstring\*O
has the same effect as using a \*L\-B\*Vstring\*O
flag on the command line.
.PP
If the environment variable \*LCOMP_HOST_ROOT\*O is set, the value is used as the
root directory for all pass names rather than the default
\*L/\*O.
If the environment variable \*LCOMP_TARGET_ROOT\*O
is set, the value is used as the root directory for all include and
library names rather than the default
\*L/\*O.
This affects the standard directory for \*L#include\*O files,
\*L/usr/include\*O, and the standard library, \*L/usr/lib/libc.a\*O.
If this is set, the first directory that is searched for libraries, using the
\*L\-l\*Vx\*O flag, is \*L$COMP_TARGET_ROOT/usr/lib/cmplrs/cc\*O.
The standard directories for libraries are then searched, see
\*Lld\*O(1).
.PP
If the environment variable
\*LTMPDIR\*O
is set, the value is used as the directory to place any temporary files
rather than the default
\*V/tmp/\*O.
.PP
If the environment variable
\*LRLS_ID_OBJECT\*O
is set, the value is used as the name of an object to link in if a link takes
place.  This is used to add release identification information to objects.
It is always the last object specified to the loader.
.\" See \*L rls_id 1 for the tools to create this information.
.PP
The user can choose which error message file to use at the time
the compiler is invoked.
The following locations are searched (in order):
.AL
.LI
A file name specified on the command line.
.LI
A file specified by the environment variable \*L_\|_ERROR_FILE\*O.
.LI
A file in the same directory as the resulting binary, with file name
\*Lerr.$_\|_LANG.cc\*O, where \*L$_\|_LANG\*O is the value of the environment
variable \*L_\|_LANG\*O.  The default for \*L_\|_LANG\*O is \*Lenglish\*O.
.LI
A file \*Lerr$_\|_LANG.cc\*O in the current directory.
.LI
If none of the previous locations are present, the
file \*L/usr/lib/cmplrs/err.cc\*O is used.
.LE
.PP
The following flags determine the rounding mode applied to IEEE floating-point
instructions generated by the compiler. If you do not specify a \*L\-fprm n\*O
flag, the IEEE floating-point rounding mode defaults to normal rounding.
.VL
.LI "\*L\-fprm n\*O"
Normal rounding (unbiased round to nearest)
.LI "\*L\-fprm m\*O"
Round toward minus infinity
.LI "\*L\-fprm c\*O"
Chopped rounding (round towards zero)
.LE
.PP
The following flag enables the dynamic setting of the rounding mode of IEEE
floating-point instructions.  The dynamic rounding mode is determined from the
contents of the floating-point control register and can be changed or read
at execution time by a call to \*Lwrite_rnd\*O(3) or \*Lread_rnd\*O(3).  If
you specify \*L\-fprm d\*O, the IEEE floating-point rounding mode defaults to
round toward plus infinity.
.VL
.LI "\*L\-fprm d\*O"
Set rounding mode for IEEE floating-point instructions dynamically
.LE
.PP
The following flags provide support for exception handling:
.VL
.LI "\*L\-fptm n\*O"
No floating point trapping modes
.LI "\*L\-fptm u\*O"
Trap floating point on underflow
.LI "\*L\-fptm su\*O"
Trap floating point on underflow with software completion
.LI "\*L\-fptm sui\*O"
Trap floating point on underflow or inexact with software completion
.LI "\*L\-scope_safe\*O"
Ensure that any trap (such as floating overflow) is reported to have occurred
in the procedure or guarded scope that caused the trap.
Any trap occurring outside that scope is not reported
to have occurred in the procedure or guarded scope, with the exception of
well-defined \*Ltrapb\*Os following \*Ljsr\*Os.
.LI "\*L\-resumption_safe\*O"
Restrict all \*L\-scope_safe\*O functionality plus the code generated in trap
shadows so that it is reexecutable.
.LI "\*L\-ieee_with_inexact"
Assure full IEEE support. This support consists of setting
the \*L\-resumption_safe\*O and \*L\-fptm sui\*O flags and marking
.\" fix in next line - substituted 'system' for 'math' - qar 17484
the procedures as IEEE-conformant, so that the system library routines
the procedures call will handle denorms, NaNs, and infinities, as well as
return the correct IEEE default value in error cases. In addition,
the \*Lcpp\*O macros \*L_IEEE_FP\*O and \*L_IEEE_FP_INEXACT\*O are set.
.LI "\*L\-ieee_with_no_inexact\*O"
Similar to \*L\-ieee_with_inexact\*O except that
the \*L\-fptm su\*O flag is used and the \*Lcpp\*O macro
\*L_IEEE_FP\*O is set. This flag produces faster execution
than the \*L\-ieee_with_inexact\*O flag.
.LE
.PP
Other arguments are assumed to be either linker flags for
C-compatible object files, typically produced by an earlier
\*Lcc\*O run, or perhaps libraries of
C-compatible routines.  These files, together with the results of any
compilations specified, are loaded in the order
given, producing an executable program with the default name
\*La\.out.\*O
.PP
The \*Lcc\*O command recognizes position-sensitive linker flags and
maintains their relative order when it invokes the linker (\*Lld\*O).
These flags are: \*L\-L\*O, \*L\-all\*O, \*L\-exclude\*O,
\*L\-exported_symbol\*O, \*L\-hidden\*O, \*L\-hidden_symbol\*O,
\*L\-kl\*O, \*L\-l\*O, \*L\-none\*O, \*L\-non_hidden\*O, and
\*L\-no_archive\*O. See the \*Lld\*O(1) reference page for a full
description of these flags.
.\"The following note is no longer true, according to Randy Lowell - 10/21/93
.\"
.\".SH NOTES
.\".PP
.\"The standard library,
.\"\*L/usr/ccs/lib/libc.a\*O or \*L/usr/shlib/libc.so\*O, is loaded by using
.\"the \*L\-lc\*O loader option and not a full pathname.
.\"The wrong one could be loaded if there are files with the name
.\"\*Llibc.\*O{\*Lso\*O,\*La\*O} string in the directories specified with the
.\"\*L\-L\*O loader option or in the default directories searched by the loader.
.SH THE -migrate FLAG
.PP
The \*L\-migrate\*O flag enables language processing rules and
language extensions for the DEC C compilation environment.
.SS Existing cc Command Flags Supported
When you specify the \*L\-migrate\*O flag, the following subset of
existing \*Lcc\*O flags is supported: \*L\-c\*O, \*L\-g\*O, \*L\-g0\*O,
\*L\-g1\*O, \*L\-g2\*O, \*L\-g3\*O,
\*L\-w\*O, \*L\-w1\*O,
\*L\-O\*O, \*L\-O0\*O, \*L\-O1\*O, \*L\-O2\*O, \*L\-O3\*O  (but with
slightly different behavior. See the
description of \*L\-O[n\*O] in the next section, which also
includes the additional optimization flag \*L\-O4\*O.)
\*L\-P\*O,
\*L\-E\*O,
\*L\-Dname\*O, \*L\-Dname=\*Vdef\*O,
\*L\-I\*O, \*L\-I\*Vdir\*O,
\*L\-fprm n\*O, \*L\-fprm d\*O, \*L\-fprm m\*O, \*L\-fprm c\*V,
\*L\-fptm n\*O, \*L\-fptm u\*O, \*L\-fptm su\*O, \*L\-fptm sui\*O,
\*L\-ieee_with_inexact\*O, \*L\-ieee_with_no_inexact\*O,
\*L\-non_shared\*O,
\*L\-call_shared\*O,
\*L\-no_archive\*O,
\*L\-exact_version\*O,
\*L\-M\*O,
\*L\-o\*O,
\*L\-v\*O,
\*L\-std\*O, \*L\-std0\*O, \*L\-std1\*O,
\*L\-traditional\*O,
\*L\-signed\*O, \*L\-unsigned\*O, \*L\-Uname\*O, \*L\-Zpn\*O, \*L\-C\*O,
\*L\-framepointer\*O, \*L\-float\*O, \*L\-float_const\*O, \*L\-proto\*O,
\*L\-signed\*O, \*L\-volatile\*O, \*L\-varargs\*O.
.SS Default cc Flags
In the absence of any \*Lcc\*O command line flags other than \*L\-migrate\*O,
the compiler uses the following defaults:
.sp
.rS 5
\*L\-std0\*O \- Enforce the K & R standard with some ANSI extensions.
.sp
\*L\-g0\*O \- Do not produce symbol table information for symbolic debugging.
.sp
\*L\-O1\*O \- Enable all optimizations that can be done quickly.
.sp
\*L\-inline \*Vnone\*O \- Do no inlining.
.rE
.SS  Additional cc Command Flags Supported
The \*L\-migrate\*O flag enables the following additional \*Lcc\*O command flags
which are native to the DEC C compilation environment, but not part
of the DEC OSF/1 \*Lcc\*O compiler options:
.VL 3m
.LI "\*L\-ansi_alias\*O"
Direct the compiler to assume the ANSI C aliasing rules.
The aliasing rules referred to are explained in Section
3.3, paragraphs 20 and 25 of the ANSI C Standard, reprinted as follows:
.rS 10
.sp
An object shall have its stored value
accessed only by an lvalue that has one
of the following types:
.ML
.LI
The declared type of the object,
.LI
A qualified version of the declared
type of the object,
.LI
A type that is the signed or unsigned
type corresponding to the declared
type of the object,
.LI
A type that is the signed or unsigned
type corresponding to a qualified
version of the declared type of the
object,
.LI
An aggregate or union type that
includes one of the aforementioned
types among its members (including,
recursively, a member of a
subaggregate or contained union),
or
.LI
A character type.
.LE
.rE
.sp
.rS 3
If your program does not access the same data through
pointers of a different type (and for this purpose,
signed and qualified versions of an otherwise same type
are considered to be the same type), then assuming ANSI
C aliasing rules allows the compiler to generate better
optimized code.
.sp
If your program does access the same data through
pointers of a different type (for example, by a "pointer
to int" and a "pointer to float"), then you must not
allow the compiler to assume ANSI C aliasing rules.
Otherwise, incorrect code might be generated.
.sp
The default is to assume no ANSI C aliasing rules when
compiling with the \*L\-vaxc\*O or \*L\-std0\*O flag.
The default is \*L\-ansi_alias\*O for the other compiler modes
(\*L\-std\*O, \*L\-std1\*O).
.rE
.LI "\*L\-assume [no]accuracy_sensitive\*O"
Specify whether certain code transformations that affect
floating-point operations are allowed. These changes may
or may not affect the accuracy of the program's results.
.sp
The \*Lnoaccuracy_sensitive\*O qualifier frees the compiler to reorder
floating-point operations based on algebraic identities
(inverses, associativity, and distribution). This allows
the compiler to move divide operations outside of loops,
which improves performance.
.sp
The \*Laccuracy_sensitive\*O qualifier, the default, directs the compiler
to use only certain scalar rules for calculations. This
setting can prevent some optimizations.
If you specify \*L\-assume noaccuracy_sensitive\*O, the
compiler might reorder code (based on algebraic
identities) to improve performance. The results can be
different from the default (\*L\-assume accuracy_sensitive\*O)
because of how the intermediate results are rounded.
However, the \*Lnoaccuracy_sensitive\*O results are not
categorically less accurate than those gained by the default.
.LI "\*L\-assume [no]aligned_objects\*O"
Specify whether or not the compiler assumes that a
dereferenced object's alignment matches or exceeds the
alignment indicated by the pointer to the object.
.sp
On AXP systems, dereferencing a pointer to a longword-
or quadword-aligned object is more efficient than
dereferencing a pointer to a byte- or word-aligned
object. Therefore, the compiler can generate more
optimized code if it assumes that a pointer object of
an aligned pointer type does point to an aligned object.
.sp
Because the compiler determines the alignment of the
dereferenced object from the type of the pointer,
and the program is allowed to compute a pointer that
references an unaligned object (even though the pointer
type indicates that it references an aligned object),
the compiler must assume that the dereferenced object's
alignment matches or exceeds the alignment indicated by
the pointer type.
.sp
The \*L\-assume aligned_objects\*O flag, the default, allows the
compiler to make such an assumption, and thereby
generate more efficient code for pointer dereferences
of aligned pointer types.
.sp
The \*L\-assume noaligned_objects\*O prevents the compiler from
assuming the pointer type's alignment for objects that it points to.
.sp
The compiler assumes that pointers point to objects that
are aligned at least as much as the alignment of the pointer type.
For example:
.ML
.LI
A pointer of type short points to objects that are at least short-aligned.
.LI
A pointer of type int points to objects that are at least int-aligned.
.LI
A pointer of type struct foo points to objects
that have an alignment of struct foo (that is, the
alignment of the strictest member alignment, or byte
alignment if you have specified \*L#pragma nomember_alignment\*O
for struct foo).
.LE
.sp
.rS 3
If your module breaks this rule, you must use the
.br
\*L\-assume noaligned_objects flag\*O to compile the module;
otherwise, your program may get alignment faults during
execution that will degrade performance.
.sp
On AXP systems, the compiler aligns all nonmember
declarations on natural boundaries, so by default all
objects do comply with the previous assumption.
.rE
.LI "\*L-check\*O"
Perform compile-time code checking. With this flag,
the compiler checks for code that exhibits nonportable
behavior, represents a possible unintended code
sequence, or possibly affects operation of the program
because of a quiet change in the ANSI C Standard. Some
of these checks have traditionally been associated with
the lint utility.
.LI "\*L\-inline \*Vkeyword\*O"
Provide inline expansion of functions that yield
optimized code when they are expanded. Whether or not a
function is a candidate for inline expansion is based on
its size, the number of times it is called, and whether
it conforms to the rules specified in the description
of the \*L#pragma inline\*O preprocessor directive. You
can specify one of the following keywords to control
inlining:
.VL 4m
.LI "\*Lnone\*O"
No inlining is done, even if requested by a
\*L#pragma inline\*O preprocessor directive. This
is the default when compiling with \*L\-O0\*O and
\*L\-O1\*O optimization level).
.LI "\*Lmanual\*O"
Inlines only those function calls explicitly
requested for inlining by a \*L#pragma inline\*O directive. This is
the default when compiling with \*L\-O2\*O and \*L\-O3\*O.
.LI "\*Lautomatic\*O"
Inlines all of the function calls in the
manual category, plus any additional calls that the compiler determines
would improve run-time performance. This is the default
when compiling with \*L\-O\*O or \*L-O4\*O.
.LI "\*Lall\*O"
Inlines every call that can be inlined while
still generating correct code. Recursive
routines, however, will not cause an infinite
loop at compile time.
.LE
.sp
.rS 3
For optimization level 0 (\*L\-O0\*O), the -inline flag is
ignored and no inlining is done.
.rE
.LI "\*L\-machine_code\*O"
List the generated machine code in the listing file. To
produce the listing file, you must also specify \*L-source_listing\*O.
The default is to not list the generated machine code.
.LI "\*L-nomember_alignment\*O"
Direct the compiler to byte-align data structure members
(with the exception of bit-field members).
.sp
By default, data structure members are aligned on
natural boundaries (the next boundary appropriate to
the type of the member), rather than the next byte. For
example, an int variable member is aligned on the next
longword boundary; a short variable member is aligned on
the next word boundary.
.sp
Any use of the \*L#pragma member_alignment\*O,
.br
\*L#pragma nomember_alignment\*O, or \*L#pragma pack\*O directives within
the source code overrides the setting established by this flag.
.LI "\*L\-noobject\*O"
Suppress creation of an object module file. By default,
an object module file is created with the same name as
that of the first source file of a compilation unit and
with the \*L.o\*O file extension.
.sp
Use the \*L-noobject\*O flag when you need only a listing of a
program or when you want the compiler to check a source
file for errors.
.LI "\*L\-O0, -O1, -O2, -O3, -O4\*O"
The \*L\-O0\*O flag disables all optimizations.
The \*L\-O1\*O enables local optimizations and recognition of common
subexpressions. The call graph determines the order of
compilation of procedures. This is the default.
.sp
The \*L\-O2\*O flag enables global optimization. This includes code motion,
strength reduction and test replacement, split lifetime
analysis, and code scheduling. The \*L\-O3\*O flag enables additional global
optimizations that improve speed (at the cost of extra code size). For example:
integer multiplication and division expansion (using
shifts), loop unrolling, and code replication to eliminate branches.
Symbol preemption with shared libraries is only
supported at optimization levels \*L-O0\*O, \*L-O1\*O, and \*L-O2\*O;
it is not supported at \*L-O3\*O or \*L-O4\*O.
.sp
The \*L\-O\*O and \*L-O4\*O flags enable inline expansion of small procedures.
\*L \*O Symbol preemption with shared libraries is only
supported at optimization levels \*L\-O0\*O, \*L\-O1\*O and \*L-O2\*O;
it is not supported at \*L-O3\*O or \*L-O4\*O.
.LI "\*L\-plus_list_optimize\*O"
Provide improved optimization and code generation across
file boundaries that would not be available if the files
were compiled separately.
.sp
When you specify \*L\-plus_list_optimize\*O on the command line
in conjunction with a series of file specifications,
the compiler does not concatenate each of the specified
source files together. Instead, each file is treated
separately for purposes of parsing, except that the
compiler will issue diagnostics about conflicting
external declarations and function definitions
that occur in different files. For purposes of code
generation, the compiler treats the files as one application.
The default is to not provide plus-list optimization.
.LI "\*L-portable\*O"
Place the compiler in VAX C mode and enable the issuance
of diagnostics that warn about any nonportable usages encountered.
.LI "\*L\-show \*Vkeyword[,keyword,...]\*O"
Specify one or more items to be included in the listing
file. When specifying multiple keywords, separate them
by commas (with no intervening blanks). To use any of
the \*L\-show\*O keywords, you must also specify the \*L-source_listing\*O
option. The \*L-show\*O keywords are:
.VL 3m
.LI "\*Lnone\*O"
Turn off all show options.
.LI "\*Lall\*O"
Turn on all show options.
.LI "\*L[no]expansion\*O"
Place final macro expansions in the
program listing. When you specify expansion, the number printed in the margin
indicates the maximum depth of macro substitutions that occur on each line.
.LI "\*L[no]header\*O"
Produce header lines at top of
each page of listing.
.LI "\*L[no]include\*O"
Place contents of \*L#include\*O files in
program listing.
.LI "\*L[no]source\*O"
Place source program statements in program listing.
.LI "\*L[no]statistics\*O"
Place compiler performance statistics in
the program listing.
.LE
.rS 3
.sp
The default is to show page headers and source
.br
( \*L\-show header, source\*O).
.rE
.LI "\*L\-source_listing\*O"
Produce a source program listing file with the same name
as the source file and with a file extension of \*L\.lis\*O.
You must specify this qualifier to get a listing.
The default is to not produce a listing file.
.LI  "\*L\-unroll\*V n\*O"
Control loop unrolling done by the optimizer. Specifying
\*L-unroll\*V n\*O unrolls loop bodies \*Vn\*O times. Specifying
\*L-unroll 0\*O means the optimizer uses its own default unroll amount.
The default is \*L-unroll 0\*O.
.LI "\*L\-vaxc\*O"
.sp
Place the compiler in VAX C compatibility mode. This
mode of compilation allows the same language as the
ANSI C language, but also supports VAX C extensions
that are incompatible with the ANSI C Standard and
that change the language semantics. This mode provides
compatibility for programs that depend on old VAX C
behavior.
.LI  "\*L\-w0\*O"
Display all levels of compiler messages. By default,
informational messages are suppressed.
.LE
.SS Preprocessor Directives
The \*L\-migrate\*O flag enables these additional preprocessor
directives:
.VL 4m
.LI "\*L#pragma [no]inline\*O"
Function inlining is the inline expansion of function
calls; it replaces the function call with the function code
itself. Inline expansion of functions reduces execution
time by eliminating function-call overhead and allowing
the compiler's general optimization methods to apply across
the expanded code. Compared with the use of function-like
macros, function inlining has the following advantages:
.ML
.LI
Arguments are evaluated only once.
.LI
The overuse of parentheses is not necessary to avoid
problems with precedence.
.LI
The actual expansion can be controlled from the command line.
.LE
.sp
.rS 3
Also, the semantics are exactly the same as if inline
expansion had not occurred. You cannot get this behavior using macros.
.sp
The following preprocessor directives are provided to
control function inlining:
.sp
\*L#pragma inline \*V( id, . . . )\*O
.sp
\*L#pragma noinline \*V( id, . . . )\*O
.sp
The \*Vid\*O is a function identifier.
.sp
If a function is named in an inline directive, calls to
that function will be expanded as inline code, if possible.
.sp
If a function is named in a noinline directive, calls to
that function will not be expanded as inline code.
.sp
If a function is named in both an inline and a noinline
directive, an error message is issued.
.sp
If the \*Lcc\*O command flag \*L-O4\*O, \*L\-inline automatic\*O,
or \*L-inline\*O all was specified, the compiler attempts to expand
calls to functions named in neither an inline nor a
noinline directive as inline code whenever appropriate,
as determined by the following function characteristics:
.ML
.LI
Size
.LI
Number of times the function is called
.LI
Conformance to the following restrictions:
.sp
.rS 5
The function does not take a parameter's address.
.sp
The function does not use an index expression that
is not a compile-time constant in an array that is
a field of a struct argument. An argument that is a
pointer to a struct is not restricted.
.sp
The function does not use the \*Lvarargs\*O or \*Lstdarg\*O
package to access the function's arguments because
they require arguments to be in adjacent memory
locations, and inline expansion may violate that requirement.
.rE
.rE
.LE
.rS 3
.sp
If a function is to be expanded inline, you must place
the function definition in the same module as the function
call. The definition can appear either before or after the
function call.
.sp
Use of the \*L#pragma inline\*O directive causes inline expansion
regardless of the size or number of times the specified
functions are called.
.rE
.LI "\*L#pragma [no]member_alignment\*O"
By default, the compiler aligns structure members on
natural boundaries.
.sp
Use the \*L#pragma nomember_alignment\*O preprocessor directive
to provide byte-alignment of structure members.
.sp
Use \*L#pragma member_alignment\*O to restore natural-boundary
alignment of structure members.
.sp
This pragma has the following formats:
.sp
\*L#pragma member_alignment\*O
.sp
\*L#pragma member_alignment save\*O
.sp
\*L#pragma member_alignment restore\*O
.sp
\*L#pragma nomember_alignment\*O
.sp
When \*L#pragma member_alignment\*O is used, the compiler aligns
structure members on the next boundary appropriate to
the type of the member, rather than on the next byte. For
instance, an int variable is aligned on the next longword
boundary; a short variable is aligned on the next word
boundary.
.sp
Compare \*L#pragma member_alignment\*O with the related
preprocessor directive \*L#pragma pack\*O, which allows you
to specify structure member alignment to a byte, word,
longword, or quadword. See the
\*EProgrammer's Guide\*O
for more information on \*L#pragma pack\*O.
.sp
With any combination of \*L#pragma member_alignment\*O,
\*L#pragma nomember_alignment\*O, and \*L#pragma pack\*O, each pragma remains
in effect until the next one is encountered.
.sp
The \*L#pragma member_alignment\*O save and
\*L#pragma member_alignment\*O restore directives can be used to save the
current state of the member_alignment (including pack
alignment) and to restore the previous state, respectively.
This feature is necessary for writing header files that
require member_alignment or nomember_alignment, or that
require inclusion in a member_alignment that is already
set.
.LI "\*L#pragma message\*O"
This directive controls the issuance of
individual diagnostic messages or groups of diagnostic
messages. Use of this pragma overrides any command-line
flags that may affect the issuance of messages.
.sp
The \*L#pragma message\*O directive has the following format:
.sp
\*L#pragma message \*Voption1 (message-list)\*O
.sp
\*L#pragma message \*Voption2\*O
.sp
The parameter option1 must be one of the following:
.ML
.LI
\*Lenable\*O \- Enables issuance of the messages specified in the message list.
.LI
\*Ldisable\*O \- Disables issuance of the messages specified in the message
list.
.LE
.rS 3
.sp
The message-list can be any one of the following:
.rE
.ML
.LI
A single message identifier. See the
\*EProgrammer's Guide\*O
for a list of all messages and their message identifiers.
.LI
The name of a message group. Message group names are:
.sp
\*LALL\*O \- All the messages in the compiler
.sp
\*LCHECK\*O \- All the messages about potentially poor coding practices
.sp
\*LPORTABLE\*O \- All the messages about portability
.LI
A single message identifier enclosed in parentheses.
.LI
A message group name enclosed in parentheses.
.LI
A comma-separated list of message identifiers or group
names, freely mixed, enclosed in parentheses.
.LE
.rS 3
.sp
Only messages of severity Warning or Information can be
disabled. If the message has severity of Error or Fatal, it
is issued regardless of any attempt to disable it.
.sp
The default is to issue all diagnostic messages for the
selected compiler mode except those in the CHECK group,
which must be explicitly enabled to display its messages.
.sp
The parameter \*Voption2\*O must be one of the following
keywords:
.rE
.rS 5
.sp
\*Lsave\*O \- Saves the current state of which messages are
enabled and disabled.
.sp
\*Lrestore\*O \- Restores the previous state of which messages
are enabled and disabled.
.rE
.rS 3
.sp
The \*Lsave\*O and \*Lrestore\*O options are useful primarily within
header files.
.rE
.LE
.SS  The _align Storage-Class Modifier
The \*L\-migrate\*O flag enables the \*L_align storage-class\*O modifier.
The _align modifier aligns objects of any of the C data
types on a specified storage boundary. It can be used in a
data declaration or definition.
.sp
The \*L_align\*O modifier has the following format:
.sp
.iS
              _align keyword
              _align n
.iE
Where \*Vkeyword\*O is a predefined alignment constant and \*Vn\*O is
an integer power of 2. The predefined constant or power of
2 tells the compiler the number of bytes to pad in order to
align the data.
.sp
The following table shows the predefined alignment constants, their
equivalent power of 2, and equivalent number of bytes.
.sp
.TS
tab(@);
lfHB lfHB lfHB
lll.
_
.sp 4p
Constant@Power of 2@Number of Bytes
.sp 4p
_
.sp 6p
BYTE or byte@0@1
.sp
WORD or word@1@2
.sp
LONGWORD or longword@2@4
.sp
QUADWORD or quadword@3@8
.sp 6p
_
.TE
.sp
For example, to align an integer on the next quadword boundary, you can
use any of the following declarations:
.sp
.iS
   int  _align( QUADWORD )  data;
   int  _align( quadword )  data;
   int  _align( 3 )  data;
.iE
In this example, \*Lint _align ( 3 )\*O specifies an alignment of
23 bytes, which is 8 bytes-a quadword of memory.
.SS Predefined Macros
The \*L\-migrate\*O flag enables the following additional
predefined macros:
.iS
   _\|_ALPHA                  _\|_Alpha_AXP
   _\|_DECC                   _\|_IEEE_FLOAT
   _\|_DECC_MODE_STRICT       _\|_DECC_MODE_RELAXED
   _\|_DECC_MODE_VAXC         _\|_DECC_MODE_COMMON
.iE
These macros are defined as if the following text fragment
were included by the compiler before every compilation
source group:
.sp
.iS
   #define _\|_ALPHA              1
   #define _\|_Alpha_AXP          1
   #define _\|_DECC               1
   #define _\|_IEEE_FLOAT         1
   #define _\|_DECC_MODE_STRICT   1   ! If -std1 is specified;
                                    ! otherwise 0.
   #define _\|_DECC_MODE_RELAXED  1   ! If -std is specified;
                                    ! otherwise 0.
   #define _\|_DECC_MODE_VAXC     1   ! If -vaxc is specified;
                                     ! otherwise 0.
   #define _\|_DECC_MODE_COMMON   1   ! If -std0 is specified;
                                    ! otherwise 0.
.iE
.SH ERRORS
.PP
The diagnostics produced by \*Lcc\*O are intended to be self-explanatory.
Occasional messages may be produced by the assembler or loader.
.SH FILES
.PP
.VL
.LI "\*Vfile\*L\.c\*O"
input file
.LI "\*Vfile\*L\.o\*O"
object file
.LI "\*La\.out\*O"
loaded output
.LI "\*Lerr.english.cc\*O"
compiler error messages in English
.LI "\*L/tmp/ctm?\*O"
temporary
.LI "\*L/usr/lib/cmplrs/cc/comp.config\*O"
compiler configuration file (optional)
.LI "\*L/usr/lib/cmplrs/cc/cfe\*O"
C front end
.LI "\*L/usr/lib/cmplrs/cc/cpp\*O"
C macro preprocessor
.LI "\*L/usr/lib/cmplrs/cc/ujoin\*O"
binary \*Lucode\*O and symbol table joiner
.LI "\*L/usr/bin/uld\*O"
\*Lucode\*O loader
.LI "\*L/usr/lib/cmplrs/cc/usplit\*O"
binary \*Lucode\*O and symbol table splitter
.LI "\*L/usr/lib/cmplrs/cc/umerge\*O"
procedure integrator
.LI "\*L/usr/lib/cmplrs/cc/uopt\*O"
optional global \*Lucode\*O optimizer
.LI "\*L/usr/lib/cmplrs/cc/ugen\*O"
code generator
.LI "\*L/usr/lib/cmplrs/cc/as0\*O"
symbolic to binary assembly language translator
.LI "\*L/usr/lib/cmplrs/cc/as1\*O"
binary assembly language assembler and reorganizer
.LI "\*L/usr/lib/cmplrs/cc/crt0.o\*O"
run-time startup
.LI "\*L/usr/lib/cmplrs/cc/mcrt0.o\*O"
startup for profiling
.LI "\*L/usr/ccs/lib/libc.a\*O"
standard library, see
\*Lintro\*O(3)
.LI "\*L/usr/lib/cmplrs/cc/libprof1.a\*O"
level 1 profiling library
.LI "\*L/usr/include\*O"
standard directory for \*L#include\*O
files
.\" this is a place holder for the file for rld which is now loader
.LI "\*L/usr/lib/cmplrs/cc/ftoc\*O"
interface between \*Lprof\*O and \*Lcord\*O
.LI "\*L/usr/lib/cmplrs/cc/cord\*O"
procedure-rearranger
.LI "\*L/usr/bin/btou\*O"
binary to symbolic \*Lucode\*O translator
.LI "\*L/usr/bin/utob\*O"
symbolic to binary \*Lucode\*O translator
.LI "\*Lmon.out\*O"
file produced for analysis by \*Lprof\*O
.LE
.SH RELATED INFORMATION
.PP
\*VANSI X3.159-1989\*)
.PP
B. W. Kernighan and D. M. Ritchie,
\*VThe C Programming Language\*O
.PP
B. W. Kernighan,
\*VProgramming in C \(em a tutorial\*O
.PP
D. M. Ritchie,
\*VC Reference Manual\*O
.PP
\*EProgrammer's Guide\*O
.PP
\*EAssembly Language Programmer's Guide\*O
.PP
\*Las\*O(1), \*Lcord\*O(1), \*Ldbx\*O(1), \*Lftoc\*O(1), \*Lld\*O(1),
\*Lpixie\*O(1), \*Lprof\*O(1), \*Lwhat\*O(1),
\*Lmonitor\*O(3)
.EQ
delim off
.EN

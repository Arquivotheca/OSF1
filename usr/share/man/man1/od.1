.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: od.1,v $ $Revision: 3.2.5.3 $ (DEC) $Date: 1993/12/01 12:46:20 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.TH od 1
.SH NAME
\*Lod\*O \- Writes the contents of a file to standard output
.SH SYNOPSIS
.PP
.sS
.in +.5i
.ti -.5i
\*Lod\*O
\*O[\*L\(hyv\*O]
\*O[\*L\(hyQ\*O]
\*O[\*L\(hyA\ \*Vaddress_base\*O]
\*O[\*L\(hyj\ \*Vskip\*O]
\*O[\*L\(hyN\ \*Vcount\*O]
\*O[\*L\(hyt\ \*Vtype_string\*O\&.\&.\&.]
\*O[\*Vfile\*O\ \&.\&.\&.]
.in -.5i
.PP
.in +.5i
.ti -.5i
\*Lod\*O
\*O[\*L\(hyabBcCdDefFhHiIlLoOpPvxX\*O]
\*O[\*L\(hyA\ \*Vaddress_base\*O]
\*O[\*L\(hyj\ \*Vskip\*O]
\*O[\*L\(hyN\ \*Vcount\*O]
\*O[\*L\(hyt\ \*Vtype_string\*O\&.\&.\&.]
\*O[\*L\(hys\*Vnumber\*O]
\*O[\*L\(hyw\*Vnumber\*O]
\*O[\*Vfile\*O\ \&.\&.\&.]
\*O[\*L+\*O]
\*O[\*Voffset\*O]\c
\*O[\*L\&.\*O][\*Lb\*O\ |\ \*LB\*O]
\*O[\*Vlabel\*O][\*L\&.\*O][\*Lb\*O\ |\ \*LB\*O]
.in -.5i
.sE
.PP
The \*Lod\*O command reads \*Vfile\*O (standard input by
default), and writes the information
stored in \*Vfile\*O to standard output using the format specified
by the first flag.  If you do
not specify the first flag, the \*L-o\*O flag is the default.
.SH FLAGS
.PP
Format characters are as follows:
.VL 4m
.LI "\*L-Q\*O"
Displays quadwords as hexadecimal values. This option applies only to
the operating system for Alpha AXP systems.
.LI "\*L-a\*O"
Displays bytes as characters and displays them with their
ASCII names.  If the \*Lp\*O character is also given, bytes
with even parity are underlined.  The \*LP\*O character causes
bytes with odd parity to be underlined.  Otherwise, parity is ignored.
.LI "\*L-A \*Vaddress_base\*O"
Specifies the input offset base with the single-character
\*Vaddress_base\*O argument.  The characters \*Ld\*O, \*Lo\*O, and
\*Lx\*O specify that the offset base be written in decimal, octal, or
hexadecimal, respectively.  The character \*Ln\*O specifies that
the offset not be written at all.
.LI "\*L-b\*O"
Displays bytes as octal values.
.LI "\*L-B\*O"
Displays short words as octal values.
.LI "\*L-c\*O"
Displays bytes as characters using the current setting
of the \*LLC_CTYPE\*O variable.  The following nongraphic
characters appear as C escape sequences:
.VL 4m
.LI "\*L\e0\*O"
Null
.LI "\*L\ea\*O"
Alarm (or bell)
.LI "\*L\eb\*O"
Backspace
.LI "\*L\ef\*O"
Formfeed
.LI "\*L\en\*O"
Newline character
.LI "\*L\er\*O"
Enter
.LI "\*L\et\*O"
Tab
.LI "\*L\ev\*O"
Vertical tab
.LE
.IP
Other nongraphic characters appear as 3-digit octal numbers.
Bytes with the parity bit set are displayed in octal.
.LI "\*L-C\*O"
Displays any extended characters as standard printable ASCII
characters using the appropriate character escape string.
.LI "\*L-d\*O"
Displays short words as unsigned decimal values.
.LI "\*L-D\*O"
Displays long words as unsigned decimal values.
.LI "\*L-e\*O"
Displays long words as double-precision, floating-point.
(Same as \*L-F\*O.)
.LI "\*L-f\*O"
Displays long words as single-precision, floating-point.
.LI "\*L-F\*O"
Displays long words as double-precision, floating-point.
.LI "\*L-h\*O"
Displays short words as unsigned hexadecimal values.
.LI "\*L-H\*O"
Displays long words as unsigned hexadecimal values.
.LI "\*L-i\*O"
Displays short words as signed decimal values.
.LI "\*L-I\*O, \*L-l\*O, \*L-L\*O"
Display long words as signed decimal values.  (The three flags are
identical.)
.LI "\*L-j \*Vskip\*O"
Jumps over (reading or seeking)
\*Vskip\*O bytes from the beginning of the concatenated input files.  If
the input is not at least \*Vskip\*O bytes long, \*Lod\*O writes
a diagnostic message to standard error and returns a nonzero exit value.
.IP
The \*Vskip\*O argument is interpreted as a decimal number by default.
If you include a leading offset of \*L0x\*O or \*L0X\*O, \*Vskip\*O
is interpreted as a hexadecimal number.  A leading offset of
\*L0\*O (zero) causes \*Vskip\*O to be interpreted as an octal number.
.IP
If you append the character \*Lb\*O, \*Lk\*O, or \*Lm\*O to \*Vskip\*O,
the number is interpreted as a multiple of 512, 1024, or 1,048,576
bytes, respectively.
.LI "\*L-N \*Vcount\*O"
Causes \*Lod\*O to format no more than \*Vcount\*O bytes of input.
.IP
The \*Vcount\*O argument is interpreted as a decimal number by
default.  If you include a leading offset of \*L0x\*O or \*L0X\*O,
\*Vcount\*O is interpreted as a hexadecimal number.  A leading offset of
\*L0\*O (zero) causes \*Vcount\*O to be interpreted as an octal number.
If there are not \*Vcount\*O bytes of input available (after
successfully skipping bytes as specified by \*L-j\*O), \*Lod\*O
formats the available input.
.LI "\*L-o\*O"
Displays short words as octal values.
.LI "\*L-O\*O"
Displays long words as unsigned octal values.
.LI "\*L-p\*O"
Indicates even parity on \*L-a\*O conversion.
.LI "\*L-P\*O"
Indicates odd parity on \*L-a\*O conversion.
.LI "\*L-s\*O[\*Vnumber\*O]"
Looks for strings of ASCII graphic characters, terminated with a null
byte. The \*Vnumber\*O argument specifies the minimum length string to be recognized.
By default, the minimum length is 3 characters.  Allowable characters
are those between blank (040) and tilde (0176), as well as
backspace, tab, linefeed, formfeed, and carriage-return
(010 through 015, except 013).
.LI "\*L-t \*Vtype_string\*O\&.\&.\&."
Specifies one or more output types.  The \*Vtype_string\*O argument
is a string that specifies the types to be used when writing the input
data.  \*Vtype_string\*O consists of the following
type specification characters:
.VL 4m
.LI "\*La\*O"
Named character
.LI "\*Lc\*O"
Character
.LI "\*Ld\*O"
Signed decimal
.LI "\*Lf\*O"
Floating point
.LI "\*Lo\*O"
Octal
.LI "\*Lu\*O"
Unsigned decimal
.LI "\*Lx\*O"
Hexadecimal
.LE
.IP
The type specification characters \*Ld\*O, \*Lf\*O, \*Lo\*O, \*Lu\*O,
and \*Lx\*O can be followed by an optional unsigned decimal integer
that specifies the number of bytes to be transformed by each instance
of the output type.
.IP
The type specification character \*Lf\*O can be followed by one
of the following optional characters, which indicate the type of
the item to which the conversion should be applied.
.VL 4m
.LI "\*LF\*O"
\*Lfloat\*O
.LI "\*LD\*O"
\*Ldouble\*O
.LI "\*LL\*O"
\*Llong double\*O
.LE
.IP
The type specification characters \*Ld\*O, \*Lo\*O, \*Lu\*O, and \*Lx\*O
can be followed by one of the following optional characters,
which indicate the type of the item to which the conversion should
be applied:
.VL 4m
.LI "\*LC\*O"
\*Lchar\*O
.LI "\*LI\*O"
\*Lint\*O
.LI "\*LL\*O"
\*Llong\*O
.LI "\*LS\*O"
\*Lshort\*O
.LE
.IP
You can concatenate multiple types within the same \*Vtype_string\*O
argument and you can specify multiple \*L-t\*O arguments.  The\*Lod\*O
command writes the output lines for each type specified in the order in which
you entered the type specification characters.
.LI "\*L-v\*O"
Shows all data.  By default, display lines that are identical to the
previous line are not output (except for the byte offsets), but
are indicated with an \*L*\*O (asterisk) in column 1.
.LI "\*L-w\*O[\*Vnumber\*O]"
Specifies the number of input bytes to be interpreted and displayed
on each output line.  If \*L-w\*O is not specified, 16 bytes are read
for each display line.  If \*Vnumber\*O is not specified, it defaults
to 32.
.LI "\*L-x\*O"
Displays short words as unsigned hexadecimal values.  (Same as \*L-h\*O.)
.LI "\*L-X\*O"
Displays long words as unsigned hexadecimal values.  (Same as \*L-H\*O.)
.LE
.PP
An uppercase format character implies the long or double-precision
form of the object.
.PP
The \*Voffset\*O argument specifies the point in the file at which
the output starts.  The \*Voffset\*O argument is interpreted
as octal bytes.  If a \&. (dot) is added to
\*Voffset\*O, it is interpreted in decimal.
If \*Voffset\*O begins with \*Lx\*O or \*L0x\*O,
it is interpreted in hexadecimal.  If \*Lb\*O (\*LB\*O)
is appended, the offset is interpreted as a block count, where
a block is 512 (1024) bytes.
.PP
The \*Vlabel\*O argument is interpreted as a pseudoaddress for the
first byte displayed.  It is shown in parentheses
following the file offset.  It is intended to be used with core
images to indicate the real memory address.  The syntax for
\*Vlabel\*O is identical to that for \*Voffset\*O.
.PP
The output continues until the end of the file.
.SH DESCRIPTION
.PP
.iX "od command"
.iX "writing" "file contents to standard output"
.iX "standard output" "writing file contents to"
.iX "octal dump"
.iX "dump" "octal"
When \*Lod\*O reads standard input, the \*Voffset\*O
and \*Vlabel\*O parameters must be
preceded by a \(pl (plus sign).
.PP
If you omit the file argument and do not specify \*L-A, -j, -N, \*Oor\*L
-t\*L, you must precede the \*Loffset\*O argument by a + (plus sign)
character.
.PP
If the first character of \*Lfile\*O is a + (plus sign) or the first
character of the first file argument is numeric, you give no more than
two arguments, and specify none of the \*L-A, -j, -N, \*Oor\*L -t flags, \*Lod\*O assumes the argument to be an offset.
.PP
If you omit the file argument and specify none of the \*L-A, -j, -N, \*Oor\*L -t
\*O flags, you must precede the \*Loffset\*O argument by a + (plus sign)
character.
.PP
To be sure that \*Lod\*O assumes the argument to be an offset:
.ML
.LI
Make the first character of \*Lfile\*O a + sign, or the first character
of the first file argument numeric
.LI
Give no more than two arguments
.LI
Specify none of the \*L-A, -j, -N, \*Oor\*L -t flags
.LE
.SH EXAMPLES
.PP
.AL
.LI
To display a file in octal word format, a page at a time, enter:
.iS
od  a.out | more
\*O\c
.iE
.LI
To translate a file into several formats at once, enter:
.iS
od  -cx  a.out  >a.xcd
.iE
\*O\c
.IP
This writes \*La.out\*O in hexadecimal format
(the \*L-x\*O flag) into the file \*La.xcd\*O, giving also the ASCII
character equivalent, if any, of each byte (the \*L-c\*O flag).
.LI
To start in the middle of a file, enter:
.iS
od  -bcx  a.out  \(pl100.
\*O\c
.iE
.IP
This displays \*La.out\*O in octal-byte, character, and
hexadecimal formats, starting from the 100th byte.
The \&. (dot) after the offset makes it a decimal number.
Without the \*L\&.\*O (dot), the dump starts from the 64th (100 octal) byte.
.LE
.SS Compatibility Note
The \*L-i\*O flag displays short words as signed
decimal values.  The \*L-i\*O flag used to be \*L-s\*O in System V.
.SH RELATED INFORMATION
.PP
Files:  \*Llocale\*O(4).
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: locale.4,v $ $Revision: 1.1.3.6 $ (DEC) $Date: 1994/01/14 19:56:51 $
.\"
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" OSF/1 1.2
.TH locale 4
.SH NAME
.PP
\*Llocale\*O \- Contains one or more categories that describe a locale
.SH DESCRIPTION
.PP
.iX "locale file"
A locale definition source file contains one or more categories
that describe a locale.  You can convert a locale definition
source file into a locale
by using the \*Llocaledef\*O command.  Locales can be
modified only by editing a locale definition source file and then
using the \*Llocaledef\*O command again on the new source file.
.PP
Each locale source file section defines a category of locale
data.  A source file cannot contain more than one section for
the same category.
.PP
The following standard categories are supported:
.VL 4m
.LI "\*LLC_COLLATE\*O"
Defines character or string collation information
.LI  "\*LLC_CTYPE\*O"
Defines character classification, case conversion, and
other character attributes
.\" Removed bogus correction.
.LI "\*LLC_MESSAGES\*O"
Defines the format for affirmative and negative responses
.LI "\*LLC_MONETARY\*O"
Defines rules and symbols for formatting monetary numeric information
.LI "\*LLC_NUMERIC\*O"
Defines a list of rules and symbols for formatting
nonmonetary numeric information
.LI "\*LLC_TIME\*O"
Defines a list of rules and symbols for formatting time
and date information
.LE
.PP
You can include optional declarations at the beginning of
your locale source file to override the default comment and
escape characters used in locale category definitions:
.ML
.LI
Escape character
.IP
The escape character is used in decimal or hexadecimal
constants when these are specified in the \*Llocale\*O file.
The default escape character is the backslash (\*L\e\*O). To
define another escape character, include a line with the following format:
.IP
\*Lescape_char  <\*Vchar_symbol\*L>\*O
.LI
Comment character
.IP
The comment character is the first character of any comment entries
in the \*Llocale\*O file. The default comment character is the
number sign (\*L#\*O). To define another comment character, use
the following format:
.IP
\*Lcomment_char  <\*Vchar_symbol\*L>\*O
.LE
.PP
In the preceding formats, \*L<\*Vchar_symbol\*L>\*O is
the character's symbolic name as defined in the \*Lcharmap\*O
file used to build the locale's codeset. One or more blank characters
(spaces or tabs) must separate \*Lescape_char\*O or
\*Lcomment_char\*O from \*L<\*Vchar_symbol\*L>\*O.
.PP
Each category source definition consists of the following:
.ML
.LI
The category header (\*Vcategory_name\*O)
.br
.ne 9P
.LI
The associated keyword/value pairs that comprise the category body
.LI
The category trailer (\*LEND \*Vcategory_name\*O)
.LE
.PP
For example:
.PP
.oS
LC_CTYPE
<source for LC_CTYPE category>
END LC_CTYPE
.oE
.PP
The source for all of the categories is specified using keywords,
strings, character literals, and character symbols.  Each keyword
identifies either a definition or a rule.  The remainder of the
statement containing the keyword contains the operands to the
keyword.  Operands are separated from the keyword by one or more
blank characters (spaces or tabs).
A statement may be continued on the next line
by placing a \*L\e\*O (backslash) as the last character before the newline
character that terminates the line.  Lines containing the \*L#\*O
(comment character) in the first column are treated as comment lines.
.PP
A symbolic name begins with the \*L<\*O (left-angle bracket) character
and ends with the \*L>\*O (right-angle bracket) character.  The characters
between the \*L<\*O and the \*L>\*O can be any characters from the
Portable Character Set, except for control and space characters.
.\" No limit on length of symbolic name
.\" A symbolic name cannot exceed 32 bytes in length.  
For example,
\*L<A-diaeresis>\*O could be a symbolic name for a character.
Any symbolic name
referenced in the locale source file must be
defined in the Portable Character Set or in the
character set description (\*Lcharmap\*O) file
for that locale.
.PP
A character literal is the character itself, or else a decimal,
hexadecimal, or octal constant.  A decimal constant is of the
following form:
.if t .PP
.iS
\*L\ed\*Vddd\*O or \*L\ed\*Vdd\*O
.iE
.PP
where \*Vd\*O is a decimal digit.
.PP
A hexadecimal constant is of the
following form:
.if t .PP
.iS
\*L\ex\*Vxx\*O
.iE
.PP
where \*Vx\*O is a hexadecimal digit.
.PP
An octal constant is of the
following form:
.if t .PP
.iS
\*L\e\*Vooo\*O or \*L\e\*Voo\*O
.iE
.PP
where \*Vo\*O is an octal digit.
.PP
The explicit definition of each category in a locale definition
source file is not required.  When a category is undefined in a
locale definition source file, the category value defaults to the value
in the C locale definition.
.SS The LC_COLLATE Category
.if n .PP
The \*LLC_COLLATE\*O category defines
the relative order between collating elements.
.PP
A collation element is the unit of comparison for collation.  A
collation element may be a character or a sequence of characters.
Every collation element in the locale has a set of weights, which
determine if the collation element collates  before, equal to, or
after the other collation elements in the locale.  Each collation
element is assigned collation weights by the \*Llocaledef\*O command
when the locale definition source file is compiled.  These collation
weights are then used by applications programs that compare strings.
.PP
Comparison of strings is performed by comparing the collation
weights of each character in the string until either a difference
is found or the strings are determined to be equal.  This comparison
may be performed several times if the locale defines multiple
collation orders.  For example, in the French locale, the
strings are compared using a primary set of collation weights.
If they are equal on the basis of this comparison, they are compared
again using a secondary set of collation weights.  A collating
element has a set of collation weights associated with it
that is equal to the number of collation orders defined for the locale.
.PP
Every character defined in the \*Lcharmap\*O file (or every character
in the portable character set if no \*Lcharmap\*O file is specified)
is itself a collating element.  Additional collating elements
can be defined using the \*Lcollating-element\*O statement.  The syntax is
as follows:
.PP
\*Lcollating-element <\*Vcharacter_symbol\*L> \*Lfrom <\*Vstring\*L>\*O
.PP
The \*LLC_COLLATE\*O category begins with the keyword \*LLC_COLLATE\*O and
ends with the keyword \*LEND LC_COLLATE\*O.
.PP
The following keywords are recognized in the \*LLC_COLLATE\*O category:
.VL 4m
.LI "\*Lcopy\*O"
The \*Lcopy\*O statement specifies the name of an existing locale
to be used as the definition of this category. If you specify a
\*Lcopy\*O statement, you can specify no other keywords in the
category.
.LI  "\*Lcollating-element\*O"
The \*Lcollating-element\*O statement is used to
specify multicharacter collating elements.
.IP
The \*Vcharacter_symbol\*O argument defines a collating element that is a
string of one or more characters as a single collating element.
The \*Vcharacter_symbol\*O argument cannot duplicate any symbolic name in
the current \*Lcharmap\*O file or any other symbolic name defined in
this collation definition.  The \*Vstring\*O argument specifies a string
of two or more characters that define the \*Vcharacter_symbol\*O argument.
The following are examples of the syntax for the
\*Lcollating-element\*O statement:
.if n .IP
.oS
collating-element <ch> from "<c><h>"
collating-element <e-acute> from "<acute><e>"
collating-element <11> from "<1><1>"
.oE
.if n .IP
A \*Vcharacter_symbol\*O argument defined by the \*Lcollating-element\*O
statement is recognized only within the \*LLC_COLLATE\*O category.
.LI "\*Lcollating-symbol\*O"
The \*Lcollating-symbol\*O statement is used to specify
collation symbols for use in collation sequence statements.
.IP
The syntax for the \*Lcollating-symbol\*O statement is as follows:
.IP
\*Lcollating-symbol <\*Vcollating_symbol\*L>\*O
.IP
The \*Vcollating_symbol\*O argument cannot duplicate any symbolic name in
the current \*Lcharmap\*O file or any other symbolic name defined in
this collation definition.  The following are examples of
\*Lcollating-symbol\*O statements:
.if n .IP
.oS
collating-symbol <UPPER_CASE>
collating-symbol <HIGH>
.oE
.if n .IP
A \*Vcollating_symbol\*O argument defined by the \*Lcollating-symbol\*O
statement is recognized only within the \*LLC_COLLATE\*O category.
.LI "\*Lorder_start\*O"
The \*Lorder_start\*O statement is followed by one or more
collation order statements, assigning collation weights to
collating elements.  This statement is mandatory.
.IP
The syntax for the \*Lorder_start\*O statement is as follows:
.IP
.\" Do NOT break the following line; considered a syntax error if 
.\" broken.
.if n \*Lorder_start\ <\*Vsort_rules\*L>;<\*Vsort_rules\*L>;\*O...\*L;<\*Vsort_rules\*L>\*O
.if t \*Lorder_start\ <\*Vsort_rules\*L>;<\*Vsort_rules\*L>;\e
.if t \*O...\*L;<\*Vsort_rules\*L>\*O
.nL
\*Vcollation_order_statements\*O
.nL
\*Lorder_end\*O
.IP
The \*Vsort_rules\*O have the following syntax:
.IP
\*Vkeyword\*L, \*Vkeyword\*L,\*O...\*L,\*Vkeyword\*O
.IP
where \*Vkeyword\*O is the keyword \*Lforward\*O, \*Lbackward\*O,
or \*Lposition\*O.
.IP
The \*Vsort_rules\*O directives are optional.  If present, they define
the rules to apply during string comparison. The number of
specified \*Vsort_rules\*O directives defines the number of weights
each collating element is assigned; that is, the directives define
the number of collation
orders in the locale.  If no \*Vsort_rules\*O directives are
present, one \*Lforward\*O directive is assumed and comparisons are
made on a character basis rather than a string basis.
.IP
If directives
are present, the first \*Vsort_rules\*O directive applies when comparing
strings that use the primary weight,  the second when comparing strings
that use the secondary weight, and so on.  Each set of \*Vsort_rules\*O
directives is separated by a \*L;\*O (semicolon).  A \*Vsort_rules\*O
directive consists of one or more comma-separated keywords.  The
following keywords are supported:
.VL 4m
.LI "\*Lforward\*O"
Specifies that collation weight comparisons proceed from
the beginning of a string to the end of the string.
.LI "\*Lbackward\*O"
Specifies that collation weight comparisons proceed from
the end of a string to the beginning of the string.
.LI "\*Lposition\*O"
Specifies that collation weight comparisons consider the
relative position of nonignored elements in the string.  That
is, if strings compare as equal, the element with the shortest
distance from the starting point of the comparison collates first.
.LE
.IP
The \*Lforward\*O and \*Lbackward\*O keywords are mutually exclusive.  The
following is an example of a \*Vsort_rules\*O directive:
.if n .IP
.oS
order_start        forward;backward
.oE
.if n .IP
.LE
.PP
The following syntax rules apply to collation order statements:
.ML
.LI
Each collation order statement consists of a \*L<\*Vcharacter_symbol\*L>\*O
specification, followed by white space and a set of collation orders.
.LI
Characters in the character set can be explicitly specified in the
collation orders or implicitly specified using the
ellipsis symbol (\*L\&.\&.\&.\*O).
.LI
A collation order statement that begins with the
\*LUNDEFINED\*O special symbol specifies
any characters
that are in the character set and not explicitly or implicitly
specified by other collation order statements.
.LE
.PP
The optional operands for each collation element are used
to define the primary, secondary, or subsequent weights for the
collating element.  The special symbol \*LIGNORE\*O is used to indicate
a collating element that is to be ignored when strings are compared.
.PP
An \*Lellipsis\*O keyword appearing in place of a \*Vcollating_element_list\*O
indicates the weights are to be assigned,
for the characters in the identified range, in numerically
increasing order from the weight for the character symbol on the
left-hand side of the preceding statement.
.PP
The use of the \*Lellipsis\*O keyword results in a locale that
may collate differently when compiled with different character
set description (\*Lcharmap\*O) source files.  For this reason, the
\*Llocaledef\*O command will issue a warning when the
\*Lellipsis\*O keyword is encountered.
.PP
The \*LUNDEFINED\*O special
symbol includes all coded character set values not specified
explicitly or with an ellipsis symbol.  These characters are
inserted in the character collation order at the point indicated by
the \*LUNDEFINED\*O special symbol in the order of their character code
set values.  If no \*LUNDEFINED\*O special symbol exists and the
collation order does not specify all collation elements from the coded
character set, a warning is issued and all undefined characters
are placed at the end of the character collation order.
.PP
The following is an example of a collation order statement in the
\*LLC_COLLATE\*O locale definition source file category:
.if n .IP
.oS
order_start     forward;backward
UNDEFINED       IGNORE;IGNORE
<LOW>
<space>         <LOW>;<space>
\&.\&.\&              <LOW>;\&.\&.\&.
<a>             <a>;<a>
<a-acute>       <a>;<a-acute>
<a-grave>       <a>;<a-grave>
<A>             <a>;<A>
<A-acute>       <a>;<A-acute>
<A-grave>       <a>;<A-grave>
<ch>            <ch>;<ch>
<Ch>            <ch>;<Ch>
<s>             <s>;<s>
<ss>            <s><s>;<s><s>
<eszet>         <s><s>;<eszet><eszet>
\&.\&.\&.             <HIGH>;\&.\&.\&.
<HIGH>
order_end
.oE
.if n .IP
This example is interpreted as follows:
.ML
.LI
The \*LUNDEFINED\*O special symbol indicates that all characters not
specified in the definition (either explicitly or by the ellipsis
symbol) are ignored for collation purposes.
.LI
All collating elements between \*L<space>\*O and \*L<a>\*O have the same
primary equivalence class and individual secondary weights based
on their coded character set values.
.LI
All versions of the letter \*La\*O (uppercase and lowercase,
and with or without diacriticals) belong to the same
primary collation class.
.LI
The \*L<c><h>\*O multicharacter collating element is represented by
the \*L<ch>\*O collating symbol and belongs to the same primary
equivalence class as the \*L<C><h>\*O multicharacter collating element.
.LI
The \*L<eszet>\*O character is collated as an \*L<s><s>\*O string.  That
is, one \*L<eszet>\*O character is expanded to two characters before
comparing.
.LE
.SS The LC_CTYPE Category
.if n .PP
The \*LLC_CTYPE\*O category of a locale definition source file defines
character classification, case conversion, and other character
attributes.  This category begins with an \*LLC_CTYPE\*O category
header and terminates with an \*LEND LC_CTYPE\*O category trailer.
.PP
All operands for \*LLC_CTYPE\*O category statements are defined as
lists of characters.  Each list consists of one or more
semicolon-separated characters or symbolic character names.
An ellipsis (...) can represent a series of characters; for example,
\*L<a>;...;<z>\*O represents the characters in the range
\*La\*O through \*Lz\*O.
.PP
The following keywords are recognized in the \*LLC_CTYPE\*O category.
In the descriptions, the term automatically included means that
an error does not occur if the referenced characters are included
or omitted.  The characters will be provided if they are missing
and will be accepted if they are present.
.PP
.VL 4m
.\" .zA "review, R1.1.2, XPG4"
.LI "\*Lcopy\*O"
Specifies the name of an existing locale to be used as the definition
of this category
.IP
If you include a \*Lcopy\*O statement, no other
keyword can be specified.
.\" .zZ "review, R1.1.2, XPG4"
.LI "\*Lupper\*O"
Defines uppercase letter characters
.IP
No character defined by the \*Lcntrl\*O, \*Ldigit\*O,
\*Lpunct\*O, or \*Lspace\*O keyword can be specified.  If \*Lupper\*O
is not defined, \*LA\*O through \*LZ\*O default to \*Lupper\*O.
.LI "\*Llower\*O"
Defines lowercase letter characters
.IP
No character defined by the \*Lcntrl\*O, \*Ldigit\*O,
\*Lpunct\*O, or \*Lspace\*O keyword can be specified.  If \*Llower\*O
is not defined, \*La\*O through \*Lz\*O default to \*Llower\*O.
.LI "\*Lalpha\*O"
Defines all letter characters
.IP
No character defined by the \*Lcntrl\*O, \*Ldigit\*O,
\*Lpunct\*O, or \*Lspace\*O keyword can be specified.
Characters defined by the \*Lupper\*O and \*Llower\*O
keywords are automatically included in this character class.
.LI "\*Ldigit\*O"
Defines numeric digit characters
.IP
Only the digits \*L0\*O, \*L1\*O,
\*L2\*O, \*L3\*O, \*L4\*O, \*L5\*O, \*L6\*O, \*L7\*O, \*L8\*O, and
\*L9\*O can be specified.  If \*Ldigit\*O is not defined, \*L0\*O
through \*L9\*O default to \*Ldigit\*O.
.LI "\*Lspace\*O"
Defines white-space characters
.IP
No character defined by the
\*Lupper\*O, \*Llower\*O, \*Lalpha\*O, \*Ldigit\*O,
\*Lgraph\*O, or \*Lxdigit\*O keyword can
be specified.  If \*Lspace\*O is not defined, the space, formfeed, newline,
carriage-return, tab, and vertical tab characters default to \*Lspace\*O.
.LI "\*Lcntrl\*O"
Defines control characters
.IP
No character defined by the
\*Lupper\*O, \*Llower\*O, \*Lalpha\*O, \*Ldigit\*O, \*Lpunct\*O,
\*Lgraph\*O, \*Lprint\*O, or \*Lxdigit\*O
keyword can be specified.
.LI "\*Lpunct\*O"
Defines punctuation characters
.IP
The
space character and characters defined by the \*Lupper\*O, \*Llower\*O,
\*Lalpha\*O, \*Ldigit\*O, \*Lcntrl\*O, or \*Lxdigit\*O
keywords cannot be specified.
.LI "\*Lgraph\*O"
Defines printable characters, excluding the space
character
.IP
If this keyword is not specified, characters defined by the
\*Lupper\*O, \*Llower\*O, \*Lalpha\*O, \*Ldigit\*O, \*Lxdigit\*O,
and \*Lpunct\*O keywords are
automatically included in this character class.   No character
defined by the \*Lcntrl\*O keyword can be specified.
.LI "\*Lprint\*O"
Defines printable characters, including the space character
.IP
If this keyword is not specified, the space character and
characters defined by the \*Lupper\*O, \*Llower\*O, \*Lalpha\*O,
\*Ldigit\*O, \*Lxdigit\*O, and \*Lpunct\*O keywords
are automatically included in this character
class.  No character defined by the \*Lcntrl\*O keyword can be specified.
.LI "\*Lxdigit\*O"
Defines hexadecimal digit characters
.IP
Only the digits \*L0\*O,
\*L1\*O, \*L2\*O, \*L3\*O, \*L4\*O, \*L5\*O, \*L6\*O, \*L7\*O,
\*L8\*O, and \*L9\*O can be specified.  Any character can be specified
for the hexadecimal values for \*L10\*O to \*L15\*O, however.  These
alternate hexadecimal digits are not used by standard conversion
routines when converting digit strings from hexadecimal to numeric
quantities.  If \*Lxdigit\*O is not defined, the
numbers \*L0\*O through \*L9\*O and the letters \*LA\*O through
\*LF\*O and \*La\*O through \*Lf\*O default to \*Lxdigit\*O.
.LI "\*Lblank\*O"
Defines blank characters
.IP
If this keyword is not specified,
the space and horizontal tab characters are included in
this character class.  Any characters defined by this statement
are automatically included in the \*Lspace\*O class.
.LI "\*Ltoupper\*O"
Defines the mapping of lowercase characters to uppercase
characters
.IP
Operands for this keyword consist of
comma-separated character pairs.  Each character pair is enclosed
in \*L()\*O (parentheses) and separated from the next pair by a
\*L;\*O  (semicolon).  The first character in each pair
is considered a lowercase character; the second character is
considered an uppercase character.  Only characters defined by the
\*Llower\*O and \*Lupper\*O keywords can be specified.  If
\*Ltoupper\*O is not defined, \*La\*O through \*Lz\*O is mapped to
\*LA\*O through \*LZ\*O by default.
.LI "\*Ltolower\*O"
Defines the mapping of uppercase characters to lowercase
characters
.IP
Operands for this keyword consist of
comma-separated character pairs.  Each character pair is
enclosed in \*L()\*O (parentheses) and separated
from the next pair by a \*L;\*O (semicolon).
The first character in each pair is considered an uppercase
character; the second character is considered a lowercase
character.  Only characters
defined by the \*Llower\*O and \*Lupper\*O keywords can be specified.
.IP
The \*Ltolower\*O keyword is optional.  If this keyword is not
specified, the mapping defaults to the reverse mapping of the \*Ltoupper\*O
keyword, if specified.  If the \*Ltoupper\*O and \*Ltolower\*O keywords are
both unspecified, the mapping for each defaults to that of the C locale.
.LE
.PP
Additional keywords can be provided to define new character
classifications.  For example:
.oS
charclass vowel
vowel        <a>;<e>;<i>;<o>;<u>;<y>
.oE
.if n .PP
The \*LLC_CTYPE\*O category does not support multicharacter elements.
For example, the German Eszet character is traditionally
classified as a lowercase letter.  There is no corresponding
uppercase letter; in proper capitalization of German text, the Eszet
character is replaced by the two characters \*LSS\*O.  This kind of
conversion is outside of the scope of the \*Ltoupper\*O and
\*Ltolower\*O keywords.
.PP
The following is an example of a possible \*LLC_CTYPE\*O category
listed in a locale definition source file:
.oS
LC_CTYPE
#"alpha" is by default "upper" and "lower"
#"alnum" is by definition "alpha" and "digit"
#"print" is by default "alnum", "punct" and the space character
#"graph" is by default "alnum" and "punct"
#"tolower" is by default the reverse mapping of "toupper"
#
upper   <A>;<B>;<C>;<D>;<E>;<F>;<G>;<H>;<I>;<J>;<K>;<L>;<M>;\e
        <N>;<O>;<P>;<Q>;<R>;<S>;<T>;<U>;<V>;<W>;<X>;<Y>;<Z>
#
lower   <a>;<b>;<c>;<d>;<e>;<f>;<g>;<h>;<i>;<j>;<k>;<l>;<m>;\e
        <n>;<o>;<p>;<q>;<r>;<s>;<t>;<u>;<v>;<w>;<x>;<y>;<z>
#
digit   <zero>;<one>;<two>;<three>;<four>;<five>;<six>;\e
        <seven>;<eight>;<nine>
#
space   <tab>;<newline>;<vertical-tab>;<form-feed>;\e
        <carriage-return>;<space>
#
cntrl   <alert>;<backspace>;<tab>;<newline>;<vertical-tab>;\e
        <form-feed>;<carriage-return>;<NUL>;<SOH>;<STX>;\e
        <ETX>;<EOT>;<ENQ>;<ACK>;<SO>;<SI>;<DLE>;<DC1>;<DC2>;\e
        <DC3>;<DC4>;<NAK>;<SYN>;<ETB>;<CAN>;<EM>;<SUB>;\e
        <ESC>;<IS4>;<IS3>;<IS2>;<IS1>;<DEL>
#
punct   <exclamation-mark>;<quotation-mark>;<number-sign>;\e
        <dollar-sign>;<percent-sign>;<ampersand>;<asterisk>;\e
        <apostrophe>;<left-parenthesis>;<right-parenthesis>;\e
        <plus-sign>;<comma>;<hyphen>;<period>;<slash>;\e
        <colon>;<semicolon>;<less-than-sign>;<equals-sign>;\e
        <greater-than-sign>;<question-mark>;<commercial-at>;\e
        <left-square-bracket>;<backslash>;<circumflex>;\e
        <right-square-bracket>;<underline>;<grave-accent>;\e
        <left-curly-bracket>;<vertical-line>;<tilde>;\e
        <right-curly-bracket>
#
xdigit  <zero>;<one>;<two>;<three>;<four>;<five>;<six>;\e
        <seven>;<eight>;<nine>;<A>;<B>;<C>;<D>;<E>;<F>;\e
        <a>;<b>;<c>;<d>;<e>;<f>
#
blank   <space>;<tab>
#
toupper (<a>,<A>);(<b>,<B>);(<c>,<C>);(<d>,<D>);(<e>,<E>);\e
        (<f>,<F>);(<g>,<G>);(<h>,<H>);(<i>,<I>);(<j>,<J>);\e
        (<k>,<K>);(<l>,<L>);(<m>,<M>);(<n>,<N>);(<o>,<O>);\e
        (<p>,<P>);(<q>,<Q>);(<r>,<R>);(<s>,<S>);(<t>,<T>);\e
        (<u>,<U>);(<v>,<V>);(<w>,<W>);(<x>,<X>);(<y>,<Y>);\e
        (<z>,<Z>)
#
END LC_CTYPE
.oE
.SS The LC_MESSAGES Category
.if n .PP
The \*LLC_MESSAGES\*O category of a locale definition source file
defines the format for affirmative and negative system responses.
This category begins with an \*LLC_MESSAGES\*O category header and
terminates with an \*LEND LC_MESSAGES\*O category trailer.
.PP
All operands for the \*LLC_MESSAGES\*O category are defined as strings
or extended regular expressions bounded by \*L" "\*O (double quotes).
These operands are separated from the keyword they define
by one or more blank characters (spaces or tabs).
Two adjacent \*L""\*O (double quotes)
indicate an undefined value.
.PP
The following keywords are
recognized in the \*LLC_MESSAGES\*O category:
.VL 4m
.\" .zA "review, R1.1.2, XPG4"
.LI "\*Lcopy\*O"
Specifies the name of an existing locale to be used as the definition
of this category
.IP
If you include a \*Lcopy\*O statement, you cannot
include other keywords.
.\" .zZ "review, R1.1.2, XPG4"
.LI "\*Lyesexpr\*O"
Specifies an extended regular expression that describes
the acceptable affirmative response to a question expecting an
affirmative or negative response
.LI "\*Lnoexpr\*O"
Specifies an extended regular expression that describes
the acceptable negative response to a question expecting an
affirmative or negative response
.\" .zA "defect,6936,R1.1.1,changed description of yesstr/nostr keywords"
.LI "\*Lyesstr\*O"
Specifies the locale's equivalent of an acceptable affirmative
response
.IP
This string is accessible to applications through the
\*Lnl_langinfo\*O subroutine as \*Lnl_langinfo\*O (\*LYESSTR\*O).
Note that \*Lyesstr\*O is likely to be withdrawn from the
XPG4 standard; \*Lyesexpr\*O is the recommended alternative.
.LI "\*Lnostr\*O"
Specifies the locale's equivalent of an acceptable negative response
.IP
This string is accessible to applications through the
\*Lnl_langinfo\*O subroutine as \*Lnl_langinfo\*O (\*LNOSTR\*O).
Note that \*Lnostr\*O is likely to be withdrawn from the
XPG4 standard; \*Lnoexpr\*O is the recommended alternative.
.\" .zA "defect,6936,R1.1.1,changed description of yesstr/nostr keywords"
.LE
.PP
The following is an example of a possible \*LLC_MESSAGES\*O category
listed in a locale definition source file:
.oS
LC_MESSAGES
#
yesexpr "<circumflex><left-square-bracket><y><Y>\e
<right-square-bracket>"
noexpr  "<circumflex><left-square-bracket><n><N>\e
<right-square-bracket>"
yesstr  "<y><e><s>"
nostr   "<n><o>"
#
END LC_MESSAGES
.oE
.SS The LC_MONETARY Category
.if n .PP
The \*LLC_MONETARY\*O category of a locale definition source file
defines rules and symbols for formatting monetary numeric
information.  This category begins with an \*LLC_MONETARY\*O category header
and terminates with an \*LEND LC_MONETARY\*O category trailer.
.PP
All operands for the \*LLC_MONETARY\*O category keywords are defined as
string or integer values.  String values are bounded by \*L" "\*O
(double quotes).  All values are separated from the keyword
they define by one or more blank characters (spaces or tabs).
Two adjacent \*L""\*O (double quotes)
indicate an undefined string value.  A \*L-1\*O (negative one)
indicates an undefined integer value.
.PP
The following keywords are
recognized in the \*LLC_MONETARY\*O category:
.VL 4m
.\" .zA "review, R1.1.2, XPG4"
.LI "\*Lcopy\*O"
Specifies the name of an existing locale to be used as the definition
of this category
.IP
If you include a \*Lcopy\*O statement, no other
keyword will be specified.
.\" .zZ "review, R1.1.2, XPG4"
.LI "\*Lint_curr_symbol\*O"
Specifies the string used for the international
currency symbol
.IP
The operand for the \*Lint_curr_symbol\*O keyword is
a 4-character string.  The first three characters contain the
alphabetic international currency  symbol.  The fourth character
specifies a character separator between the international
currency symbol and a monetary quantity.
.LI "\*Lcurrency_symbol\*O"
Specifies the string used for the local currency
symbol.
.LI "\*Lmon_decimal_point\*O"
Specifies the string used for the
decimal delimiter that is used to format monetary quantities
.LI "\*Lmon_thousands_sep\*O"
Specifies the character separator used for
grouping digits to the left of the decimal delimiter in formatted
monetary quantities
.LI "\*Lmon_grouping\*O"
Specifies a string that defines the size of each
group of digits in formatted monetary quantities
.IP
The operand
for the \*Lmon_grouping\*O keyword consists of a sequence of
semicolon-separated integers.  Each integer specifies the number of digits
in a group.  The initial integer defines the size of the group
immediately  to the left of the decimal delimiter.  The subsequent
integers define succeeding groups to the left of the previous
group.  If the last integer is not \*L\-1\*O, grouping for any remaining
digits is
performed using that that integer.   If the last integer is \*L\-1\*O,
no further grouping is performed.
.IP
The following is an example of the interpretation of the
\*Lmon_grouping\*O statement.  Assuming the value to be
formatted is \*L123456789\*O and the operand for the \*Lmon_thousands_sep\*O
keyword is \*L'\*O (single quotation mark), the following results occur:
.VL 15m
.LI "\f(HBmon_grouping\fP"
\f(HBFormatted Value\fP
.LI "\*L3;-1\*O"
\*L123456'789\*O
.LI "\*L3\*O"
\*L123'456'789\*O
.LI "\*L3;2;-1\*O"
\*L1234'56'789\*O
.LI "\*L3;2\*O"
\*L12'34'56'789\*O
.LE
.LI "\*Lpositive_sign\*O"
Specifies the string used to indicate a
nonnegative-valued formatted monetary quantity
.LI "\*Lnegative_sign\*O"
Specifies the string used to indicate a negative-valued
formatted monetary quantity
.LI "\*Lint_frac_digits\*O"
Specifies an integer value representing the
number of fractional digits (those after the decimal delimiter)
to be displayed in a formatted monetary quantity using the
\*Lint_curr_symbol\*O value
.LI "\*Lfrac_digits\*O"
Specifies an integer value representing the number of
fractional digits (those after the decimal delimiter) to be
displayed in a formatted monetary quantity using the
\*Lcurrency_symbol\*O value
.LI "\*Lp_cs_precedes\*O"
Specifies an integer value indicating whether the
\*Lint_curr_symbol\*O or \*Lcurrency_symbol\*O string precedes
or follows the value for a nonnegative-formatted monetary
quantity
.IP
The following integer values are recognized:
.VL 4m
.LI "\*L0\*O"
Indicates that the currency symbol follows the monetary quantity
.LI "\*L1\*O"
Indicates that the currency symbol precedes the monetary quantity
.LE
.LI "\*Lp_sep_by_space\*O"
Specifies an integer value indicating whether the
\*Lint_curr_symbol\*O or \*Lcurrency_symbol\*O string is separated by
a space from a nonnegative-formatted monetary quantity
.IP
The
following integer values are recognized:
.VL 4m
.LI "\*L0\*O"
Indicates that no space separates the currency symbol from the
monetary quantity
.LI "\*L1\*O"
Indicates that a space separates the currency symbol from the
monetary quantity
.LI "\*L2\*O"
Indicates that a space separates the currency symbol and the
\*Lpositive_sign\*O string, if adjacent
.LE
.LI "\*Ln_cs_precedes\*O"
Specifies an integer value indicating whether the
\*Lint_curr_symbol\*O or \*Lcurrency_symbol\*O string precedes
or follows the value for a negative-formatted monetary
quantity
.IP
The following integer values are recognized:
.VL 4m
.LI "\*L0\*O"
Indicates that the currency symbol follows the monetary quantity
.LI "\*L1\*O"
Indicates that the currency symbol precedes the monetary quantity
.LE
.LI "\*Ln_sep_by_space\*O"
Specifies an integer value indicating whether the
\*Lint_curr_symbol\*O or \*Lcurrency_symbol\*O string is separated by
a space from a negative-formatted monetary quantity
.IP
The
following integer values are recognized:
.VL 4m
.LI "\*L0\*O"
Indicates that no space separates the currency symbol from the
monetary quantity
.LI "\*L1\*O"
Indicates that a space separates the currency symbol from the
monetary quantity
.LI "\*L2\*O"
Indicates that a space separates the currency symbol and the
\*Lnegative_sign\*O string, if adjacent
.LE
.LI "\*Lp_sign_posn\*O"
Specifies an integer value indicating the positioning
of the \*Lpositive_sign\*O string for a nonnegative-formatted monetary
quantity
.IP
The following integer values are recognized:
.VL 4m
.LI "\*L0\*O"
Indicates that a \*Lleft_parenthesis\*O and \*Lright_parenthesis\*O symbol
enclose both the monetary quantity and the \*Lint_curr_symbol\*O or
\*Lcurrency_symbol\*O string
.LI "\*L1\*O"
Indicates that the \*Lpositive_sign\*O string precedes the quantity
and the \*Lint_curr_symbol\*O or \*Lcurrency_symbol\*O string
.LI "\*L2\*O"
Indicates that the \*Lpositive_sign\*O string follows the quantity
and the \*Lint_curr_symbol\*O or \*Lcurrency_symbol\*O string
.LI "\*L3\*O"
Indicates that the \*Lpositive_sign\*O string immediately precedes
the \*Lint_curr_symbol\*O or \*Lcurrency_symbol\*O string
.LI "\*L4\*O"
Indicates that the \*Lpositive_sign\*O string immediately follows the
\*Lint_curr_symbol\*O or \*Lcurrency_symbol\*O string
.LE
.LI "\*Ln_sign_posn\*O"
Specifies an integer value indicating the positioning
of the \*Lnegative_sign\*O string for a negative-formatted monetary
quantity
.IP
The following integer values are recognized:
.VL 4m
.LI "\*L0\*O"
Indicates that a \*Lleft_parenthesis\*O and \*Lright_parenthesis\*O symbol
enclose both the monetary quantity and the
\*Lint_curr_symbol\*O or \*Lcurrency_symbol\*O string
.LI "\*L1\*O"
Indicates that the \*Lnegative_sign\*O string precedes the quantity
and the \*Lint_curr_symbol\*O or \*Lcurrency_symbol\*O string
.LI "\*L2\*O"
Indicates that the \*Lnegative_sign\*O string follows the quantity
and the \*Lint_curr_symbol\*O or \*Lcurrency_symbol\*O string
.LI "\*L3\*O"
Indicates that the \*Lnegative_sign\*O string immediately precedes
the \*Lint_curr_symbol\*O or \*Lcurrency_symbol\*O string
.LI "\*L4\*O"
Indicates that the \*Lnegative_sign\*O string immediately follows the
\*Lint_curr_symbol\*O or \*Lcurrency_symbol\*O string
.LE
.LI "\*Ldebit_sign\*O"
Specifies the string used for the debit symbol (\*LDB\*O) to
indicate a negative-formatted monetary quantity
.IP
The \*Ldebit_sign\*O keyword is an extension to the
\*EX/Open Portability Guide\*O and may not be portable to
all systems that conform to that standard.
.LI "\*Lcredit_sign\*O"
Specifies the string used for the credit symbol (\*LCR\*O)
to indicate a nonnegative-formatted monetary quantity
The \*Lcredit_sign\*O keyword is an extension to the
\*EX/Open Portability Guide\*O and may not be portable to
all systems that conform to that standard.
.LI "\*Lleft_parenthesis\*O"
Specifies the character, equivalent to a \*L(\*O (left parenthesis),
used by the \*Lp_sign_posn\*O and \*Ln_sign_posn\*O statements
to enclose a monetary quantity and currency symbol
.IP
The \*Lleft_parenthesis\*O keyword is an extension to the
\*EX/Open Portability Guide\*O and may not be portable to
all systems that conform to that standard.
.LI "\*Lright_parenthesis\*O"
Specifies the character, equivalent to a \*L)\*O
(right parenthesis), used by the \*Lp_sign_posn\*O and \*Ln_sign_posn\*O
statements to enclose a monetary quantity and currency symbol
.IP
The \*Lright_parenthesis\*O keyword is an extension to the
\*EX/Open Portability Guide\*O and may not be portable to
all systems that conform to that standard.
.LE
.PP
A unique customized monetary format can be produced by changing
the value of a single statement.  For example, the following
table shows the results of using all combinations of defined
values for the \*Lp_cs_precedes\*O, \*Lp_sep_by_space\*O, and
\*Lp_sign_posn\*O statements:
.PP
.TS
tab(@);
lp-2w(1i) lp-2w(1i) lp-2w(.50i) lp-2w(.50i) lp-2w(.50i).
_
.sp 0.4p
@\*Lp_sep_by_space =\*O@\*L2\*O@\*L1\*O@\*L0\*O
.sp 0.4p
_
.sp 0.4p
\*Lp_cs_precedes = 1\*O@\*Lp_sign_posn = 0\*O@($1.25)@($ 1.25)@($1.25)
@\*Lp_sign_posn = 1\*O@+ $1.25@+$ 1.25@+$1.25
@\*Lp_sign_posn = 2\*O@$1.25 +@$ 1.25+@$1.25+
@\*Lp_sign_posn = 3\*O@+ $1.25@+$ 1.25@+$1.25
@\*Lp_sign_posn = 4\*O@$ +1.25@$+ 1.25@$+1.25
\*Lp_cs_precedes = 0\*O@\*Lp_sign_posn = 0\*O@(1.25 $)@(1.25 $)@(1.25$)
@\*Lp_sign_posn = 1\*O@+1.25 $@+1.25 $@+1.25$
@\*Lp_sign_posn = 2\*O@1.25$ +@1.25 $+@1.25$+
@\*Lp_sign_posn = 3\*O@1.25+ $@1.25 +$@1.25+$
@\*Lp_sign_posn = 4\*O@1.25$ +@1.25 $+@1.25$+
.sp 0.4p
_
.TE
.PP
The following is an example of a possible \*LLC_MONETARY\*O category
in a locale definition source file:
.oS
LC_MONETARY
#
int_curr_symbol         "<U><S><D>"
currency_symbol         "<dollar-sign>"
mon_decimal_point       "<period>"
mon_thousands_sep       "<comma>"
mon_grouping            <3>
positive_sign           "<plus-sign>"
negative_sign           "<hyphen>"
int_frac_digits         <2>
frac_digits             <2>
p_cs_precedes           <1>
p_sep_by_space          <2>
n_cs_precedes           <1>
n_sep_by_space          <2>
p_sign_posn             <3>
n_sign_posn             <3>
debit_sign              "<D><B>"
credit_sign             "<C><R>"
left_parenthesis        "<left-parenthesis>"
right_parenthesis       "<right-parenthesis>"
#
END LC_MONETARY
.oE
.SS The LC_NUMERIC Category
.if n .PP
The \*LLC_NUMERIC\*O category of a locale definition source file
defines rules and symbols for formatting nonmonetary numeric
information.  This category begins with an \*LLC_NUMERIC\*O category
header and terminates with an \*LEND LC_NUMERIC\*O category trailer.
.PP
All operands for the \*LLC_NUMERIC\*O category keywords are defined as
string or integer values.  String values are bounded by \*L" "\*O
(double quotes).  All values are separated  from the keyword
they define by one or more blank characters (spaces or tabs).
Two adjacent double quote characters (\*L""\*O)
indicate an undefined string value.  A \*L-1\*O (negative one)
indicates an undefined integer value.
.PP
The following keywords are
recognized in the \*LLC_NUMERIC\*O category:
.VL 4m
.\" .zA "review, R1.1.2, XPG4"
.LI "\*Lcopy\*O"
Specifies the name of an existing locale to be used as the definition
of this category
.IP
If you include a \*Lcopy\*O statement, no other
keyword will be specified.
.\" .zZ "review, R1.1.2, XPG4"
.LI "\*Ldecimal_point\*O"
Specifies the decimal delimiter string used to
format nonmonetary numeric quantities
.IP
This keyword cannot be omitted
and cannot be set to the undefined string value.
.LI "\*Lthousands_sep\*O"
Specifies the string separator used for grouping
digits to the left of the decimal delimiter in formatted
nonmonetary numeric quantities
.LI "\*Lgrouping\*O"
Defines the size of each group of digits in formatted
monetary quantities
.IP
The operand for the grouping keyword
consists of a sequence of semicolon-separated integers.  Each
integer specifies the number of digits in a group.  The initial
integer defines the size of the group immediately to the left of
the decimal delimiter.  The subsequent integers define succeeding
groups to the left of the previous group.  Grouping is performed
for each integer specified for the grouping keyword.  If the
last integer is not -1, the size of the last
integer is repeatedly used to group any remaining digits.  If the last integer
is -1, no more grouping is performed.
.LE
.PP
The following is an example of the interpretation of the \*Lgrouping\*O
statement.  Assuming the value to be formatted is \*L123456789\*O and
the operand for the \*Lthousands_sep\*O keyword is \*L'\*O
(single quote), the following results occur:
.VL 15m
.LI "\f(HBgrouping\fP"
\f(HBFormatted Value\fP
.LI "3;-1"
\*L123456'789\*O
.LI "3"
\*L123'456'789\*O
.LI "3;2;-1"
\*L1234'56'789\*O
.LI "3;2"
\*L12'34'56'789\*O
.LE
.PP
The following is an example of a possible \*LLC_NUMERIC\*O category
listed in a locale definition source file:
.oS
LC_NUMERIC
#
decimal_point   "<period>"
thousands_sep   "<comma>"
grouping        <3>
#
END LC_NUMERIC
.oE
.SS The LC_TIME Category
.if n .PP
The \*LLC_TIME\*O category of a locale definition source file defines
rules and symbols for formatting time and date information.  This
category begins with an \*LLC_TIME\*O category header and terminates
with an \*LEND LC_TIME\*O category trailer.
.PP
All operands for the \*LLC_TIME\*O category keywords are defined as
string or integer values.  String values are bounded by \*L" "\*O
(double quotes).  All values are separated from the keyword
they define by one or more blank characters (spaces or tabs).
Two adjacent double quote characters (\*L""\*O)
indicate an undefined string value.  Field descriptors are
used by commands and subroutines that query the \*LLC_TIME\*O category
to represent elements of time and date formats.  The field descriptors
used by commands and subroutines that query the \*LLC_TIME\*O
category for time formatting are described in this section, immediately
following the descriptions of valid keywords.
.PP
The following keywords are recognized in the \*LLC_TIME\*O category:
.VL 4m
.\" .zA "review, R1.1.2, XPG4"
.LI "\*Lcopy\*O"
Specifies the name of an existing locale to be used as the definition
of this category
.IP
If you include a \*Lcopy\*O statement, no other
keyword will be specified.
.\" .zZ "review, R1.1.2, XPG4"
.LI "\*Labday\*O"
Defines the abbreviated weekday names corresponding to the
\*L%a\*O field descriptor
.IP
Recognized values consist
of 7 semicolon-separated strings.  The first string
corresponds to the abbreviated name for the first day of the week
(\*LSun\*O), the second to the abbreviated name for the second day of
the week, and so on.
.LI "\*Lday\*O"
Defines the full spelling of the weekday names corresponding
to the \*L%A\*O field descriptor
.IP
Recognized values consist of 7
semicolon-separated strings.  The first string corresponds to the
full spelling of the name of the first day of the week (\*LSunday\*O),
the second to the name of the second day of the week, and so on.
.LI "\*Labmon\*O"
Defines the abbreviated month names corresponding to the \*L%b\*O
field descriptor
.IP
Recognized values consist of 12
semicolon-separated strings.  The first string corresponds to the
abbreviated name for the first month of the year (\*LJan\*O), the
second to the abbreviated name for the second month of the year, and so on.
.LI "\*Lmon\*O"
Defines the full spelling of the month names corresponding to
the \*L%B\*O field descriptor
.IP
Recognized values consist of
12 semicolon-separated strings.  The first string corresponds to the
full spelling  of the name for the first month of the year
(\*LJanuary\*O), the second to the full spelling of the name for the second
month of the year, and so on.
.LI "\*Ld_t_fmt\*O"
Defines the string used for the standard date-and-time
format corresponding to the \*L%c\*O field descriptor
.IP
The string can
contain any combination of characters and field descriptors.
.LI "\*Ld_fmt\*O"
Defines the string used for the standard date format
corresponding to the \*L%x\*O field descriptor
.IP
The string can contain
any combination of characters and field descriptors.
.LI "\*Lt_fmt\*O"
Defines the string used for the standard time format
corresponding to the \*L%X\*O field descriptor
.IP
The string can contain
any combination of characters and field descriptors.
.LI "\*Lam_pm\*O"
Defines the strings used to represent a.m. (before
noon) and p.m. (after noon) corresponding to the \*L%p\*O
field descriptor
.IP
Recognized values consist of two
semicolon-separated strings.  The first string corresponds to the a.m.
designation, the last string to the p.m. designation.
.LI "\*Lt_fmt_ampm\*O"
Defines the string used for the standard 12-hour time
format that includes an \*Lam_pm\*O value (\*L%p\*O field
descriptor)
.IP
This statement corresponds to the \*L%r\*O
field descriptor.  The string can
contain any combination of characters and field descriptors.
If the string is empty, the 12-hour format is not supported by
the locale.
.LI "\*Lera\*O"
Defines how the years are counted and displayed for each era
in a locale, corresponding to the \*L%E\*O field
descriptor modifier
.IP
For each era, there must be one string in
the following format:
.if n .IP
.oS
\*Vdirection\*L:\*Voffset\*L:\*Vstart_date\*L:\*Vend_date\*L:\*Vname\*L:\*Vformat\*O
.oE
.if n .IP
The variables for the era string format are defined as follows:
.VL 4m
.LI "\*Vdirection\*O"
Specifies a \*L-\*O (minus) or \*L+\*O (plus) character
.IP
The \*L-\*O
character indicates that years count in the negative direction when
moving from the start date to the end date.
The \*L+\*O
character indicates that years count in the positive direction
when moving from the start date to the end date.
.LI "\*Voffset\*O"
Specifies a number representing the first year of the era
.LI "\*Vstart_date\*O"
Specifies the starting date of the era in \*Vyyyy/mm/dd\*O
format, where \*Vyyyy\*O, \*Vmm\*O, and \*Vdd\*O are the year, month, and day,
respectively, on the Gregorian calendar
.IP
Years prior to the year
AD 1 are represented as negative numbers.  For example,
an era beginning March 5th in the
year 100 BC would be represented as \*L-100/03/05\*O.
.LI "\*Vend_date\*O"
Specifies the ending date of the era in the same form
used for the \*Vstart_date\*O
variable or one of the two special values \*L-*\*O or \*L+*\*O.
A \*L-*\*O value indicates that the ending date of the era
extends backward to the beginning of time
.IP
A \*L+*\*O value indicates
that the ending date of the era extends forward to the end of
time.  Therefore, the ending date can be chronologically before
or after the starting date of the era.  For example, the strings
for the Christian eras AD and BC would be entered as follows:
.if n .IP
.oS
+:0:0000/01/01:+*:AD:%o %N
+:1:-0001/12/31:-*:BC:%o %N
.oE
.if n .IP
.LI "\*Vname\*O"
Specifies a string representing the name of the era that is
substituted for the \*L%N\*O field descriptor
.LI "\*Vformat\*O"
Specifies a \*Lstrftime(\|)\*O format string to use when
formatting the \*L%EY\*O field descriptor
.IP
This string can contain any \*Lstrftime(\|)\*O format control
characters (except \*L%EY\*O) and locale-dependent multibyte
characters.
.LE
.IP
An era value consists of one string (enclosed in quotes)
for each era.  If more than
one era is specified, each era string is separated by a \*L;\*O (semicolon).
.LI "\*Lera_year\*O"
Defines the string used to represent the year in
alternate-era format corresponding to the \*L%Ey\*O field descriptor
.IP
The string can contain any combination of characters and field descriptors.
.LI "\*Lera_d_fmt\*O"
Defines the string used to represent the date in
alternate-era format corresponding to the \*L%Ex\*O field descriptor
.IP
The
string can contain any combination of characters and field descriptors.
.\" .zA "review, R1.1.2, XPG4"
.LI "\*Lera_t_fmt\*O"
Defines the locale's alternative time format, as represented by the
\*L%EX\*O field descriptor for \*Lstrftime(\|)\*O
.LI "\*Lera_d_t_fmt\*O"
Defines the locale's alternative date-and-time format, as represented
by the \*L%Ec\*O field descriptor for \*Lstrftime(\|)\*O
.\" .zZ "review, R1.1.2, XPG4"
.LI "\*Lalt_digits\*O"
Defines alternate strings for digits corresponding to
the \*L%O\*O field descriptor
.IP
Recognized values consist of a group of
semicolon-separated strings.  The first string represents the
alternate string for 0 (zero), the second string represents the
alternate string for 1, and so on.  A maximum of 100 alternate
strings can be specified.
.LI "\*Lm_d_recent\*O"
Defines the string used to print out the month/date/time format
for some commands (\*Lls\*O, \*Lfind\*O, \*Lwho\*O, \*Lar\*O)
.IP
This format corresponds to the \*L"%b %e %H:%M"\*O format
for the POSIX locale.  (Optional)
This format is an extension to the \*EX/Open Portability Guide\*O
and may not be supported on all systems that conform to that
standard.
.LI "\*Lm_d_old\*O"
Defines the string used to print out the month/date/year format
for some commands (\*Lls\*O, \*Lfind\*O, \*Lwho\*O, \*Lar\*O)
.IP
This format corresponds to the \*L"%b %e %Y"\*O format
for the POSIX locale.  (Optional)
This format is an extension to the \*EX/Open Portability Guide\*O
and may not be supported on all systems that conform to that
standard.
.LE
.PP
The \*LLC_TIME\*O locale definition source file uses field descriptors
to represent elements of time and date formats.  Combinations of
these field descriptors create other field descriptors  or create
time and date format strings.  When used in format strings
that contain field descriptors and other characters, field descriptors
are replaced by their current values.  All other characters are
copied without change.  The  following field descriptors are used
by commands and subroutines that query the \*LLC_TIME\*O category for
time formatting:
.VL 4m
.LI "\*L%a\*O"
Represents the abbreviated weekday name (for example, \*LSun\*O)
defined by the \*Labday\*O statement
.LI "\*L%A\*O"
Represents the full weekday name (for example, \*LSunday\*O) defined
by the \*Lday\*O statement
.LI "\*L%b\*O"
Represents the abbreviated month name (for example, \*LJan\*O)
defined by the \*Labmon\*O statement
.LI "\*L%B\*O"
Represents the full month name (for example, \*LJanuary\*O) defined
by the \*Lmonth\*O statement
.LI "\*L%c\*O"
Represents the date-and-time format defined by the \*Ld_t_fmt\*O
statement
.LI "\*L%C\*O"
Represents the century as a decimal number (\*L00\*O to \*L99\*O)
.LI "\*L%d\*O"
Represents the day of the month as a decimal number (\*L01\*O to \*L31\*O)
.LI "\*L%D\*O"
Represents the date in \*L%m/%d/%y\*O format (for example, \*L01/31/91\*O)
.LI "\*L%e\*O"
Represents the day of the month as a decimal number (\*L1\*O to \*L31\*O)
.IP
The \*L%e\*O field descriptor uses a 2-digit field.  If the day of
the month is not a 2-digit number, the leading digit is filled
with a space character.
.LI "\*L%Ec\*O"
Specifies the locale's alternate appropriate date-and-time representation
.LI "\*L%EC\*O"
Specifies the name of the base year (period) in the locale's
alternate representation
.LI "\*L%Ex\*O"
Specifies the locale's alternate date representation
.LI "\*L%Ey\*O"
Specifies the offset from \*L%EC\*O (year only) in the locale's
alternate representation
.LI "\*L%EY\*O"
Specifies the full alternate year representation
.LI "\*L%h\*O"
Represents the abbreviated month name (for example, \*LJan\*O)
defined by the \*Labmon\*O statement
.IP
This field descriptor is a synonym for the \*L%b\*O field descriptor
.br
.ne 9P
.LI "\*L%H\*O"
Represents the 24-hour clock hour as a decimal number (\*L00\*O to \*L23\*O)
.LI "\*L%I\*O"
Represents the 12-hour clock hour as a decimal number (\*L01\*O to \*L12\*O)
.LI "\*L%j\*O"
Represents the day of the year as a decimal number (\*L001\*O to \*L366\*O)
.LI "\*L%m\*O"
Represents the month of the year as a decimal number (\*L01\*O to \*L12\*O)
.LI "\*L%M\*O"
Represents the minutes of the hour as a decimal number (\*L00\*O to \*L59\*O)
.LI "\*L%n\*O"
Specifies a newline character
.LI "\*L%N\*O"
Represents the alternate era name
.LI "\*L%o\*O"
Represents the alternate era year
.LI "\*L%Od\*O"
Specifies the day of the month by using the locale's alternate numeric symbols
.LI "\*L%Oe\*O"
Specifies the day of the month by using the locale's alternate numeric symbols
.LI "\*L%OH\*O"
Specifies the hour (24-hour clock) by using the locale's alternate
numeric symbols
.LI "\*L%OI\*O"
Specifies the hour (12-hour clock) by using the locale's alternate
numeric symbols
.LI "\*L%Om\*O"
Specifies the month by using the locale's alternate numeric symbols
.LI "\*L%OM\*O"
Specifies the minutes by using the locale's alternate numeric symbols
.LI "\*L%OS\*O"
Specifies the seconds by using the locale's alternate numeric symbols
.LI "\*L%OU\*O"
Specifies the week number of the year (Sunday as the first day
of the week) by using the locale's alternate numeric symbols
.LI "\*L%Ow\*O"
Specifies the weekday as a number in the locale's alternate
representation (Sunday = 0)
.LI "\*L%OW\*O"
Specifies the week number of the year (Monday as the first day of
the week) by using the locale's alternate numeric symbols
.LI "\*L%Oy\*O"
Specifies the year (offset from \*L%C\*O) in alternate representation
.LI "\*L%p\*O"
Represents the a.m. or p.m. string defined by the \*Lam_pm\*O statement
.LI "\*L%r\*O"
Represents the 12-hour clock time with a.m./p.m. notation as
defined by the \*Lt_fmt_ampm\*O statement
.LI "\*L%S\*O"
Represents the seconds of the minute as a decimal number
(\*L00\*O to \*L59\*O)
.LI "\*L%t\*O"
Specifies a tab character
.LI "\*L%T\*O"
Represents 24-hour clock time in the format \*L%H:%M:%S\*O
(for example, \*L16:55:15\*O)
.LI "\*L%U\*O"
Represents the week of the year as a decimal number (\*L00\*O to
\*L53\*O)
.IP
Sunday, or its equivalent as defined by the \*Lday\*O statement,
is considered the first day of the week for calculating the value
of this field descriptor.
.LI "\*L%w\*O"
Represents the day of the week as a decimal number (\*L0\*O to \*L6\*O)
.IP
Sunday, or its equivalent as defined by the \*Lday\*O statement, is
considered as \*L0\*O (zero) for calculating the value of this field descriptor.
.LI "\*L%W\*O"
Represents the week of the year as a decimal number (\*L00\*O to
\*L53\*O)
.IP
Monday, or its equivalent as defined by the \*Lday\*O statement,
is considered the first day of the week for calculating the value
of this field descriptor.
.LI "\*L%x\*O"
Represents the date format defined by the \*Ld_fmt\*O statement
.LI "\*L%X\*O"
Represents the time format defined by the \*Lt_fmt\*O statement
.LI "\*L%y\*O"
Represents the year of the century (\*L00\*O to \*L99\*O)
.br
.ne 9P
.LI "\*L%Y\*O"
Represents the year as a decimal number (for example, \*L1989\*O)
.LI "\*L%Z\*O"
Represents the time zone name, if one can be determined (for
example, \*LEST\*O)
.IP
No characters are displayed if a time zone cannot
be determined.
.LI "\*L%\&%\&\*O"
Specifies a \*L%\*O (percent sign) character
.LE
.PP
The following is an example of a possible \*LLC_TIME\*O category listed
in a locale definition source file:
.oS
LC_TIME
#
#Abbreviated weekday names (%a)
abday   "<S><u><n>";"<M><o><n>";"<T><u><e>";"<W><e><d>";\e
        "<T><h><u>";"<F><r><i>";"<S><a><t>"

#Full weekday names (%A)
day     "<S><u><n><d><a><y>";"<M><o><n><d><a><y>";\e
        "<T><u><e><s><d><a><y>";"<W><e><d><n><e><s><d><a><y>";\e
        <T><h><u><r><s><d><a><y>";"<F><r><i><d><a><y>";\e
        <S><a><t><u><r><d><a><y>"

#Abbreviated month names (%b)
abmon   "<J><a><n>";"<F><e><b>";"<M><a><r>";"<A><p><r>";\e
        "<M><a><y>";"<J><u><n>";"<J><u><l>";"<A><u><g>";\e
        <S><e><p>";"<O><c><t>";"<N><o><v>";"<D><e><c>"

#Full month names (%B)
mon     "<J><a><n><u><a><r><y>";"<F><e><b><r><u><a><r><y>";\e
        "<M><a><r><c><h>";"<A><p><r><i><l>";"<M><a><y>";\e
        <J><u><n><e>";"<J><u><l><y>";"<A><u><g><u><s><t>";\e
        "<S><e><p><t><e><m><b><e><r>";"<O><c><t><o><b><e><r>";\e
        <N><o><v><e><m><b><e><r>";"<D><e><c><e><m><b><e><r>"

#Date-and-time format (%c)
#Note that for improved readability, this section uses actual
#characters, rather than symbolic names, and is inconsistent with
#the other sections in this example.  This is bad form.
#In practice, symbolic names should be used.
d_t_fmt         "%a %b %d %H:%M:%S %Y"
#
#Date format (%x)
d_fmt           "%m/%d/%y"
#
#Time format (%X)
t_fmt           "%H:%M:%S"
#
#Equivalent of AM/PM (%p)
am_pm           "<A><M>";"<P><M>"
#
#12-hour time format (%r)
#Note that for improved readability, this section uses actual
#characters, rather than symbolic names, and is inconsistent with
#the other sections in this example.  This is bad form.
#In practice, symbolic names should be used.
t_fmt_ampm      "%I:%M:%S %p"
#
era             "+:0:0000/01/01:+*:AD:%o %N";\e
                "+:1:-0001/12/31:-*:BC:%o %N"
  era_year      ""
  era_d_fmt     ""
  alt_digits    "<0><t><h>";"<1><s><t>";"<2><n><d>";"<3><r><d>";\e
                "<4><t><h>";"<5><t><h>";"<6><t><h>";"<7><t><h>";\e
                "<8><t><h>";"<9><t><h>";"<1><0><t><h>"
#
END LC_TIME
.oE
.SH FILES
.PP
.VL 11m
.LI "\*L/usr/lib/nls/loc/src/*\*O"
Locale definition source files for supported locales.
.LI "\*L/usr/lib/nls/loc/charmap/*\*O"
Character set description (\*Lcharmap\*O) source
files for supported locales.
.LI "\*L/usr/lib/nls/loc/*\*O"
Locale binary files.
.IP
By default, the \*Lsetlocale(\|)\*O
routine searches for
locales in the \*L/usr/lib/nls/loc\*O directory.
The value of the \*LLOCPATH\*O variable, if set, overrides this
search path.  Note that the \*LLOCPATH\*O variable is an
extension to the XPG4 standard and may not be supported on all
systems that conform to that standard.
.LE
.PP
The \*L/usr/lib/nls/loc/src\*O and \*L/usr/lib/nls/loc/charmap\*O
directories do not exist when source files are not provided for
installed locales.
.SH RELATED INFORMATION
.PP
Commands: \*Llocale\*O(1), \*Llocaledef\*O(1).
.PP
Files: \*Lcharmap\*O(4).
.EQ
delim off
.EN

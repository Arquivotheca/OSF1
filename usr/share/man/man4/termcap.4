.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: termcap.4,v $ $Revision: 3.4.6.3 $ (DEC) $Date: 1994/01/19 23:17:58 $
.\" 
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\" .tr ||
.\" .tr *\(**
.\" .hw trans-parently
.TH termcap 4
.SH NAME
.PP
\*Ltermcap\*O \- Terminal capability database
.SH SYNOPSIS
.PP
\*L/usr/share/lib/termcap\*O
.SH DESCRIPTION
.PP
.iX "termcap"
.iX "terminals" "capability database"
The \*Ltermcap\*O file is a database describing terminals used
by \*Ltset\*O and BSD \*Lcurses\*O.  Terminals are described in the
\*Ltermcap\*O database
by specifying a set of capabilities that they have and by describing
how operations are performed.
Padding requirements and initialization sequences are also included.
.PP
Entries in the \*Ltermcap\*O database
consist of a number of colon-separated fields.
The first entry for each terminal includes all the names that are used for that
terminal, separated by vertical bars (|).
The first name is always two characters
long and is used by older systems which store the terminal type
in a 16-bit word in a system-wide database.
The second name is the most common abbreviation for the terminal.
The last name should be a long name, fully identifying the terminal.
Between the second and last names, include any synonyms commonly used
to refer to that terminal.  All names but the first and last
should be in lower case and contain no spaces;
the last name can contain uppercase letters and spaces for readability.
.PP
Terminal names (except for the last verbose entry)
should be chosen using certain conventions.
The particular piece of hardware making up the terminal
should have a root name chosen, such as \*Lvt100\*O.
This name should not contain hyphens.  Any hardware modes or user preferences
should be indicated by appending a hyphen and an indicator of the mode.
Therefore, a \*Lvt100\*O in 132-column mode would be \*Lvt100-w\*O.
The following suffixes should be used where possible:
.sp
.ev
.ta
.ta \w'\f3Suffix\fP\ \ \ 'u +\w'With automatic margins (usually default)\ \ 'u
.nf
.if t \{\
.nr Xx \n(.lu-\n(.i-\w'\f3Suffix\fP\ \ \ With automatic margins (usually default)\ \ vt100-am'u
.in +\n(Xxu/2u
.\}
\f3Suffix	Meaning	Example\fP
-w	Wide mode (more than 80 columns)	vt100-w
-am	With automatic margins (usually default)	vt100-am
-nam	Without automatic margins	vt100-nam
-\f2n\fP	Number of lines on the screen	aaa-60
-na	No arrow keys (leave them in local)	concept100-na
-\f2n\^\fPp	Number of pages of memory	concept100-4p
-rv	Reverse video	concept100-rv
.fi
.ev
.SS "Capabilities"
The characters in the \*LNotes\*O field in the table have the
following meanings (more than one may apply to a capability):
.VL
.LI "N"
indicates numeric parameter(s)
.LI "P"
indicates that padding may be specified
.LI "*"
indicates that padding may be based on the number of lines affected
.LI "o"
indicates capability is obsolete
.LE
.PP
Capabilities marked as \*Lobsolete\*O have no \*Lterminfo\*O equivalents
since they were considered useless, or are subsumed by other capabilities.
New software should not rely on them at all.
.PP
.TS
tab(@);
lfHB lfHB lfHB lfHB
l l l lw(3.25i).
Name@Type@Notes@Description
.sp
_
ae@str@(P)@End alternate character set
AL@str@(NP*)@Add \*En\*O new blank lines
al@str@(P*)@Add new blank line
am@@bool@Terminal has automatic margins
as@str@(P)@Start alternate character set
bc@str@(o)@Backspace if not \f3^H\fP
bl@str@(P)@Audible signal (bell)
bs@bool@(o)@Terminal can backspace with \f3^H\fP
bt@str@(P)@Back tab
bw@bool@@T{
\f3le\fP (backspace) wraps from column 0 to last column
T}
CC@str@@Terminal settable command character in prototype
cd@str@(P*)@Clear to end of display
ce@str@(P)@Clear to end of line
ch@str@(NP)@Set cursor column (horizontal position)
cl@str@(P*)@Clear screen and home cursor
CM@str@(NP)@Memory-relative cursor addressing
cm@str@(NP)@Screen-relative cursor motion
co@num@@Number of columns in a line
cr@str@(P)@Carriage return
cs@str@(NP)@Change scrolling region (VT100)
ct@str@(P)@Clear all tab stops
cv@str@(NP)@Set cursor row (vertical position)
da@bool@@Display may be retained above the screen
dB@num@(o)@Milliseconds of \f3bs\fP delay needed (default 0)
db@bool@@Display may be retained below the screen
DC@str@(NP*)@Delete \f2n\^\fP characters
dC@num@(o)@Milliseconds of \f3cr\fP delay needed (default 0)
dc@str@(P*)@Delete character
dF@num@(o)@Milliseconds of \f3ff\fP delay needed (default 0)
DL@str@(NP*)@Delete \f2n\^\fP lines
dl@str@(P*)@Delete line
dm@str@@Enter delete mode
dN@num@(o)@Milliseconds of \f3nl\fP delay needed (default 0)
DO@str@(NP*)@Move cursor down \f2n\^\fP lines
do@str@@Down one line
ds@str@@Disable status line
dT@num@(o)@T{
Milliseconds of horizontal tab delay needed (default 0)
T}
dV@num@(o)@T{
Milliseconds of vertical tab delay needed (default 0)
T}
ec@str@(NP)@Erase \f2n\^\fP characters
ed@str@@End delete mode
ei@str@@End insert mode
eo@bool@@Can erase overstrikes with a blank
EP@bool@(o)@Even parity
es@bool@@Escape can be used on the status line
ff@str@(P*)@Hardcopy terminal page eject
fs@str@@Return from status line
gn@bool@@Generic line type (that is, dialup, switch)
hc@bool@@Hardcopy terminal
HD@bool@(o)@Half-duplex
hd@str@@Half-line down (forward 1/2 linefeed)
ho@str@(P)@Home cursor
hs@bool@@Has extra \*(lqstatus line\*(rq
hu@str@@Half-line up (reverse 1/2 linefeed)
hz@bool@@Cannot print ~s (Hazeltine)
i1-i3@str@@Terminal initialization strings (\f3terminfo\^\fP only)
IC@str@(NP*)@Insert \f2n\^\fP blank characters
ic@str@(P*)@Insert character
if@str@@Name of file containing initialization string
im@str@@Enter insert mode
in@bool@@Insert mode distinguishes nulls
iP@str@@T{
Pathname of program for initialization (\f3terminfo\^\fP only)
T}
ip@str@(P*)@Insert pad after character inserted
is@str@@Terminal initialization string (\f3termcap\^\fP only)
it@num@@Tabs initially every \f2n\^\fP positions
K1@str@@Sent by keypad upper left
K2@str@@Sent by keypad upper right
K3@str@@Sent by keypad center
K4@str@@Sent by keypad lower left
K5@str@@Sent by keypad lower right
k0-k9@str@@Sent by function keys 0-9
kA@str@@Sent by insert-line key
ka@str@@Sent by clear-all-tabs key
kb@str@@Sent by backspace key
kC@str@@Sent by clear-screen or erase key
kD@str@@Sent by delete-character key
kd@str@@Sent by down-arrow key
kE@str@@Sent by clear-to-end-of-line key
ke@str@@Out of \*(lqkeypad transmit\*(rq mode
kF@str@@Sent by scroll-forward/down key
kH@str@@Sent by home-down key
kh@str@@Sent by home key
kI@str@@T{
Sent by insert-character or enter-insert-mode key
T}
kL@str@@Sent by delete-line key
kl@str@@Sent by left-arrow key
kM@str@@Sent by insert key while in insert mode
km@bool@@Has a \*(lqmeta\*(rq key (shift, sets parity bit)
kN@str@@Sent by next-page key
kn@num@(o)@Number of function (\f3k0\fP\-\f3k9\fP) keys (default 0)
ko@str@(o)@Termcap entries for other non-function keys
kP@str@@Sent by previous-page key
kR@str@@Sent by scroll-backward/up key
kr@str@@Sent by right-arrow key
kS@str@@Sent by clear-to-end-of-screen key
ks@str@@Put terminal in \*(lqkeypad transmit\*(rq mode
kT@str@@Sent by set-tab key
kt@str@@Sent by clear-tab key
ku@str@@Sent by up-arrow key
l0-l9@str@@Labels on function keys if not \*(lqf\f2n\^\fP\*(rq
LC@bool@(o)@Lower-case only
LE@str@(NP)@Move cursor left \f2n\^\fP positions
le@str@(P)@Move cursor left one position
li@num@@Number of lines on screen or page
ll@str@@Last line, first column
lm@num@@Lines of memory if > \f3li\fP (0 means varies)
ma@str@(o)@Arrow key map (used by \f2vi\^\fP version 2 only)
mb@str@@Turn on blinking attribute
md@str@@Turn on bold (extra bright) attribute
me@str@@Turn off all attributes
mh@str@@Turn on half-bright attribute
mi@bool@@Safe to move while in insert mode
mk@str@@Turn on blank attribute (characters invisible)
ml@str@(o)@Memory lock on above cursor
mm@str@@Turn on \*(lqmeta mode\*(rq (8th bit)
mo@str@@Turn off \*(lqmeta mode\*(rq
mp@str@@Turn on protected attribute
mr@str@@Turn on reverse-video attribute
ms@bool@@Safe to move in standout modes
mu@str@(o)@Memory unlock (turn off memory lock)
nc@bool@(o)@T{
No correctly-working \f3cr\fP (Datamedia 2500, Hazeltine 2000)
T}
nd@str@@Non-destructive space (cursor right)
NL@bool@(o)@\f3\\n\fP is newline, not line feed
nl@str@(o)@Newline character if not \f3\\n\fP
ns@bool@(o)@Terminal is a CRT but does not scroll
nw@str@(P)@Newline (behaves like \f3cr\fP followed by \f3do\fP)
OP@bool@(o)@Odd parity
os@bool@@Terminal overstrikes
pb@num@@Lowest baud where delays are required
pc@str@@Pad character (default NUL)
pf@str@@Turn off the printer
pk@str@@T{
Program function key \f2n\^\fP to type string \f2s\fP (\f3terminfo\^\fP only)
T}
pl@str@@T{
Program function key \f2n\^\fP to execute string \f2s\fP (\f3terminfo\^\fP only)
T}
pO@str@(N)@Turn on the printer for \f2n\^\fP bytes
po@str@@Turn on the printer
ps@str@@Print contents of the screen
pt@bool@(o)@Has hardware tabs (may need to be set with \f3is\fP)
px@str@@T{
Program function key \f2n\^\fP to transmit string \f2s\fP (\f3terminfo\^\fP only)
T}
r1-r3@str@@T{
Reset terminal completely to sane modes (\f3terminfo\^\fP only)
T}
rc@str@(P)@Restore cursor to position of last \f3sc\fP
rf@str@@Name of file containing reset codes
RI@str@(NP)@Move cursor right \f2n\^\fP positions
rp@str@(NP*)@Repeat character \f2c n\^\fP times
rs@str@@T{
Reset terminal completely to sane modes (\f3termcap\^\fP only)
T}
sa@str@(NP)@Define the video attributes
sc@str@(P)@Save cursor position
se@str@@End standout mode
SF@str@(NP*)@Scroll forward \f2n\^\fP lines
sf@str@(P)@Scroll text up
sg@num@@T{
Number of garbage chars left by \f3so\fP or \f3se\fP (default 0)
T}
so@str@@Begin standout mode
SR@str@(NP*)@Scroll backward \f2n\^\fP lines
sr@str@(P)@Scroll text down
st@str@@Set a tab in all rows, current column
ta@str@(P)@Tab to next 8-position hardware tab stop
tc@str@@Entry of similar terminal \- must be last
te@str@@String to end programs that use \f3termcap\fP
ti@str@@String to begin programs that use \f3termcap\fP
ts@str@(N)@Go to status line, column \f2n\^\fP
UC@bool@(o)@Upper-case only
uc@str@@Underscore one character and move past it
ue@str@@End underscore mode
ug@num@@T{
Number of garbage chars left by \f3us\fP or \f3ue\fP (default 0)
T}
ul@bool@@Underline character overstrikes
UP@str@(NP*)@Move cursor up \f2n\^\fP lines
up@str@@Upline (cursor up)
us@str@@Start underscore mode
vb@str@@Visible bell (must not move cursor)
ve@str@@Make cursor appear normal (undo \f3vs\fP/\f3vi\fP)
vi@str@@Make cursor invisible
vs@str@@Make cursor very visible
vt@num@@T{
Virtual terminal number (not supported on all systems)
T}
wi@str@(N)@Set current window
ws@num@@Number of columns in status line
xb@bool@@Beehive (f1=ESC, f2=^C)
xn@bool@@Newline ignored after 80 cols (Concept)
xo@bool@@Terminal uses xoff/xon (DC3/DC1) handshaking
xr@bool@(o)@Return acts like \f3ce cr nl\fP (Delta Data)
xs@bool@@Standout not erased by overwriting (Hewlett-Packard)
xt@bool@@Tabs ruin, magic \f3so\fP char (Teleray 1061)
xx@bool@(o)@Tektronix 4025 insert-line
.TE
.SS "Sample Entry"
The following sample entry, which describes the Concept\-100, is among the more
complex entries that one may find in a \*Ltermcap\*O file.
.PP
.oS
ca\||\|concept100\||\|c100\||\|concept\||\|c104\||\|concept100-4p\||\|HDS Concept\-100:\e
	:al=3*\eE^R:am:bl=^G:cd=16*\eE^C:ce=16\eE^U:cl=2*^L:cm=\eEa%+ %+ :\e
	:co#80:.cr=9^M:db:dc=16\eE^A:dl=3*\eE^B:do=^J:ei=\eE\e200:eo:im=\eE^P:in:\e
	:ip=16*:is=\eEU\eEf\eE7\eE5\eE8\eEl\eENH\eEK\eE\e200\eEo&\e200\eEo\e47\eE:k1=\e
	E5:\e:k2=\eE6:k3=\eE7:kb=^h:kd=\eE<:ke=\eEx:kh=\eE?:kl=\eE>:kr=\eE=:ks=\eEX:\e
	:ku=\eE;:le=^H:li#24:mb=\eEC:me=\eEN\e200:mh=\eEE:mi:mk=\eEH:mp=\eEI:\e
	:mr=\eED:nd=\eE=:pb#9600:rp=0.2*\eEr%.%+ :se=\eEd\eEe:sf=^J:so=\eEE\eED:\e
	:.ta=8\et:te=\eEv    \e200\e200\e200\e200\e200\e200\eEp\er\en:\e
	:ti=\eEU\eEv  8p\eEp\er:ue=\eEg:ul:up=\eE;:us=\eEG:\e
	:vb=\eEk\e200\e200\e200\e200\e200\e200\e200\e200\e200\e200\e200\e200\e200\e200\e
	EK:\e:ve=\eEw:vs=\eEW:vt#8:xn:\e
	:bs:cr=^M:dC#9:dT#8:nl=^J:ta=^I:pt:
.oE
.PP
Entries can continue onto multiple lines by giving a \e as the last
character of a line.  Empty fields can
be included for readability (here between the last field on a line
and the first field on the next).
Comments can be included on lines beginning with them with the pound sign
(#).
.SS "Types of Capabilities"
There are three types of capabilities listed in the \*Ltermcap\*O file:
.ML
.LI "Boolean Capabilities"
Indicate particular features that the terminal has
.LI "Numeric Capabilities"
Specify the size of the display or the size of other attributes.
.LI "String Capabilities"
Specify character sequences that can be used to perform particular
terminal operations.
.LE
All capabilities have two-letter codes.  For instance, the fact that
the Concept has automatic margins (that is, an automatic return and linefeed
when the end of a line is reached) is indicated by the Boolean capability
\*Lam\*O in the Concept description.
.PP
Numeric capabilities are followed by the pound sign (#) character and a
number.  In the preceding example, \*Lco\*O has the value \*L80\*O to
indicate 80 columns for the Concept.
.PP
Finally, string-valued capabilities, such as \*Lce\*O (clear-to-end-of-line
sequence), use a two-letter code followed by an equal sign (=) and the
a descriptive string ending at the next colon (:).
A delay in milliseconds may appear after the equal sign (=)
in such a capability to cause padding characters to be supplied by
\*Ltput\*O after the remainder of the string is sent to provide this delay.
The delay can be either a number or a number followed by an asterisk (*),
for example, 20 or 16*.  The asterisk
indicates that the padding required is proportional
to the number of lines affected by the operation, and the amount given is
the per-affected-line padding required.
(In the case of insert-character, however, the factor is still the number of
lines affected.  This value is always 1 unless the terminal has \*Lin\*O
and the software uses it.)
When an asterisk is specified, it is sometimes useful to specify a delay
n the form \*L3.5\*O to indicate a delay per line to tenths of milliseconds.
(Only one decimal place is allowed.)
.PP
A number of escape sequences are provided in the string-valued capabilities
for ease in encoding control characters.  The string \*L\eE\*O maps to
an \*LESC\*O character, \*L^x\*O maps to a Control-x for any appropriate x,
and the sequences \*L\en\*O, \*L\er\*O, \*L\et\*O, \*L\eb\*O, and \*L\ef\*O
map to linefeed, return, tab, backspace, and formfeed, respectively.
You can specify characters as three octal digits after a backslash (\e).
To specify the circumflex (^) or the backslash (\e), use \*L\e^\*O or
\*L\e\e\*O respectively.  If you need to include a colon (:) in a
capability, you need to use the octal representation preceded by a
backslash, for example \*L\e072\*O.  Similarly, to use the \*LNUL\*O
character in a string capability, code it as \*L\e200\*O.
(The routines that deal with \*Ltermcap\*O
use C strings and strip the high order bits of the output very late, so that
a \*L\e200\*O ends up being the same as \*L\e000\*O.
.PP
Sometimes individual capabilities must be commented out.
To do this, put a period before the capability name.
For example, see the first \*Lcr\*O and \*Lta\*O in the preceding example.
.SS "Preparing Descriptions"
The most effective way to prepare a terminal description is by imitating
the description of a similar terminal already in the \*Ltermcap\*O file
and to build up a description gradually, using partial descriptions
to check that they are correct.
.PP
Be aware that a very unusual terminal may expose deficiencies in
the ability of the \*Ltermcap\*O file to describe it or because of
problems with the editor.
To easily test a new terminal description you are working on,
you can put it in your home directory in a file called \*Ltermcap\*O
so programs will look there before looking in \*L/usr/share/lib/termcap\*O.
.PP
You can also set the environment variable \*LTERMPATH\*O
to a list of absolute file pathnames (separated by spaces or colons),
one of which contains the description you are working on,
and programs will search them in the order listed, and nowhere else.
(See \*Ltermcap\*O(3).)
The \*LTERMCAP\*O environment variable is usually set to the \*Ltermcap\*O
entry itself to avoid reading files when starting up a program.
.PP
To get the padding for insert-line right
(if the terminal manufacturer did not document it),
a severe test is to use \*Lvi\*O to edit the \*L/etc/passwd\*O file
at 9600 baud, delete roughly 16 lines from the middle of the screen,
and then hit the \*Lu\*O key several times quickly.
If the display becomes confused, more padding is usually needed.
A similar test can be used for insert-character.
.SS "Basic Capabilities"
The number of columns on each line of the display is given by the \*Lco\*O
numeric capability.  If the display is a CRT, the
number of lines on the screen is given by the \*Lli\*O capability.
.PP
If the display wraps around to the beginning of the next line when
the cursor reaches the right margin, it should have the \*Lam\*O capability.
If the terminal can clear its screen, the code to do this is given by the
\*Lcl\*O string capability.
If the terminal overstrikes
(rather than clearing the position when a character is overwritten),
it should have the \*Los\*O capability.
.PP
If the terminal is a printing terminal,
with no soft copy unit, include both the \*Lhc\*O and \*Oos\*O capabilities.
(The \*Los\*O capability applies to storage scope terminals,
such as the Tektronix 4010 series, as well as to hard copy and APL terminals.)
If there is a code to move the cursor to the left edge of the current row,
specify this as \*Lcr\*O.
(Normally this code is the carriage-return control sequence, \*L^M\*O.)
If there is a code to produce an audible signal (bell, beep, and so on)
specify this characteristic as \*Lbl\*O.
.PP
If there is a code (such as backspace) to move the cursor one position
to the left, specify that capability as \*Lle\*O.
Similarly, use the following codes to move to the right, up, and down:
\*Lnd\*O, \*Lup\*O, and \*Ldo\*O.
These local cursor motions should not alter the text they pass over;
for example, you would not normally use \*Lnd\*O unless the terminal has the
\*Los\*O capability,
because the space would erase the character moved over.
.PP
Note that the local cursor motions encoded in the \*Ltermcap\*O file
have undefined behavior at the left and top edges of a CRT display.
Programs should never attempt to backspace around the left edge
unless the terminal capability \*Lbw\*O is specified
and never attempt to go up off the top using local cursor motions.
.PP
In order to scroll text up,
a program goes to the bottom left corner of the screen and sends the
\*Lsf\*O (index) string.  To scroll text down,
a program goes to the top left corner of the screen and sends the
\*Lsr\*O (reverse index) string.  The strings \*Lsf\*O and \*Lsr\*O
have undefined behavior
when not on their respective corners of the screen.
Parameterized versions of the scrolling sequences are \*LSF\*O and
\*LSR\*O, which have the same semantics as \*Lsf\*O and \*Lsr\*O,
except that they take one parameter and scroll that many lines.
They also have undefined behavior
except at the appropriate corner of the screen.
.PP
The \*Lam\*O capability tells whether the cursor stays at the right
edge of the screen when text is output there,
but does not necessarily apply to \*Lnd\*O from the last column.
Leftward local motion is defined from the left edge only when \*Lbw\*O
is given; then an \*Lle\*O
from the left edge will move to the right edge of the previous row.
This is useful for drawing a box around the edge of the screen,
for example.
.PP
If the terminal has switch-selectable automatic margins, the
\*Ltermcap\*O description usually assumes that this feature is on,
that is, \*Lam\*O.
If the terminal has a command that moves to the first column of the next line,
that command can be given as \*Lnl\*O (newline).
It is permissible for this to clear the remainder of the current line,
so if the terminal has no correctly-working CR and LF,
it may still be possible to craft a working \*Lnw\*O
out of one or both of them.
.PP
These capabilities suffice to describe hardcopy and "glass-tty" terminals.
Thus, the Teletype model 33 is described as follows:
.PP
.oS
T3\||\|tty33\||\|33\||\|tty\||\|Teletype model 33:\e
     :bl=^G:co#72:cr=^M:do=^J:hc:os:
.oE
.PP
The Lear Siegler ADM is described as follows:
.PP
.oS
l3\||\|adm3\||\|3\||\|LSI ADM-3:\e
     :am:bl=^G:cl=^Z:co#80:cr=^M:do=^J:le=^H:li#24:sf=^J:
.oE
.PP
.SS "Parameterized Strings"
Cursor addressing and other strings requiring parameters
are described by a parameterized string capability, with escapes
similar to those used with \*Lprintf\*O \*L %x\*O in it,
while other characters are passed through unchanged.
For example, to address the cursor, the \*Lcm\*O
capability is specified using two parameters: the row and column to move to.
(Rows and columns are numbered from zero and refer to the physical screen
visible to the user, not to any unseen memory.
If the terminal has memory-relative cursor addressing,
that can be indicated by an analogous \*LCM\*O capability.)
.PP
The \*L%\*O encodings have the following meanings:
.PP
.oS
    %\&%\&    output `%\&'
    %d    output value as in \*Vprintf\^\*O %d
    %2    output value as in \*Vprintf\^\*O %2d
    %3    output value as in \*Vprintf\^\*O %3d
    %.    output value as in \*Vprintf\^\ %c
    %+\*Vx\*O    add \*Vx\^\*O to value, then do %.
    %>\*Vxy\*O    if value > \*Vx\^\*O then add \*Vy\^\*O, no output
    %r    reverse order of two parameters, no output
    %i    increment by one, no output
    %n    exclusive-or all parameters with 0140 (Datamedia 2500)
    %B    BCD (16*(value/10)) + (value%10), no output
    %D    Reverse coding (value \- 2*(value%16)), no output (Delta Data)
.oE
.PP
Consider the Hewlett-Packard 2645, which, to get to row 3 and column 12, needs
to be sent "\eE&a12c03Y" padded for 6 milliseconds.
Note that the order of the row and column coordinates is reversed here
and that the row and column are sent as two-digit integers.
Thus its \*Lcm\*O capability is "cm=6\eE&%r%2c%2Y".
.PP
The Microterm ACT-IV needs the current row and column sent
simply encoded in binary preceded by a \*L^T\*O "cm=^T%.%.".
Terminals that use "%." need to be able to backspace the cursor
(\*Lle\*O) and to move the cursor up one line on the screen (\*Lup\*O).
This is necessary because it is not always safe to transmit \*L\en\*O,
\*L^D\*O and \*L\er\*O, as the system may change or discard them.
(Programs using \*Ltermcap\*O
must set terminal modes so that tabs are not expanded, so \*L\et\*O
is safe to send.  This turns out to be essential for the Ann Arbor 4080.)
.PP
A final example is the Lear Siegler ADM\-3a,
which offsets row and column by a blank character, thus "cm=\eE=%+ %+".
.PP
Row or column absolute cursor addressing
can be given as single parameter capabilities \*Lch\*O
(horizontal position absolute) and \*Lcv\*O
(vertical position absolute).
Sometimes these are shorter than the more general two-parameter sequence
(as with the Hewlett-Packard 2645) and can be used in preference to
\*Lcm\*O.  If there are parameterized local motions (that  is, move \*Vn\*O
positions to the right) these can be given as \*LDO\*O, \*LLE\*O, \*LRI\*O,
and \*LUP\*O with a single parameter indicating how many positions to move.
These are primarily useful if the terminal does not have \*Lcm\*O,
such as the Tektronix 4025.
.SS "Cursor Motions"
If the terminal has a fast way to home the cursor
(to the very upper left corner of the screen), this can be given as \*Lho\*O.
Similarly, a fast way of getting to the lower left-hand corner
can be given as \*Lll\*O; this may involve going up with \*Lup\*O
from the home position, but a program should never do this itself (unless
\*Lll\*O does), because it can make no assumption about the effect of moving up from the home position.
Note that the home position is the same as
cursor address (0,0): to the top left corner of the screen, not of memory.
(Therefore, the "\eEH" sequence on Hewlett-Packard terminals
cannot be used for \*Lho\*O.)
.SS "Area Clears"
If the terminal can clear from the current position to the end of the
line, leaving the cursor where it is, this should be given as \*Lce\*O.
If the terminal can clear from the current position to the end of the
display, this should be given as \*Lcd\*O.
The \*Lcd\*O capability
must only be invoked from the first column of a line.
(Therefore, it can be simulated by a request to delete a large number of lines,
if a true \*Lcd\*O is not available.
.SS "Insert/Delete Line"
If the terminal can open a new blank line before the line containing the cursor,
this should be given as \*Lal\*O;
this must be invoked only from the first position of a line.
The cursor must then appear at the left of the newly blank line.
If the terminal can delete the line that the cursor is on, this
should be given as \*Ldl\*O;
this must only be used from the first position on the line to be deleted.
Versions of \*Lal\*O and \*Ldl\*O which take a single parameter
and insert or delete that many lines can be given as \*LAL\*O and
\*LDL\*O.
If the terminal has a settable scrolling region (like the VT100),
the command to set this can be described with the \*Lcs\*O capability,
which takes two parameters: the top and bottom lines of the scrolling region.
The cursor position is, alas, undefined after using this command.
.PP
It is possible to get the effect of insert or delete line
using this command \(em the \*Lsc\*O and \*Lrc\*O
(save and restore cursor) commands are also useful.
Inserting lines at the top or bottom of the screen can also be done using
\*Lsr\*O or \*Lsf\*O
on many terminals without a true insert/delete line,
and is often faster even on terminals with those features.
.PP
If the terminal has the ability to define a window as part of memory
which all commands affect, it should be given as the parameterized string
\*Lwi\*O.
The four parameters are the starting and ending lines in memory
and the starting and ending columns in memory, in that order.
(This \*Ltermcap\*O capability is described for completeness.
It is unlikely that any program using \*Ltermcap\*O will support it.)
.PP
If the terminal can retain display memory above the screen, then the
\*Lda\*O capability should be given;
if display memory can be retained below, \*Ldb\*O should be specified.
These indicate that deleting a line or scrolling may bring non-blank
lines up from below or that scrolling back with \*Lsr\*O
may bring down non-blank lines.
.SS "Insert/Delete Character"
There are two basic kinds of intelligent terminals with respect to
insert/delete character that can be described using \*Ltermcap\*O.
The most common insert/delete character operations affect only the characters
on the current line and shift characters off the end of the line rigidly.
Other terminals, such as the Concept\-100 and the Perkin Elmer Owl, make
a distinction between typed and untyped blanks on the screen, shifting
upon an insert or delete only to an untyped blank on the screen which is
either eliminated or expanded to two untyped blanks.
.PP
You can determine
the kind of terminal you have by clearing the screen then typing
text separated by cursor motions.
Type "abc\ \ \ \ def" using local cursor motions (not spaces) between
the "abc" and the "def
Then position the cursor before the "abc" and put the terminal in insert
mode.  If typing characters causes the rest of the line to shift
rigidly and characters to fall off the end, your terminal does
not distinguish between blanks and untyped positions.
If the "abc"
shifts over to the "def" which then move together around the end of the
current line and onto the next as you insert, you have the second type of
terminal and should give the capability \*Lin\*O, which stands for
"insert null".  Although these are two logically separate attributes
(one line as opposed to multi-line insert mode,
and special treatment of untyped spaces),
almost all terminals can be described with the single attribute.
.PP
The \*Ltermcap\*O file
can describe both terminals that have an insert mode and terminals
that send a simple sequence to open a blank position on the current line.
Specify as \*Lim\*O the sequence to get into insert mode.
Specify as \*Lei\*O the sequence to leave insert mode.
Then, specify as \*Lic\*O any sequence that needs to be sent just before
each character to be inserted.
Most terminals with a true insert mode will not use \*Lic\*O;
terminals that use a sequence to open a screen
position should specify it here.
(If your terminal has both, insert mode is usually preferable to \*Lic\*O.
Do not specify both unless the terminal actually requires both to be used
in combination.)
.PP
If post-insert padding is needed, specify this as a number of milliseconds
in \*Lip\*O (a string option).
Any other sequence that may need to be
sent after insertion of a single character can also be given in \*Lip\*O.
If your terminal needs to be placed into an "insert mode"
and needs a special code preceding each inserted character,
both \*Lim\*O/\*Lei\*O and \*Lic\*O can be given, and both will be used.
The \*LIC\*O capability, with one parameter \*Vn\*O,
will repeat the effects of \*Lic\*O \*Vn\*O times.
.PP
It is occasionally necessary to move around while in insert mode
to delete characters on the same line (for example,
if there is a tab after the insertion position).
If your terminal allows motion while in
insert mode, you can give the capability \*Lmi\*O
to speed up inserting in this case.
Omitting \*Lmi\*O will affect only speed.  Some terminals
(notably Datamedia's) cannot have \*Lmi\*O
because of the way their insert mode works.
.PP
Finally, you can specify \*Ldc\*O to delete a single character, \*LDC\*O
with one parameter \*Vn\*O to delete \*Vn\*O characters,
and delete mode by giving \*Ldm\*O and \*Led\*O
to enter and exit delete mode
(which is any mode the terminal needs to be placed in for \*Ldc\*O to work.)
.SS "Highlighting, Underlining, and Visible Bells"
If your terminal has one or more kinds of display attributes,
these can be represented in a number of different ways.
You should choose one display form as "standout mode"
representing a good high-contrast, easy-on-the-eyes format
for highlighting error messages and other attention getters.
(If you have a choice, reverse video plus half-bright is good,
or reverse video alone.) The sequences to enter and exit standout mode
are given as \*Lso\*O and \*Lse\*O respectively.
If the code to change into or out of standout
mode leaves one or even two blank spaces or stray characters on the screen,
as the TVI 912 and Teleray 1061 do, specify \*Lsg\*O
to tell how many characters are left.
.PP
Codes to begin underlining and end underlining can be given as \*Lus\*O
and \*Lue\*O, respectively.
Underline mode change garbage is specified by \*Lug\*O, similar to \*Lsg\*O.
If the terminal has a code to underline the current character and move
the cursor one position to the right, such as the Microterm Mime,
this can be specified as \*Luc\*O.
.PP
Other capabilities to enter various highlighting modes include \*Lmb\*O
(blinking), \*Lmd\*O (bold or extra bright), \*Lmh\*O (dim or half-bright),
\*Lmk\*O (blanking or invisible text), \*Lmp\*O (protected),
\*Lmr\*O (reverse video), \*Lme\*O (turn off \*Vall\*O attribute modes),
\*Las\*O (enter alternate character set mode), and \*Lae\*O
(exit alternate character set mode).
Turning on any of these modes singly may or may not turn off other modes.
.PP
If there is a sequence to set arbitrary combinations of mode,
this should be specified as \*Lsa\*O (set attributes), taking 9 parameters.
Each parameter is either 0 or 1, as the corresponding attributes is on or off.
The 9 parameters are, in order: standout, underline, reverse, blink,
dim, bold, blank, protect, and alternate character set.
Not all modes need be supported by \*Lsa\*O;
only those for which corresponding attribute commands exist.
(It is unlikely that a program using \*Ltermcap\*O
will support this capability, which is defined for compatibility
with \*Lterminfo\*O.)
.PP
Terminals with the "magic cookie" anomalies (\*Lsg\*O and \*Lug\*O)
rather than maintaining extra attribute bits for each character cell,
instead deposit special "cookies", or other kinds of stray characters,
when they receive mode-setting sequences, which affect the display algorithm.
.PP
Some terminals, such as the Hewlett-Packard 2621, automatically leave standout
mode when they move to a new line or when the cursor is addressed.
Programs using standout mode should exit standout mode on such terminals
before moving the cursor or sending a newline.
On terminals where this is not a problem, the \*Lms\*O
capability should be present to say that this overhead is unnecessary.
.PP
If the terminal has a way of flashing the screen to indicate an error quietly
(a bell replacement), this capability can be specified using \*Lvb\*O;
it must not move the cursor.
.PP
If the cursor needs to be made more visible than normal
when it is not on the bottom line
(to change, for example, a non-blinking underline into an easier-to-find
block or blinking underline), specify this sequence as \*Lvs\*O.
If there is a way to make the cursor completely invisible, specify that as
\*Lvi\*O.  The capability \*Lve\*O,
which undoes the effects of both of these modes, should also be specified.
.PP
If your terminal correctly displays underlined characters
(with no special codes needed) even though it does not overstrike,
you should give the capability \*Lul\*O.
If overstrikes are erasable with a blank, this should be indicated by
specifying \*Leo\*O.
.SS "Keypad"
If the terminal has a keypad that transmits codes when the keys are pressed,
this information can be specified.
Note that it is not possible to handle
terminals where the keypad only works in local mode
(this applies, for example, to the unshifted Hewlett-Packard 2621 keys).
If the keypad can be set to transmit or not transmit, give these codes as
\*Lks\*O and \*Lke\*O.
Otherwise the keypad is assumed to always transmit.
The codes sent by the left-arrow, right-arrow, up-arrow, down-arrow,
and home keys can be given as \*Lkl\*O, \*Lkr\*O, \*Lku\*O, \*Lkd,
and \*Lkh\*O, respectively.
.PP
If there are function keys such as f0, f1, ..., f9, the codes they send
can be given as \*Lk0\*O, \*Lk1\*O, "" ..., \*Lk9\*O.
If these keys have labels other than the default f0 through f9, the labels
can be given as \*L10\*O, \*L11\*O, "" ..., \*L19\*O.
.PP
The codes transmitted by certain other special keys can be specified:
\*LkH\*O (home down), \*Lkb\*O (backspace), \*Lka\*O (clear all tabs),
\*Lkt\*O (clear the tab stop in this column), \*LkC\*O (clear screen or erase),
\*LkD\*O (delete character), \*LkL\*O (delete line),
\*LkM\*O (exit insert mode), \*LkE\*O (clear to end of line),
\*LkS\*O (clear to end of screen),
\*LkI\*O (insert character or enter insert mode),
\*LkA\*O (insert line), \*LkN\*O (next page), \*LkP\*O (previous page),
\*LkF\*O (scroll forward/down), \*LkR\*O (scroll backward/up), and
\*LkT\*O (set a tab stop in this column).
In addition, if the keypad has a 3 by 3 array of keys
including the four arrow keys, then the other five keys can be given as
\*LK1\*O, \*LK2\*O, \*LK3\*O, \*LK4\*O, and \*LK5\*O.
These keys are useful when the effects of a 3 by 3 directional pad are needed.
The obsolete \*Lko\*O
capability formerly used to describe "other" function keys has been
completely supplanted by the above capabilities.
.PP
The \*Lma\*O entry is also used to indicate arrow keys on terminals that have
single-character arrow keys.  It is obsolete but still in use in
Version 2 of \*Lvi\*O which must be run on some minicomputers due to
memory limitations.  This field is redundant with \*Lkl\*O, \*Lkr\*O,
\*Lku\*O, \*Lkd\*O, and \*Lkh\*O.
It consists of groups of two characters.
In each group, the first character is what an arrow key sends, and the
second character is the corresponding \*Lvi\*O command.
These commands are \*Lh\*O for \*Lkl\*O, \*Lj\*O for \*Lkd\*O,
\*Lk\*O for \*Lku\*O, \*Ll\*O for \*Lkr\*O, and \*Lh\*O for \*Lkh\*O.
For example, the Mime would have "ma=^Hh^Kj^Zk^Xl"
indicating arrow keys left (^H), down (^K), up (^Z), and right (^X).
(There is no home key on the Mime.)
.SS "Tabs and Initialization"
If the terminal needs to be in a special mode when running
a program that uses these capabilities,
the codes to enter and exit this mode can be given as \*Lti\*O
and \*Lte\*O.
This arises, for example, from terminals like the Concept with more than
one page of memory.
If the terminal has only memory-relative cursor addressing and not
screen-relative cursor addressing,
a screen-sized window must be fixed into
the display for cursor addressing to work properly.
This is also used for the Tektronix 4025, where \*Lti\*O
sets the command character to be the one used by \*Ltermcap\*O.
.PP
Other capabilities include \*Lis\*O,
an initialization string for the terminal, and \*Lif\*O,
the name of a file containing long initialization strings.
These strings are expected to set the terminal into modes
consistent with the rest of the \*Ltermcap\*O description.
They are normally sent to the terminal by the \*Ltset\*O
program each time the user logs in.
They will be printed in the following order:
\*Lis\*O; setting tabs using \*Lct\*O and \*Lst\*O; and finally \*Lif\*O.
(The \*Lterminfo\*O file uses \*Li1-i2\*O instead of \*Lis\*O
and runs the program \*LiP\*O and prints \*Li3\*O
after the other initializations.)
A pair of sequences that does a harder reset from a totally unknown state
can be analogously given as \*Lrs\*O and \*Lif\*O.
These strings are output by the \*Lreset\*O
program, which is used when the terminal gets into a wedged state.
(The \*Lterminfo\*O program uses \*Lr1-r3\*O instead of \*Lrs\*O.)
.PP
Commands are normally placed in \*Lrs\*O and \*Lrf\*O
only if they produce annoying effects on the screen and are not necessary
when logging in.
For example, the command to set the VT100 into 80-column mode
would normally be part of \*Lis\*O,
but it causes an annoying glitch of the screen and is not normally needed
since the terminal is usually already in 80-column mode.
.PP
If the terminal has hardware tabs,
the command to advance to the next tab stop can be given as \*Lta\*O
(usually \*L^I\*O).
A backtab command which moves leftward to the previous tab stop
can be given as \*Lbt\*O.
By convention, if the terminal driver modes indicate that tab stops
are being expanded by the computer rather than being sent to the terminal,
programs should not use \*Lta\*O or \*Lbt\*O
even if they are present,
since the user may not have the tab stops properly set.
If the terminal has hardware tabs that are initially set every \*Vn\*O
positions when the terminal is powered up, the numeric parameter
\*Lit\*O is given, showing the number of positions between tab stops.
This is normally used by the \*Ltset\*O
command to determine whether to set the driver mode for hardware tab
expansion, and whether to set the tab stops.
If the terminal has tab stops that can be saved in nonvolatile memory, the
\*Ltermcap\*O description can assume that they are properly set.
.PP
If there are commands to set and clear tab stops, they can be given as
\*Lct\*O (clear all tab stops) and \*Lst\*O
(set a tab stop in the current column of every row).
If a more complex sequence is needed to set the tabs than can be
described by this, the sequence can be placed in \*Lis\*O or \*Lif\*O.
.SS "Delays"
Certain capabilities control padding in the terminal driver.
These are primarily needed by hardcopy terminals and are used by the
\*Ltset\*O program to set terminal driver modes appropriately.
Delays embedded in the capabilities \*Lcr\*O, \*Lsf\*O, \*Lle\*O,
\*Lff\*O, and \*Lta\*O will cause the appropriate delay bits to be
set in the terminal driver.  If \*Lpb\*O
(padding baud rate) is given, these values can be ignored at baud rates
below the value of \*Lpb\*O.
For systems based on 4.2BSD \*Ltset\*O, the delays are given as numeric
capabilities \*LdC\*O, \*LdN\*O, \*LdB\*O, \*LdF\*O, and \*LdT\*O instead.
.SS "Miscellaneous"
If the terminal requires other than a NUL (zero) character as a pad,
this can be given as \*Lpc\*O.
Only the first character of the \*Lpc\*O string is used.
.PP
If the terminal has commands to save and restore the position of the
cursor, specify them as \*Lsc\*O and \*Lrc\*O.
.PP
If the terminal has an extra status line that is not normally used by
software, this fact can be indicated.
If the status line is viewed as an extra line below the bottom line,
then the capability \*Lhs\*O should be specified.
Special strings to go to a position in the status line and to return
from the status line can be given as \*Lts\*O and \*Lfs\*O.
(The \*Lfs\*O capability must leave the cursor position in the same place
that it was before \*Lts\*O. If necessary, the \*Lsc\*O and \*Lrc\*O
strings can be included in \*Lts\*O and \*Lfs\*O to get this effect.)
The \*Lts\*O capability
takes one parameter, which is the column number of the status line
to which the cursor is to be moved.
If escape sequences and other special commands such as tab work while in
the status line, the flag \*Les\*O can be specified.
A string that turns off the status line (or otherwise erases its contents)
should be specified as \*Lds\*O.
The status line is normally assumed to be the same width as the
rest of the screen, that is, \*Lco\*O.
If the status line is a different width (possibly because the terminal
does not allow an entire line to be loaded), then its width in columns
can be indicated with the numeric parameter \*Lws\*O.
.PP
If the terminal can move up or down half a line, this can be
indicated with \*Lhu\*O (half-line up) and \*Lhd\*O (half-line down).
This is primarily useful for superscripts and subscripts on hardcopy
terminals.
If a hardcopy terminal can eject to the next page (form feed),
specify this as \*Lff\*O (usually \*L^L\*O).
.PP
If there is a command to repeat a given character a given number of times
(to save time transmitting a large number of identical characters),
this can be indicated with the parameterized string \*Lrp\*O.
The first parameter is the character to be repeated and the second is
the number of times to repeat it.
(This is a \*Lterminfo\*O feature that is unlikely to be supported by
a program that uses \*Ltermcap\*O.)
.PP
If the terminal has a settable command character, such as the
Tektronix 4025, this can be indicated with \*LCC\*O.
A prototype command character is chosen which is used in all capabilities.
This character is given in the \*LCC\*O capability to identify it.
The following convention is supported on some UNIX systems:
The environment is to be searched for a \*LCC\*O variable, and if found,
all occurrences of the prototype character are replaced by the character
in the environment variable.
This use of the \*LCC\*O environment variable
is a very bad idea, as it conflicts with
\*Lmake\*O(1).
.PP
Terminal descriptions that do not represent a specific kind of known
terminal, such as \*Lswitch\*O, \*Ldialup\*O, \*Lpatch\*O, and
\*Lnetwork\*O, should include the \*Lgn\*O
(generic) capability so that programs can complain that they do not know
how to talk to the terminal.
(This capability does not apply to \*Lvirtual\*O
terminal descriptions for which the escape sequences are known.)
.PP
If the terminal uses xoff/xon (DC3/DC1) handshaking for flow control,
specify \*Lxo\*O.  Padding information should still be included so
that routines can make better decisions about costs, but actual pad
characters will not be transmitted.
.PP
If the terminal has a meta key which acts as a shift key setting the
eighth bit of any character transmitted, this fact can be indicated with
\*Lkm\*O.
Otherwise, software will assume that the 8th bit is parity and it will
usually be cleared.
If strings exist to turn this meta mode on and off, they can be given as
\*Lmm\*O and \*Lmo\*O.
.PP
If the terminal has more lines of memory than will fit on the screen at once,
the number of lines of memory can be indicated with \*Llm\*O.
An explicit value of 0 indicates that the number of lines is not fixed,
but that there is still more memory than fits on the screen.
.PP
If the terminal is one of those supported by the UNIX system virtual
terminal protocol, the terminal number can be specified as \*Lvt\*O.
.PP
Media copy strings which control an auxiliary printer
connected to the terminal can be given as follows:
.VL 8m
.LI "\*Lps\*O"
Print the contents of the screen.
.LI "\*Lpf\*O"
Turn off the printer.
.LI "\*Lpo\*O"
Turn on the printer.
.LE
.PP
When the printer is on, all text sent to the terminal will be sent to the
printer.
It is undefined whether the text is also displayed on the terminal screen
when the printer is on.
A variation, \*LpO\*O,
takes one parameter and leaves the printer on for as many characters as the
value of the parameter, then turns the printer off.
The parameter should not exceed 255.
All text, including \*Lpf\*O, is transparently passed to the printer while
\*LpO\*O is in effect.
.PP
Strings to program function keys can be specified as \*Lpk\*O, \*Lpl\*O,
and \*Lpx\*O.
Each of these strings takes two parameters: the function key number
to program (from 0 to 9) and the string to program it with.
Function key numbers out of this range may program undefined keys
in a terminal-dependent manner.
The differences among the capabilities are as follows:
.VL 8m
.LI "\*Lpk\*O"
Causes pressing the given key to be the same as the user typing the given
string.
.LI "\*Lpl\*O"
Causes the string to be executed by the terminal in local mode.
.LI "\*Lpx\*O"
Causes the string to be transmitted to the computer.
.LE
.PP
Unfortunately, due to lack of a definition for string parameters in
\*Ltermcap\*O, only \*Lterminfo\*O supports these capabilities.
.SS "Cautions"
Hazeltine terminals, which do not allow tilde (\~) characters to be displayed,
should indicate \*Lhz\*O.
.PP
The \*Lnc\*O capability, now obsolete, formerly indicated Datamedia terminals,
which echo \*L\er \en\*O for
carriage return then ignore a following linefeed.
.PP
Terminals that ignore a linefeed immediately after an \*Lam\*O
wrap, such as the Concept, should indicate \*Lxn\*O.
.PP
If \*Lce\*O is required to get rid of standout (instead of merely
writing normal text on top of it), \*Lxs\*O should be specified.
.PP
Teleray terminals, where tabs turn all characters moved over to blanks,
should indicate \*Lxt\*O (destructive tabs).
This glitch is also taken to mean that it is not possible
to position the cursor on top of a "magic cookie", and that
to erase standout mode it is necessary to use delete and insert line.
.PP
The Beehive Superbee, which is unable to correctly transmit the
ESC or ^C characters, has \*Lxb\*O, indicating that the \*Lf1\*O key is
used for ESC and the \*Lf2\*O key for ^C.
(Only certain Superbees have this problem, depending on the ROM.)
.PP
Other specific terminal problems may be corrected by adding more
capabilities of the form \*Lx\*Vx\^\*O.
.PP
.ce 1
\f(HBNote\fP
.sp 6P
.rS 5
In UNIX System V Release 2.0, \*Ltermcap\*O was replaced by \*Lterminfo\*O.
If you are making a transition, avoid using any capabilities marked as
\*Vobsolete\*O.
.PP
Lines and columns are now stored by the kernel as well as in the
\*Ltermcap\*O entry.
Most programs now use the kernel information primarily; the information
in this file is used only if the kernel does not have any information.
.PP
The total length of a single entry (excluding only escaped newlines)
cannot exceed 1024 bytes, including a null terminator.
.PP
Not all programs support all entries.
.sp 6P
.rE
.SS "Similar Terminals"
If there are two very similar terminals, one can be defined as being
like the other with certain exceptions.
The string capability \*Ltc\*O can be specified with the name of the
similar terminal.  This capability must be \*Llast\*O,
and the combined length of the entries
must not exceed 1024 bytes, including a null terminator.
The capabilities given before \*Ltc\*O
override those in the terminal type invoked by \*Ltc\*O.
A capability can be canceled by placing \*Vxx\*L@\*O
to the left of the \*Ltc\*O invocation, where \*Vxx\*O
is the capability.
For example, the following entry
defines a "2621\-nl" that does not have the \*Lke\*O or \*Lke\*O
capabilities,
hence does not turn on the function key labels when in visual mode.
.oS
     hn\||\|2621\-nl:ks@:ke@:tc=2621:
.oE
.PP
This is useful for different modes for a terminal, or for different
user preferences.
.SH FILES
.PP
.VL 13m
.LI "\*L/usr/share/lib/termcap\*O"
File containing terminal descriptions
.LE
.SH RELATED INFORMATION
.PP
\*Ltset\*O(1), \*Lcurses\*O(3), \*Lprintf\*O(3),
\*Ltermcap\*O(3), \*Ltermcap\*O(3x), \*Lterminfo\*O(4)
.tr **
.EQ
delim off
.EN

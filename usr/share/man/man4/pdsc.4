.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: pdsc.4,v $ $Revision: 1.1.6.4 $ (DEC) $Date: 1993/12/17 19:16:33 $
.\"
.\" this is the massaged version
.\" 
.\" 
.TH pdsc 4
.PP
.SH NAME
.PP
\*Lpdsc.h\*O \- Defines structures describing procedures conforming to the \*EDEC OSF/1 Calling Standard for AXP Systems\*O .
.SH SYNOPSIS
.PP
.iX "pdsc.h header file"
.sS
\*L#include\*O <\*Lpdsc.h\*O>
.sE
.SH DESCRIPTION
.PP
The pdsc.h header file defines two basic data structures:  the code range
descriptor (crd) and the run-time procedure descriptor (rpd).
.PP
Code range descriptors associate a contiguous sequence of addresses
with a run-time procedure descriptor.  This mapping can be many-to-one.
Code range descriptors support optimizations (for example, reducing cache
collisions) where all of the code for a procedure might not be contiguous.
Run-time procedure descriptors provide unwind and exception handler
information about a procedure or part of a procedure.  Several run-time
procedure descriptors might be needed if a procedure has multiple entry
points (as in FORTRAN).
.PP
.\" [??does this mean DEC systems??], 
Currently, one code range descriptor exists for each run-time
procedure descriptor.  The assembler creates both the crds and rpds.
Crds are stored alone in address order in the \*L\.pdata\*O section of an
object file.  Rpds are stored along with language generated exception
information in the \*L\.xdata\*O section of an object file.
.PP
The assembler supports an \*L\.edata 0\*O directive to allow the language or
user to enter information into the \*L\.xdata\*O section.
.PP
The \*L\.end\*O assembler directive, which denotes the end of a procedure, tells
the assembler to generate the crd and rpd for the ended procedure.
.PP
The \*L\.xdata\*O and \*L\.pdata\*O sections are coalesced in order from
multiple relocatable objects and non-shared libraries by the
linker into one large \*L\.xdata\*O and one large \*L\.pdata\*O section
for each executable or shared object.
The linker adds an extra element to the code range
descriptors, whose address is one address beyond the end of the text
segment.
.PP
For a diagram of a code range descriptor, see the \*Lpdsc.h\*O file.
.\" The following is a picture of a code range descriptor:
.\" .sS
.\" 		Code Range Descriptors (crd)
.\" 
.\" 	+---------------------------------------------------------------+
.\" 	+31                                                         |1 0+
.\" 	+                        begin_address                      |RES+
.\" 	+---------------------------------------------------------------+
.\" 	+31                                                        2|1|0+
.\" 	+                        rpd_offset                         |R|P+
.\" 	+---------------------------------------------------------------+
.\" 
.\" 
.\" 		begin_address	code range start address
.\" 		rpd_offset      runtime procedure descriptor offset
.\" 		RES,R		must be zero, reserved for future use
.\" 		P		if 0, code range contains prolog
.\" .sE
.PP
The \*Lbegin_address\*O field is shifted left 2 bits.  Its position is relative
to the beginning of
the whole code range descriptor table.  This shift enables a binary
search of these addresses.  (If they were self relative like \*Lrpd_offset\*O,
you have to calculate the actual address before being able to do the compare.)
This field definition restricts the code range to be within 32 bits of
the code range descriptor table.  This field is the first address of a
code range. The \*Lbegin_address\*O of the next crd
is one address beyond the bounds
the code range from the top.  As stated above, the linker adds a last element.
.PP
The \*Lrpd_offset\*O is a self-relative field that points to the run-time
procedure descriptor entry for this code range.  This field definition
restricts the run-time procedure descriptor to be within 32 bits of
the code range descriptor table. The \*Lrpd_offset\*O field might equal zero
if the
procedure is a null frame whose \*Lentry_ra\*O is \*L$26\*O and contains
no handler and \*LPDSC_FLAGS_REGISTER_FRAME\*O is set.  This condition
implies no separate procedure descriptor.
.PP
The prologue bit is set if the code range does not contain a prologue.
This information is important in determining which register to restore
during an unwind operation.
.\" (FYI: We set this bit when there is no prologue
.\" because it is a rarer case.)
.PP
All the structure definitions have simple typedefs
to define the fields in case they need to have idfefs processed to
differentiate the code on the basis of the hardware architecture.
See the \*Lpdsc.h\*O header file for their specific definitions.
.PP
The \*Lpdsc.h\*O header file provides a union that allows for
accessing the two main fields as
32 bit items.  The header file also provides macros to help use those
32 bit items.  The union definition for code range descriptors follows:
.oS
/*
 * Runtime Code Range Descriptor
 */
typedef union pdsc_crd {
    struct {
        pdsc_offset   begin_address;
                           /* offst to 1st address in range */
        pdsc_offset   rpd_offset;
                           /* offst to rpd including bits */
    } words;
    struct {
        pdsc_space    reserved1:2;    /* must be 0 */
        pdsc_offset   shifted_begin_address:30;
                                      /* shifted left 2 */
        pdsc_mask     no_prolog:1;    /* flag */
        pdsc_space    reserved2:1;    /* must be 0 */
        pdsc_offset   shifted_rpd_offset:30;
                                      /* shifted left 2 */
   } fields;
 } pdsc_crd;
.oE
.PP
Run-time procedure descriptors come in a number of variations.
The
DEC OSF/1
operating system supports
a short form and a long form and each may or may not have handler
information.
DEC OSF/1
supports a short form (and the no procedure descriptor
form mentioned in the code range descriptors discussion) to minimize
the space required for exception and unwind information.
DEC OSF/1
supports
a long form for procedures whose information overflows the fields in the
short form.
.PP
DEC OSF/1
also supports register frames that do not manifest a stack frame
and may use temporary registers to save the \*Lra\*O.  Manual collusion
between a caller and callee is required to support the use of temporary
registers for intrinsic and library functions to save the cost of stores
and restores to and from memory.
.PP
See the \*Lpdsc.h\*O header file for diagrams of the short and long forms of the
descriptors.
.\" The short form of the descriptor looks like:
.\" 
.\" 		Runtime Procedure Descriptors (rpd)
.\" 
.\" 			Short Form (short_[reg|stack]_rpd):
.\" 
.\" 
.\"         +---------------------------------------------------------------+
.\"         +31           24|23           16|15            8|7             0+
.\"         +     imask     |      fmask    |    rsa_offset |     flags     +
.\"         +---------------------------------------------------------------+
.\"         +31           24|23           16|15                            0+
.\"         + entry_length  |     sp_set    |            frame_size         +
.\"         +---------------------------------------------------------------+
.\" 	+31                                                            0+
.\" 	+                        handler_address                        +
.\" 	+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
.\" 	+63                                                           32+
.\" 	+                        (optional quad)                        +
.\" 	+---------------------------------------------------------------+
.\" 	+31                                                            0+
.\" 	+                        handler_data_address                   +
.\" 	+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
.\" 	+63                                                           32+
.\" 	+                        (optional quad)                        +
.\" 	+---------------------------------------------------------------+
.\" 
.\" 
.\" 		alternate first 32 bit word for register frames
.\"         +---------------------------------------------------------------+
.\"         +31                21|20      16|15    11|     8|7             0+
.\"         +     reserved       |  save_ra |entry_ra|reserv|     flags     +
.\"         +---------------------------------------------------------------+
.\" 
.\" 
.\" 	stack_frame_size	size in 64 bit words of frame (max 65535)
.\" 	rsa_offset		offset in 64 bit words from sp or fp to 
.\" 				register save area (max 255). 
.\" 	flags			see below (flags fitting in 8 bits)
.\" 	entry_length		number of instructions in the prologue (max 255)
.\" 	sp_set			instruction offset to instruction which sets SP
.\" 				in the prologue (max 255)
.\" 	imask			bit set for regs $8..$15 which are saved
.\" 	entry_ra		ra on entry to the routine.
.\" 	save_ra			where we move entry_ra in prolog. save_ra
.\" 				may equal entry_ra.
.\" 	fmask			bit set for regs $f2..$f9 which are saved
.\" 	handler_address		if present, provides absolute address of 
.\" 				exception handler
.\" 	handler_data_address	if present, provides absolute address of 
.\" 				exception handler data
.\" 
.\" 
.\" The entry_ra is fixed to be $26 in stack frames.
.\" 
.\" The long form of the procedure descriptor looks like:
.\" 
.\" 			Long Form (long_[reg|stack]_rpd):
.\" 
.\" 	+---------------------------------------------------------------+
.\" 	+31                           16|15    11|10                   0+
.\" 	+        rsa_offset             |entry_ra|        flags         +
.\" 	+---------------------------------------------------------------+
.\" 	+31                           16|15                            0+
.\" 	+        entry_length           |           sp_set              +
.\" 	+---------------------------------------------------------------+
.\" 	+31                                                            0+
.\" 	+                        stack_frame_size                       +
.\" 	+---------------------------------------------------------------+
.\" 	+31                                                            0+
.\" 	+                            reserved                           +
.\" 	+---------------------------------------------------------------+
.\" 	+31                                                            0+
.\" 	+                              imask                            +
.\" 	+---------------------------------------------------------------+
.\" 	+31                                                            0+
.\" 	+                              fmask                            +
.\" 	+---------------------------------------------------------------+
.\" 	+31                                                            0+
.\" 	+                        handler_address                        +
.\" 	+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
.\" 	+63                                                           32+
.\" 	+                        (optional quad)                        +
.\" 	+---------------------------------------------------------------+
.\" 	+31                                                            0+
.\" 	+                        handler_data_address                   +
.\" 	+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+
.\" 	+63                                                           32+
.\" 	+                        (optional quad)                        +
.\" 	+---------------------------------------------------------------+
.\" 
.\" 
.\" 		alternate first 32 bit word for register frames
.\" 	+---------------------------------------------------------------+
.\" 	+31                  21|20    16|15    11|10                   0+
.\" 	+        reserved      | save_ra|entry_ra|        flags         +
.\" 	+---------------------------------------------------------------+
.\" 
.\" 
.\" See above in the short form for field definitions. They are in same units 
.\" except they are larger fields. The masks represent all 32 registers.
.\" 
.PP
The \*Lpdsc.h\*O header file provides a union that embodies
the different options discussed above.
The union definition for run-time procedure descriptors is:
.oS
typedef union pdsc_rpd {
    struct pdsc_short_stack_rpd {
        pdsc_uchar_mask flags:8;
                           /* information about frame */
        pdsc_uchar_offset rsa_offset;
                           /* savregs offst in quadwords */
        pdsc_uchar_mask  fmask:8;
                           /* floating point reg mask */
        pdsc_uchar_mask  imask:8;
                           /* integer register mask */
        pdsc_count       frame_size:16;
                           /* frame size in 64 bit words */
        pdsc_offset  sp_set:8;
                           /* instofset to inst which sets sp */
        pdsc_count entry_length:8;
                           /* # of insts in prologue */
    } short_stack_rpd;
    struct pdsc_short_reg_rpd {
        pdsc_uchar_mask  flags:8;
                           /* information about frame */
        pdsc_space       reserved1:3;   /* must be zero */
        pdsc_register    entry_ra:5;
                           /* what contains ra on entry */
        pdsc_register    save_ra:5;
                           /* entry_ra here after the prologue */
        pdsc_space       reserved2:11;  /* must be zero */
        pdsc_count       frame_size:16;
                           /* frame size in 64 bit words */
        pdsc_offset      sp_set:8;
                           /* instofset to inst which sets sp */
        pdsc_count       entry_length:8;
                           /* # of insts in prologue */
    } short_reg_rpd;
    struct pdsc_long_stack_rpd {
        pdsc_mask        flags:11;
                           /* information about frame */
        pdsc_register    entry_ra:5;
                           /* where ret pc is on entry */
        pdsc_ushort_offset rsa_offset;
                           /* saveregs offst in quadwords */
        pdsc_offset      sp_set:16;
                           /* instofset to inst which sets sp */
        pdsc_count       entry_length:16;
                           /* # of insts in prologue */
        pdsc_count       frame_size;
                           /* frame size in quadwords */
        pdsc_space       reserved;      /* must be zero */
        pdsc_mask        imask;
                           /* integer register mask */
        pdsc_mask        fmask;
                           /* floating point register mask */
    } long_stack_rpd;
    struct pdsc_long_reg_rpd {
        pdsc_mask        flags:11;
                           /* information about frame */
        pdsc_register    entry_ra:5;
                           /* where ret pc is on entry */
        pdsc_register    save_ra:5;
                           /* we moved entry_ra in the prologue */
        pdsc_space       reserved1:11;  /* must be zero */
        pdsc_offset      sp_set:16;
                           /* instofset to inst which sets sp */
        pdsc_count       entry_length:16;
                           /* # of insts in prologue */
        pdsc_count       frame_size;
                           /* frame size in quadwords */
        pdsc_space       reserved2;     /* must be zero */
        pdsc_mask        imask;
                           /* integer register mask */
        pdsc_mask        fmask;
                           /* floating point register mask */
    } long_reg_rpd;
    struct pdsc_short_with_handler {
        union {
        struct pdsc_short_stack_rpd  short_stack_rpd;
                           /* base stack rpd */
        struct pdsc_short_reg_rpd    short_reg_rpd;
                           /* base stack rpd */
        } stack_or_reg;
        pdsc_address     handler;
                           /* optional handler address */
        pdsc_address     handler_data;
                           /* optional handler data */
    } short_with_handler;
    struct pdsc_long_with_handler {
        union {
        struct pdsc_long_stack_rpd  long_stack_rpd;
                           /* base stack rpd */
        struct pdsc_long_reg_rpd    long_reg_rpd;
                           /* base stack rpd */
        } stack_or_reg;
        pdsc_address     handler;
                           /* optional handler address */
        pdsc_address     handler_data;
                           /* optional handler data */
    } long_with_handler;
} pdsc_rpd;                /* runtime procedure descriptor */
.oE
.PP
As noted in the preceding code fragment, the flags field is a different
length depending on whether a long or short descriptor is used.
Consequently, the most used flags are grouped together so that they
fit in the short frame.
.\" For a complete list of flags, see the \*Lpdsc.n\*O reference page.
.\" 
.\" 
.\" 
.\" 
.\" The following is a list of flags:
.\" 
.\" 
.\" Flag				Comment
.\" -------------------------------	-----------------------------------------------
.\" PDSC_FLAGS_SHORT		short form
.\" PDSC_FLAGS_REGISTER_FRAME	register versus stack
.\" PDSC_FLAGS_BASE_REG_IS_FP	FP register is frame ptr (SP is default)
.\" PDSC_FLAGS_HANDLER_VALID	handler & data pointers present
.\" PDSC_FLAGS_EXCEPTION_FRAME	exception frame, for epc
.\" PDSC_FLAGS_EXTENDER		escaping to larger flag area in optional fields
.\" 
.PP
Use the \*LPDSC_FLAGS_EXCEPTION_FRAME\*O flag to trace back over signal frames.
.\" NT doesn't have this flag because they disassemble a fake
.\" prologue which does two saves of ra which the back execution
.\" mechanism knows about.
.\" [??? - knows, does not know ???]
.PP
The \*LPDSC_FLAGS_EXTENDER\*O flag is not yet implemented
and is reserved
.\" this clause doesn't make sense:
.\" (as are other bits in flag field not yet designated).
.PP
The header file defines a set of macros that easily enable users
to access fields.  Some macros provide support so users
do not have to know whether they are using a short or long descriptor
or even a stack frame as opposed to a register frame.
The header file will also normalize the fields
between descriptor types (for example, the register mask will be
expanded to 32 bits).
.PP
A null value for the \*Vrpd\*O argument can cause some of the macros
to provide the default values.  This provision of default values
supports the case where the \*Lpdsc_crd\*O does not
point at any rpd and is denoted by \*LNo rpd\*O.
.\" .PP
.\" All the macros are prefixed with 'PDSC_'-- I've left it out to save room
.\" in the table.  
.\" 
.PP
In the following table, each macro carries a \*LPDSC_\*O prefix, which is
omitted in the table to conserve space.
Where there is no default value (such as for a handler), a zero (0)
is returned when the value is not present.  In the second column, Support,
N means no rpd, S means support for stack, R means support for register, H
means support for short, and L means support for long.
.PP
.\" 			SUPPORT
.\" 			 No rpd
.\" 			 Stack
.\" 			 Register
.\" 			 sHort
.\" 			 Long
.\" 
.TS
tab(@);
lfHB lfHB lfHB lfHB
llll.
_
.sp 4p
PDSC_ Macro@Support@Arg@Comments
.sp 4p
_
.sp 6p
SHORT_RPD_SIZE@@None@Size of a short without
@@@handler information.
.sp
LONG_RPD_SIZE@@None@Size of a long without
@@@handler information.
.sp
DEFAULT_ENTRY_RA@@None@$26, the default return
@@@address register.
.sp
RPD_SHORT@SRHL@&rpd@1 if it is a short rpd;
@@@otherwise 0.
.sp
RPD_REGISTER@SRHL@&rpd@1 if it is a register frame;
@@@otherwise 0.
.sp
RPD_HAS_HANDLER@SRHL@&rpd@1 if there is handler
@@@information; otherwise 0.
.sp
RPD_FLAGS@SRHL@&rpd@Flags field.
.sp
RPD_RSA_OFFSET_FIELD@NSRHL@&rpd@rsa_offset field value.
.sp
RPD_RSA_OFFSET@NSRHL@&rpd@rsa_offset in bytes.
.sp
RPD_SAVE_RA@NSRHL@&rpd@save ra register.
.sp
RPD_ENTRY_RA@NSRHL@&rpd@entry ra register.
.sp
RPD_SIZE_FIELD@NSRHL@&rpd@frame_size field value.
.sp
RPD_SIZE@NSRHL@&rpd@Frame size in bytes.
.sp
RPD_SP_SET_FIELD@NSRHL@&rpd@sp_set field value.
.sp
RPD_SP_SET@NSHRL@&rpd@sp_set offset in bytes.
.sp
RPD_ENTRY_LENGTH_FIELD@NSHRL@&rpd@entry_length
@@@field value.
.sp
RPD_ENTRY_LENGTH@NSHRL@&rpd@Prologue size in bytes.
.sp
RPD_IMASK@NSHRL@&rpd@32 bit saved int
@@@register mask.
.sp
RPD_FMASK@NSHRL@&rpd@32 bit saved fp
@@@register mask.
.sp
RPD_HANDLER@NSHRL@&rpd@Handler address.
.sp
RPD_HANDLER_DATA@NSHRL@&rpd@Handler data address.
.sp
CRD_OFFSET_MASK@@none@Masks off the lsb two bits.
.sp
CRD_NO_PROLOG_MASK@@none@Masks all but the lsb bit.
.sp
CRD_PRPD@@&crd@Pointer to the rpd for
@@@this crd.
.sp
CRD_CONTAINS_PROLOG@@&crd@1 if it does;
@@@0 if not.
.sp
CRD_BEGIN_ADRESS_FIELD@@&crd@Begin address field value.
.sp
CRD_BEGIN_ADDRESS@@&.pdata@ptr to the first address
@@@in the code range.
@@&crd@
.sp
INST_OFFSET_SHIFT@@@Amounts to << insts to
@@@a get # of bytes.
.sp
FRAME_SIZE_SHIFT@@@Amounts to << frame siz
@@@to a get # of bytes
.sp
SHORT_RPD_IMASK_SHIFT@@@Amounts to << short imsk
@@@to the position bits.
.sp
SHORT_RPD_FMASK_SHIFT@@@Amounts to << short fmsk
@@@to the position bits.
.sp 6p
_
.TE
.SH RELATED INFORMATION
.PP
\*Lexception_intro\*O(3)
.EQ
delim off
.EN

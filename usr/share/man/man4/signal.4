.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: signal.4,v $ $Revision: 3.2.5.2 $ (DEC) $Date: 1993/12/21 15:28:09 $
.\"
.\" 
.\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.\"
.\" Copyright (c) 1990, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\"
.TH signal 4
.SH NAME
\*Lsignal.h\*O \- Contains definitions and variables used by signal functions
.SH "DESCRIPTION"
.PP
.iX "signal.h"
.iX "header file" "signal.h"
\*OThe \*L/usr/include/signal.h\*O file defines the
signals described in the following table.
.PP
.\" Begin Digital-specific information CORRECTION
.\" Fixed table coding and footnote coding per Grant Sullivan and tman.
.TS
tab(@);
lfHB cfHB lfHB
l c lw(3.0i) .
.sp
_
Signal@Number@Meaning
_
.sp
SIGHUP@1@Hangup.
SIGINT@2@Interrupt.
SIGQUIT@3@Quit.  (1)
SIGILL@4@Invalid instruction (not reset when caught).  (1)
SIGTRAP@5@Trace trap (not reset when caught).  (1)
SIGABRT@6@End process (see the \*Labort(\|)\*O function).  (1)
SIGEMT@7@EMT instruction.
SIGFPE@8@Arithmetic exception, integer divide by 0 (zero),
@@or floating-point exception.  (1)
SIGKILL@9@Kill (cannot be caught or ignored).
SIGBUS@10@Specification exception.  (1)
SIGSEGV@11@Segmentation violation.  (1)
SIGSYS@12@Invalid parameter to system call.  (1)
SIGPIPE@13@Write on a pipe when there is no process to read it.
SIGALRM@14@Alarm clock.
SIGTERM@15@Software termination signal.
SIGURG@16@Urgent condition on I/O channel.  (2)
SIGSTOP@17@Stop (cannot be caught or ignored).  (3)
SIGTSTP@18@Interactive stop.  (3)
SIGCONT@19@Continue if stopped (cannot be caught or ignored).  (4)
SIGCHLD@20@To parent on child stop or exit.  (2)
SIGTTIN@21@Background read attempted from control terminal.  (3)
SIGTTOU@22@Background write attempted from control terminal.  (3)
SIGIO@23@Input/Output possible or completed.  (2)
SIGXCPU@24@CPU time limit exceeded (see the \*Lsetrlimit(\|)\*O function).
SIGXFSZ@25@File size limit exceeded (see the \*Lsetrlimit(\|)\*O function).
SIGVTALRM@26@Virtual time alarm (see the \*Lsetitimer(\|)\*O function).
SIGPROF@27@Profiling time alarm (see the \*Lsetitimer(\|)\*O function).
SIGWINCH@28@Window size change.  (2)
SIGINFO@29@Information request.  (2)
SIGUSR1@30@User-defined signal 1.
SIGUSR2@31@User-defined signal 2.
.sp
.TE
.\" End Digital-specific information CORRECTION
.PP
\f(HBNotes to table:\fP
.PP
.VL 4
.LI "(1)"
Default action includes creating a core dump file.
.LI "(2)"
Default action is to ignore these signals.
.LI "(3)"
Default action is to stop the process receiving these
signals.
.LI "(4)"
Default action is to restart or continue the process
receiving these signals.
.LE
.PP
The three types of actions that can be associated with a signal:
SIG_DFL, SIG_IGN, or a pointer to a function are described
as follows:
.VL 1i
.LI "SIG_DFL"
Default action: signal-specific default action.
.IP
Except for those signal numbers marked with a (2), (3), or (4), the
default action for a signal is to end the receiving process with all
of the consequences described in the \*L_exit(\|)\*O system call. In
addition, a memory image file is created in the current directory
of the receiving process if the \*Vsignal \*Oparameter is one for
which a superscript 1 appears in the preceding list and the following
conditions are met:
.ML
.LI
The effective user ID and the real user ID of the receiving process
are equal.
.LI
An ordinary file named \*Lcore\*O exists in the current directory
and is writable, or it can be created. If the file must be created,
it will have the following properties:
.ML
.LI
The access permission code 0666 (0x1B6), modified by the file
creation mask (see the \*Lumask(\|)\*O function).
.LI
A file owner ID that is the same as the effective user ID of the
receiving process.
.LI
A file group ID that is the same as the effective group ID of
the receiving process.
.LE
.LE
.IP
For signal numbers marked with a superscript 4, the default action is to restart
the receiving process if it is stopped, or to continue execution of
the receiving process.
.IP
For signal numbers marked with a superscript 3, the default action is to stop
the execution of the receiving process temporarily. When a process
stops, a SIGCHLD signal is sent to its parent process, unless
the parent process has set the SA_NOCLDSTOP bit. While a
process is stopped, any additional signals that are sent to the process
are not delivered until the process is continued. An exception to
this is SIGKILL, which always terminates the receiving process.
Another exception is SIGCONT, which always causes the receiving
process to restart or continue running. A process whose parent has
ended shall be sent a SIGKILL signal if the SIGTSTP, SIGTTIN,
or SIGTTOU signals are generated for that process.
.IP
For signal numbers marked with a superscript 2, the default action is to ignore
the signal. In this case, delivery of the signal has no effect on
the receiving process.
.IP
If a signal action is set to SIG_DFL while the signal
is pending, the signal remains pending.
.LI "SIG_IGN"
Ignore signal.
.IP
Delivery of the signal has no effect on the receiving process.
If a signal action is set to SIG_IGN while the signal is
pending, the pending signal is discarded.
.IP
Note that the SIGKILL, SIGSTOP, and SIGCONT signals cannot be ignored.
.LI "\*Vpointer to a function\*O"
Catch signal.
.IP
Upon delivery of the signal, the receiving process is to run the
signal-catching function specified by the pointer to function. The
signal-handler subroutine can be declared as follows:
.IP
.RS
void handler(signal)
.nL
int signal;\*O
.RE
.IP
The \*Vsignal\*O parameter is the signal number.
.LE
.PP
A new signal mask is calculated and installed for the duration
of the signal-catching function (or until \*Lsigprocmask(\|)\*O or\*L
sigsuspend(\|)\*O system calls are made). This mask is formed by taking
the union of the process signal mask, the mask associated with the
action for the signal being delivered, and a mask corresponding to
the signal being delivered. The mask associated with the signal-catching
function is not allowed to block those signals that cannot be ignored.
This is enforced by the kernel without causing an error to be indicated.
If and when the signal-catching function returns, the original signal
mask is restored (modified by any \*Lsigprocmask(\|)\*O calls that
were made since the signal-catching function was called) and the receiving
process resumes execution at the point it was interrupted.
.PP
The signal-catching function can cause the process to resume in
a different context by calling the \*Llongjmp(\|)\*O subroutine. When
the\*L longjmp(\|)\*O subroutine is called, the process leaves the
signal stack, if it is currently on it, and restores the process signal
mask to the state when the corresponding \*Lsetjmp(\|)\*O call was
made.
.PP
Once an action is installed for a specific signal, it remains
installed until another action is explicitly requested (by another
call to the\*L sigaction(\|)\*O system call), or until one of the \*Lexec\*O
system calls is called.
.PP
If a signal action is set to a pointer to a function while the
signal is pending, the signal remains pending.
.PP
When signal-catching functions are invoked asynchronously with
process execution, the behavior of some of the functions defined by
this standard is unspecified if they are called from a signal-catching
function.  The following set of functions are reentrant with respect
to signals (that is, applications can invoke them, without restriction,
from signal-catching functions):
.PP
.TS
tab(@);
l l l l.
\*L_exit()\*O@\*Laccess()\*O@\*Lalarm()\*O@\*Lchdir()\*O
\*Lchmod()\*O@\*Lchown()\*O@\*Lclose()\*O@\*Lcreat()\*O
\*Ldup2()\*O@\*Ldup()\*O@\*Lexec()\*O@\*Lfcntl()\*O
\*Lfork()\*O@\*Lfstat()\*O@\*Lgetegid()\*O@\*Lgeteuid()\*O
\*Lgetgid()\*O@\*Lgetgroups()\*O@\*Lgetpgrp()\*O@\*Lgetpid()\*O
\*Lgetppid()\*O@\*Lgetuid()\*O@\*Lkill()\*O@\*Llink()\*O
\*Llseek()\*O@\*Lmkdir()\*O@\*Lmkfifo()\*O@\*Lopen()\*O
\*Lpause()\*O@\*Lpipe()\*O@\*Lread()\*O@\*Lrename()\*O
\*Lrmdir()\*O@\*Lsetgid()\*O@\*Lsetpgrp()\*O@\*Lsetuid()\*O
\*Lsigaction()\*O@\*Lsigaddset()\*O@\*Lsigdelset()\*O@\*Lsigfillset()\*O
\*Lsiginitset()\*O@\*Lsigismember()\*O@\*Lsignal()\*O@\*Lsigpending()\*O
\*Lsigprocmask()\*O@\*Lsigsuspend()\*O@\*Lsleep()\*O@\*Lstatx()\*O
\*Ltcdrain()\*O@\*Ltcflow()\*O@\*Ltcflush()\*O@\*Ltcgetattr()\*O
\*Ltcgetprgp()\*O@\*Ltcsendbreak()\*O@\*Ltcsetattr()\*O@\*Ltcsetpgrp()\*O
\*Ltime()\*O@\*Ltimes()\*O@\*Lumask()\*O@\*Luname()\*O
\*Lunlink()\*O@\*Lustat()\*O@\*Lutime()\*O@\*Lwait2()\*O
\*Lwait()\*O@\*Lwrite()\*O@@
.TE
.PP
All other system calls should not be called from signal-catching
functions since their behavior is undefined.
.SH "RELATED INFORMATION"
.PP
Functions:
\*Lsigaction\*O(2),
\*Lsigblock\*O(2),
\*Lsigemptyset\*O(3),
\*Lsiginterrupt\*O(3),
\*Lsiglongjmp\*O(3),
\*Lsigpause\*O(3),
\*Lsigpending\*O(2),
\*Lsigprocmask\*O(2),
\*Lsigreturn\*O(2),
\*Lsigset\*O(3),
\*Lsigsetjmp\*O(3),
\*Lsigstack\*O(2),
\*Lsigsuspend\*O(2),
\*Lsigvec\*O(2),
\*Lsigwait\*O(3)
.EQ
delim off
.EN

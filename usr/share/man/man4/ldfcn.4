.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: ldfcn.4,v $ $Revision: 3.2.4.3 $ (DEC) $Date: 1993/12/15 20:28:55 $
.\"
\" -----------------------------------------------------
\" | Copyright MIPS Computer Systems, Inc.  All Rights |
\" | Reserved.                                         |
\" -----------------------------------------------------
\" $Header: /usr/doc/osf1doc/refpages/rcs/src/BASE/DEC/man4/ldfcn.4,v 3.2.4.3 1993/12/15 20:28:55 Blaise_Corcoran Exp $
.\" .ds ]W MIPS Computer Systems
.TH ldfcn 4
.SH NAME
\*Lldfcn\*O \- Common object file access routines
.SH SYNOPSIS
.PP
.sS
\*L#include <stdio.h>\*O
.nL
\*L#include <filehdr.h>\*O
.nL
\*L#include <syms.h>\*O
.nL
\*L#include <ldfcn.h>\*O
.sE
.SH DESCRIPTION
.iX "common object file" "access routines"
.iX "access routines" "common object file"
.PP
The common object file access routines
are a collection of functions
for reading an object file
that is in common object file form.
Although the calling program must know the detailed structure of the
parts of the object file that it processes,
the routines effectively insulate the calling program
from knowledge of the overall structure of the object file.
.PP
The interface between the calling program and the object file access
routines is based on
the defined type
LDFILE (defined as \*Lstruct ldfile\*O),
which is declared in the header file \*L<ldfcn.h>\*O.
Primarily, this structure provides uniform access to
simple object files and object files that are members of an
archive file.
.PP
The function \*Lldopen\*O(3) allocates and initializes the
LDFILE structure, reads in the symbol table header, if present, and returns a
pointer to the structure to the calling program. The fields of the
LDFILE structure can be accessed individually through
macros defined in \*L<ldfcn.h>\*O.
The fields contain the following information:
.TP 15
\s-1LDFILE\s+1 \(**ldptr;
.TP 15
\s-1TYPE\s+1(ldptr)
The file magic number, used to distinguish between archive members and simple
object files.
.TP 15
\s-1IOPTR\s+1(ldptr)
The file pointer returned by \f2fopen\fP(3) and used
by the standard input/output functions.
.TP 15
\s-1OFFSET\s+1(ldptr)
The file address of the beginning of the object file;
if the object file is a member of an archive file,
the offset is nonzero.
.TP 15
\s-1HEADER\s+1(ldptr)
The file header structure of the object file.
.TP 15
\s-1SYMHEADER\s+1(ldptr)
The symbolic header structure for the symbol table associated with the object
file.
.TP 15
\s-1PFD\s+1(ldptr)
The file table associated with the symbol table.
.TP 15
\s-1SYMTAB\s+1(ldptr)
A pointer to a copy of the symbol table in memory. It's accessed through the
pCHDR structure (see cmplrs/stsupport.h). If no symbol
table is present, this field is NULL.  \*LNOTE:\*O  This macro causes the
whole symbol table to be read.
.TP 15
\s-1LDSWAP\s+1(ldptr)
If the header and symbol table structures are swapped within the object
file and all access requires using libsex, this field is
set to true.  \*LNOTE:\*O  If you use \*Vlibmld\*O routines, all
structures, except the optional header and auxiliaries, are swapped.
.PP
The object file access functions can be divided into four
categories:
.AL
.LI
Functions that open or close an object file
.sp 0.4v
\*Lldopen\*O(3) and \*Vldaopen\*O
open a common object file.
\*Lldclose\*O(3) and
\*Vldaclose\*O
close a common object file.
.LI
Functions that return header or symbol table information
.sp 0.4v
\*Lldahread\*O(3)
reads the archive header of a member of an archive file.
.sp 0.4v
\*Lldfhread\*O(3)
reads the file header of a common object file.
.sp 0.4v
\*Lldshread\*O(3)
and
\*Vldnshread\*O
read a section header of a common object file.
.sp 0.4v
\*Lldtbread\*O(3)
reads a symbol table entry of a common object file.
.sp 0.4v
\*Lldgetname\*O(3)
retrieves a symbol name from a symbol table entry or from the string table.
.sp 0.4v
\*Lldgetaux\*O(3)
retrieves a pointer into the aux table for the specified ldptr.
.sp 0.4v
\*Lldgetpd\*O(3)
retrieves a procedure descriptor.
.LI
Functions that position an object file at (seek to)
the start of the section, relocation,
or line number information for a particular section
.sp 0.4v
\*Lldohseek\*O(3)
seeks to the optional file header of a common object file.
\*Lldsseek\*O(3)
and
\*Vldnsseek\*O
seek to a section of a common object file.
.sp 0.4v
\*Lldrseek\*O(3)
and
\*Vldnrseek\*O
seek to the relocation information for a section of a common
object file.
.sp 0.4v
\*Lldlseek\*O(3)
and
\*Vldnlseek\*O
seek to the line number information for a section of a common object file.
.sp 0.4v
\*Lldtbseek\*O(3)
seeks to the symbol table of a common object file.
.LI
Miscellaneous functions
.sp 0.4v
\*Lldtbindex\*O(3)
returns the
index of a particular common object
file symbol table entry.
.sp 0.4v
.IR ranhashinit
(see \*Lranhash\*O(3))
initializes the tables and constants
so that the archive hash and lookup routines can work.
.sp 0.4v
\*Lranhash\*O(3)
gives a string return the hash index for it.
.sp 0.4v
\*Lranlookup\*O
(see \*Lranhash\*O(3))
returns an archive hash bucket that is empty or matches the string argument
.sp 0.4v
\*Ldisassembler\*O(3)
prints assembly instructions
.LE
.PP
These functions are described in detail in the manual pages
identified for each function.
.PP
\*Vldopen\*O
and
\*Vldaopen\*O
both return pointers to a
LDFILE\s+1 structure.
.SH MACROS
.PP
Additional access to an object file is provided through a set of macros
defined in
\*L<ldfcn.h>\*O.
These macros parallel the standard
input\/output file reading and manipulating functions.  They
translate a reference
of the LDFILE structure into a reference to its file descriptor field.
.PP
.ne 4
The following macros are provided:
.PP
.RS
.nf
GETC(ldptr)
FGETC(ldptr)
GETW(ldptr)
UNGETC(c, ldptr)
FGETS(s, n, ldptr)
FREADM((char \(**) ptr, sizeof (\(**ptr), nitems, ldptr)
FSEEK(ldptr, offset, ptrname)
FTELL(ldptr)
REWIND(ldptr)
FEOF(ldptr)
FERROR(ldptr)
FILENO(ldptr)
SETBUF(ldptr, buf)
STROFFSET(ldptr)
.RE
.fi
.PP
The STROFFSET macro calculates the address of the local
symbol's string table in
an \*(5) object file.
See the manual entries for the corresponding standard input/output library
functions for details on the use of these macros.  (The functions
are identified as 3 in Section 3 of this manual.)
.PP
The program must be loaded with the object file access routine library
\*Llibmld.a\*O.
.PP
.if !'\*p'' \{
\*LIntro\*O(5)
describes
.IR \s-1LIBDIR\s+1 " and " \s-1INCDIR\s+1 .
\}
.SH WARNINGS
.PP
The FSEEK macro defined in the header file
\*L<ldfcn.h>\*O translates into a call to the
standard input/output function
\*Lfseek\*O(3).
FSEEK should not be used to seek from the end of an archive file since
the end of an archive file cannot be the same as the end of one of
its object file members.
.SH RELATED INFORMATION
.PP
\*Lar\*O(1)
\*Lfopen\*O(3),
\*Lfseek\*O(3),
\*Lldahread\*O(3),
\*Lldclose\*O(3),
\*Lldfhread\*O(3),
\*Lldgetname\*O(3),
\*Lldlread\*O(3),
\*Lldlseek\*O(3),
\*Lldohseek\*O(3),
\*Lldopen\*O(3),
\*Lldrseek\*O(3),
\*Lldshread\*O(3),
\*Lldtbread\*O(3),
\*Lldtbseek\*O(3).
.EQ
delim off
.EN

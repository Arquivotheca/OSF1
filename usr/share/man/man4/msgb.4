.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: msgb.4,v $ $Revision: 3.2.6.3 $ (DEC) $Date: 1994/01/19 23:08:45 $
.\"
.\" Copyright (c) 1990, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\" 
.TH msgb 4
.SH NAME
.PP
\*Lmsgb\*O \- Defines a STREAMS message block
.SH SYNOPSIS
.PP
\*L#include <sys/stream.h>
.nL
struct msgb {
.nL
	struct msgb \*V*b_next\*L;
.nL
	struct msgb \*V*b_prev\*L;
.nL
	struct msgb \*V*b_cont\*L;
.nL
	unsigned char \*V*b_rptr\*L;
.nL
	unsigned char \*V*b_wptr\*L;
.nL
	struct datab \*V*b_datap\*L;
.nL
	MSG_KERNEL_FIELDS
.nL
};\*O
.SH PARAMETERS
.PP
.TP 10
\*Vb_next\*O
A pointer to the next message on the queue.
.TP
\*Vb_prev\*O
A pointer to the previous message on the queue.
.TP
\*Vb_cont\*O
A pointer to the next message block in the message.
.TP
\*Vb_rptr\*O
A pointer to the first unread data byte in the buffer.
.TP
\*Vb_wptr\*O
A pointer to the first unwritten data byte in the buffer.
.TP
\*Vb_datap\*O
A pointer to the
.B datab
structure (data block) that contains the data for the message.
.TP
MSG_KERNEL_FIELDS
Additional fields that are visible within the kernel.  The fields
included and their contents depend on the kernel configuration.
.SH DESCRIPTION
.PP
.iX "msgb"
The
\*Lmsgb\*O
structure defines a message block.  A message block carries data or
information in a stream.  A STREAMS message consists of message
blocks linked through
\*Vb_cont\*O.
Each message block points to a data block descriptor, which
in turn points to a data buffer.
.PP
The
\*Lmsgb\*O
structure is typedefed as
\*Lmblk_t\*O.
The associated data block is stored in a
\*Ldatab\*O
structure, which is typedefed as
\*Ldblk_t\*O.
.PP
The
\*Ldatab\*O
structure is defined (in
\*Lsys/stream.h\*O)
as:
.PP
.oS
struct datab {
        struct datab *  db_freep;
        unsigned char * db_base;
        unsigned char * db_lim;
        unsigned char   db_ref;
        unsigned char   db_type;
        unsigned char   db_class;
        unsigned char   db_pad[1];
};
.oE
.PP
The
\*Ldatab\*O
fields are defined as follows:
.RS
.TP 10
\*Vdb_freep\*O
Used internally by the STREAMS memory allocator.
.TP
\*Vdb_base\*O
The first byte of the buffer.
.TP
\*Vdb_lim\*O
The last byte of the buffer, plus one.
.TP
\*Vdb_ref\*O
The number of message blocks (\f3 struct msgb\f1) that reference this
data block.
.TP
\*Vdb_type\*O
The message type.
.TP
\*Vdb_class\*O
Used internally.
.TP
\*Vdb_pad\*Oe
Padding.
.RE
.PP
Messages are typed according to the value in the
\*Vdb_type \*O
field in the associated
\*Ldatab \*O
structure.  Some possible type values are:
.RS
.TP 10
M_DATA
The message contains ordinary data.
.TP
M_PROTO
The message contains internal control information and data.
.RE
.PP
As part of its support for STREAMS, OSF/I provides the following interfaces for
exchanging messages betweens STREAMS modules on the one hand and
sockets and network protocols on the other:
.ML
.LI
\*Lmbuf_to_mblk()\*O
\- Converts an mbuf chain to an mblk chain
.LI
\*Lmblk_to_mbuf()\*O
\- Converts an mblk chain to an mbuf chain
.LE
.\" Digital-specific change  -  no mbuf(4) manpage, other refs were already 
.\" commented out   dms
.\" .PP
.\" .SH RELATED INFORMATION
.\" .PP
.\"Interfaces: 
.\".BR mblk_to_mbuf(2) ,
.\".BR mbuf_to_mblk(2)
.\" Data Structures: 
.\" .BR mbuf(4)
.EQ
delim off
.EN

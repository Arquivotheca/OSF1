.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: siginfo.5,v $ $Revision: 1.1.2.3 $ (DEC) $Date: 1993/11/22 08:54:45 $
.\"
.TH siginfo 5
.SH NAME
.PP
\*Lsiginfo\*O \- details of signal generation
.SH SYNOPSIS
.PP
.sS
\*L#include <siginfo.h>\*O
.sE
.SH DESCRIPTION
.PP
The \*Lsiginfo\*O structure provides processes with information
.iX "siginfo structure"
on why a signal was generated, or a process that is monitoring
child processes may receive information that specifies why a
child process changed state.  See the \*Lsigaction\*O
and \*Lwaitpid\*O functions for more information.
.PP
The type \*Lsiginfo_t\*O contains the following members:
.PP
.VL
.LI "\*Vsi_signo\*O"
Contains the system generated signal number.  Note that for the \*Lwaitid\*O
function, this field is always SIGCHLD.
.LI "\*Vsi_error\*O"
Contains, if non-zero, the \*Lerrno\*O that is associated with the signal.
.LI "\*Vsi_code\*O"
Specifies a code that determines whether the signal was generated by
a user process, a specific signal, or by the kernel.  When the
value of \*Vsi_code\*O is less than or equal to zero (0), the
signal was generated by a user process and the \*Lsiginfo\*O
structure contains the following additional members:
.sp
.sS
\*Lpid_t \*Vsi_pid\*O   /*sending process ID*/
.nL
\*Luid_t \*Vsi_uid\*O     /*sending user ID*/
.sE
.IP
.IP
See the \*Lkill\*O and \*Lsigsend\*O functions which contain  
detailed information on these fields.
.IP
The following table describes the meaning of the code generated
by a signal.  The signals are listed in alphabetical order as
follows:
.TS
tab(@);
lfHB lfHB lfHB
lfR  lfR  lfR .
_
.sp 4p
Signal@Code@Definition
.sp 4p
_
.sp 6p
SIGBUS@BUS_ADRALN@invalid address alignment
@BUS_ADRERR@non-existent physical address
@BUS_OBJERR@object specific hardware error
.sp
SIGCHLD@CLD_EXITED@child has exited
@CLD_KILLED@child was killed
@CLD_DUMPED@child terminated abnormally
@CLD_TRAPPED@traced child has trapped
@CLD_STOPPED@child has stopped
@CLD_CONTINUED@stopped child has continued
.sp
SIGILL@ILL_ILLOPC@illegal opcode
@ILL_ILLOPN@illegal operand
@ILL_ILLADR@illegal addressing mode
@ILL_ILLTRP@illegal trap
@ILL_PRVOPC@privileged opcode
@ILL_PRVREG@privileged register
@ILL_COPROC@coprocessor error
@ILL_BADSTK@internal stack error
.sp
SIGFPE@FPE_INTDIV@integer divide by zero
@FPE_INTOVF@integer overflow
@FPE_FLTDIV@floating point divide by zero
@FPE_FLTOVF@floating point overflow
@FPE_FLTUND@floating point underflow
@FPE_FLTRES@floating point inexact result
@FPE_FLTINV@invalid floating point operation
@FPE_FLTSUB@subscript out of range
.sp
SIGPOLL@POLL_IN@data input available
@POLL_OUT@output buffers available
@POLL_MSG@input message available
@POLL_ERR@I/O error
@POLL_PRI@high priority input available
@POLL_HUP@device disconnected
.sp
SIGSEGV@SEGV_MAPERR@address not mapped to object
@SEGV_ACCERR@invalid permissions for mapped object
.sp
SIGTRAP@TRAP_BRKPT@process breakpoint
@TRAP_TRACE@process trace trap
.sp 6p
_
.TE
.IP
When a signal is generated by the system, the meaning of the code is
as follows:
.TS
tab(@);
lfHB lfHB lfHB
lfR  lfR  lfR .
_
.sp 4p
Signal@Code@Definition
.sp 4p
_
.sp 6p
T{
SIGILL
.br
SIGFPE
T}@caddr_t si_addr@T{
address of faulting instruction
T}
.sp
T{
SIGSEGV
.br
SIGBUS
T}@caddr_t si_addr@T{
address of faulting memory reference
T}
.sp
SIGCHLD@pid_t si_pid@child process ID
@int si_status@T{
exit value or signal
T}
.sp
SIGPOLL@long si_band@T{
band event for \*LPOLL_IN, POLL_OUT\*O, or
\*LPOLL_MSG\*O
T}
.sp 6p
_
.TE
.IP
Note, if the signal is SIGCHLD, and the \*Vsi_code\*O is equivalent
to \*LCLD_EXITED, \*Vsi_status\*O is equivalent to the exit
value of the process.  If \*Vsi_code\*O is not equivalent to
\*LCLD_EXITED\*O, the \*Vsi_status\*O field is equivalent to the
signal that caused the process to change state.  In some instances,
\*Vsi_addr\*O may not be defined, but \*Vsi_addr\*O will appear
on the same page as the faulting instruction or memory reference.
.LE
.SH SEE ALSO
.PP
Functions: \*Lkill\*O(2), \*Lsigaction\*O(2), \*Lsigsend\*O(2), \*Lwaitid\*O(2).
.PP
Files:  \*Lsignal\*O(5).
.EQ
delim off
.EN

.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: errno.5,v $ $Revision: 1.1.5.2 $ (DEC) $Date: 1993/07/06 17:53:17 $
.\"
.\" (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
.\" ALL RIGHTS RESERVED 
.\" 
.\" OSF/1 1.2
.\"
.TH errno 5
.SH NAME
.PP
\*Lerrno\*O \- Returns error condition value
.SH SYNOPSIS
.PP
.sS
\*L#include <errno.h>\*O
.sE
.SH DESCRIPTION
.PP
.iX "errno external variable"
The \*Lerrno\*O external variable contains the most recent error
condition set by a function. The symbolic values for \*Lerrno\*O are
listed in the \*Lintro\*O reference page and in the \*LERRORS\*O
section of the individual reference pages for each function.
.PP
The \*Lexec(\|)\*O functions set \*Lerrno\*O to a value of 0 (zero)
after successful completion. Typically, other functions only set
\*Lerrno\*O to a nonzero value.
.SH EXAMPLES
.PP
The following program uses the value of \*Lerrno\*O to determine why
the requested file could not be opened.  If \*Lerrno\*O has one of the
two tested values, the program prints an appropriate message; otherwise,
the program
uses the \*perror(\|)\*O function to print out the appropriate message.
This program does not have to set
\*Lerrno\*O to a value of 0 (zero) because \*Lerrno\*O is tested only
if the \*Lopen(\|)\*O function has failed.
.oS
#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#define SLENGTH 80

main()
{
    char filespec[SLENGTH], *eol;
    int opret;
    while (TRUE) {
        printf("Enter file to be checked: ");
        fgets(filespec, SLENGTH, stdin);
        if ((eol = strchr(filespec, '\en')) != NULL) {
            *eol = '\e0';  /* Replace newline with null */
            if (*filespec == '\e0') return; /* exit program */
            opret = open(filespec,O_RDONLY,0);
            if (opret > 0)
              printf("%s: File exists\en",filespec);
            else if (errno == ENOENT)
              printf("%s: File does not exist\en",filespec);
            else if (errno == ENOTDIR)
              printf("%s: Prefix in path is not a directory\en",
                filespec);
            else
              perror(filespec);

        } else           /* Line entered too long */
          printf("Line entered is too long\en");
    }
}
.oE
.SH NOTES
.PP
To ensure that your programs are portable, you should not explicitly
declare \*Lerrno\*O to be an \*Lextern int\*O in your program.  You
should rely on the type \*Lint\*O declaration in the \*L<errno.h>\*O
include file.
.VL 1.5i
.LI "\*LAES Support Level:\*O"
Full use.
.LE
.SH RELATED INFORMATION
.PP
Functions:
\*Lintro\*O(2),
\*Lperror\*O(3),
\*Lstrerror\*O(3).
.EQ
delim off
.EN

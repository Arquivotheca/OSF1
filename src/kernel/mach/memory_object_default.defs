/*
 * (c) Copyright 1990, OPEN SOFTWARE FOUNDATION, INC.
 * ALL RIGHTS RESERVED
 */
/* 
 * Mach Operating System
 * Copyright (c) 1989 Carnegie-Mellon University
 * Copyright (c) 1988 Carnegie-Mellon University
 * Copyright (c) 1987 Carnegie-Mellon University
 * All rights reserved.  The CMU software License Agreement specifies
 * the terms and conditions for use and redistribution.
 */
/*
 * OSF/1 Release 1.0
 */
/*
 * File:	mach/memory_object_default.defs
 *
 * Abstract:
 *	Mach external memory management interface declaration; subset
 *	that is applicable to managers of kernel-created memory objects.
 */

subsystem memory_object_default 2250;

#include <mach/std_types.defs>
#include <mach/mach_types.defs>

#ifdef	KERNEL_USER
uimport <kern/mig_user_hack.h>;
#endif	KERNEL_USER

/*
 *	Pass on responsibility for the new kernel-created memory
 *	object.  The port on which this request is that port
 *	(possibly a memory object itself) registered as the "default
 *	pager".  Other arguments are as described for memory_object_init.
 *	[No reply required.]
 */
simpleroutine	memory_object_create(
		old_memory_object	: memory_object_t;
		new_memory_object	: memory_object_t = port_all_t, dealloc;
		new_object_size		: vm_size_t;
		new_control_port	: memory_object_control_t;
		new_name		: memory_object_name_t;
		new_page_size		: vm_size_t);

/*
 *	Provide initial data contents for this region of
 *	the memory object.  If data has already been written
 *	to the object, this value must be discarded; otherwise,
 *	this call acts identically to memory_object_data_write.
 */
simpleroutine	memory_object_data_initialize(
		memory_object		: memory_object_t;
		memory_control_port	: memory_object_control_t;
		offset			: vm_offset_t;
		data			: internal_memory_pointer_t);

#if	0
/*
 *	Indicate that the specified range of data in this memory object
 *	will not be requested again until it is reinitialized with
 *	memory_object_data_write or memory_object_data_initialize.
 */
simpleroutine	memory_object_data_terminate(
		memory_object		: memory_object_t;
		memory_control_port	: memory_object_control_t;
		offset			: vm_offset_t;
		size			: vm_size_t);
#else	0
skip;
#endif	0

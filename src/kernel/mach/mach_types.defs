/*
 * *****************************************************************
 * *                                                               *
 * *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
 * *                                                               *
 * *   All Rights Reserved.  Unpublished rights  reserved  under   *
 * *   the copyright laws of the United States.                    *
 * *                                                               *
 * *   The software contained on this media  is  proprietary  to   *
 * *   and  embodies  the  confidential  technology  of  Digital   *
 * *   Equipment Corporation.  Possession, use,  duplication  or   *
 * *   dissemination of the software and media is authorized only  *
 * *   pursuant to a valid written license from Digital Equipment  *
 * *   Corporation.                                                *
 * *                                                               *
 * *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
 * *   by the U.S. Government is subject to restrictions  as  set  *
 * *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
 * *   or  in  FAR 52.227-19, as applicable.                       *
 * *                                                               *
 * *****************************************************************
 */
/*
 * HISTORY
 */
/*
 * (c) Copyright 1990, OPEN SOFTWARE FOUNDATION, INC.
 * ALL RIGHTS RESERVED
 */
/* 
 * Mach Operating System
 * Copyright (c) 1989 Carnegie-Mellon University
 * Copyright (c) 1988 Carnegie-Mellon University
 * All rights reserved.  The CMU software License Agreement specifies
 * the terms and conditions for use and redistribution.
 */
/*
 * OSF/1 Release 1.0
 */
/*
 *	Mach kernel interface type declarations
 */

#ifndef	_MACH_MACH_TYPES_DEFS_
#define _MACH_MACH_TYPES_DEFS_

#include <mach/std_types.defs>

#if	KERNEL_SERVER
simport <kern/type_conversion.h>;
#endif	/* KERNEL_SERVER */

type task_t = port_t
#if	KERNEL_SERVER
		intran: task_t convert_port_to_task(port_t)
		outtran: port_t convert_task_to_port(task_t)
		destructor: task_deallocate(task_t)
#endif	/* KERNEL_SERVER */
		;


type thread_t = port_t
#if	KERNEL_SERVER
		intran: thread_t convert_port_to_thread(port_t)
		outtran: port_t convert_thread_to_port(thread_t)
		destructor: thread_deallocate(thread_t)
#endif	/* KERNEL_SERVER */
		;

#ifdef	__alpha
/*
 * Force long word alignment.
 */
type thread_state_t		= array[*:1024] of long;
#else
type thread_state_t		= array[*:1024] of int;
#endif

/*
 * Mig doesn't handle translations of the components of an array,
 * so use port_t instead of thread_t.
 */
type task_array_t = ^array[] of port_t;
type thread_array_t = ^array[] of port_t;

type vm_task_t = port_t
#if	KERNEL_SERVER
		intran: vm_map_t convert_port_to_map(port_t)
		destructor: vm_map_deallocate(vm_map_t)
#endif	/* KERNEL_SERVER */
		;

type vm_address_t = long;
type vm_offset_t = vm_address_t;
type vm_size_t = vm_address_t;
type vm_prot_t = int;
type vm_inherit_t = int;
#ifdef	__alpha
/*
 * The structure members are all longs.
 */
type vm_statistics_data_t = struct[13] of long;
#else
type vm_statistics_data_t = struct[13] of int;
#endif
type vm_machine_attribute_t = int;
type vm_machine_attribute_val_t = int;

#ifdef	__alpha
type thread_info_t		= array[*:1024] of long;
type task_info_t		= array[*:1024] of long;
#else
type thread_info_t		= array[*:1024] of int;
type task_info_t		= array[*:1024] of int;
#endif

type memory_object_t = port_t;
type memory_object_control_t = port_t
#if	KERNEL_SERVER
		intran: vm_object_t vm_object_lookup(port_t)
		outtran: port_t NEVER_HAPPENS(vm_object_t)
#endif	/* KERNEL_SERVER */
		;
type memory_object_name_t = port_t;

type memory_object_copy_strategy_t = int;

type internal_memory_pointer_t =
	^array [] of MSG_TYPE_INTERNAL_MEMORY|MSG_TYPE_BYTE
	ctype: pointer_t;

#ifdef	__alpha
/*
 * These are used to find to total size of a message for copying.
 * No interpretation of the structures is done.
 */
type machine_info_data_t = struct[6] of int;
type machine_slot_data_t = struct[11] of int;
#else
type machine_info_data_t = struct[5] of int;
type machine_slot_data_t = struct[8] of int;
#endif

type vm_page_data_t = array[4096] of MSG_TYPE_BYTE;

#ifdef	__alpha
type network_port_t = struct[6] of long;
#else
type network_port_t = struct[6] of int;
#endif


type host_t = port_t
#if	KERNEL_SERVER
		intran: host_t convert_port_to_host(port_t)
		outtran: port_t convert_host_to_port(host_t)
#endif	/* KERNEL_SERVER */
		;
type host_priv_t = port_t
#if	KERNEL_SERVER
		intran: host_t convert_port_to_host_priv(port_t)
#endif	/* KERNEL_SERVER */
		;
#ifdef	__alpha
type host_info_t 			= array[*:1024] of long;
#else
type host_info_t 			= array[*:1024] of int;
#endif
type processor_t = port_t
#if	KERNEL_SERVER
		intran: processor_t convert_port_to_processor(port_t)
		outtran: port_t convert_processor_to_port(processor_t)
#endif	/* KERNEL_SERVER */
		;
type processor_array_t 		= ^array[] of port_t;
#ifdef	__alpha
type processor_info_t		= array[*:1024] of long;
#else
type processor_info_t		= array[*:1024] of int;
#endif

type processor_set_t = port_t
#if	KERNEL_SERVER
		intran: processor_set_t convert_port_to_pset(port_t)
		outtran: port_t convert_pset_to_port(processor_set_t)
		destructor: pset_deallocate(processor_set_t)
#endif	/* KERNEL_SERVER */
		;

type processor_set_array_t = ^array[] of port_t;

type processor_set_name_t = port_t
#if	KERNEL_SERVER
		intran: processor_set_t convert_port_to_pset_name(port_t)
		outtran: port_t convert_pset_name_to_port(processor_set_t)
		destructor: pset_deallocate(processor_set_t)
#endif	/* KERNEL_SERVER */
		;

type processor_set_info_t	= array[*:1024] of int;	

type kernel_version_t		= (MSG_TYPE_STRING, 512*8);

import <mach/mach_types.h>;

#endif	/* _MACH_MACH_TYPES_DEFS_ */

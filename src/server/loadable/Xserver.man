.\"
.\" *****************************************************************
.\" *                                                               *
.\" *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
.\" *                                                               *
.\" *   All Rights Reserved.  Unpublished rights  reserved  under   *
.\" *   the copyright laws of the United States.                    *
.\" *                                                               *
.\" *   The software contained on this media  is  proprietary  to   *
.\" *   and  embodies  the  confidential  technology  of  Digital   *
.\" *   Equipment Corporation.  Possession, use,  duplication  or   *
.\" *   dissemination of the software and media is authorized only  *
.\" *   pursuant to a valid written license from Digital Equipment  *
.\" *   Corporation.                                                *
.\" *                                                               *
.\" *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
.\" *   by the U.S. Government is subject to restrictions  as  set  *
.\" *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
.\" *   or  in  FAR 52.227-19, as applicable.                       *
.\" *                                                               *
.\" *****************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: Xserver.man,v $ $Revision: 1.1.2.3 $ (DEC) $Date: 92/11/24 10:37:13 $
.\"
.TH XDEC 1 "Release 5"  "X Version 11"
.SH NAME
Xdec \- X Window System server
.SH SYNOPSIS
.B Xdec
[option ...] 
.SH DESCRIPTION
The
.I Xdec
command starts the X server.
The
.I Xdec
command supports the run-time loading and execution of X server libraries on
OSF1 platforms with graphics devices. The command loads appropriate
libraries to handle graphics devices installed on the workstation and
you can configure the command to use any or all of the extension
libraries available on your workstation.
.SH "STARTING THE SERVER"
The server is usually started from the X Display Manager program \fIxdm\fP.
The 
.I xdm
daemon, started from the system initialization script
.I /usr/sbin/rc3.d/S95xdm, 
starts the 
.I Xdec
command when the system enters multiuser mode.
This utility takes care of keeping
the server running, prompting for usernames and passwords, and starting up
the user sessions.  It is easily configured for sites that wish to provide
nice, consistent interfaces for novice users (loading convenient sets of
resources, starting up a window manager, clock, and nice selection of 
terminal emulator windows).
.PP
When the X server starts up, it takes over the display.  If you 
are running on a workstation whose console is the display, you cannot log into
the console while the server is running.
.SH "NETWORK CONNECTIONS"
The X server supports connections made using the following reliable
byte-streams:
.TP 4
.I TCP\/IP
.br
The server listens on port 6000+\fIn\fP, where \fIn\fP is the display number.
.TP 4
.I "Unix Domain"
The X server uses \fI/tmp/.X11-unix/X\fBn\fR as the filename for 
the socket, where \fIn\fP is the display number.
.TP 4
.I "Shared Memory"
The X server uses shared memory.
.TP 4
.I "DECnet"
.br
The server responds to connections to object \fIX$X\fBn\fR, where \fIn\fP
is the display number.  
.SH OPTIONS
The X server accepts the following command line options:
.TP 8
.B \-a \fInumber\fP
sets pointer acceleration (i.e. the ratio of how much is reported to how much
the user actually moved the pointer).
.TP 8
.B \-ac
disables host-based access control mechanisms.  Enables access by any host,
and permits any host to modify the access control list.
Use with extreme caution.
This option exists primarily for running test suites remotely.
.TP 8
.B \-audit \fIlevel\fP
Sets the audit trail level.  The default level is 1, meaning only connection
rejections are reported.  Level 2 additionally reports all successful
connections and disconnects.  Level 0 turns off the audit trail.
Audit lines are sent as standard error output.
.TP 8
.B \-auth \fIauthorization-file\fP
Specifies a file which contains a collection of authorization records used
to authenticate access.  See also the \fIxdm\fP and \fIXsecurity\fP manual
pages.
.TP 8
.B bc
disables certain kinds of error checking, for bug compatibility with
previous releases (e.g., to work around bugs in R2 and R3 xterms and toolkits).
Deprecated.
.TP 8
.B \-bs
disables backing store support on all screens.
.TP 8
.B \-c
turns off key-click.
.TP 8
.B c \fIvolume\fP
sets key-click volume (allowable range: 0-100).
.TP 8
.B \-cc \fIclass\fP
sets the visual class for the root window of color screens.
The class numbers are as specified in the X protocol.
Not obeyed by all servers.
.TP 8
.B \-co \fIfilename\fP
sets name of RGB color database.
.TP 8
.B \-core
causes the server to generate a core dump on fatal errors.
.TP 8
.B \-f \fIvolume\fP
sets feep (bell) volume (allowable range: 0-100).
.TP 8
.B \-fc \fIcursorFont\fP
sets default cursor font.
.TP 8
.B \-fn \fIfont\fP
sets the default font.
.TP 8
.B \-fp \fIfontPath\fP
sets the search path for fonts.  This path is a comma separated list of
directories which the X server searches for font databases. All
components of the list must be valid font directories or the X server
will exit, not finding the default font.
.TP 8
.B \-help
prints a usage message.
.TP 8
.B \-I
causes all remaining command line arguments to be ignored.
.TP 8
.B \-ld \fIkilobytes\fP
sets the data space limit of the server to the specified number of kilobytes.
A value of zero makes the data size as large as possible.  The default value
of \-1 leaves the data space limit unchanged.  
.TP 8
.B \-lf \fIfiles\fP
sets the number-of-open-files limit of the server to the specified number.
A value is zero makes the limit as large as possible.  The default value
of \-1 leaves the limit unchanged.  
.TP 8
.B \-ls \fIkilobytes\fP
sets the stack space limit of the server to the specified number of kilobytes.
A value of zero makes the stack size as large as possible.  The default value
of \-1 leaves the stack space limit unchanged.  
.TP 8
.B \-logo
turns on the X Window System logo display in the screen-saver.
There is currently no way to change this from a client.
.TP 8
.B nologo
turns off the X Window System logo display in the screen-saver.
There is currently no way to change this from a client.
.TP 8
.B \-p \fIminutes\fP
sets screen-saver pattern cycle time in minutes.
.TP 8
.B \-pn
permits the server to continue running if it fails to establish all of
its well-known sockets, but establishes at least one. (Default)
.TP 8
.B pn
Prevents the server from continueing to run if it fails to establish all of
its well-known sockets. 
.TP 8
.B \-r
turns off auto-repeat.
.TP 8
.B r
turns on auto-repeat.
.TP 8
.B \-s \fIminutes\fP
sets screen-saver timeout time in minutes.
.TP 8
.B \-su
disables save under support on all screens.
.TP 8
.B \-t \fInumber\fP
sets pointer acceleration threshold in pixels (i.e. after how many pixels
pointer acceleration should take effect).
.TP 8
.B \-terminate
causes the server to terminate at server reset, instead of continuing to run.
.TP 8
.B \-to \fIseconds\fP
sets default connection timeout in seconds.
.TP 8
.B \-tst
disables all testing extensions (e.g., XTEST, XTrap, XTestExtension1).
.TP 8
.B tty\fIxx\fP
This option is a valid option but
is ignored by the
.I Xdec
server.
.TP 8
.B v
sets video-off screen-saver preference.
.TP 8
.B \-v
sets video-on screen-saver preference.
.TP 8
.B \-wm
forces the default backing-store of all windows to be WhenMapped;
a cheap trick way of getting backing-store to apply to all windows.
.TP 8
.B \-x \fIextension\fP
loads the specified extension at init. Some extensions have only a small
portion loaded at initialization, saving memory for when the extension
is requested. This option forces the complete loading of the extension
at initialization time, saving a small amount of startup time when the
first request for the extension is made by a client application. Not all
extensions will implement this feature.
.PP
You can also have the X server connect to \fIxdm\fP using XDMCP.
Although this is not typically useful as it does not allow \fIxdm\fP
to manage the server process,
it can be used to debug XDMCP implementations, and serves as a sample
implementation of the server side of XDMCP.  For more information on this
protocol, see the \fIX Display Manager Control Protocol\fP specification.
The following options control the behavior of XDMCP.
.TP 8
.B \-query \fIhost-name\fP
Enable XDMCP and send Query packets to the specified host.
.TP 8
.B \-broadcast
Enable XDMCP and broadcast BroadcastQuery packets to the network.  The
first responding display manager will be chosen for the session.
.TP 8
.B \-indirect \fIhost-name\fP
Enable XDMCP and send IndirectQuery packets to the specified host.
.TP 8
.B \-port \fIport-num\fP
Use an alternate port number for XDMCP packets.  Must be specified before
any \-query, \-broadcast or \-indirect options.
.TP 8
.B \-class \fIdisplay-class\fP
XDMCP has an additional display qualifier used in resource lookup for
display-specific options.  This option sets that value, by default it 
is "MIT-Unspecified" (not a very useful value).
.TP 8
.B \-cookie \fIxdm-auth-bits\fP
When testing XDM-AUTHENTICATION-1, a private key is shared between the
server and the manager.  This option sets the value of that private
data (not that it is very private, being on the command line!).
.TP 8
.B \-displayID \fIdisplay-id\fP
Yet another XDMCP specific value, this one allows the display manager to
identify each display so that it can locate the shared key.
.PP
The following are options for the controlling the loadable portion of
the X server.
See the \fIModular Extensible Server\fP section below for more
information.
.TP 8
.B \-config \fIconfiguration file\fP
Specifies the name of a configuration file to use to configure the
loadable X server. The default configuration file is 
\fI/usr/lib/X11/Xserver.conf\fP.
.TP 8
.B \-errorFile \fIerror file\fP
Specifies the name of an error file to use to redirect error messages.
The default is to send error messages to standard error.
.TP 8
.B \-showDefaults
Displays the default libraries that will be used by the loadable server.
.TP 8
.B \-showConfigs
Displays the libraries specified in the configuration file that will be
used by the loadable server.
.TP 8
.B \-showUsed
Displays the merging of the default and configured lists of libraries,
showing the resultant list to be used by the loadable server.
.PP
The following are device-dependent, DEC-specific options.
When the server is run on multiscreen capable platforms, selected
device-dependent options take an optional screen-specification argument.
Omitting the screen-specification argument defines the parameter for all
available screens.
.IP "\fB\-btn\fP \fInum\fP" 20
Specifies the number of buttons on the pointer device.  The default is three
for a mouse device and four for a tablet device.
.IP "\fB\-bp\fP[\fIscreen\fP]  \fIcolor\fP" 20
Sets the color of black pixels for the screen.
The \fIcolor\fP argument can be a named color from the
.PN rgb
database or a number sign (\f(CW#\fP) followed by a hexidecimal number.
.IP "\fB\-vclass\fP[\fIscreen\fP]  \fIvisual class\fP" 20
Sets the visual class for the root window of the screen.  Possible values
are
.PN StaticGray ,
.PN StaticColor ,
.PN PseudoColor ,
.PN GrayScale ,
.PN TrueColor .
and
.PN DirectColor .
.IP "\fB\-dpi\fP[\fIscreen\fP]  \fInum\fP" 20
Sets the dots per inch for the x and y coordinates.
.IP "\fB\-dpix\fP[\fIscreen\fP]  \fInum\fP" 20
Sets the dots per inch for the x coordinates.
.IP "\fB\-dpiy\fP[\fIscreen\fP]  \fInum\fP" 20
Sets the dots per inch for the y coordinates.
.IP "\fB\-edge_bottom\fP\fIscr1\fP \fIscr2\fP" 20
Attaches the bottom edge of the screen specified by \fIscr1\fP to the
screen specified by \fIscr2\fP.
.IP "\fB\-edge_left\fP\fIscr1\fP \fIscr2\fP" 20
Attaches the left edge of the screen specified by \fIscr1\fP to the
screen specified by \fIscr2\fP.
.IP "\fB\-edge_right\fP\fIscr1\fP \fIscr2\fP" 20
Attaches the right edge of the screen specified by \fIscr1\fP to the
screen specified by \fIscr2\fP.
.IP "\fB\-edge_top\fP\fIscr1\fP \fIscr2\fP" 20
Attaches the top edge of the screen specified by \fIscr1\fP to the
screen specified by \fIscr2\fP.
.IP "\fB\-wp\fP[\fIscreen\fP]  \fIcolor\fP" 20
Sets the color of white pixels for the screen.  The syntax for \fIcolor\fP
is the same as for the argument to the \fB\-bp\fP option.
***********************************************************************
**************** NOT YET IMPLEMENTED **********************************
***********************************************************************
***.IP "\fB\-tb\fP \fIn\fP" 20
***Opens
***.PN /dev/tty0\fIn\fP
***\fRfor graphics tablet communications.
***The two free serial ports on the DECstation correspond to
***.PN /dev/tty00
***and 
***.PN /dev/tty01 .
***A graphics tablet must be connected through one of these two ports.
***.IP "\fB\-pcm\fP \fIn\fP" 20
***\fROpens
***.PN /dev/tty0\fIn\fP
***\fRfor Protocol Control Module (PCM) communications.
***The two free serial ports on the DECstation correspond to
***.PN /dev/tty00
***and 
***.PN /dev/tty01 .
***Dial boxes and button boxes must be connected through these two ports.
***********************************************************************
**************** NOT YET IMPLEMENTED **********************************
***********************************************************************
.SH Restrictions
If options not listed in this reference page are 
used, the server may fail. Using invalid options for the X server 
in the 
.PN /usr/lib/X11/xdm/Xservers
file may cause the X server to start and fail repetatively.
.PP
Multiscreen configurations may contain any configuration display devices.
.PP
To connect two screens, two command line options must be
issued.  Attaching two screens using only one 
.PN -edge_ 
argument produces a one-way mouse-travel path.
You can create a wrap-around mouse path by attaching 
noncontiguous screen edges.
The 
.PN -edge_ 
arguments are disabled on single screen systems.
.PP
Nonsensical screen connections are not allowed; the top edge of a
particular screen must be connected with the bottom edge of
another screen, and the right edge of a particular screen
must be connected with the left edge of another screen.
Left and right edges cannot be connected to top or bottom
edges.
.SH Examples
The following example specifies that screen 
.PN 0
has a resolution of
100x100 dots
per inch and screen 
.PN 1 
has a resolution of 75x70 dots per inch:
.EX
Xdec -dpi0 100 -dpix1 75 -dpiy1 70
.EE
.PP
If no screen is specified, the value specified is used
for all screens.  If the screen resolution is not specified using
command line options, a default value
based on pixel dimensions and screen size is calculated for
each screen.
.PP
The following example specifies that black pixels on screen
.PN 1
have the hexadecimal value 3a009e005c0 prefixed with a
number sign (\f(CW#\fP) and white pixels on screen
.PN 1
are color "wheat" from the X rgb color database.
.EX
Xdec -bp1 #3a009e005c0 -wp1 wheat
.EE
For monochrome display devices, values of 0 and 1
are the only valid pixel colors.
.PP
To specify the default visual class
of a root window on a particular screen, append the screen
number (\f(CW0\fP, \f(CW1\fP, or \f(CW2\fP) to the
.PN \-vclass
command line option.  Possible visual classes are:
StaticGray, StaticColor, PseudoColor, GrayScale, TrueColor, and DirectColor.
The following example specifies that the screen
.PN 0
root window is a TrueColor visual, and the screen
.PN 1
root window is a PseudoColor visual.
.EX
Xdec -class0 TrueColor -class1 PseudoColor
.EE
.PP
The following example attaches screen
.PN 1
above screen
.PN 0
and screen
.PN 2
to the right of screen
.PN 0
(an L-shaped configuration):
.EX
Xdec -edge_top0 1 -edge_bottom1 0 -edge_right0 2 -edge_left2 0
.EE
.PP
The following example is identical to the default state (a
horizontal line) with the addition of a wraparound from
screen
.PN 0
to screen
.PN 2 :
.EX
Xdec -edge_left0 2 -edge_right0 1 -edge_left1 0 -edge_right1 2 \e
-edge_left2 1 -edge_right2 0
.SH SECURITY
.PP
The X server implements a simplistic authorization protocol,
MIT-MAGIC-COOKIE-1 which uses data private to authorized clients and the
server.  This is a rather trivial scheme; if the client passes authorization
data which is the same as the server has, it is allowed access.  This scheme
is worse than the host-based access control mechanisms in environments with
unsecure networks as it allows any host to connect, given that it has
discovered the private key.  But in many environments, this level of
security is better than the host-based scheme as it allows access control
per-user instead of per-host.
.PP
***********************************************************************
**************** NOT YET IMPLEMENTED **********************************
***********************************************************************
***In addition, the server provides support for a DES-based authorization
***scheme, XDM-AUTHORIZATION-1, which is more secure (given a secure key
***distribution mechanism).  This authorization scheme can be used in
***conjunction with XDMCP's authentication scheme (XDM-AUTHENTICATION-1)
***or in isolation.
***THIS NEEDS TO BE CHECKED OUT
***********************************************************************
**************** NOT YET IMPLEMENTED **********************************
***********************************************************************
.PP
The authorization data is passed to the server in a private file named with
the \fB\-auth\fP command line option.  Each time the server is about to
accept the first connection after a reset (or when the server is starting),
it reads this file.  If this file contains any authorization records, the
local host is not automatically allowed access to the server, and only
clients which send one of the authorization records contained in the file in
the connection setup information will be allowed access.  See the \fIXau\fP
manual page for a description of the binary format of this file.
Maintenance of this file, and distribution of its contents to remote sites
for use there is left as an exercise for the reader.
***THIS LAST LINE NEEDS TO BE REPLACED WITH THE WRITER'S EXERCISE
.PP
***********************************************************************
**************** NOT YET IMPLEMENTED **********************************
***********************************************************************
***The server also provides support for SUN-DES-1, using Sun's Secure RPC.
***It involves encrypting data with the X server's public key.
***See the \fIXsecurity\fP manual page for more information.
***THIS NEEDS TO BE CHECKED OUT
***********************************************************************
**************** NOT YET IMPLEMENTED **********************************
***********************************************************************
.PP
The X server also uses a host-based access control list for deciding
whether or not to accept connections from clients on a particular machine.
If no other authorization mechanism is being used,
this list initially consists of the host on which the server is running as
well as any machines listed in the file \fI/etc/X\fBn\fI.hosts\fR, where
\fBn\fP is the display number of the server.  Each line of the file should
contain either an Internet hostname (e.g. expo.lcs.mit.edu) or a DECnet
hostname in double colon format (e.g. hydra::).  There should be no leading
or trailing spaces on any lines.  For example:
.sp
.in +8
.nf 
joesworkstation
corporate.company.com
star::
bigcpu::
.fi
.in -8
.PP
Users can add or remove hosts from this list and enable or disable access
control using the \fIxhost\fP command from the same machine as the server.
.PP
***********************************************************************
**************** NOT YET IMPLEMENTED **********************************
***********************************************************************
***The X protocol intrinsically does not have any notion of window operation
***permissions or place any restrictions on what a client can do; if a program can
***connect to a display, it has full run of the screen.  Sites that have better
***authentication and authorization systems (such as Kerberos) might wish to make
***use of the hooks in the libraries and the server to provide additional
***security models.
***THIS NEEDS TO BE CHECKED OUT
***********************************************************************
**************** NOT YET IMPLEMENTED **********************************
***********************************************************************
.SH SIGNALS
The X server attaches special meaning to the following signals:
.TP 8
.I SIGHUP
This signal causes the server to close all existing connections, free all
resources, and restore all defaults.  It is sent by the display manager
whenever the main user's main application (usually an \fIxterm\fP or window
manager) exits to force the server to clean up and prepare for the next
user.
.TP 8
.I SIGTERM
This signal causes the server to exit cleanly.
.TP 8
.I SIGUSR1
This signal is used quite differently from either of the above.  When the
server starts, it checks to see if it has inherited SIGUSR1 as SIG_IGN
instead of the usual SIG_DFL.  In this case, the server sends a SIGUSR1 to
its parent process after it has set up the various connection schemes.
\fIXdm\fP uses this feature to recognize when connecting to the server
is possible.
.SH FONTS
Fonts are usually stored as individual files in directories.  The X server
can obtain fonts from directories and/or from font servers.
The list of directories and font servers
the X server uses when trying to open a font is controlled
by the \fIfont path\fP.  Although most sites will choose to have the X server
start up with the appropriate font path (using the \fI\-fp\fP option mentioned
above), it can be overridden using the \fIxset\fP program.
.PP
The default font path for the X server contains five directories:
.TP 8
.I /usr/lib/X11/fonts/misc
This directory contains many miscellaneous bitmap fonts that are useful on all
systems.  It contains a family of fixed-width fonts,
a family of fixed-width fonts from Dale Schumacher,
several Kana fonts from Sony Corporation,
two JIS Kanji fonts,
two Hangul fonts from Daewoo Electronics,
two Hebrew fonts from Joseph Friedman,
the standard cursor font, two cursor fonts from
Digital Equipment Corporation, and cursor and glyph fonts
from Sun Microsystems.
It also has various font name aliases for the fonts, including
\fBfixed\fP and \fBvariable\fP.
.TP 8
.I /usr/lib/X11/fonts/Speedo
This directory contains outline fonts for Bitstream's Speedo rasterizer.
A single font face, in normal, bold, italic, and bold italic, is provided,
contributed by Bitstream, Inc.
.TP 8
.I /usr/lib/X11/fonts/Type1
This directory contains "Type 1" (PostScript) format outline fonts for
IBM's rasterizer.
This directory contains "Type 1" (PostScript) outline font, donated by
IBM, for the IBM Courier typeface.  (IBM Courier is a registered
trademark of IBM) and the Utopia font donated by Adobe Systems, Inc.
.TP 8
.I /usr/lib/X11/fonts/75dpi
This directory contains bitmap fonts contributed by Adobe Systems, Inc.,
Digital Equipment Corporation, Bitstream, Inc.,
Bigelow and Holmes, and Sun Microsystems, Inc.
for 75 dots per inch displays.  An integrated selection of sizes, styles, 
and weights are provided for each family.
.TP 8
.I /usr/lib/X11/fonts/100dpi
This directory contains 100 dots per inch versions of some of the fonts in the 
\fI75dpi\fP directory.  
.PP
Font databases are created by running the \fImkfontdir\fP program in the
directory containing the compiled versions of the fonts (the \fI.pcf\fP files).
Whenever fonts are added to a directory, \fImkfontdir\fP should be rerun
so that the server can find the new fonts.  \fBIf \fImkfontdir\fP is not
run, the server will not be able to find any fonts in the directory.\fR
.SH MODULAR EXTENSIBLE SERVER
The
.I Xdec
command is simply a bootstrap program which loads the X server
components and transfers execution to them. The command also contains
some utility routines to allow the X server components to load even more
components.
.PP
The X server is composed of several sections.
.TP 8
.I system
These are the system libraries used for such things as math routines
and DECNet interfaces.
.TP 8
.I core
These components form the core portion of the X server. They include
operating system interfaces, X protocol interfaces, routines for
handling server resources, window trees, and fonts, some generic frame
buffer handlers, and routines for interfacing with the workstation
device driver (the interface to the frame buffers, keyboard, and pointer
devices).
.TP 8
.I device handlers
These components are made available to the workstation device driver
interface. The interface loads them to handle specific graphics devices
found on the system. The components contain code for initializing the
graphics devices and for performing specialized drawing operations
tailored for the specific hardware on the device.
.TP 8
.I extensions
Extension components contain the code for X extensions. The components
are loaded by the core components from a configurable list. Some
extensions may only be partially loaded at server initialization time to
save memory. When the first client requests the use of an extension, the
extension code loads the remainder of the extension and continues
processing the requests. Some extensions may further load device
specific code to provide special handling of graphics devices or input
devices found on the system.
.TP 8
.I font renderers
By default, the core components contain font handling code for bitmap
and some scalable fonts. The core components can also load additional
font renderers to handle different font formats. One font renderer is a
communication interface to a font server.
***********************************************************************
**************** NOT YET IMPLEMENTED **********************************
***********************************************************************
***.TP 8
***.I input device handlers
***TBD
***.TP 8
***.I transports
***(To be implemented) Transport components handle X server communication.
***They can provide a TCP/IP, UNIX Domain, or DECNet socket based interface, a
***shared memory based interface, or some other communication interface between
***the X server and clients. The components can also be used by other
***components within the server, for example for communication between the
***X server and the font server.
***.TP 8
***.I authorization protocols
***(To be implemented) Authorization protocols are methods used for
***verifying the right of a client application to open a connection to the
***X server. The methods can range from simple host access lists to token
***exchanges to communication with elaborate network based authorization daemons.
***********************************************************************
**************** NOT YET IMPLEMENTED **********************************
***********************************************************************
.PP
When the 
.I Xdec
command is started, it uses a set of internal default lists of
components to build an X server. It also reads a system configuration
file (\fI/usr/lib/X11/Xserver.conf\fP or the file specified by the
\fI-config\fP option) to supplement or replace components on the lists.
The command loads all system and core components and then transfers
execution to the core components. 
.PP 
Workstation driver interface code in
the core components then queries the system for graphics and input
device types and loads appropriate components from the device and input
lists. If the workstation driver interface cannot find a component for a
device, it will force the X server to exit. If a graphics device is a
generic dumb frame buffer, the device list should contain an entry
mapping the device type to a generic frame buffer handler (see below).
.PP
The core components then load the list of extensions provided and
initialize the extensions. Some extensions may load further device
specific components from the sub-lists provided to them in the
configuration file.
.PP
The core components also load any font renderers, transport handlers,
and authorization protocol methods specified in the configurations.
.PP
The X server then begins to accept connections. 
.PP
When the X server resets itself (usually when the last client has
exited), all extension and font renderer components are unloaded and
then re-initialized when the X server begins to restart itself. In this
way, extensions or font renderers which have been used can re-install
themselves as small stub components, taking up much less memory, until
they are accessed again. For instance, if you wich to have Post Script
or PEX as an available extension at all times but do not wish to use up
memory, then might be loaded initially as a stub component taking up only
a fraction of their total required memory. When you run a client that
needs to use them, the full extension is used. When you have finished
using that client, you can log out of your session (if using xdm) which
will reset the X server, unload the full extension, and re-install only
the stub component until you need to use the extension again, leaving
memory for other uses.
.SH CONFIGURATION FILE SYNTAX
The configuration file syntax is quite simple. The following are key
tokens recognized by the 
.I Xdec
command when reading the file.
.TP 8
.I !
When \fI!\fP is encountered, the remainder of the line is ignored.
Comments in the configuration file should be proceeded on each line by a
\fI!\fP.
.TP 8
.I component < library_list >
Where component is one of 
.in 16
.I system
.br
.I core
.br
.I device
.br
.I extensions
.br
.I font_renderers
.br
.I auth_protocols
.br
.I transports
.br
.I input
.in -16
.TP 8
.I replace
When specifying the key word \fIreplace\fP
after the keyword \fIcore\fP, the default list of core X server
libraries is replaced by the configured list.
.TP 8
.I library_list 
has the format:
.br
.I < library_name library_file_name [ initialization_routine_name [ device_name ] ] [ sub_library_list ] >
.br
.in +8
.TP 8
.I library_name
specifies the name of the library. This name is used to reference
internal data structures within the library and may also be used to
construct the library initialization routine name.
.TP 8
.I library_file_name
specifies the name of the file containing the library. The file is a
shared library and usually has the extension \fI.so\fP.
.TP 8
.I initialization_routine_name
This routine is used to initialize the component, if appropriate.
\fIsystem\fP and \fIcore\fP libraries do not have initialization
routines. If no name is specified, the name will be constructed from the
library name.
.TP 8
.I device_name
For device handlers and extension sub-lists, the device name matches the
name stored on a graphics device option card. The name is used to match
a library to a graphics device. This name must be provided for device
handler and extension sub-list components which handle graphics devices.
.TP 8
.I sub_list
specifies a list of libraries made available for loading to an
extension. The syntax is the same as the library_list syntax except that
no further sub-lists are allowed.
.in -8
.TP 8
.I library_path < path_list >
specifies a colon separated list of directories to search for finding
libraries. If the list does not begin or end with a colon, it will be
used as the exclusive search path for libraries. If the list begins or
ends with a colon, it is either appended or prepended to the default
library search path, which may either be a default search path as
specified by the system loader or the search path specified by the
environment variable LD_LIBRARY_PATH. (See the manpage for
/sbin/loader for more details).
.TP 8
.I args < arglist >
specifies the list of arguments to be appended to the command line
arguments passed to the X server. Arguments can span multiple lines and
no parsing is done by the
.I Xdec
command. The options \fI-config\fP and \fI-errorFile\fP are specific to the
.I Xdec
bootstrap command and cannot be specified in the configuration file.
.PP
The 
.I Xdec
command searchs for libraries using the library_path specified in the
configuration file or the LD_LIBRARY_PATH environment variable. Each
component in the colon separated path is searched. 
In addition, for each component in
the path, the path \fIcomponent/Xserver\fP is also searched so that X
server libraries can be more neatly maintained in a sub-directory. The
default search path is \fI/usr/shlib/Xserver:/usr/shlib\fP.
.PP
The default system installation provides a sample configuration file
\fI/usr/lib/X11/Xserver.conf\fP. It contains comments and shows examples
for setting up library lists, library sub-lists, the library search
path, and sample argument lists.
.SH GENERIC FRAME BUFFER HANDLERS
If you install a generic frame buffer device that does not require any
initialization beyond that done by the device driver, is a continous
array of packed pixels of depth 1-, 8-, 16-, or 32-bits, and can be
accessed through the workstation device driver, than you can handle the
frame buffer with the generic frame buffer handlers provided with the
core X server components. The entries you would need in the
configuration file for initializing the device are as follows for the
1-, 8-, 16-, and 32-bit deep devices:
.br
.in +8
< mfb	libmfb.so	mfbScreenInit	device_name >
.br
< cfb	libcfb.so	cfbScreenInit	device_name >
.br
< cfb16	libcfb16.so	cfb16ScreenInit	device_name >
.br
< cfb32	libcfb32.so	cfb32ScreenInit	device_name >
.in -8
.br
where device_name matches the moduleID of the graphics device.
.SH DIAGNOSTICS
Too numerous to list them all.
If run from \fIxdm(8)\fP, errors are typically logged in the file
\fI/usr/lib/X11/xdm/xdm-errors\fP.
.SH FILES
.TP 30
/etc/X*.hosts
Initial access control list
.TP 30
/usr/lib/X11/fonts/misc, /usr/lib/X11/fonts/75dpi, /usr/lib/X11/fonts/100dpi 
Bitmap font directories
.TP 30
/usr/lib/X11/fonts/Speedo, /usr/lib/X11/fonts/Type1
Outline font directories
.TP 30
/usr/lib/X11/fonts/decwin/100dpi, /usr/lib/X11/fonts/decwin/75dpi
DEC Windows font directories
.TP 30
/usr/lib/X11/rgb.txt
Color database
.TP 30
/tmp/.X11-unix/X*
Unix domain socket
.TP 30
/usr/adm/X*msgs
Error log file
.TP 30
/usr/lib/X11/Xserver.conf
Default configuration file
.TP 30
/usr/shlib/Xserver
Loadable components
.TP 30
/usr/bin/X11/Xdec
Executable image
.SH "SEE ALSO"
X(1), bdftopcf(1), mkfontdir(1), xauth(1), xdm(1), xhost(1),
xset(1), xsetroot(1), xterm(1),
.I "X Window System Protocol,"
.I "Definition of the Porting Layer for the X v11 Sample Server,"
.I "Strategies for Porting the X v11 Sample Server,"
.I "Godzilla's Guide to Porting the X V11 Sample Server"
.SH COPYRIGHT
Copyright 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991
Massachusetts Institute of Technology.
.br
See \fIX(1)\fP for a full statement of rights and permissions.
.SH AUTHORS
The sample server was originally written by Susan Angebranndt, Raymond
Drewry, Philip Karlton, and Todd Newman, from Digital Equipment
Corporation, with support from a large cast.  It has since been
extensively rewritten by Keith Packard and Bob Scheifler, from MIT.
.br
Jim Ludwig from DEC added the loadable server functionality.

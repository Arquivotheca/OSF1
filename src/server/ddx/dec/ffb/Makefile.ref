# Makefile generated by imake - do not edit!
# $XConsortium: imake.c,v 1.65 91/07/25 17:50:17 rws Exp $

# -------------------------------------------------------------------------
# Makefile generated from "Imake.tmpl" and </tmp/IIf.029004>
# $XConsortium: Imake.tmpl,v 1.139 91/09/16 08:52:48 rws Exp $
#
# From the Alpha Imakefile
# Platform-specific parameters may be set in the appropriate <vendor>.cf
# configuration files.  Site-specific parameters should be set in the file
# site.def.  Full rebuilds are recommended if any parameters are changed.
#
# If your C preprocessor does not define any unique symbols, you will need
# to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
# "make World" the first time).
#

# -------------------------------------------------------------------------
# site-specific configuration parameters that need to come before
# the platform-specific parameters - edit site.def to change

# site:  $XConsortium: site.def,v 1.2 91/07/30 20:26:44 rws Exp $

# -------------------------------------------------------------------------
# platform-specific configuration parameters - edit osf1.cf to change

# platform: osf1.cf

# Operating system:  1/1 1.2

     CROSSBASE = $(COMP_TARGET_ROOT)

   	SHAREDSWITCH =

#  Using 1 shared library rules

# -------------------------------------------------------------------------
# site-specific configuration parameters that go after
# the platform-specific parameters - edit site.def to change

# site:  $XConsortium: site.def,v 1.2 91/07/30 20:26:44 rws Exp $

LGI_HOST_DEFS	= -DN_ALPHA_OSF1
LGI_HOST_ARCH	= ALPHA
AOSF_DEFINES	= -D_STDLIB_H_ -D_BSD

GLUSRC = $(EXTENSIONSRC)/lib/gl/glu
GLSRC  = $(EXTENSIONSRC)/lib/gl

  DEPGLULIB = $(GLUSRC)/libGLU.so
     GLULIB = $(DEPGLULIB)

  DEPGLLIB = $(GLSRC)/libGL.so
     GLLIB = $(DEPGLLIB)

            SHELL = /bin/sh

              TOP = ../../../../.
      CURRENT_DIR = ./server/ddx/dec/ffb

               AR = ar cqls
            LOCAR = ar cqls
  BOOTSTRAPCFLAGS =
               CC = cc $(SHAREDSWITCH)
            LOCCC = COMP_HOST_ROOT=/ COMP_TARGET_ROOT=/ /usr/bin/cc -non_shared
               AS = as

         COMPRESS = compress
              CPP = /lib/cpp $(STD_CPP_DEFINES)
    PREPROCESSCMD = cc $(SHAREDSWITCH) -E $(STD_CPP_DEFINES)
          INSTALL = ksh $(TOP)/util/scripts/install.sh
               LD = ld
             LINT = lint
      LINTLIBFLAG = -o
         LINTOPTS = -ax
               LN = ln -s
             MAKE = make
               MV = mv
               CP = cp

               RM = rm -f
            TROFF = psroff
         MSMACROS = -ms
              TBL = tbl
              EQN = eqn
     STD_INCLUDES = -I$(CROSSBASE)/usr/include
  LOCSTD_INCLUDES =
  STD_CPP_DEFINES = -DDEC -DR5_XLIB -DSMT
      STD_DEFINES = -DDEC -DR5_XLIB -DSMT
 EXTRA_LOAD_FLAGS =
  EXTRA_LIBRARIES =
 LOCEXTRA_LIBRARIES =
             TAGS = ctags

    SHAREDCODEDEF = -DSHAREDCODE
         SHLIBDEF =

    PROTO_DEFINES = -DFUNCPROTO=3

     INSTPGMFLAGS =

     INSTBINFLAGS = -m 0755
     INSTUIDFLAGS = -m 4755
     INSTLIBFLAGS = -m 0644
     INSTINCFLAGS = -m 0444
     INSTMANFLAGS = -m 0444
     INSTDATFLAGS = -m 0444
    INSTKMEMFLAGS = -m 4755

     TOP_INCLUDES = -I$(TOP) -I$(TOP)/X11

      CDEBUGFLAGS = -g
        CCOPTIONS = 	-I -L -L$(CROSSBASE)/usr/shlib -L$(CROSSBASE)/usr/ccs/lib
     LOCCCOPTIONS =

      ALLINCLUDES = $(INCLUDES) $(EXTRA_INCLUDES) $(TOP_INCLUDES) $(STD_INCLUDES)
   LOCALLINCLUDES = $(INCLUDES) $(EXTRA_INCLUDES) $(TOP_INCLUDES) $(LOCSTD_INCLUDES)
       ALLDEFINES = $(ALLINCLUDES) $(STD_DEFINES) $(EXTRA_DEFINES) $(PROTO_DEFINES) $(DEFINES)
    LOCALLDEFINES = $(LOCALLINCLUDES) $(STD_DEFINES) $(EXTRA_DEFINES) $(PROTO_DEFINES) $(DEFINES)
           CFLAGS = $(CDEBUGFLAGS) $(CCOPTIONS) $(ALLDEFINES)
        LOCCFLAGS = $(CDEBUGFLAGS) $(LOCCCOPTIONS) $(LOCALLDEFINES)
        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)

           LDLIBS = $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)

        LOCLDLIBS = $(SYS_LIBRARIES) $(LOCEXTRA_LIBRARIES)

        LDOPTIONS = $(CDEBUGFLAGS) $(CCOPTIONS) $(LOCAL_LDFLAGS)

     LOCLDOPTIONS = $(CDEBUGFLAGS) $(LOCCCOPTIONS) $(LOCAL_LDFLAGS)

   LDCOMBINEFLAGS = -X -r
      DEPENDFLAGS = -D__alpha  -D__osf__ -I -I$(CROSSBASE)/usr/include

        MACROFILE = osf1.cf
           RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut

    IMAKE_DEFINES =

         IRULESRC = $(CONFIGSRC)
        IMAKE_CMD = $(NEWTOP)$(IMAKE) -I$(NEWTOP)$(IRULESRC) $(IMAKE_DEFINES)

     ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/Imake.rules \
			$(IRULESRC)/Project.tmpl $(IRULESRC)/site.def \
			$(IRULESRC)/$(MACROFILE) $(EXTRA_ICONFIGFILES)

# -------------------------------------------------------------------------
# X Window System Build Parameters
# $XConsortium: Project.tmpl,v 1.142 92/01/25 16:44:02 rws Exp $

# -------------------------------------------------------------------------
# X Window System make variables; this need to be coordinated with rules

          PATHSEP = /
        USRLIBDIR = /usr/lib
           BINDIR = /usr/bin/X11
          INCROOT = /usr/include
     BUILDINCROOT = $(TOP)
      BUILDINCDIR = $(BUILDINCROOT)/X11
      BUILDINCTOP = ..
           INCDIR = $(INCROOT)/X11
           ADMDIR = /usr/adm
           LIBDIR = $(USRLIBDIR)/X11
        CONFIGDIR = $(LIBDIR)/config
       LINTLIBDIR = $(USRLIBDIR)/lint

          FONTDIR = $(LIBDIR)/fonts
         XINITDIR = $(LIBDIR)/xinit
           XDMDIR = $(LIBDIR)/xdm
           TWMDIR = $(LIBDIR)/twm
          MANPATH = /usr/man
    MANSOURCEPATH = $(MANPATH)/man
        MANSUFFIX = n
     LIBMANSUFFIX = 3
           MANDIR = $(MANSOURCEPATH)$(MANSUFFIX)
        LIBMANDIR = $(MANSOURCEPATH)$(LIBMANSUFFIX)
           NLSDIR = $(LIBDIR)/nls
        PEXAPIDIR = $(LIBDIR)/PEX
      XAPPLOADDIR = $(LIBDIR)/app-defaults
       FONTCFLAGS = -t

     INSTAPPFLAGS = $(INSTDATFLAGS)

            IMAKE = $(IMAKESRC)/imake.local

           DEPEND = $(DEPENDSRC)/makedepend
              RGB = $(RGBSRC)/rgb

            FONTC = $(BDFTOPCFSRC)/bdftopcf

        MKFONTDIR = $(MKFONTDIRSRC)/mkfontdir
        MKDIRHIER = /bin/sh $(SCRIPTSRC)/mkdirhier.sh

        CONFIGSRC = $(TOP)/config
       DOCUTILSRC = $(TOP)/doc/util
        CLIENTSRC = $(TOP)/clients
          DEMOSRC = $(TOP)/demos
           LIBSRC = $(TOP)/lib
          FONTSRC = $(TOP)/fonts
       INCLUDESRC = $(TOP)/X11
        SERVERSRC = $(TOP)/server
          UTILSRC = $(TOP)/util
        SCRIPTSRC = $(UTILSRC)/scripts
       EXAMPLESRC = $(TOP)/examples
       CONTRIBSRC = $(TOP)/../contrib
           DOCSRC = $(TOP)/doc
           RGBSRC = $(TOP)/rgb
        DEPENDSRC = $(TOP)/util/makedepend_local
         IMAKESRC = $(CONFIGSRC)
         XAUTHSRC = $(LIBSRC)/Xau
          XLIBSRC = $(LIBSRC)/X
           XMUSRC = $(LIBSRC)/Xmu
       TOOLKITSRC = $(LIBSRC)/Xt
       AWIDGETSRC = $(LIBSRC)/Xaw
       OLDXLIBSRC = $(LIBSRC)/oldX
      XDMCPLIBSRC = $(LIBSRC)/Xdmcp

      BDFTOPCFSRC = $(FONTSRC)/clients/bdftopcf

     MKFONTDIRSRC = $(FONTSRC)/clients/mkfontdir
         FSLIBSRC = $(FONTSRC)/lib/fs
    FONTSERVERSRC = $(FONTSRC)/server
     EXTENSIONSRC = $(TOP)/extensions
         XILIBSRC = $(EXTENSIONSRC)/lib/xinput
      XTESTLIBSRC = $(EXTENSIONSRC)/lib/xtest
      XTRAPLIBSRC = $(EXTENSIONSRC)/lib/xtrap
      PHIGSLIBSRC = $(EXTENSIONSRC)/lib/PEX

      USRSHLIBDIR = /usr/shlib

       SHLIBFLAGS = -check_registry $(CROSSBASE)/usr/shlib/so_locations 	-L$(CROSSBASE)/usr/shlib -L$(CROSSBASE)/usr/ccs/lib

  DEPEXTENSIONLIB = $(EXTENSIONSRC)/lib/libXext.so
     EXTENSIONLIB = $(DEPEXTENSIONLIB)

          DEPXLIB = $(DEPEXTENSIONLIB) $(XLIBSRC)/libX11.so
             XLIB = $(DEPXLIB)

        DEPXMULIB = $(XMUSRC)/libXmu.so
           XMULIB = $(DEPXMULIB)

       DEPOLDXLIB = $(OLDXLIBSRC)/liboldX.so
          OLDXLIB = $(DEPOLDXLIB)

      DEPXTOOLLIB = $(TOOLKITSRC)/libXt.so
         XTOOLLIB = $(DEPXTOOLLIB)

        DEPXAWLIB = $(AWIDGETSRC)/libXaw.so
           XAWLIB = $(DEPXAWLIB)

        DEPXILIB = $(XILIBSRC)/libXi.a
           XILIB = $(DEPXILIB)

          DNETLIB = -ldnet_stub

        SOXLIBREV = SharedXlibRev
          SOXTREV = SharedXtRev
         SOXAWREV = SharedXawRev
        SOOLDXREV = SharedOldXRev
         SOXMUREV = SharedXmuRev
        SOXEXTREV = SharedXextRev
      SOXINPUTREV = SharedXinputRev
       SOXTESTREV = SharedXTestRev
       SOXTRAPREV = SharedXTrapRev

      DEPXAUTHLIB = $(XAUTHSRC)/libXau.a
         XAUTHLIB = 			 $(DEPXAUTHLIB)
      DEPXDMCPLIB = $(XDMCPLIBSRC)/libXdmcp.a
         XDMCPLIB = 			 $(DEPXDMCPLIB)

     DEPXTESTLIB = $(XTESTLIBSRC)/libXtst.a
        XTESTLIB = 			 $(DEPXTESTLIB)

     DEPXTRAPLIB = $(XTRAPLIBSRC)/libXTrap.a
        XTRAPLIB = 			 $(DEPXTRAPLIB)

        DEPPHIGSLIB = $(PHIGSLIBSRC)/libphigs.a
           PHIGSLIB = 			 $(DEPPHIGSLIB)

       DEPXBSDLIB = $(LIBSRC)/Berk/libXbsd.a
          XBSDLIB = 			 $(DEPXBSDLIB)

 LINTEXTENSIONLIB = $(EXTENSIONSRC)/lib/llib-lXext.ln
         LINTXLIB = $(XLIBSRC)/llib-lX11.ln
          LINTXMU = $(XMUSRC)/llib-lXmu.ln
        LINTXTOOL = $(TOOLKITSRC)/llib-lXt.ln
          LINTXAW = $(AWIDGETSRC)/llib-lXaw.ln
           LINTXI = $(XILIBSRC)/llib-lXi.ln
        LINTPHIGS = $(PHIGSLIBSRC)/llib-lphigs.ln

       DEPXBSDLIB = $(LIBSRC)/Berk/libXbsd.a
          XBSDLIB = 			 $(DEPXBSDLIB)

          DEPLIBS = $(DEPXAWLIB) $(DEPXMULIB) $(DEPXTOOLLIB) $(DEPXLIB)

         DEPLIBS1 = $(DEPLIBS)
         DEPLIBS2 = $(DEPLIBS)
         DEPLIBS3 = $(DEPLIBS)

       UILFLAGS = -I
        MLIBSRC = $(TOP)/motif/lib
          XMSRC = $(MLIBSRC)/Xm
         LINTXM = $(XMSRC)/llib-lXm.ln
      USRINCDIR = $(INCDIR)
        TESTSRC = $(TOP)/tests
    MTOOLKITSRC = $(LIBSRC)/Xt
     MWIDGETSRC = $(MLIBSRC)/Xm
   MRESOURCESRC = $(MLIBSRC)/Mrm
     MCLIENTSRC = $(TOP)/motif/clients
         UILSRC = $(MCLIENTSRC)/uil

            UIL = $(TOP)/motif/clients/uil/uil.static

     INSTALLLIB = $(DESTDIR)/usr/lib
   INSTALLSHLIB = $(DESTDIR)/usr/shlib

        DEPXMLIB = $(XMSRC)/libXm.so
           XMLIB = $(XMSRC)/libXm.so

DEPMRESOURCELIB = $(MRESOURCESRC)/libMrm.so
   MRESOURCELIB = $(MRESOURCESRC)/libMrm.so

    UILINCLUDES = -I$(BUILDINCDIR)/uil

         UILLIB = $(UILSRC)/libUil.a
LINTXMWIDGETLIB = $(MWIDGETSRC)/llib-l/Xm.ln
     LINTXMTOOL = $(MTOOLKITSRC)/llib-lXt.ln
     LINTUILLIB = $(UILSRC)/llib-lUil.ln

# -------------------------------------------------------------------------
# DEC-Specific System Build Parameters

          HELPDIR = $(LIBDIR)/help
           UIDDIR = $(LIBDIR)/uid
           CDADIR = $(USRLIBDIR)/cda

           DXMSRC = $(MLIBSRC)/DXm
           DPSSRC = $(EXTENSIONSRC)/DPS/lib/dps
         DPSTKSRC = $(EXTENSIONSRC)/DPS/lib/dpstk
         PSRESSRC = $(EXTENSIONSRC)/DPS/lib/psres
           XIESRC = $(EXTENSIONSRC)/lib/xie
           IDSSRC = $(MLIBSRC)/ids
           BKRSRC = $(MLIBSRC)/bkr
        DWI18NSRC = $(MLIBSRC)/dwi18n
           LWKSRC = $(MLIBSRC)/lwk
           DVRSRC = $(MLIBSRC)/dvr

       DEPDXMLIB = $(DXMSRC)/libDXm.so
          DXMLIB = $(DXMSRC)/libDXm.so

        DEPDPSLIB = $(DPSSRC)/libdps.so
           DPSLIB = $(DEPDPSLIB)

      DEPDPSTKLIB = $(DPSTKSRC)/libdpstk.so
         DPSTKLIB = $(DEPDPSTKLIB)

        DEPPSRESLIB = $(PSRESSRC)/libpsres.so
           PSRESLIB = $(DEPPSRESLIB)

        DEPXIELIB = $(XIESRC)/libXie.a
           XIELIB = 			 $(DEPXIELIB)

        DEPIDSLIB = $(IDSSRC)/libids.so
           IDSLIB = $(DEPIDSLIB)

        DEPBKRLIB = $(BKRSRC)/libbkr.so
           BKRLIB = $(DEPBKRLIB)

        DEPDWI18NLIB = $(DWI18NSRC)/libdwi18n.a
           DWI18NLIB = 			 $(DEPDWI18NLIB)

        DEPLWKLIB = $(LWKSRC)/liblwkdxm.so
           LWKLIB = $(DEPLWKLIB)

        DEPDVRLIB = $(DVRSRC)/libdvr.so
           DVRLIB = $(DEPDVRLIB)

        DEPIMGLIB =
        DEPIPSLIB =
        DEPCHFLIB =
        DEPCDALIB =
        DEPDVSLIB =

    DEPIDS_NOXLIB =

           IMGLIB = -limg
           IPSLIB = -lips
           CHFLIB = -lchf
           CDALIB = -lcda
       IDS_NOXLIB = -lids_nox
           DVSLIB = -ldvs

     DEBUGUSRLIBDIR=/usr/debugshlib

# -------------------------------------------------------------------------
# Imake rules for building libraries, programs, scripts, and data files
# rules:  $XConsortium: Imake.rules,v 1.123 91/09/16 20:12:16 rws Exp $

# -------------------------------------------------------------------------
# DEC-Specific System Build Rules
# $Id: Dec.rules,v 1.1.2.8 92/12/08 19:29:22 Leela_Obilichetti Exp $

# -------------------------------------------------------------------------
# start of Imakefile

#
# *****************************************************************
# *                                                               *
# *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
# *                                                               *
# *   All Rights Reserved.  Unpublished rights  reserved  under   *
# *   the copyright laws of the United States.                    *
# *                                                               *
# *   The software contained on this media  is  proprietary  to   *
# *   and  embodies  the  confidential  technology  of  Digital   *
# *   Equipment Corporation.  Possession, use,  duplication  or   *
# *   dissemination of the software and media is authorized only  *
# *   pursuant to a valid written license from Digital Equipment  *
# *   Corporation.                                                *
# *                                                               *
# *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
# *   by the U.S. Government is subject to restrictions  as  set  *
# *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
# *   or  in  FAR 52.227-19, as applicable.                       *
# *                                                               *
# *****************************************************************
#

# $XConsortium: Server.rules$

#  Using 1 shared library rules

# $XConsortium: Server.tmpl,v 1.5 91/05/06 19:00:26 rws Exp $

# Can't have this messing up relative path of CC in alpha build...
#  #define PassCDebugFlags 'CDEBUGFLAGS=$(CDEBUGFLAGS)' 'CC=$(CC)' 'CCOPTIONS=$(CCOPTIONS)'

                  CC = cc $(SHAREDSWITCH)
           CCOPTIONS = 	-I -L -L$(CROSSBASE)/usr/shlib -L$(CROSSBASE)/usr/ccs/lib
         STD_DEFINES = -DDEC -DR5_XLIB -DSMT -DXDMCP -DSHAPE -DMULTIBUFFER -DMITMISC  -DMITSHM   -DSMT        -DMITR5
         CDEBUGFLAGS = -O2
         EXT_DEFINES = -DSHAPE -DMULTIBUFFER -DMITMISC  -DMITSHM   -DSMT
INSTALLSERVERLIBSDIR = $(DESTDIR)/usr/shlib/Xserver
         EXTERN_LIST = $(UTILSRC)/loadables/ExternList.sh
                  NM = "nm -gB"

      UPDATEREGISTRY = -update_registry $(TOP)/server/so_locations
           LDLIBDIRS = -L -L$(CROSSBASE)/usr/shlib -L$(CROSSBASE)/usr/ccs/lib
           LDOPTIONS = -x -warning_unresolved
       LDSERVERFLAGS = $(UPDATEREGISTRY) $(LDOPTIONS) $(LDLIBDIRS)

        SHAREDSWITCH = -non_shared

      SHAREDREGISTRY =

#
#

#
#

#
# HISTORY
# $Log$
# $EndLog$
# $EndLog$

#
# HISTORY
# $Log: sfbCopy.tmpl,v $
# Revision 1.1.2.10  1993/05/03  15:14:18  Peter_Valtin
# 	cut down on wasted compilations of copy code
# 	[1993/05/03  14:46:15  Peter_Valtin]
#
# Revision 1.1.2.9  1993/04/28  21:10:28  Peter_Valtin
# 	added PSZ to deep and shallow flags
# 	[1993/04/28  15:17:32  Peter_Valtin]
#
# Revision 1.1.2.8  1993/04/08  02:08:06  Felix_Hsu
# 	oops.  remove leftover ) from fat fingers...
# 	[1993/04/08  02:06:51  Felix_Hsu]
#
# $EndLog$

CDEBUGFLAGS     = -g -DTHREED

LGISRC	= $(EXTENSIONSRC)/server/lgi

all::

HDRL =

#	sfbscanfill.h

SRCL =

#	sfbgencirclebits.c

LINKED = $(SRCL) $(HDRL)
includes:: $(LINKED)

$(LINKED):
	$(RM) $@
	-$(LN) ../sfb/$@

COPY_SRCS= \
        ffbblt.c \
        ffbBitbltMemScrDMA.c ffbBitbltScrMemDMA.c \
        ffbgetsp.c \
	ffbpntarea.c

MULTICOMPILE_SRCS	= \
	ffbteplygblt.c \
	ffbteglyph.c \
        ffbglyph.c \
        ffbplygblt.c \
        ffbwideline.c \
	ffbline.c ffbsline.c \
        ffbfillarc.c \
	ffbpoly.c \
	ffbpolypnt.c \
	ffbarc1.c \
	ffbzerarc.c \
	ffbpntwin.c \
        ffbgc.c \
	ffbscrinit.c

SINGLECOMPILE_SRCS= \
        ffbbitblt.c \
        ffbfillrct.c \
        ffbpixmap.c \
        ffbbstore.c \
	ffb.c \
        ffbbltHelper.c \
        ffbcirclebits.c \
        ffbdivtable.c \
        ffbplane.c \
	ffbsetsp.c \
        ffbwindow.c \
	ffbcopy.c

FILEGEN_SRCS= \
	ffbgenffb.c \
        ffbgenarc1bits.c  \
	ffbgencirclebits.c \
	ffbgendivtable.c
#
# Special compilation rules below accumulate lists of sources (with
# appropriate suffixes).  Initialize lists here.
#
MULTICOMPILE_SRCS_EXPANDED=
COPY_SRCS_EXPANDED=

#
# Include model stuff, if using the model.
#

#
#

MODEL_FLAG = -DSOFTWARE_MODEL
MODEL_SRCS_LOC = vram.c model_color.c wb.c
MODEL_OBJS_LOC = $(MODEL_SRCS_LOC:.c=.o)
MODELINCS = model
MODEL_TARGET = mflag

MODEL_OBJS = model/rsmBusInterface.o \
                    model/BehRAM.o \
                    model/beh.o \
                    model/zbeh.o \
                    model/wrapper.o \
                    model/parts.o \
                    model/tables.o \
                    model/MemBeh.o

MODEL_SRC = \
	model/BusInterface.c \
	model/zbeh.c  \
	model/MemBeh.c  \
	model/BehRAM.c  \
	model/beh.c  \
	model/tables.c \
	model/wrapper.c \
	model/parts.c \
	model/beh/AddrCtl_parts.c \
	model/beh/BehAdder16_parts.c \
	model/beh/BehAdder_parts.c \
	model/beh/BehDecr_parts.c \
	model/beh/BehIncr_parts.c \
	model/beh/BehRAM16x9_parts.c \
	model/beh/BehRAM8x72_parts.c \
	model/beh/BehRAM8x36_parts.c \
	model/beh/BuildOpMask_parts.c \
	model/beh/BusyLogic_parts.c \
	model/beh/BytesToWord_parts.c \
	model/beh/Dither_parts.c \
	model/beh/Drom_parts.c \
	model/beh/FindFirstOf4_parts.c \
	model/beh/FindFirstSet_parts.c \
	model/beh/MakeMask_parts.c \
	model/beh/MakeStipple_parts.c \
	model/beh/MemIntfc_parts.c \
	model/beh/MemReqCvt_parts.c \
	model/beh/MoreThan1_parts.c \
	model/beh/PixelGenControlNoLoop_parts.c \
	model/beh/PrintDmaWrite_parts.c \
	model/beh/PrintError_parts.c \
	model/beh/PrintReq_parts.c \
	model/beh/PrintXY_parts.c \
	model/beh/Reduce_parts.c \
	model/beh/StripHigh_parts.c \
	model/beh/Watch_parts.c \
	model/beh/WordToBytes_parts.c \
	model/beh/WriteBufferCtl_parts.c \
	model/beh/sComparitor_parts.c

all::

mflag: $(MODEL_SRC)
	cd model; make libSim.a
	touch mflag

modelTarget: dflag mflag
	touch modelTarget

sflag: Makefile.pxg
	cd ../pxg ; make Makefile -f ../ffb/Makefile.pxg ; make includes
	touch sflag

# HISTORY
# $Log: sfbModel.proj,v $
# Revision 1.1.2.5  1993/05/11  19:37:20  Jean_Ehlers
# 	add BehRAM
# 	[1993/05/11  19:32:42  Jean_Ehlers]
#
# Revision 1.1.2.4  1993/04/21  03:24:33  Felix_Hsu
# 	add wb.c
# 	[1993/04/21  03:18:59  Felix_Hsu]
#
# $EndLog$
#

ARC1BITS = ffbarc1bits32

ffbarc1bits.c:
	-ln -s $(ARC1BITS).c ffbarc1bits.c

ffbgenffb: ffb.h ffbparams.h ffbgenffb.c
	-$(RM) $@
	$(LOCCC) -o ffbgenffb -DPSZ=8 $(LOCCFLAGS) ffbgenffb.c

ffb.c:	ffbgenffb
	-$(RM) $@
	./ffbgenffb > ffb.c

ffbgencirclebits: ffb.h ffbparams.h ffbcirclebits.h ffbgencirclebits.c
	-$(RM) $@
	$(LOCCC) -o ffbgencirclebits $(LOCCFLAGS) -DPSZ=8 ffbgencirclebits.c

ffbcirclebits.c: ffbgencirclebits
	-$(RM) $@
	./ffbgencirclebits > ffbcirclebits.c

ffbgendivtable: ffb.h ffbparams.h ffbdivtable.h ffbgendivtable.c
	-$(RM) $@
	$(LOCCC) -o ffbgendivtable $(LOCCFLAGS) -DPSZ=8 ffbgendivtable.c

ffbdivtable.c:	ffbgendivtable
	-$(RM) $@
	./ffbgendivtable > ffbdivtable.c

#
# Copy sources get compiled multiple times in a regular manner,
# with logical and physical depths varying for both src and dst.
#
# The first pass over ffbblt.c does scr-scr and mem-scr procedures,
# for which the hdwe can handle all rops.
# Later passes generate rop variants of scr-mem procedure, where
# we have to do all rops except copy by hand.
#

ffbbltcopyChipROPs_COPY_SRCS = \
        ffbbltcopyChipROPs8888.c ffbbltcopyChipROPs88328.c     \
        ffbbltcopyChipROPs32888.c ffbbltcopyChipROPs328328.c   \
        ffbbltcopyChipROPs32323232.c
COPY_SRCS_EXPANDED= $(COPY_SRCS_EXPANDED) $(ffbbltcopyChipROPs_COPY_SRCS)
ffbbltcopyChipROPs_COPY_OBJS = $(ffbbltcopyChipROPs_COPY_SRCS:.c=.o)
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) $(ffbbltcopyChipROPs_COPY_SRCS)

cleanffbbltcopyChipROPs::
	-$(RM) ffbbltcopyChipROPs8888.c
	-$(RM) ffbbltcopyChipROPs88328.c
	-$(RM) ffbbltcopyChipROPs32888.c
	-$(RM) ffbbltcopyChipROPs328328.c
	-$(RM) ffbbltcopyChipROPs32323232.c

clean:: cleanffbbltcopyChipROPs

includes:: cleanffbbltcopyChipROPs
	-$(LN) ffbblt.c ffbbltcopyChipROPs8888.c
	-$(LN) ffbblt.c ffbbltcopyChipROPs88328.c
	-$(LN) ffbblt.c ffbbltcopyChipROPs32888.c
	-$(LN) ffbblt.c ffbbltcopyChipROPs328328.c
	-$(LN) ffbblt.c ffbbltcopyChipROPs32323232.c

$(ffbbltcopyChipROPs_COPY_OBJS):  ffbblt.c
	@FFBDI=-DFFB_DEPTH_INDEPENDENT ; export FFBDI ; \
	for k in  	\
                        	                "copyChipROPs8888								                 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"         	\
                        	                "copyChipROPs88328								                 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=8 -DPSZ=8"        	\
                        	                "copyChipROPs32888								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"        	\
                        	                "copyChipROPs328328								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=8 -DPSZ=8"      	\
                        	                "copyChipROPs32323232								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32" ;  do \
                (set $$1 $$k ; \
                sfx=$$1 ; shift ; \
		Src=ffbblt ; \
		echo "$(CC) -c $(CFLAGS) $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c";\
		$(RM) $$Src$$sfx.[oc] ; $(LN) ffbblt.c $$Src$$sfx.c ; \
                $(CC) -c  $(CFLAGS) $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c 2>&1 | fold -256 | awk -f filter.awk);\
		FFBDI= ; export FFBDI ; \
        done

ffbbltcopy_COPY_SRCS = \
	ffbbltcopy8888.c ffbbltcopy32888.c	\
	ffbbltcopy32323232.c
COPY_SRCS_EXPANDED= $(COPY_SRCS_EXPANDED) $(ffbbltcopy_COPY_SRCS)
ffbbltcopy_COPY_OBJS = $(ffbbltcopy_COPY_SRCS:.c=.o)
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) $(ffbbltcopy_COPY_SRCS)

cleanffbbltcopy::
	-$(RM) ffbbltcopy8888.c
	-$(RM) ffbbltcopy32888.c
	-$(RM) ffbbltcopy32323232.c

clean:: cleanffbbltcopy

includes:: cleanffbbltcopy
	-$(LN) ffbblt.c ffbbltcopy8888.c
	-$(LN) ffbblt.c ffbbltcopy32888.c
	-$(LN) ffbblt.c ffbbltcopy32323232.c

$(ffbbltcopy_COPY_OBJS):  ffbblt.c
	@FFBDI=-DFFB_DEPTH_INDEPENDENT ; export FFBDI ; \
	for k in     \
                        	                "copy8888								                 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"                \
                        	                "copy32888								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"               \
                        	                "copy32323232								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32" ;  do \
                (set $$1 $$k ; \
                sfx=$$1 ; shift ; \
		Src=ffbblt ; \
		echo "$(CC) -c $(CFLAGS) \ -DSCREEN_TO_MEM \ -DHDWE_PLANEMASK \ -DFFBBITBLTSCRMEM=ffbBitbltScrMemCopy \ -DCFBBITBLT=cfbDoBitbltCopy -DCFBCOPY=DCCOPY $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c";\
		$(RM) $$Src$$sfx.[oc] ; $(LN) ffbblt.c $$Src$$sfx.c ; \
                $(CC) -c  $(CFLAGS)	\
		-DSCREEN_TO_MEM \
		-DHDWE_PLANEMASK \
		-DFFBBITBLTSCRMEM=ffbBitbltScrMemCopy 	\
		-DCFBBITBLT=cfbDoBitbltCopy -DCFBCOPY=DCCOPY $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c 2>&1 | fold -256 | awk -f filter.awk);\
		FFBDI= ; export FFBDI ; \
        done

ffbbltcopyx_COPY_SRCS = \
	ffbbltcopyx8888.c ffbbltcopyx32888.c	\
	ffbbltcopyx32323232.c
COPY_SRCS_EXPANDED= $(COPY_SRCS_EXPANDED) $(ffbbltcopyx_COPY_SRCS)
ffbbltcopyx_COPY_OBJS = $(ffbbltcopyx_COPY_SRCS:.c=.o)
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) $(ffbbltcopyx_COPY_SRCS)

cleanffbbltcopyx::
	-$(RM) ffbbltcopyx8888.c
	-$(RM) ffbbltcopyx32888.c
	-$(RM) ffbbltcopyx32323232.c

clean:: cleanffbbltcopyx

includes:: cleanffbbltcopyx
	-$(LN) ffbblt.c ffbbltcopyx8888.c
	-$(LN) ffbblt.c ffbbltcopyx32888.c
	-$(LN) ffbblt.c ffbbltcopyx32323232.c

$(ffbbltcopyx_COPY_OBJS):  ffbblt.c
	@FFBDI=-DFFB_DEPTH_INDEPENDENT ; export FFBDI ; \
	for k in     \
                        	                "copyx8888								                 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"                \
                        	                "copyx32888								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"               \
                        	                "copyx32323232								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32" ;  do \
                (set $$1 $$k ; \
                sfx=$$1 ; shift ; \
		Src=ffbblt ; \
		echo "$(CC) -c $(CFLAGS) \ -DSCREEN_TO_MEM \ -DFFBBITBLTSCRMEM=ffbBitbltScrMemCopySPM \ -DCFBBITBLT=cfbDoBitbltCopy -DCFBCOPY=DCCOPYSPM $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c";\
		$(RM) $$Src$$sfx.[oc] ; $(LN) ffbblt.c $$Src$$sfx.c ; \
                $(CC) -c  $(CFLAGS)   \
                -DSCREEN_TO_MEM \
		-DFFBBITBLTSCRMEM=ffbBitbltScrMemCopySPM \
		-DCFBBITBLT=cfbDoBitbltCopy -DCFBCOPY=DCCOPYSPM $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c 2>&1 | fold -256 | awk -f filter.awk);\
		FFBDI= ; export FFBDI ; \
        done

ffbbltxor_COPY_SRCS = \
	ffbbltxor8888.c ffbbltxor32888.c	\
	ffbbltxor32323232.c
COPY_SRCS_EXPANDED= $(COPY_SRCS_EXPANDED) $(ffbbltxor_COPY_SRCS)
ffbbltxor_COPY_OBJS = $(ffbbltxor_COPY_SRCS:.c=.o)
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) $(ffbbltxor_COPY_SRCS)

cleanffbbltxor::
	-$(RM) ffbbltxor8888.c
	-$(RM) ffbbltxor32888.c
	-$(RM) ffbbltxor32323232.c

clean:: cleanffbbltxor

includes:: cleanffbbltxor
	-$(LN) ffbblt.c ffbbltxor8888.c
	-$(LN) ffbblt.c ffbbltxor32888.c
	-$(LN) ffbblt.c ffbbltxor32323232.c

$(ffbbltxor_COPY_OBJS):  ffbblt.c
	@FFBDI=-DFFB_DEPTH_INDEPENDENT ; export FFBDI ; \
	for k in     \
                        	                "xor8888								                 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"                \
                        	                "xor32888								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"               \
                        	                "xor32323232								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32" ;  do \
                (set $$1 $$k ; \
                sfx=$$1 ; shift ; \
		Src=ffbblt ; \
		echo "$(CC) -c $(CFLAGS) \ -DSCREEN_TO_MEM \ -DFFBBITBLTSCRMEM=ffbBitbltScrMemXor \ -DCFBBITBLT=cfbDoBitbltXor -DCFBCOPY=DCXOR $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c";\
		$(RM) $$Src$$sfx.[oc] ; $(LN) ffbblt.c $$Src$$sfx.c ; \
                $(CC) -c  $(CFLAGS)   \
                -DSCREEN_TO_MEM \
                -DFFBBITBLTSCRMEM=ffbBitbltScrMemXor \
		-DCFBBITBLT=cfbDoBitbltXor -DCFBCOPY=DCXOR $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c 2>&1 | fold -256 | awk -f filter.awk);\
		FFBDI= ; export FFBDI ; \
        done

ffbbltgenl_COPY_SRCS = \
	ffbbltgenl8888.c ffbbltgenl32888.c	\
	ffbbltgenl32323232.c
COPY_SRCS_EXPANDED= $(COPY_SRCS_EXPANDED) $(ffbbltgenl_COPY_SRCS)
ffbbltgenl_COPY_OBJS = $(ffbbltgenl_COPY_SRCS:.c=.o)
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) $(ffbbltgenl_COPY_SRCS)

cleanffbbltgenl::
	-$(RM) ffbbltgenl8888.c
	-$(RM) ffbbltgenl32888.c
	-$(RM) ffbbltgenl32323232.c

clean:: cleanffbbltgenl

includes:: cleanffbbltgenl
	-$(LN) ffbblt.c ffbbltgenl8888.c
	-$(LN) ffbblt.c ffbbltgenl32888.c
	-$(LN) ffbblt.c ffbbltgenl32323232.c

$(ffbbltgenl_COPY_OBJS):  ffbblt.c
	@FFBDI=-DFFB_DEPTH_INDEPENDENT ; export FFBDI ; \
	for k in     \
                        	                "genl8888								                 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"                \
                        	                "genl32888								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"               \
                        	                "genl32323232								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32" ;  do \
                (set $$1 $$k ; \
                sfx=$$1 ; shift ; \
		Src=ffbblt ; \
		echo "$(CC) -c $(CFLAGS) \ -DSCREEN_TO_MEM \ -DFFBBITBLTSCRMEM=ffbBitbltScrMemGeneral \ -DCFBBITBLT=cfbDoBitbltGeneral -DCFBCOPY=DCGENERAL $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c";\
		$(RM) $$Src$$sfx.[oc] ; $(LN) ffbblt.c $$Src$$sfx.c ; \
                $(CC) -c  $(CFLAGS)   \
                -DSCREEN_TO_MEM \
                -DFFBBITBLTSCRMEM=ffbBitbltScrMemGeneral \
		-DCFBBITBLT=cfbDoBitbltGeneral -DCFBCOPY=DCGENERAL $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c 2>&1 | fold -256 | awk -f filter.awk);\
		FFBDI= ; export FFBDI ; \
        done

ffbpntareatfa_COPY_SRCS = \
        ffbpntareatfa8888.c ffbpntareatfa88328.c     \
        ffbpntareatfa32888.c ffbpntareatfa328328.c   \
        ffbpntareatfa32323232.c
COPY_SRCS_EXPANDED= $(COPY_SRCS_EXPANDED) $(ffbpntareatfa_COPY_SRCS)
ffbpntareatfa_COPY_OBJS = $(ffbpntareatfa_COPY_SRCS:.c=.o)
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) $(ffbpntareatfa_COPY_SRCS)

cleanffbpntareatfa::
	-$(RM) ffbpntareatfa8888.c
	-$(RM) ffbpntareatfa88328.c
	-$(RM) ffbpntareatfa32888.c
	-$(RM) ffbpntareatfa328328.c
	-$(RM) ffbpntareatfa32323232.c

clean:: cleanffbpntareatfa

includes:: cleanffbpntareatfa
	-$(LN) ffbpntarea.c ffbpntareatfa8888.c
	-$(LN) ffbpntarea.c ffbpntareatfa88328.c
	-$(LN) ffbpntarea.c ffbpntareatfa32888.c
	-$(LN) ffbpntarea.c ffbpntareatfa328328.c
	-$(LN) ffbpntarea.c ffbpntareatfa32323232.c

$(ffbpntareatfa_COPY_OBJS):  ffbpntarea.c
	@FFBDI=-DFFB_DEPTH_INDEPENDENT ; export FFBDI ; \
	for k in  	\
                        	                "tfa8888								                 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"         	\
                        	                "tfa88328								                 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=8 -DPSZ=8"        	\
                        	                "tfa32888								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"        	\
                        	                "tfa328328								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=8 -DPSZ=8"      	\
                        	                "tfa32323232								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32" ;  do \
                (set $$1 $$k ; \
                sfx=$$1 ; shift ; \
		Src=ffbpntarea ; \
		echo "$(CC) -c $(CFLAGS) \ -DFFBTILEFILLSPANS=ffbTileFillSpans \ -DFFBTILEFILLAREA=ffbTileFillArea $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c";\
		$(RM) $$Src$$sfx.[oc] ; $(LN) ffbpntarea.c $$Src$$sfx.c ; \
                $(CC) -c  $(CFLAGS) \
		-DFFBTILEFILLSPANS=ffbTileFillSpans \
		-DFFBTILEFILLAREA=ffbTileFillArea  $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c 2>&1 | fold -256 | awk -f filter.awk);\
		FFBDI= ; export FFBDI ; \
        done

ffbgetsp_COPY_SRCS = \
        ffbgetsp8888.c ffbgetsp88328.c     \
        ffbgetsp32888.c ffbgetsp328328.c   \
        ffbgetsp32323232.c
COPY_SRCS_EXPANDED= $(COPY_SRCS_EXPANDED) $(ffbgetsp_COPY_SRCS)
ffbgetsp_COPY_OBJS = $(ffbgetsp_COPY_SRCS:.c=.o)
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) $(ffbgetsp_COPY_SRCS)

cleanffbgetsp::
	-$(RM) ffbgetsp8888.c
	-$(RM) ffbgetsp88328.c
	-$(RM) ffbgetsp32888.c
	-$(RM) ffbgetsp328328.c
	-$(RM) ffbgetsp32323232.c

clean:: cleanffbgetsp

includes:: cleanffbgetsp
	-$(LN) ffbgetsp.c ffbgetsp8888.c
	-$(LN) ffbgetsp.c ffbgetsp88328.c
	-$(LN) ffbgetsp.c ffbgetsp32888.c
	-$(LN) ffbgetsp.c ffbgetsp328328.c
	-$(LN) ffbgetsp.c ffbgetsp32323232.c

$(ffbgetsp_COPY_OBJS):  ffbgetsp.c
	@FFBDI=-DFFB_DEPTH_INDEPENDENT ; export FFBDI ; \
	for k in  	\
                        	                "8888								                 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"         	\
                        	                "88328								                 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=8 -DPSZ=8"        	\
                        	                "32888								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"        	\
                        	                "328328								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=8 -DPSZ=8"      	\
                        	                "32323232								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32" ;  do \
                (set $$1 $$k ; \
                sfx=$$1 ; shift ; \
		Src=ffbgetsp ; \
		echo "$(CC) -c $(CFLAGS) $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c";\
		$(RM) $$Src$$sfx.[oc] ; $(LN) ffbgetsp.c $$Src$$sfx.c ; \
                $(CC) -c  $(CFLAGS) $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c 2>&1 | fold -256 | awk -f filter.awk);\
		FFBDI= ; export FFBDI ; \
        done

ffbBitbltScrMemDMA_COPY_SRCS = \
	ffbBitbltScrMemDMA8888.c ffbBitbltScrMemDMA32888.c	\
	ffbBitbltScrMemDMA32323232.c
COPY_SRCS_EXPANDED= $(COPY_SRCS_EXPANDED) $(ffbBitbltScrMemDMA_COPY_SRCS)
ffbBitbltScrMemDMA_COPY_OBJS = $(ffbBitbltScrMemDMA_COPY_SRCS:.c=.o)
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) $(ffbBitbltScrMemDMA_COPY_SRCS)

cleanffbBitbltScrMemDMA::
	-$(RM) ffbBitbltScrMemDMA8888.c
	-$(RM) ffbBitbltScrMemDMA32888.c
	-$(RM) ffbBitbltScrMemDMA32323232.c

clean:: cleanffbBitbltScrMemDMA

includes:: cleanffbBitbltScrMemDMA
	-$(LN) ffbBitbltScrMemDMA.c ffbBitbltScrMemDMA8888.c
	-$(LN) ffbBitbltScrMemDMA.c ffbBitbltScrMemDMA32888.c
	-$(LN) ffbBitbltScrMemDMA.c ffbBitbltScrMemDMA32323232.c

$(ffbBitbltScrMemDMA_COPY_OBJS):  ffbBitbltScrMemDMA.c
	@FFBDI=-DFFB_DEPTH_INDEPENDENT ; export FFBDI ; \
	for k in     \
                        	                "8888								                 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"                \
                        	                "32888								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"               \
                        	                "32323232								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32" ;  do \
                (set $$1 $$k ; \
                sfx=$$1 ; shift ; \
		Src=ffbBitbltScrMemDMA ; \
		echo "$(CC) -c $(CFLAGS) $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c";\
		$(RM) $$Src$$sfx.[oc] ; $(LN) ffbBitbltScrMemDMA.c $$Src$$sfx.c ; \
                $(CC) -c  $(CFLAGS) $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c 2>&1 | fold -256 | awk -f filter.awk);\
		FFBDI= ; export FFBDI ; \
        done

ffbBitbltMemScrDMA_COPY_SRCS = \
        ffbBitbltMemScrDMA8888.c ffbBitbltMemScrDMA88328.c     \
        ffbBitbltMemScrDMA32323232.c
COPY_SRCS_EXPANDED= $(COPY_SRCS_EXPANDED) $(ffbBitbltMemScrDMA_COPY_SRCS)
ffbBitbltMemScrDMA_COPY_OBJS = $(ffbBitbltMemScrDMA_COPY_SRCS:.c=.o)
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) $(ffbBitbltMemScrDMA_COPY_SRCS)

cleanffbBitbltMemScrDMA::
	-$(RM) ffbBitbltMemScrDMA8888.c
	-$(RM) ffbBitbltMemScrDMA88328.c
	-$(RM) ffbBitbltMemScrDMA32323232.c

clean:: cleanffbBitbltMemScrDMA

includes:: cleanffbBitbltMemScrDMA
	-$(LN) ffbBitbltMemScrDMA.c ffbBitbltMemScrDMA8888.c
	-$(LN) ffbBitbltMemScrDMA.c ffbBitbltMemScrDMA88328.c
	-$(LN) ffbBitbltMemScrDMA.c ffbBitbltMemScrDMA32323232.c

$(ffbBitbltMemScrDMA_COPY_OBJS):  ffbBitbltMemScrDMA.c
	@FFBDI=-DFFB_DEPTH_INDEPENDENT ; export FFBDI ; \
	for k in     \
                        	                "8888								                 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8"                \
                        	                "88328								                 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=8 -DPSZ=8"               \
                        	                "32323232								                 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32                              -DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32" ;  do \
                (set $$1 $$k ; \
                sfx=$$1 ; shift ; \
		Src=ffbBitbltMemScrDMA ; \
		echo "$(CC) -c $(CFLAGS) $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c";\
		$(RM) $$Src$$sfx.[oc] ; $(LN) ffbBitbltMemScrDMA.c $$Src$$sfx.c ; \
                $(CC) -c  $(CFLAGS) $$FFBDI $$@ -o $$Src$$sfx.o $$Src$$sfx.c 2>&1 | fold -256 | awk -f filter.awk);\
		FFBDI= ; export FFBDI ; \
        done

#
# General stipple stuff gets compiled 4x: {8, 32} x {ts, os}
#

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbpntareats.c ffbpntareats32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbpntareats.c ffbpntareats32.c
ffbpntareats.c:   ffbpntarea.c
	$(RM) $@
	$(LN)  ffbpntarea.c ffbpntareats.c

ffbpntareats.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
                -DDOTRANSPARENTSTIPPLE \
                -DFFBSTIPPLEAREA=ffbTSFillArea \
                -DFFBSTIPPLESPAN=ffbTSFillSpans -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbpntareats.c

clean::
	$(RM) ffbpntareats.c

ffbpntareats32.c :  ffbpntarea.c
	$(RM) $@
	$(LN)  ffbpntarea.c ffbpntareats32.c

ffbpntareats32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
                -DDOTRANSPARENTSTIPPLE \
                -DFFBSTIPPLEAREA=ffbTSFillArea \
                -DFFBSTIPPLESPAN=ffbTSFillSpans -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbpntareats32.c

clean::
	$(RM) ffbpntareats32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbpntareaos.c ffbpntareaos32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbpntareaos.c ffbpntareaos32.c
ffbpntareaos.c:   ffbpntarea.c
	$(RM) $@
	$(LN)  ffbpntarea.c ffbpntareaos.c

ffbpntareaos.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
                -DDOOPAQUESTIPPLE \
		-DFFBOSPLANE=ffbOSPlane \
                -DFFBSTIPPLEAREA=ffbOSFillArea \
                -DFFBSTIPPLESPAN=ffbOSFillSpans -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbpntareaos.c

clean::
	$(RM) ffbpntareaos.c

ffbpntareaos32.c :  ffbpntarea.c
	$(RM) $@
	$(LN)  ffbpntarea.c ffbpntareaos32.c

ffbpntareaos32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
                -DDOOPAQUESTIPPLE \
		-DFFBOSPLANE=ffbOSPlane \
                -DFFBSTIPPLEAREA=ffbOSFillArea \
                -DFFBSTIPPLESPAN=ffbOSFillSpans -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbpntareaos32.c

clean::
	$(RM) ffbpntareaos32.c

#
# Paint routines that can take advantage of fill modes get compiled
# twice, for 8 and 32 bit depths.
#

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbpntareafill.c ffbpntareafill32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbpntareafill.c ffbpntareafill32.c
ffbpntareafill.c:   ffbpntarea.c
	$(RM) $@
	$(LN)  ffbpntarea.c ffbpntareafill.c

ffbpntareafill.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBPOLYFILLRECTSOLID=ffbPolyFillRectSolid \
		-DFFBSOLIDFILLSPANS=ffbSolidFillSpans \
                -DFFBTSAREAWORD=ffbFillAreaWord \
                -DFFBTSAREAWORD2=ffbFillAreaWord2 \
                -DFFBTSSPANWORD=ffbFillSpansWord -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbpntareafill.c

clean::
	$(RM) ffbpntareafill.c

ffbpntareafill32.c :  ffbpntarea.c
	$(RM) $@
	$(LN)  ffbpntarea.c ffbpntareafill32.c

ffbpntareafill32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBPOLYFILLRECTSOLID=ffbPolyFillRectSolid \
		-DFFBSOLIDFILLSPANS=ffbSolidFillSpans \
                -DFFBTSAREAWORD=ffbFillAreaWord \
                -DFFBTSAREAWORD2=ffbFillAreaWord2 \
                -DFFBTSSPANWORD=ffbFillSpansWord -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbpntareafill32.c

clean::
	$(RM) ffbpntareafill32.c

#
# ffbpntarea.c gets compiled one more time, absent stipple and block
# stuff (tiles).  this should be the only occurence of -DCOMPILEEVERYTHING.
#

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbpntarea.c ffbpntarea32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbpntarea32.c

ffbpntarea.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
                -DDOTILE \
                -DFFBTSAREAWORD=ffbTileFillAreaWord -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbpntarea32.c :  ffbpntarea.c
	$(RM) $@
	$(LN)  ffbpntarea.c ffbpntarea32.c

ffbpntarea32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
                -DDOTILE \
                -DFFBTSAREAWORD=ffbTileFillAreaWord -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbpntarea32.c

clean::
	$(RM) ffbpntarea32.c

#
# Terminal emulation stuff; everything is compiled twice, for 8 and 32
# bit depths.
#

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbtesplat6.c ffbtesplat632.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbtesplat6.c ffbtesplat632.c
ffbtesplat6.c:   ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbtesplat6.c

ffbtesplat6.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTESplatGlyphs6 -DGLYPHWIDTH=6 \
		-DNGLYPHS=4 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbtesplat6.c

clean::
	$(RM) ffbtesplat6.c

ffbtesplat632.c :  ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbtesplat632.c

ffbtesplat632.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTESplatGlyphs6 -DGLYPHWIDTH=6 \
		-DNGLYPHS=4 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbtesplat632.c

clean::
	$(RM) ffbtesplat632.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbtesplat8.c ffbtesplat832.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbtesplat8.c ffbtesplat832.c
ffbtesplat8.c:   ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbtesplat8.c

ffbtesplat8.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTESplatGlyphs8 -DGLYPHWIDTH=8 \
		-DNGLYPHS=3 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbtesplat8.c

clean::
	$(RM) ffbtesplat8.c

ffbtesplat832.c :  ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbtesplat832.c

ffbtesplat832.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTESplatGlyphs8 -DGLYPHWIDTH=8 \
		-DNGLYPHS=3 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbtesplat832.c

clean::
	$(RM) ffbtesplat832.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbtesplat12.c ffbtesplat1232.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbtesplat12.c ffbtesplat1232.c
ffbtesplat12.c:   ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbtesplat12.c

ffbtesplat12.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTESplatGlyphs12 -DGLYPHWIDTH=12 \
		-DNGLYPHS=2 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbtesplat12.c

clean::
	$(RM) ffbtesplat12.c

ffbtesplat1232.c :  ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbtesplat1232.c

ffbtesplat1232.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTESplatGlyphs12 -DGLYPHWIDTH=12 \
		-DNGLYPHS=2 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbtesplat1232.c

clean::
	$(RM) ffbtesplat1232.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbtesplat16.c ffbtesplat1632.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbtesplat16.c ffbtesplat1632.c
ffbtesplat16.c:   ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbtesplat16.c

ffbtesplat16.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTESplatGlyphs16 -DGLYPHWIDTH=16 \
		-DNGLYPHS=1 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbtesplat16.c

clean::
	$(RM) ffbtesplat16.c

ffbtesplat1632.c :  ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbtesplat1632.c

ffbtesplat1632.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTESplatGlyphs16 -DGLYPHWIDTH=16 \
		-DNGLYPHS=1 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbtesplat1632.c

clean::
	$(RM) ffbtesplat1632.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbtesplat32.c ffbtesplat3232.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbtesplat32.c ffbtesplat3232.c
ffbtesplat32.c:   ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbtesplat32.c

ffbtesplat32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTESplatGlyphs32 -DGLYPHWIDTH=32 \
		-DNGLYPHS=1 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbtesplat32.c

clean::
	$(RM) ffbtesplat32.c

ffbtesplat3232.c :  ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbtesplat3232.c

ffbtesplat3232.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTESplatGlyphs32 -DGLYPHWIDTH=32 \
		-DNGLYPHS=1 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbtesplat3232.c

clean::
	$(RM) ffbtesplat3232.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbplygblt.c ffbplygblt32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbplygblt32.c

ffbplygblt.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBPLYGLYPHBLT=ffbPolyGlyphBlt -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbplygblt32.c :  ffbplygblt.c
	$(RM) $@
	$(LN)  ffbplygblt.c ffbplygblt32.c

ffbplygblt32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBPLYGLYPHBLT=ffbPolyGlyphBlt -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbplygblt32.c

clean::
	$(RM) ffbplygblt32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbimggblt.c ffbimggblt32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbimggblt.c ffbimggblt32.c
ffbimggblt.c:   ffbplygblt.c
	$(RM) $@
	$(LN)  ffbplygblt.c ffbimggblt.c

ffbimggblt.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBIMAGETEXT -DFFBPLYGLYPHBLT=ffbImageGlyphBlt -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbimggblt.c

clean::
	$(RM) ffbimggblt.c

ffbimggblt32.c :  ffbplygblt.c
	$(RM) $@
	$(LN)  ffbplygblt.c ffbimggblt32.c

ffbimggblt32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBIMAGETEXT -DFFBPLYGLYPHBLT=ffbImageGlyphBlt -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbimggblt32.c

clean::
	$(RM) ffbimggblt32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbteimggblt.c ffbteimggblt32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbteimggblt.c ffbteimggblt32.c
ffbteimggblt.c:   ffbteplygblt.c
	$(RM) $@
	$(LN)  ffbteplygblt.c ffbteimggblt.c

ffbteimggblt.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBIMAGETEXT -DFFBTEPLYGLYPHBLT=ffbTEImageGlyphBlt -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbteimggblt.c

clean::
	$(RM) ffbteimggblt.c

ffbteimggblt32.c :  ffbteplygblt.c
	$(RM) $@
	$(LN)  ffbteplygblt.c ffbteimggblt32.c

ffbteimggblt32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBIMAGETEXT -DFFBTEPLYGLYPHBLT=ffbTEImageGlyphBlt -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbteimggblt32.c

clean::
	$(RM) ffbteimggblt32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbteimage6.c ffbteimage632.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbteimage6.c ffbteimage632.c
ffbteimage6.c:   ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbteimage6.c

ffbteimage6.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTEImageGlyphs6 -DGLYPHWIDTH=6 \
		-DFFBIMAGETEXT -DNGLYPHS=4 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbteimage6.c

clean::
	$(RM) ffbteimage6.c

ffbteimage632.c :  ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbteimage632.c

ffbteimage632.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTEImageGlyphs6 -DGLYPHWIDTH=6 \
		-DFFBIMAGETEXT -DNGLYPHS=4 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbteimage632.c

clean::
	$(RM) ffbteimage632.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbteimage8.c ffbteimage832.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbteimage8.c ffbteimage832.c
ffbteimage8.c:   ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbteimage8.c

ffbteimage8.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTEImageGlyphs8 -DGLYPHWIDTH=8 \
		-DFFBIMAGETEXT -DNGLYPHS=3 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbteimage8.c

clean::
	$(RM) ffbteimage8.c

ffbteimage832.c :  ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbteimage832.c

ffbteimage832.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTEImageGlyphs8 -DGLYPHWIDTH=8 \
		-DFFBIMAGETEXT -DNGLYPHS=3 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbteimage832.c

clean::
	$(RM) ffbteimage832.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbteimage12.c ffbteimage1232.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbteimage12.c ffbteimage1232.c
ffbteimage12.c:   ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbteimage12.c

ffbteimage12.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTEImageGlyphs12 -DGLYPHWIDTH=12 \
		-DFFBIMAGETEXT -DNGLYPHS=2 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbteimage12.c

clean::
	$(RM) ffbteimage12.c

ffbteimage1232.c :  ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbteimage1232.c

ffbteimage1232.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTEImageGlyphs12 -DGLYPHWIDTH=12 \
		-DFFBIMAGETEXT -DNGLYPHS=2 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbteimage1232.c

clean::
	$(RM) ffbteimage1232.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbteimage16.c ffbteimage1632.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbteimage16.c ffbteimage1632.c
ffbteimage16.c:   ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbteimage16.c

ffbteimage16.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTEImageGlyphs16 -DGLYPHWIDTH=16 \
		-DFFBIMAGETEXT -DNGLYPHS=1 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbteimage16.c

clean::
	$(RM) ffbteimage16.c

ffbteimage1632.c :  ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbteimage1632.c

ffbteimage1632.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTEImageGlyphs16 -DGLYPHWIDTH=16 \
		-DFFBIMAGETEXT -DNGLYPHS=1 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbteimage1632.c

clean::
	$(RM) ffbteimage1632.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbteimage32.c ffbteimage3232.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbteimage32.c ffbteimage3232.c
ffbteimage32.c:   ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbteimage32.c

ffbteimage32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTEImageGlyphs32 -DGLYPHWIDTH=32 \
		-DFFBIMAGETEXT -DNGLYPHS=1 -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbteimage32.c

clean::
	$(RM) ffbteimage32.c

ffbteimage3232.c :  ffbteglyph.c
	$(RM) $@
	$(LN)  ffbteglyph.c ffbteimage3232.c

ffbteimage3232.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DFFBTESPLATGLYPHS=ffbTEImageGlyphs32 -DGLYPHWIDTH=32 \
		-DFFBIMAGETEXT -DNGLYPHS=1 -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbteimage3232.c

clean::
	$(RM) ffbteimage3232.c

#
# Miscellaneous 2-depth stuff.
#

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbsegment.c ffbsegment32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbsegment.c ffbsegment32.c
ffbsegment.c:   ffbline.c
	$(RM) $@
	$(LN)  ffbline.c ffbsegment.c

ffbsegment.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DSEGMENTS -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbsegment.c

clean::
	$(RM) ffbsegment.c

ffbsegment32.c :  ffbline.c
	$(RM) $@
	$(LN)  ffbline.c ffbsegment32.c

ffbsegment32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DSEGMENTS -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbsegment32.c

clean::
	$(RM) ffbsegment32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbssegment.c ffbssegment32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbssegment.c ffbssegment32.c
ffbssegment.c:   ffbsline.c
	$(RM) $@
	$(LN)  ffbsline.c ffbssegment.c

ffbssegment.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DSEGMENTS -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbssegment.c

clean::
	$(RM) ffbssegment.c

ffbssegment32.c :  ffbsline.c
	$(RM) $@
	$(LN)  ffbsline.c ffbssegment32.c

ffbssegment32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  \
		-DSEGMENTS -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbssegment32.c

clean::
	$(RM) ffbssegment32.c

#
# This set compiles once in it's own name (for 8 bit), and once with suffix for
# 32 bit depth.
#

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbarc1.c ffbarc132.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbarc132.c

ffbarc1.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbarc132.c :  ffbarc1.c
	$(RM) $@
	$(LN)  ffbarc1.c ffbarc132.c

ffbarc132.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbarc132.c

clean::
	$(RM) ffbarc132.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbfillarc.c ffbfillarc32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbfillarc32.c

ffbfillarc.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbfillarc32.c :  ffbfillarc.c
	$(RM) $@
	$(LN)  ffbfillarc.c ffbfillarc32.c

ffbfillarc32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbfillarc32.c

clean::
	$(RM) ffbfillarc32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbgc.c ffbgc32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbgc32.c

ffbgc.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbgc32.c :  ffbgc.c
	$(RM) $@
	$(LN)  ffbgc.c ffbgc32.c

ffbgc32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbgc32.c

clean::
	$(RM) ffbgc32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbglyph.c ffbglyph32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbglyph32.c

ffbglyph.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbglyph32.c :  ffbglyph.c
	$(RM) $@
	$(LN)  ffbglyph.c ffbglyph32.c

ffbglyph32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbglyph32.c

clean::
	$(RM) ffbglyph32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbline.c ffbline32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbline32.c

ffbline.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbline32.c :  ffbline.c
	$(RM) $@
	$(LN)  ffbline.c ffbline32.c

ffbline32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbline32.c

clean::
	$(RM) ffbline32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbpntwin.c ffbpntwin32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbpntwin32.c

ffbpntwin.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbpntwin32.c :  ffbpntwin.c
	$(RM) $@
	$(LN)  ffbpntwin.c ffbpntwin32.c

ffbpntwin32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbpntwin32.c

clean::
	$(RM) ffbpntwin32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbpoly.c ffbpoly32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbpoly32.c

ffbpoly.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbpoly32.c :  ffbpoly.c
	$(RM) $@
	$(LN)  ffbpoly.c ffbpoly32.c

ffbpoly32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbpoly32.c

clean::
	$(RM) ffbpoly32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbscrinit.c ffbscrinit32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbscrinit32.c

ffbscrinit.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbscrinit32.c :  ffbscrinit.c
	$(RM) $@
	$(LN)  ffbscrinit.c ffbscrinit32.c

ffbscrinit32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbscrinit32.c

clean::
	$(RM) ffbscrinit32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbsline.c ffbsline32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbsline32.c

ffbsline.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbsline32.c :  ffbsline.c
	$(RM) $@
	$(LN)  ffbsline.c ffbsline32.c

ffbsline32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbsline32.c

clean::
	$(RM) ffbsline32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbteplygblt.c ffbteplygblt32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbteplygblt32.c

ffbteplygblt.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  -DFFBTEPLYGLYPHBLT=ffbTEPolyGlyphBlt -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbteplygblt32.c :  ffbteplygblt.c
	$(RM) $@
	$(LN)  ffbteplygblt.c ffbteplygblt32.c

ffbteplygblt32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)  -DFFBTEPLYGLYPHBLT=ffbTEPolyGlyphBlt -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbteplygblt32.c

clean::
	$(RM) ffbteplygblt32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbwideline.c ffbwideline32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbwideline32.c

ffbwideline.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbwideline32.c :  ffbwideline.c
	$(RM) $@
	$(LN)  ffbwideline.c ffbwideline32.c

ffbwideline32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbwideline32.c

clean::
	$(RM) ffbwideline32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbzerarc.c ffbzerarc32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbzerarc32.c

ffbzerarc.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbzerarc32.c :  ffbzerarc.c
	$(RM) $@
	$(LN)  ffbzerarc.c ffbzerarc32.c

ffbzerarc32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbzerarc32.c

clean::
	$(RM) ffbzerarc32.c

MULTICOMPILE_SRCS_EXPANDED=$(MULTICOMPILE_SRCS_EXPANDED) ffbpolypnt.c ffbpolypnt32.c
MULTICOMPILE_LINKS=$(MULTICOMPILE_LINKS) ffbpolypnt32.c

ffbpolypnt.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=8 -DFFBSRCDEPTHBITS=8 			-DFFBPIXELBITS=8 -DFFBDEPTHBITS=8 -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

ffbpolypnt32.c :  ffbpolypnt.c
	$(RM) $@
	$(LN)  ffbpolypnt.c ffbpolypnt32.c

ffbpolypnt32.o:
	$(RM) $@
	$(CC) -c $(CFLAGS)   -DFFBSRCPIXELBITS=32 -DFFBSRCDEPTHBITS=32 			-DFFBPIXELBITS=32 -DFFBDEPTHBITS=32 -DPSZ=32 $*.c 2>&1 | fold -256 | awk -f filter.awk

depend:: ffbpolypnt32.c

clean::
	$(RM) ffbpolypnt32.c

#
# And finally we get to things that compile only once: depth independent.
# The "ARule" filters out bogus warnings pertaining to the use of asm().
#
$(SINGLECOMPILE_SRCS:.c=.o):
	$(RM) $@
	$(CC) -c $(CFLAGS) -DPSZ=8 -DFFB_DEPTH_INDEPENDENT $*.c 2>&1 | fold -256 | awk -f filter.awk

#
# End special rules.  Lists of sources have been accumulated
# along with the special rules, so now we can concatenate all of the
# lists and define the list of all objects.
#

LINKED_SRCS = \
	$(MULTICOMPILE_LINKS) \
	$(COPY_SRCS_EXPANDED)

EXPANDED_SRCS = \
        $(SINGLECOMPILE_SRCS) \
        $(MODEL_SRCS_LOC) \
        $(MULTICOMPILE_SRCS_EXPANDED) \
        $(COPY_SRCS_EXPANDED)

SRCS =  \
	$(EXPANDED_SRCS) \
	$(SRCL) \
	$(FILEGEN_SRCS)

LOC_OBJS= $(SINGLECOMPILE_SRCS:.c=.o) \
	$(MODEL_SRCS_LOC:.c=.o) \
	$(MULTICOMPILE_SRCS_EXPANDED:.c=.o) \
	$(COPY_SRCS_EXPANDED:.c=.o)

OBJS =  $(LOC_OBJS) $(MODEL_OBJS)

   INCLUDES =	-I. -I../../../include -I$(INCLUDESRC) -I../cfb \
		-I../../mfb -I../../cfb \
		-I../../../../extensions/server/lgi/include \
		-I../../../../extensions/server/lgi/src/include \
		-I$(FONTSRC)/include -I../../mi -I$(MODELINCS)
   LINTLIBS = ../../../dix/llib-ldix.ln \
	      ../../../os/4.2bsd/llib-los.ln \
	     ../../mfb/llib-lmfb.ln ../../mi/llib-lmi.ln
    DEFINES =  $(MODEL_FLAG)

loc_objs: $(LOC_OBJS)
	touch loc_objs

dependencies: $(MODEL_TARGET) loc_objs

depend:: ffbdivtable.c ffb.c ffbcirclebits.c ffbarc1bits.c

#
# convenience for grepping through sources
#
show_links::
	@echo $(LINKED_SRCS)
	@ls -l $(LINKED_SRCS)

TRASH	= *pp.c *pu.c *up.c *uu.c *8*32*.c *88*.c *bs.c
clean_links::
	-@$(RM) $(LINKED_SRCS)
	-@$(RM) $(TRASH)
	-@ls -C1 *32.c | grep -v ffbarc1bits32.c | xargs $(RM)
	-@$(RM) ffbarc1bits.c
clean::
	$(RM) ffbarc1bits.c
	$(RM) $(SRCL)
	$(RM) ffbgenffb ffb.c ffbgendivtable ffbgencirclebits ffbcirclebits.c
	$(RM) mflag dflag sflag modelTarget loc_objs

.c.o:
	$(RM) $@
	$(CC) -c $(CFLAGS) $(_NOOP_) $*.c

all:: lib_dec_ffb.a

lib_dec_ffb.a:  dependencies
	$(RM) $@
	$(AR) $@  $(OBJS) ffbext.o

lintlib:: llib-l_dec_ffb.ln

llib-l_dec_ffb.ln:  $(SRCS)
	$(RM) $@
	$(LINT) $(LINTLIBFLAG)_dec_ffb $(LINTFLAGS)  $(SRCS)

lint:
	$(LINT) $(LINTFLAGS) $(SRCS) $(LINTLIBS)
lint1:
	$(LINT) $(LINTFLAGS) $(FILE) $(LINTLIBS)

depend:: $(DEPEND)

$(DEPEND):
	@echo "checking $@ over in $(DEPENDSRC) first..."; \
	cd $(DEPENDSRC); $(MAKE); \
	echo "okay, continuing in $(CURRENT_DIR)"

depend::
	$(DEPEND) $(DEPENDFLAGS) -s "# DO NOT DELETE" -- $(ALLDEFINES) -- $(SRCS)

# HISTORY
# $Log: Imakefile,v $
# Revision 1.1.2.66  1993/06/15  00:40:13  Jean_Ehlers
# 	sfbgendivtable.c is not longer a link to the sfb area
# 	[1993/06/15  00:31:56  Jean_Ehlers]
#
# 	sfbparams.h is no longer a link
# 	[1993/06/14  23:00:41  Jean_Ehlers]
#
# Revision 1.1.2.65  1993/06/04  22:18:43  Jean_Ehlers
# 	From Joel: make sfbwindow.c depth-independent
# 	[1993/06/04  21:18:59  Jean_Ehlers]
#
# Revision 1.1.2.64  1993/06/01  21:42:32  Jean_Ehlers
# 	make sfbfillrct.c depth independent
# 	[1993/06/01  21:40:11  Jean_Ehlers]
#
# Revision 1.1.2.63  1993/05/22  00:10:59  Peter_Valtin
# 	improved clean_links
# 	[1993/05/22  00:06:16  Peter_Valtin]
#
# Revision 1.1.2.62  1993/05/20  22:34:46  Jean_Ehlers
# 	No more special bs.o files, no more -DBLOCKSTIPPLEMODE
# 	[1993/05/20  21:29:06  Jean_Ehlers]
#
# Revision 1.1.2.61  1993/05/18  02:19:25  Felix_Hsu
# 	add -DTHREED
# 	[1993/05/18  00:51:32  Felix_Hsu]
#
# Revision 1.1.2.60  1993/05/17  14:46:00  Peter_Valtin
# 	clean_links target and support logic
# 	[1993/05/17  14:37:43  Peter_Valtin]
#
# Revision 1.1.2.59  1993/05/14  01:55:24  Felix_Hsu
# 	add more wasted compilations of copy code
# 	[1993/05/14  01:48:07  Felix_Hsu]
#
# Revision 1.1.2.58  1993/05/03  15:14:03  Peter_Valtin
# 	cut down on wasted compilations of copy code
# 	[1993/05/03  14:46:01  Peter_Valtin]
#
# Revision 1.1.2.57  1993/04/30  15:20:36  Jean_Ehlers
# 	fix up fat finger bug. IMAGEEXT instead of IMAGETEXT
# 	[1993/04/30  15:19:54  Jean_Ehlers]
#
# Revision 1.1.2.56  1993/04/28  21:32:52  Peter_Valtin
# 	added psz=8 various places
# 	[1993/04/28  21:31:41  Peter_Valtin]
#
# Revision 1.1.2.55  1993/04/28  21:10:18  Peter_Valtin
# 	deleted PSZ from default flags; added PSZ=8 to single compile cc line
# 	[1993/04/28  15:16:22  Peter_Valtin]
#
# Revision 1.1.2.54  1993/04/27  03:31:05  Felix_Hsu
# 	remove -DBLOCKMODE
# 	[1993/04/27  03:23:40  Felix_Hsu]
#
# Revision 1.1.2.53  1993/04/20  21:58:10  Peter_Valtin
# 	added sfbcopy.c
# 	[1993/04/20  01:41:48  Peter_Valtin]
#
# Revision 1.1.2.52  1993/04/20  00:34:14  Jean_Ehlers
# 	sfbpixmap is down depth independent so it gets compiled only once
# 	[1993/04/20  00:32:17  Jean_Ehlers]
#
# Revision 1.1.2.51  1993/04/14  02:38:22  Felix_Hsu
# 	rework pntarea build mechanism
# 	[1993/04/14  02:36:55  Felix_Hsu]
#
# Revision 1.1.2.50  1993/04/14  00:14:18  Felix_Hsu
# 	merged files get -DBLOCKMODE for SFBSOLIDSPAN
# 	[1993/04/13  21:01:05  Felix_Hsu]
#
# 	remove BLOCKMODE compiles
# 	[1993/04/13  20:37:23  Felix_Hsu]
#
# Revision 1.1.2.49  1993/04/08  19:30:18  Jean_Ehlers
# 	finally get the compilation of sfbpolypnt right.
# 	[1993/04/08  19:29:31  Jean_Ehlers]
#
# Revision 1.1.2.48  1993/04/08  10:31:21  Peter_Valtin
# 	don't know where the previous change went to: this submission makes
# 	sfbpolypnt compile twice
# 	[1993/04/08  10:29:09  Peter_Valtin]
#
# Revision 1.1.2.47  1993/04/07  23:10:03  Jean_Ehlers
# 	sfbpolypnt.c is compiled for both depths
# 	[1993/04/07  22:43:56  Jean_Ehlers]
#
# Revision 1.1.2.46  1993/04/02  19:21:55  Jean_Ehlers
# 	compile sfbpixmap for both 8 and 32
# 	[1993/04/02  19:20:25  Jean_Ehlers]
#
# Revision 1.1.2.45  1993/04/02  01:00:25  Felix_Hsu
# 	temporarily remove building .so library - unused.
# 	[1993/04/02  00:07:08  Felix_Hsu]
#
# Revision 1.1.2.44  1993/03/31  02:55:03  Peter_Valtin
# 	corrected dependency generation for objs of multi-compile srcs
# 	[1993/03/31  02:52:02  Peter_Valtin]
#
# Revision 1.1.2.43  1993/03/24  22:43:57  Peter_Valtin
# 	explicitly define how compile-once sources get compiled, so that
# 	bogus warnings re asm("mb") can be suppressed
# 	[1993/03/24  22:41:03  Peter_Valtin]
#
# Revision 1.1.2.42  1993/03/23  17:41:55  Peter_Valtin
# 	my god: the previous comment contained a line that started with 'else' ---
# 	this broke the mips build...
# 	[1993/03/23  17:40:54  Peter_Valtin]
#
# Revision 1.1.2.41  1993/03/23  17:02:37  Peter_Valtin
# 	solved file name accumulation problems for mips (NB: 'make includes' has to
# 	happen before 'make [all]' anytime the makefile is regenerated on mips;
# 	otherwise a somewhat bizarre message like 'cannot find _multi_compile' will
# 	appear
# 	[1993/03/23  16:37:14  Peter_Valtin]
#
# Revision 1.1.2.39  1993/03/22  18:25:15  Peter_Valtin
# 	rewrote for clarity
# 	[1993/03/22  16:24:38  Peter_Valtin]
#
# Revision 1.1.2.38  1993/03/17  00:34:06  Peter_Valtin
# 	added backslant to macro call 'sfbfromsamesource' for sfbplygblt.c
# 	[1993/03/17  00:33:07  Peter_Valtin]
#
# Revision 1.1.2.37  1993/03/16  23:15:49  Jean_Ehlers
# 	This Imakefile will make 8 and 32 bit servers that link together.
# 	[1993/03/16  22:26:50  Jean_Ehlers]
#
# Revision 1.1.2.36  1993/03/12  20:07:48  Jean_Ehlers
# 	      new model file added
# 	      [1993/03/12  18:57:47  Jean_Ehlers]
#
# Revision 1.1.2.35  1993/03/09  16:57:11  Peter_Valtin
# 	added 'sfbObjectFromSpecialSource()' and 'DEPTH()' macros in order to make it
# 	possible to compile .c files multiple times for different depths
# 	we need to clean up this Imakefile
# 	[1993/03/09  16:53:24  Peter_Valtin]
#
# $EndLog$
#

# -------------------------------------------------------------------------
# common rules for all Makefiles - do not edit

emptyrule::

clean::
	$(RM_CMD) "#"*

Makefile:: $(IMAKE)

$(IMAKE):
	@(cd $(IMAKESRC); if [ -f Makefile ]; then \
	echo "checking $@ in $(IMAKESRC) first..."; $(MAKE) all; else \
	echo "bootstrapping $@ from Makefile.ini in $(IMAKESRC) first..."; \
	$(MAKE) -f Makefile.ini BOOTSTRAPCFLAGS="$(BOOTSTRAPCFLAGS)"; fi; \
	echo "okay, continuing in $(CURRENT_DIR)")

Makefile::
	-@if [ -f Makefile ]; then set -x; \
		$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \
	else exit 0; fi
	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)

tags::
	$(TAGS) -w *.[ch]
	$(TAGS) -xw *.[ch] > TAGS

# -------------------------------------------------------------------------
# empty rules for directories that do not have SUBDIRS - do not edit

install::
	@echo "install in $(CURRENT_DIR) done"

install.man::
	@echo "install.man in $(CURRENT_DIR) done"

Makefiles::

includes::

# -------------------------------------------------------------------------
# dependencies generated by makedepend

# DO NOT DELETE

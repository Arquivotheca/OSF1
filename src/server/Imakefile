XCOMM *****************************************************************
XCOMM *                                                               *
XCOMM *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
XCOMM *                                                               *
XCOMM *   All Rights Reserved.  Unpublished rights  reserved  under   *
XCOMM *   the copyright laws of the United States.                    *
XCOMM *                                                               *
XCOMM *   The software contained on this media  is  proprietary  to   *
XCOMM *   and  embodies  the  confidential  technology  of  Digital   *
XCOMM *   Equipment Corporation.  Possession, use,  duplication  or   *
XCOMM *   dissemination of the software and media is authorized only  *
XCOMM *   pursuant to a valid written license from Digital Equipment  *
XCOMM *   Corporation.                                                *
XCOMM *                                                               *
XCOMM *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
XCOMM *   by the U.S. Government is subject to restrictions  as  set  *
XCOMM *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
XCOMM *   or  in  FAR 52.227-19, as applicable.                       *
XCOMM *                                                               *
XCOMM *****************************************************************
XCOMM
XCOMM HISTORY
XCOMM 
XCOMM $XConsortium: Imakefile,v 1.138 91/12/28 15:02:20 keith Exp $
/*
 * Server Master Makefile
 */

#include <Server.tmpl>

#define StdSubdirs dix os ddx/mi
#define MFBSubdirs StdSubdirs ddx/mfb
#define CFBSubdirs MFBSubdirs ddx/cfb ddx/cfb16 ddx/cfb32
#define APSSubdirs CFBSubdirs ddx/dec/memtool
#define StdLibs $(DIX) $(OS) $(MI) $(EXTENSIONS)
#define MFBBareLibs $(DIX) $(OS) $(FONT) $(MFB) $(MI)
#define MFBLibs MFBBareLibs $(EXTENSIONS)
#define CFBBareLibs $(DIX) $(OS) $(FONT) $(CFB) $(MFB) $(MI)
#define CFBLibs CFBBareLibs $(EXTENSIONS)

#if BuildXInputExt
      XINPUTEXT = $(EXTENSIONSRC)/server/xinput/libxinput.a
#endif
#if BuildXTrapExt
       XTRAPEXT = $(EXTENSIONSRC)/server/xtrap/lib_dec_xtrapext.a      
#endif
#if BuildSMTExt
        SMTEXTS = $(EXTENSIONSRC)/server/smt/lib_dec_smt.a $(EXTENSIONSRC)/ip/libip.a
        SMTDIRS = $(EXTENSIONSRC)/ip 
#endif

#if BuildXvExt
#define need_ext_xv
           XVSRC = \
		$(EXTENSIONSRC)/xv/server 
           XVLIB = \
		$(EXTENSIONSRC)/xv/server/libxv.a 
#else
           XVSRC = /* nothing */
           XVLIB = /* nothing */
#endif
#if BuildXieExt
 XIEEXTENSIONSRC= $(EXTENSIONSRC)/server/xie
        XIELIBS = $(XIEEXTENSIONSRC)/lib_dec_xie.a $(XIEEXTENSIONSRC)/smi/libsmi.a
#endif
#if BuildDPSExt
        XDPSSRC = $(EXTENSIONSRC)/DPS/server
       XDPSOBJS = $(XDPSSRC)/build/file_paths.o 			\
		  $(XDPSSRC)/build/init_table.o
       XDPSLIBS = $(XDPSSRC)/X/lib_adobe_x.a 				\
		  $(XDPSSRC)/packages/postscript/libpostscript.a 	\
		  $(XDPSSRC)/packages/fonts/libfonts.a 			\
		  $(XDPSSRC)/packages/graphics/libgraphics.a 		\
		  $(XDPSSRC)/packages/language/liblanguage.a 		\
		  $(XDPSSRC)/packages/vm/libvm.a 			\
		  $(XDPSSRC)/packages/server/libserver.a 		\
		  $(XDPSSRC)/packages/coroutine/libcoroutine.a 		\
		  $(XDPSSRC)/packages/device/libdevice.a 		\
		  $(XDPSSRC)/packages/devpattern/libdevpattern.a 	\
		  $(XDPSSRC)/packages/stodev/libstodev.a 		\
		  $(XDPSSRC)/packages/stream/libstream.a 		\
		  $(XDPSSRC)/packages/fp/libfp.a 			\
		  $(XDPSSRC)/packages/pslib/libpslib.a 
#else
        XDPSSRC = /* nothing */
       XDPSOBJS = /* nothing */
       XDPSLIBS = /* nothing */
#endif /* BuildDPSExt */

#ifdef	BuildLGI
     LGIMBUFFER = $(EXTENSIONSRC)/multibuf/server/libmultibuf.a
#else
     LGIMBUFFER = /* nothing */
#endif /* BuildLGI */

      OTHEREXTS = $(XINPUTEXT) $(XTRAPEXT) $(XVLIB)

        DEPDIRS = $(FONTSRC)/lib/font $(EXTENSIONSRC)/server $(XVSRC) \
		  $(SMTDIRS) $(ECPEX_PEXDIRS) $(XDPSSRC)
     NONPEXEXTS = $(XTRAPEXTLIB) $(SMTEXTS) $(OTHEREXTS) $(LGIMBUFFER) \
        	  $(EXTENSIONSRC)/server/libext.a 
     EXTENSIONS = $(NONPEXEXTS) $(ECPEX_PEXLIBS) $(XIELIBS) $(XDPSLIBS)
         XAULIB = $(XAUTHSRC)/libXau.a
       XDMCPLIB = $(XDMCPLIBSRC)/libXdmcp.a
#if UseMemTools
	     OS = ddx/dec/memtool/libmemtool.a os/libos.a -L/usr/ccs/lib/cmplrs/cc \
		  -lmld -lexc $(XAULIB) $(XDMCPLIB)
#else
             OS = os/libos.a $(XAULIB) $(XDMCPLIB)
#endif
        BSDEMUL = $(LIBSRC)/Berk/Berklib.o
            MFB = ddx/mfb/libmfb.a
            CFB = ddx/cfb/libcfb.a ddx/cfb16/libcfb16.a ddx/cfb32/libcfb32.a
             MI = ddx/mi/libmi.a
            DIX = dix/libdix.a
           FONT = $(FONTSRC)/lib/font/libfont.a
#if SystemV4 && X386Server
        SYSLIBS = -lm /usr/ucblib/libucb.a
#else
#  if XirisServer
      SYSLIBS = -ldnet_stub -lm
#  else
      SYSLIBS = -ldnet_stub -lm -ldbm
#  endif
#endif
           CBRT = ddx/mi/cbrt.o

XCOMM
XCOMM This turns off the default rule for compiling .c files because
XCOMM this makefile does not really know how to build it.  This is really
XCOMM just a hack because of the Sun version of make and nfs.
XCOMM
.c.o:

/*****************************************************************************
 *		  ALL definitions, add one for each server                   *
 *****************************************************************************/

#if XqdssServer
ALL1 = Xqdss
#endif

#if XqvssServer
#if XqdssServer
ALL2 = Xqvss
#else
ALL1 = Xqvss
#endif
#endif

#if XdecServer
ALL1 = Xdec
#endif

#if XlgiHXServer
ALL1 = XlgiHX
#endif

#if XpvxServer
ALL1 = Xpvx
#endif

#if XpxgServer
ALL1 = Xpxg
#endif

#if XffbServer
ALL1 = Xffb
#endif

#if XmfbpmaxServer
ALL1 = Xmfbpmax
#endif

#if XcfbpmaxServer
#if XmfbpmaxServer
ALL2 = Xcfbpmax
#else
ALL1 = Xcfbpmax
#endif
#endif

#if XsunMonoServer
#if XsunServer
ALL2 = XsunMono
#else
ALL1 = XsunMono
#endif
#endif

#if XsunServer
ALL1 = Xsun
#endif

#if XibmServer
ALL1 = Xibm
#endif

#if XtekServer
ALL1 = Xtek
#endif

#if XmacIIServer
ALL1 = XmacII
#endif

#if XlunaServer
ALL1 = Xluna
#endif

#if XmipsServer
ALL1 = Xmips
#endif

#if X386Server
ALL1 = X386
#endif

#if XnonServer
ALL2 = Xnon
#endif

#if XirisServer
ALL1 = Xiris
#endif

/* end ALL definitions */

ALL = $(ALL1) $(ALL2) 

all: $(ALL)

#if DoSharedServer
depend:: 
	if [ ! -f ./so_locations ]; then $(CP) $(CROSSBASE)/usr/shlib/so_locations .; chmod +w ./so_locations ; fi

clean::
	$(RM) ./so_locations
#endif



/*****************************************************************************
 *		  Build rule blocks, add one for each server                 *
 *****************************************************************************/


#if XqdssServer
XCOMM
XCOMM Digital qdss server
XCOMM
SUBDIRS0 = MFBSubdirs ddx/dec/lk201
SUBDIRS1 = ddx/dec/qdss ddx/dec/qdss/libtl
QDSSDIRS = $(SUBDIRS0) $(SUBDIRS1) $(DEPDIRS)
QDSSOBJS = ddx/dec/qdss/init.o ddx/dec/qdss/qdss_io.o ddx/dec/lk201/lk201.o
QDSSLIBS = ddx/dec/qdss/libqdss.a ddx/dec/qdss/libtl/libtl.a \
           ddx/dec/qdss/libqdss.a MFBLibs

ServerTarget(Xqdss,$(QDSSDIRS),$(QDSSOBJS),$(QDSSLIBS),$(SYSLIBS))
#endif /* XqdssServer */


#if XqvssServer
XCOMM
XCOMM Digital qvss server
XCOMM
SUBDIRS0 = MFBSubdirs ddx/dec/lk201
SUBDIRS2 = ddx/dec/qvss
QVSSDIRS = $(SUBDIRS0) $(SUBDIRS2) $(DEPDIRS)
QVSSOBJS = ddx/dec/qvss/init.o ddx/dec/qvss/qvss_io.o ddx/dec/lk201/lk201.o
QVSSLIBS = MFBLibs

ServerTarget(Xqvss,$(QVSSDIRS),$(QVSSOBJS),$(QVSSLIBS),$(SYSLIBS))
#endif /* XqvssServer */


#if XdecServer
XCOMM
XCOMM Digital comprehensive server 
XCOMM
SUBDIRS0 = CFBSubdirs ddx/dec/cfb ddx/dec/sfb ddx/dec/tx ddx/dec/ws ddx/dec/triton ddx/dec/ffb 
#if DoSharedServer
DECDIRS = loadable $(SUBDIRS0) $(DEPDIRS) 
#else
DECDIRS = $(SUBDIRS0) $(DEPDIRS) 
#endif
DECOBJS = $(ECPEX_PEXOBJS) ddx/dec/ws/init.o $(XDPSOBJS)
DECLIBS = ddx/dec/ws/lib_dec_ws.a ddx/dec/triton/lib_dec_triton.a ddx/dec/sfb/lib_dec_sfb.a ddx/dec/tx/lib_dec_tx.a ddx/dec/cfb/libcfb.a CFBLibs $(EXTENSIONSRC)/server/draw/generic/libdrawgeneric.a dix/libdix.a ddx/dec/ffb/lib_dec_ffb.a $(CROSSBASE)/usr/ccs/lib/libmach.a


ServerTarget(Xdec,$(DECDIRS),$(DECOBJS),$(DECLIBS) ,$(SYSLIBS))
#endif /* dosfbServer */

#if XmfbpmaxServer
XCOMM
XCOMM Digital mfbpmax server
XCOMM
SUBDIRS0 = MFBSubdirs
SUBDIRS2 = ddx/dec/lk201
SUBDIRS3 = ddx/dec/mfbpmax
PMAXMFBDIRS = $(SUBDIRS0) $(SUBDIRS2) $(SUBDIRS3) $(DEPDIRS)
PMAXMFBOBJS = ddx/dec/mfbpmax/init.o ddx/dec/mfbpmax/mfbpmax_io.o ddx/dec/lk201/lk201.o
PMAXMFBLIBS = MFBLibs

ServerTarget(Xmfbpmax,$(PMAXMFBDIRS),$(PMAXMFBOBJS),$(PMAXMFBLIBS),$(SYSLIBS))
#endif /* XmfbpmaxServer */


#if XcfbpmaxServer
XCOMM
XCOMM Digital cfbpmax server
XCOMM
SUBDIRS0 = MFBSubdirs
SUBDIRS1 = ddx/cfb ddx/dec/cfbpmax
SUBDIRS2 = ddx/dec/lk201
PMAXCFBDIRS = $(SUBDIRS0) $(SUBDIRS1) $(SUBDIRS2) $(DEPDIRS)
PMAXCFBOBJS = ddx/dec/cfbpmax/init.o ddx/dec/cfbpmax/cfbpmax_io.o \
	ddx/dec/cfbpmax/cfbpmaxcolor.o ddx/dec/lk201/lk201.o
PMAXCFBLIBS = CFBLibs

ServerTarget(Xcfbpmax,$(PMAXCFBDIRS),$(PMAXCFBOBJS),$(PMAXCFBLIBS),$(SYSLIBS))
#endif /* XcfbpmaxServer */

#if XsunServer
XCOMM
XCOMM Sun server
XCOMM
#if UseSunWindowsInServer
SUNWINDOWSLIBS = -lsunwindow -lpixrect
#endif
SUBDIRS0 = MFBSubdirs
SUBDIRS1 = ddx/cfb ddx/cfb16 ddx/cfb32
SUBDIRS2 = ddx/sun
SUNDIRS = $(SUBDIRS0) $(SUBDIRS1) $(SUBDIRS2) $(DEPDIRS)
SUNOBJS = ddx/sun/sunInit.o
SUNLIBS = ddx/sun/libsun.a CFBLibs
SUNSYSLIBS = $(SYSLIBS) $(SUNWINDOWSLIBS)

ServerTarget(Xsun,$(SUNDIRS),$(SUNOBJS),$(SUNLIBS),$(SUNSYSLIBS))
#endif /* XsunServer */


#if XsunMonoServer
XCOMM
XCOMM Sun monochrome server
XCOMM
#if UseSunWindowsInServer
SUNWINDOWSLIBS = -lsunwindow -lpixrect
#endif
SUBDIRS0 = MFBSubdirs
SUBDIRS2 = ddx/sun
SUNMDIRS = $(SUBDIRS0) $(SUBDIRS2) $(DEPDIRS)
SUNMOBJS = ddx/sun/sunInitMono.o ddx/sun/sunInitExtMono.o
SUNMLIBS = ddx/sun/libsun.a MFBBareLibs $(NONPEXEXTS)
SUNSYSLIBS = $(SYSLIBS) $(SUNWINDOWSLIBS)

ServerTarget(XsunMono,$(SUNMDIRS),$(SUNMOBJS),$(SUNMLIBS),$(SUNSYSLIBS))
#endif /* XsunMonoServer */


#if XibmServer
XCOMM
XCOMM IBM server
XCOMM
#if SpecialMalloc
IBMALLOCLIB = ddx/ibm/common/libibmalloc.a
#else
IBMALLOCLIB = 
#endif
SUBDIRS0 = CFBSubdirs ddx/ibm
IBMDIRS = $(SUBDIRS0) $(DEPDIRS)
IBMOBJS = ddx/ibm/common/ibmcomm.o ddx/ibm/common/ibmDate.o ddx/ibm/pgc/pgc.o
IBMLIBS = ddx/ibm/AIX/hft.o ddx/ibm/libibm.a $(IBMALLOCLIB) CFBLibs

ServerTarget(Xibm,$(IBMDIRS),$(IBMOBJS),$(IBMLIBS),$(SYSLIBS))
#endif /* XibmServer */


#if XtekServer
XCOMM
XCOMM Tektronix server
XCOMM
SUBDIRS0 = CFBSubdirs ddx/tek
TEKDIRS = $(SUBDIRS0) $(DEPDIRS)
TEKOBJS = ddx/tek/pegInit.o
TEKLIBS = ddx/tek/libtek.a CFBLibs
TEKSYSLIBS = $(CBRT) $(SYSLIBS)

ServerTarget(Xtek,$(TEKDIRS),$(TEKOBJS),$(TEKLIBS),$(TEKSYSLIBS))
#endif /* XtekServer */


#if XmacIIServer
XCOMM
XCOMM Apple MacII server
XCOMM
SUBDIRS0 = CFBSubdirs ddx/macII
MACIIDIRS = $(SUBDIRS0) $(DEPDIRS)
MACIIOBJS = ddx/macII/macIIInitS.o ddx/macII/macIIColor.o
MACIILIBS = ddx/macII/libmacII.a CFBLibs
MACIISYSLIBS = $(CBRT) $(SYSLIBS)
 
ServerTarget(XmacII,$(MACIIDIRS),$(MACIIOBJS),$(MACIILIBS),$(MACIISYSLIBS))
#endif /* XmacIIServer */


#if XlunaServer
XCOMM
XCOMM OMRON Luna server
XCOMM
SUBDIRS0 = MFBSubdirs ddx/omron
LUNADIRS = $(SUBDIRS0) $(DEPDIRS)
LUNAOBJS = ddx/omron/omronInit.o
#ifdef uniosu
LUNALIBS = ddx/omron/libomron.a MFBLibs $(BSDEMUL)
#else
LUNALIBS = ddx/omron/libomron.a MFBLibs
#endif

ServerTarget(Xluna,$(LUNADIRS),$(LUNAOBJS),$(LUNALIBS),$(SYSLIBS))
#endif /* XlunaServer */


#if XmipsServer
XCOMM
XCOMM MIPS server
XCOMM
SUBDIRS0 = CFBSubdirs ddx/mips
MIPSDIRS = $(SUBDIRS0) $(DEPDIRS)
MIPSOBJS = ddx/mips/mipsInit.o
MIPSLIBS = ddx/mips/libmips.a CFBLibs
MIPSSYSLIBS = $(SYSLIBS) -lc /usr/lib/libc.a
 
ServerTarget(Xmips,$(MIPSDIRS),$(MIPSOBJS),$(MIPSLIBS),$(MIPSSYSLIBS))
#endif /* XmipsServer */


#if X386Server
XCOMM
XCOMM X386 server
XCOMM
SUBDIRS0 = MFBSubdirs ddx/x386
X386DIRS = $(SUBDIRS0) $(DEPDIRS)
X386OBJS = ddx/x386/x386Init.o
#ifdef i386SVR3Architecture
X386SYSLIBS = $(CBRT) $(BSDEMUL)
#endif
X386LIBS = ddx/x386/libx386.a ddx/x386/vga/libvga.a ddx/x386/drivers/libdrivers.a ddx/x386/cfb.banked/libcfb.a MFBLibs $(X386SYSLIBS)

INSTPGMFLAGS = $(INSTUIDFLAGS)     /* server must be suid root  */
ServerTarget(X386,$(X386DIRS),$(X386OBJS),$(X386LIBS),$(SYSLIBS))
#endif /* X386Server */


#if XirisServer
XCOMM
XCOMM SGI Iris Server
XCOMM
SGIDIRS = ddx/sgi/IRIX ddx/sgi/common ddx/sgi/gr1 ddx/sgi/nfb ddx/sgi/rrm \
	ddx/sgi/sgi
SUBDIRS0 = CFBSubdirs $(SGIDIRS)
IRISDIRS = $(SUBDIRS0) $(DEPDIRS)
IRISOBJS = ddx/sgi/sgi/sgiScreens.o ddx/sgi/IRIX/irixKernInit.o \
	   ddx/mi/miinitext.o
IRISLIBS = 	$(DIX) $(OS) \
		ddx/sgi/common/libcomm.a \
		ddx/sgi/sgi/libsgi.a \
		ddx/sgi/IRIX/libirix.a \
		ddx/sgi/gr1/re1/libre1.a \
	   	ddx/sgi/gr1/re2/libre2.a \
		ddx/sgi/IRIX/libirix.a \
	   	ddx/sgi/gr1/libgr1.a \
	   	ddx/sgi/rrm/librrm.a \
		ddx/sgi/nfb/libnfb.a \
		$(CFB) $(MFB) $(MI) $(FONT) $(EXTENSIONS)
IRISSYSLIBS = $(SYSLIBS)
 
ServerTarget(Xiris,$(IRISDIRS),$(IRISOBJS),$(IRISLIBS),$(IRISSYSLIBS))
#endif

#if XnonServer
XCOMM
XCOMM non server, just compile sources for build test
XCOMM
SUBDIRS0 = CFBSubdirs

Xnon: $(SUBDIRS0) $(DEPDIRS)

#endif /* XnonServer */


XCOMM
XCOMM LGI server defines
XCOMM
#if BuildLGI 

LGIPEXSRC = $(EXTENSIONSRC)/server/pex

LGIGLSRC = $(EXTENSIONSRC)/server/gl

LGISRC = $(EXTENSIONSRC)/server/lgi

LGIOBJS = 

LGIDIRS = \
	$(LGIPEXSRC)  \
	$(LGIGLSRC)  \
	$(EXTENSIONSRC)/server/draw \
	$(EXTENSIONSRC)/server/fillareas \
	$(EXTENSIONSRC)/server/nurbs \
	$(EXTENSIONSRC)/server/lgi \
	$(EXTENSIONSRC)/server/utils 

LGILIBS = \
	$(LGIGLSRC)/di/libgldi.a \
	$(LGIPEXSRC)/di/libpexdi.a \
	$(LGIPEXSRC)/dd/dd_lgi/render/libpexrender.a \
	$(LGIPEXSRC)/dd/dd_lgi/nurbs/libpexnurbs.a \
	$(LGIPEXSRC)/dd/dd_lgi/prims/libpexprims.a \
	$(LGIPEXSRC)/dd/dd_lgi/fillareas/libpexfa.a \
	$(LGIPEXSRC)/dd/dd_lgi/validate/libpexval.a \
	$(LGIPEXSRC)/dd/dd_lgi/utils/libpexddutils.a \
	$(LGIPEXSRC)/dd/mi/libpexmi.a \
	$(LGIPEXSRC)/utils/libpexutils.a \
	$(EXTENSIONSRC)/server/nurbs/tessellate/libnurbtess.a \
	$(EXTENSIONSRC)/server/nurbs/triangulate/libnurbtri.a \
	$(EXTENSIONSRC)/server/nurbs/utils/libnurbutils.a \
	$(EXTENSIONSRC)/server/nurbs/postProcess/libnurbpost.a \
	$(EXTENSIONSRC)/server/nurbs/lgi_out/libnurboutput.a \
	$(EXTENSIONSRC)/server/fillareas/tessellate/libfillareastess.a \
	$(EXTENSIONSRC)/server/fillareas/lgi_out/libfillareasout.a \
	$(EXTENSIONSRC)/server/utils/libutils.a 
#endif	/* BuildLGI */

#if	XlgiHXServer

LGIHXOBJS = ddx/dec/ws/cfbinit.o ddx/dec/ws/ws_io.o \
		ddx/dec/ws/ext_device.o ddx/dec/ws/ws_color.o \
		ddx/dec/ws/acc_sfb.o $(MALLOCOBJS) $(LGIOBJS)

LGIHXLIBS = ddx/dec/ws/lib_dec_ws.a ddx/dec/sfb/lib_dec_sfb.a \
		$(EXTENSIONSRC)/server/draw/sfb/libdrawsfb.a \
		ddx/dec/cfb/libcfb.a ddx/dec/tx/lib_dec_tx.a CFBLibs \
		$(LGILIBS) \
		$(EXTENSIONSRC)/server/lgi/lib/$(LGI_HOST_ARCH)/libucodehx.a 

SUBDIRS0 = APSSubdirs ddx/dec/cfb ddx/dec/sfb ddx/dec/tx ddx/dec/ws
DECDIRS = $(SUBDIRS0) $(DEPDIRS) $(LGIDIRS)
DECOBJS = ddx/dec/ws/init.o $(LGIHXOBJS) 
DECLIBS = ddx/dec/ws/lib_dec_ws.a ddx/dec/sfb/lib_dec_sfb.a ddx/dec/tx/lib_dec_tx.a ddx/dec/cfb/libcfb.a CFBLibs $(LGIHXLIBS)
ServerTarget(XlgiHX,$(DECDIRS),$(DECOBJS),$(DECLIBS) ,$(SYSLIBS))

#endif	/* XlgiHXServer */

#if	BuildLGIPVG

LGIPVGOBJS = $(LGIOBJS) 


LGIPVGLIBS = $(LGILIBS) \
	$(LGISRC)/src/export/stub/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/export/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/export/shared/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/primitive/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/packet/shared/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/state/shared/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/pipe/shared/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/pipe/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/primitive/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/primitive/shared/cfbhost/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/data/shared/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/3d/shared/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/3d/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/export_pkt/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/export_pkt/shared/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/math/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/pixel/shared/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/pixel/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/render/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/render/shared/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/render/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/comutil/shared/host/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/state/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/render/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/render/shared/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/3d/shared/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/math/shared/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/pipe/shared/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/export/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/system/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/packet/pvg/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/comutil/shared/host/$(LGI_HOST_ARCH)/lib.a \
	$(LGISRC)/src/data/pvg/$(LGI_HOST_ARCH)/lib.a 

#endif	/* BuildLGIPVG */

#if XpvxServer
XCOMM
XCOMM Digital ALPHA/MIPS/VAX PixelVision based WS server 
XCOMM 

PVX = ddx/dec/pvx/libpvx.a
STEREO = $(EXTENSIONSRC)/DECStereo/server
STEREOLIBS = $(STEREO)/di/libStereo.a
#define PVXSubdirs APSSubdirs ddx/dec/pvx ddx/dec/pvx/pvdu ddx/dec/pvx/pvRmdir

SUBDIRS0 = PVXSubdirs ddx/dec/ws
DECDIRS = $(SUBDIRS0) $(DEPDIRS) $(LGIDIRS)
DECOBJS = ddx/dec/ws/init.o $(LGIPVGOBJS)
DECLIBS = ddx/dec/ws/lib_dec_ws.a \
	$(PVX) \
	$(DIX) \
	$(EXTENSIONSRC)/server/draw/pvg/libdrawpvg.a \
	CFBLibs $(STEREOLIBS) \
	$(LGIPVGLIBS)

LGIServerTarget(Xpvx,$(DECDIRS),$(DECOBJS),$(DECLIBS),$(SYSLIBS) -llmf)
InstallMultipleFlags(Xpvx,$(BINDIR),$(INSTPGMFLAGS))
#endif /* XpvxServer */


#if XpxgServer
XCOMM
XCOMM Digital ALPHA/MIPS/VAX PXG based WS server 
XCOMM 

#if BuildDblbuf
DBLBUFLIB = $(EXTENSIONSRC)/server/dblbuf/libdblbuf.a 
DBLBUFDIR = $(EXTENSIONSRC)/server/dblbuf
#else
DBLBUFLIB = 
DBLBUFDIR = 
#endif

LGIPXGOBJS = $(MALLOCOBJS) $(LGIOBJS)

LGIPXGLIBS = ddx/dec/pxg/libpxg.a \
		$(EXTENSIONSRC)/server/draw/pxg/libdrawpxg.a \
		CFBLibs $(LGILIBS) $(DBLBUFLIB) \
		$(EXTENSIONSRC)/server/lgi/lib/$(LGI_HOST_ARCH)/libucodepxg.a \
		$(EXTENSIONSRC)/server/lgi/lib/$(LGI_HOST_ARCH)/libdev.a 

SUBDIRS0 = APSSubdirs ddx/dec/ws ddx/dec/pxg
DECDIRS = $(SUBDIRS0) $(DEPDIRS) $(LGIDIRS) $(DBLBUFDIR)
DECOBJS = ddx/dec/ws/init.o $(LGIPXGOBJS)
DECLIBS = ddx/dec/ws/lib_dec_ws.a  $(LGIPXGLIBS)

ServerTarget(Xpxg,$(DECDIRS),$(DECOBJS),$(DECLIBS),$(SYSLIBS) -llmf)
#endif /* XpxgServer */


#if	XffbServer
XCOMM
XCOMM Digital ALPHA/MIPS/VAX SFB+ based WS server 
XCOMM 
#if BuildLGI 
LGIFFBTUCODE=$(EXTENSIONSRC)/server/lgi/lib/$(LGI_HOST_ARCH)/libucodesfbplus.a 
#endif
LGIFFBTOBJS = ddx/dec/ffb/acc_ffb.o $(MALLOCOBJS) $(LGIOBJS)

LGIFFBTLIBS = ddx/dec/ffb/lib_dec_ffb.a ddx/dec/cmap/lib_dec_cmap.a \
        ddx/dec/cfb/libcfb.a \
        ddx/dec/tx/lib_dec_tx.a ddx/dec/sfb/lib_dec_sfb.a \
	CFBLibs $(LGILIBS) \
	$(EXTENSIONSRC)/server/draw/ffb/libdrawffb.a  \
        $(EXTENSIONSRC)/server/draw/generic/libdrawgeneric.a \
        $(EXTENSIONSRC)/server/lgi/src/export/stub/$(LGI_HOST_ARCH)/lib.a \
        $(DIX) $(LGIFFBTUCODE)

SUBDIRS0 = APSSubdirs ddx/dec/ffb ddx/dec/tx ddx/dec/cfb ddx/dec/ws
DECDIRS = $(LGIDIRS) $(SUBDIRS0) $(DEPDIRS)
DECOBJS = ddx/dec/ws/init.o $(LGIFFBTOBJS)
DECLIBS = ddx/dec/ws/lib_dec_ws.a $(LGIFFBTLIBS) \
          $(CROSSBASE)/usr/ccs/lib/libmach.a

LICENCE_LIB = -llmf
ServerTarget(Xffb,$(DECDIRS),$(DECOBJS),$(DECLIBS),$(SYSLIBS) $(LICENCE_LIB))

#endif	/* XffbServer */

#if DoSharedServer
SUBDIRS = loadable $(SUBDIRS0) $(SUBDIRS1) $(SUBDIRS2) $(SUBDIRS3) 
#else
SUBDIRS = $(SUBDIRS0) $(SUBDIRS1) $(SUBDIRS2) $(SUBDIRS3)
#endif

#if !DoSharedServer
InstallMultipleFlags($(ALL),$(BINDIR),$(INSTPGMFLAGS))
#endif

#if !BuildLGIPVG
install::
	-(cd $(DESTDIR)$(BINDIR); $(RM) X; $(LN) $(ALL1) X)
#endif

#define IHaveSubdirs

DependSubdirs($(SUBDIRS))
MakeLintLibSubdirs($(SUBDIRS))
LintSubdirs($(SUBDIRS))

ForceSubdirs($(DEPDIRS) $(SUBDIRS))

clean::
	$(RM) $(ALL)

InstallManPage(Xserver,$(MANDIR))



#if DoSharedServer
InstallSubdirs(loadable)
InstallManSubdirs(loadable)

check:
	$(RM) -f check_file
	for i in $(DECLIBS); do \
		(echo $$i >> check_file);\
	done
	/bin/csh process_check.sh

clean::
	$(RM) check_*

#endif


XCOMM 
XCOMM *****************************************************************
XCOMM *                                                               *
XCOMM *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
XCOMM *                                                               *
XCOMM *   All Rights Reserved.  Unpublished rights  reserved  under   *
XCOMM *   the copyright laws of the United States.                    *
XCOMM *                                                               *
XCOMM *   The software contained on this media  is  proprietary  to   *
XCOMM *   and  embodies  the  confidential  technology  of  Digital   *
XCOMM *   Equipment Corporation.  Possession, use,  duplication  or   *
XCOMM *   dissemination of the software and media is authorized only  *
XCOMM *   pursuant to a valid written license from Digital Equipment  *
XCOMM *   Corporation.                                                *
XCOMM *                                                               *
XCOMM *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
XCOMM *   by the U.S. Government is subject to restrictions  as  set  *
XCOMM *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
XCOMM *   or  in  FAR 52.227-19, as applicable.                       *
XCOMM *                                                               *
XCOMM *****************************************************************
XCOMM
XCOMM HISTORY
XCOMM 
XCOMM $XConsortium: Imakefile,v 1.59 92/09/16 11:57:50 rws Exp $
#include <Server.tmpl>

#if (SystemV || SystemV4) && !HasSockets
#undef ConnectionFlags
#define ConnectionFlags -DTCPCONN -DUNIXCONN
#endif

/*
 * If you have any extra files to be put into the library, define them here.
 */

#ifdef HPArchitecture
#define OtherSources hpsocket.c 
#define OtherObjects hpsocket.o dbm.o 
#endif

#ifdef R4FontStructures
FONTSRCS = osfonts.c fonttype.c
FONTOBJS = osfonts.o fonttype.o
FONT_DEFINES = FontDefines FontFilters
#endif

/*
 * do not modify the following two definitions
 */

#ifndef OtherSources
#define OtherSources
#endif

#ifndef OtherObjects
#define OtherObjects
#endif

#if HasXdmAuth
XDMAUTHDEFS = -DHASXDMAUTH
XDMAUTHOBJS = xdmauth.o 
XDMAUTHSRCS = xdmauth.c 
#else
XDMAUTHDEFS = 
XDMAUTHOBJS =
XDMAUTHSCRS =
#endif

#if HasSecureRPC
RPCDEFS = -DSECURE_RPC
RPCOBJS = rpcauth.o
RPCSRCS = rpcauth.c
#else
RPCDEFS =
RPCOBJS =
RPCSRCS =
#endif

BOOTSTRAPCFLAGS = 
           SRCS = WaitFor.c access.c connection.c io.c oscolor.c \
                  osinit.c utils.c auth.c mitauth.c $(FONTSRCS) \
 		  $(RPCSRCS) xdmcp.c decompress.c OtherSources $(XDMAUTHSRCS)
           OBJS = WaitFor.o access.o connection.o io.o oscolor.o \
                  osinit.o utils.o auth.o mitauth.o $(FONTOBJS) \
 		  $(RPCOBJS) xdmcp.o decompress.o OtherObjects $(XDMAUTHOBJS)
#if SpecialMalloc
     OS_DEFINES = -DSPECIAL_MALLOC
#else
     OS_DEFINES =
#endif /* SpecialMalloc */
#if defined(PegasusArchitecture) || defined(SGIArchitecture) || \
    defined(AlphaArchitecture) || defined(MipsArchitecture)
    TIME_DEFINES = -DDDXTIME
#else
    TIME_DEFINES =
#endif
    DBM_DEFINES = NdbmDefines
    ADM_DEFINES = -DADMPATH=\"$(ADMDIR)/X\%smsgs\"
        DEFINES = ConnectionFlags $(OS_DEFINES) $(XDMAUTHDEFS) $(RPCDEFS) $(SIGNAL_DEFINES)
       INCLUDES = -I.  -I../include -I$(INCLUDESRC) -I$(TOP)/lib/Xau \
		-I../../extensions/include -I../../extensions/ip
       LINTLIBS = ../dix/llib-ldix.ln

#ifdef HPArchitecture
         DBMLIB = /usr/lib/libdbm.a
    XLIBSYSVDIR = $(TOP)/lib/X/sysV
#endif /* HPArchitecture */

#ifdef NEED_ALLOCA_FROM_LIBPW
          PWLIB = /lib/libPW.a
#endif /* NEED_ALLOCA_FROM_LIBPW */

NormalLibraryObjectRule()
NormalLibraryTarget(os,$(OBJS) $(STATICOBJS))
LintLibraryTarget(os,$(SRCS) $(STATICSRCS))
NormalLintTarget($(SRCS) $(STATICSRCS))

#if SharedServerLibs
SharedLibraryTarget(os,.,$(OBJS) $(SHAREDOBJS))
InstallSharedLibrary(os,.,$(INSTALLSERVERLIBSDIR))

#endif

#ifdef HPArchitecture
XCOMM
XCOMM The following kludge is necessary because dbm already has a global 
XCOMM routine named "bcopy" that is implemented in a silly way.  So, we have to 
XCOMM extract the objects from the library, force the bcopy routine to be 
XCOMM local to the one file, put the result into a temporary file, rename the 
XCOMM temporary file to its proper name, and link it together with
XCOMM everything else to form the object file that we link into the server.
XCOMM
#ifdef hp9000s300
dbm.o:  $(DBMLIB)
	rm -f dbm.o
	if [ ! -d dbm ]; then $(RM) -r dbm; mkdir dbm; else /bin/true; fi
	(cd dbm; rm -f *.o; ar -x $(DBMLIB); \
	ld -r -o a.out.o -h _bcopy ndbm.o; \
	mv a.out.o ndbm.o; ld -r -o ../dbm.o *.o)
#else
dbm.o:  $(DBMLIB)
	rm -f dbm.o
	if [ ! -d dbm ]; then $(RM) -r dbm; mkdir dbm; else /bin/true; fi
	(cd dbm; rm -f *.o; ar -x $(DBMLIB); \
	ld -r -o a.out.o -h bcopy ndbm.o; \
	mv a.out.o ndbm.o; ld -r -o ../dbm.o *.o)
#endif /* hp9000s300 */
#endif /* HPArchitecture */

#ifdef NEED_ALLOCA_FROM_LIBPW
XCOMM
XCOMM And this one is to get the version of alloca that lives in /lib/libPW.a
XCOMM without getting all of the rest of the stuff in there.
XCOMM
alloca.o:  $(PWLIB)
	rm -f alloca.o
	ar x $(PWLIB) alloca.o
#endif /* NEED_ALLOCA_FROM_LIBPW */

SpecialCObjectRule(access,$(ICONFIGFILES),$(_NOOP_))
SpecialCObjectRule(auth,$(ICONFIGFILES),$(_NOOP_))
SpecialCObjectRule(xdmcp,$(ICONFIGFILES),$(SOCK_DEFINES))
SpecialCObjectRule(connection,$(ICONFIGFILES),$(SOCK_DEFINES))
SpecialCObjectRule(osinit,$(ICONFIGFILES),$(ADM_DEFINES))
SpecialCObjectRule(WaitFor,$(ICONFIGFILES),$(_NOOP_))
SpecialCObjectRule(io,$(ICONFIGFILES),$(_NOOP_))
SpecialCObjectRule(fonttype,$(ICONFIGFILES),$(FONT_DEFINES))
SpecialCObjectRule(utils,$(ICONFIGFILES),$(TIME_DEFINES))
#if defined(SparcArchitecture) && HasGcc && !HasGcc2
oscolor.o: oscolor.c $(ICONFIGFILES)

	$(RM) $@
	cc -c $(DBM_DEFINES) $(CDEBUGFLAGS) $(ALLDEFINES) $*.c
#else
SpecialCObjectRule(oscolor,$(ICONFIGFILES),$(DBM_DEFINES))
#endif

DependTarget()

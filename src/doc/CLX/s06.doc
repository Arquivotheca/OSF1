<!OPS, Version = 5.2>

<!Document,
	Print Rev Bars =	no,
	Final Output Device =	"ps",
	Default Printer =	"nearest-adps">

<!Font Definitions,
	F2 = Times 10 Italic,
	F3 = Times 10,
	F4 = Times 8 Italic,
	F5 = Times 18 Bold,
	F6 = Times 10 Bold,
	F7 = Times 18,
	F8 = Times 12 Bold,
	F9 = Symbol_B 8>

<!Page,
	Bottom Margin =		1 inches,
	Left Margin =		1 inches,
	Right Margin =		1.15 inches,
	First Page =		Right,
	Starting Page # = 	Inherit,
	Page # Prefix =		"6<#1e>",
	Hyphenation =		on,
	Consecutive Hyphens =	2,
	Vert. Just. =		off>

<!Autonumber Stream, List, 2,
	Level 2 Suffix =	,
	Level 2 Starting Value = 0,
	Level 2 Show =		no>

<!Autonumber Stream, Outline, 3,
	Level 1 Symbol Type =	UPPER ROMAN,
	Level 2 Symbol Type =	UPPER ALPHA>

<!Autonumber Stream, figure, 2,
	Level 1 Prefix =	"Figure ",
	Level 1 Suffix =	"<#1e>",
	Level 1 Show =		no,
	Level 2 Suffix =	,
	Level 2 Starting Value = 0,
	Level 2 Show =		no>

<!Autonumber Stream, figurelet, 2,
	Level 1 Symbol Type =	UPPER ALPHA,
	Level 1 Prefix =	"Figure ",
	Level 1 Suffix =	"<#1e>",
	Level 1 Show =		no,
	Level 2 Suffix =	"<#04>">

<!Autonumber Stream, invisible, 1,
	Level 1 Suffix =	,
	Level 1 Show =		no>

<!Autonumber Stream, item, 2,
	Level 2 Symbol Type =	LOWER ALPHA,
	Level 2 Trail =		yes>

<!Autonumber Stream, paralet, 4,
	Level 1 Symbol Type =	UPPER ALPHA,
	Level 1 Suffix =	,
	Level 1 Show =		no,
	Level 2 Prefix =	.,
	Level 2 Suffix =	,
	Level 3 Prefix =	.,
	Level 3 Suffix =	,
	Level 4 Prefix =	.,
	Level 4 Suffix =	>

<!Autonumber Stream, paranum, 4,
	Level 1 Suffix =	,
	Level 1 Show =		no,
	Level 2 Prefix =	.,
	Level 2 Suffix =	,
	Level 3 Prefix =	.,
	Level 3 Suffix =	,
	Level 4 Prefix =	.,
	Level 4 Suffix =	>

<!Autonumber Stream, table, 2,
	Level 1 Prefix =	"Table ",
	Level 1 Suffix =	"<#1e>",
	Level 1 Show =		no,
	Level 2 Suffix =	>

<!Autonumber Stream, tablelet, 2,
	Level 1 Symbol Type =	UPPER ALPHA,
	Level 1 Prefix =	"Table ",
	Level 1 Suffix =	"<#1e>",
	Level 1 Show =		no,
	Level 2 Suffix =	"<#04>">

<!Class, arg,
	Bottom Margin =		0.08 inches,
	Left Margin =		1.85 inches,
	First Indent =		-0.25 inches,
	Line Spacing =		1.121 lines,
	Font =			F2,
	Left Tab =		-0.25/0 inches>

<!Class, bullet,
	Bottom Margin =		0.153 inches,
	Left Margin =		1.85 inches,
	First Indent =		-0.25 inches,
	Line Spacing =		1.121 lines,
	Font =			F3,
	Allow Page Break Within = no,
	Left Tab =		-0.50/0 inches>

<!Class, caption,
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Font =			F4>

<!Class, fig,
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Alignment =		Left,
	Font =			F5>

<!Class, keyword2,
	Bottom Margin =		0.153 inches,
	Left Margin =		1.85 inches,
	First Indent =		-0.25 inches,
	Line Spacing =		1.121 lines,
	Font =			F6,
	Left Tab =		-0.50/0 inches>

<!Class, newpage,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Alignment =		Left,
	Font =			F7,
	Hyphenation =		off,
	New Page =		yes,
	Left Tab =		>

<!Class, "note",
	Top Margin =		0.177 inches,
	Bottom Margin =		0.334 inches,
	Left Margin =		1.60 inches,
	Line Spacing =		1.121 lines,
	Font =			F3,
	Allow Page Break Within = no,
	Left Tab =		0 inches,
	Right Tab =		6.50 inches>

<!Class, p1para,
	Bottom Margin =		0.153 inches,
	Left Margin =		1.60 inches,
	First Indent =		-1.60 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F8,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		-1.70/0 inches>

<!Class, p1rule,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Font =			F3,
	Hyphenation =		off,
	Allow Page Break After = no,
	Left Tab =		0/0.75*13 inches>

<!Class, p1stacked,
	Bottom Margin =		0 inches,
	Left Margin =		1.60 inches,
	First Indent =		-1.60 inches,
	Line Spacing =		1 lines,
	Font =			F6,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		-1.60/-0.17/0 inches>

<!Class, para,
	Bottom Margin =		0.153 inches,
	Left Margin =		1.60 inches,
	Line Spacing =		1.121 lines,
	Font =			F3,
	Allow Page Break Within = no,
	Left Tab =		0/0.75*13 inches>

<!Class, return,
	Bottom Margin =		0.077 inches,
	Left Margin =		1.60 inches,
	First Indent =		-0.90 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F6,
	Hyphenation =		off,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

<!Class, secno,
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Alignment =		Left,
	Font =			F5,
	Autonumber Name =	paranum>

<!Class, secrule,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Font =			F3,
	Hyphenation =		off,
	Allow Page Break After = no,
	Left Tab =		0/0.75*13 inches,
	Autonumber Name =	table>

<!Class, sectitle,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Alignment =		Right,
	Font =			F5,
	Hyphenation =		off,
	New Page =		yes,
	Left Tab =		0/0.75*13 inches>

<!Class, syntax,
	Bottom Margin =		0.077 inches,
	Left Margin =		1.60 inches,
	First Indent =		-0.90 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F6,
	Hyphenation =		off,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		-0.90/0 inches,
	Right Tab =		8 inches>

<!Class, syntax0,
	Bottom Margin =		0 inches,
	Left Margin =		1.60 inches,
	First Indent =		-0.90 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F6,
	Hyphenation =		off,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		-0.90/0 inches,
	Right Tab =		8 inches>

<!Class, "table",
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Font =			F6,
	Autonumber Name =	table>

<!Class, title,
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Alignment =		Right,
	Font =			F5,
	TOC Doc Name =		TOC>

<!Master Frame,
	Name =			"At Anchor",
	Placement =		At Anchor,
	Width =			0.41 inches,
	Height =		0.137 inches,
	Vertical Alignment =	0.03 inches,
	Diagram =
V4,
(g9,32767,0
 (E10,0,0,0,1,0,0.053333,1,15,0,0,1,0,0,0,0,1,0,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<!Master Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes,
	Diagram =
V4,
(g9,1,0
 (v4,1,0,0.006667,0.066723,6.326667,0.066611,17,2,0)
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,0,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<First Page Header, Frame =
V4,
(g9,0,0
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,1,1,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<Right Page Header, Frame =
V4,
(g9,1,0
 (T8,1,12,4.8,0.293333,1.533333,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,
  102,1101,2,
<caption,
	Alignment =		Right>

Graphic Operations

<End Text>)
 (E10,0,0,0,1,0,0.053333,1,15,0,0,1,0,0,0,0,1,0,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<Left Page Header, Frame =
V4,
(g9,1,0
 (T8,1,12,0,0.306667,1.933333,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,10
  2,1101,2,
<caption>

Graphic Operations

<End Text>)
 (E10,0,0,0,1,0,0.053333,1,15,0,0,1,0,0,0,0,1,0,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<Right Page Footer, Frame =
V4,
(g9,1,0
 (t8,1,4,6.333333,0.266667,2,17,@nntimsps10b,\240)
 (t8,2,4,0.006667,0.266667,0,17,@nntimsps8i,CLX\ Programmer's\ Reference)
 (v4,3,0,0,0.066667,6.333333,0.066554,17,2,0)
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,1,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<Left Page Footer, Frame =
V4,
(g9,1,0
 (t8,1,4,0,0.266667,0,17,@nntimsps10b,\240)
 (t8,2,4,6.333333,0.266667,2,17,@nntimsps8i,CLX\ Programmer's\ Reference)
 (v4,3,0,0.026667,0.066667,6.333333,0.066554,17,2,0)
 (E10,0,0,0,1,0,0.053333,1,15,0,0,1,0,0,0,0,1,0,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<sectitle,
	Allow Page Break Within = no,
	Allow Page Break After = no>

<|,"6<#1e>69">
<Frame,
	Name =			"At Anchor",
	Placement =		At Anchor,
	Width =			4.72 inches,
	Height =		0.94 inches,
	Vertical Alignment =	0.03 inches,
	Diagram =
V4,
(g9,1,0
 (T8,1,12,0.133333,0.72,4.563333,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512
  ,102,1101,3,
<title>

GRAPHIC OPERATIONS

<End Text>)
 (E10,0,0,0,1,0,0.053333,1,15,0,0,1,0,0,0,0,1,0,1,0.066667,0.066667,6,6,0,0.066
  667,6))>
<Frame,
	Name =			"At Anchor",
	Placement =		At Anchor,
	Width =			1.626 inches,
	Height =		0.938 inches,
	Vertical Alignment =	0 inches,
	Diagram =
V4,
(g9,1,0
 (T8,1,12,0.066667,0.276667,0,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,10
  2,1101,3,
<secno,
	TOC Doc Name =		TOC>

<Autonum, paranum, 1, First = Yes>

<End Text>)
 (T8,2,12,0.026667,0.733333,0,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,10
  2,1101,3,
<"table">

<Autonum, table, 1, First = Yes>

<End Text>)
 (T8,3,12,0.066667,0.6,0,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,102,110
  1,3,
<fig,
	Alignment =		Both,
	Font =			F6,
	Autonumber Name =	figure>

<Autonum, figure, 1, First = Yes>

<End Text>)
 (g9,5,0
   (p7,5,8,19
     (g9,5,0
       (g9,5,0
         (v4,5,0,0.266667,0,1.6,0,17,1,0)
         (v4,6,0,1.6,0,1.6,0.933333,17,1,0)
         (v4,7,0,1.6,0.933333,0.266667,0.933333,17,1,0)
         (v4,8,0,0.266667,0.933333,0.266667,0,17,1,0))))
   (g9,10,8
     (g9,10,1032
       (p7,10,8,13
         (g9,10,0
           (g9,10,0
             (v4,10,32,1.015438,0.934816,1.082808,0.784694,17,0,0)
             (v4,11,0,1.082808,0.784694,1.082808,0.615804,17,1,0)
             (v4,12,32,1.082808,0.615804,1.082808,0.46568,17,0,0)
             (v4,13,0,1.082808,0.46568,1.082808,0.296792,17,1,0)
             (v4,14,0,1.082808,0.296792,1.262455,0.296792,17,1,0)
             (v4,15,0,1.262455,0.296792,1.262455,0.371851,17,1,0)
             (v4,16,0,1.262455,0.371851,1.464561,0.371851,17,1,0)
             (v4,17,0,1.464561,0.371851,1.464561,0.259259,17,1,0)
             (v4,18,0,1.464561,0.259259,1.329824,0.14667,17,1,0)
             (v4,19,0,1.329824,0.14667,1.015438,0.14667,17,1,0)
             (v4,20,0,1.015438,0.14667,0.880702,0.259259,17,1,0)
             (v4,21,0,0.880702,0.259259,0.880702,0.822225,17,1,0)
             (v4,22,0,0.880702,0.822225,1.015438,0.934816,17,1,0))))
       (p7,24,8,13
         (g9,24,0
           (g9,24,0
             (v4,24,0,1.329824,0.934816,1.015438,0.934816,17,1,0)
             (v4,25,32,1.015438,0.934816,1.082808,0.784694,17,0,0)
             (v4,26,0,1.082808,0.784694,1.262455,0.784694,17,1,0)
             (v4,27,0,1.262455,0.784694,1.262455,0.615804,17,1,0)
             (v4,28,0,1.262455,0.615804,1.082808,0.615804,17,1,0)
             (v4,29,32,1.082808,0.615804,1.082808,0.46568,17,0,0)
             (v4,30,0,1.082808,0.46568,1.329824,0.46568,17,1,0)
             (v4,31,0,1.329824,0.46568,1.464561,0.578266,17,1,0)
             (v4,32,0,1.464561,0.578266,1.464561,0.822225,17,1,0)
             (v4,33,0,1.464561,0.822225,1.329824,0.934816,17,1,0)))))
     (g9,34,2048
       (v4,34,33,0.813333,0.14667,0.813333,0.14667,17,0,0)
       (v4,35,33,0.813333,1.16,0.813333,1.16,17,0,0)
       (v4,36,33,1.53193,1.16,1.53193,1.16,17,0,0)
       (v4,37,33,1.53193,0.14667,1.53193,0.14667,17,0,0))))
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,1,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<secrule,
	Allow Page Break Within = no,
	Allow Page Break After = yes,
	Autonumber Name =	>

<Index, "graphics", To Named = sectitle>
<Frame,
	Name =			"At Anchor",
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Diagram =
V4,
(g9,1,0
 (v4,1,0,0.006667,0.066723,6.333333,0.066611,17,2,0)
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,0,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<p1para,
	Alignment =		Both,
	Font =			F3,
	Allow Page Break After = yes>

<F8>Introduction<Tab><F6>6.1<F0><#04>Once connected to an X server, 
a client can use CLX functions to perform graphic operations on drawables. 

<para>

This section describes CLX functions to: 

<bullet>

<F9>w<Tab><F0>Operate on areas and planes 

<F9>w<Tab><F0>Draw points 

<F9>w<Tab><F0>Draw lines 

<F9>w<Tab><F0>Draw rectangles 

<F9>w<Tab><F0>Draw arcs 

<bullet,
	Bottom Margin =		0.12 inches>

<F9>w<Tab><F0>Draw text 

<p1rule>

<Index, "area of a window", To Named = p1rule><Index, "plane", To Named = p1rule><Index, "graphics", "plane", To Named = p1rule><Index, "graphics", "area", To Named = p1rule>
<Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes>

<p1stacked,
	Font =			F3,
	Left Tab =		-1.70/0 inches>

<F8>Area and Plane<Tab><F6>6.2<#04>clear<#1e>area<F0> clears an 
area or an entire window to the background.<F6><FJ>

<p1para,
	Bottom Margin =		0.12 inches,
	Alignment =		Both,
	Font =			F3,
	Allow Page Break After = yes>

<F8>Operations<Tab><F0>Since pixmaps do not have backgrounds, they 
cannot be filled by using the functions described in the following 
paragraphs. Instead, you should use <F6>draw<#1e>rectangle<F0>, 
which sets the pixmap to a known value. See paragraph 6.5, Drawing 
Rectangles, for information on <F6>draw<#1e>rectangle<F0>. 

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

clear<#1e>area <F2>window<F3> &key (<F0>:x<F3> 0) (<F0>:y<F3> 
0) <F0>:width<F3> <F0>:height<F3> <F0>:exposures<#1e>p<Tab><F3>Function<Index, Doc = operations, "xlib:clear<#1e>area", Sort String = "clear<#1e>area">

<para,
	Bottom Margin =		0.12 inches>

Draws a rectangular area in the specified <F2>window<F0> with the 
background pixel or pixmap of the <F2>window<F0>. The <F6>:x<F0> 
and <F6>:y<F0> coordinates are relative to the<F2> window<F0> 
origin, and specify the upper<#1e>left corner of the rectangular area 
that is to be cleared. A <F6>nil<F0> or zero value for <F6>:height<F0> 
or <F6>:width<F0> clears the remaining area (height - y or width 
- x). If the <F2>window<F0> has a defined background tile, the rectangle 
is tiled by using a plane<#1e>mask of all ones and a function of <F6>:copy
<F0>. If the <F2>window<F0> has background <F6>:none<F0>, the 
contents of the <F2>window<F0> are not changed. In either case, 
if <F6>:exposures<#1e>p<F0> is non<#1e><F6>nil<F0>, then one or 
more <F6>:exposure<F0> events are generated for regions of the rectangle 
that are either visible or are being retained in a backing store.

<para>

To clear the entire area in a specified <F2>window<F0>, use (<F6>clear<#1e>a
rea<F0> <F2>window<F0>).

<arg>

window <F3><#1f> A <F6>window<F3>.

<keyword2>

:x<F3>, <F0>:y <F3><#1f> Upper<#1e>left corner of the area to be 
cleared. These coordinates are relative to the <F2>window<F3> origin. 
Type is <F0>int16<F3>.

:width <F3><#1f> The width of the area to clear or <F0>nil<F3> 
to clear to the remaining width of the window. Type is <F0>card16<F3> 
or <F0>null<F3>.

:height <F3><#1f> The height of the area to clear or <F0>nil<F3> 
to clear to the remaining height of the window. Type is <F0>card16<F3> 
or <F0>null<F3>.

:exposures<#1e>p <F3><#1f> Specifies if <F0>:exposure<F3> events 
should be generated for the affected areas. Type <F0>boolean<F3>.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

<|,"6<#1e>70">copy<#1e>area <F2>source gcontext source<#1e>x source<#1e>y 
width height <F0><Tab><F3>Function<Index, Doc = operations, "xlib:copy<#1e>area", Sort String = "copy<#1e>area"><HR>
<F2>destination destination<#1e>x destination<#1e>y

<para>

Copies the specified rectangular area from the <F2>source<F0> <F6>drawable
<F0> to the specified rectangular area of the <F2>destination<F0> <F6>drawa
ble<F0>, combining them as specified in the supplied graphics context 
(<F2>gcontext<F0>). The <F2>x<F0> and <F2>y<F0> coordinates 
are relative to their respective drawable origin, with each pair specifying 
the upper left corner of the area.

If either regions of the <F2>source<F0> area are obscured and have 
not been retained in backing store, or regions outside the boundaries 
of the <F2>source<F0> <F6>drawable<F0> are specified, those regions 
are not copied. Instead, the following occurs on all corresponding <F2>destina
tion<F0> regions that are either visible or are retained in backing 
store:  

<bullet>

<F9>w<Tab><F0>If the <F2>destination<F0> rectangle is a window 
with a background other than <F6>:none<F0>, these corresponding 
regions of the <F2>destination<F0> are tiled, using plane<#1e>mask 
of all ones and function of <F6>boole<#1e>1<F0> (copy source), with 
that background. 

<F9>w<Tab><F0>If the exposures attribute of the graphics context 
is <F6>:on<F0>, then <F6>:graphics<#1e>exposure<F0> events for 
all corresponding <F2>destination<F0> regions are generated (regardless 
of tiling or whether the <F2>destination<F0> is a window or a pixmap).

<F9>w<Tab><F0>If exposures is <F6>:on<F0> but no regions are exposed, 
a <F6>:no<#1e>exposure<F0> event is generated. Note that by default, 
exposures is <F6>:on<F0> for new graphics contexts. See Section 
5, Graphics Contexts, for further information.

<arg>

source <F3><#1f> Source <F6>drawable<F3>.

gcontext <F3><#1f> The graphics context to use during the copy operation.

source<#1e>x<F3>, <F0>source<#1e>y <F3><#1f><F0> <F3>The x and 
y coordinates of the upper<#1e>left corner of the area in the <F0>source<F3> 
<F6>drawable<F3>. These coordinates are relative to the <F0>source<F3> 
<F6>drawable<F3> origin. Type is <F6>int16<F3>.

width<F3>, <F0>height <F3><#1f><F0> <F3>The width and height 
of the area being copied. These apply to both the <F0>source<F3> 
and <F0>destination<F3> areas. Type is <F6>card16<F3>.

destination <F3><#1f> The destination <F6>drawable<F3>.

destination<#1e>x<F3>, <F0>destination<#1e>y <F3><#1f><F0> <F3>The 
x and y coordinates of the upper left corner of the area in the <F0>destinatio
n<F3> <F6>drawable<F3>. These coordinates are relative to the <F0>destinati
on<F3> <F6>drawable<F3> origin. Type is <F6>int16<F3>.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

copy<#1e>plane <F2>source gcontext plane source<#1e>x source<#1e>y 
width height <F0><Tab><F3>Function<Index, Doc = operations, "xlib:copy<#1e>plane", Sort String = "copy<#1e>plane"><HR>
<F2>destination destination<#1e>x destination<#1e>y

<para>

Uses a single bit plane of the specified rectangular area of the <F2>source
<F0> <F6>drawable<F0> along with the specified graphics context 
(<F2>gcontext<F0>) to modify the specified rectangle area of the <F2>destina
tion<F0> <F6>drawabl<F0>e. The drawables specified by the <F2>source<F0> 
and <F2>destination<F0> arguments must have the same root but need 
not have the same depth.

Effectively, this operation forms a pixmap of the same depth as <F2>destinatio
n<F0> and with a size specified by the <F2>source<F0> area. It 
then uses the foreground and background from the graphics context 
(foreground where the bit<#1e>plane in <F2>source<F0> contains a 
one bit, background where the bit<#1e>plane in <F2>source<F0> contains 
a zero bit), and the equivalent of a <F6>copy<#1e>area<F0> operation 
is performed with all the same exposure semantics. This can also be 
thought of as using the specified region of the <F2>source<F0> bit<#1e>plane 
as a stipple with a fill<#1e>style of <F6>:opaque<#1e>stippled<F0> 
for filling a rectangular area of the <F2>destination<F0>.

<arg>

source <F3><#1f> The source <F6>drawable<F3>.

gcontext <F3><#1f> The graphics context to use during the copy operation.

<|,"6<#1e>71">plane <F3><#1f> Specifies the bit<#1e>plane of the <F0>source<F3> 
<F6>drawable<F3>. Exactly one bit must be set. Type is <F6>pixel<F3>.

source<#1e>x<F3>, <F0>source<#1e>y<F6> <F3><#1f> The <F0>x<F3> 
and <F0>y<F3> coordinates of the upper<#1e>left corner of the area 
in the <F0>source<F3> <F6>drawable<F3>. These coordinates are 
relative to the <F0>source<F3> <F6>drawable<F3> origin. Type is <F6>int16
<F3>.

width<F3>, <F0>height<F6> <F3><#1f> The width and height of the 
area being copied. These apply to both the <F0>source<F3> and <F0>destinatio
n<F3> areas. Type is <F6>card16<F3>.

destination <F3><#1f> The destination <F6>drawable<F3>.

destination<#1e>x<F3>, <F0>destination<#1e>y <F3><#1f> The x and 
y coordinates of the upper<#1e>left corner of the destination area 
in the <F0>destination<F3> <F6>drawable<F3>. These coordinates 
are relative to the <F0>destination<F3> <F6>drawable<F3> origin. 
Type is <F6>int16<F3>.

<p1rule>

<Index, "drawing", "points", To Named = p1rule><Index, "points", "drawing", To Named = p1rule><Index, "graphics", "drawing", "points", To Named = p1rule>
<Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes>

<p1para,
	Alignment =		Both,
	Font =			F3,
	Allow Page Break After = yes>

<F8>Drawing Points<Tab><F6>6.3<F0><#04>The <F6>draw<#1e>point<F0> 
and <F6>draw<#1e>points<F0> functions make use of the following 
graphics context components: function, plane<#1e>mask, foreground, 
subwindow<#1e>mode, clip<#1e>x, clip<#1e>y, clip<#1e>ordering, clip<#1e>region 
and clip<#1e>mask. 

<para>

The <F6>draw<#1e>point<F0> function uses the foreground pixel and 
function components of the graphics context to draw a single point 
into the specified drawable, while <F6>draw<#1e>points<F0> draws 
multiple points into the specified drawable. These functions are not 
affected by the tile or stipple in the graphics context.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

draw<#1e>point <F2>drawable gcontext x y<F0><Tab><F3>Function<Index, Doc = operations, "xlib:draw<#1e>point", Sort String = "draw<#1e>point">

<para>

Combines the foreground pixel in the <F2>gcontext<F0> with the pixel 
in the <F2>drawable<F0> specified by the <F2>x<F0> and <F2>y<F0> 
coordinates.

<arg>

drawable <F3><#1f> The destination <F6>drawable<F3>.

gcontext <F3><#1f> The graphics context for drawing the point.

x<F3>, <F0>y <F3><#1f> The <F0>x<F3> and <F0>y<F3> coordinates 
of the point drawn. Type is <F6>int16<F3>.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

draw<#1e>points <F2>drawable gcontext points <F3>&optional<F2> 
relative<#1e>p<F0><Tab><F3>Function<Index, Doc = operations, "xlib:draw<#1e>points", Sort String = "draw<#1e>points">

<para>

Combines the foreground pixels in the graphics context with the pixels 
at each point in the <F2>drawable<F0>. The points are drawn in the 
order listed.

<F6>draw<#1e>points<F0> requires a mode argument, <F2>relative<#1e>p<F0> 
that indicates whether the points are relative to the destination 
origin or to the previous point. In either case, the first point is 
always relative to the destination origin. The rest of the points 
are relative either to the <F2>drawable<F0>'s origin or to the previous 
point, depending on the value of <F2>relative<#1e>p<F0>.

<arg>

drawable <F3><#1f> The destination <F6>drawable<F3>.

gcontext <F3><#1f> The graphics context for drawing the points.

points <F3><#1f> A list of points to be drawn in the order listed. 
The first point is always relative to the <F0>drawable<F3>'s origin; 
if <F0>relative<#1e>p<F3>, the rest of the points are drawn relative 
to the previous point, else they are drawn relative to the <F0>drawable<F3>'s 
origin. Type is <F6>point<#1e>seq<F3>.

relative<#1e>p <F3><#1f> Specifies the coordinate mode used for drawing 
the pixels either relative to the origin or to the previous point. 
Type <F6>boolean<F3>.

<p1rule>

<Index, "lines", "drawing", To Named = p1rule><Index, "drawing", "lines", To Named = p1rule><Index, "graphics", "drawing", "lines", To Named = p1rule>
<Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes>

<p1para,
	Alignment =		Both,
	Font =			F3,
	Allow Page Break After = yes>

<F8>Drawing Lines<Tab><F6>6.4<F0><#04>The <F6>draw<#1e>line<F0>, <F6>draw
<#1e>lines<F0>, and <F6>draw<#1e>segments<F0> functions use the 
following graphics context components: background, cap<#1e>style, 
clip<#1e>x<#1e>origin, clip<#1e>y<#1e>origin, clip<#1e>mask, dash<#1e>list, 
dash<#1e>offset, fill<#1e>style, foreground, function, plane<#1e>mask, 
line<#1e>width, line<#1e>style, stipple, subwindow<#1e>mode, tile, 
ts<#1e>x<#1e>origin, and ts<#1e>y<#1e>origin.

<para>

<|,"6<#1e>72">The <F6>draw<#1e>lines <F0>function also uses the join<#1e>style 
graphics context component. 

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

draw<#1e>line <F2>drawable gcontext x1 y1 x2 y2 <F3>&optional<F2> 
relative<#1e>p<F0><Tab><F3>Function<Index, Doc = operations, "xlib:draw<#1e>line", Sort String = "draw<#1e>line">

<para>

Draws a line from the point <F2>x1<F0>,<F2>y1<F0> to the point <F2>x2
<F0>,<F2>y2<F0>. When <F2>relative<#1e>p<F0> is true, the first 
point is relative to the destination origin but the second point is 
relative to the first point. When <F2>relative<#1e>p<F0> is <F6>nil<F0>, 
both points are relative to the destination origin.

<arg>

drawable <F3><#1f> The destination <F6>drawable<F3>.

gcontext <F3><#1f> The graphics context for drawing the line.

x1<F3>, <F0>y1<F3>, <F0>x2<F3>, <F0>y2 <F3><#1f> The end points 
of the line. 

relative<#1e>p <F3><#1f> Specifies the coordinate mode used for drawing 
the line either relative to the origin or the previous point. In either 
case, the first point is always drawn relative to the <F0>drawable<F3>'s 
origin.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

draw<#1e>lines <F2>drawable gcontext points <F3>&key<F0> :relative<#1e>p 
:fill<#1e>p<F3> <F0><Tab><F3>Function<Index, Doc = operations, "xlib:draw<#1e>lines", Sort String = "draw<#1e>lines"><HR>
(<F0>:shape :complex<F3>)

<para>

Draws a line between each pair of <F2>points<F0> in the points list. 
The lines are drawn in the order listed and join correctly at all 
intermediate points. The join<#1e>style graphics context component 
defines the type of joint to use. When the first and last points coincide, 
the first and last lines also join correctly to produce a hollow polygon.

When <F6>:relative<#1e>p<F0> is true, the first point is always 
relative to the destination origin, but the rest are relative to the 
previous point. When <F6>:relative<#1e>p<F0> is <F6>nil<F0>, the 
rest of the points are drawn relative to the destination origin.

When <F6>:fill<#1e>p<F0> is true, the polygon defined by the <F2>points
<F0> list is filled. The <F6>:shape<F0> keyword provides the server 
with a hint about how to fill the polygon. <F6>:shape<F0> can be 
either <F6>:complex<F0> (by default), <F6>:convex<F0>, or <F6>:non<#1e>con
vex<F0>. 

The <F6>:convex<F0> operand is the simplest type of area and the 
fastest to fill. A fill area is convex if every straight line connecting 
any two interior points is entirely inside the area. For example, 
triangles and rectangles are convex polygons.

The <F6>:non<#1e>convex<F0> operand is for filling an area that 
is not convex and is also not self<#1e>intersecting. Filling this 
type of area is harder than filling a convex area, but easier than 
filling one that is self<#1e>intersecting. For example, the shape 
of the letter <#7f>T" is non<#1e>convex and non<#1e>self<#1e>intersecting.

The <F6>:complex<F0> operand is the most general (and therefore 
the hardest) type of fill area. A complex fill area can be non<#1e>convex 
and self<#1e>intersecting. For example, draw the outline of a bow 
tie, without lifting your pencil or tracing over an edge twice. This 
shape is non<#1e>convex and intersects itself at the knot in the middle. 

<"note",
	Top Margin =		0.15 inches,
	Bottom Margin =		0.15 inches>

<Tab-><HR>
<F6>NOTE: <F0>Unless you are sure that a shape is <F6>:convex<F0> 
or <F6>:non<#1e>convex<F0>, it should always be drawn as a <F6>:complex
<F0> shape. If <F6>:convex<F0> or <F6>:non<#1e>convex<F0> is 
specified incorrectly, the graphics result is undefined.<HR>
<Tab->

<arg>

drawable <F3><#1f> The destination <F6>drawable<F3>.

gcontext <F3><#1f> The graphics context for drawing the lines.

points <F3><#1f> A list of points that define the lines. Type is <F6>point<#1e>
seq<F3>.

<keyword2>

:relative<#1e>p <F3><#1f> The coordinate mode of the points. 

<|,"6<#1e>73">:fill<#1e>p <F3><#1f> When true, a filled polygon is drawn 
instead of a polyline.

:shape <F3><#1f> A hint that allows the server to use the most efficient 
area fill algorithm. Either <F0>:convex<F3>,<F0> :non<#1e>convex<F3>, 
or <F0>:complex<F3>.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

draw<#1e>segments <F2>drawable gcontext segments<F0><Tab><F3>Function<Index, Doc = operations, "xlib:draw<#1e>segments", Sort String = "draw<#1e>segments">

<para>

Draws multiple lines, not necessarily connected. <F2>segments<F0> 
is a sequence of the form {x1 y1 x2 y2}*, in which each subsequence 
specifies the end<SP>points of a line segment. Line segments are drawn 
in the order given by<SP><F2>segments<F0>. Unlike <F6>draw<#1e>lines<F0>, 
no joining is performed at coincident end<SP>points.

<arg>

drawable <F3><#1f> The destination <F6>drawable<F3> to receive 
the line segments.

gcontext <F3><#1f> Specifies the graphics context for drawing the 
lines.

segments <F3><#1f> The points list for the segments to draw. Type 
is <F6>seq<F3>.

<p1rule>

<Index, "drawing", "rectangles"><Index, "rectangles", "drawing", To Named = p1rule><Index, "graphics", "drawing", "rectangles", To Named = p1rule>
<Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes>

<p1stacked,
	Font =			F3,
	Left Tab =		-1.70/0 inches>

<F8>Drawing <Tab><F6>6.5<F0><#04>The <F6>draw<#1e>rectangle<F0> 
and <F6>draw<#1e>rectangles <F0>functions draw hollow or<F6><FJ>

<p1para,
	Alignment =		Both,
	Font =			F3,
	Allow Page Break After = yes>

<F8>Rectangles<Tab><F0>filled outlines of the specified rectangle 
or rectangles as if a five<#1e>point polyline were specified for each 
rectangle, as follows:

<para>

[x,y,] [x+width,y] [x+width,y+height] [x,y+height] [x,y] 

<F6>draw<#1e>rectangle<F0> and <F6>draw<#1e>rectangles<F0> use 
the following graphics context components: background, function, plane<#1e>mask
, foreground, subwindow<#1e>mode, cap<#1e>style, clip<#1e>x, clip<#1e>y, 
clip<#1e>ordering, clip<#1e>region and clip<#1e>mask, dash<#1e>list, 
dash<#1e>offset, fill<#1e>style, join<#1e>style, line<#1e>width, line<#1e>style
, stipple, tile, ts<#1e>x<#1e>origin, and ts<#1e>y<#1e>origin.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

draw<#1e>rectangle <F2>drawable gcontext x y width height <F3>&optional<F2> 
fill<#1e>p<F0><Tab><F3>Function<Index, Doc = operations, "xlib:draw<#1e>rectangle", Sort String = "draw<#1e>rectangle">

<para>

Draws a rectangle defined by the <F2>x<F0>, <F2>y<F0>, <F2>width<F0>, 
and <F2>height<F0> arguments.

<arg>

drawable <F3><#1f> The destination <F6>drawable<F3>.

gcontext <F3><#1f> The graphics context for drawing the rectangle.

x<F3>, <F0>y <F3><#1f> The x and y coordinates that define the 
upper left corner of the rectangle. The coordinates are relative to 
the destination origin. Type is <F6>int16<F3>.

width<F3>, <F0>height <F3><#1f> Specifies the width and height 
that define the outline of the rectangle. Type is <F6>card16<F3>.

fill<#1e>p <F3><#1f> Specifies whether the rectangle is filled or 
not. Type <F6>boolean<F3>.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

draw<#1e>rectangles <F2>drawable gcontext rectangles <F3>&optional<F2> 
fill<#1e>p<F0><Tab><F3>Function<Index, Doc = operations, "xlib:draw<#1e>rectangles", Sort String = "draw<#1e>rectangles">

<para>

Draws the rectangles in the order listed in<F2> rectangles<F0>. 
For the specified <F2>rectangle<F0> or <F2>rectangles<F0>, no 
pixel is drawn more than once. The x and y coordinates of each rectangle 
are relative to the destination origin and define the upper left corner 
of the rectangle. If rectangles intersect, the intersecting pixels 
are drawn multiple times.

<arg>

drawable <F3><#1f> The destination <F6>drawable<F3>.

gcontext <F3><#1f> The graphics context.

rectangles <F3><#1f> A list specifying the upper left corner x and 
y, width and height of the rectangles. Type is <F6>rect<#1e>seq<F3>.

fill<#1e>p <F3><#1f> Specified if the rectangles are filled or not. 
Type is <F6>boolean<F3>.

<p1rule>

<|,"6<#1e>74"><Index, "drawing", "arcs"><Index, "arcs", "drawing", To Named = p1rule><Index, "graphics", "drawing", "arcs", To Named = p1rule>
<Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes>

<p1para,
	Alignment =		Both,
	Font =			F3,
	Allow Page Break After = yes>

<F8>Drawing Arcs<Tab><F6>6.6<#04><F0> <F6>draw<#1e>arc<F0> draws 
a single circular or an elliptical arc, while <F6>draw<#1e>arcs<F0> 
draws multiple circular or elliptical arcs. <F6>draw<#1e>arc<F0> 
and <F6>draw<#1e>arcs<F0> use the following graphics context components: 
arc<#1e>mode, background, cap<#1e>style, clip<#1e>x, clip<#1e>y, clip<#1e>mask, 
dash<#1e>list, dash<#1e>offset, fill<#1e>style, foreground, join<#1e>style, 
function, plane<#1e>mask, line<#1e>width, line<#1e>style, stipple, 
subwindow<#1e>mode, tile, ts<#1e>x<#1e>origin, and ts<#1e>y<#1e>origin.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

draw<#1e>arc <F2>drawable gcontext x y width height angle1 angle2 <F3>&option
al <F2>fill<#1e>p<F0><Tab><F3>Function<Index, Doc = operations, "xlib:draw<#1e>arc", Sort String = "draw<#1e>arc">

<para>

Draws either a circular or an elliptical arc. Also, outlined or filled 
arcs can be drawn. Each arc is specified by a rectangle (<F2>x<F0>,<F2> 
y<F0>,<F2> width<F0>,<F2> <F0>and <F2>height<F0>) and two angles 
(<F2>angle1 <F0>and <F2>angle2<F0>). The angles are signed integers 
in radians, with positive indicating counterclockwise motion and negative 
indicating clockwise motion. The start of the arc is specified by <F2>angle1
<F0>, and the path and extent of the arc is specified by <F2>angle2<F0> 
relative to the start of the arc. If the magnitude of <F2>angle2<F0> 
is greater than 360 degrees, it is truncated to 360 degrees. The <F2>x<F0> 
and <F2>y<F0> coordinates of the rectangle are relative to the <F2>drawable
<F0>'s origin. 

For example, an arc specified as [<F2>x<F0>,<F2>y<F0>,<F2>width<F0>,
<F2>height<F0>,<F2>angle1<F0>,<F2>angle2<F0>] has the origin 
of the major and minor axes at:

[<F2>x<F0>+(<F2>width<F0>/2),<F2>y<F0>+(<F2>height<F0>/2)]

The infinitely thin path describing the entire circle/ellipse intersects 
the horizontal axis at:

[<F2>x<F0>,<F2>y<F0>+(<F2>height<F0>/2)] and [<F2>x<F0>+<F2>width
<F0>,<F2>y<F0>+(<F2>height<F0>/2)] 

The intersection of the vertical axis is at:

[<F2>x<F0>+(<F2>width<F0>/2),<F2>y<F0>] and [<F2>x<F0>+(<F2>width
<F0>/2),<F2>y<F0>+<F2>height<F0>]

These coordinates can be fractional; that is, they are not truncated 
to discrete coordinates. Note that the angle values are slightly different 
in CLX than in the X protocol specification.

If <F2>fill<#1e>p<F0> is <F6>nil<F0>, then only the outline of 
the arc is drawn. Otherwise, if <F2>fill<#1e>p<F0> is true, <F6>draw<#1e>arc
<F0> fills the area bounded by the arc outline and one or two line 
segments, depending on the arc<#1e>mode. If the arc<#1e>mode is <F6>:chord
<F0>, the filled area is bounded by the arc outline and the line 
segment joining the arc end points. If the arc<#1e>mode is <F6>:pie<#1e>slice
<F0>, the filled area is bounded by the arc outline and the two line 
segments joining each arc end point with the center point.

<arg>

drawable <F3><#1f> The destination <F6>drawable<F3>.

gcontext <F3><#1f> The graphics context for drawing the arc.

x<F3>, <F0>y <F3><#1f> The x and y coordinates of the arc rectangle 
relative to the origin of the <F0>drawable<F3>. Type is <F6>int16<F3>.

width<F3>, <F0>height <F3><#1f> Specifies the width and height 
of the rectangle. These are the major and minor axes of the arc. Type 
is <F6>card16<F3>.

angle1 <F3><#1f> Specifies the start of the arc in radians. Type 
is <F6>angle<F3>.

angle2 <F3><#1f> Specifies the direction and end point of the arc. 
Type is <F6>angle<F3>.

fill<#1e>p <F3><#1f> Specifies whether the arc is filled or not. 
Type <F6>boolean<F3>.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

<|,"6<#1e>75">draw<#1e>arcs <F2>drawable gcontext arcs <F3>&optional<F2> 
fill<#1e>p<F0><Tab><F3>Function<Index, Doc = operations, "xlib:draw<#1e>arcs", Sort String = "draw<#1e>arcs">

<para>

Draws circular or elliptical, outlined or filled arcs. Each arc is 
specified by a rectangle and two angles. For a more detailed description, 
see <F6>draw<#1e>arc<F0>.

The arcs are filled in the order listed. For any given arc, no pixel 
is drawn more than once. If regions intersect, the intersecting pixels 
are drawn multiple times.

<arg>

drawable <F3><#1f> Specifies the <F6>drawable<F3> where you want 
the arcs drawn.

gcontext <F3><#1f> Specifies the graphics context for drawing the 
arc.

arcs <F3><#1f> A sequence containing the width, height, angle1, and 
angle2 arguments defining the arcs. See <F6>draw<#1e>arc<F3> for 
more detail. Type is <F6>arc<#1e>seq<F3>.

fill<#1e>p <F3><#1f> Specifies whether the arcs are filled or not. 
Type is <F6>boolean<F3>.

<p1rule>

<Index, "graphics", "drawing", "glyphs", To Named = p1rule><Index, "drawing", "glyphs", To Named = p1rule><Index, "glyphs", "drawing", To Named = p1rule><Index, "drawing", "text"><Index, "text", "drawing", To Named = p1rule><Index, "graphics", "drawing", "text", To Named = p1rule>
<Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes>

<p1para,
	Alignment =		Both,
	Font =			F3,
	Allow Page Break After = yes>

<F8>Drawing Text<Tab><F6>6.7<F0><#04>CLX provides functions for 
drawing text using text fonts provided by the<SP>X server. An X font 
is array of character bit maps indexed by integer<SP>codes. See Section 
8 for a complete discussion of the CLX functions<SP>used to manage 
fonts and characters.<F6><#04><F0> 

<para>

Since Common Lisp programs typically represent text as sequences of 
characters (that is, strings), CLX text functions must be prepared 
to<SP>convert a Common Lisp character into the integer code used to 
index the<SP>appropriate character bitmap in a given font. The <F6>:translate
<F0> argument<SP>to a text function is a function which performs 
this conversion. The default <F6>:translate<F0> function handles 
all characters that satisfy<SP><F6>graphic<#1e>char<#1e>p<F0> by 
converting each character into its ASCII code. Note<SP>that the assumption 
made by the default <F6>:translate<F0> function<#1f>that is,<SP>that 
an X font indexes bitmaps by ASCII codes<#1f>is often valid, but<SP>other 
encodings are possible. In general, a <F6>:translate<F0> function 
can perform complex transformations. It can be used to convert<SP>non<#1e>chara
cter input, to handle non<#1e>ASCII character encodings, and to change 
the fonts used to access character bitmaps. The complete behavior 
of a <F6>:translate<F0> function is given below by describing a<SP>prototypic
al <F6>translate<#1e>function<F0>.

CLX offers two different ways to draw text<#1f>filled text and block 
text. The <F6>draw<#1e>glyph<F0> and <F6>draw<#1e>glyphs<F0> functions 
create filled text, in which each character image is treated as an 
area to be filled according to the fill<#1e>style of the given graphics 
context, without otherwise disturbing the surrounding background. 
In addition, filled<SP>text sends a complex type of server request 
which allows a series of font<SP>indices, font changes, and horizontal 
position changes to be compiled<SP>into a single request. Filled text 
functions use<FJ>
the following graphics<SP>context attributes: background, clip<#1e>mask, 
clip<#1e>x<#1e>origin, clip<#1e>y<#1e>origin,<SP>fill<#1e>style, font, 
foreground, function, plane<#1e>mask, stipple,<SP>subwindow<#1e>mode, 
tile, ts<#1e>x<#1e>origin, ts<#1e>y<#1e>origin.

Block text is a rendering style commonly used by display terminals, 
in<SP> which each character image appears in the foreground pixel 
inside a<SP>rectangular character cell drawn in the graphics context 
background<SP>pixel. The <F6>draw<#1e>image<#1e>glyph<F0> and <F6>draw<#1e>i
mage<#1e>glyphs<F0> functions create<SP>block text. Block text functions 
use the following graphics context<SP> attributes: background, clip<#1e>mask, 
clip<#1e>x<#1e>origin, clip<#1e>y<#1e>origin, font,<SP>foreground, 
plane<#1e>mask, stipple, subwindow<#1e>mode, tile, ts<#1e>x<#1e>origin,<SP>ts<#1e>
y<#1e>origin.

<syntax0>

<|,"6<#1e>76">draw<#1e>glyph<F3> <F2>drawable gcontext x y element<F3> 
&key <F0>:translate :width<F3><Tab>Function <Index, Doc = operations, "xlib:draw<#1e>glyph", Sort String = "draw<#1e>glyph"><HR>
(<F0>:size :default<F3>) 

<return>

<Tab><F3>Returns:<HR>
  <F2>output<#1e>p<F3> <#1f> Type <F0>boolean<F3>.<HR>
  <F2>width<F3> <#1f> Type <F0>int32<F3> or <F0>null<F3>.

<para>

Draws a single character of filled text represented by the given <F2>element
<F0>.<SP>The given <F2>x<F0> and <F2>y<F0> specify the left baseline 
position for the character.<SP>The first return value is true if the 
character is successfully<SP>translated and drawn, or <F6>nil<F0> 
if the <F6>:translate<F0> function did not<SP>translate it. The 
second return value gives the total pixel width of the character actually 
drawn, if known.

Specifying a <F6>:width<F0> is a hint to improve performance. The <F6>:width
<F0> is assumed to be the total pixel width of the character actually 
drawn.<SP>Specifying <F6>:width<F0> permits appending the output 
of subsequent calls<SP>to the same protocol request, provided <F2>gcontext
<F0> has not been modified in<SP>the interim. If <F6>:width<F0> 
is not specified, appending of subsequent<SP> output might not occur 
(unless <F6>:translate<F0> returns the character width).

The <F6>:size<F0> specifies the element size of the destination 
buffer given to <F6>:translate<F0> (either 8, 16, or <F6>:default<F0>). 
If <F6>:default<F0> is specified, the<SP>size is based on the current 
font, if known; otherwise, 16 is used.

<arg>

drawable<F3> <#1f> The destination <F6>drawable<F3>.

gcontext<SP><F3><#1f> The graphics context for drawing text.

x<F3>, <F0>y<F3> <#1f> The left baseline position for the character 
drawn.<SP>

element<F3><SP><#1f> A character or other object to be translated 
into a font index.<SP>

<F6>:translate<F3> <#1f> A function to translate text to font indexes. 
Default is <F6>#'translate<#1e>default<F3>.

<F6>:width<F3> <#1f> The total pixel width of the character actually 
drawn, if known.

<F6>:size<F3> <#1f> Specifies the element size of the destination 
buffer given to <F6>:translate<F3> (8, 16, or <F6>:default<F3>).

<syntax0>

draw<#1e>glyphs<F3> <F2>drawable gcontext x y sequence<F3> &key 
(<F0>:start<F3> 0) <F0>:end :translate<F3><Tab>Function<Index, Doc = operations, "xlib:draw<#1e>glyphs", Sort String = "draw<#1e>glyphs"><HR>
<F0>:width<F3> (<F0>:size :default<F3>)

<return>

<Tab><F3>Returns:<HR>
  <F2>new<#1e>start <F3><#1f> Type <F0>array<#1e>index<F3> or <F0>null
<F3>.<SP><HR>
  <F2>width<F3> <#1f> Type <F0>int32<F3> or <F0>null<F3>.

<para>

Draws the filled text characters represented by the given sequence.<SP><F6>:st
art<F0> and <F6>:end<F0> define the elements of the sequence which 
are drawn. The<SP>given <F2>x<F0> and <F2>y<F0> specify the left 
baseline position for the first<SP> character. The first return value 
is <F6>nil<F0> if all characters are<SP>successfully translated 
and drawn; otherwise, the index of the first<SP>untranslated sequence 
element is returned. The second return value<SP>gives the total pixel 
width of the characters actually drawn, if known.

Specifying a <F6>:width<F0> is a hint to improve performance. The<F6> 
:width<F0> is assumed to be the total pixel width of the character 
sequence actually<SP>drawn. Specifying <F6>:width<F0> permits appending 
the output of subsequent<SP>calls to the same protocol request, provided <F2>g
context<F0> has not been<SP>modified in the interim. If <F6>:width<F0> 
is not specified, appending of<SP>subsequent output might not occur 
(unless <F6>:translate<F0> returns the<SP>character width).

The <F6>:size<F0> specifies the element size of the destination 
buffer given to<F6><SP>:translate<F0> (either 8, 16, or <F6>:default<F0>). 
If :<F6>default<F0> is specified, the size is based on the current 
font, if known; otherwise, 16 is used.

<arg>

drawable<F3> <#1f> The destination <F6>drawable<F3>.

<|,"6<#1e>77">gcontext<F3> <#1f> The graphics context for drawing text.

x<F3>, <F0>y<F3> <#1f> The left baseline position for the character 
drawn.

sequence<F3> <#1f> A sequence of characters or other objects to be 
translated into font indexes.

<F6>:start<F3>, <F6>:end<F3> <#1f> Start and end indexes defining 
the elements to draw.<SP>

<F6>:translate<F3> <#1f> A function to translate text to font indexes. 
Default is<SP><F6>#'translate<#1e>default<F3>.

<F6>:width<F3> <#1f> The total total pixel width of the character 
actually drawn, if<SP> known.

<F6>:size<F3> <#1f> The element size of the destination buffer given 
to <F6>:translate<F3> (8,<SP>16, or <F6>:default<F3>).

<syntax0>

draw<#1e>image<#1e>glyph<F3> <F2>drawable gcontext x y element<F3> 
&key <F0>:translate<F3> <F0>:width<Tab><F3>Function <Index, Doc = operations, "xlib:draw<#1e>image<#1e>glyph", Sort String = "draw<#1e>image<#1e>glyph"><HR>
(<F0>:size :default<F3>) 

<return>

<Tab><F3>Returns:<HR>
  <F2>output<#1e>p<F3> <#1f> Type <F0>boolean<F3>.<F0><HR>
  <F2>width<F3> <#1f> Type <F0>int32<F3> or <F0>null<F3>.

<para>

Draws a single character of block text represented by the given <F2>element
<F0>.<SP>The given <F2>x<F0> and <F2>y<F0> specify the left baseline 
position for the character.<SP>The first return value is true if the 
character is successfully<SP>translated and drawn, or <F6>nil<F0> 
if the <F6>:translate<F0> function did not<SP>translate it. The <F6>:transla
te<F0> function is allowed to return an initial<SP>font change. The 
second return value gives the total pixel width of the<SP>character 
actually drawn, if known.

The <F6>:translate<F0> function may not return a horizontal position 
change,<SP>since <F6>draw<#1e>image<#1e>glyph<F0> does not generate 
complex output requests.

Specifying a <F6>:width<F0> is a hint to improve performance. The <F6>:width
<F0> is<SP>assumed to be the total pixel width of the character actually 
drawn.<SP>Specifying <F6>:width<F0> permits appending the output 
of subsequent calls<SP>to the same protocol request, provided <F2>gcontext
<F0> has not been modified in<SP> the interim. If <F6>:width<F0> 
is not specified, appending of subsequent<SP> output might not occur 
(unless <F6>:translate<F0> returns the character width).

The <F6>:size<F0> specifies the element size of the destination 
buffer given to <F6>:translate<F0> (either 8, 16, or <F6>:default<F0>). 
If <F6>:default<F0> is specified, the size is based on the current 
font, if known; otherwise, 16 is used.

<arg>

drawable<F3> <#1f> The destination <F6>drawable<F3>.

gcontext <F3><#1f> The graphics context for drawing text.

x<F3>, <F0>y<F3> <#1f> The left baseline position for the character 
drawn.

element<F3> <#1f> A character or other object to be translated into 
a font index.<SP>

<F6>:translate<F3> <#1f> A function to translate text to font indexes. 
Default is<SP> <F6>#'translate<#1e>default<F3>.<SP>

<F6>:width<F3> <#1f> The total pixel width of the character actually 
drawn, if known.

<F6>:size<F3> <#1f> Specifies the element size of the destination 
buffer given to<SP><F6>:translate<F3> (8, 16, or <F6>:default<F3>).

<syntax0>

<|,"6<#1e>78">draw<#1e>image<#1e>glyphs<F3> <F2>drawable gcontext x y sequence<F3> 
&key (<F0>:start<F3> 0) <F0>:end <Tab><F3>Function<Index, Doc = operations, "xlib:draw<#1e>image<#1e>glyphs", Sort String = "draw<#1e>image<#1e>glyphs"><HR>
<F0>:translate<F3> <F0>:width<F3> (<F0>:size :default<F3>)

<return>

<Tab><F3>Returns:<HR>
  <F2>new<#1e>start<F3> <#1f> Type <F0>array<#1e>index<F3> or <F0>null
<F3>.<HR>
  <F2>width<F3> <#1f> Type <F0>int32<F3> or <F0>null<F3>.

<para>

Draws the block text characters represented by the given <F6>sequence<F0>. 
<F6>:start<F0> and <F6>:end<F0> define the elements of the <F2>sequence
<F0> which are drawn. The<SP>given <F2>x<F0> and <F2>y<F0> specify 
the left baseline position for the first<SP>character. The first return 
value is <F6>nil<F0> if all characters are<SP>successfully translated 
and drawn; otherwise, the index of the first<SP>untranslated sequence 
element is returned. The <F6>:translate<F0> function is<SP>allowed 
to return an initial font change. The second return value gives<SP>the 
total pixel width of the characters actually drawn, if known.

The <F6>:translate<F0> function may not return a horizontal position 
change,<SP>since <F6>draw<#1e>image<#1e>glyphs<F0> does not generate 
complex output requests.

Specifying a <F6>:width<F0> is a hint to improve performance. The <F6>:width
<F0> is<SP>assumed to be the total pixel width of the character sequence 
actually<SP>drawn. Specifying <F6>:width<F0> permits appending the 
output of subsequent<SP>calls to the same protocol request, provided <F2>gcont
ext<F0> has not been modified in the interim. If <F6>:width<F0> 
is not specified, appending of subsequent output might not occur (unless <F6>:
translate<F0> returns the<SP>character width).

The <F6>:size<F0> specifies the element size of the destination 
buffer given to<SP><F6>:translate<F0> (either 8, 16, or <F6>:default<F0>). 
If <F6>:default<F0> is specified, the<SP>size will be based on the 
current font, if known; otherwise, 16 is used.

<arg>

drawable<F3> <#1f> The destination <F6>drawable<F3>.

x<F3>, <F0>y<F3> <#1f> The left baseline position for the character 
drawn.

gcontext<F3> <#1f> The graphics context for drawing text.

sequence<F3><SP><#1f> A sequence of characters or other objects to 
be translated into font indexes.

<F6>:start<F3>, <F6>:end<F3><SP><#1f> Start and end indexes defining 
the elements to draw.

<F6>:translate<F3> <#1f> A function to translate text to font indexes. 
Default is<SP> <F6>#'translate<#1e>default<F3>.

<F6>:width<F3> <#1f> The total total pixel width of the character 
actually drawn, if<SP>known.

<F6>:size<F3> <#1f> The element size of the destination buffer given 
to <F6>:translate<F3> (8,<SP>16, or <F6>:default<F3>).

<syntax0>

translate<#1e>function<F3> <F2>source source<#1e>start source<#1e>end 
font destination<Tab><F3>Function<Index, Doc = operations, "xlib:translate<#1e>function", Sort String = "translate<#1e>function"><HR>
<F2>destination<#1e>start 

<return>

<Tab><F3>Returns:<HR>
 <F2> first<#1e>not<#1e>done<F3> <#1f> Type <F0>array<#1e>index<F3>.<HR>
  <F2>to<#1e>continue<F3> <#1f> Type <F0>int16<F3>, <F0>font<F3>, 
or <F0>null<F3>.<HR>
  <F2>current<#1e>width<F3> <#1f> Type <F0>int32<F3> or <F0>null<F3>.

<para>

A function used as the <F6>:translate<F0> argument for text functions. 
Converts elements of the <F2>source<F0> (sub)sequence into font 
indexes for the given <F2>font<F0> and stores them into the <F2>destination
<F0> vector.

<|,"6<#1e>79">The <F2>destination<F0> vector is created automatically by 
CLX. <F2>destination<F0> is guaranteed to have room for (- <F2>source<#1e>en
d source<#1e>star<F0>t) integer elements, starting at <F2>destination<#1e>sta
rt<F0>. Elements of <F2>destination<F0> can be either <F6>card8<F0><SP>or 
<F6>card16<F0> integers, depending on the context. <F2>font<F0> 
is the current font, if known, or <F6>nil<F0> otherwise. Starting 
with the element at <F2>source<#1e>start<F0>,<SP><F6>translate<#1e>function
<F0> should translate as many elements of <F2>source<F0> as possible<SP>(up 
to the <F2>source<#1e>end<F0> element) into indexes in the current <F2>font
<F0>, and store<SP>them into <F2>destination<F0>. The first return 
value should be the source index of<SP>the first untranslated element.

The second return value indicates the changes which should be made 
to the current text output request before translating the remaining <F2>source
<F0><SP>elements. If no further elements need to be translated, the 
second return<SP>value should be <F6>nil<F0>. If a horizontal motion 
is required before further<SP>translation, the second return value 
should be the change in x position. If<SP>a font change is required 
for further translation, the second return value<SP>should be the 
new font.

If known, the pixel width of the translated text can be returned as 
the<SP>third value; this can allow for appending of subsequent output 
to the same<SP>protocol request, if no overall width has been specified 
at the higher level. 

<arg>

source<F3> <#1f> A sequence of characters or other objects to be 
translated.<SP>

source<#1e>start<F3> <#1f> An array<#1e>index specifying the first <F0>source
<F3> element to be translated.

source<#1e>end<F3> <#1f> An array<#1e>index specifying the end of 
the <F0>source<F3> subsequence to be translated.

font<F3> <#1f> The font indexed by translated <F0>source<F3> elements.

destination<F3> <#1f> A vector where translated <F0>source<F3> 
elements are stored.

destination<#1e>start<F3> <#1f> An array<#1e>index specifying the 
position to begin storing translated<SP><F0>source<F3> elements.

<newpage>

<|,"6<#1e>80">

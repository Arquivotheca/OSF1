<!OPS, Version = 5.2>

<!Document,
	Print Rev Bars =	no,
	Final Output Device =	"ps",
	Default Printer =	"nearest-adps">

<!Font Definitions,
	F2 = Times 10,
	F3 = Times 10 Italic,
	F4 = Times 8 Italic,
	F5 = Times 18 Bold,
	F6 = Times 12 Bold,
	F7 = Times 10 Bold,
	F8 = Symbol_B 8>

<!Page,
	Bottom Margin =		1 inches,
	Left Margin =		1 inches,
	Right Margin =		1.15 inches,
	First Page =		Right,
	Starting Page # = 	Inherit,
	Page # Prefix =		"3<#1e>",
	Hyphenation =		on,
	Consecutive Hyphens =	2,
	Vert. Just. =		off>

<!Autonumber Stream, List, 2,
	Level 2 Suffix =	,
	Level 2 Starting Value = 0,
	Level 2 Show =		no>

<!Autonumber Stream, Outline, 3,
	Level 1 Symbol Type =	UPPER ROMAN,
	Level 2 Symbol Type =	UPPER ALPHA>

<!Autonumber Stream, figure, 2,
	Level 1 Prefix =	"Figure ",
	Level 1 Suffix =	"<#1e>",
	Level 1 Show =		no,
	Level 2 Suffix =	,
	Level 2 Starting Value = 0,
	Level 2 Show =		no>

<!Autonumber Stream, figurelet, 2,
	Level 1 Symbol Type =	UPPER ALPHA,
	Level 1 Prefix =	"Figure ",
	Level 1 Suffix =	"<#1e>",
	Level 1 Show =		no,
	Level 2 Suffix =	"<#04>">

<!Autonumber Stream, invisible, 1,
	Level 1 Suffix =	,
	Level 1 Show =		no>

<!Autonumber Stream, item, 2,
	Level 2 Symbol Type =	LOWER ALPHA,
	Level 2 Trail =		yes>

<!Autonumber Stream, paralet, 4,
	Level 1 Symbol Type =	UPPER ALPHA,
	Level 1 Suffix =	,
	Level 1 Show =		no,
	Level 2 Prefix =	.,
	Level 2 Suffix =	,
	Level 3 Prefix =	.,
	Level 3 Suffix =	,
	Level 4 Prefix =	.,
	Level 4 Suffix =	>

<!Autonumber Stream, paranum, 4,
	Level 1 Suffix =	,
	Level 1 Show =		no,
	Level 2 Prefix =	.,
	Level 2 Suffix =	,
	Level 3 Prefix =	.,
	Level 3 Suffix =	,
	Level 4 Prefix =	.,
	Level 4 Suffix =	>

<!Autonumber Stream, table, 2,
	Level 1 Prefix =	"Table ",
	Level 1 Suffix =	"<#1e>",
	Level 1 Show =		no,
	Level 2 Suffix =	>

<!Autonumber Stream, tablelet, 2,
	Level 1 Symbol Type =	UPPER ALPHA,
	Level 1 Prefix =	"Table ",
	Level 1 Suffix =	"<#1e>",
	Level 1 Show =		no,
	Level 2 Suffix =	"<#04>">

<!Class, arg,
	Bottom Margin =		0.08 inches,
	Left Margin =		1.85 inches,
	First Indent =		-0.25 inches,
	Line Spacing =		1.121 lines,
	Font =			F3,
	Left Tab =		-0.25/0 inches>

<!Class, bullet,
	Bottom Margin =		0.153 inches,
	Left Margin =		1.85 inches,
	First Indent =		-0.25 inches,
	Line Spacing =		1.121 lines,
	Font =			F2,
	Allow Page Break Within = no,
	Left Tab =		-0.50/0 inches>

<!Class, caption,
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Font =			F4>

<!Class, fig,
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Alignment =		Left,
	Font =			F5>

<!Class, p1para,
	Bottom Margin =		0.153 inches,
	Left Margin =		1.60 inches,
	First Indent =		-1.60 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F6,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		-1.70/0 inches>

<!Class, p1rule,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Font =			F2,
	Hyphenation =		off,
	Allow Page Break After = no,
	Left Tab =		0/0.75*13 inches>

<!Class, p1stacked,
	Bottom Margin =		0 inches,
	Left Margin =		1.60 inches,
	First Indent =		-1.60 inches,
	Line Spacing =		1 lines,
	Font =			F7,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		-1.60/-0.17/0 inches>

<!Class, para,
	Bottom Margin =		0.153 inches,
	Left Margin =		1.60 inches,
	Line Spacing =		1.121 lines,
	Font =			F2,
	Allow Page Break Within = no,
	Left Tab =		0/0.75*13 inches>

<!Class, return,
	Bottom Margin =		0.077 inches,
	Left Margin =		1.60 inches,
	First Indent =		-0.90 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F7,
	Hyphenation =		off,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

<!Class, secno,
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Alignment =		Left,
	Font =			F5,
	Autonumber Name =	paranum>

<!Class, secrule,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Font =			F2,
	Hyphenation =		off,
	Allow Page Break After = no,
	Left Tab =		0/0.75*13 inches,
	Autonumber Name =	table>

<!Class, sectitle,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Alignment =		Right,
	Font =			F5,
	Hyphenation =		off,
	New Page =		yes,
	Left Tab =		0/0.75*13 inches>

<!Class, syntax0,
	Bottom Margin =		0 inches,
	Left Margin =		1.60 inches,
	First Indent =		-0.90 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F7,
	Hyphenation =		off,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		-0.90/0 inches,
	Right Tab =		8 inches>

<!Class, "table",
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Font =			F7,
	Autonumber Name =	table>

<!Class, title,
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Alignment =		Right,
	Font =			F5,
	TOC Doc Name =		TOC>

<!Master Frame,
	Name =			"At Anchor",
	Placement =		At Anchor,
	Width =			0.41 inches,
	Height =		0.137 inches,
	Vertical Alignment =	0.03 inches,
	Diagram =
V4,
(g9,32767,0
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,1,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<!Master Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes,
	Diagram =
V4,
(g9,1,0
 (v4,1,0,0.006667,0.066723,6.326667,0.066611,17,2,0)
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,0,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<First Page Header, Frame =
V4,
(g9,0,0
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0.007813,1,1,1,0.066667,0.066667,6,6,
  0,0.066667,6))>

<Right Page Header, Frame =
V4,
(g9,1,0
 (T8,1,12,5.533333,0.333333,0.8,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,
  102,1101,2,
<caption,
	Alignment =		Right>

Screens

<End Text>)
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,1,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<Left Page Header, Frame =
V4,
(g9,1,0
 (T8,1,12,0.013333,0.306667,3,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,10
  2,1101,2,
<caption>

Screens

<End Text>)
 (E10,0,0,0,1,0,0.053333,1,15,0,0,1,0,0,0,0,1,0,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<Right Page Footer, Frame =
V4,
(g9,1,0
 (t8,1,4,6.333333,0.266667,2,17,@nntimsps10b,\240)
 (t8,2,4,0.006667,0.266667,0,17,@nntimsps8i,CLX\ Programmer's\ Reference)
 (v4,3,0,0,0.066667,6.333333,0.066554,17,2,0)
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,1,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<Left Page Footer, Frame =
V4,
(g9,1,0
 (t8,1,4,0,0.266667,0,17,@nntimsps10b,\240)
 (t8,2,4,6.333333,0.266667,2,17,@nntimsps8i,CLX\ Programmer's\ Reference)
 (v4,3,0,0.026667,0.066667,6.333333,0.066554,17,2,0)
 (E10,0,0,0,1,0,0.053333,1,15,0,0,1,0,0,0,0,1,0,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<sectitle,
	Allow Page Break Within = no,
	Allow Page Break After = no>

<|,"3<#1e>31">
<Frame,
	Name =			"At Anchor",
	Placement =		At Anchor,
	Width =			4.72 inches,
	Height =		0.94 inches,
	Vertical Alignment =	0.03 inches,
	Page # =		"3<#1e>31",
	Diagram =
V4,
(g9,1,0
 (T8,1,12,0.133333,0.72,4.563333,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512
  ,102,1101,3,
<title>

SCREENS

<End Text>)
 (E10,0,0,0,1,0,0.053333,1,15,0,0,1,0,0,0,0,1,0,1,0.066667,0.066667,6,6,0,0.066
  667,6))>
<Frame,
	Name =			"At Anchor",
	Placement =		At Anchor,
	Width =			1.626 inches,
	Height =		0.938 inches,
	Vertical Alignment =	0 inches,
	Page # =		"3<#1e>31",
	Diagram =
V4,
(g9,1,0
 (T8,1,12,0.066667,0.276667,0,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,10
  2,1101,3,
<secno,
	TOC Doc Name =		TOC>

<Autonum, paranum, 1, First = Yes>

<End Text>)
 (T8,2,12,0.026667,0.733333,0,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,10
  2,1101,3,
<"table">

<Autonum, table, 1, First = Yes>

<End Text>)
 (T8,3,12,0.066667,0.6,0,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,102,110
  1,3,
<fig,
	Alignment =		Both,
	Font =			F7,
	Autonumber Name =	figure>

<Autonum, figure, 1, First = Yes>

<End Text>)
 (g9,5,0
   (p7,5,8,19
     (g9,5,0
       (g9,5,0
         (v4,5,0,0.266667,0,1.6,0,17,1,0)
         (v4,6,0,1.6,0,1.6,0.933333,17,1,0)
         (v4,7,0,1.6,0.933333,0.266667,0.933333,17,1,0)
         (v4,8,0,0.266667,0.933333,0.266667,0,17,1,0))))
   (g9,10,8
     (p7,10,1032,13
       (g9,10,0
         (g9,10,0
           (v4,10,0,1.331228,0.934813,1.465964,0.822222,17,1,0)
           (v4,11,0,1.465964,0.822222,1.465964,0.615801,17,1,0)
           (v4,12,0,1.465964,0.615801,1.353683,0.521973,17,1,0)
           (v4,13,0,1.353683,0.521973,1.465964,0.428146,17,1,0)
           (v4,14,0,1.465964,0.428146,1.465964,0.259256,17,1,0)
           (v4,15,0,1.465964,0.259256,1.331228,0.146667,17,1,0)
           (v4,16,0,1.331228,0.146667,1.016842,0.146667,17,1,0)
           (v4,17,0,1.016842,0.146667,0.882104,0.259256,17,1,0)
           (v4,18,0,0.882104,0.259256,0.882104,0.371848,17,1,0)
           (v4,19,0,0.882104,0.371848,1.084209,0.371848,17,1,0)
           (v4,20,0,1.084209,0.371848,1.084209,0.296789,17,1,0)
           (v4,21,0,1.084209,0.296789,1.263859,0.296789,17,1,0)
           (v4,22,0,1.263859,0.296789,1.263859,0.446912,17,1,0)
           (v4,23,0,1.263859,0.446912,1.106666,0.446912,17,1,0)
           (v4,24,0,1.106666,0.446912,1.106666,0.597035,17,1,0)
           (v4,25,0,1.106666,0.597035,1.263859,0.597035,17,1,0)
           (v4,26,0,1.263859,0.597035,1.263859,0.784691,17,1,0)
           (v4,27,0,1.263859,0.784691,1.084209,0.784691,17,1,0)
           (v4,28,0,1.084209,0.784691,1.084209,0.709628,17,1,0)
           (v4,29,0,1.084209,0.709628,0.882104,0.709628,17,1,0)
           (v4,30,0,0.882104,0.709628,0.882104,0.822222,17,1,0)
           (v4,31,0,0.882104,0.822222,1.016842,0.934813,17,1,0)
           (v4,32,0,1.016842,0.934813,1.331228,0.934813,17,1,0))))
     (g9,33,2048
       (v4,33,33,0.837192,0.146667,0.837192,0.146667,17,0,0)
       (v4,34,33,0.837192,1.159997,0.837192,1.159997,17,0,0)
       (v4,35,33,1.533333,1.159997,1.533333,1.159997,17,0,0)
       (v4,36,33,1.533333,0.146667,1.533333,0.146667,17,0,0))))
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,1,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<secrule,
	Allow Page Break Within = no,
	Allow Page Break After = yes,
	Autonumber Name =	>

<Index, "visuals", To Named = p1rule><Index, "screen", To Named = sectitle>
<Frame,
	Name =			"At Anchor",
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Page # =		"3<#1e>31",
	Diagram =
V4,
(g9,1,0
 (v4,1,0,0.006667,0.066723,6.333333,0.066611,17,2,0)
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,0,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<p1stacked,
	Font =			F2,
	Left Tab =		-1.70/0 inches>

<F6>Screens and<Tab><F7>3.1<F0><#04>An X display supports graphical 
output to one or more <F3>screens<F0>. Each

<p1para,
	Alignment =		Both,
	Font =			F2,
	Allow Page Break After = yes>

<F6>Visuals<Tab><F0>screen has its own root window and window hierarchy. 
Each window belongs to exactly one screen and cannot simultaneously 
appear on another screen.

<para>

The kinds of graphics hardware used by X screens can vary greatly 
in their support for color and in their methods for accessing raster 
memory. X uses the concept of a <F3>visual type<F0> (usually referred 
to simply as a <F3>visual<F0>) which uniquely identifies the hardware 
capabilities of a display screen. Fundamentally, a visual is represented 
by a <F7>card29<F0> integer ID, which uniquely identifies the visual 
type relative to a single display. CLX also represents a visual with 
a <F7>visual<#1e>info<F0> structure that contains other attributes 
associated with a visual (see paragraph 1.6, Data Types). A screen 
can support more than one depth (that is, pixel size), and for each 
supported depth, a screen may support more than one visual. However, 
it is more typical for a screen to have only a single depth and a 
single visual type.

A visual represents various aspects of the screen hardware, as follows:

<bullet>

<F8>w<Tab><F0>A screen can be color or gray<#1e>scale. 

<F8>w<Tab><F0>A screen can have a colormap that is either writable 
or read<#1e>only.

<F8>w<Tab><F0>A screen can have a single colormap or separate colormaps 
for each of the red, green, and blue components. With separate colormaps, 
a pixel value is decomposed into three parts to determine indexes 
into each of the red, green, and blue colormaps.

<para>

<Index, "visual types", "classes supported"><Index, "classes of visual types supported">CLX supports the following 
classes of visual types: <F7>:direct<#1e>color<F0>, <F7>:gray<#1e>scale
<F0>, <F7>:pseudo<#1e>color<F0>, <F7>:static<#1e>color<F0>, <F7>:static<#1e>
gray<F0>, and <F7>:true<#1e>color<F0>. The following tables show 
how the characteristics of a screen determine the class of its visual 
type.

For screens with a single colormap:

<Tab>  Color<Tab><Tab>Gray<#1e>Scale

  Read<#1e>only<Tab>  <F7>:static<#1e>color<F0><Tab><F7>:static<#1e>gray
<F0><HR>
  Writable<Tab>  <F7>:pseudo<#1e>color<F0><Tab><F7>:gray<#1e>scale

For screens with red, green, and blue colormaps:

  Read<#1e>only<Tab>  <F7>:true<#1e>color<F0><Tab><HR>
  Writable<Tab>  <F7>:direct<#1e>color<F0><Tab><F7>:gray<#1e>scale

The visual class also indicates how screen colormaps are handled. 
See paragraph 9.1, Colormaps and Colors.

<p1rule>

<Index, "screen", "attributes", To Named = sectitle>
<Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes,
	Page # =		"3<#1e>31">

<p1stacked,
	Font =			F2,
	Left Tab =		-1.70/0 inches>

<F6>Screen  <Tab><F7>3.2<F0><#04>In CLX, each display screen is 
represented by a <F7>screen<F0> structure. The

<p1para,
	Alignment =		Both,
	Font =			F2,
	Allow Page Break After = yes>

<F6>Attributes<Tab><F7>display<#1e>roots<F0> function returns the 
list of <F7>screen<F0> structures for the display. The following 
paragraphs discuss the attributes of CLX <F7>screen<F0> structures.

<syntax0>

<|,"3<#1e>32">screen<#1e>backing<#1e>stores <F3>screen<F0><Tab><F2>Function<F0><Index, "backing<#1e>stores attribute of screen"><Index, "screen", "backing<#1e>stores attribute"><Index, Doc = operations, "xlib:screen<#1e>backing<#1e>stores", Sort String = "screen<#1e>backing<#1e>stores">

<return>

<Tab><F2>Returns: <F3><HR>
  backing<#1e>stores<#1e>type <F2><#1f> One of <F0>:always<F2>, <F0>:never
<F2>, or <F0>:when<#1e>mapped<F2>.

<para>

Returns a value indicating when the <F3>screen<F0> supports backing 
stores, although it may be storage limited in the number of windows 
it can support at once. The value returned can be one of <F7>:always<F0>, 
<F7>:never<F0>, or <F7>:when<#1e>mapped<F0>. 

<arg>

screen <F2><#1f> A <F7>screen<F2>.

<syntax0>

screen<#1e>black<#1e>pixel <F3>screen<F0><Tab><F2>Function<F0><Index, "black<#1e>pixel attribute of screen"><Index, "screen", "black<#1e>pixel attribute"><Index, Doc = operations, "xlib:screen<#1e>black<#1e>pixel", Sort String = "screen<#1e>black<#1e>pixel">

<return>

<Tab><F2>Returns: <F3><HR>
  black<#1e>pixel <F2><#1f> Type <F0>pixel<F2>.

<para>

Returns the black pixel value for the specified <F3>screen<F0>. 

<arg>

screen <F2><#1f> A <F7>screen<F2>.

<syntax0>

screen<#1e>default<#1e>colormap <F3>screen<F0><Tab><F2>Function<F0><Index, "colormap", "screen default"><Index, "default colormap of screen"><Index, "screen", "colormap, default"><Index, Doc = operations, "xlib:screen<#1e>default<#1e>colormap", Sort String = "screen<#1e>default<#1e>colormap">

<return>

<Tab><F2>Returns: <F3><HR>
  default<#1e>colormap <F2><#1f> Type <F0>colormap<F2>. 

<para>

Returns the <F3>default<#1e>colormap<F0> for the specified <F3>screen<F0>. 
The <F3>default<#1e>colormap<F0> is initially associated with the 
root window. Clients with minimal color requirements creating windows 
of the same depth as the root may want to allocate from this map by 
default. Most routine allocations of color should be made out of this 
colormap.

<arg>

screen <F2><#1f> A <F7>screen<F2>.

<syntax0>

screen<#1e>depths <F3>screen<F0><Tab><F2>Function<F0><Index, "depths of screen"><Index, "screen", "depths"><Index, Doc = operations, "xlib:screen<#1e>depths", Sort String = "screen<#1e>depths">

<return>

<Tab><F2>Returns: <F3><HR>
  depths <F2><#1f> Type <F0>alist<F2>.

<para>

Returns an association list that specifies what drawable depths are 
supported on the specified <F3>screen<F0>. Elements of the returned 
association list have the form (depth <F3>visual<F0>*), where each <F3>visua
l<F0> is a <F7>visual<#1e>info<F0> structure. Pixmaps are supported 
for each depth listed, and windows of that depth are supported if 
at least one visual type is listed for the depth. A pixmap depth of 
one is always supported and listed, but windows of depth one might 
not be supported. A depth of zero is never listed, but zero<#1e>depth <F7>:inp
ut<#1e>only<F0> windows are always supported.

<arg>

screen <F2><#1f> A <F7>screen<F2>.

<syntax0>

screen<#1e>event<#1e>mask<#1e>at<#1e>open <F3>screen<F0><Tab><F2>Function
<F0><Index, "root", "event mask of screen"><Index, "event mask", "root of screen"><Index, "screen", "event mask root"><Index, Doc = operations, "xlib:screen<#1e>event<#1e>mask<#1e>at<#1e>open", Sort String = "screen<#1e>event<#1e>mask<#1e>at<#1e>open">

<return>

<Tab><F2>Returns: <F3><HR>
  event<#1e>mask<#1e>at<#1e>open <F2><#1f> Type <F0>mask32<F2>.

<para>

Returns the initial root event mask for the specified <F3>screen<F0>.

<arg>

screen <F2><#1f> A <F7>screen<F2>.

<syntax0,
	New Page =		yes>

<|,"3<#1e>33">screen<#1e>height <F3>screen<F0><Tab><F2>Function<F0><Index, "screen", "height"><Index, "height", "screen"><Index, Doc = operations, "xlib:screen<#1e>height", Sort String = "screen<#1e>height">

<return>

<Tab><F2>Returns: <F3><HR>
  height <F2><#1f> Type <F0>card16<F2>.

<para>

Returns the <F3>height<F0> of the specified <F3>screen<F0> in 
pixel units.

<arg>

screen <F2><#1f> A <F7>screen<F2>.

<syntax0>

screen<#1e>height<#1e>in<#1e>millimeters <F3>screen<F0><Tab><F2>Function
<F0><Index, "height", "screen in millimeters"><Index, "screen", "height in millimeters"><Index, Doc = operations, "xlib:screen<#1e>height<#1e>in<#1e>millimeters", Sort String = "screen<#1e>height<#1e>in<#1e>millimeters">

<return>

<Tab><F2>Returns: <F3><HR>
  height<#1e>in<#1e>millimeters <F2><#1f> Type <F0>card16<F2>.

<para>

Returns the height of the specified <F3>screen<F0> in millimeters. 
The returned height can be used with the width in millimeters to determine 
the physical size and the aspect ratio of the screen.

<arg>

screen <F2><#1f> A <F7>screen<F2>.

<syntax0>

screen<#1e>max<#1e>installed<#1e>maps<F2> <F3>screen<F0><Tab><F2>Function
<F0><Index, "colormap", "maximum number for screen"><Index, "screen", "colormaps maximum number"><Index, Doc = operations, "xlib:screen<#1e>max<#1e>installed<#1e>maps", Sort String = "screen<#1e>max<#1e>installed<#1e>maps">

<return>

<Tab><F2>Returns: <F3><HR>
  max<#1e>installed<#1e>colormaps <F2><#1f> Type <F0>card16<F2>.

<para>

Returns the maximum number of colormaps that can be installed simultaneously 
with <F7>install<#1e>colormap<F0>.

<arg>

screen <F2><#1f> A <F7>screen<F2>.

<syntax0>

screen<#1e>min<#1e>installed<#1e>maps <F3>screen<F0><Tab><F2>Function<F0><Index, "colormap", "minimum number for screen"><Index, "screen", "colormaps minimum number"><Index, Doc = operations, "xlib:screen<#1e>min<#1e>installed<#1e>maps", Sort String = "screen<#1e>min<#1e>installed<#1e>maps">

<return>

<Tab><F2>Returns: <F3><HR>
  min<#1e>installed<#1e>colormaps <F2><#1f> Type <F0>card16<F2>.

<para>

Returns the minimum number of colormaps that can be guaranteed to 
be installed simultaneously.

<arg>

screen <F2><#1f> A <F7>screen<F2>.

<syntax0>

screen<#1e>p <F3>screen<F0><Tab><F2>Function<Index, Doc = operations, "xlib:screen<#1e>p", Sort String = "screen<#1e>p">

<return>

<Tab><F2>Returns: <F3><HR>
  screen<#1e>p <F2><#1f> Type <F0>boolean<F2>.

<para>

Returns non<#1e><F7>nil<F0> if the <F3>screen<F0> argument is 
a <F7>screen<F0> structure; otherwise, returns <F7>nil<F0>.

<syntax0>

screen<#1e>plist <F3>screen<F0><Tab><F2>Function<F0><Index, "property list", "screen"><Index, "screen", "property list"><Index, Doc = operations, "xlib:screen<#1e>plist", Sort String = "screen<#1e>plist">

<return>

<Tab><F2>Returns: <F3><HR>
  plist <F2><#1f> Type <F0>list<F2>. 

<para>

Returns and (with <F7>setf<F0>) sets the property list for the specified 
<F3>screen<F0>. This function provides a hook where extensions can 
add data.

<arg>

screen <F2><#1f> A <F7>screen<F2>.

<syntax0>

screen<#1e>root <F3>screen<F0><Tab><F2>Function<F0><Index, "root", "window of screen"><Index, "screen", "root window"><Index, Doc = operations, "xlib:screen<#1e>root", Sort String = "screen<#1e>root">

<return>

<Tab><F2>Returns: <F3><HR>
  root<#1e>window <F2><#1f> Type <F0>window <F2>or <F0>null<F2>.

<para>

Returns the <F3>root<#1e>window<F0> for the specified <F3>screen<F0>. 
This function is useful with functions that take a parent window as 
an argument. The class of the root window is always <F7>:input<#1e>output
<F0>.

<arg>

screen <F2><#1f> A <F7>screen<F2>.

<syntax0>

<|,"3<#1e>34">screen<#1e>root<#1e>depth <F3>screen<F0><Tab><F2>Function<F0><Index, "root", "depth of screen"><Index, "screen", "root depth"><Index, Doc = operations, "xlib:screen<#1e>root<#1e>depth", Sort String = "screen<#1e>root<#1e>depth">

<return>

<Tab><F2>Returns: <F3><HR>
  root<#1e>window<#1e>depth <F2><#1f> Type <F0>image<#1e>depth<F2>.

<para>

Returns the depth of the root window for the specified <F3>screen<F0>. 
Other depths can also be supported on this <F3>screen<F0>.

<arg>

screen <F2><#1f> A <F7>screen<F2>.

<syntax0>

screen<#1e>root<#1e>visual <F3>screen<F0><Tab><F2>Function<F0><Index, "root", "visual type of screen"><Index, "screen", "root visual type"><Index, Doc = operations, "xlib:screen<#1e>root<#1e>visual", Sort String = "screen<#1e>root<#1e>visual">

<return>

<Tab><F2>Returns: <F3><HR>
  root<#1e>window<#1e>visual <F2><#1f> Type <F0>card29<F2>.

<para>

Returns the default visual type for the root window for the specified <F3>scre
en<F0>.

<arg>

screen <F2><#1f> A <F7>screen<F2>.

<syntax0>

screen<#1e>save<#1e>unders<#1e>p <F3>screen<F0><Tab><F2>Function<F0><Index, "save<#1e>unders<#1e>p attribute of screen"><Index, "screen", "save<#1e>unders<#1e>p attribute"><Index, Doc = operations, "xlib:screen<#1e>save<#1e>unders<#1e>p", Sort String = "screen<#1e>save<#1e>unders<#1e>p">

<return>

<Tab><F2>Returns: <F3><HR>
  save<#1e>unders<#1e>p <F2><#1f> Type <F0>boolean<F2>.

<para>

If true, the server can support the save<#1e>under mode in <F7>create<#1e>wind
ow<F0> and in changing window attributes.

<arg>

screen <F2><#1f> A screen.

<syntax0>

screen<#1e>white<#1e>pixel <F3>screen<F0><Tab><F2>Function<F0><Index, "white pixel of screen"><Index, "screen", "white pixel"><Index, Doc = operations, "xlib:screen<#1e>white<#1e>pixel", Sort String = "screen<#1e>white<#1e>pixel">

<return>

<Tab><F2>Returns: <F3><HR>
  white<#1e>pixel <F2><#1f> Type <F0>pixel<F2>.

<para>

Returns the white pixel value for the specified <F3>screen<F0>. 

<arg>

screen <F2><#1f> A screen.

<syntax0>

screen<#1e>width <F3>screen<F0><Tab><F2>Function<F0><Index, "width", "screen"><Index, "screen", "width"><Index, Doc = operations, "xlib:screen<#1e>width", Sort String = "screen<#1e>width">

<return>

<Tab><F2>Returns: <F3><HR>
  width <F2><#1f> Type <F0>card16<F2>.

<para>

Returns the width of the specified <F3>screen <F0>in pixel units.

<arg>

screen <F2><#1f> A screen.

<syntax0>

screen<#1e>width<#1e>in<#1e>millimeters <F3>screen<F0><Tab><F2>Function
<F0><Index, "width", "screen in millimeters"><Index, "screen", "width in millimeters"><Index, Doc = operations, "xlib:screen<#1e>width<#1e>in<#1e>millimeters", Sort String = "screen<#1e>width<#1e>in<#1e>millimeters">

<return>

<Tab><F2>Returns: <F3><HR>
  width<#1e>in<#1e>millimeters <F2><#1f> Type <F0>card16<F2>.

<para>

Returns the width of the specified <F3>screen<F0> in millimeters. 
The returned width can be used with the height in millimeters to determine 
the physical size and the aspect ratio of the screen.

<arg>

screen <F2><#1f> A screen.


<!OPS, Version = 5.2>

<!Document,
	Print Rev Bars =	no,
	Final Output Device =	"ps",
	Default Printer =	"nearest-adps">

<!Font Definitions,
	F2 = Times 10 Italic,
	F3 = Times 10,
	F4 = Times 8 Italic,
	F5 = Times 18 Bold,
	F6 = Times 10 Bold,
	F7 = Times 18,
	F8 = Times 12 Bold,
	F9 = Courier 8,
	F10 = Times 8,
	F11 = Symbol_B 8,
	F12 = Times 6>

<!Page,
	Bottom Margin =		1 inches,
	Left Margin =		1 inches,
	Right Margin =		1.15 inches,
	First Page =		Right,
	Starting Page # = 	Inherit,
	Page # Prefix =		"4<#1e>",
	Hyphenation =		on,
	Consecutive Hyphens =	2,
	Vert. Just. =		off>

<!Autonumber Stream, List, 2,
	Level 2 Suffix =	,
	Level 2 Starting Value = 0,
	Level 2 Show =		no>

<!Autonumber Stream, Outline, 3,
	Level 1 Symbol Type =	UPPER ROMAN,
	Level 2 Symbol Type =	UPPER ALPHA>

<!Autonumber Stream, figure, 2,
	Level 1 Prefix =	"Figure ",
	Level 1 Suffix =	"<#1e>",
	Level 1 Show =		no,
	Level 2 Suffix =	,
	Level 2 Starting Value = 0,
	Level 2 Show =		no>

<!Autonumber Stream, figurelet, 2,
	Level 1 Symbol Type =	UPPER ALPHA,
	Level 1 Prefix =	"Figure ",
	Level 1 Suffix =	"<#1e>",
	Level 1 Show =		no,
	Level 2 Suffix =	"<#04>">

<!Autonumber Stream, invisible, 1,
	Level 1 Suffix =	,
	Level 1 Show =		no>

<!Autonumber Stream, item, 2,
	Level 2 Symbol Type =	LOWER ALPHA,
	Level 2 Trail =		yes>

<!Autonumber Stream, paralet, 4,
	Level 1 Symbol Type =	UPPER ALPHA,
	Level 1 Suffix =	,
	Level 1 Show =		no,
	Level 2 Prefix =	.,
	Level 2 Suffix =	,
	Level 3 Prefix =	.,
	Level 3 Suffix =	,
	Level 4 Prefix =	.,
	Level 4 Suffix =	>

<!Autonumber Stream, paranum, 4,
	Level 1 Suffix =	,
	Level 1 Show =		no,
	Level 2 Prefix =	.,
	Level 2 Suffix =	,
	Level 3 Prefix =	.,
	Level 3 Suffix =	,
	Level 4 Prefix =	.,
	Level 4 Suffix =	>

<!Autonumber Stream, table, 2,
	Level 1 Prefix =	"Table ",
	Level 1 Suffix =	"<#1e>",
	Level 1 Show =		no,
	Level 2 Suffix =	>

<!Autonumber Stream, tablelet, 2,
	Level 1 Symbol Type =	UPPER ALPHA,
	Level 1 Prefix =	"Table ",
	Level 1 Suffix =	"<#1e>",
	Level 1 Show =		no,
	Level 2 Suffix =	"<#04>">

<!Class, arg,
	Bottom Margin =		0.08 inches,
	Left Margin =		1.85 inches,
	First Indent =		-0.25 inches,
	Line Spacing =		1.121 lines,
	Font =			F2,
	Left Tab =		-0.25/0 inches>

<!Class, bullet,
	Bottom Margin =		0.153 inches,
	Left Margin =		1.85 inches,
	First Indent =		-0.25 inches,
	Line Spacing =		1.121 lines,
	Font =			F3,
	Allow Page Break Within = no,
	Left Tab =		-0.50/0 inches>

<!Class, caption,
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Font =			F4>

<!Class, endrule,
	Bottom Margin =		0.15 inches,
	Left Margin =		1.60 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F3,
	Hyphenation =		off,
	Allow Page Break Within = no,
	Left Tab =		0/1.75/2.30/3.50/7.50 inches>

<!Class, fig,
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Alignment =		Left,
	Font =			F5>

<!Class, keyword2,
	Bottom Margin =		0.153 inches,
	Left Margin =		1.85 inches,
	First Indent =		-0.25 inches,
	Line Spacing =		1.121 lines,
	Font =			F6,
	Left Tab =		-0.50/0 inches>

<!Class, newpage,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Alignment =		Left,
	Font =			F7,
	Hyphenation =		off,
	New Page =		yes,
	Left Tab =		>

<!Class, p1para,
	Bottom Margin =		0.153 inches,
	Left Margin =		1.60 inches,
	First Indent =		-1.60 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F8,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		-1.70/0 inches>

<!Class, p1rule,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Font =			F3,
	Hyphenation =		off,
	Allow Page Break After = no,
	Left Tab =		0/0.75*13 inches>

<!Class, p1stacked,
	Bottom Margin =		0 inches,
	Left Margin =		1.60 inches,
	First Indent =		-1.60 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F8,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		-1.70/0 inches>

<!Class, para,
	Bottom Margin =		0.153 inches,
	Left Margin =		1.60 inches,
	Line Spacing =		1.121 lines,
	Font =			F3,
	Allow Page Break Within = no,
	Left Tab =		0/0.75*13 inches>

<!Class, return,
	Bottom Margin =		0.077 inches,
	Left Margin =		1.60 inches,
	First Indent =		-0.90 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F6,
	Hyphenation =		off,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

<!Class, secno,
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Alignment =		Left,
	Font =			F5,
	Autonumber Name =	paranum>

<!Class, secrule,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Font =			F3,
	Hyphenation =		off,
	Allow Page Break After = no,
	Left Tab =		0/0.75*13 inches,
	Autonumber Name =	table>

<!Class, sectitle,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Alignment =		Right,
	Font =			F5,
	Hyphenation =		off,
	New Page =		yes,
	Left Tab =		0/0.75*13 inches>

<!Class, stabrule,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Font =			F6,
	Hyphenation =		off,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		0/1.60 inches>

<!Class, syntax,
	Bottom Margin =		0.077 inches,
	Left Margin =		1.60 inches,
	First Indent =		-0.90 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F6,
	Hyphenation =		off,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		-0.90/0 inches,
	Right Tab =		8 inches>

<!Class, syntax0,
	Bottom Margin =		0 inches,
	Left Margin =		1.60 inches,
	First Indent =		-0.90 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F6,
	Hyphenation =		off,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		-0.90/0 inches,
	Right Tab =		8 inches>

<!Class, t1ST,
	Bottom Margin =		0 inches,
	Left Margin =		1.60 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F3,
	Left Tab =		0/1.50 inches>

<!Class, t1SThead,
	Bottom Margin =		0.15 inches,
	Left Margin =		1.60 inches,
	Line Spacing =		1.121 lines,
	Alignment =		Left,
	Font =			F3,
	Left Tab =		0/1.50 inches>

<!Class, t2,
	Bottom Margin =		0 inches,
	Left Margin =		1.60 inches,
	Line Spacing =		1.114 lines,
	Alignment =		Left,
	Font =			F3,
	Left Tab =		0/1.50/0.75*4 inches>

<!Class, "table",
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Font =			F6,
	Autonumber Name =	table>

<!Class, tabtitle1,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Font =			F6,
	Hyphenation =		off,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		0/1.60 inches,
	Autonumber Name =	table,
	TOC Doc Name =		TOC>

<!Class, title,
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.100 lines,
	Alignment =		Right,
	Font =			F5,
	TOC Doc Name =		TOC>

<!Master Frame,
	Name =			"At Anchor",
	Placement =		At Anchor,
	Width =			0.41 inches,
	Height =		0.137 inches,
	Vertical Alignment =	0.03 inches,
	Diagram =
V4,
(g9,32767,0
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,1,0,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<!Master Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes,
	Diagram =
V4,
(g9,1,0
 (v4,1,0,0.006667,0.066723,6.326667,0.066611,17,2,0)
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,0,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<First Page Header, Frame =
V4,
(g9,0,0
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,1,1,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<Right Page Header, Frame =
V4,
(g9,1,0
 (T8,1,12,4.6,0.333333,1.71,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,102,
  1101,2,
<caption,
	Alignment =		Right>

Windows and Pixmaps

<End Text>)
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,1,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<Left Page Header, Frame =
V4,
(g9,1,0
 (T8,1,12,0,0.316667,1.013333,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,10
  2,1101,6,
<caption,
	Alignment =		Left>

Windows and Pixmaps

<End Text>)
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,1,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<Right Page Footer, Frame =
V4,
(g9,1,0
 (t8,1,4,6.333333,0.266667,2,17,@nntimsps10b,\240)
 (t8,2,4,0.006667,0.266667,0,17,@nntimsps8i,CLX\ Programmer's\ Reference)
 (v4,3,0,0,0.066667,6.333333,0.066554,17,2,0)
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,1,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<Left Page Footer, Frame =
V4,
(g9,1,0
 (t8,1,4,0,0.266667,0,17,@nntimsps10b,\240)
 (t8,2,4,6.333333,0.266667,2,17,@nntimsps8i,CLX\ Programmer's\ Reference)
 (v4,3,0,0.026667,0.066667,6.333333,0.066554,17,2,0)
 (E10,0,0,0,1,0,0.053333,1,15,0,0,1,0,0,0,0,1,0,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<sectitle,
	Allow Page Break Within = no,
	Allow Page Break After = no>

<|,"4<#1e>35">
<Frame,
	Name =			"At Anchor",
	Placement =		At Anchor,
	Width =			4.72 inches,
	Height =		0.94 inches,
	Vertical Alignment =	0.03 inches,
	Diagram =
V4,
(g9,1,0
 (T8,1,12,0.133333,0.72,4.563333,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512
  ,102,1101,3,
<title>

WINDOWS AND PIXMAPS

<End Text>)
 (E10,0,0,0,1,0,0.053333,1,15,0,0,1,0,0,0,0,1,0,1,0.066667,0.066667,6,6,0,0.066
  667,6))>
<Frame,
	Name =			"At Anchor",
	Placement =		At Anchor,
	Width =			1.626 inches,
	Height =		0.938 inches,
	Vertical Alignment =	0 inches,
	Diagram =
V4,
(g9,1,0
 (T8,1,12,0.066667,0.276667,0,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,10
  2,1101,3,
<secno,
	TOC Doc Name =		TOC>

<Autonum, paranum, 1, First = Yes>

<End Text>)
 (T8,2,12,0.026667,0.733333,0,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,10
  2,1101,3,
<"table">

<Autonum, table, 1, First = Yes>

<End Text>)
 (T8,3,12,0.066667,0.6,0,1,0.333333,0,516,0,17,0,0,0,0,0,0,1,1,2048,512,102,110
  1,3,
<fig,
	Alignment =		Both,
	Font =			F6,
	Autonumber Name =	figure>

<Autonum, figure, 1, First = Yes>

<End Text>)
 (g9,5,0
   (p7,5,8,19
     (g9,5,0
       (g9,5,0
         (v4,5,0,0.266667,0,1.6,0,17,1,0)
         (v4,6,0,1.6,0,1.6,0.933333,17,1,0)
         (v4,7,0,1.6,0.933333,0.266667,0.933333,17,1,0)
         (v4,8,0,0.266667,0.933333,0.266667,0,17,1,0))))
   (g9,10,8
     (g9,10,1032
       (p7,10,8,13
         (g9,10,0
           (g9,10,0
             (v4,10,0,1.451931,0.934813,1.249826,0.934813,17,1,0)
             (v4,11,0,1.249826,0.934813,1.249826,0.784691,17,1,0)
             (v4,12,32,1.249826,0.784691,1.249826,0.653326,17,0,0)
             (v4,13,0,1.249826,0.653326,1.249826,0.353084,17,1,0)
             (v4,14,32,1.249826,0.353084,1.227369,0.146667,17,0,0)
             (v4,15,0,1.227369,0.146667,1.451931,0.146667,17,1,0)
             (v4,16,0,1.451931,0.146667,1.451931,0.653326,17,1,0)
             (v4,17,0,1.451931,0.653326,1.564212,0.653326,17,1,0)
             (v4,18,0,1.564212,0.653326,1.564212,0.784691,17,1,0)
             (v4,19,0,1.564212,0.784691,1.451931,0.784691,17,1,0)
             (v4,20,0,1.451931,0.784691,1.451931,0.934813,17,1,0))))
       (p7,22,8,13
         (g9,22,0
           (g9,22,0
             (v4,22,32,1.249826,0.784691,1.249826,0.653326,17,0,0)
             (v4,23,0,1.249826,0.653326,1.002807,0.653326,17,1,0)
             (v4,24,0,1.002807,0.653326,1.249826,0.353084,17,1,0)
             (v4,25,32,1.249826,0.353084,1.227369,0.146667,17,0,0)
             (v4,26,0,1.227369,0.146667,0.823159,0.615801,17,1,0)
             (v4,27,0,0.823159,0.615801,0.823159,0.784691,17,1,0)
             (v4,28,0,0.823159,0.784691,1.249826,0.784691,17,1,0)))))
     (g9,29,2048
       (v4,29,33,0.800701,0.146667,0.800701,0.146667,17,0,0)
       (v4,30,33,0.800701,1.159997,0.800701,1.159997,17,0,0)
       (v4,31,33,1.586667,1.159997,1.586667,1.159997,17,0,0)
       (v4,32,33,1.586667,0.146667,1.586667,0.146667,17,0,0))))
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,1,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<secrule,
	Allow Page Break Within = no,
	Allow Page Break After = yes,
	Autonumber Name =	>

<Index, "drawable", To Named = sectitle><Index, "pixmap", To Named = sectitle><Index, "window", To Named = sectitle>
<Frame,
	Name =			"At Anchor",
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Diagram =
V4,
(g9,1,0
 (v4,1,0,0.006667,0.066723,6.333333,0.066611,17,2,0)
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,0,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>

<p1para,
	Alignment =		Both,
	Font =			F3,
	Allow Page Break After = yes>

<F8>Drawables<Tab><F6>4.1<F0><#04>Both windows and pixmaps can 
be used as sources and destinations in graphics operations. These 
are collectively known as <F2>drawables<F0>. The following functions 
apply to both windows and pixmaps.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

drawable<#1e>display<F3> <F2>drawable<F0><Tab><F3>Function<Index, Doc = operations, "xlib:drawable<#1e>display", Sort String = "drawable<#1e>display">

<para>

Returns the display for the specified <F2>drawable<F0>.

<arg>

drawable <F3><#1f> A <F6>drawable<F3> object.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

drawable<#1e>equal<F3> <F2>drawable<#1e>1<F0> <F2>drawable<#1e>2<F0><Tab>
<F3>Function<Index, Doc = operations, "xlib:drawable<#1e>equal", Sort String = "drawable<#1e>equal">

<para>

Returns true if the two arguments refer to the same server resource, 
and <F6>nil<F0> if they do not.

<arg>

drawable<#1e>1<F3>,<F6> <F0>drawable<#1e>2 <F3><#1f> <F6>drawable<F3> 
objects.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

drawable<#1e>id<F3> <F2>drawable<F0><Tab><F3>Function<Index, Doc = operations, "xlib:drawable<#1e>id", Sort String = "drawable<#1e>id">

<return>

<Tab><F3>Returns: <F2><HR>
  id <F3><#1f> Type <F0>resource<#1e>id<F3>.

<para>

Returns the unique resource ID assigned to the specified <F2>drawable<F0>.

<arg>

drawable <F3><#1f> A <F6>drawable<F3> object.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

drawable<#1e>p<F3> <F2>drawable<F0><Tab><F3>Function<Index, Doc = operations, "xlib:drawable<#1e>p", Sort String = "drawable<#1e>p">

<return>

<Tab><F3>Returns: <F2><HR>
  boole <F3><#1f> Type <F0>boolean<F3>.

<para>

Returns true if the argument is a <F6>drawable<F0> and <F6>nil<F0> 
otherwise.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

drawable<#1e>plist<F3> <F2>drawable<F0><Tab><F3>Function<Index, Doc = operations, "xlib:drawable<#1e>plist", Sort String = "drawable<#1e>plist">

<return>

<Tab><F3>Returns: <F2><HR>
  plist <F3><#1f> A property list.

<para>

Returns and (with <F6>setf<F0>) sets the property list for the specified 
<F2>drawable<F0>. This function provides a hook where extensions 
can add data.

<p1rule>

<Index, "window", "creating">
<Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes>

<p1stacked,
	Line Spacing =		1 lines,
	Alignment =		Both,
	Font =			F3>

<F8>Creating <Tab><F6>4.2<F0><#04>A window is a <F6>drawable<F0> 
that can also receive input events. CLX<FJ>

<p1para,
	Alignment =		Both,
	Font =			F3,
	Allow Page Break After = yes>

<F8>Windows<Tab><F0>represents a window with a <F6>window <F0>object. 
The <F6>create<#1e>window<F0> function creates a new <F6>window<F0> 
object.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

create<#1e>window<F3> &key <F0>:parent :x :y :width :height<F3> 
(<F0>:depth<F3> 0)<Tab>Function<Index, Doc = operations, "xlib:create<#1e>window", Sort String = "create<#1e>window"><HR>
(<F0>:border<#1e>width<F3> 0) (<F0>:class<F3> <F0>:copy<F3>) 
(<F0>:visual :copy<F3>) <F0>:background <HR>
:border :gravity :bit<#1e>gravity :backing<#1e>store :backing<#1e>planes <F9> 
<F0>:backing<#1e>pixel :save<#1e>under :event<#1e>mask :do<#1e>not<#1e>propaga
te<#1e>mask  :override<#1e>redirect :colormap :cursor

<return>

<Tab><F3>Returns: <F2><HR>
  window<F3> <#1f> Type <F0>window<F3>.

<para>

Creates and returns a window. A <F6>:parent<F0> window must be specified; 
the first window created by a client will have a root window as its <F6>:paren
t<F0>. The new window is initially unmapped and is placed on top 
of its siblings in the stacking order. A <F6>:create<#1e>notify<F0> 
event is generated by the server.

<|,"4<#1e>36">The <F6>:class<F0> of a window can be <F6>:input<#1e>output <F0>or 
<F6>:input<#1e>only<F0>. Windows of class <F6>:input<#1e>only<F0> 
cannot be used as the destination drawable for graphics output and 
can never receive <F6>:exposure<F0> events, but otherwise operate 
the same as <F6>:input<#1e>output<F0> windows. The <F6>:class<F0> 
can also be <F6>:copy<F0>, in which case the new window has the 
same class as its <F6>:parent<F0>. 

For an <F6>:input<#1e>output<F0> window, the <F6>:visual<F0> and <F6>:dept
h<F0> must be a combination<SP>supported by the <F6>:parent<F0>'s 
screen, but the <F6>:depth<F0> need not be the same as the <F6>:parent<F0>'
s. The <F6>:parent<F0> of an <F6>:input<#1e>output<F0> window 
must also be <F6>:input<#1e>output<F0>. A <F6>:depth<F0> of 0 
means that the depth of the <F6>:parent<F0> is used.

For an <F6>:input<#1e>only<F0> window, the <F6>:depth<F0> must 
be zero, and the <F6>:visual<F0> must be<SP>supported by the <F6>:parent
<F0>'s screen. The <F6>:parent<F0> of an <F6>:input<#1e>only<F0> 
window can<SP>be of any class. The only attributes that can be given 
for an <F6>:input<#1e>only<F0><SP>window are <F6>:cursor<F0>, <F6>:do<#1e>
not<#1e>propagate<#1e>mask<F0>, <F6>:event<#1e>mask<F0>, <F6>:gravity<F0>, 
and<SP><F6>:override<#1e>redirect<F0>.

<arg>

<F6>:parent<F3> <#1f> The parent window. This argument is required.

<F6>:x<F3>, <F6>:y<F3> <#1f> <F6>int16<F3> coordinates for the 
outside upper<#1e>left corner of the new window with respect to the 
origin (inside upper<#1e>left corner) of the <F6>:parent<F3>. These 
arguments are required.

<F6>:width<F3>, <F6>:height<F3> <#1f> <F6>card16<F3> values 
for the size of the new window. These arguments are required. 

<F6>:depth<F3> <#1f> A <F6>card16<F3> specifying the depth of 
the new window.

<F6>:class<F3> <#1f> One of <F6>:input<#1e>outpu<F3>t, <F6>:input<#1e>only
<F3>, or<F6> :copy<F3>.

<F6>:visual<F3> <#1f> A <F6>card29<F3> ID specifying the visual 
type of the new window.

<F6>:background<F3>, <F6>:backing<#1e>pixel<F3>, <F6>:backing<#1e>planes
<F3>, <F6>:backing<#1e>store<F3>, <F6>:bit<#1e>gravity<F3>, <F6>:border
<F3>, <F6>:border<#1e>width<F3>, <F6>:colormap<F3>, <F6>:cursor<F3>, 
<F6>:do<#1e>not<#1e>propagate<#1e>mask<F3>, <F6>:event<#1e>mask<F3>, <F6>:
gravity<F3>, <F6>:override<#1e>redirect<F3>, <F6>:save<#1e>under<F3> 
<#1f> Initial attribute values for the new window. If <F6>nil<F3>, 
the default value is defined by the X protocol. See paragraph 4.3, 
Window Attributes.

<p1rule,
	New Page =		yes>

<|,"4<#1e>37"><Index, "window", "attributes">
<Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes>

<p1stacked,
	Line Spacing =		1 lines,
	Alignment =		Both,
	Font =			F3>

<F8>Window <Tab><F6>4.3<F0><#04>The following paragraphs describe 
the CLX functions used to return or<FJ>

<p1para,
	Alignment =		Both,
	Font =			F3,
	Allow Page Break After = yes>

<F8>Attributes<Tab><F0>change window attributes. Using the <F6>with<#1e>stat
e<F0> macro improves the performance of attribute access by batching 
related accesses in the minimum number of server requests.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

drawable<#1e>border<#1e>width<F9> <F2>drawable<F0><Tab><F3>Function<F0><Index, "border<#1e>width attribute of window"><Index, "window", "attribute", "border<#1e>width"><Index, Doc = operations, "xlib:drawable<#1e>border<#1e>width", Sort String = "drawable<#1e>border<#1e>width">

<return>

<Tab><F3>Returns: <F2><HR>
  border<#1e>width <F3><#1f> Type <F0>card16<F3>.

<para>

Returns the <F2>border<#1e>width<F0> of the <F2>drawable<F0> in 
pixels. It always returns zero if the <F2>drawable<F0> is a pixmap 
or an <F6>:input<#1e>only<F0> window. Used with <F6>setf<F0>, 
this function also changes the border width of the <F6>:input<#1e>only<F0> 
window. The default border width of a new window is zero.

Changing just the border width leaves the outer left corner of a window 
in a fixed position but moves the absolute position of the window's 
origin. It is an error to make the border width of an <F6>:input<#1e>only
<F0> window nonzero.

When changing the border<#1e>width of a window, if the override<#1e>redirect 
attribute of the window is <F6>:off<F0> and some other client has 
selected <F6>:substructure<#1e>redirect<F0> on the parent, a <F6>:configure<#1e>
request<F0> event is generated, and no further processing is performed. 
Otherwise, the border<#1e>width is changed.

<arg>

drawable<F9> <F3><#1f> A <F6>drawable<F3> object.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

drawable<#1e>depth <F2>drawable<F0><Tab><F3>Function<F0><Index, "depth attribute of window"><Index, "window", "attribute", "depth"><Index, Doc = operations, "xlib:drawable<#1e>depth", Sort String = "drawable<#1e>depth">

<return>

<Tab><F3>Returns: <F2><HR>
  depth <F3><#1f> Type <F0>card8<F3>.

<para>

Returns the depth of the specified <F2>drawable<F0> (bits per pixel).

<arg>

drawable <F3><#1f> A <F6>drawable<F3> object.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

drawable<#1e>height <F2>drawable<F0><Tab><F3>Function<F0><Index, "height", "attribute of window"><Index, "window", "attribute", "height"><Index, Doc = operations, "xlib:drawable<#1e>height", Sort String = "drawable<#1e>height">

<return>

<Tab><F3>Returns: <F2><HR>
  inside<#1e>height <F3><#1f> Type <F0>card16<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

drawable<#1e>width <F2>drawable<F0><Tab><F3>Function<F0><Index, "width", "attribute of window"><Index, "window", "attribute", "width"><Index, Doc = operations, "xlib:drawable<#1e>width", Sort String = "drawable<#1e>width">

<return>

<Tab><F3>Returns: <F2><HR>
  inside<#1e>width <F3><#1f> Type <F0>card16<F3>.

<para>

These functions return the height or width of the <F2>drawable<F0>. 
These coordinates define the inside size of the <F2>drawable<F0>, 
in pixels. Used with <F6>setf<F0>, these functions also change the 
inside height or width of a window. However, the height or width of 
a pixmap cannot be changed. 

Changing the width and height resizes a window without changing its 
position or stacking priority. 

Changing the size of a mapped window may cause the window to lose 
its contents and generate an <F6>:exposure<F0> event. If a mapped 
window is made smaller, <F6>:exposure<F0> events are generated on 
windows that it formerly obscured.

When changing the size of a window, if the override<#1e>redirect attribute 
of the window is <F6>:off<F0> and some other client has selected <F6>:substr
ucture<#1e>redirect<F0> on the parent, a <F6>:configure<#1e>request<F0> 
event is generated, and no further processing is performed. Otherwise, 
if another client has selected <F6>:resize<#1e>redirect<F0> on the 
window, a <F6>:resize<#1e>request<F0> event is generated, and the 
current inside width and height are maintained. Note that the override<#1e>redi
rect attribute of the window has no effect on <F6>:resize<#1e>redirect<F0> 
and that <F6>:substructure<#1e>redirect<F0> on the parent has precedence 
over <F6>:resize<#1e>redirect<F0> on the window.

<|,"4<#1e>38">When the inside size of the window is changed, the children 
of the window can move according to their window gravity. Depending 
on the window's bit gravity, the contents of the window can also be 
moved. 

<arg>

drawable <F3><#1f> A <F6>drawable<F3> object.

<syntax,
	Bottom Margin =		0 inches,
	Allow Page Break After = yes,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

drawable<#1e>x <F2>drawable<F0><Tab><F3>Function<Index, "window", "x coordinate"><F0><Index, Doc = operations, "xlib:drawable<#1e>x", Sort String = "drawable<#1e>x">

<return,
	Allow Page Break After = yes>

<Tab><F3>Returns: <F2><HR>
  outside<#1e>left <F3><#1f> Type <F0>int16<F3>.

<syntax0>

drawable<#1e>y <F2>drawable<F3><Tab>Function<F0><Index, "window", "y coordinate"><Index, Doc = operations, "xlib:drawable<#1e>y", Sort String = "drawable<#1e>y">

<return>

<Tab><F3>Returns: <F2><HR>
  outside<#1e>top <F3><#1f> Type <F0>int16<F3>.

<para>

These functions return the x or y coordinate of the specified <F2>drawable
<F0>. They always return zero if the <F2>drawable<F0> is a pixmap. 
These coordinates define the location of the top left pixel of the 
window's border or of the window, if it has no border. Used with <F6>setf
<F0>, these functions also change the x or y coordinate of a window. 
However, the x or y coordinate of a pixmap cannot be changed.

Changing the x and y coordinates moves a window without changing its 
size or stacking priority. Moving a mapped window generates <F6>:exposure
<F0> events on any formerly obscured windows.

When changing the position of a window, if the override<#1e>redirect 
attribute of the window is <F6>:off<F0> and some other client has 
selected<F6> :substructure<#1e>redirect<F0> on the parent, a <F6>:configure<#1e>
request<F0> event is generated, and no further processing is performed. 
Otherwise, the window is moved.

<arg>

drawable <F3><#1f> A <F6>drawable<F3> object.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>all<#1e>event<#1e>masks <F2>window<F0><Tab><F3>Function<F0><Index, "event masks", "window"><Index, "window", "event masks"><Index, Doc = operations, "xlib:window<#1e>all<#1e>event<#1e>masks ", Sort String = "window<#1e>all<#1e>event<#1e>masks ">

<return>

<Tab><F3>Returns:<F2> <HR>
  all<#1e>event<#1e>masks <F3><#1f> Type <F0>mask32<F3>.

<para>

Returns the inclusive<#1e>or of the event masks selected on the specified 
<F2>window<F0> by all clients.

<arg>

window <F3><#1f> A<F6> window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

setf <F3>(<F0>window<#1e>background<F3>)<F0> <F2>window background<F0><Tab>
<F3>Function<F0><Index, "background attribute", "window"><Index, "window", "attribute", "background"><Index, Doc = operations, "xlib:window<#1e>background", Sort String = "window<#1e>background">

<return>

<Tab><F3>Returns: <F2><HR>
  background <F3><#1f> Either a <F0>pixel<F3>, a <F0>pixmap<F3>, <F0>:non
e<F3>, or <F0>:parent<#1e>relative<F3>.

<para>

Changes the <F2>background<F0> attribute of the <F2>window<F0> 
to the specified value. This operation is not allowed on an <F6>:input<#1e>onl
y<F0> window. Changing the background does not cause the window contents 
to be changed. Note that the background of a window cannot be returned 
from the X server. The default background of a new window is <F6>:none<F0>.

In general, the server automatically fills in exposed areas of the 
window when they are first made visible. A background pixmap is tiled 
to fill each area. However, if the background is <F6>:none<F0>, 
the server will not modify<SP> exposed areas. If the background is <F6>:parent
<#1e>relative<F0>, the window and its parent must have the same depth. 
In this case, the window shares the same background as its parent. 
The parent's background is not copied and is reexamined whenever the 
window's background is required. If the background is <F6>:parent<#1e>relative
<F0>, the background pixmap tile origin is the same as the parent's; 
otherwise, the tile origin is the window origin.

<arg>

window <F3><#1f> A <F6>window<F3>.

background <F3><#1f> Either a <F6>pixel<F3>, a <F6>pixmap<F3>, <F6>:none
<F3>, or <F6>:parent<#1e>relative<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

<|,"4<#1e>39">window<#1e>backing<#1e>pixel<F9> <F2>window<F0><Tab><F3>Function
<F0><Index, "backing<#1e>pixel attribute of window"><Index, "window", "attribute", "backing<#1e>pixel"><Index, Doc = operations, "xlib:window<#1e>backing<#1e>pixel", Sort String = "window<#1e>backing<#1e>pixel">

<return>

<Tab><F3>Returns:<F2> <HR>
  backing<#1e>pixel <F3><#1f> Type <F0>pixel<F3>.

<para>

Returns and (with <F6>setf<F0>) changes the value of the backing<#1e>pixel 
attribute for the specified <F2>window<F0>. Changing the backing<#1e>pixel 
attribute of a mapped window may have no immediate effect. The default 
backing<#1e>pixel of a new window is zero.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>backing<#1e>planes<F9> <F2>window<F0><Tab><F3>Function<F0><Index, "backing<#1e>planes attribute of window"><Index, "window", "attribute", "backing<#1e>planes"><Index, Doc = operations, "xlib:window<#1e>backing<#1e>planes", Sort String = "window<#1e>backing<#1e>planes">

<return>

<Tab><F3>Returns:<F2> <HR>
  backing<#1e>planes <F3><#1f> Type <F0>pixel<F3>.

<para>

Returns and (with <F6>setf<F0>) changes the value of the backing<#1e>planes 
attribute for the specified <F2>window<F0>. Changing the backing<#1e>planes 
attribute of a mapped window may have no immediate effect. The default 
backing<#1e>planes of a new window is all one's.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>backing<#1e>store <F2>window<F0><Tab><F3>Function<F0><Index, "backing<#1e>store attribute of window"><Index, "window", "attribute", "backing<#1e>store"><Index, Doc = operations, "xlib:window<#1e>backing<#1e>store", Sort String = "window<#1e>backing<#1e>store">

<return>

<Tab><F3>Returns:<F2> <HR>
  backing<#1e>store<#1e>type <F3><#1f> One of <F0>:always<F3>, <F0>:not<#1e>
useful<F3>, or <F0>:when<#1e>mapped<F3>.

<para>

Returns and (with <F6>setf<F0>) changes the value of the backing<#1e>store 
attribute for the specified <F2>window<F0>. Changing the backing<#1e>store 
attribute of an obscured window to <F6>:when<#1e>mapped<F0> or <F6>:always
<F0> may have no immediate effect. The default backing<#1e>store 
of a new window is <F6>:not<#1e>useful<F0>.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>bit<#1e>gravity <F2>window<F0><Tab><F3>Function<F0><Index, "bit<#1e>gravity attribute of window", Sort String = "bit gravity attribute of window"><Index, "window", "attribute", "bit<#1e>gravity"><Index, Doc = operations, "xlib:window<#1e>bit<#1e>gravity", Sort String = "window<#1e>bit<#1e>gravity">

<return>

<Tab><F3>Returns:<HR>
<F2>  bit<#1e>gravity <F3><#1f> Type <F0>bit<#1e>gravity<F3>.

<para>

Returns and (with <F6>setf<F0>) changes the bit<#1e>gravity attribute 
of the <F2>window<F0>. If a window is reconfigured without changing 
its inside width or height, the contents of the window move with the 
window and are not lost. Otherwise, the contents of the resized window 
are either moved or lost, depending on its bit<#1e>gravity attribute. 
The default bit<#1e>gravity of a new window is <F6>:forget<F0>.

For example, suppose a window's size is changed by <F2>W<F0> pixels 
in width and <F2>H<F0> pixels in height. The following table shows, 
for each bit<#1e>gravity value, the change in position (relative to 
the window origin) that results for each pixel of the window contents.

<t2,
	Allow Page Break After = no>

<F6>Bit<#1e>Gravity<Tab>X Change<Tab><Tab>Y Change

<t2>

<Tab-><Tab-><Tab-><Tab-><Tab-><Tab->

<F6>:center<F0><Tab><F2>W/<F0>2<Tab><Tab><F2>H/<F0>2 

<F6>:east<F0><Tab><F2>W<F0><Tab><Tab><F2>H/<F0>2

<F6>:north<F0><Tab><F2>W/<F0>2<Tab><Tab>0 

<F6>:north<#1e>east<F0><Tab><F2>W<F0><Tab><Tab>0 

<F6>:north<#1e>west<F0><Tab>0<Tab><Tab>0 

<F6>:south<F0><Tab><F2>W/<F0>2<Tab><Tab><F2>H<F0> 

<F6>:south<#1e>east<F0><Tab>W<Tab><Tab>H

<F6>:south<#1e>west<F0><Tab>0<Tab><Tab>H 

<F6>:west<F0><Tab>0<Tab><Tab>H/2<HR>
 

<para>

A <F6>:static<F0> bit<#1e>gravity indicates the contents or window 
should not move relative to the origin of the root window. 

<|,"4<#1e>40">A server can choose to ignore the specified bit<#1e>gravity 
attribute and use <F6>:forget<F0> instead. A <F6>:forget<F0> bit<#1e>gravit
y attribute indicates that the window contents are always discarded 
after a size change, even if backing<#1e>store or save<#1e>under attributes 
are <F6>:on<F0>. The window's background is displayed (unless it 
is <F6>:none<F0>), and zero or more <F6>:exposure<F0> events are 
generated.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

setf <F3>(<F0>window<#1e>border<F3>) <F2>window border<F0><Tab><F3>Functi
on<F0><Index, "border attribute of window"><Index, "window", "attribute", "border"><Index, Doc = operations, "xlib:window<#1e>border", Sort String = "window<#1e>border">

<return>

<Tab><F3>Returns:<F2> <HR>
  border <F3><#1f> Either a <F0>pixel<F3>, a <F0>pixmap<F3>, 
or <F0>:copy<F3>.

<para>

Changes the <F2>border <F0>attribute of the <F2>window<F0> to 
the specified value. This operation is not allowed on an <F6>:input<#1e>only
<F0> window. Changing the border attribute also causes the window 
border to be repainted. Note that the border of a window cannot be 
returned from the X server. The default border of a new window is <F6>:copy
<F0>.

A border pixmap is tiled to fill the border. The border pixmap tile 
origin is<SP>the same as the background tile origin. A border pixmap 
and the window<SP>must have the same root and depth. If the border 
is <F6>:copy<F0>, the parent's<SP>border is copied and used; subsequent 
changes to the parent's border do not<SP>affect the window border.

<arg>

window <F3><#1f> A <F6>window<F3>.

border <F3><#1f> Either a <F6>pixel<F3>, a <F6>pixmap<F3>, or <F6>:copy
<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>class <F2>window<F0><Tab><F3>Function<F0><Index, "window", "class"><Index, "class", "window"><Index, Doc = operations, "xlib:window<#1e>class", Sort String = "window<#1e>class">

<return>

<Tab><F3>Returns: <F2><HR>
  class <F3><#1f> Either <F0>:input<#1e>output<F3> or <F0>:input<#1e>only
<F3>.

<para>

Returns the <F2>class<F0> of the specified <F2>window<F0>. 

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>colormap<F3> <F2>window<F0><Tab><F3>Function<F0><Index, "colormap", "attribute of window"><Index, "window", "attribute", "colormap"><Index, Doc = operations, "xlib:window<#1e>colormap", Sort String = "window<#1e>colormap">

<return>

<Tab><F3>Returns: <F2><HR>
  colormap <F3><#1f> Type<F0> colormap<F3> or <F0>null<F3>. 

<para>

Returns and (with <F6>setf<F0>) changes the value of the colormap 
attribute for the specified <F2>window<F0>. A value of <F6>:copy<F0> 
is never returned, since the parent's colormap attribute is actually 
copied, but the attribute can be set to <F6>:copy<F0> in a <F6>setf<F0> 
form. Changing the colormap of a window (defining a new map, not changing 
the contents of the existing map) generates a <F6>:colormap<#1e>notify<F0> 
event. Changing the colormap of a visible window may have no immediate 
effect on the screen (see <F6>install<#1e>colormap<F0>). The default 
colormap of a new window is <F6>:copy<F0>.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>colormap<#1e>installed<#1e>p <F2>window<F0><Tab><F3>Function<Index, Doc = operations, "xlib:window<#1e>colormap<#1e>installed<#1e>p", Sort String = "window<#1e>colormap<#1e>installed<#1e>p">

<return>

<Tab><F3>Returns: <F2><HR>
  colormap<#1e>installed<#1e>p <F3><#1f> Type <F0>boolean<F3>. 

<para>

Returns non<#1e><F6>nil<F0> if the colormap associated with this <F2>window
<F0> is installed. Otherwise, this function returns <F6>nil<F0>.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

<|,"4<#1e>41">setf <F3>(<F0>window<#1e>cursor<F3>) <F2>window cursor<F0><Tab>
<F3>Function<F0><Index, "cursor", "attribute of window"><Index, "window", "attribute", "cursor"><Index, Doc = operations, "xlib:window<#1e>cursor", Sort String = "window<#1e>cursor">

<return>

<Tab><F3>Returns: <F2><HR>
  cursor <F3><#1f> Type <F0>cursor <F3>or<F0> :none<F3>. 

<para>

Changes the <F2>cursor<F0> attribute of the <F2>window<F0> to 
the specified value. Changing the cursor of a root window to <F6>:none<F0> 
restores the default cursor. Note that the cursor of window cannot 
be returned from the X server. The default cursor of a new window 
is <F6>:none<F0>.

<arg>

window <F3><#1f> A <F6>window<F3>.

cursor <F3><#1f> Either <F6>cursor<F3> or <F6>:none<F3>.

<syntax0>

window<#1e>display<F3> <F2>window<F0><Tab><F3>Function<F0><Index, "display", "window object"><Index, "window", "display object"><Index, Doc = operations, "xlib:window<#1e>display", Sort String = "window<#1e>display">

<return>

<Tab><F3>Returns: <F2><HR>
  display <F3><#1f> Type <F0>display<F3>. 

<para>

Returns the <F6>display<F0> object associated with the specified <F2>window
<F0>. 

<arg>

window <#1f> <F3>A <F6>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>do<#1e>not<#1e>propagate<#1e>mask <F2>window<F0><Tab><F3>Function
<F0><Index, "do<#1e>not<#1e>propagate<#1e>mask attribute of window"><Index, "window", "attribute", "do<#1e>not<#1e>propagate<#1e>mask"><Index, Doc = operations, "xlib:window<#1e>do<#1e>not<#1e>propagate<#1e>mask", Sort String = "window<#1e>do<#1e>not<#1e>propagate<#1e>mask">

<return>

<Tab><F3>Returns: <F2><HR>
  do<#1e>not<#1e>propagate<#1e>mask <F3><#1f> Type <F0>mask32<F3>.

<para>

Returns and (with <F6>setf<F0>) changes the do<#1e>not<#1e>propagate<#1e>mask 
attribute for the<SP>window. The default do<#1e>not<#1e>propagate<#1e>mask 
of a new window is zero.

If a window receives an event from one of the user input devices, 
and if no<SP>client has selected to receive the event, the event can 
instead be<SP>propagated up the window hierarchy to the first ancestor 
for which some client<SP>has selected it. However, any event type 
selected by the do<#1e>not<#1e>propagate<#1e>mask<SP>is not be propagated. 
The types of events that can be selected by the<SP>do<#1e>not<#1e>propagate<#1e>
mask are those of type <F6>device<#1e>event<#1e>mask<#1e>class<F0>. 
See paragraph<SP>12.2, Selecting Events.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>equal <F2>window<#1e>1<F3> <F2>window<#1e>2<F0><Tab><F3>Functio
n<Index, Doc = operations, "xlib:window<#1e>equal", Sort String = "window<#1e>equal">

<return>

<Tab><F3>Returns: <F2><HR>
  <F0>boolean<F3>.

<para>

Returns non<#1e><F6>nil<F0> if the two arguments are the same window, 
and <F6>nil<F0> if they are not.

<arg>

window<#1e>1<F3>, <F0>window<#1e>2 <F3><#1f> The windows to compare 
for equality.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>event<#1e>mask<F3> <F2>window<F0><Tab><F3>Function<F0><Index, "event<#1e>mask", Sort String = "event mask", "attribute of window"><Index, "window", "attribute", "event<#1e>mask"><Index, Doc = operations, "xlib:window<#1e>event<#1e>mask", Sort String = "window<#1e>event<#1e>mask">

<return>

<Tab><F3>Returns: <F2><HR>
  event<#1e>mask <F3><#1f> Type <F0>mask32<F3>.<F2> 

<para>

Returns and (with <F6>setf<F0>) changes the value of the event<#1e>mask 
attribute for the <F2>window<F0>. The default event<#1e>mask of 
a new window is zero.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>gravity <F2>window<F0><Tab><F3>Function<F0><Index, "gravity attribute of window"><Index, "window", "attribute", "gravity"><Index, Doc = operations, "xlib:window<#1e>gravity", Sort String = "window<#1e>gravity">

<return>

<Tab><F3>Returns:<HR>
 <F2> gravity <F3><#1f> Type <F0>win<#1e>gravity<F3>.

<para>

Returns and (with <F6>setf<F0>) changes the gravity attribute of 
the <F2>window<F0>. If a parent window is reconfigured without changing 
its inside width or height, then all child windows move with the parent 
and are not changed. Otherwise, each child of the resized parent is 
moved, depending on the child's gravity attribute. The default gravity 
of a new window is <F6>:north<#1e>west<F0>.

<|,"4<#1e>42">For example, suppose the size of the window's parent is changed 
by <F2>W<F0> pixels in width and <F2>H<F0> pixels in height. The 
following table shows, for each possible gravity value, the resulting 
change in the window's position relative to its parent's origin. When 
the window is moved, two events are generated<#1f>a <F6>:configure<#1e>notify
<F0> event followed by a <F6>:gravity<#1e>notify<F0> event.

<t2,
	Allow Page Break After = no>

<F6>Gravity<Tab>X Change<Tab><Tab>Y Change

<t2>

<Tab-><Tab-><Tab-><Tab-><Tab-><Tab->

<F6>:center<F0><Tab><F2>W/<F0>2<Tab><Tab><F2>H/<F0>2 

<F6>:east<F0><Tab><F2>W<F0><Tab><Tab><F2>H/<F0>2

<F6>:north<F0><Tab><F2>W/<F0>2<Tab><Tab>0 

<F6>:north<#1e>east<F0><Tab><F2>W<F0><Tab><Tab>0 

<F6>:north<#1e>west<F0><Tab>0<Tab><Tab>0 

<F6>:south<F0><Tab><F2>W/<F0>2<Tab><Tab><F2>H<F0> 

<F6>:south<#1e>east<F0><Tab>W<Tab><Tab>H

<F6>:south<#1e>west<F0><Tab>0<Tab><Tab>H 

<F6>:west<F0><Tab>0<Tab><Tab>H/2<HR>
 

<para>

A <F6>:static<F0> gravity indicates that the position of the window 
should not move relative to the origin of the root window. 

An <F6>:unmap<F0> gravity is like <F6>:north<#1e>west<F0>, except 
the window is also unmapped and an <F6>:unmap<#1e>notify<F0> event 
is generated. This <F6>:unmap<#1e>notify<F0> event is generated 
after the <F6>:configure<#1e>notify<F0> event is generated for the 
parent.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>id <F2>window<F0><Tab><F3>Function<F0><Index, "ID", Sort String = id, "window"><Index, "window", "ID", Sort String = id><Index, Doc = operations, "xlib:window<#1e>id", Sort String = "window<#1e>id">

<return>

<Tab><F3>Returns: <F2><HR>
  <F3>The <F0>resource<#1e>id<F3> of the window.

<para>

Returns the unique ID assigned to <F2>window<F0>.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>map<#1e>state <F2>window<F0><Tab><F3>Function<F0><Index, "map state of window", Sort String = "map<#1e>state of window"><Index, "window", "map state"><Index, Doc = operations, "xlib:window<#1e>map<#1e>state", Sort String = "window<#1e>map<#1e>state">

<return>

<Tab><F3>Returns: <F2><HR>
  map<#1e>state <F3><#1f> One of <F0>:unmapped<F3>,<F0> :unviewable<F3>,
<F0> <F3>or<F0> :viewable<F3>.

<para>

Returns the map state of <F2>window<F0>. A window is <F6>:unviewable<F0> 
if it is mapped but some ancestor is unmapped.

<arg>

window <F3><#1f> A <F6>window<F3>.<F10> 

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>override<#1e>redirect <F2>window<F0><Tab><F3>Function<F0><Index, "override<#1e>redirect attribute of window", Sort String = "override redirect attribute of window"><Index, "window", "attribute", "override<#1e>redirect"><Index, Doc = operations, "xlib:window<#1e>override<#1e>redirect", Sort String = "window<#1e>override<#1e>redirect">

<return>

<Tab><F3>Returns: <F2><HR>
  override<#1e>redirect <F3><#1f> Either <F0>:on<F3> or <F0>:off<F3>.

<para>

Returns and (with <F6>setf<F0>) changes the value of the override<#1e>redirec
t attribute for <F2>window<F0>. The default override<#1e>redirect 
of a new window is <F6>:off<F0>.

The override<#1e>redirect attribute determines whether or not attempts 
to change<SP>window geometry or parent hierarchy can be <F2>redirected<F0> 
by a window<SP>manager or some other client. The functions that might 
be affected by the<SP>override<#1e>redirect attribute are <F6>circulate<#1e>wi
ndow<#1e>down<F0>, <F6>circulate<#1e>window<#1e>up<F0>,<SP><F6>drawable<#1e>
border<#1e>width<F0>, <F6>drawable<#1e>height<F0>, <F6>drawable<#1e>width
<F0>, <F6>drawable<#1e>x<F0>,<SP><F6>drawable<#1e>y<F0>, <F6>map<#1e>wind
ow<F0>, and <F6>window<#1e>priority<F0>.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

<|,"4<#1e>43">window<#1e>p <F2>object<F0><Tab><F3>Function<Index, Doc = operations, "xlib:window<#1e>p", Sort String = "window<#1e>p">

<return>

<Tab><F3>Returns: <F2><HR>
  window<#1e>p <F3><#1f> Type <F0>boolean<F3>.

<para>

Returns non<#1e><F6>nil <F0>if the <F2>object<F0> argument is 
a window; otherwise, it returns <F6>nil<F0>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>plist <F2>window<F0><Tab><F3>Function<F0><Index, "property list", "window"><Index, "window", "property list"><Index, Doc = operations, "xlib:window<#1e>plist", Sort String = "window<#1e>plist">

<return>

<Tab><F3>Returns: <F2><HR>
  plist <F3><#1f> A property list.

<para>

Returns and (with <F6>setf<F0>) sets the property list for the specified 
<F2>window<F0>. This function provides a hook where extensions can 
hang data.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

setf <F3>(<F0>window<#1e>priority<F3> <F2>window<F3>) (&optional <F2>sibl
ing<F3>) <F2>mode<F0><Tab><F3>Function<F0><Index, "stacking priority of window"><Index, "window", "stacking priority"><Index, Doc = operations, "xlib:window<#1e>priority", Sort String = "window<#1e>priority">

<return>

<Tab><F3>Returns: <F2><HR>
  mode <F3><#1f> One of <F0>:above<F3>, <F0>:below<F3>, <F0>:bottom<#1e>i
f<F3>,<F0> :opposite<F3>,<F0> <F3>or <F0>:top<#1e>if<F3>.

<para>

Changes the stacking priority element of the <F2>window<F0> to the 
specified value. It is an error if the <F2>sibling<F0> argument 
is specified and is not actually a sibling of the window. Note that 
the priority of an existing window cannot be returned from the X server.

When changing the priority of a window, if the override<#1e>redirect 
attribute<SP>of the window is <F6>:off<F0> and some other client 
has selected<SP>:substructure<#1e>redirect on the parent, a :configure<#1e>requ
est event is<SP>generated, and no further processing is performed. 
Otherwise, the priority<SP>is changed.

<arg>

window <F3><#1f> A <F6>window<F3>.

sibling <F3><#1f> An optional argument specifying that <F0>window<F3> 
is to be restacked relative to this sibling <F6>window<F3>.

mode <F3><#1f> One of <F6>:above<F3>, <F6>:below<F3>, <F6>:bottom<#1e>if
<F3>,<F6> :opposite<F3>,<F6> <F3>or <F6>:top<#1e>if<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

window<#1e>save<#1e>under<F9> <F2>window<F0><Tab><F3>Function<F0><Index, "save<#1e>under attribute of window"><Index, "window", "attribute", "save<#1e>under"><Index, Doc = operations, "xlib:window<#1e>save<#1e>under", Sort String = "window<#1e>save<#1e>under">

<return>

<Tab><F3>Returns:<F2> <HR>
  save<#1e>under <F3><#1f> Either <F0>:on <F3>or <F0>:off<F3>.

<para>

Returns and (with <F6>setf<F0>) changes the value of the save<#1e>under 
attribute for the specified <F2>window<F0>. Changing the save<#1e>under 
attribute of a mapped window may have no immediate effect.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax0>

window<#1e>visual <F2>window<F0><Tab><F3>Function<F0><Index, "visual type of window"><Index, "window", "visual type"><Index, Doc = operations, "xlib:window<#1e>visual", Sort String = "window<#1e>visual">

<return>

<Tab><F3>Returns: <F2><HR>
  visual<#1e>type <F3><#1f> Type <F0>card29<F3>.

<para>

Returns the <F2>visual<#1e>type<F0> associated with the specified <F2>window
<F0>.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Bottom Margin =		0.15 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

with<#1e>state <F2>drawable <F3>&body<F2> body<F0><Tab><F3>Macro<Index, Doc = operations, "xlib:with<#1e>state", Sort String = "with<#1e>state">
<F0><Index, "window", "attributes", "batching"><Index, "drawable", "geometry", "values, batching">

<para>

Batches successive read and write accesses to window attributes and 
drawable geometry, in order to minimize the number of requests sent 
to the server. Batching occurs automatically within the dynamic extent 
of the <F2>body<F0>. The<SP><F2>body<F0> is not executed within 
a <F6>with<#1e>display<F0> form.

<|,"4<#1e>44">All window attributes can be returned or changed in a single 
request.<SP>Similarly, all drawable geometry values can be returned 
or changed in a single request. <F6>with<#1e>state<F0> combines 
accesses to these values into the minimum number of server requests 
necessary to guarantee that each read<SP>access returns the current 
server state of the <F2>drawable<F0>. The number of<SP>server requests 
sent depends on the sequence of calls to reader and <F6>setf<F0><SP>functions 
within the dynamic extent of the <F2>body<F0>. There are two groups 
of<SP>reader and <F6>setf<F0> functions<#1f>the Window Attributes 
group and the Drawable Geometry group<#1f>as shown in Table 4<#1e>1.

<stabrule,
	New Page =		yes>

<|,"4<#1e>45"><Tab><Tab->

<tabtitle1,
	Autonumber Level =	2,
	TOC Doc Name =		TABLETOC>

<Index, "window", "attributes", "reader and setf functions"><Index, "drawable", "geometry", "reader and setf functions"><Index, "representation type", "standard conversions">Table 
4<#1e>1<Tab>Groups of<SP>Reader and Setf Functions<HR>
<Tab><Tab->

<t1SThead,
	Bottom Margin =		0 inches,
	Left Tab =		0/0.80/2.60 inches>

<F6>Group<Tab>Reader Functions<Tab>Setf Functions<HR>
<Tab-><Tab-><Tab->

<t1ST,
	Left Tab =		0/0.80/2.60 inches>

Window <F6><Tab>window<#1e>all<#1e>event<#1e>masks<Tab>window<#1e>background

Attributes<F6><Tab>window<#1e>backing<#1e>pixel<Tab>window<#1e>backing<#1e>pix
el

<F6><Tab>window<#1e>backing<#1e>planes<Tab>window<#1e>backing<#1e>planes

<F6><Tab>window<#1e>backing<#1e>store<Tab>window<#1e>backing<#1e>store

<F6><Tab>window<#1e>bit<#1e>gravity<Tab>window<#1e>bit<#1e>gravity

<F6><Tab>window<#1e>class<Tab>window<#1e>border

<F6><Tab>window<#1e>colormap<Tab>window<#1e>colormap

<F6><Tab>window<#1e>colormap<#1e><Tab>window<#1e>cursor

<F6><Tab> installed<#1e>p<Tab>window<#1e>do<#1e>not<#1e>propagate<#1e>mask<Tab>

<F6><Tab>window<#1e>do<#1e>not<#1e><Tab>window<#1e>event<#1e>mask

<F6><Tab> propagate<#1e>mask<Tab>window<#1e>gravity

<F6><Tab>window<#1e>event<#1e>mask<Tab>window<#1e>override<#1e>redirect

<F6><Tab>window<#1e>gravity<Tab>window<#1e>save<#1e>under

<F6><Tab>window<#1e>map<#1e>state<Tab>

<F6><Tab>window<#1e>override<#1e>redirect<Tab>

<F6><Tab>window<#1e>save<#1e>under

<F6><Tab>window<#1e>visual  

<F6><Tab>

Drawable<F6><Tab>drawable<#1e>border<#1e>width<Tab>drawable<#1e>border<#1e>wid
th

Geometry<F6><Tab>drawable<#1e>depth<Tab>drawable<#1e>height

<F6><Tab>drawable<#1e>height<Tab>drawable<#1e>width

<F6><Tab>drawable<#1e>root<Tab>drawable<#1e>x

<F6><Tab>drawable<#1e>width<Tab>drawable<#1e>y

<F6><Tab>drawable<#1e>x<Tab>window<#1e>priority

<F6><Tab>drawable<#1e>y

<endrule>

<Tab-><Tab-><Tab-><Tab->

<para>

The results from a sequence of calls to <F6>setf<F0> functions in 
a given group are cached and sent in a single server request, either 
upon exit from the <F2>body<F0> or when a reader function from the 
corresponding group is called.

<F6>with<#1e>state<F0> sends a single request to update all its 
cached values for the <F2>drawable<F0> before the first call to 
a reader function within the <F2>body<F0> and also<SP>before the 
first call to a reader function following a sequence of calls to <F6>setf
<F0> functions from the corresponding group. 

<arg>

drawable <F3><#1f> A <F6>display<F3>.

body <F3><#1f> The forms in which attributes accesses are batched.

<p1rule>

<Index, "stacking order of window", To Named = p1rule><Index, "window", "stacking order", To Named = p1rule>
<Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes>

<p1para,
	Alignment =		Both,
	Font =			F3,
	Allow Page Break After = yes>

<F8>Stacking Order<Tab><F6>4.4<F0><#04>Sibling windows can <F2>stack<F0> 
on top of each other. Windows above can <F2>obscure<F0> or <F2>occlude<F0> 
lower windows. This relationship between sibling windows is known 
as the stacking order. The <F6>window<#1e>priority<F0> function 
can be used to change the stacking order of a single window. CLX also 
provides functions to raise or lower children of a window. Raising 
a mapped window can generate <F6>:exposure<F0> events for the window 
and any mapped subwindows that were formerly obscured. Lowering a 
mapped window can generate <F6>:exposure<F0> events on any windows 
it formerly obscured.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

circulate<#1e>window<#1e>down <F2>window<F0><Tab><F3>Function<Index, Doc = operations, "xlib:circulate<#1e>window<#1e>down", Sort String = "circulate<#1e>window<#1e>down">

<para>

Lowers the highest mapped child of the specified <F2>window<F0> 
that partially or completely occludes another child to the bottom 
of the stack. Completely unobscured children are unaffected. Exposure 
processing is performed on formerly obscured windows.

<|,"4<#1e>46">If some other client has selected <F6>:substructure<#1e>redirect<F0> 
on the <F2>window<F0>, a <F6>:circulate<#1e>request<F0> event 
is generated, and no further processing is performed. Otherwise, the 
child window is lowered and a <F6>:circulate<#1e>notify<F0> event 
is generated if the <F2>window<F0> is actually restacked.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

circulate<#1e>window<#1e>up <F2>window<F0><Tab><F3>Function<Index, Doc = operations, "xlib:circulate<#1e>window<#1e>up", Sort String = "circulate<#1e>window<#1e>up">

<para>

Raises the lowest mapped child of the specified <F2>window<F0> that 
is partially or completely occluded by another child to the top of 
the stack. Completely unobscured children are unaffected. Exposure 
processing is performed on formerly obscured windows.

If another client has selected <F6>:substructure<#1e>redirect<F0> 
on the <F2>window<F0>, a <F6>:circulate<#1e>request<F0> event 
is generated, and no further processing is performed. Otherwise, the 
child window is raised and a <F6>:circulate<#1e>notify<F0> event 
is generated if the <F2>window<F0> is actually restacked.

<arg>

window <F3><#1f> A <F6>window<F3>.

<p1rule>

<Index, "window", "hierarchy", To Named = p1rule>
<Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes>

<p1stacked,
	Line Spacing =		1 lines,
	Alignment =		Both,
	Font =			F3>

<F8>Window <Tab><F6>4.5<F0><#04>All the windows in X are arranged 
in a strict hierarchy. At the top of<F6><FJ>

<p1para,
	Alignment =		Both,
	Font =			F3,
	Allow Page Break After = yes>

<F8>Hierarchy<Tab><F0>the hierarchy are the root windows, which 
cover the display screens. Each root window is partially or completely 
covered by its child windows. All windows, except for root windows, 
have parents. Child windows can have their own children. In this way, 
a tree of arbitrary depth on each screen can be created. CLX provides 
several functions for examining and modifying the window hierarchy.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

drawable<#1e>root <F2>drawable<F0><Tab><F3>Function<Index, Doc = operations, "xlib:drawable<#1e>root", Sort String = "drawable<#1e>root">

<return>

<Tab><F3>Returns: <F2><HR>
  root<#1e>window <F3><#1f> Type <F0>window<F3>.<F2> 

<para>

Returns the root window of the specified <F2>drawable<F0>.

<arg>

drawable <F3><#1f> A <F6>drawable<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

query<#1e>tree <F2>window <F3>&key (<F0>:result<#1e>type<F3> <F0>`list
<F3>)<F0><Tab><F3>Function<Index, Doc = operations, "xlib:query<#1e>tree", Sort String = "query<#1e>tree">

<return,
	Left Tab =		-0.90/0/0.10/7.50 inches>

<Tab><F3>Returns: <F2><HR>
<Tab>children <F3><#1f> Type <F0>sequence<F3> of <F0>window<F3>.<F2><HR>
<Tab>parent <#1f> <F3>Type <F0>window<F3> or <F0>null<F3>.<F2><HR>
<Tab>root <F3><#1f> Type <F0>window<F3>.<F2> 

<para>

Returns the <F2>children<F0> windows, the <F2>parent<F0> window, 
and the <F2>root<F0> window for the specified <F2>window<F0>. 
The children are returned as a sequence of windows in current stacking 
order, from bottom<#1e>most (first) to top<#1e>most (last). The <F6>:result<#1e>
type<F0> specifies the type of children sequence returned.

<arg>

window <F3><#1f> A <F6>window<F3>.

<keyword2>

:result<#1e>type <F3><#1f> A valid type specifier for a sub<#1e>type 
of <F0>sequence<F3>. The default is a <F0>list<F3>.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

reparent<#1e>window <F2>window parent x<F3> <F2>y<F0><Tab><F3>Function<Index, Doc = operations, "xlib:reparent<#1e>window", Sort String = "reparent<#1e>window">

<para>

Changes a <F2>window<F0>'s <F2>parent<F0> within a single screen. 
There is no way to move a window between screens.

The specified <F2>window<F0> is reparented by inserting it as a 
child of the specified <F2>parent<F0>. If the <F2>window<F0> is 
mapped, an <F6>unmap<#1e>window<F0> operation is automatically performed 
on the specified <F2>window<F0>. The <F2>window<F0> is then removed 
from its current position in the hierarchy and inserted as the child 
of the specified <F2>parent<F0>. The <F2>window<F0> is placed 
on top in the stacking order with respect to sibling windows.

<|,"4<#1e>47">After reparenting the specified <F2>window,<F0> a <F6>:reparent<#1e>no
tify<F0> event is generated. The override<#1e>redirect attribute 
of the <F2>window<F0> is passed on in this event. Window manager 
clients normally should ignore this event if this attribute is <F6>:on<F0>. 
See Section 12, Events and Input, for more information on <F6>:reparent<#1e>no
tify<F0> event processing. Finally, if the specified <F2>window<F0> 
was originally mapped, a <F6>map<#1e>window<F0> operation is automatically 
performed on it.

The X server performs normal exposure processing on formerly obscured 
windows. It might not generate <F6>:exposure<F0> events for regions 
from the initial <F6>unmap<#1e>window<F0> operation if they are 
immediately obscured by the final <F6>map<#1e>window<F0> operation.

It is an error if any of the following are true: 

<bullet>

<F11>w<Tab><F0>The new <F2>parent<F0> window is not on the same 
screen as the old parent window.

<F11>w<Tab><F0>The new <F2>parent<F0> window is the specified <F2>window
<F0> or an inferior of the specified <F2>window<F0>.

<F11>w<Tab><F0>The specified <F2>window<F0> has a <F6>:parent<#1e>relative
<F0> background attribute and the new <F2>parent<F0> window is 
not the same depth as the specified <F2>window<F0>.

<arg>

window <F3><#1f> A <F6>window<F3>.

parent <F3><#1f> The new parent <F6>window<F3>.

x<F3>, <F0>y <F3><#1f> The position (type <F6>int16<F3>) of the <F0>windo
w<F3> in its new <F0>parent<F3>. These coordinates are relative 
to the <F0>parent<F3>'s origin, and specify the new position of 
the upper, left, outer corner of the <F0>window<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

translate<#1e>coordinates <F2>source source<#1e>x source<#1e>y destination
<F0><Tab><F3>Function<Index, Doc = operations, "xlib:translate<#1e>coordinates", Sort String = "translate<#1e>coordinates">

<return,
	Left Tab =		-0.90/0/0.10/7.50 inches>

<Tab><F3>Returns: <F2><HR>
<Tab>destination<#1e>x <F3><#1f> Type <F0>int16<F3> or <F0>null<F3>.<F2> <HR>
<Tab>destination<#1e>y<F3> <#1f> Type <F0>int16<F3> or <F0>null<F3>.<F2> <HR>
<Tab>destination<#1e>child <F3><#1f> Type <F0>window<F3> or <F0>null<F3>.
<F2> 

<para>

Returns the position defined by <F2>source<#1e>x<F0> and <F2>source<#1e>y
<F0> (relative to the origin of the <F2>source<F0> window), expressed 
as coordinates relative to the origin of the <F2>destination<F0> 
window.

<arg>

source <F3><#1f> A <F6>window<F3> defining the source coordinate 
system.

source<#1e>x<F3>, <F0>source<#1e>y <F3><#1f> Coordinates (<F6>int16<F3>) 
relative to the origin of the <F0>source<F3> <F6>window<F3>.

destination <F3><#1f> A <F6>window<F3> defining the destination 
coordinate system.

<p1rule>

<Index, "mapping windows", To Named = p1rule><Index, "window", "mapping", To Named = p1rule><Index, "unmapping windows", To Named = p1rule><Index, "window", "unmapping", To Named = p1rule>
<Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes>

<p1stacked,
	Line Spacing =		1 lines,
	Alignment =		Both,
	Font =			F3>

<F8>Mapping <Tab><F6>4.6<F0><#04>A window is considered mapped 
if a <F6>map<#1e>window<F0> call has been made

<p1para,
	Alignment =		Both,
	Font =			F3,
	Allow Page Break After = yes>

<F8>Windows<Tab><F0>on it. When windows are first created, they 
are not mapped because an application may wish to create a window 
long before it is mapped to the screen. A mapped window may not be 
visible on the screen for one of the following reasons:

<bullet>

<F11>w<Tab><F0>It is obscured by another opaque sibling window.

<F11>w<Tab><F0>One of its ancestors is not mapped.

<F11>w<Tab><F0>It is entirely clipped by an ancestor.

<para>

<|,"4<#1e>48">A subwindow will appear on the screen as long as all of its 
ancestors are mapped and not obscured by a sibling or clipped by an 
ancestor. Mapping a window that has an unmapped ancestor does not 
display the window, but marks it as eligible for display when the 
ancestor becomes mapped. Such a window is called unviewable. When 
all its ancestors are mapped, the window becomes viewable and remains 
visible on the screen if not obscured by any sibling or ancestor. 

Any output to a window not visible on the screen is discarded. <F6>:exposure
<F0> events are generated for the window when part or all of it becomes 
visible on the screen. A client only receives the <F6>:exposure<F0> 
events if it has selected them. Mapping or unmapping a window does 
not change its stacking order priority.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

map<#1e>window <F2>window<F0><Tab><F3>Function<Index, Doc = operations, "xlib:map<#1e>window", Sort String = "map<#1e>window">

<para>

Maps the <F2>window<F0>. This function has no effect when the <F2>window
<F0> is already mapped.

If the override<#1e>redirect attribute of the <F2>window<F0> is <F6>:off
<F0> and another client has selected <F6>:substructure<#1e>redirect<F0> 
on the parent window, the X server generates a <F6>:map<#1e>request<F0> 
event and the <F6>map<#1e>window<F0> function does not map the <F2>window
<F0>. Otherwise, the <F2>window<F0> is mapped, and the X server 
generates a <F6>:map<#1e>notify<F0> event.

If the <F2>window<F0> becomes visible and no earlier contents for 
it are remembered, <F6>map<#1e>window<F0> tiles the window with 
its background. If no background was defined for the window, the existing 
screen contents are not altered, and the X server generates one or 
more <F6>:exposure<F0> events. If a backing<#1e>store was maintained 
while the window was unmapped, no <F6>:exposure<F0> events are generated. 
If a backing<#1e>store will now be maintained, a full window exposure 
is always generated. Otherwise, only visible regions may be reported. 
Similar tiling and exposure take place for any newly viewable inferiors.

<F6>map<#1e>window<F0> generates <F6>:exposure<F0> events on each <F6>:inp
ut<#1e>output<F0> window that it causes to become visible. 

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	New Page =		yes,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

<|,"4<#1e>49">map<#1e>subwindows <F2>window<F0><Tab><F3>Function<Index, Doc = operations, "xlib:map<#1e>subwindows", Sort String = "map<#1e>subwindows">

<para>

Maps all child windows for a specified <F2>window<F0> in top<#1e>to<#1e>botto
m stacking order. The X server generates an <F6>:exposure<F0> event 
on each newly visible window. This function is much more efficient 
than mapping each child individually.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

unmap<#1e>window <F2>window<F0><Tab><F3>Function<Index, Doc = operations, "xlib:unmap<#1e>window", Sort String = "unmap<#1e>window">

<para>

Unmaps the specified <F2>window<F0> and causes the X server to generate 
an <F6>:unmap<#1e>notify<F0> event. If the specified <F2>window<F0> 
is already unmapped, <F6>unmap<#1e>window<F0> has no effect. Normal 
exposure processing on formerly obscured windows is performed. Any 
child window is no longer viewable. Unmapping the <F2>window<F0> 
generates <F6>:exposure<F0> events on windows that were formerly 
obscured by <F2>window<F0> and its children.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

unmap<#1e>subwindows <F2>window<F0><Tab><F3>Function<Index, Doc = operations, "xlib:unmap<#1e>subwindows", Sort String = "unmap<#1e>subwindows">

<para>

Unmaps all child windows for the specified <F2>window<F0> in bottom 
to top stacking order. The X server generates an <F6>:unmap<#1e>notify<F0> 
event on each child and <F6>:exposure<F0> events on formerly obscured 
windows. Using this function is much more efficient than unmapping 
child windows individually.

<arg>

window <F3><#1f> A <F6>window<F3>.

<p1rule>

<Index, "destroying windows"><Index, "window", "destroying">
<Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes>

<p1stacked,
	Line Spacing =		1 lines,
	Alignment =		Both,
	Font =			F3>

<F8>Destroying <Tab><F6>4.7<F0><#04>CLX provides functions to destroy 
a window or destroy all children of

<p1para,
	Alignment =		Both,
	Font =			F3,
	Allow Page Break After = yes>

<F8>Windows<Tab><F0>a window.<F6> <F0>Note that by default, windows 
are destroyed when a connection is closed. For further information, 
see paragraph 2.4, Closing the Display, and paragraph 12.4, Client 
Termination. 

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

destroy<#1e>window <F2>window<F0><Tab><F3>Function<Index, Doc = operations, "xlib:destroy<#1e>window", Sort String = "destroy<#1e>window">

<para>

Destroys the specified <F2>window<F0> as well as all of its inferiors. 
The windows should never again be referenced. If the specified <F2>window
<F0> is mapped, it is automatically unmapped. The window and all 
of its inferiors are then destroyed, and a <F6>:destroy<#1e>notify<F0> 
event is generated for each window. The ordering of the <F6>:destroy<#1e>notif
y<F0> events is such that for any given window being destroyed, <F6>:destroy<#1e>
notify<F0> is generated on the window's inferiors before being generated 
on the window. The ordering among siblings and across sub<#1e>hierarchies 
is not otherwise constrained. If the <F2>window<F0> is a root window, 
no windows are destroyed. Destroying a mapped window generates <F6>:exposure
<F0> events on other windows that the mapped window obscured.

<arg>

window <F3><#1f> A <F6>window<F3>.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

destroy<#1e>subwindows<F2> window <F0><Tab><F3>Function<Index, Doc = operations, "xlib:destroy<#1e>subwindows", Sort String = "destroy<#1e>subwindows">

<para>

Destroys all inferiors of the specified <F2>window<F0>, in bottom 
to top stacking order. The X server generates a <F6>:destroy<#1e>notify<F0> 
event for each window. This is much more efficient than deleting many 
windows individually. The inferiors should never be referenced again. 

<arg>

window <F3><#1f> A <F6>window<F3>.

<p1rule>

<|,"4<#1e>50"><Index, "pixmap", To Named = p1rule>
<Frame,
	Name =			p1rule,
	Placement =		At Anchor,
	Width =			6.35 inches,
	Height =		0.153 inches,
	Vertical Alignment =	0.007 inches,
	Shared Contents =	yes>

<p1stacked,
	Line Spacing =		1 lines,
	Alignment =		Both,
	Font =			F6>

<F8>Pixmaps <Tab><F0>4.8<F3><#04>A <F2>pixmap<F3> is a three<#1e>dimension
al array of bits. A pixmap is normally<FJ>

<p1para,
	Alignment =		Both,
	Font =			F6>

<F8><Tab><F3>thought of as a two<#1e>dimensional array of pixels, 
where each pixel can be a value from 0 to 
<Frame,
	Name =			"At Anchor",
	Placement =		At Anchor,
	Width =			0.35 inches,
	Height =		0.15 inches,
	Vertical Alignment =	0.02 inches,
	Diagram =
V4,
(g9,1,0
 (m8,1,12,0,0.133333,clas10,2\ sup\ n\ -1)
 (E10,0,0,0,1,1,0.053333,1,15,0,0,1,0,0,0,0,1,1,1,0.066667,0.066667,6,6,0,0.066
  667,6))>
, where <F2>n<F3> is the depth of the pixmap. A pixmap can also 
be thought of as a stack of <F2>n<F3> bitmaps. A <F2>bitmap<F3> 
is a single bit pixmap of depth 1. CLX provides functions to: 

<bullet>

<F11>w<Tab><F0>Create or free a pixmap 

<F11>w<Tab><F0>Test if an object is a pixmap 

<F11>w<Tab><F0>Test if two pixmap objects are equal 

<F11>w<Tab><F0>Return the pixmap resource ID from a <F6>pixmap<F0> 
object 

<para>

Note that pixmaps can only be used on the screen where they were created. 
Pixmaps are off<#1e>screen server resources that are used for a number 
of operations. These include defining patterns for cursors or as the 
source for certain raster operations. 

<syntax0>

create<#1e>pixmap<F3> &key <F0>:width<F3> <F0>:height<F3> <F0>:depth
<F3> <F0>:drawable<Tab><F3>Function<Index, Doc = operations, "xlib:create<#1e>pixmap", Sort String = "create<#1e>pixmap">

<return>

<Tab><F3>Returns: <F2><HR>
  pixmap <F3><#1f> Type <F0>pixmap<F3>.

<para>

Creates a pixmap of the specified <F6>:width<F0>, <F6>:height<F0>, 
and <F6>:depth<F0>. It is valid to pass a window whose class is <F6>:input<#1e>
only<F0> as the <F6>:drawable<F0> argument. The <F6>:width<F0> 
and <F6>:height<F0> arguments must be nonzero. The <F6>:depth<F0> 
must be supported by the screen of the specified <F6>:drawable<F0>.

<keyword2>

:width<F3>,<F0> :height <F3><#1f> The nonzero width and height 
(type <F0>card16<F3>). 

:depth <F3><#1f> The depth (type <F0>card8<F3>) of the pixmap. 

:drawable <F3><#1f> A <F0>drawable<F3> which determines the screen 
where the pixmap will be used.

<syntax>

free<#1e>pixmap<F3> <F2>pixmap<F0><Tab><F3>Function<Index, Doc = operations, "xlib:free<#1e>pixmap", Sort String = "free<#1e>pixmap">

<para>

Allows the X server to free the pixmap storage when no other server 
resources reference it. The pixmap should never be referenced again. 

<arg>

pixmap <F3><#1f> A <F6>pixmap<F3>.

<syntax0>

pixmap<#1e>display<F3> <F2>pixmap<F0><Tab><F3>Function<Index, Doc = operations, "xlib:pixmap<#1e>display", Sort String = "pixmap<#1e>display">

<return>

<Tab><F3>Returns: <F2><HR>
  display <F3><#1f> Type <F0>display<F3>. 

<para>

Returns the <F6>display<F0> object associated with the specified <F2>pixmap
<F0>. 

<arg>

pixmap <#1f> <F3>A <F6>pixmap<F3>.

<syntax,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

pixmap<#1e>equal <F2>pixmap<#1e>1 pixmap<#1e>2<F0><Tab><F3>Function<Index, Doc = operations, "xlib:pixmap<#1e>equal", Sort String = "pixmap<#1e>equal">

<para>

Returns true if the two arguments refer to the same server resource, 
and <F6>nil<F0> if they do not.

<arg>

pixmap<#1e>1<F3>,<F0> pixmap<#1e>2 <F3><#1f> A three<#1e>dimensional 
array of bits to be tested.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

pixmap<#1e>id <F2>pixmap<F0><Tab><F3>Function<Index, Doc = operations, "xlib:pixmap<#1e>id", Sort String = "pixmap<#1e>id">

<return>

<Tab><F3>Returns: <F2><HR>
  id <F3><#1f> Type <F0>resource<#1e>id<F3>.

<para>

Returns the unique resource ID that has been assigned to the specified <F2>pix
map<F0>.

<arg>

pixmap <F3><#1f> A <F6>pixmap<F3>.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

<|,"4<#1e>51">pixmap<#1e>p <F2>object<F0><Tab><F3>Function<Index, Doc = operations, "xlib:pixmap<#1e>p", Sort String = "pixmap<#1e>p">

<return>

<Tab><F3>Returns: <F2><HR>
  pixmap <F3><#1f> Type <F0>boolean<F3>.

<para>

Returns true if the argument is a <F6>pixmap<F0> object and <F6>nil<F0> 
otherwise.

<syntax,
	Bottom Margin =		0 inches,
	Left Tab =		-0.90/0 inches,
	Right Tab =		7.50 inches>

pixmap<#1e>plist <F2>pixmap<F0><Tab><F3>Function<Index, Doc = operations, "xlib:pixmap<#1e>plist", Sort String = "pixmap<#1e>plist">

<return>

<Tab><F3>Returns: <F2><HR>
  plist <F3><#1f> A property list.

<para>

Returns and (with <F6>setf<F0>) sets the property list for the specified 
<F2>pixmap<F0>. This function provides a hook where extensions can 
add data.

<arg>

pixmap <F3><#1f> A <F6>pixmap<F3>.

<newpage>

<|,"4<#1e>52">

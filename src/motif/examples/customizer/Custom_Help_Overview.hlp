1  Overview 
=TITLE Overview of the color customizer     
=KEYWORD Overview

o What is it?

  The color customizer is a demo that allows users to dynamically control the
  colors of their workstation environment.  Window colors, icon colors, 
  window manager colors, and more can all be changed on the fly, either 
  individually or as part of an entire palette switch.  The user has complete 
  control over the mapping between resources and color cells, as well as the 
  size and contents of the palette set.  Automatic shadowing via the
  standard Motif shadowing algorithms is also supported.

o What displays are supported?

  The color customizer supports any display using pseudocolor or grayscale 
  visuals.  This includes most 4 and 8 plane workstations displays.

o What applications can be affected by the color customizer?

  The color customizer can affect the colors of any application that
  uses the current release of the Digital X Toolkit (Xt) library.
  Applications that run against another vendor's X Toolkit Library 
  will be unaffected.  Applications that run against older versions 
  of Digital's X Toolkit library will be unaffected.

  * NOTE WELL *

    If the color customizer is used to control the colors of applications
    that have their own color customization dialogs (like the session
    manager and window manager), those application specific color 
    customization dialogs may not reflect the correct current color 
    values while the customizer is running.  This is normal - simply 
    use the customizer instead of the application specific dialog box to 
    change these values.
 
2 building
=TITLE Building the color customizer

  1. Copy the files to a private directory (~/customizer in this example)

	% mkdir ~/customizer
	% cp /usr/examples/motif/customizer/* ~/customizer

  2. Generate a Makefile with xmkmf

	% cd ~/customizer
	% xmkmf

  3. Build the demo

	% make all

2 running
=TITLE Running the color customizer

  1. Make sure the custom.uid file is in a location where it will be 
     found (like the current directory or ~/uid):

	% mkdir ~/uid
	% cp ~/customizer/custom.uid ~/uid

  2. The files Custom and DXmDefaults MUST be in your home directory.
     Copy them there from your demo build area:

	% cp ~/customizer/Custom ~
	% cp ~/customizer/DXmDefaults ~

  3. Run the customizer:

	% ~/customizer/custom

  ** NOTE WELL **
  Only the colors of applications invoked after the customizer starts up
  will be affected.  For this reason, it is often desirable to make
  the customizer the first X application started during the login process.
  This can be accomplished by using a .xsession file in your home
  directory to start up your applications, making the customizer the
  first application started and your session manager the last.  You may 
  want to add a short wait (five seconds or so, using the sleep command) 
  after starting the customizer to allow it to get going before starting 
  other applications.  Other possible autostart methods exist - see the 
  documentation on dxsession and xdm for ideas.

2  inter_sum
=TITLE Interface summary

   A list of available palettes is in the upper left hand section - simply 
   click on the desired palette to see it take effect.  

   Below that are two arrays of colored buttons, representing the dynamically 
   allocated color cells for normal and shadow colors.  To find out what 
   resources are being affected by a color cell, click and hold on the arrow 
   button next to it.  As a shortcut, you can click on the screen facsimile in 
   the upper right hand corner - if the portion you click on is colored by
   one of resource values controlled by the customizer, the popup for the
   appropriate color button will be displayed.

   To modify a single color cell, click on the corresponding color button.
   A colormix widget will pop up, and as you modify the color you will 
   see these modifications reflected in your workstation environment.
   Use the colormix widget reset button to return to the starting color
   at any time.  You can also change which color cell you're modifying by
   clicking on a different color button while the colormix widget is popped
   up.

   The automatic shadowing option will cause shadow and select colors to be
   automatically updated when their corresponding background colors are
   changed.  The standard Motif shadowing algorithms are used for these
   calculations.

   The File menu allows you to save color changes:

	o To modify an existing palette, select it, change the desired 
	  colors, and choose Save Palette from the File menu.  

	o To add a new palette to the list box, select an existing palette, 
	  modify the colors as necessary, and choose Save Palette As... from 
	  the file menu.  A message box will prompt you for the name of the 
	  new palette. 

	o To delete a palette, select it in the listbox and choose delete
          palette from the File menu.

   Changes made through the File menu automatically update the Custom 
   resource defaults file so that they will be retained the next time
   the color customizer is run.

   The File menu exit button causes the customizer application to exit.  
   A warning dialog is displayed first.  Note that the color cells allocated 
   by the customizer (and used by the currently running applications) will be 
   freed.  Thus, the colors of currently running apps can become messed up 
   after the customizer is exited.  These applications will need to be restarted
   to restore normal colors.  Normally, there is no need to exit the 
   color customizer - it is typically kept running all the time, like the 
   session manager.

2  chngcolmap
=TITLE Changing the mapping between color resources and color cells

   The DXmDefaults file allows you to control how many dynamic color
   cells are allocated and what resources are affected by them.  This file 
   contains resource specifications like the following:

   *background:			DXmDynamicWindowBackground
   *foreground:                 DXmDynamicWindowForeground
   *topShadowColor:		DXmDynamicWindowTopShadow

   When the customizer starts up, this file is written to a property on the
   root window.  Any application that subsequently runs (using the correct
   X Toolkit library) will merge these resources in with its normal
   resource database.  Resources specifications in this file will take 
   precedence over specifications with equivalent left-hand sides in other 
   resource defaults files.

   The color values on the right side of this file are in a special format.
   For each unique color value in this file that begins with the string 
   "DXmDynamic", a color button is created in the color customizer.  If the 
   string "Shadow" is encountered in a name, the color button is placed in the
   shadow button box rather than the normal color button box.  If a
   color value string ends with the suffix "Background", it will be linked
   to any color buttons with identical prefixes and suffixes of "TopShadow",
   "BottomShadow", or "SelectColor" for purposes of auto-shadowing.
   If a color value named "DXmDynamicScreenBackground" is encountered, the
   color cell allocated will be used by the customizer to set the root
   window background color.

   Thus, by editing this file you can do things like piggyback many resources
   off of the same color cell.  Or you could have separate dynamic color cells
   especially for scrollbar widgets, or for your Mail application by adding
   lines like the following:

   Mail*background:			DXmDynamicMyMailBackground
   Mail*foreground:			DXmDynamicMyMailForeground
   Mail*topShadowColor:			DXmDynamicMyMailTopShadow
   Mail*bottomShadowColor:		DXmDynamicMyMailBottomShadow

   Doing this and restarting the customizer would cause four new color cells 
   to be allocated and four new color buttons to be added to the customizer 
   interface.  These buttons would be assigned default color values (usually 
   black or white) for each palette.  These defaults could then be easily 
   modified for each palette through the customizer interface.

   Note also that the text of the DXmDefaults file is read in and parsed by 
   the color customizer.  The parsing algorithm is simple and probably
   won't tolerate comments, weird spacing, or really bizarre resource 
   specifications.  If this file or the Custom resource file become
   corrupted somehow, the customizer may not be able to start correctly.
   Copy the shipped versions of Custom and DXmDefaults into your home 
   directory and see if the problem goes away.

2  decterms
=TITLE How come my dxterms aren't affected?     

  The color customizer may not affect dxterm windows if set up as described 
  above.  It may be necessary to copy any DXterm resource specifications
  from the DXmDefaults file and add them to the dxterm resource defaults
  file ~/DXterm.  For instance:

	.
	.
  DXterm.main.terminal.background: DXmDynamicTerminalBackground
  DXterm.main.terminal.foreground: DXmDynamicTerminalForeground

  The above lines added to the DXterm resource defaults file should
  allow dxterm colors to be customized when the customizer and its
  default Custom and DXmDefaults files are being used. 

2  auto_shadow
=TITLE Changing the default value of the auto shadowing toggle button

   The default value of the auto shadowing toggle button at startup
   time can be set via the Custom.autoShadow resource in the Custom
   file:

	Custom.autoShadowing: False

   The default value is True.

2  multihead
=TITLE Using the customizer on multi-headed systems

   By default, the color customizer only affects applications started up on
   the same screen as the customizer.  On multi-headed systems it is possible
   to start up a different color customizer for each screen and have a
   different palette in effect on each screen.

   Optionally, the color customizer can be configured so that it is invoked
   once on the default screen and affects all applications regardless of
   the screen that they are started on.  This mode can be turned on by
   modifying the Custom.multiScreen resource in the Custom defaults file:

	Custom.multiScreen: True

   The default value is False.

2 xsetrootcust
=TITLE Using the xsetroot_cust demo

   The xsetroot_cust demo is a modified version of xsetroot that can be
   used to set a bitmap on the root window.  By default, the program
   will use DXmDynamicScreenBackground and DXmDynamicScreenForeground
   as the background and foreground colors of the specified bitmap. 
   If your DXmDefaults file contains entries for these two dynamic
   colors, you can then use the customizer to modify the colors of 
   your bitmap dynamically.  Example run:

	% xsetroot_cust -bitmap ~/xbm/bricks.xbm


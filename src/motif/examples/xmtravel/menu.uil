! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
! @(#)$RCSfile: menu.uil,v $ $Revision: 1.1.2.2 $ (DEC) $Date: 1993/11/05 22:04:50 $
! 
! (c) Copyright 1989, 1990, 1991, 1992 OPEN SOFTWARE FOUNDATION, INC. 
! ALL RIGHTS RESERVED 

! Motif Release 1.2


module menu
	version = 'v1.0'
	names = case_sensitive

! These values correspond to definitions in xmtravel.h
! The values must match those in xmtravel.h

value
         menu_c_brief:      25;
         menu_c_business:   26;
         menu_c_detail:     27;
         menu_c_home:       28;
         menu_c_save:       29;
         menu_c_schedule:   30;
         menu_t_find:       31;


procedure
	file_switch_activate();
	file_exit_activate();
	client_select_activate();
	client_save_activate();
	client_delete_activate();
	schedule_trip_activate();
	help_on_context_activate();
	help_on_window_activate();
	help_on_version_activate();
	c_create_widgets (integer);
	t_create_widgets (integer);
	find_flights_activate();
	view_brief_changed();
	view_detail_changed();
	view_home_changed();
	view_business_changed();
	cancel_activate();
        client_bill_activate();
        client_check_iten_activate();
        file_close_activate();
        file_print_activate();
        file_save_as_activate();
        file_save_activate();
        file_open_activate();
        file_new_activate();
        help_tutorial_activate();
        help_on_index_activate();
        help_on_keys_activate();
        help_on_help_activate();
        option_print_activate();


object
    c_menubar: exported XmMenuBar {
	controls {
		XmCascadeButton 	c_file_choice;
                XmCascadeButton         c_view_choice;
                XmCascadeButton         c_option_choice;
                XmCascadeButton         c_client_choice;
                XmCascadeButton         c_reservations_choice;
		XmCascadeButton		c_help_choice;
	};
	arguments {
		XmNmenuHelpWidget = c_help_choice;
	};
    };


! The Style Guide states that if a button in the menu isn't used 
! it shouldn't be included... this is a demo and I ask the reader 
! of this code to suspend reality for a moment and imagine that 
! each of the buttons below has a specific use.
object
    c_file_choice: XmCascadeButton {
	arguments {
		XmNmarginWidth = 5;
	};
	controls {
		XmPulldownMenu {
			controls {
                            c_file_new: XmPushButton {
				arguments {
				};
				callbacks {
					XmNactivateCallback = 
					  procedure file_new_activate();
				};
                            };
                            c_file_open: XmPushButton {
				arguments {
				};
				callbacks {
					XmNactivateCallback = 
					  procedure file_open_activate();
				};
                            };
                            c_file_save: XmPushButton {
				arguments {
				};
				callbacks {
					XmNactivateCallback = 
					  procedure file_save_activate();
				};
                            };
                            c_file_save_as: XmPushButton {
				arguments {
				};
				callbacks {
					XmNactivateCallback = 
					  procedure file_save_as_activate();
				};
                            };
                            c_file_print: XmPushButton {
				arguments {
				};
				callbacks {
					XmNactivateCallback = 
					  procedure file_print_activate();
				};
                            };
                            c_file_close: XmPushButton {
				arguments {
				};
				callbacks {
					XmNactivateCallback = 
					  procedure file_close_activate();
				};
                            };
			    c_file_sep: XmSeparator {
			    };
			    c_file_exit: XmPushButton {
				arguments {
				};
				callbacks {
					XmNactivateCallback = 
				  	   procedure file_exit_activate();
				};
			    };
			};
		};
	};	
    };	


object
    c_view_choice: XmCascadeButton {
	arguments {
		XmNmarginWidth = 5;
	};
        controls {
                XmPulldownMenu {
                        controls {
                            c_view_data_format: XmCascadeButton {
				controls {
				    c_view_data_pulldown: XmPulldownMenu {
					controls {
					    c_data_brief: XmToggleButton {
						arguments {
						    XmNindicatorType = 
						      XmONE_OF_MANY;
						};
						callbacks {
        	        			    MrmNcreateCallback = 
				      procedure c_create_widgets(menu_c_brief);
		  				    XmNvalueChangedCallback = 
					  	procedure view_brief_changed();
						};
					    };
					    c_data_detailed: XmToggleButton {
						arguments {
						    XmNindicatorType = 
						      XmONE_OF_MANY;
						    XmNset = true;
						};
						callbacks {
        	        			    MrmNcreateCallback = 
				     procedure c_create_widgets(menu_c_detail);
		  				    XmNvalueChangedCallback = 
					       procedure view_detail_changed();
						};
				    	    };
					};
				    };
				};
                            };
                            c_view_address_type: XmCascadeButton {
				controls {
				    c_view_address_pulldown: XmPulldownMenu {
					controls {
					    c_address_home: XmToggleButton {
						arguments {
						    XmNindicatorType = 
						      XmONE_OF_MANY;
						    XmNset = true;
						};
						callbacks {
        	        			    MrmNcreateCallback = 
				       procedure c_create_widgets(menu_c_home);
		  				    XmNvalueChangedCallback = 
					  	 procedure view_home_changed();
						};
					    };
					    c_address_business:XmToggleButton {
						arguments {
						    XmNindicatorType = 
						      XmONE_OF_MANY;
						};
						callbacks {
        	        			    MrmNcreateCallback = 
				   procedure c_create_widgets(menu_c_business);
		  				    XmNvalueChangedCallback = 
					     procedure view_business_changed();
						};
				    	    };
					};
				    };
				};
                            };
			};
		};
	};
    };




object
    c_option_choice: XmCascadeButton {
	arguments {
		XmNmarginWidth = 5;
	};
	controls {
		XmPulldownMenu {
			controls {
                            c_option_print_setup: XmPushButton {
				arguments {
				};
				callbacks {
					XmNactivateCallback = 
					  procedure option_print_activate();
				};
                            };
			};
		};
	};	
    };	


object
    c_client_choice: XmCascadeButton {
	arguments {
		XmNmarginWidth = 5;
	};
        controls {
                XmPulldownMenu {
                        controls {
                            c_client_select: XmPushButton {
				callbacks {
					XmNactivateCallback = 
					  procedure client_select_activate();
				};
                            };
                            c_client_save: XmPushButton {
				callbacks {
                			MrmNcreateCallback = 
				       procedure c_create_widgets(menu_c_save);
					XmNactivateCallback = 
					  procedure client_save_activate();
				};
                            };
			    c_client_check_itinerary: XmPushButton {
				callbacks {
			               XmNactivateCallback = 
					procedure client_check_iten_activate();
				};
			    };
			    c_client_send_bill: XmPushButton {
				callbacks {
					XmNactivateCallback = 
					  procedure client_bill_activate();
				};
			    };
			    c_client_sep2: XmSeparator {
			    };
                            c_client_delete: XmPushButton {
				callbacks {
					XmNactivateCallback = 
					  procedure client_delete_activate();
				};
                            };
			};
		};
	};
    };


object
    c_reservations_choice: XmCascadeButton {
	arguments {
		XmNmarginWidth = 5;
	};
        controls {
                XmPulldownMenu {
                        controls {
                            c_reservations_schedule_trip: XmPushButton {
				callbacks {
                			MrmNcreateCallback = 
				   procedure c_create_widgets(menu_c_schedule);
					XmNactivateCallback = 
					  procedure schedule_trip_activate();
				};
                            };
			};
		};
	};
    };

object
    c_help_choice: XmCascadeButton {
	arguments {
		XmNmarginWidth = 5;
	};
	controls {
		XmPulldownMenu {
			controls {
			    c_help_on_context: XmPushButton {
	                        arguments {
	                        };
				callbacks {
					XmNactivateCallback =
					  procedure help_on_context_activate();
				};
			    };
			    c_help_on_help: XmPushButton {
				callbacks {
					XmNactivateCallback =
					  procedure help_on_help_activate();
				};
			    };
			    c_help_on_window: XmPushButton {
				callbacks {
					XmNactivateCallback = 
					  procedure help_on_window_activate();
				};
			    };
			    c_help_on_keys: XmPushButton {
				callbacks {
					XmNactivateCallback =
					  procedure help_on_keys_activate();
				};
			    };
			    c_help_index: XmPushButton {
				callbacks {
					XmNactivateCallback =
					  procedure help_on_index_activate();
				};
			    };
			    c_help_tutorial: XmPushButton {
				callbacks {
					XmNactivateCallback =
					  procedure help_tutorial_activate();
				};
			    };
			    c_help_on_version: XmPushButton {
				callbacks {
					XmNactivateCallback =
					  procedure help_on_version_activate();
				};
			    };
			};
		};
	};	
    };	

object
    t_menubar: exported XmMenuBar {
	controls {
		XmCascadeButton 	t_file_choice;
		XmCascadeButton		t_reservations_choice;
		XmCascadeButton		t_help_choice;
	};
	arguments {
		XmNmenuHelpWidget = t_help_choice;
	};
    };

object
    t_file_choice: XmCascadeButton {
	arguments {
		XmNmarginWidth = 5;
	};
	controls {
		XmPulldownMenu {
			controls {
			    t_file_close: XmPushButton {
				callbacks {
					XmNactivateCallback =
					  procedure cancel_activate();
				};
			    };
			    t_file_sep: XmSeparator {
			    };
			    t_file_exit: XmPushButton {
				callbacks {
					XmNactivateCallback = 
						procedure file_exit_activate();
				};
			    };
			};
		};
	};	
    };	

object
    t_reservations_choice: XmCascadeButton {
	arguments {
		XmNmarginWidth = 5;
	};
        controls {
                XmPulldownMenu {
                        controls {
                            t_reservations_find_flights: XmPushButton {
				callbacks {
               			MrmNcreateCallback = 
				       procedure t_create_widgets(menu_t_find);
					XmNactivateCallback = 
					  procedure find_flights_activate();
				};
                            };
                            t_reservations_schedule_next: XmPushButton {
                            };
			};
		};
	};
    };

object
    t_help_choice: XmCascadeButton {
	arguments {
		XmNmarginWidth = 5;
	};
	controls {
		XmPulldownMenu {
			controls {
			    t_help_on_context: XmPushButton {
				callbacks {
					XmNactivateCallback =
					  procedure help_on_context_activate();
				};
			    };
			    t_help_on_window: XmPushButton {
				callbacks {
					XmNactivateCallback = 
					  procedure help_on_window_activate();
				};
			    };
			};
		};
	};	
    };	

object
    name_popup: XmPopupMenu {
	controls {
		name_popup_label: XmLabel {
		};
		name_popup_sep: XmSeparator {
		};
		name_popup_retrieve: XmPushButton {
		};
		name_popup_schedule: XmPushButton {
		    callbacks {
			XmNactivateCallback = 
			  procedure schedule_trip_activate();
		    };
		};
		name_popup_check: XmPushButton {
		};
		name_popup_bill: XmPushButton {
		};
	};
    };

end module;














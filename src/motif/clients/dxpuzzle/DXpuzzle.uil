! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!++
!
!       P U Z Z L E . U I L
!             DECWindows Puzzle UIL Widgets
!
!----------------------------------------------------------------------
!
/*
  Copyright (c) Digital Equipment Corporation, 1987, 1988, 1989, 1990
  All Rights Reserved.  Unpublished rights reserved
  under the copyright laws of the United States.

  The software contained on this media is proprietary
  to and embodies the confidential technology of
  Digital Equipment Corporation.  Possession, use,
  duplication or dissemination of the software and
  media is authorized only pursuant to a valid written
  license from Digital Equipment Corporation.

  RESTRICTED RIGHTS LEGEND   Use, duplication, or
  disclosure by the U.S. Government is subject to
  restrictions as set forth in Subparagraph (c)(1)(ii)
  of DFARS 252.227-7013, or in FAR 52.227-19, as
  applicable.
*/
 
!
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! Facility:
!   DECWindows Puzzle
!
!   Facility:           DECW DECWindows Puzzle
!
!   Modification History:
!
!   Version 3.0
!       March - 1989	(NFF) V2.0 internationalization modifications
!	Nov.	1990	(ASP) V3.0 converting to Motif.
!       March - 1992    (SP)  V3.1 performance and more I18N modifications
!
!----------------------------------------------------------------------
!
! This file does NOT contain any tranlslatable strings.
!

module Puzzle
	version = 'V3.1'
	names = case_sensitive

objects = { XmSeparator = gadget; XmPushButton = gadget; XmLabel = gadget;
	    XmCascadeButton = gadget;
	  }

include file	'puzzle_def.uil';
include file	'puzzle_defhlp.uil';
include file	'XmAppl.uil';


value DXmNdelayPopupMenuRealization :
	argument ('DXmdelayPopupMenuRealization', boolean);

procedure
	create_level_proc ();
	create_work_proc ();
	exit_proc ();
	help_done_proc ();
	main_help_proc (compound_string);
	message_done_proc ();
	new_game_proc ();
	on_context_activate_proc ();
	restore_settings_proc ();
	save_settings_proc ();
	settings_cancel_proc ();
	settings_ok_proc ();
	settings_proc ();

object
    puzzle_main_window : XmMainWindow {
	arguments {
	    XmNwidth = 200;
	    XmNheight = 200;
	};         
	controls {
	    XmBulletinBoard workarea;
    	    XmMenuBar 	puzzle_menu_bar;
        };
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_S_MAIN_WINDOW);
	};
    };


    workarea : XmBulletinBoard {
    	arguments {
        };
	callbacks {
	    MrmNcreateCallback = procedure create_work_proc ();
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_WORKAREA);
	};
    };
    

    puzzle_menu_bar : XmMenuBar {
	arguments {
	    XmNorientation = XmHORIZONTAL;
	    XmNmenuHelpWidget = XmCascadeButton help_pulldown;
	};
	controls {
	    XmCascadeButton file;
	    XmCascadeButton options;
	    XmCascadeButton help_pulldown;
	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_S_MENU_BAR);
	};
    };


    file : XmCascadeButton {
	arguments {
	    XmNlabelString = PUZZLE_FILE_L;
	    XmNmnemonic = FileMnemonic;
    	};
	controls {
	    XmPulldownMenu file_menu;
    	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_FILE);
	};
    };

    file_menu : XmPulldownMenu {
	arguments {
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {
	    XmPushButton new_game;
	    XmPushButton exit;
	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_FILE_MENU);
	};
    };

    new_game : XmPushButton {
	arguments {
	    XmNlabelString = PUZZLE_NEW_GAME_L;
	    XmNmnemonic = NewGameMnemonic;
	    XmNaccelerator = FileNewGameAccel;
	    XmNacceleratorText = FileNewGameAtext;
    	};
	callbacks {
	    XmNactivateCallback = procedure new_game_proc ();
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_NEW_GAME);
	};
    };

    exit : XmPushButton {
	arguments {
       	    XmNlabelString = PUZZLE_EXIT_L;
	    XmNmnemonic = QuitMnemonic;
	    XmNaccelerator = FileQuitAccel;
	    XmNacceleratorText = FileQuitAtext;
    	};
	callbacks {
	    XmNactivateCallback = procedure exit_proc ();
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_EXIT);
	};
    };	


    options : XmCascadeButton {
	arguments {
	    XmNlabelString = PUZZLE_CUSTOMIZE_L;
	    XmNmnemonic = CustomizeMnemonic;
    	};
	controls {
	    XmPulldownMenu opt_menu;
    	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_OPTIONS);
	};
    };

    opt_menu : XmPulldownMenu {
	arguments {
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {
	    XmPushButton settings;
	    XmSeparator sep_gadget;
	    XmPushButton save_settings;
	    XmPushButton restore_settings;
	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_OPT_MENU);
	};
    };

    sep_gadget : XmSeparator {
    };

    settings : XmPushButton {
	arguments {
       	    XmNlabelString = PUZZLE_SETTINGS_L;
	    XmNmnemonic = SettingsMnemonic;
	    XmNaccelerator = CustSettingsAccel;
	    XmNacceleratorText = CustSettingsAtext;
    	};
	callbacks {
	    XmNactivateCallback = procedure settings_proc ();
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_SETTINGS);
	};
    };

    save_settings : XmPushButton {
	arguments {
       	    XmNlabelString = PUZZLE_SAVE_SETTINGS_L;
	    XmNmnemonic = SaveSettingsMnemonic;
	    XmNaccelerator = CustSaveSettingsAccel;
	    XmNacceleratorText = CustSaveSettingsAtext;
    	};
	callbacks {
	    XmNactivateCallback = procedure save_settings_proc ();
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_SAVE_SETTINGS);
	};
    };

    restore_settings : XmPushButton {
	arguments {
       	    XmNlabelString = PUZZLE_RESTORE_SETTINGS_L;
	    XmNmnemonic = UseSystemDefaultsMnemonic;
	    XmNaccelerator = CustUseSystemDefaultsAccel;
	    XmNacceleratorText = CustUseSystemDefaultsAtext;
    	};
	callbacks {
	    XmNactivateCallback = procedure restore_settings_proc ();
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_RESTORE_SETTINGS);
	};
    };

    help_pulldown : XmCascadeButton {
        arguments {
            XmNlabelString = PUZZLE_HELP_L;
	    XmNmnemonic = HelpMnemonic;
        };
        controls {
            XmPulldownMenu help_menu;
        };
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_HELP_PULLDOWN);
	};
    };

    help_menu : XmPulldownMenu {
	arguments {
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {
	    XmPushButton help_but_on_context;
	    XmSeparator sep_gadget;
	    XmPushButton help_but;
	    XmPushButton help_but_on_help;
	    XmPushButton help_about_but;
	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_HELP_MENU);
	};
    };

    help_but_on_context : XmPushButton {
	arguments {
       	    XmNlabelString = PUZZLE_HELP_BUT_ON_CONTEXT_L;
	    XmNmnemonic = OnContextMnemonic;
!	    XmNsensitive = false;
!	    XmNaccelerator = HelpOnContextAccel;
!	    XmNacceleratorText = HelpOnContextAtext;
    	};
	callbacks {
	    XmNactivateCallback = procedure on_context_activate_proc ();
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_HELP_MENU_ONCONTEXT);
	};
    };
                                    
    help_but : XmPushButton {
	arguments {
       	    XmNlabelString = PUZZLE_HELP_BUT_L;
	    XmNmnemonic = OnWindowMnemonic;
!	    XmNaccelerator = HelpOnWindowAccel;
!	    XmNacceleratorText = HelpOnWindowAtext;
    	};
	callbacks {
	    XmNactivateCallback = procedure main_help_proc (PUZZLE_HLP_OVERVIEW);
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_HELP_MENU_ONWINDOW);
	};
    };
                                    
    help_but_on_help : XmPushButton {
	arguments {
       	    XmNlabelString = PUZZLE_HELP_BUT_ON_HELP_L;
	    XmNmnemonic = OnHelpMnemonic;
    	};
	callbacks {
	    XmNactivateCallback = procedure main_help_proc (PUZZLE_HLP_ON_HELP);
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_HELP_MENU_ONHELP);
	};
    };
                                    
    help_about_but : XmPushButton {
	arguments {
       	    XmNlabelString = PUZZLE_HELP_ABOUT_BUT_L;
	    XmNmnemonic = OnVersionMnemonic;
    	};
	callbacks {
	    XmNactivateCallback = procedure main_help_proc (PUZZLE_HLP_ABOUT);
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_HELP_MENU_ONVERSION);
	};
    };

    opt_popup_menu : XmPopupMenu {
	arguments {
    	};
	controls {
	    XmPushButton new_game;
	    XmPushButton settings;
	    XmPushButton exit;
	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_OPT_POPUP_MENU);
	};
    };


    settings_dialog_box : XmBulletinBoardDialog {
	arguments {
	    XmNdialogStyle = XmDIALOG_MODELESS;
	    XmNdefaultButton = XmPushButton ok_button;
	    XmNcancelButton = XmPushButton set_cancel_button;
	    XmNdialogTitle = PUZZLE_SETTINGS_DIALOG_BOX_T;
	    XmNnoResize = true;
	    XmNdefaultPosition = true;
	    XmNmarginWidth = 5;
	    XmNmarginHeight = 5;
!*jv - not supported for MOTIF	    take_focus = false;
	};
	controls {
	    XmScale game_level;
	    
	    XmPushButton ok_button;
	    XmPushButton set_cancel_button;
	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_SETTINGS_DIALOG_BOX);
	};
    };	
                       
    game_level : XmScale {
	arguments {
	    XmNtitleString = PUZZLE_GAME_LEVEL_T;
!*jv - inserted
	    XmNshowValue = true;
	    XmNorientation = XmHORIZONTAL;
	    XmNprocessingDirection = XmMAX_ON_RIGHT;
!*jv - end inserted
	    XmNx = PUZZLE_GAME_LEVEL_X;
	    XmNy = PUZZLE_GAME_LEVEL_Y;
	    XmNminimum = PUZZLE_GAME_LEVEL_MIN_VALUE;
	    XmNmaximum = PUZZLE_GAME_LEVEL_MAX_VALUE;
!*jv - following line was commented out in the original - causes a warning
! now (default value 0 is less than min value of 3) so I uncommented it.
!	    XmNvalue = PUZZLE_GAME_LEVEL_SCALE_VALUE;
	};
	callbacks {
	    MrmNcreateCallback = procedure create_level_proc ();
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_GAME_LEVEL);
	};
    };

    ok_button : XmPushButton {
	arguments {   
	    XmNlabelString = PUZZLE_OK_BUTTON_L;
	    XmNx = PUZZLE_OK_BUTTON_X;
	    XmNy = PUZZLE_OK_BUTTON_Y;
	};
	callbacks {
	    XmNactivateCallback = procedure settings_ok_proc ();
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_OK_BUTTON);
	};
    };

    set_cancel_button : XmPushButton {
	arguments {
	    XmNlabelString = PUZZLE_SET_CANCEL_BUTTON_L;
	    XmNx = PUZZLE_SET_CANCEL_BUTTON_X;
	    XmNy = PUZZLE_SET_CANCEL_BUTTON_Y;
	};
	callbacks {
	    XmNactivateCallback = procedure settings_cancel_proc ();
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_SET_CANCEL_BUTTON);
	};
    };

    message : XmInformationDialog {
	arguments {
	    XmNdialogTitle = PUZZLE_MESSAGE_T;
	    XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	    XmNmessageString = PUZZLE_MESSAGE_L;
	    XmNmessageAlignment = XmALIGNMENT_CENTER;
	    XmNdefaultPosition = true;
	    XmNnoResize = true;
	};                    
	callbacks {
	    XmNokCallback = procedure message_done_proc ();
	    XmNhelpCallback = procedure main_help_proc (PUZZLE_HLP_MESSAGE);
	};
    };	

    main_help : DXmHelpDialog {
	arguments {
	    DXmNapplicationName = HELP_PUZZLE_APPLICATION_NAME;
	    DXmNdefaultPosition = true;
	    DXmNfirstTopic = 'Overview';
	    DXmNlibraryType = DXmTextLibrary;
	    DXmNoverviewTopic = 'Overview';
	};
	callbacks {
	    XmNunmapCallback = procedure help_done_proc ();
	};
    };

end module;

! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
!++
! COPYRIGHT (c) 1991 BY
! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.
! ALL RIGHTS RESERVED.
!
! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
! ONLY  IN  ACCORDANCE  OF  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE
! INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER
! COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
! OTHER PERSON.  NO TITLE TO AND  OWNERSHIP OF THE  SOFTWARE IS  HEREBY
! TRANSFERRED.
!
! THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE
! AND  SHOULD  NOT  BE  CONSTRUED  AS A COMMITMENT BY DIGITAL EQUIPMENT
! CORPORATION.
!
! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS
! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
!--

!++
!
! Facility:
!   LinkWorks Manager
!
! Abstract:
!   Customize boxes for LinkWorks Manager
!
! Author:
!   Andre Pavanello
!   Pascale Dardailler
!
! Creation Date:  22-Mar-90
!
! Modification History:
!--


!+
!   Add registry value *** Temporary ***
!-

value

    CustOperation1	    : exported "View";
    CustOperation2	    : exported "Edit";
    CustOperation3	    : exported "Activate";

!+
!   Define margins and offset values
!-

value

    CustEnvMaxButtonWidth   : 60;   ! Max width of Ok, Cancel and Help labels
    CustEnvCancelBLeftPos   : 39;
    CustEnvHelpBLeftPos	    : 70;
    CustEnvLeftOffset	    : 10;

!+
!   Translatable strings used in the customize dialog box
!-

value

    CustomizeEnvironmentTitle	: compound_string(ApplicationNameBase & "Environment Options");

    CustEnvHighlLabel		: compound_string("Highlight Defaults");
    CustEnvHighlightLabel	: compound_string("Highlight");
    CustEnvHighlSourcesLabel	: compound_string("Sources");
    CustEnvHighlTargetsLabel	: compound_string("Targets");
    CustEnvHighlOrphansLabel	: compound_string("Orphans");
    CustEnvHighlPenSourceLabel	: compound_string("Pending Source");
    CustEnvHighlPenTargetLabel	: compound_string("Pending Target");
    CustEnvHighlNavDestLabel	: compound_string("Navigation Destination");

    CustEnvLinkLabel		: compound_string("Link Defaults");
    CustEnvDefRelationLabel	: compound_string("Relationship");
    CustEnvRetainSourceLabel	: compound_string("Retain Source");

    CustEnvFollowLabel		: compound_string("Go To / Visit  Defaults");
    CustEnvDefOperationLabel	: compound_string("Destination Operation");
    CustEnvOptDefButtonLabel	: compound_string("Default");
    CustEnvOptButton1Label	: compound_string("View");
    CustEnvOptButton2Label	: compound_string("Edit");
    CustEnvOptButton3Label	: compound_string("Activate");
    CustEnvSelectDstLabel	: compound_string("Select Destination");
    
    CustEnvOkLabel		: compound_string("OK");
    CustEnvCancelLabel		: compound_string("Cancel");
    CustEnvHelpLabel		: compound_string("Help");

    CustomizeEnvManagerTitle	: compound_string(ApplicationNameBase & "Manager Options");
    CustMgrStateLabel		: compound_string("Startup State");
    CustMgrWindowStateLabel	: compound_string("Window");
    CustMgrIconStateLabel	: compound_string("Icon");
	    
!+
!   Callbacks
!-

procedure

    cust_env_activate_ok(any);
    cust_env_activate_cancel(any);

    cust_env_create_highl(any);
    cust_env_create_highl_sources(any);
    cust_env_create_highl_targets(any);
    cust_env_create_highl_orphans(any);
    cust_env_create_pen_src(any);
    cust_env_create_pen_target(any);
    cust_env_create_nav_dest(any);
    cust_env_create_relation(any);
    cust_env_create_ret_source(any);
    cust_env_create_oper_option(any);
    cust_env_create_opt_def_button(any);
    cust_env_create_opt_1_button(any);
    cust_env_create_opt_2_button(any);
    cust_env_create_opt_3_button(any);
    cust_env_create_selec_dst(any);               
    cust_env_create_ok(any);
    
    cust_env_value_changed_fields(any);

    cust_mgr_activate_ok(any);
    cust_mgr_activate_cancel(any);
    cust_mgr_create_window_state(any);
    cust_mgr_create_icon_state(any);
    cust_mgr_create_ok(any);


!+
! Customize general dialog box
!-

object
     customize_environment_box : XmFormDialog {
	arguments {
	    XmNdialogTitle		= CustomizeEnvironmentTitle;
	    XmNdefaultButton		= XmPushButton cust_env_ok_button;
	    XmNcancelButton		= XmPushButton cust_env_cancel_button;
	    XmNallowOverlap		= false;
	    XmNdialogStyle		= XmDIALOG_MODELESS;
	    XmNnoResize			= true;
	    XmNautoUnmanage		= false;
	};
	controls {
	XmScrolledWindow customize_env_scrolled_window;
	};
	callbacks {                                   
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvHelpKey);
	};        
    };
    
object customize_env_scrolled_window : XmScrolledWindow {
    arguments {
	XmNscrollBarDisplayPolicy = XmAS_NEEDED;
	XmNscrollingPolicy = XmAUTOMATIC;
	XmNscrolledWindowMarginHeight = 0;    
	XmNscrolledWindowMarginWidth = 0;    
	XmNspacing = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_FORM;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNworkWindow = XmForm scroll_form;
    };
    controls {
	XmForm scroll_form;
    };
};

object scroll_form : XmForm {
    arguments {
	XmNmarginHeight = EnvDefaultMarginHeight;
	XmNmarginWidth = EnvDefaultMarginWidth;
	XmNhorizontalSpacing = EnvDefaultDialogBorder;
	XmNverticalSpacing = EnvDefaultDialogBorder;
	XmNallowOverlap = false;
	XmNdefaultPosition = true;
	XmNresizePolicy = XmRESIZE_GROW;
	XmNdefaultButton = XmPushButton cust_env_ok_button;
	XmNcancelButton = XmPushButton cust_env_cancel_button;
    };
    controls {
	XmForm cust_env_contents;
	XmPushButton cust_env_ok_button;
	XmPushButton cust_env_cancel_button;
	XmPushButton cust_env_help_button;	    
    };
    callbacks {                                   
	XmNhelpCallback = procedure env_context_sensitive_help(CustEnvHelpKey);
    };        
};

object
    cust_env_contents : XmForm {
	arguments {
	    XmNverticalSpacing	= EnvDefaultMarginBetweenForms;
!	    XmNtopAttachment	= XmATTACH_FORM;
	    XmNtopAttachment    = XmATTACH_POSITION;
	    XmNtopPosition	= 0;
       	    XmNleftAttachment	= XmATTACH_FORM;
	    XmNrightAttachment	= XmATTACH_FORM;
	};
	
	controls {
	    XmForm	    cust_env_highl_controls;
	    XmForm	    cust_env_link_controls;
	    XmForm	    cust_env_follow_controls;
	};

	callbacks {                                   
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvHelpKey);
	};        
    };
    
object cust_env_highl_controls : XmForm {
	arguments {
	    XmNtopAttachment	    = XmATTACH_FORM;
       	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNrightAttachment	    = XmATTACH_FORM;
	    XmNshadowType	    = EnvDefaultShadowType;
	    XmNshadowThickness	    = EnvDefaultShadowThickness;
	    XmNhorizontalSpacing    = EnvDefaultMarginWidth;
	    XmNverticalSpacing	    = EnvDefaultMarginHeight;
	};
	controls {
	    XmLabel	     cust_env_highl_label;
	    XmToggleButton   cust_env_highl_toggle;
	    XmSeparator	     cust_env_highl_separator;
	    XmRowColumn	     cust_env_highl_rowcolumn;
	};
    };

object
    cust_env_link_controls : XmForm {
	arguments {
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNtopWidget	    = XmForm cust_env_highl_controls;
	    XmNrightAttachment	    = XmATTACH_FORM;
	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNshadowType	    = EnvDefaultShadowType;
	    XmNshadowThickness	    = EnvDefaultShadowThickness;
	    XmNhorizontalSpacing    = EnvDefaultMarginWidth;
	    XmNverticalSpacing	    = EnvDefaultMarginHeight;
	};
	controls {
	    XmLabel		cust_env_link_label;
	    XmToggleButton	cust_env_retain_source_toggle;
	    XmLabel		cust_env_relation_label;
	    DXmCSText		cust_env_relation_text;
	};
    };

                  
object
    cust_env_follow_controls : XmForm {
	arguments {
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNtopWidget	    = XmForm cust_env_link_controls;
	    XmNrightAttachment	    = XmATTACH_FORM;
	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNshadowType	    = EnvDefaultShadowType;
	    XmNshadowThickness	    = EnvDefaultShadowThickness;
	    XmNhorizontalSpacing    = EnvDefaultMarginWidth;
	    XmNverticalSpacing	    = EnvDefaultMarginHeight;
	};
	controls {
	    XmLabel		cust_env_follow_label;
	    XmToggleButton	cust_env_selec_dst_toggle;
	    XmOptionMenu	cust_env_operation_option;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvFollowHelpKey);
	};
    };



object
    cust_env_highl_label : XmLabel {
	arguments {
	    XmNlabelString	    = CustEnvHighlLabel;
	    XmNtopAttachment	    = XmATTACH_FORM;
	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNrightAttachment	    = XmATTACH_FORM;
	    XmNalignment	    = XmALIGNMENT_BEGINNING;
	};

	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvHighlightHelpKey);
	};
    };

object
    cust_env_highl_toggle : XmToggleButton {
	arguments {
	    XmNlabelString	    = CustEnvHighlightLabel;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNtopWidget	    = XmLabel cust_env_highl_label;
	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNleftOffset	    = CustEnvLeftOffset;
	    XmNrightAttachment	    = XmATTACH_FORM;
	    XmNalignment	    = XmALIGNMENT_BEGINNING;
	    XmNset		    = true;
	    XmNtraversalOn	    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvHighlightHelpKey);
	    MrmNcreateCallback = procedure cust_env_create_highl(windowprivate);
	};
    };

object
    cust_env_highl_separator : XmSeparator {
	arguments {
	    XmNorientation	    = XmHORIZONTAL;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNtopWidget	    = XmToggleButton	cust_env_highl_toggle;
	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNrightAttachment	    = XmATTACH_FORM;
	};
    };
    
object cust_env_highl_rowcolumn : XmRowColumn {
	arguments {
	    XmNleftAttachment	= XmATTACH_FORM;
	    XmNleftOffset	= CustEnvLeftOffset;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopOffset	= 0;
	    XmNtopWidget	= XmSeparator cust_env_highl_separator;
	    XmNbottomAttachment = XmATTACH_FORM;
	    XmNrightAttachment	= XmATTACH_FORM;
	    XmNpacking		= XmPACK_COLUMN;
	    XmNnumColumns	= 2;
	    XmNspacing		= 2;
	    XmNorientation	= XmVERTICAL;
	};
	controls {
	    XmToggleButton   cust_env_highl_sources_toggle;
	    XmToggleButton   cust_env_highl_targets_toggle;
	    XmToggleButton   cust_env_highl_orphans_toggle;
	    XmToggleButton   cust_env_highl_cur_sour_toggle;
	    XmToggleButton   cust_env_highl_cur_targ_toggle;
	    XmToggleButton   cust_env_highl_cur_dest_toggle;
        };
    };

object
    cust_env_highl_sources_toggle : XmToggleButton {
	arguments {
	    XmNlabelString	    = CustEnvHighlSourcesLabel;
	    XmNset		    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvHighlightHelpKey);
	    MrmNcreateCallback = procedure cust_env_create_highl_sources(windowprivate);
	};
    };

object
    cust_env_highl_targets_toggle : XmToggleButton {
	arguments {
	    XmNlabelString	    = CustEnvHighlTargetsLabel;
	    XmNset		    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvHighlightHelpKey);
	    MrmNcreateCallback = procedure cust_env_create_highl_targets(windowprivate);
	};
    };

object
    cust_env_highl_orphans_toggle : XmToggleButton {
	arguments {
	    XmNlabelString	    = CustEnvHighlOrphansLabel;
	    XmNset		    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvHighlightHelpKey);
	    MrmNcreateCallback = procedure cust_env_create_highl_orphans(windowprivate);
	};
    };

object
    cust_env_highl_cur_sour_toggle : XmToggleButton {
	arguments {
	    XmNlabelString	    = CustEnvHighlPenSourceLabel;
	    XmNset		    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvHighlightHelpKey);
	    MrmNcreateCallback = procedure cust_env_create_pen_src(windowprivate);
	};
    };

object
    cust_env_highl_cur_targ_toggle : XmToggleButton {
	arguments {
	    XmNlabelString	    = CustEnvHighlPenTargetLabel;
	    XmNset		    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvHighlightHelpKey);
	    MrmNcreateCallback = procedure cust_env_create_pen_target(windowprivate);
	};
    };

object
    cust_env_highl_cur_dest_toggle : XmToggleButton {
	arguments {
	    XmNlabelString	    = CustEnvHighlNavDestLabel;
	    XmNset		    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvHighlightHelpKey);
	    MrmNcreateCallback = procedure cust_env_create_nav_dest(windowprivate);
	};
    };


object
    cust_env_link_label : XmLabel {
	arguments {
	    XmNlabelString	    = CustEnvLinkLabel;
	    XmNtopAttachment	    = XmATTACH_FORM;
	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNrightAttachment	    = XmATTACH_FORM;
	    XmNalignment	    = XmALIGNMENT_BEGINNING;
	};

	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvLinkHelpKey);
	};
    };
                    
object
    cust_env_retain_source_toggle : XmToggleButton {
	arguments {
	    XmNlabelString	    = CustEnvRetainSourceLabel;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNtopWidget	    = XmLabel cust_env_link_label;
    	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNleftOffset	    = CustEnvLeftOffset;
	    XmNrightAttachment	    = XmATTACH_FORM;
	    XmNalignment	    = XmALIGNMENT_BEGINNING;
	    XmNset		    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvLinkHelpKey);
	    MrmNcreateCallback = procedure cust_env_create_ret_source(windowprivate);
	};
    };

object
    cust_env_relation_label : XmLabel {
	arguments {
	    XmNlabelString	    = CustEnvDefRelationLabel;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNtopWidget	    = XmToggleButton cust_env_retain_source_toggle;
    	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNleftOffset	    = CustEnvLeftOffset;
	    XmNbottomAttachment	    = XmATTACH_FORM;
	};

	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvLinkHelpKey);
	};
    };
                  
object 
    cust_env_relation_text : DXmCSText
 {
	arguments {
	    XmNeditable		    = true;
	    XmNcursorPositionVisible = true;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNtopWidget	    = XmToggleButton cust_env_retain_source_toggle;
	    XmNleftAttachment	    = XmATTACH_WIDGET;
	    XmNleftWidget	    = XmLabel cust_env_relation_label;
	    XmNbottomAttachment	    = XmATTACH_FORM;
	    XmNrightAttachment	    = XmATTACH_FORM;
	    XmNtraversalOn	    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};

	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvLinkHelpKey);
	    XmNvalueChangedCallback = procedure cust_env_value_changed_fields(windowprivate);
	    MrmNcreateCallback = procedure cust_env_create_relation(windowprivate);
	};
    };


object
    cust_env_follow_label : XmLabel {
	arguments {
	    XmNlabelString	    = CustEnvFollowLabel;
	    XmNtopAttachment	    = XmATTACH_FORM;
	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNrightAttachment	    = XmATTACH_FORM;
	    XmNalignment	    = XmALIGNMENT_BEGINNING;
	};

	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvFollowHelpKey);
	};
    };


object
    cust_env_selec_dst_toggle : XmToggleButton {
	arguments {
	    XmNlabelString	    = CustEnvSelectDstLabel;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
            XmNtopWidget	    = XmLabel cust_env_follow_label;
	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNleftOffset	    = CustEnvLeftOffset;
	    XmNrightAttachment	    = XmATTACH_FORM;
	    XmNalignment	    = XmALIGNMENT_BEGINNING;
	    XmNset		    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvFollowHelpKey);
	    MrmNcreateCallback = procedure cust_env_create_selec_dst(windowprivate);
	};
    };

object
    cust_env_operation_option : XmOptionMenu {
	arguments {
	    XmNlabelString	    = CustEnvDefOperationLabel;
	    XmNmenuHistory	    = XmPushButton cust_env_opt_default_button;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNtopWidget	    = XmToggleButton cust_env_selec_dst_toggle;
	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNleftOffset	    = CustEnvLeftOffset;
	    XmNrightAttachment	    = XmATTACH_FORM;
	    XmNbottomAttachment	    = XmATTACH_FORM;
	};

	controls {
	    XmPulldownMenu cust_env_operation_menu;
	};

	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvFollowHelpKey);
	    MrmNcreateCallback = procedure cust_env_create_oper_option(windowprivate);
	};
    };

object
    cust_env_operation_menu : XmPulldownMenu {
	arguments {
	    XmNmenuHistory	    = XmPushButton cust_env_opt_default_button;
	};

	controls {
	    XmPushButton     cust_env_opt_default_button;
	    XmPushButton     cust_env_opt_1_button;
	    XmPushButton     cust_env_opt_2_button;
	    XmPushButton     cust_env_opt_3_button;
	};

	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvFollowHelpKey);
	};
    };

object
    cust_env_opt_default_button : XmPushButton {
	arguments {
	    XmNlabelString	    = CustEnvOptDefButtonLabel;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};

	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvFollowHelpKey);
	    MrmNcreateCallback = procedure cust_env_create_opt_def_button(windowprivate);
	};
    };

object
    cust_env_opt_1_button : XmPushButton {
	arguments {
	    XmNlabelString	    = CustEnvOptButton1Label;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};

	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvFollowHelpKey);
	    MrmNcreateCallback = procedure cust_env_create_opt_1_button(windowprivate);
	};
    };

object
    cust_env_opt_2_button : XmPushButton {
	arguments {
	    XmNlabelString	    = CustEnvOptButton2Label;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};

	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvFollowHelpKey);
	    MrmNcreateCallback = procedure cust_env_create_opt_2_button(windowprivate);
	};
    };

object
    cust_env_opt_3_button : XmPushButton {
	arguments {
	    XmNlabelString	    = CustEnvOptButton3Label;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};

	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustEnvFollowHelpKey);
	    MrmNcreateCallback = procedure cust_env_create_opt_3_button(windowprivate);
	};
    };


object 
    cust_env_ok_button : XmPushButton {
	arguments {
	    XmNlabelString	    = CustEnvOkLabel;
	    XmNwidth		    = CustEnvMaxButtonWidth;
	    XmNrecomputeSize	    = false;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNtopWidget	    = XmForm cust_env_contents;
	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNbottomAttachment	    = XmATTACH_FORM;
	    XmNdefaultButtonShadowThickness = EnvDefaultPBShadow;
	};
	callbacks {
	    MrmNcreateCallback = procedure cust_env_create_ok(windowprivate);
	    XmNhelpCallback = procedure env_context_sensitive_help(CustOkButtonHelpKey);
            XmNactivateCallback = procedure cust_env_activate_ok(windowprivate);
	};
    };

object 
    cust_env_cancel_button : XmPushButton {
	arguments {
	    XmNlabelString	    = CustEnvCancelLabel;
	    XmNwidth		    = CustEnvMaxButtonWidth;
	    XmNrecomputeSize	    = false;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNtopWidget	    = XmForm cust_env_contents;
	    XmNleftAttachment	    = XmATTACH_POSITION;
	    XmNleftPosition	    = CustEnvCancelBLeftPos;
	    XmNdefaultButtonShadowThickness = EnvDefaultPBShadow;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustCancelButtonHelpKey);
            XmNactivateCallback = procedure cust_env_activate_cancel(windowprivate);
	};
    };

object 
    cust_env_help_button : XmPushButton {
	arguments {
	    XmNlabelString	    = CustEnvHelpLabel;
	    XmNwidth		    = CustEnvMaxButtonWidth;
	    XmNrecomputeSize	    = false;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNtopWidget	    = XmForm cust_env_contents;
	    XmNrightAttachment	    = XmATTACH_FORM;
	    XmNdefaultButtonShadowThickness = EnvDefaultPBShadow;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustHelpButtonHelpKey);
            XmNactivateCallback = procedure env_context_sensitive_help(CustEnvHelpKey);
	};
    };


!+
! Customize LinkWorks Manager dialog box
!-

object
    customize_env_manager_box : XmFormDialog {
	arguments {
	    XmNdialogTitle		= CustomizeEnvManagerTitle;
	    XmNdialogStyle		= XmDIALOG_MODELESS;
	    XmNhorizontalSpacing	= EnvDefaultDialogBorder;
	    XmNverticalSpacing		= EnvDefaultDialogBorder;
	    XmNnoResize			= true;
	    XmNdefaultPosition		= true;
	    XmNautoUnmanage		= false;
	    XmNdefaultButton		= XmPushButton cust_mgr_ok_button;
	};
	controls {
	    XmForm	    cust_mgr_contents;
	    XmPushButton    cust_mgr_ok_button;
	    XmPushButton    cust_mgr_cancel_button;
	    XmPushButton    cust_mgr_help_button;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustMgrHelpKey);
	};
    };
	                            
object
     cust_mgr_contents : XmForm {
	arguments {
	    XmNshadowType		= EnvDefaultShadowType;
	    XmNshadowThickness		= EnvDefaultShadowThickness;
	    XmNhorizontalSpacing	= EnvDefaultMarginWidth;
	    XmNverticalSpacing		= EnvDefaultMarginHeight;
	    XmNtopAttachment		= XmATTACH_FORM;
	    XmNrightAttachment		= XmATTACH_FORM;
	    XmNleftAttachment		= XmATTACH_FORM;
	};
	controls {
	    XmLabel	    cust_mgr_state_label;
	    XmRadioBox	    cust_mgr_icon_radio;
	};                        
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustMgrHelpKey);
	};
    };


object
    cust_mgr_state_label : XmLabel {
	arguments {
	    XmNlabelString	    = CustMgrStateLabel;
	    XmNtopAttachment	    = XmATTACH_FORM;
	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNrightAttachment	    = XmATTACH_FORM;
	    XmNalignment	    = XmALIGNMENT_BEGINNING;
	};
                                              
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustMgrHelpKey);
	};
    };

object
    cust_mgr_icon_radio : XmRadioBox {
        arguments {
            XmNtopAttachment      = XmATTACH_WIDGET;
	    XmNtopWidget	  = XmLabel cust_mgr_state_label;
	    XmNleftAttachment	  = XmATTACH_FORM;
	    XmNleftOffset	  = CustEnvLeftOffset;
	    XmNbottomAttachment	  = XmATTACH_FORM;
	    XmNrightAttachment	  = XmATTACH_FORM;
            XmNradioBehavior      = true;
            XmNradioAlwaysOne     = true;
	    XmNspacing		  = EnvDefaultMarginWidth;
	    XmNorientation	  = XmHORIZONTAL;
	    XmNisHomogeneous	  = false; !use toggle widgets not gadgets
        };

        controls {
            XmToggleButton cust_mgr_window_state_toggle;
            XmToggleButton cust_mgr_icon_state_toggle;
        };

        callbacks {
            XmNhelpCallback  = procedure env_context_sensitive_help(CustMgrHelpKey);
        } ;
    };

object
    cust_mgr_window_state_toggle : XmToggleButton {
	arguments {
	    XmNlabelString	    = CustMgrWindowStateLabel;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustMgrHelpKey);
	    MrmNcreateCallback = procedure cust_mgr_create_window_state(windowprivate);
	};
    };

object
    cust_mgr_icon_state_toggle : XmToggleButton {
	arguments {
	    XmNlabelString	    = CustMgrIconStateLabel;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustMgrHelpKey);
	    MrmNcreateCallback = procedure cust_mgr_create_icon_state(windowprivate);
	};
    };


object 
    cust_mgr_ok_button : XmPushButton {
	arguments {
	    XmNlabelString	    = CustEnvOkLabel;
	    XmNwidth		    = CustEnvMaxButtonWidth;
	    XmNrecomputeSize	    = false;
            XmNtopAttachment        = XmATTACH_WIDGET;
	    XmNtopWidget	    = XmForm cust_mgr_contents;
	    XmNleftAttachment	    = XmATTACH_FORM;
	    XmNbottomAttachment	    = XmATTACH_FORM;
	    XmNdefaultButtonShadowThickness = EnvDefaultPBShadow;
	};
	callbacks {
	    MrmNcreateCallback = procedure cust_mgr_create_ok(windowprivate);
	    XmNhelpCallback = procedure env_context_sensitive_help(CustOkButtonHelpKey);
            XmNactivateCallback = procedure cust_mgr_activate_ok(windowprivate);
	};
    };

object 
    cust_mgr_cancel_button : XmPushButton {
	arguments {
	    XmNlabelString	    = CustEnvCancelLabel;
	    XmNwidth		    = CustEnvMaxButtonWidth;
	    XmNrecomputeSize	    = false;
            XmNtopAttachment        = XmATTACH_WIDGET;
	    XmNtopWidget	    = XmForm cust_mgr_contents;
	    XmNleftAttachment	    = XmATTACH_POSITION;
	    XmNleftPosition	    = CustEnvCancelBLeftPos;
	    XmNbottomAttachment	    = XmATTACH_FORM;
	    XmNdefaultButtonShadowThickness = EnvDefaultPBShadow;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustCancelButtonHelpKey);
            XmNactivateCallback = procedure cust_mgr_activate_cancel(windowprivate);
	};
    };

object 
    cust_mgr_help_button : XmPushButton {
	arguments {
	    XmNlabelString	    = CustEnvHelpLabel;
	    XmNwidth		    = CustEnvMaxButtonWidth;
	    XmNrecomputeSize	    = false;
            XmNtopAttachment        = XmATTACH_WIDGET;
	    XmNtopWidget	    = XmForm cust_mgr_contents;
	    XmNrightAttachment	    = XmATTACH_FORM;
	    XmNleftAttachment	    = XmATTACH_POSITION;
	    XmNleftPosition	    = CustEnvHelpBLeftPos;
	    XmNbottomAttachment	    = XmATTACH_FORM;
	    XmNdefaultButtonShadowThickness = EnvDefaultPBShadow;
	};
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(CustHelpButtonHelpKey);
            XmNactivateCallback = procedure env_context_sensitive_help(CustMgrHelpKey);
	};
    };


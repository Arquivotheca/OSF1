/*
 * *****************************************************************
 * *                                                               *
 * *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
 * *                                                               *
 * *   All Rights Reserved.  Unpublished rights  reserved  under   *
 * *   the copyright laws of the United States.                    *
 * *                                                               *
 * *   The software contained on this media  is  proprietary  to   *
 * *   and  embodies  the  confidential  technology  of  Digital   *
 * *   Equipment Corporation.  Possession, use,  duplication  or   *
 * *   dissemination of the software and media is authorized only  *
 * *   pursuant to a valid written license from Digital Equipment  *
 * *   Corporation.                                                *
 * *                                                               *
 * *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
 * *   by the U.S. Government is subject to restrictions  as  set  *
 * *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
 * *   or  in  FAR 52.227-19, as applicable.                       *
 * *                                                               *
 * *****************************************************************
 */
/*
 * HISTORY
 */
/*
** Generated by ODL Version X0.1 on Tue Jul 14 11:01:23 1992
*/

/*
** COPYRIGHT (c) 1989 BY
** DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.
** ALL RIGHTS RESERVED.
**
** THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
** ONLY  IN  ACCORDANCE  OF  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE
** INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER
** COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
** OTHER PERSON.  NO TITLE TO AND  OWNERSHIP OF THE  SOFTWARE IS  HEREBY
** TRANSFERRED.
**
** THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE
** AND  SHOULD  NOT  BE  CONSTRUED  AS A COMMITMENT BY DIGITAL EQUIPMENT
** CORPORATION.
**
** DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS
** SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
*/

/*
** Private Type Definitions for the EnvWindow Object
*/

/*
** Abstract Type Definitions for subtypes of Object
*/

typedef _Object _List, _PtrTo _ListPtr;
typedef _Object _Window, _PtrTo _WindowPtr;
typedef _Object _LbWindow, _PtrTo _LbWindowPtr;
typedef _Object _HsObject, _PtrTo _HsObjectPtr;
typedef _Object _EnvContext, _PtrTo _EnvContextPtr;

/*
** EnvWindow Instance Structure Definition
*/

typedef struct __EnvWindow {
        _Type type;
        _Position x;
        _Position y;
        _Cardinal width;
        _Cardinal height;
        lwk_dxm_ui lwk_ui;
        _AnyPtr   display_data;
        _StateFlags flags;
        struct __Window *nextwindow;
        _EnvContext envigation_context;
        _AnyPtr private_data;
        struct __EnvWindow *next;
    } _EnvWindowInstance, _PtrTo _EnvWindow, _PtrTo _PtrTo _EnvWindowPtr;

/*
** EnvWindow Property Name Table Index Definitions
*/

#define _EnvironmentContextIndex 0
#define _P_PrivateData "$PrivateData"
#define _PrivateDataIndex 1
#define _P_Next "$Next"
#define _NextIndex 2

/*
** EnvWindow Property Name Table Definition
*/

#define _EnvWindowPropertyNameTable \
    _PropertyNameTableEntry _Constant EnvWindowPropertyNameTable[] = { \
        {_P_EnvironmentContext, _EnvironmentContextIndex, _True}, \
        {_P_PrivateData, _PrivateDataIndex, _False}, \
        {_P_Next, _NextIndex, _False}, \
        {(_String) 0, 0, _False} \
    }

/*
** EnvWindow Property Accessor Definitions
*/

#define _EnvironmentContext_of(Obj) ((_EnvWindow) _Reference(Obj))->envigation_context
#define _PrivateData_of(Obj) ((_EnvWindow) _Reference(Obj))->private_data
#define _Next_of(Obj) ((_EnvWindow) _Reference(Obj))->next

/*
** Include Generic Operation Support
*/

#include "hs_operation_prototypes.h"

/*
** EnvWindow Method Declarations
*/

_DeclareFunction(_Void EnvOpObjIllOp, (_in _Object object));
_DeclareFunction(_Void EnvOpEnvWindowClose, (_inout _EnvWindow window,
    _in _Boolean recycle));
_DeclareFunction(_Void EnvOpEnvWindowCollapse, (_in _EnvWindow window,
    _in _AnyPtr user_data));
_DeclareFunction(_EnvWindow EnvOpObjCopy, (_in _EnvWindow object));
_DeclareFunction(_EnvWindow EnvOpObjCreate, (_in _Type type));
_DeclareFunction(_EnvWindow EnvOpEnvWindowCreate, (_in _Type type,
    _in _Widget parent, _in _EnvContext env_context));
_DeclareFunction(_EnvWindow EnvOpWindowCreate, (_in _Type type));
_DeclareFunction(_Void EnvOpObjDelete, (_inout _EnvWindow object));
_DeclareFunction(_Void EnvOpEnvWindowDisplay, (_inout _EnvWindow window,
    _in _EnvContext environment_context));
_DeclareFunction(_Void EnvOpWindowDisplayMessage, (_in _EnvWindow window,
    _Status *status, _Integer count));
_DeclareFunction(_Void EnvOpEnvWindowExpand, (_in _EnvWindow window,
    _in _AnyPtr user_data));
_DeclareFunction(_Void EnvOpEnvWindowFree, (_inout _EnvWindow object));
_DeclareFunction(_EnvWindow EnvOpWindowGetEnvWindow, (_in _EnvWindow window));
_DeclareFunction(_Boolean EnvOpWindowGetSelection, (
    _in _EnvWindow window, _in _GetSelectOperation operation,
    _inout _AnyPtr user_data));
_DeclareFunction(_Void EnvOpEnvWindowGetValue, (_in _EnvWindow object,
    _in _String property_name, _in _Domain domain,
    _in _AnyPtr value));
_DeclareFunction(_Void EnvOpWindowHighlight, (_in _EnvWindow window,
    _in _HsObject hs_object));
_DeclareFunction(_Void EnvOpEnvWindowInitialize, (_inout _EnvWindow object,
    _in _EnvWindow proto_object));
_DeclareFunction(_Boolean EnvOpObjIsType, (_in _EnvWindow object, _in _Type type));
_DeclareFunction(_EnvWindow EnvOpEnvWindowOpenEnv, (_in _Type type,
    _in _Widget parent, _in _EnvContext env_context, 
    _in _Boolean new_ctxt));
_DeclareFunction(_Void EnvOpWindowPositionWindow, (_in _EnvWindow window));
_DeclareFunction(_Void EnvOpWindowRaiseWindow, (_in _EnvWindow window));
_DeclareFunction(_Void EnvOpEnvWindowRemoveCopyright, (
    _in _EnvWindow window, _in _String title_id));
_DeclareFunction(_Void EnvOpWindowSelect, (_in _EnvWindow window,
    _in _HsObject hs_object));
_DeclareFunction(_Void EnvOpEnvWindowSetCurrency, (_inout _EnvWindow env_window,
    _in _CurrencyFlag currency, _in _AnyPtr value));
_DeclareFunction(_Void EnvOpWindowSetCursor, (_in _EnvWindow window,
    _in _CursorType cursor_type));
_DeclareFunction(_Void EnvOpEnvWindowSetValue, (_inout _EnvWindow object,
    _in _String property_name, _in _Domain domain,
    _in _AnyPtr value, _in _SetFlag flag));
_DeclareFunction(_Boolean EnvOpWindowSetWindowState, (
    _inout _EnvWindow window, _in _WindowState state,
    _in _StateOperation operation));
_DeclareFunction(_Void EnvOpEnvWindowUpdate, (_in _EnvWindow window,
    _HsObject hs_object, _UpdateOperation update));

/*
** EnvWindow Type Instance Definition
*/

#define _EnvWindowTypeInstance \
    _TypeInstance _Constant HS__EnvWindowTypeInstance = { \
        &HS__WindowTypeInstance, \
        sizeof(_EnvWindowInstance), \
        { \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpEnvWindowClose, \
        (_Method) EnvOpEnvWindowCollapse, \
        (_Method) EnvOpObjCopy, \
        (_Method) EnvOpObjCreate, \
        (_Method) EnvOpEnvWindowCreate, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpWindowCreate, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjDelete, \
        (_Method) EnvOpEnvWindowDisplay, \
        (_Method) EnvOpWindowDisplayMessage, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpEnvWindowExpand, \
        (_Method) EnvOpEnvWindowFree, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpWindowGetEnvWindow, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpWindowGetSelection, \
        (_Method) EnvOpEnvWindowGetValue, \
        (_Method) EnvOpWindowHighlight, \
        (_Method) EnvOpEnvWindowInitialize, \
        (_Method) EnvOpObjIsType, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpEnvWindowOpenEnv, \
        (_Method) EnvOpWindowPositionWindow, \
        (_Method) EnvOpWindowRaiseWindow, \
        (_Method) EnvOpEnvWindowRemoveCopyright, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpWindowSelect, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpEnvWindowSetCurrency, \
        (_Method) EnvOpWindowSetCursor, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpEnvWindowSetValue, \
        (_Method) EnvOpWindowSetWindowState, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpEnvWindowUpdate \
        } \
    }

#define _EnvWindowType \
    _Type _Constant HS__EnvWindowType = &HS__EnvWindowTypeInstance

! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
!++
! COPYRIGHT (c) 1988, 1989, 1990 BY
! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.
! ALL RIGHTS RESERVED.
!
! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
! ONLY  IN  ACCORDANCE  OF  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE
! INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER
! COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
! OTHER PERSON.  NO TITLE TO AND  OWNERSHIP OF THE  SOFTWARE IS  HEREBY
! TRANSFERRED.
!
! THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE
! AND  SHOULD  NOT  BE  CONSTRUED  AS A COMMITMENT BY DIGITAL EQUIPMENT
! CORPORATION.
!
! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS
! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
!--

!++
!
! Facility:
!   LinkWorks Manager
!
! Abstract:
!   DECwindows LinkWorks Manager User Interface linkbase window menubar
!   description file
!
! Author:
!   Andre Pavanello
!   Patricia Avigdor
!   Pascale Dardailler
!
! Creation Date:
!   31-Oct-89
!
! Modification History:
!
!--
               

value
    LbFileLabel :
	compound_string("File");
    LbFileMnemonic:
	mneumonic_F;
	
    LbOpenLabel :
	compound_string("Open...");
    LbOpenMnemonic:
	mneumonic_O;

    LbNewLabel :
	compound_string("Open in New...");
    LbNewMnemonic:
	mneumonic_N;

    LbSaveLabel :
	compound_string("Save");
    LbSaveMnemonic:
	mneumonic_S;

    LbCloseLabel :
	compound_string("Close");
    LbCloseMnemonic:
	mneumonic_C;

    LbEditLabel :
	compound_string("Edit");
    LbEditMnemonic:
	mneumonic_E;

    LbCutLabel :
	compound_string("Cut");
    LbCutMnemonic:
	mneumonic_t;

    LbCopyLabel :
	compound_string("Copy");
    LbCopyMnemonic:
	mneumonic_C;

    LbPasteLabel :
	compound_string("Paste");
    LbPasteMnemonic:
	mneumonic_P;
	
    LbDeleteLabel :
	compound_string("Delete");
    LbDeleteMnemonic:
	mneumonic_D;
	
    LbViewLabel :
	compound_string("View");
    LbViewMnemonic:
	mneumonic_V;
	
    LbPropertiesLabel :
	compound_string("Properties...");
    LbPropertiesMnemonic:
	mneumonic_P;

    LbCreateLabel :
	compound_string("Create");
    LbCreateEntryMnemonic:
	mneumonic_C;

    LbNetListLabel :
	compound_string("Linknet List...");
    LbCreateNetListMnemonic:
	mneumonic_t;

    LbLinknetLabel :
	compound_string("Linknet...");
    LbCreateLinknetMnemonic:
	mneumonic_L;

    LbPathListLabel :
	compound_string("Path List...");
    LbCreatePathListMnemonic:
	mneumonic_h;

    LbPathLabel :
	compound_string("Path...");
    LbCreatePathMnemonic:
	mneumonic_P;
	
    LbHelpMenuLabel :
	compound_string("Help");
    LbHelpMnemonic:
	mneumonic_H;

    LbHelpOnContextButtonLabel :
	compound_string("On Context");
    LbOnContextMnemonic:
	mneumonic_C;

    LbHelpOnWindowButtonLabel :
	compound_string("On Window");
    LbOnWindowMnemonic:
	mneumonic_W;

    LbHelpOnTermsButtonLabel :
	compound_string("On Terms");
    LbOnTermsMnemonic:
	mneumonic_T;
	
    LbHelpOnVersionButtonLabel :
	compound_string("On Version");
    LbOnVersionMnemonic:
	mneumonic_V;

procedure
    lb_create_menubar(any);

    lb_map_file_menu(any);
    lb_create_save(any);
    lb_activate_open(any);
    lb_activate_new(any);
    lb_save_linkbase(any);
    lb_activate_close(any);

    lb_map_edit_menu(any);
    lb_create_cut(any);
    lb_activate_cut(any);
    lb_create_copy(any);
    lb_activate_copy(any);
    lb_create_paste(any);
    lb_activate_paste(any);
    lb_create_delete(any);
    lb_activate_delete(any);
    
    lb_map_view_menu(any);
    lb_create_expand(any);
    lb_activate_expand(any);
    lb_create_properties(any);
    lb_activate_properties(any);

    lb_activate_create_net_list(any);
    lb_activate_create_linknet(any);
    lb_activate_create_path_list(any);
    lb_activate_create_path(any);

!++
!   The linkbase window menubar
!--

    object menu_bar : XmMenuBar {
	arguments {
	    XmNorientation	= XmHORIZONTAL;
	    XmNmenuHelpWidget	= XmCascadeButton help_entry;
	};
	controls {
	    XmCascadeButton file_entry;
	    XmCascadeButton edit_entry;
	    XmCascadeButton view_entry;
	    XmCascadeButton create_entry;
	    XmCascadeButton help_entry;
	};
	callbacks {
	    MrmNcreateCallback = procedure lb_create_menubar(windowprivate);
!	    XmNhelpCallback = 
!		procedure env_context_sensitive_help(LbMenubarHelpKey);
	};
    };


!++
!   The file menu 
!--

    object file_entry : XmCascadeButton {
	arguments {
	    XmNlabelString = LbFileLabel;
	    XmNmnemonic = LbFileMnemonic;	    
	};
	controls {
	    XmPulldownMenu file_menu;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbFileHelpKey);
	};
    };

    object file_menu : XmPulldownMenu {
	controls {
	    XmPushButton open_button;
	    XmPushButton new_button;
	    XmSeparator {};
	    XmPushButton save_button;
	    XmSeparator {};
	    XmPushButton close_button;
	};
	callbacks {
	    XmNmapCallback = procedure lb_map_file_menu(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbFileHelpKey);
	};
    };

    object open_button : XmPushButton {
	arguments {
	    XmNlabelString = LbOpenLabel;
	    XmNmnemonic = LbOpenMnemonic;	    
	};
	callbacks {
	    XmNactivateCallback = procedure lb_activate_open(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbOpenHelpKey);
	};
    };

    object new_button : XmPushButton {
	arguments {
	    XmNlabelString = LbNewLabel;
	    XmNmnemonic = LbNewMnemonic;	    
	};
	callbacks {
	    XmNactivateCallback = procedure lb_activate_new(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbNewHelpKey);
	};
    };
	
    object save_button : XmPushButton {
	arguments {
	    XmNlabelString = LbSaveLabel;
	    XmNmnemonic = LbSaveMnemonic;	    
	};
	callbacks {
	    MrmNcreateCallback = procedure lb_create_save(windowprivate);
	    XmNactivateCallback = procedure lb_save_linkbase(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbSaveHelpKey);
	};
    };
	
    object close_button : XmPushButton {
	arguments {
	    XmNlabelString = LbCloseLabel;
	    XmNmnemonic = LbCloseMnemonic;	    
	};
	callbacks {
	    XmNactivateCallback = procedure lb_activate_close(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbCloseHelpKey);
	};
    };
	

!++
!   The edit menu
!--

    object edit_entry : XmCascadeButton {
	arguments {
	    XmNlabelString = LbEditLabel;
	    XmNmnemonic = LbEditMnemonic;	    
	};
	controls {
	    XmPulldownMenu edit_menu;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbEditHelpKey);
	};
    };

    object edit_menu : XmPulldownMenu {
	controls {
	    XmPushButton cut_button;
	    XmPushButton copy_button;
	    XmPushButton paste_button;
	    XmSeparator {};
	    XmPushButton delete_button;
	};
	callbacks {
	    XmNmapCallback = procedure lb_map_edit_menu(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbEditHelpKey);
	};
    };

    object cut_button : XmPushButton {
	arguments {
	    XmNlabelString	= LbCutLabel;
	    XmNaccelerator	= CutAccelerator;
	    XmNacceleratorText	= CutAcceleratorText;
	    XmNmnemonic		= LbCutMnemonic;	    
	};
	callbacks {
	    MrmNcreateCallback = procedure lb_create_cut(windowprivate);
	    XmNactivateCallback = procedure lb_activate_cut(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbCutHelpKey);
	};
    };

    object copy_button : XmPushButton {
	arguments {
	    XmNlabelString	= LbCopyLabel;
	    XmNaccelerator	= CopyAccelerator;
	    XmNacceleratorText	= CopyAcceleratorText;
	    XmNmnemonic		= LbCopyMnemonic;	    
	};
	callbacks {
	    MrmNcreateCallback = procedure lb_create_copy(windowprivate);
	    XmNactivateCallback = procedure lb_activate_copy(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbCopyHelpKey);
	};
    };

    object paste_button : XmPushButton {
	arguments {
	    XmNlabelString	= LbPasteLabel;
	    XmNaccelerator	= PasteAccelerator;
	    XmNacceleratorText	= PasteAcceleratorText;
	    XmNmnemonic		= LbPasteMnemonic;	    
	};
	callbacks {
	    MrmNcreateCallback = procedure lb_create_paste(windowprivate);
	    XmNactivateCallback = procedure lb_activate_paste(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbPasteHelpKey);
	};
    };

    object delete_button : XmPushButton {
	arguments {
	    XmNlabelString = LbDeleteLabel;
 	    XmNmnemonic = LbDeleteMnemonic;	    
	};
	callbacks {
	    MrmNcreateCallback = procedure lb_create_delete(windowprivate);
	    XmNactivateCallback = procedure lb_activate_delete(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbDeleteHelpKey);
	};
    };


!++
!   The view menu
!--

    object view_entry : XmCascadeButton {
	arguments {
	    XmNlabelString = LbViewLabel;
 	    XmNmnemonic = LbViewMnemonic;	    
	};
	controls {
	    XmPulldownMenu view_menu;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbViewHelpKey);
	};
    };

    object view_menu : XmPulldownMenu {
	controls {
	    XmPushButton expand_button;
	    XmSeparator {};
	    XmPushButton show_prop_button;
	};
	callbacks {
	    XmNmapCallback = procedure lb_map_view_menu(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbViewHelpKey);
	};
    };

    object expand_button : XmPushButton {
	!label set at run-time
	callbacks {
	    MrmNcreateCallback = procedure lb_create_expand(windowprivate);
	    XmNactivateCallback = procedure lb_activate_expand(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbExpandHelpKey);
	};
    };

    object show_prop_button : XmPushButton {
	arguments {
	    XmNlabelString = LbPropertiesLabel;
 	    XmNmnemonic = LbPropertiesMnemonic;	    
	};
	callbacks {
	    MrmNcreateCallback   = procedure lb_create_properties(windowprivate);
	    XmNactivateCallback = 
		procedure lb_activate_properties(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbPropertiesHelpKey);
	};
    };
    
!++
!   The Create menu
!__

    object create_entry : XmCascadeButton {
	arguments {
	    XmNlabelString = LbCreateLabel;
	    XmNmnemonic = LbCreateEntryMnemonic;	    
	};
	controls {
	    XmPulldownMenu create_entry_menu;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbCreateHelpKey);
	};
    };

    object create_entry_menu : XmPulldownMenu {
	controls {
	    XmPushButton create_net_list_button;
	    XmPushButton create_linknet_button;
	    XmPushButton create_path_list_button;
	    XmPushButton create_path_button;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbCreateHelpKey);
	};
    };

    object create_net_list_button : XmPushButton {
	arguments {
	    XmNlabelString = LbNetListLabel;
 	    XmNmnemonic = LbCreateNetListMnemonic;	    
    	};
	callbacks {
	    XmNactivateCallback = 
		procedure lb_activate_create_net_list(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbNetListHelpKey);
	};
    };

    object create_linknet_button : XmPushButton {
	arguments {
	    XmNlabelString = LbLinknetLabel;
 	    XmNmnemonic = LbCreateLinknetMnemonic;	    
	};
	callbacks {
	    XmNactivateCallback = 
		procedure lb_activate_create_linknet(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbLinknetHelpKey);
	};
    };

    object create_path_list_button : XmPushButton {
	arguments {
	    XmNlabelString = LbPathListLabel;
 	    XmNmnemonic = LbCreatePathListMnemonic;	    
	};
	callbacks {
	    XmNactivateCallback = 
		procedure lb_activate_create_path_list(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbPathListHelpKey);
	};
    };

    object create_path_button : XmPushButton {
	arguments {
	    XmNlabelString = LbPathLabel;
 	    XmNmnemonic = LbCreatePathMnemonic;	    
	};
	callbacks {
	    XmNactivateCallback = 
		procedure lb_activate_create_path(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbPathHelpKey);
	};
    };

	
!++
!   The Help Widget menu and buttons
!--

    object help_entry : XmCascadeButton {
	arguments {
	    XmNlabelString = LbHelpMenuLabel;
 	    XmNmnemonic = LbHelpMnemonic;	    
	};
	controls {
	    XmPulldownMenu help_menu;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbHelpHelpKey);
	};
    };

    object help_menu : XmPulldownMenu {
	controls {
	    XmPushButton help_on_context;
	    XmSeparator {};
	    XmPushButton help_on_window;
	    XmPushButton help_on_terms;
	    XmPushButton help_on_version;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbHelpHelpKey);
	};
    };

    object help_on_context : XmPushButton {
	arguments {       
	    XmNlabelString = LbHelpOnContextButtonLabel;
	    XmNmnemonic = LbOnContextMnemonic;
    	};                          
	callbacks {
	    XmNactivateCallback = 
		procedure env_help_on_context_tracking(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbOnContextHelpKey);
	};
    };

    object help_on_window : XmPushButton {
	arguments {
	    XmNlabelString = LbHelpOnWindowButtonLabel;
 	    XmNmnemonic = LbOnWindowMnemonic;	    
	};
	callbacks {
	    XmNactivateCallback = 
		procedure env_context_sensitive_help(LbWindowFrameKey);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbOnWindowHelpKey);
	};
    };

    object help_on_terms : XmPushButton {
	arguments {
	    XmNlabelString = LbHelpOnTermsButtonLabel;
 	    XmNmnemonic = LbOnTermsMnemonic;	    
	};
	callbacks {
	    XmNactivateCallback = 
		procedure env_context_sensitive_help(LbGlossaryFrameKey);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbOnTermsHelpKey);
	};
    };

    object help_on_version : XmPushButton {
	arguments {
	    XmNlabelString = LbHelpOnVersionButtonLabel;
 	    XmNmnemonic = LbOnVersionMnemonic;	    
	};
	callbacks {
	    XmNactivateCallback = 
		procedure env_context_sensitive_help(LbAboutFrameKey);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(LbOnVersionHelpKey);
	};
    };

!++
!   Include the common menu entries for the menubar
!--

    include file "hs_common_menubar_m.uil";


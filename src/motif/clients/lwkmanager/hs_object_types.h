/*
 * *****************************************************************
 * *                                                               *
 * *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
 * *                                                               *
 * *   All Rights Reserved.  Unpublished rights  reserved  under   *
 * *   the copyright laws of the United States.                    *
 * *                                                               *
 * *   The software contained on this media  is  proprietary  to   *
 * *   and  embodies  the  confidential  technology  of  Digital   *
 * *   Equipment Corporation.  Possession, use,  duplication  or   *
 * *   dissemination of the software and media is authorized only  *
 * *   pursuant to a valid written license from Digital Equipment  *
 * *   Corporation.                                                *
 * *                                                               *
 * *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
 * *   by the U.S. Government is subject to restrictions  as  set  *
 * *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
 * *   or  in  FAR 52.227-19, as applicable.                       *
 * *                                                               *
 * *****************************************************************
 */
/*
 * HISTORY
 */
/*
** Generated by ODL Version X0.1 on Tue Jul 14 11:01:28 1992
*/

/*
** COPYRIGHT (c) 1989 BY
** DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.
** ALL RIGHTS RESERVED.
**
** THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
** ONLY  IN  ACCORDANCE  OF  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE
** INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER
** COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
** OTHER PERSON.  NO TITLE TO AND  OWNERSHIP OF THE  SOFTWARE IS  HEREBY
** TRANSFERRED.
**
** THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE
** AND  SHOULD  NOT  BE  CONSTRUED  AS A COMMITMENT BY DIGITAL EQUIPMENT
** CORPORATION.
**
** DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS
** SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
*/

/*
** Object-independent Type Definitions
*/


/*
** Useful Symbol Definitions
*/

#define _NUM_TYPES 7
#define _NUM_OPERATIONS 59

/*
** Type Instance Structure Definition
*/

typedef unsigned long int (_PtrTo _Method)();

typedef struct __Type {
    struct __Type _PtrTo supertype;
    int           instance_size;
    _Method       methods[_NUM_OPERATIONS];
} _TypeInstance, _PtrTo _Type, _PtrTo _PtrTo _TypePtr;

/*
** Type Property Accessor Definitions
*/

#define _Supertype_of(Type) (Type)->supertype
#define _Size_of(Type) (Type)->instance_size
#define _Method_of(Type, Opr) (Type)->methods[Opr]

/*
** Object Instance Structure Definition
*/

typedef struct __Object {
        _Type type;
    } _ObjectInstance, _PtrTo _Object, _PtrTo _PtrTo _ObjectPtr;

/*
** Object Property Accessor Definitions
*/

#define _Type_of(Obj) ((_Object) _Reference(Obj))->type

/*
** Property Table Entry Type Definition
*/

typedef struct __PropertyNameTableEntry {
            char *name;
            int index;
            int public;
        } _PropertyNameTableEntry, _PtrTo _PropertyNameTable, _PtrTo _PtrTo _PropertyNameTablePtr;

/*
** Type Instance Declarations
*/

#define _TypeObjectInstance HS__ObjectTypeInstance
#define _TypeObject HS__ObjectType
#define _TypeListInstance HS__ListTypeInstance
#define _TypeList HS__ListType
#define _TypeWindowInstance HS__WindowTypeInstance
#define _TypeWindow HS__WindowType
#define _TypeEnvWindowInstance HS__EnvWindowTypeInstance
#define _TypeEnvWindow HS__EnvWindowType
#define _TypeLbWindowInstance HS__LbWindowTypeInstance
#define _TypeLbWindow HS__LbWindowType
#define _TypeHsObjectInstance HS__HsObjectTypeInstance
#define _TypeHsObject HS__HsObjectType
#define _TypeEnvContextInstance HS__EnvContextTypeInstance
#define _TypeEnvContext HS__EnvContextType
_External _TypeInstance HS__ObjectTypeInstance;
_External _Type HS__ObjectType;
_External _TypeInstance HS__ListTypeInstance;
_External _Type HS__ListType;
_External _TypeInstance HS__WindowTypeInstance;
_External _Type HS__WindowType;
_External _TypeInstance HS__EnvWindowTypeInstance;
_External _Type HS__EnvWindowType;
_External _TypeInstance HS__LbWindowTypeInstance;
_External _Type HS__LbWindowType;
_External _TypeInstance HS__HsObjectTypeInstance;
_External _Type HS__HsObjectType;
_External _TypeInstance HS__EnvContextTypeInstance;
_External _Type HS__EnvContextType;

/*
** Property Name Definitions
*/

#define _P_ActiveNetworks "$ActiveNetworks"
#define _P_ActivePathIndex "$ActivePathIndex"
#define _P_ActivePaths "$ActivePaths"
#define _P_Attributes "$Attributes"
#define _P_CurrentNetwork "$CurrentNetwork"
#define _P_DisplayData "$DisplayData"
#define _P_Domain "$Domain"
#define _P_ElementCount "$ElementCount"
#define _P_EnvWindow "$EnvWindow"
#define _P_EnvironmentContext "$EnvironmentContext"
#define _P_Height "$Height"
#define _P_HisObject "$HisObject"
#define _P_HisType "$HisType"
#define _P_HisUi "$HisUi"
#define _P_Linkbase "$Linkbase"
#define _P_Networks "$Networks"
#define _P_Paths "$Paths"
#define _P_Sorted "$Sorted"
#define _P_Trail "$Trail"
#define _P_Width "$Width"
#define _P_XPosition "$XPosition"
#define _P_YPosition "$YPosition"

/*
** Methods Dispatch Table Symbolic Definitions
*/

#define _AddElement_ 0
#define _AppendElements_ 1
#define _Clear_ 2
#define _Close_ 3
#define _Collapse_ 4
#define _Copy_ 5
#define _Create_ 6
#define _CreateEnvWindow_ 7
#define _CreateHsObject_ 8
#define _CreateLbWindow_ 9
#define _CreateList_ 10
#define _CreateWindow_ 11
#define _DeleteElement_ 12
#define _DeleteObj_ 13
#define _Display_ 14
#define _DisplayMessage_ 15
#define _DisplayProperties_ 16
#define _Expand_ 17
#define _Free_ 18
#define _GetAttribute_ 19
#define _GetCSProperty_ 20
#define _GetEnvWindow_ 21
#define _GetLinkbase_ 22
#define _GetProperty_ 23
#define _GetSelection_ 24
#define _GetValue_ 25
#define _Highlight_ 26
#define _Initialize_ 27
#define _IsType_ 28
#define _Iterate_ 29
#define _LbInWindow_ 30
#define _LoadDefaultAttributes_ 31
#define _Open_ 32
#define _OpenEnv_ 33
#define _PositionWindow_ 34
#define _RaiseWindow_ 35
#define _RemoveCopyright_ 36
#define _RemoveElement_ 37
#define _ResetAttributes_ 38
#define _ResetDefaultAttribute_ 39
#define _Retrieve_ 40
#define _Save_ 41
#define _SaveAttributes_ 42
#define _SaveComposite_ 43
#define _SaveList_ 44
#define _Select_ 45
#define _SelectElement_ 46
#define _SetAttribute_ 47
#define _SetAttributeCurrent_ 48
#define _SetCSProperty_ 49
#define _SetContextCurrency_ 50
#define _SetCurrency_ 51
#define _SetCursor_ 52
#define _SetHsObjState_ 53
#define _SetProperty_ 54
#define _SetValue_ 55
#define _SetWindowState_ 56
#define _Store_ 57
#define _Update_ 58

/*
** Operation Invocation Macro Definitions
*/

#define _AddElement(Obj, A1, A2, A3) \
    (*((_AddElement_P) ((_Object) _Reference(Obj))->type->methods[_AddElement_]))((_Object) _Reference(Obj), (A1), (A2), (A3))

#define _AppendElements(Obj, A1) \
    (*((_AppendElements_P) ((_Object) _Reference(Obj))->type->methods[_AppendElements_]))((_Object) _Reference(Obj), (A1))

#define _Clear(Obj) \
    (*((_Clear_P) ((_Object) _Reference(Obj))->type->methods[_Clear_]))((_Object) _Reference(Obj))

#define _Close(Obj, A1) \
    (*((_Close_P) ((_Object) _Reference(Obj))->type->methods[_Close_]))((_Object) _Reference(Obj), (A1))

#define _Collapse(Obj, A1) \
    (*((_Collapse_P) ((_Object) _Reference(Obj))->type->methods[_Collapse_]))((_Object) _Reference(Obj), (A1))

#define _Copy(Obj) \
    (*((_Copy_P) ((_Object) _Reference(Obj))->type->methods[_Copy_]))((_Object) _Reference(Obj))

#define _Create(Type) \
    (*((_Create_P) (Type)->methods[_Create_]))((Type))

#define _CreateEnvWindow(Type, A1, A2) \
    (*((_CreateEnvWindow_P) (Type)->methods[_CreateEnvWindow_]))((Type), (A1), (A2))

#define _CreateHsObject(Type, A1, A2) \
    (*((_CreateHsObject_P) (Type)->methods[_CreateHsObject_]))((Type), (A1), (A2))

#define _CreateLbWindow(Type, A1, A2, A3, A4, A5) \
    (*((_CreateLbWindow_P) (Type)->methods[_CreateLbWindow_]))((Type), (A1), (A2), (A3), (A4), (A5))

#define _CreateList(Type, A1, A2) \
    (*((_CreateList_P) (Type)->methods[_CreateList_]))((Type), (A1), (A2))

#define _CreateWindow(Type) \
    (*((_CreateWindow_P) (Type)->methods[_CreateWindow_]))((Type))

#define _DeleteElement(Obj, A1, A2) \
    (*((_DeleteElement_P) ((_Object) _Reference(Obj))->type->methods[_DeleteElement_]))((_Object) _Reference(Obj), (A1), (A2))

#define _DeleteObj(Obj) \
    (*((_DeleteObj_P) ((_Object) _Reference(Obj))->type->methods[_DeleteObj_]))((_Object) _Reference(Obj))

#define _Display(Obj, A1) \
    (*((_Display_P) ((_Object) _Reference(Obj))->type->methods[_Display_]))((_Object) _Reference(Obj), (A1))

#define _DisplayMessage(Obj, A1, A2) \
    (*((_DisplayMessage_P) ((_Object) _Reference(Obj))->type->methods[_DisplayMessage_]))((_Object) _Reference(Obj), (A1), (A2))

#define _DisplayProperties(Obj, A1, A2) \
    (*((_DisplayProperties_P) ((_Object) _Reference(Obj))->type->methods[_DisplayProperties_]))((_Object) _Reference(Obj), (A1), (A2))

#define _Expand(Obj, A1) \
    (*((_Expand_P) ((_Object) _Reference(Obj))->type->methods[_Expand_]))((_Object) _Reference(Obj), (A1))

#define _Free(Obj) \
    (*((_Free_P) ((_Object) _Reference(Obj))->type->methods[_Free_]))((_Object) _Reference(Obj))
#define _Free_S(Obj, MyType) \
    (*((_Free_P) (MyType)->supertype->methods[_Free_]))((_Object) _Reference(Obj))

#define _GetAttribute(Obj, A1, A2) \
    (*((_GetAttribute_P) ((_Object) _Reference(Obj))->type->methods[_GetAttribute_]))((_Object) _Reference(Obj), (A1), (A2))

#define _GetCSProperty(Obj, A1, A2) \
    (*((_GetCSProperty_P) ((_Object) _Reference(Obj))->type->methods[_GetCSProperty_]))((_Object) _Reference(Obj), (A1), (A2))

#define _GetEnvWindow(Obj) \
    (*((_GetEnvWindow_P) ((_Object) _Reference(Obj))->type->methods[_GetEnvWindow_]))((_Object) _Reference(Obj))

#define _GetLinkbase(Obj, A1, A2) \
    (*((_GetLinkbase_P) ((_Object) _Reference(Obj))->type->methods[_GetLinkbase_]))((_Object) _Reference(Obj), (A1), (A2))

#define _GetProperty(Obj, A1, A2, A3) \
    (*((_GetProperty_P) ((_Object) _Reference(Obj))->type->methods[_GetProperty_]))((_Object) _Reference(Obj), (A1), (A2), (A3))

#define _GetSelection(Obj, A1, A2) \
    (*((_GetSelection_P) ((_Object) _Reference(Obj))->type->methods[_GetSelection_]))((_Object) _Reference(Obj), (A1), (A2))

#define _GetValue(Obj, A1, A2, A3) \
    (*((_GetValue_P) ((_Object) _Reference(Obj))->type->methods[_GetValue_]))((_Object) _Reference(Obj), (A1), (A2), (A3))
#define _GetValue_S(Obj, A1, A2, A3, MyType) \
    (*((_GetValue_P) (MyType)->supertype->methods[_GetValue_]))((_Object) _Reference(Obj), (A1), (A2), (A3))

#define _Highlight(Obj, A1) \
    (*((_Highlight_P) ((_Object) _Reference(Obj))->type->methods[_Highlight_]))((_Object) _Reference(Obj), (A1))

#define _Initialize(Obj, A1) \
    (*((_Initialize_P) ((_Object) _Reference(Obj))->type->methods[_Initialize_]))((_Object) _Reference(Obj), (A1))
#define _Initialize_S(Obj, A1, MyType) \
    (*((_Initialize_P) (MyType)->supertype->methods[_Initialize_]))((_Object) _Reference(Obj), (A1))

#define _IsType(Obj, A1) \
    (*((_IsType_P) ((_Object) _Reference(Obj))->type->methods[_IsType_]))((_Object) _Reference(Obj), (A1))

#define _Iterate(Obj, A1, A2, A3) \
    (*((_Iterate_P) ((_Object) _Reference(Obj))->type->methods[_Iterate_]))((_Object) _Reference(Obj), (A1), (A2), (A3))

#define _LbInWindow(Obj, A1) \
    (*((_LbInWindow_P) ((_Object) _Reference(Obj))->type->methods[_LbInWindow_]))((_Object) _Reference(Obj), (A1))

#define _LoadDefaultAttributes(Obj) \
    (*((_LoadDefaultAttributes_P) ((_Object) _Reference(Obj))->type->methods[_LoadDefaultAttributes_]))((_Object) _Reference(Obj))

#define _Open(Type, A1, A2, A3, A4, A5) \
    (*((_Open_P) (Type)->methods[_Open_]))((Type), (A1), (A2), (A3), (A4), (A5))

#define _OpenEnv(Type, A1, A2, A3) \
    (*((_OpenEnv_P) (Type)->methods[_OpenEnv_]))((Type), (A1), (A2), (A3))

#define _PositionWindow(Obj) \
    (*((_PositionWindow_P) ((_Object) _Reference(Obj))->type->methods[_PositionWindow_]))((_Object) _Reference(Obj))

#define _RaiseWindow(Obj) \
    (*((_RaiseWindow_P) ((_Object) _Reference(Obj))->type->methods[_RaiseWindow_]))((_Object) _Reference(Obj))

#define _RemoveCopyright(Obj, A1) \
    (*((_RemoveCopyright_P) ((_Object) _Reference(Obj))->type->methods[_RemoveCopyright_]))((_Object) _Reference(Obj), (A1))

#define _RemoveElement(Obj, A1, A2) \
    (*((_RemoveElement_P) ((_Object) _Reference(Obj))->type->methods[_RemoveElement_]))((_Object) _Reference(Obj), (A1), (A2))

#define _ResetAttributes(Obj) \
    (*((_ResetAttributes_P) ((_Object) _Reference(Obj))->type->methods[_ResetAttributes_]))((_Object) _Reference(Obj))

#define _ResetDefaultAttribute(Obj) \
    (*((_ResetDefaultAttribute_P) ((_Object) _Reference(Obj))->type->methods[_ResetDefaultAttribute_]))((_Object) _Reference(Obj))

#define _Retrieve(Type, A1, A2) \
    (*((_Retrieve_P) (Type)->methods[_Retrieve_]))((Type), (A1), (A2))

#define _Save(Obj, A1, A2) \
    (*((_Save_P) ((_Object) _Reference(Obj))->type->methods[_Save_]))((_Object) _Reference(Obj), (A1), (A2))

#define _SaveAttributes(Obj) \
    (*((_SaveAttributes_P) ((_Object) _Reference(Obj))->type->methods[_SaveAttributes_]))((_Object) _Reference(Obj))

#define _SaveComposite(Obj, A1, A2) \
    (*((_SaveComposite_P) ((_Object) _Reference(Obj))->type->methods[_SaveComposite_]))((_Object) _Reference(Obj), (A1), (A2))

#define _SaveList(Obj, A1, A2) \
    (*((_SaveList_P) ((_Object) _Reference(Obj))->type->methods[_SaveList_]))((_Object) _Reference(Obj), (A1), (A2))

#define _Select(Obj, A1) \
    (*((_Select_P) ((_Object) _Reference(Obj))->type->methods[_Select_]))((_Object) _Reference(Obj), (A1))

#define _SelectElement(Obj, A1, A2, A3) \
    (*((_SelectElement_P) ((_Object) _Reference(Obj))->type->methods[_SelectElement_]))((_Object) _Reference(Obj), (A1), (A2), (A3))

#define _SetAttribute(Obj, A1, A2) \
    (*((_SetAttribute_P) ((_Object) _Reference(Obj))->type->methods[_SetAttribute_]))((_Object) _Reference(Obj), (A1), (A2))

#define _SetAttributeCurrent(Obj, A1, A2) \
    (*((_SetAttributeCurrent_P) ((_Object) _Reference(Obj))->type->methods[_SetAttributeCurrent_]))((_Object) _Reference(Obj), (A1), (A2))

#define _SetCSProperty(Obj, A1, A2, A3) \
    (*((_SetCSProperty_P) ((_Object) _Reference(Obj))->type->methods[_SetCSProperty_]))((_Object) _Reference(Obj), (A1), (A2), (A3))

#define _SetContextCurrency(Obj, A1, A2, A3) \
    (*((_SetContextCurrency_P) ((_Object) _Reference(Obj))->type->methods[_SetContextCurrency_]))((_Object) _Reference(Obj), (A1), (A2), (A3))

#define _SetCurrency(Obj, A1, A2) \
    (*((_SetCurrency_P) ((_Object) _Reference(Obj))->type->methods[_SetCurrency_]))((_Object) _Reference(Obj), (A1), (A2))

#define _SetCursor(Obj, A1) \
    (*((_SetCursor_P) ((_Object) _Reference(Obj))->type->methods[_SetCursor_]))((_Object) _Reference(Obj), (A1))

#define _SetHsObjState(Obj, A1, A2) \
    (*((_SetHsObjState_P) ((_Object) _Reference(Obj))->type->methods[_SetHsObjState_]))((_Object) _Reference(Obj), (A1), (A2))

#define _SetProperty(Obj, A1, A2, A3, A4) \
    (*((_SetProperty_P) ((_Object) _Reference(Obj))->type->methods[_SetProperty_]))((_Object) _Reference(Obj), (A1), (A2), (A3), (A4))

#define _SetValue(Obj, A1, A2, A3, A4) \
    (*((_SetValue_P) ((_Object) _Reference(Obj))->type->methods[_SetValue_]))((_Object) _Reference(Obj), (A1), (A2), (A3), (A4))
#define _SetValue_S(Obj, A1, A2, A3, A4, MyType) \
    (*((_SetValue_P) (MyType)->supertype->methods[_SetValue_]))((_Object) _Reference(Obj), (A1), (A2), (A3), (A4))

#define _SetWindowState(Obj, A1, A2) \
    (*((_SetWindowState_P) ((_Object) _Reference(Obj))->type->methods[_SetWindowState_]))((_Object) _Reference(Obj), (A1), (A2))

#define _Store(Obj) \
    (*((_Store_P) ((_Object) _Reference(Obj))->type->methods[_Store_]))((_Object) _Reference(Obj))

#define _Update(Obj, A1, A2) \
    (*((_Update_P) ((_Object) _Reference(Obj))->type->methods[_Update_]))((_Object) _Reference(Obj), (A1), (A2))

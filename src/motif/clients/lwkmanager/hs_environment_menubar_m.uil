! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
!++
! COPYRIGHT (c) 1989, 1990, 1991 BY
! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.
! ALL RIGHTS RESERVED.
!
! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
! ONLY  IN  ACCORDANCE  OF  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE
! INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER
! COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
! OTHER PERSON.  NO TITLE TO AND  OWNERSHIP OF THE  SOFTWARE IS  HEREBY
! TRANSFERRED.
!
! THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE
! AND  SHOULD  NOT  BE  CONSTRUED  AS A COMMITMENT BY DIGITAL EQUIPMENT
! CORPORATION.
!
! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS
! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
!--
!++
!
! Facility:
!   LinkWorks Manager
!
! Abstract:
!+
!   DECwindows LinkWorks Manager User Interface Environment Window menubar
!   description file
!
! Author:
!   Andre Pavanello
!   Patricia Avigdor
!   Pascale Dardailler
!
! Creation Date:
!   31-Oct-89
!
! Modification History:
!
!--

value
    EnvFileLabel :
	compound_string("File");
    EnvFileMnemonic:
	mneumonic_F;
    	
    EnvOpenLbLabel :
	compound_string("Open Linkbase...");
    EnvOpenLbMnemonic:
	mneumonic_O;

    EnvExitLabel :
	compound_string("Exit");
    EnvExitMnemonic:
	mneumonic_E;

    EnvEditLabel :
	compound_string("Edit");
    EnvEditMnemonic:
	mneumonic_E;

    EnvCutLabel :
	compound_string("Cut");
    EnvCutMnemonic:
	mneumonic_t;

    EnvCopyLabel :
	compound_string("Copy");
    EnvCopyMnemonic:
	mneumonic_C;

    EnvPasteLabel :
	compound_string("Paste");
    EnvPasteMnemonic:
	mneumonic_P;

    EnvDeleteLabel :
	compound_string("Delete");
    EnvDeleteMnemonic:
	mneumonic_D;

    EnvControlLabel :
	compound_string("Control");
    EnvControlMnemonic:
	mneumonic_C;

    EnvUpdateLabel :
	compound_string("Update");
    EnvUpdateMnemonic:
	mneumonic_U;

    EnvViewLabel :
	compound_string("View");
    EnvViewMnemonic:
	mneumonic_V;

    EnvPropertiesLabel :
	compound_string("Properties...");
    EnvPropertiesMnemonic:
	mneumonic_P;

    EnvOptionsLabel :
	compound_string("Options");
    EnvOptionsMnemonic:
	mneumonic_O;

    EnvManagerLabel :
	compound_string("Manager...");
    EnvManagerMnemonic:
	mneumonic_M;

    EnvEnvironmentLabel :
	compound_string("Environment...");
    EnvEnvironmentMnemonic:
	mneumonic_E;
           
    EnvSaveAttrLabel :
	compound_string("Save Settings");
    EnvSaveAttrMnemonic:
	mneumonic_S;

    EnvRestoreAttrLabel :
	compound_string("Restore Settings");
    EnvRestoreAttrMnemonic:
	mneumonic_R;

    EnvRestoreSysAttrLabel :
	compound_string("Restore System Settings");
    EnvRestoreSysAttrMnemonic:
	mneumonic_y;

    EnvHelpMenuLabel :
	compound_string("Help");
    EnvHelpMnemonic:
	mneumonic_H;

    EnvHelpOnContextButtonLabel :
	compound_string("On Context");
    EnvOnContextMnemonic:
	mneumonic_C;

    EnvHelpOnWindowButtonLabel :   
	compound_string("On Window");
    EnvOnWindowMnemonic:
	mneumonic_W;

    EnvHelpOnTermsButtonLabel :
	compound_string("On Terms");
    EnvOnTermsMnemonic:
	mneumonic_T;

    EnvHelpOnVersionButtonLabel :
	compound_string("On Version");
    EnvOnVersionMnemonic:
	mneumonic_V;

procedure
    env_create_menubar(any);

    env_activate_open(any);
    env_activate_exit(any);

    env_map_control_menu(any);
    env_create_activate_btn(any);
    env_activate_activate(any);
    env_create_record_btn(any);
    env_activate_record(any);
    env_create_update_btn(any);
    env_activate_update(any);

    env_map_edit_menu(any);
    env_create_cut(any);
    env_activate_cut(any);
    env_create_copy(any);
    env_activate_copy(any);
    env_create_paste(any);
    env_activate_paste(any);
    env_create_delete(any);
    env_activate_delete(any);

    env_map_view_menu(any);
    env_create_properties_btn(any);
    env_activate_properties(any);
    env_create_expand_btn(any);
    env_activate_expand(any);

    env_activate_manager_attr(any);
    env_activate_environment_attr(any);
    env_activate_save_attr(any);
    env_activate_restore_attr(any);
    env_activate_restore_sys_attr(any);
    
!++
!   The Envigation Window menubar
!--

    object menu_bar : XmMenuBar {
	arguments {
	    XmNorientation = XmHORIZONTAL;
	    XmNmenuHelpWidget = XmCascadeButton help_entry;
	};
	controls {
	    XmCascadeButton file_entry;
	    XmCascadeButton edit_entry;
	    XmCascadeButton view_entry;
	    XmCascadeButton control_entry;
	    XmCascadeButton options_entry;
	    XmCascadeButton help_entry;
	};
	callbacks {
	    MrmNcreateCallback = procedure env_create_menubar(windowprivate);
!	    XmNhelpCallback = 
!		procedure env_context_sensitive_help(EnvMenubarHelpKey);
	};
    };


!++
!   The File menu
!--

    object file_entry : XmCascadeButton {
	arguments {
	    XmNlabelString = EnvFileLabel;
	    XmNmnemonic = EnvFileMnemonic;
	};
	controls {
	    XmPulldownMenu file_menu;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvFileHelpKey);
	};
    };

    object file_menu : XmPulldownMenu {
	controls {
	    XmPushButton open_button;
	    XmSeparator {};
	    XmPushButton exit_button;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvFileHelpKey);
	};
    };

    object open_button : XmPushButton {
	arguments {
	    XmNlabelString = EnvOpenLbLabel;
	    XmNmnemonic = EnvOpenLbMnemonic;
	};
	callbacks {
	    XmNactivateCallback = procedure env_activate_open(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvOpenLbHelpKey);
	};
    };
	
    object exit_button : XmPushButton {
	arguments {        
	    XmNlabelString = EnvExitLabel;
	    XmNmnemonic = EnvExitMnemonic;
	};
	callbacks {
	    XmNactivateCallback = procedure env_activate_exit(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvExitHelpKey);
	};
    };


!++
!   The Edit menu
!--

    object edit_entry : XmCascadeButton {
	arguments {
	    XmNlabelString = EnvEditLabel;
	    XmNmnemonic = EnvEditMnemonic;
	};
	controls {
	    XmPulldownMenu edit_menu;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvEditHelpKey);
	};
    };

    object edit_menu : XmPulldownMenu {
	controls {
	    XmPushButton cut_button;
	    XmPushButton copy_button;
	    XmPushButton paste_button;
	    XmSeparator {};
	    XmPushButton delete_button;
	};
	callbacks {
	    XmNmapCallback = procedure env_map_edit_menu(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvEditHelpKey);
	};
    };

    object cut_button : XmPushButton {
	arguments {
	    XmNlabelString = EnvCutLabel;
	    XmNaccelerator = CutAccelerator;
	    XmNacceleratorText	= CutAcceleratorText;
	    XmNmnemonic = EnvCutMnemonic;	    
	};
	callbacks {
	    MrmNcreateCallback = procedure env_create_cut(windowprivate);
	    XmNactivateCallback = procedure env_activate_cut(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvCutHelpKey);
	};
    };

    object copy_button : XmPushButton {
	arguments {
	    XmNlabelString = EnvCopyLabel;
	    XmNaccelerator = CopyAccelerator;
	    XmNacceleratorText	= CopyAcceleratorText;
	    XmNmnemonic = EnvCopyMnemonic;	    
	};
	callbacks {
	    MrmNcreateCallback = procedure env_create_copy(windowprivate);
	    XmNactivateCallback = procedure env_activate_copy(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvCopyHelpKey);
	};
    };

    object paste_button : XmPushButton {
	arguments {
	    XmNlabelString = EnvPasteLabel;
	    XmNaccelerator = PasteAccelerator;
	    XmNacceleratorText = PasteAcceleratorText;
	    XmNmnemonic = EnvPasteMnemonic;	    
	};
	callbacks {
	    MrmNcreateCallback = procedure env_create_paste(windowprivate);
	    XmNactivateCallback = procedure env_activate_paste(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvPasteHelpKey);
	};
    };

    object delete_button : XmPushButton {
	arguments {
	    XmNlabelString = EnvDeleteLabel;
	    XmNmnemonic = EnvDeleteMnemonic;	    
	};
	callbacks {
	    MrmNcreateCallback = procedure env_create_delete(windowprivate);
	    XmNactivateCallback = procedure env_activate_delete(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvDeleteHelpKey);
	};
    };


!++
!   The Control menu 
!--

    object control_entry : XmCascadeButton {
	arguments {
	    XmNlabelString = EnvControlLabel;
	    XmNmnemonic = EnvControlMnemonic;
	};
	controls {
	    XmPulldownMenu control_menu;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvControlHelpKey);
	};
    };

    object control_menu : XmPulldownMenu {
	controls {
	    XmPushButton activate_button;
	    XmPushButton record_button;
	    XmSeparator	{};
	    XmPushButton update_button;
	};
	callbacks {
	    XmNmapCallback = procedure env_map_control_menu(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvControlHelpKey);
	};
    };

    object activate_button : XmPushButton {
	!label set at run-time
	callbacks {
	    MrmNcreateCallback = 
		procedure env_create_activate_btn(windowprivate);
	    XmNactivateCallback = 
		procedure env_activate_activate(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvActivateHelpKey);
	};
    };

    object record_button : XmPushButton {
	!label set at run-time
	callbacks {
	    MrmNcreateCallback   = 
		procedure env_create_record_btn(windowprivate);
	    XmNactivateCallback = 
		procedure env_activate_record(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvRecordHelpKey);
	};
    };

    object update_button : XmPushButton {
	arguments {
	    XmNlabelString = EnvUpdateLabel;
	    XmNmnemonic = EnvUpdateMnemonic;
	};
	callbacks {
	    MrmNcreateCallback = procedure env_create_update_btn(windowprivate);
	    XmNactivateCallback = procedure env_activate_update(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvUpdateHelpKey);
	};
    };


!++
!   The View menu
!--

    object view_entry : XmCascadeButton {
	arguments {
	    XmNlabelString = EnvViewLabel;
	    XmNmnemonic = EnvViewMnemonic;
	};
	controls {
	    XmPulldownMenu view_menu;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvViewHelpKey);
	};
    };

    object view_menu : XmPulldownMenu {
	controls {
	    XmPushButton expand_button;
	    XmSeparator	{};
	    XmPushButton show_prop_button;
	};
	callbacks {
	    XmNmapCallback = procedure env_map_view_menu(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvViewHelpKey);
	};
    };

    object expand_button : XmPushButton {
	!label set at run-time
	callbacks {
	    MrmNcreateCallback = 
		procedure env_create_expand_btn(windowprivate);
	    XmNactivateCallback = 
		procedure env_activate_expand(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvExpandHelpKey);
	};
    };

    object show_prop_button : XmPushButton {
	arguments {
	    XmNlabelString = EnvPropertiesLabel;
	    XmNmnemonic = EnvPropertiesMnemonic;
	};
	callbacks {
	    MrmNcreateCallback = 
		procedure env_create_properties_btn(windowprivate);
	    XmNactivateCallback = 
		procedure env_activate_properties(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvPropertiesHelpKey);
	};
    };


!++
!   The options menu
!--

    object options_entry : XmCascadeButton {
	arguments {
	    XmNlabelString = EnvOptionsLabel;
	    XmNmnemonic = EnvOptionsMnemonic;
	};
	controls {
	    XmPulldownMenu options_menu;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvOptionsHelpKey);
	};
    };

    object options_menu : XmPulldownMenu {
	controls {
	    XmPushButton	manager_button;
	    XmPushButton	environment_button;
	    XmSeparator		{};
	    XmPushButton	save_attr_button;
	    XmPushButton	restore_attr_button;
	    XmPushButton	restore_sysattr_button;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvOptionsHelpKey);
	};
    };

    object manager_button : XmPushButton {
	arguments {
	    XmNlabelString = EnvManagerLabel;
	    XmNmnemonic = EnvManagerMnemonic;
	};
	callbacks {
	    XmNactivateCallback = 
		procedure env_activate_manager_attr(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvManagerHelpKey);
	};
    };

    object environment_button : XmPushButton {
	arguments {
	    XmNlabelString = EnvEnvironmentLabel;
	    XmNmnemonic = EnvEnvironmentMnemonic;
	};
	callbacks {
	    XmNactivateCallback = 
		procedure env_activate_environment_attr(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvEnvironmentHelpKey);
	};
    };

    object save_attr_button : XmPushButton {
	arguments {
	    XmNlabelString = EnvSaveAttrLabel;
	    XmNmnemonic = EnvSaveAttrMnemonic;
	};
	callbacks {
	    XmNactivateCallback = 
		procedure env_activate_save_attr(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvSaveAttrHelpKey);
	};
    };

    object restore_attr_button : XmPushButton {
	arguments {
	    XmNlabelString = EnvRestoreAttrLabel;
	    XmNmnemonic = EnvRestoreAttrMnemonic;
	};
	callbacks {
	    XmNactivateCallback = 
		procedure env_activate_restore_attr(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvRestoreAttrHelpKey);
	};
    };

    object restore_sysattr_button : XmPushButton {
	arguments {
	    XmNlabelString = EnvRestoreSysAttrLabel;
	    XmNmnemonic = EnvRestoreSysAttrMnemonic;
	};
	callbacks {
	    XmNactivateCallback = 
		procedure env_activate_restore_sys_attr(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvRestoreSysHelpKey);
	};
    };

!++
!   The Help Widget menu and buttons
!--

    object help_entry : XmCascadeButton {
	arguments {
	    XmNlabelString = EnvHelpMenuLabel;
	    XmNmnemonic = EnvHelpMnemonic;
	};
	controls {
	    XmPulldownMenu help_menu;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvHelpHelpKey);
	};
    };
                         
    object help_menu : XmPulldownMenu {
	controls {
	    XmPushButton help_on_context;
	    XmSeparator {};
	    XmPushButton help_on_window;
	    XmPushButton help_on_terms;
	    XmPushButton help_on_version;
	};
	callbacks {
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvHelpHelpKey);
	};
    };

    object help_on_context : XmPushButton {
	arguments {       
	    XmNlabelString = EnvHelpOnContextButtonLabel;
	    XmNmnemonic = EnvOnContextMnemonic;
    	};                          
	callbacks {
	    XmNactivateCallback = 
		procedure env_help_on_context_tracking(windowprivate);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvOnContextHelpKey);
	};
    };
	

    object help_on_window : XmPushButton {
	arguments {       
	    XmNlabelString = EnvHelpOnWindowButtonLabel;
	    XmNmnemonic = EnvOnWindowMnemonic;
    	};
	callbacks {
	    XmNactivateCallback = 
		procedure env_context_sensitive_help(EnvOnWindowFrameKey);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvOnWindowHelpKey);
	};
    };

    object help_on_terms : XmPushButton {
	arguments {
	    XmNlabelString = EnvHelpOnTermsButtonLabel;
	    XmNmnemonic = EnvOnTermsMnemonic;
	};
	callbacks {
	    XmNactivateCallback = 
		procedure env_context_sensitive_help(EnvOnTermsFrameKey);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvOnTermsHelpKey);
	};
    };

    object help_on_version : XmPushButton {
	arguments {
	    XmNlabelString = EnvHelpOnVersionButtonLabel;
	    XmNmnemonic = EnvOnVersionMnemonic;
	};
	callbacks {
	    XmNactivateCallback = 
		procedure env_context_sensitive_help(EnvOnVersionFrameKey);
	    XmNhelpCallback = 
		procedure env_context_sensitive_help(EnvOnVersionHelpKey);
	};
    };


!++
!   Include the rest of the menubar
!--

    include file "hs_common_menubar_m.uil";


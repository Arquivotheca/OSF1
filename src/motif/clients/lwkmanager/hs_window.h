/*
 * *****************************************************************
 * *                                                               *
 * *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
 * *                                                               *
 * *   All Rights Reserved.  Unpublished rights  reserved  under   *
 * *   the copyright laws of the United States.                    *
 * *                                                               *
 * *   The software contained on this media  is  proprietary  to   *
 * *   and  embodies  the  confidential  technology  of  Digital   *
 * *   Equipment Corporation.  Possession, use,  duplication  or   *
 * *   dissemination of the software and media is authorized only  *
 * *   pursuant to a valid written license from Digital Equipment  *
 * *   Corporation.                                                *
 * *                                                               *
 * *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
 * *   by the U.S. Government is subject to restrictions  as  set  *
 * *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
 * *   or  in  FAR 52.227-19, as applicable.                       *
 * *                                                               *
 * *****************************************************************
 */
/*
 * HISTORY
 */
/*
** Generated by ODL Version X0.1 on Tue Jul 14 11:01:22 1992
*/

/*
** COPYRIGHT (c) 1989 BY
** DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.
** ALL RIGHTS RESERVED.
**
** THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
** ONLY  IN  ACCORDANCE  OF  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE
** INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER
** COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
** OTHER PERSON.  NO TITLE TO AND  OWNERSHIP OF THE  SOFTWARE IS  HEREBY
** TRANSFERRED.
**
** THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE
** AND  SHOULD  NOT  BE  CONSTRUED  AS A COMMITMENT BY DIGITAL EQUIPMENT
** CORPORATION.
**
** DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS
** SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
*/

/*
** Private Type Definitions for the Window Object
*/

/*
** Abstract Type Definitions for subtypes of Object
*/

typedef _Object _List, _PtrTo _ListPtr;
typedef _Object _EnvWindow, _PtrTo _EnvWindowPtr;
typedef _Object _LbWindow, _PtrTo _LbWindowPtr;
typedef _Object _HsObject, _PtrTo _HsObjectPtr;
typedef _Object _EnvContext, _PtrTo _EnvContextPtr;

/*
** Window Instance Structure Definition
*/

typedef struct __Window {
        _Type type;
        _Position x;
        _Position y;
        _Cardinal width;
        _Cardinal height;
        lwk_dxm_ui lwk_ui;
        _AnyPtr   display_data;
        _StateFlags flags;
        struct __Window *nextwindow;
    } _WindowInstance, _PtrTo _Window, _PtrTo _PtrTo _WindowPtr;

/*
** Window Property Name Table Index Definitions
*/

#define _XPositionIndex 0
#define _YPositionIndex 1
#define _WidthIndex 2
#define _HeightIndex 3
#define _HisUiIndex 4
#define _DisplayDataIndex 5
#define _P_StateFlags "$StateFlags"
#define _StateFlagsIndex 6
#define _P_NextWindow "$NextWindow"
#define _NextWindowIndex 7

/*
** Window Property Name Table Definition
*/

#define _WindowPropertyNameTable \
    _PropertyNameTableEntry _Constant WindowPropertyNameTable[] = { \
        {_P_XPosition, _XPositionIndex, _True}, \
        {_P_YPosition, _YPositionIndex, _True}, \
        {_P_Width, _WidthIndex, _True}, \
        {_P_Height, _HeightIndex, _True}, \
        {_P_HisUi, _HisUiIndex, _True}, \
        {_P_DisplayData, _DisplayDataIndex, _True}, \
        {_P_StateFlags, _StateFlagsIndex, _False}, \
        {_P_NextWindow, _NextWindowIndex, _False}, \
        {(_String) 0, 0, _False} \
    }

/*
** Window Property Accessor Definitions
*/

#define _XPosition_of(Obj) ((_Window) _Reference(Obj))->x
#define _YPosition_of(Obj) ((_Window) _Reference(Obj))->y
#define _Width_of(Obj) ((_Window) _Reference(Obj))->width
#define _Height_of(Obj) ((_Window) _Reference(Obj))->height
#define _HisUi_of(Obj) ((_Window) _Reference(Obj))->lwk_ui
#define _DisplayData_of(Obj) ((_Window) _Reference(Obj))->display_data
#define _StateFlags_of(Obj) ((_Window) _Reference(Obj))->flags
#define _NextWindow_of(Obj) ((_Window) _Reference(Obj))->nextwindow

/*
** Include Generic Operation Support
*/

#include "hs_operation_prototypes.h"

/*
** Window Method Declarations
*/

_DeclareFunction(_Void EnvOpObjIllOp, (_in _Object object));
_DeclareFunction(_Window EnvOpObjCopy, (_in _Window object));
_DeclareFunction(_Window EnvOpObjCreate, (_in _Type type));
_DeclareFunction(_Window EnvOpWindowCreate, (_in _Type type));
_DeclareFunction(_Void EnvOpObjDelete, (_inout _Window object));
_DeclareFunction(_Void EnvOpWindowDisplayMessage, (_in _Window window,
    _Status *status, _Integer count));
_DeclareFunction(_Void EnvOpWindowFree, (_inout _Window object));
_DeclareFunction(_EnvWindow EnvOpWindowGetEnvWindow, (_in _Window window));
_DeclareFunction(_Boolean EnvOpWindowGetSelection, (
    _in _Window window, _in _GetSelectOperation operation,
    _inout _AnyPtr user_data));
_DeclareFunction(_Void EnvOpWindowGetValue, (_in _Window object,
    _in _String property_name, _in _Domain domain,
    _in _AnyPtr value));
_DeclareFunction(_Void EnvOpWindowHighlight, (_in _Window window,
    _in _HsObject hs_object));
_DeclareFunction(_Void EnvOpWindowInitialize, (_inout _Window object,
    _in _Window proto_object));
_DeclareFunction(_Boolean EnvOpObjIsType, (_in _Window object, _in _Type type));
_DeclareFunction(_Void EnvOpWindowPositionWindow, (_in _Window window));
_DeclareFunction(_Void EnvOpWindowRaiseWindow, (_in _Window window));
_DeclareFunction(_Void EnvOpWindowSelect, (_in _Window window,
    _in _HsObject hs_object));
_DeclareFunction(_Void EnvOpWindowSetCursor, (_in _Window window,
    _in _CursorType cursor_type));
_DeclareFunction(_Void EnvOpWindowSetValue, (_inout _Window object,
    _in _String property_name, _in _Domain domain,
    _in _AnyPtr value, _in _SetFlag flag));
_DeclareFunction(_Boolean EnvOpWindowSetWindowState, (
    _inout _Window window, _in _WindowState state,
    _in _StateOperation operation));

/*
** Window Type Instance Definition
*/

#define _WindowTypeInstance \
    _TypeInstance _Constant HS__WindowTypeInstance = { \
        &HS__ObjectTypeInstance, \
        0, \
        { \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjCopy, \
        (_Method) EnvOpObjCreate, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpWindowCreate, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjDelete, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpWindowDisplayMessage, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpWindowFree, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpWindowGetEnvWindow, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpWindowGetSelection, \
        (_Method) EnvOpWindowGetValue, \
        (_Method) EnvOpWindowHighlight, \
        (_Method) EnvOpWindowInitialize, \
        (_Method) EnvOpObjIsType, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpWindowPositionWindow, \
        (_Method) EnvOpWindowRaiseWindow, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpWindowSelect, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpWindowSetCursor, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpWindowSetValue, \
        (_Method) EnvOpWindowSetWindowState, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp \
        } \
    }

#define _WindowType \
    _Type _Constant HS__WindowType = &HS__WindowTypeInstance

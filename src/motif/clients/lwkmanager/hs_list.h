/*
 * *****************************************************************
 * *                                                               *
 * *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
 * *                                                               *
 * *   All Rights Reserved.  Unpublished rights  reserved  under   *
 * *   the copyright laws of the United States.                    *
 * *                                                               *
 * *   The software contained on this media  is  proprietary  to   *
 * *   and  embodies  the  confidential  technology  of  Digital   *
 * *   Equipment Corporation.  Possession, use,  duplication  or   *
 * *   dissemination of the software and media is authorized only  *
 * *   pursuant to a valid written license from Digital Equipment  *
 * *   Corporation.                                                *
 * *                                                               *
 * *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
 * *   by the U.S. Government is subject to restrictions  as  set  *
 * *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
 * *   or  in  FAR 52.227-19, as applicable.                       *
 * *                                                               *
 * *****************************************************************
 */
/*
 * HISTORY
 */
/*
** Generated by ODL Version X0.1 on Tue Jul 14 11:01:21 1992
*/

/*
** COPYRIGHT (c) 1989 BY
** DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.
** ALL RIGHTS RESERVED.
**
** THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
** ONLY  IN  ACCORDANCE  OF  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE
** INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER
** COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
** OTHER PERSON.  NO TITLE TO AND  OWNERSHIP OF THE  SOFTWARE IS  HEREBY
** TRANSFERRED.
**
** THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE
** AND  SHOULD  NOT  BE  CONSTRUED  AS A COMMITMENT BY DIGITAL EQUIPMENT
** CORPORATION.
**
** DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS
** SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
*/

/*
** Private Type Definitions for the List Object
*/

/*
** Abstract Type Definitions for subtypes of Object
*/

typedef _Object _Window, _PtrTo _WindowPtr;
typedef _Object _EnvWindow, _PtrTo _EnvWindowPtr;
typedef _Object _LbWindow, _PtrTo _LbWindowPtr;
typedef _Object _HsObject, _PtrTo _HsObjectPtr;
typedef _Object _EnvContext, _PtrTo _EnvContextPtr;

/*
** List Instance Structure Definition
*/

typedef struct __List {
        _Type type;
        _Domain domain;
        _Integer count;
        _Boolean sorted;
        _Integer alloc;
        _AnyValue *elements;
    } _ListInstance, _PtrTo _List, _PtrTo _PtrTo _ListPtr;

/*
** List Property Name Table Index Definitions
*/

#define _DomainIndex 0
#define _ElementCountIndex 1
#define _SortedIndex 2
#define _P_ElementAlloc "$ElementAlloc"
#define _ElementAllocIndex 3
#define _P_Elements "$Elements"
#define _ElementsIndex 4

/*
** List Property Name Table Definition
*/

#define _ListPropertyNameTable \
    _PropertyNameTableEntry _Constant ListPropertyNameTable[] = { \
        {_P_Domain, _DomainIndex, _True}, \
        {_P_ElementCount, _ElementCountIndex, _True}, \
        {_P_Sorted, _SortedIndex, _True}, \
        {_P_ElementAlloc, _ElementAllocIndex, _False}, \
        {_P_Elements, _ElementsIndex, _False}, \
        {(_String) 0, 0, _False} \
    }

/*
** List Property Accessor Definitions
*/

#define _Domain_of(Obj) ((_List) _Reference(Obj))->domain
#define _ElementCount_of(Obj) ((_List) _Reference(Obj))->count
#define _Sorted_of(Obj) ((_List) _Reference(Obj))->sorted
#define _ElementAlloc_of(Obj) ((_List) _Reference(Obj))->alloc
#define _Elements_of(Obj) ((_List) _Reference(Obj))->elements

/*
** Include Generic Operation Support
*/

#include "hs_operation_prototypes.h"

/*
** List Method Declarations
*/

_DeclareFunction(_Void EnvOpListAddElement, (_inout _List list,
    _in _Domain domain, _in _AnyPtr element, _in _Boolean copy));
_DeclareFunction(_Void EnvOpListAppendElements, (_in _List list,
    _in _List append));
_DeclareFunction(_Void EnvOpObjIllOp, (_in _Object object));
_DeclareFunction(_List EnvOpObjCopy, (_in _List object));
_DeclareFunction(_List EnvOpObjCreate, (_in _Type type));
_DeclareFunction(_List EnvOpListCreate, (_in _Type type,
    _in _Domain domain, _in _Integer estimated_count));
_DeclareFunction(_Void EnvOpListDeleteElement, (_inout _List list,
    _in _Domain domain, _in _AnyPtr element));
_DeclareFunction(_Void EnvOpObjDelete, (_inout _List object));
_DeclareFunction(_Void EnvOpListFree, (_inout _List object));
_DeclareFunction(_Void EnvOpListGetValue, (_in _List object,
    _in _String property_name, _in _Domain domain,
    _in _AnyPtr value));
_DeclareFunction(_Void EnvOpListInitialize, (_inout _List object,
    _in _List proto_object));
_DeclareFunction(_Boolean EnvOpObjIsType, (_in _List object, _in _Type type));
_DeclareFunction(_Closure EnvOpListIterate, (_in _List list,
    _in _Domain domain, _in _Closure closure,
    _in _Callback routine));
_DeclareFunction(_Void EnvOpListRemoveElement, (_inout _List list,
    _in _Domain domain, _in _AnyPtr element));
_DeclareFunction(_Void EnvOpListSelectElement, (_in _List list,
    _in _Integer index, _in _Domain domain, _out _AnyPtr element));
_DeclareFunction(_Void EnvOpListSetValue, (_inout _List object,
    _in _String property_name, _in _Domain domain,
    _in _AnyPtr value, _in _SetFlag flag));

/*
** List Type Instance Definition
*/

#define _ListTypeInstance \
    _TypeInstance _Constant HS__ListTypeInstance = { \
        &HS__ObjectTypeInstance, \
        sizeof(_ListInstance), \
        { \
        (_Method) EnvOpListAddElement, \
        (_Method) EnvOpListAppendElements, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjCopy, \
        (_Method) EnvOpObjCreate, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpListCreate, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpListDeleteElement, \
        (_Method) EnvOpObjDelete, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpListFree, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpListGetValue, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpListInitialize, \
        (_Method) EnvOpObjIsType, \
        (_Method) EnvOpListIterate, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpListRemoveElement, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpListSelectElement, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpListSetValue, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp, \
        (_Method) EnvOpObjIllOp \
        } \
    }

#define _ListType \
    _Type _Constant HS__ListType = &HS__ListTypeInstance

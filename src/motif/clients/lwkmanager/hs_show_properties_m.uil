! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
!++
! COPYRIGHT (c) 1990, 1991 BY
! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.
! ALL RIGHTS RESERVED.
!
! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
! ONLY  IN  ACCORDANCE  OF  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE
! INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER
! COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
! OTHER PERSON.  NO TITLE TO AND  OWNERSHIP OF THE  SOFTWARE IS  HEREBY
! TRANSFERRED.
!
! THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE
! AND  SHOULD  NOT  BE  CONSTRUED  AS A COMMITMENT BY DIGITAL EQUIPMENT
! CORPORATION.
!
! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS
! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
!--

!++
!
! Facility:
!   LinkWorks Manager
!
! Abstract:
!   Defines the various "Show Properties" dialog boxes.
!
! Author:
!   W. Ward Clark, MEMEX Project
!   Pascale Dardailler, MEMEX Project
!
! Creation Date:  14-Feb-90
!
! Modification History:
!--

!++
! Beginning of I18N Translatable values for this Module
!--

! Titles for all Show Properties boxes
!
value
    prop_lb_box_title : exported
	compound_string(ApplicationNameBase & "Linkbase Properties");
    prop_linknet_create_box_title : exported
	compound_string(ApplicationNameBase & "Create Linknet");
    prop_linknet_show_box_title : exported
	compound_string(ApplicationNameBase & "Linknet Properties");
    prop_net_list_create_box_title : exported
	compound_string(ApplicationNameBase & "Create Linknet List");
    prop_net_list_show_box_title : exported
	compound_string(ApplicationNameBase & "Linknet List Properties");
    prop_path_create_box_title : exported
	compound_string(ApplicationNameBase & "Create Path");
    prop_path_show_box_title : exported
	compound_string(ApplicationNameBase & "Path Properties");
    prop_path_list_create_box_title : exported
	compound_string(ApplicationNameBase & "Create Path List");
    prop_path_list_show_box_title : exported
	compound_string(ApplicationNameBase & "Path List Properties");
    prop_date_time_xnl_format : exported
	compound_string("%c");

!
! Labels for the various property labels
!
value

    prop_name_label_label :
	compound_string("Name ");
    prop_description_label_label :
	compound_string("Description ");
    prop_file_label_label :
	compound_string("File ");
    prop_connections_label_label :
	compound_string("Links ");
    prop_steps_label_label :
	compound_string("Steps ");
    prop_author_label_label :
	compound_string("Author ");
    prop_date_label_label :
	compound_string("Creation Date ");

! Labels for the Push Buttons
!
value
    prop_ok_label :
	compound_string("OK");
    prop_apply_label :
	compound_string("Apply");
    prop_reset_label :
	compound_string("Reset");
    prop_cancel_label :
	compound_string("Cancel");
    prop_help_label :
	compound_string("Help");

! To make all the Labels in the Push Buttons the same width, 
! this value should be large enough so that the Label of the 
! largest Push Button just fits.
!
value
    prop_max_button_width : 65; ! Max width of Ok, Apply, Reset, Cancel and
				! Help labels.
    PropOkBLeftPos	    :  2;
    PropApplyBLeftPos	    : 22;
    PropResetBLeftPos	    : 42;
    PropCancelBLeftPos	    : 62;
    LbPropCancelBLeftPos    : 40;
    PropHelpBLeftPos	    : 82;

! You should play with these two values to have the text widgets vertically 
! aligned at some place, and aligned with the corresponding label.

    PropTextLeftOffset	    : 120;
    PropTextTopOffset	    : -4;
    LbPropTextLeftOffset    : 50;
    
!++
! End of I18N Translatable values for this Module
!--

! Callback Procedures
!
procedure
    prop_create_name(any);
    prop_create_description(any);
    prop_create_author(any);
    prop_create_date(any);
    prop_create_extra(any);

    prop_change_name(any);
    prop_change_description(any);

    prop_create_ok(any);
    prop_activate_ok(any);       
    prop_create_apply(any);
    prop_activate_apply(any);       
    prop_create_reset(any);
    prop_activate_reset(any);       
    prop_create_cancel(any);
    prop_activate_cancel(any);


! Common arguments for all Show Properties boxes
!
list
    prop_show_box_common: 
	arguments {
	    XmNhorizontalSpacing    = EnvDefaultDialogBorder;
	    XmNverticalSpacing	    = EnvDefaultDialogBorder;
	    XmNdefaultPosition	    = true;
	    XmNautoUnmanage	    = false;
	};

    prop_read_only_text : 
	arguments {
	    XmNleftAttachment       = XmATTACH_FORM;
	    XmNtopAttachment	    = XmATTACH_OPPOSITE_WIDGET;
	    XmNwordWrap		    = false;
	    XmNeditable		    = false;
	    XmNcursorPositionVisible = false;
	    XmNtraversalOn	    = true;
	    XmNshadowThickness	    = 0;
	};

    prop_read_write_text : 
	arguments {
	    XmNleftAttachment       = XmATTACH_FORM;
	    XmNtopAttachment	    = XmATTACH_OPPOSITE_WIDGET;
	    XmNtraversalOn	    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	    XmNshadowThickness	    = EnvDefaultShadowThickness;
	};
               
    prop_ok_button : 
	arguments {
	    XmNlabelString	    = prop_ok_label;
	    XmNwidth		    = prop_max_button_width;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNleftAttachment	    = XmATTACH_POSITION;
	    XmNleftPosition	    = PropOkBLeftPos;
	    XmNsensitive	    = false;
	    XmNtraversalOn	    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};
	
    prop_apply_button : 
	arguments {
	    XmNlabelString	    = prop_apply_label;
	    XmNwidth		    = prop_max_button_width;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNleftAttachment	    = XmATTACH_POSITION;
	    XmNleftPosition	    = PropApplyBLeftPos;
	    XmNsensitive	    = false;
	    XmNtraversalOn	    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};
	
    prop_reset_button : 
	arguments {
	    XmNlabelString	    = prop_reset_label;
	    XmNwidth		    = prop_max_button_width;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNleftAttachment	    = XmATTACH_POSITION;
	    XmNleftPosition	    = PropResetBLeftPos;
	    XmNsensitive	    = false;
	    XmNtraversalOn	    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};
	
    prop_cancel_button : 
	arguments {
	    XmNlabelString	    = prop_cancel_label;
	    XmNwidth		    = prop_max_button_width;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNleftAttachment	    = XmATTACH_POSITION;
	    XmNtraversalOn	    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};

    prop_help_button : 
	arguments {
	    XmNlabelString	    = prop_help_label;
	    XmNwidth		    = prop_max_button_width;
	    XmNtopAttachment	    = XmATTACH_WIDGET;
	    XmNleftAttachment       = XmATTACH_POSITION;
	    XmNleftPosition	    = PropHelpBLeftPos;
	    XmNtraversalOn	    = true;
	    XmNhighlightThickness   = EnvDefaultHighlightThickness;
	};


! Show Linknet Properties box
!

object 
    linknet_prop_box : XmFormDialog {
        arguments {
            arguments		prop_show_box_common;
            XmNdefaultButton	= XmPushButton prop_linknet_cancel;
            XmNcancelButton	= XmPushButton prop_linknet_cancel;
        };
 
	controls {
	    XmForm	 linknet_prop_control;
            XmPushButton prop_linknet_ok;
	    XmPushButton prop_linknet_apply;
	    XmPushButton prop_linknet_reset;
	    XmPushButton prop_linknet_cancel;
	    XmPushButton prop_linknet_help;
	    XmSeparator  linknet_margin_separator;
	};
	
	callbacks {
	    XmNhelpCallback = procedure env_context_sensitive_help(prop_linknet_box_HelpKey);
	};
    };
    
object
    linknet_prop_control : XmForm {
	arguments {
	    XmNhorizontalSpacing    = EnvDefaultMarginWidth;
	    XmNverticalSpacing      = EnvDefaultShadowThickness;
	    XmNshadowType	    = EnvDefaultShadowType;
	    XmNshadowThickness	    = EnvDefaultShadowThickness;
	    XmNtopAttachment        = XmATTACH_FORM;
	    XmNleftAttachment       = XmATTACH_FORM;
	    XmNrightAttachment      = XmATTACH_FORM;
	};
	
        controls {
	    XmForm	linknet_label_text_control;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_linknet_box_HelpKey);
	};
    };

object
    linknet_label_text_control : XmForm {
	arguments {
	    XmNverticalSpacing      = EnvDefaultHeightBetweenLabels;
	    XmNtopAttachment        = XmATTACH_FORM;
	    XmNleftAttachment       = XmATTACH_FORM;
	    XmNbottomAttachment     = XmATTACH_FORM;
	    XmNrightAttachment      = XmATTACH_FORM;
	};
	
        controls {
	    XmLabel prop_name_label;
            XmLabel prop_description_label; 
            XmLabel prop_linknet_connections_label;
            XmLabel prop_linknet_author_label;
            XmLabel prop_linknet_date_label;
	    DXmCSText prop_name_text;
	    DXmCSText prop_description_text;
	    DXmCSText prop_linknet_connections_text;
	    DXmCSText prop_linknet_author_text;
	    DXmCSText prop_linknet_date_text;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_linknet_box_HelpKey);
	};
    };

object
    prop_name_label : XmLabel {
	arguments {
	    XmNlabelString	= prop_name_label_label;
	    XmNalignment	= XmALIGNMENT_BEGINNING;
	    XmNtopAttachment	= XmATTACH_FORM;
	    XmNleftAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_name_HelpKey);
	};
    };

object
    prop_description_label : XmLabel {
	arguments {
	    XmNlabelString	= prop_description_label_label;
	    XmNalignment	= XmALIGNMENT_BEGINNING;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopWidget	= XmLabel prop_name_label;
	    XmNleftAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_description_HelpKey);
	};
    };

object
    prop_linknet_connections_label : XmLabel {
	arguments {
	    XmNlabelString	= prop_connections_label_label;
	    XmNalignment	= XmALIGNMENT_BEGINNING;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopWidget	= XmLabel prop_description_label;
	    XmNleftAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_connections_HelpKey);
	};
    };
                            
object
    prop_linknet_author_label : XmLabel {
	arguments {
	    XmNlabelString	= prop_author_label_label;
	    XmNalignment	= XmALIGNMENT_BEGINNING;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopWidget	= XmLabel prop_linknet_connections_label;
	    XmNleftAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_author_HelpKey);
	};
    };

object
    prop_linknet_date_label : XmLabel {
	arguments {
	    XmNlabelString	= prop_date_label_label;
	    XmNalignment	= XmALIGNMENT_BEGINNING;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopWidget	= XmLabel prop_linknet_author_label;
	    XmNleftAttachment	= XmATTACH_FORM;
	    XmNbottomAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_date_HelpKey);
	};
    };
                                
object 
    prop_name_text : DXmCSText
    {
	arguments {
            arguments		prop_read_write_text;
	    XmNtopWidget	= XmLabel prop_name_label;
	    XmNtopOffset        = PropTextTopOffset;
	    XmNleftOffset	= PropTextLeftOffset;
	    XmNrightAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_name(windowprivate);
	    XmNvalueChangedCallback = procedure prop_change_name(windowprivate);
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_name_text_HelpKey);
	};
    };

object 
    prop_description_text : DXmCSText
 {
	arguments {
            arguments		prop_read_write_text;
	    XmNtopWidget        = XmLabel prop_description_label;
	    XmNtopOffset        = PropTextTopOffset;
	    XmNleftOffset	= PropTextLeftOffset;
	    XmNrightAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    MrmNcreateCallback = procedure 
		prop_create_description(windowprivate);
	    XmNvalueChangedCallback = procedure 
		prop_change_description(windowprivate);
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_description_text_HelpKey);
	};
    };

object 
    prop_linknet_connections_text : DXmCSText {
	arguments {
            arguments		prop_read_only_text;
	    XmNtopWidget        = XmLabel prop_linknet_connections_label;
	    XmNtopOffset        = PropTextTopOffset;
	    XmNleftOffset	= PropTextLeftOffset;
	    XmNrightAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_extra(windowprivate);
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_connections_text_HelpKey);
	};
    };

object 
    prop_linknet_author_text : DXmCSText
 {
	arguments {
            arguments		prop_read_only_text;
	    XmNtopWidget        = XmLabel prop_linknet_author_label;
	    XmNtopOffset        = PropTextTopOffset;
	    XmNleftOffset	= PropTextLeftOffset;
	    XmNrightAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_author(windowprivate);
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_author_text_HelpKey);
	};
    };

object 
    prop_linknet_date_text : DXmCSText {
	arguments {
            arguments		prop_read_only_text;
	    XmNtopWidget        = XmLabel prop_linknet_date_label;
	    XmNtopOffset        = PropTextTopOffset;
	    XmNleftOffset	= PropTextLeftOffset;
	    XmNrightAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_date(windowprivate);
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_date_text_HelpKey);
	};
    };

object 
    prop_linknet_ok : XmPushButton {
	arguments {
	    arguments	    prop_ok_button;
	    XmNtopWidget    = XmForm linknet_prop_control;
	};
	
	callbacks {
	    MrmNcreateCallback = procedure prop_create_ok(windowprivate);
            XmNactivateCallback = procedure prop_activate_ok(windowprivate);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_ok_HelpKey);
	};
    };

object 
    prop_linknet_apply : XmPushButton {
	arguments {
	    arguments	    prop_apply_button;
	    XmNtopWidget    = XmForm linknet_prop_control;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_apply(windowprivate);
            XmNactivateCallback = procedure prop_activate_apply(windowprivate);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_apply_HelpKey);
	};
    };
	
object 
    prop_linknet_reset : XmPushButton {
	arguments {
	    arguments	    prop_reset_button;
	    XmNtopWidget    = XmForm linknet_prop_control;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_reset(windowprivate);
            XmNactivateCallback = procedure prop_activate_reset(windowprivate);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_reset_HelpKey);
	};
    };
	
object                   
    prop_linknet_cancel : XmPushButton {
	arguments {
	    arguments		prop_cancel_button;
	    XmNtopWidget	= XmForm linknet_prop_control;
	    XmNleftPosition	= PropCancelBLeftPos;
	    XmNshowAsDefault	= EnvDefaultPBShadow;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_cancel(windowprivate);
            XmNactivateCallback = procedure prop_activate_cancel(windowprivate);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_cancel_HelpKey);
	};
    };

object                   
    prop_linknet_help : XmPushButton {
	arguments {
	    arguments	    prop_help_button;
	    XmNtopWidget    = XmForm linknet_prop_control;
	};

	callbacks {
            XmNactivateCallback = procedure 
		env_context_sensitive_help(prop_linknet_box_HelpKey);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_help_HelpKey);
	};
    };

object
    linknet_margin_separator : XmSeparator {
	arguments {
	    XmNseparatorType	= XmNO_LINE;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopWidget	= prop_linknet_ok;
	 };
    };
     

! Show Linknet List Properties box
!

object 
    net_list_prop_box : XmFormDialog {
        arguments {
            arguments		prop_show_box_common;
            XmNdefaultButton	= XmPushButton prop_list_cancel;
            XmNcancelButton	= XmPushButton prop_list_cancel;
        };
 
        controls {
	    XmForm	 list_prop_control;
            XmPushButton prop_list_ok;
	    XmPushButton prop_list_apply;
	    XmPushButton prop_list_reset;
	    XmPushButton prop_list_cancel;
	    XmPushButton prop_net_list_help;
	    XmSeparator	 list_margin_separator;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_net_list_box_HelpKey);
	};
    };

object 
    list_prop_control : XmForm {
	arguments {
	    XmNhorizontalSpacing    = EnvDefaultMarginWidth;
	    XmNverticalSpacing	    = EnvDefaultShadowThickness;
	    XmNshadowType	    = EnvDefaultShadowType;
	    XmNshadowThickness	    = EnvDefaultShadowThickness;
	    XmNtopAttachment        = XmATTACH_FORM;
	    XmNleftAttachment       = XmATTACH_FORM;
	    XmNrightAttachment      = XmATTACH_FORM;
	};
	
	controls {
	    XmForm	list_label_text_control;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_net_list_box_HelpKey);
	};
    };

object
    list_label_text_control : XmForm {
	arguments {
	    XmNverticalSpacing      = EnvDefaultHeightBetweenLabels;
	    XmNtopAttachment        = XmATTACH_FORM;
	    XmNleftAttachment       = XmATTACH_FORM;
	    XmNbottomAttachment     = XmATTACH_FORM;
	    XmNrightAttachment      = XmATTACH_FORM;
	};
	
        controls {
	    XmLabel prop_name_label;
            XmLabel prop_description_label; 
            XmLabel prop_list_author_label;
            XmLabel prop_list_date_label;
	    DXmCSText prop_name_text;
	    DXmCSText prop_description_text;
	    DXmCSText prop_list_author_text;
	    DXmCSText prop_list_date_text;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_net_list_box_HelpKey);
	};
    };

object
    prop_list_author_label : XmLabel {
	arguments {
	    XmNlabelString	= prop_author_label_label;
	    XmNalignment	= XmALIGNMENT_BEGINNING;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopWidget	= XmLabel prop_description_label;
	    XmNleftAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_author_HelpKey);
	};
    };

object
    prop_list_date_label : XmLabel {
	arguments {
	    XmNlabelString	= prop_date_label_label;
	    XmNalignment	= XmALIGNMENT_BEGINNING;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopWidget	= XmLabel prop_list_author_label;
	    XmNleftAttachment	= XmATTACH_FORM;
	    XmNbottomAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_date_HelpKey);
	};
    };

object 
    prop_list_author_text : DXmCSText {
	arguments {
            arguments		prop_read_only_text;
	    XmNtopWidget	= XmLabel prop_list_author_label;
	    XmNtopOffset        = PropTextTopOffset;
	    XmNleftOffset	= PropTextLeftOffset;
	    XmNrightAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_author(windowprivate);
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_author_text_HelpKey);
	};
    };

object 
    prop_list_date_text : DXmCSText {
	arguments {
            arguments		prop_read_only_text;
	    XmNtopWidget	= XmLabel prop_list_date_label;
	    XmNtopOffset        = PropTextTopOffset;
	    XmNleftOffset	= PropTextLeftOffset;
	    XmNrightAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_date(windowprivate);
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_date_text_HelpKey);
	};
    };

object 
    prop_list_ok : XmPushButton {
	arguments {
	    arguments	    prop_ok_button;
	    XmNtopWidget    = XmForm list_prop_control;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_ok(windowprivate);
            XmNactivateCallback = procedure prop_activate_ok(windowprivate);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_ok_HelpKey);
	};
    };

object 
    prop_list_apply : XmPushButton {
	arguments {
	    arguments	    prop_apply_button;
	    XmNtopWidget    = XmForm list_prop_control;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_apply(windowprivate);
            XmNactivateCallback = procedure prop_activate_apply(windowprivate);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_apply_HelpKey);
	};
    };
	
object 
    prop_list_reset : XmPushButton {
	arguments {
	    arguments	    prop_reset_button;
	    XmNtopWidget    = XmForm list_prop_control;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_reset(windowprivate);
            XmNactivateCallback = procedure prop_activate_reset(windowprivate);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_reset_HelpKey);
	};
    };

object 
    prop_list_cancel : XmPushButton {
	arguments {
	    arguments		prop_cancel_button;
	    XmNtopWidget	= XmForm list_prop_control;
	    XmNleftPosition	= PropCancelBLeftPos;
	    XmNshowAsDefault	= EnvDefaultPBShadow;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_cancel(windowprivate);
            XmNactivateCallback = procedure prop_activate_cancel(windowprivate);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_cancel_HelpKey);
	};
    };

object 
    prop_net_list_help : XmPushButton {
	arguments {
	    arguments	    prop_help_button;
	    XmNtopWidget    = XmForm list_prop_control;
	};

	callbacks {
            XmNactivateCallback = procedure 
		env_context_sensitive_help(prop_net_list_box_HelpKey);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_help_HelpKey);
	};
    };

object
    list_margin_separator : XmSeparator {
	arguments {
	    XmNseparatorType	= XmNO_LINE;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopWidget	= prop_list_ok;
	 };
    };
     

! Show Path Properties box
!

object 
    path_prop_box : XmFormDialog {
        arguments {
            arguments		prop_show_box_common;
            XmNdefaultButton	= XmPushButton prop_path_cancel;
            XmNcancelButton	= XmPushButton prop_path_cancel;
        };
 
        controls {
	    XmForm	 path_prop_control;
            XmPushButton prop_path_ok;
	    XmPushButton prop_path_apply;
	    XmPushButton prop_path_reset;
	    XmPushButton prop_path_cancel;
	    XmPushButton prop_path_help;
	    XmSeparator  path_margin_separator;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_path_box_HelpKey);
	};
    };

object 
    path_prop_control : XmForm {
	arguments {
	    XmNhorizontalSpacing    = EnvDefaultMarginWidth;
	    XmNverticalSpacing	    = EnvDefaultShadowThickness;
	    XmNshadowType	    = EnvDefaultShadowType;
	    XmNshadowThickness	    = EnvDefaultShadowThickness;
	    XmNtopAttachment        = XmATTACH_FORM;
	    XmNleftAttachment       = XmATTACH_FORM;
	    XmNrightAttachment      = XmATTACH_FORM;
	};
	
	controls {
	    XmForm	path_label_text_control;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_path_box_HelpKey);
	};
    };

object
    path_label_text_control : XmForm {
	arguments {
	    XmNverticalSpacing      = EnvDefaultHeightBetweenLabels;
	    XmNresizable	    = false;
	    XmNtopAttachment        = XmATTACH_FORM;
	    XmNleftAttachment       = XmATTACH_FORM;
	    XmNbottomAttachment     = XmATTACH_FORM;
	    XmNrightAttachment      = XmATTACH_FORM;
	};
	
        controls {
	    XmLabel prop_name_label;
            XmLabel prop_description_label; 
            XmLabel prop_path_steps_label;
            XmLabel prop_path_author_label;
            XmLabel prop_path_date_label;
	    DXmCSText prop_name_text;
	    DXmCSText prop_description_text;
	    DXmCSText prop_path_steps_text;
	    DXmCSText prop_path_author_text;
	    DXmCSText prop_path_date_text;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_path_box_HelpKey);
	};
    };

object
    prop_path_steps_label : XmLabel {
	arguments {
	    XmNlabelString	= prop_steps_label_label;
	    XmNalignment	= XmALIGNMENT_BEGINNING;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopWidget	= XmLabel prop_description_label;
	    XmNleftAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_steps_HelpKey);
	};
    };

object
    prop_path_author_label : XmLabel {
	arguments {
	    XmNlabelString	= prop_author_label_label;
	    XmNalignment	= XmALIGNMENT_BEGINNING;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopWidget	= XmLabel prop_path_steps_label;
	    XmNleftAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_author_HelpKey);
	};
    };

object
    prop_path_date_label : XmLabel {
	arguments {
	    XmNlabelString	= prop_date_label_label;
	    XmNalignment	= XmALIGNMENT_BEGINNING;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopWidget	= XmLabel prop_path_author_label;
	    XmNleftAttachment	= XmATTACH_FORM;
	    XmNbottomAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_date_HelpKey);
	};
    };

object 
    prop_path_steps_text : DXmCSText {
	arguments {
            arguments		prop_read_only_text;
	    XmNtopWidget	= XmLabel prop_path_steps_label;
	    XmNtopOffset        = PropTextTopOffset;
	    XmNleftOffset	= PropTextLeftOffset;
	    XmNrightAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_extra(windowprivate);
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_steps_text_HelpKey);
	};
    };

object 
    prop_path_author_text : DXmCSText {
	arguments {
            arguments		prop_read_only_text;
	    XmNtopWidget	= XmLabel prop_path_author_label;
	    XmNtopOffset        = PropTextTopOffset;
	    XmNleftOffset	= PropTextLeftOffset;
	    XmNrightAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_author(windowprivate);
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_author_text_HelpKey);
	};
    };

object 
    prop_path_date_text : DXmCSText {
	arguments {
            arguments		prop_read_only_text;
	    XmNtopWidget	= XmLabel prop_path_date_label;
	    XmNtopOffset        = PropTextTopOffset;
	    XmNleftOffset	= PropTextLeftOffset;
	    XmNrightAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_date(windowprivate);
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_date_text_HelpKey);
	};
    };

object 
    prop_path_ok : XmPushButton {
	arguments {
	    arguments	    prop_ok_button;
	    XmNtopWidget    = XmForm path_prop_control; 
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_ok(windowprivate);
            XmNactivateCallback = procedure prop_activate_ok(windowprivate);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_ok_HelpKey);
	};
    };

object 
    prop_path_apply : XmPushButton {
	arguments {
	    arguments	    prop_apply_button;
	    XmNtopWidget    = XmForm path_prop_control; 
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_apply(windowprivate);
            XmNactivateCallback = procedure prop_activate_apply(windowprivate);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_apply_HelpKey);
	};
    };
	
object 
    prop_path_reset : XmPushButton {
	arguments {
	    arguments	    prop_reset_button;
	    XmNtopWidget    = XmForm path_prop_control; 
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_reset(windowprivate);
            XmNactivateCallback = procedure prop_activate_reset(windowprivate);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_reset_HelpKey);
	};
    };

object 
    prop_path_cancel : XmPushButton {
	arguments {
	    arguments		prop_cancel_button;
	    XmNtopWidget	= XmForm path_prop_control; 
	    XmNleftPosition	= PropCancelBLeftPos;
	    XmNshowAsDefault	= EnvDefaultPBShadow;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_cancel(windowprivate);
            XmNactivateCallback = procedure prop_activate_cancel(windowprivate);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_cancel_HelpKey);
	};
    };

object 
    prop_path_help : XmPushButton {
	arguments {
	    arguments	    prop_help_button;
	    XmNtopWidget    = XmForm path_prop_control; 
	};

	callbacks {
            XmNactivateCallback = procedure
		env_context_sensitive_help(prop_path_box_HelpKey);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_help_HelpKey);
	};
    };

object
    path_margin_separator : XmSeparator {
	arguments {
	    XmNseparatorType	= XmNO_LINE;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopWidget	= prop_path_ok;
	 };
    };
     

! Show Path List Properties box
!

object 
    path_list_prop_box : XmFormDialog {
        arguments {
            arguments		prop_show_box_common;
            XmNdefaultButton	= XmPushButton prop_list_cancel;
            XmNcancelButton	= XmPushButton prop_list_cancel;
        };
 
        controls {
	    XmForm	 list_prop_control;
            XmPushButton prop_list_ok;
	    XmPushButton prop_list_apply;
	    XmPushButton prop_list_reset;
	    XmPushButton prop_list_cancel;
	    XmPushButton prop_path_list_help;
	    XmSeparator  list_margin_separator;
        };

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_path_list_box_HelpKey);
	};
    };

object 
    prop_path_list_help : XmPushButton {
	arguments {
	    arguments	    prop_help_button;
	    XmNtopWidget    = XmForm list_prop_control;
	};

	callbacks {
            XmNactivateCallback = procedure 
		env_context_sensitive_help(prop_path_list_box_HelpKey);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_help_HelpKey);
	};
    };


! Show Linkbase Properties box
!

object 
    linkbase_prop_box : XmFormDialog {
        arguments {
            arguments		prop_show_box_common;
	    XmNdialogTitle	= prop_lb_box_title;
            XmNdefaultButton	= XmPushButton prop_lb_cancel;
            XmNcancelButton	= XmPushButton prop_lb_cancel;
        };
 
        controls {
	    XmForm	 lb_prop_control;
            XmPushButton prop_lb_ok;
	    XmPushButton prop_lb_cancel;
	    XmPushButton prop_lb_help;
	    XmSeparator  lb_margin_separator;
        };

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_lb_box_HelpKey);
	};
    };
    
object 
    lb_prop_control : XmForm {
	arguments {
	    XmNhorizontalSpacing    = EnvDefaultMarginWidth;
	    XmNverticalSpacing	    = EnvDefaultShadowThickness;
	    XmNshadowType	    = EnvDefaultShadowType;
	    XmNshadowThickness	    = EnvDefaultShadowThickness;
	    XmNtopAttachment        = XmATTACH_FORM;
	    XmNrightAttachment      = XmATTACH_FORM;
	    XmNleftAttachment       = XmATTACH_FORM;
	};
    
	controls {
	    XmForm	lb_label_text_control;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_lb_box_HelpKey);
	};
    };

object
    lb_label_text_control : XmForm {
	arguments {
	    XmNverticalSpacing      = EnvDefaultHeightBetweenLabels;
	    XmNtopAttachment        = XmATTACH_FORM;
	    XmNleftAttachment       = XmATTACH_FORM;
	    XmNbottomAttachment     = XmATTACH_FORM;
	    XmNrightAttachment      = XmATTACH_FORM;
	};
	
        controls {
	    XmLabel prop_lb_name_label;
            XmLabel prop_lb_file_label;
	    DXmCSText prop_lb_name_text;
	    DXmCSText prop_lb_file_text;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_lb_box_HelpKey);
	};
    };

object
    prop_lb_name_label : XmLabel {
	arguments {
	    XmNlabelString	= prop_name_label_label;
	    XmNalignment	= XmALIGNMENT_BEGINNING;
	    XmNtopAttachment	= XmATTACH_FORM;
	    XmNleftAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_name_HelpKey);
	};
    };

object
    prop_lb_file_label : XmLabel {
	arguments {
	    XmNlabelString	= prop_file_label_label;
	    XmNalignment	= XmALIGNMENT_BEGINNING;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopWidget	= XmLabel prop_lb_name_label;
	    XmNleftAttachment	= XmATTACH_FORM;
	    XmNbottomAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_file_HelpKey);
	};
    };

object 
    prop_lb_name_text : DXmCSText {
	arguments {
	    arguments		    prop_read_write_text;
	    XmNtopWidget	    = XmLabel prop_lb_name_label;
	    XmNtopOffset	    = PropTextTopOffset;
	    XmNleftOffset	    = LbPropTextLeftOffset;
	    XmNrightAttachment	    = XmATTACH_FORM;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_name(windowprivate);
	    XmNvalueChangedCallback = procedure prop_change_name(windowprivate);
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_name_text_HelpKey);
	};
    };

object 
    prop_lb_file_text : DXmCSText {
	arguments {
	    arguments		prop_read_only_text;
	    XmNtopWidget	= XmLabel prop_lb_file_label;
	    XmNtopOffset	= PropTextTopOffset;
	    XmNleftOffset	= LbPropTextLeftOffset;
	    XmNrightAttachment	= XmATTACH_FORM;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_extra(windowprivate);
	    XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_file_text_HelpKey);
	};
    };

object 
    prop_lb_ok : XmPushButton {
	arguments {
	    arguments		prop_ok_button;
	    XmNtopWidget	= XmForm lb_prop_control;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_ok(windowprivate);
            XmNactivateCallback = procedure prop_activate_ok(windowprivate);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_ok_HelpKey);
	};
    };

object 
    prop_lb_cancel : XmPushButton {
	arguments {
	    arguments		prop_cancel_button;
	    XmNleftPosition	= LbPropCancelBLeftPos;
	    XmNtopWidget	= XmForm lb_prop_control;
	    XmNshowAsDefault	= EnvDefaultPBShadow;
	};

	callbacks {
	    MrmNcreateCallback = procedure prop_create_cancel(windowprivate);
            XmNactivateCallback = procedure prop_activate_cancel(windowprivate);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_cancel_HelpKey);
	};
    };

object 
    prop_lb_help : XmPushButton {
	arguments {
	    arguments	    prop_help_button;
	    XmNtopWidget    = XmForm lb_prop_control;
	};

	callbacks {
            XmNactivateCallback = procedure 
		env_context_sensitive_help(prop_lb_box_HelpKey);
            XmNhelpCallback = procedure 
		env_context_sensitive_help(prop_help_HelpKey);
	};
    };

object
    lb_margin_separator : XmSeparator {
	arguments {
	    XmNseparatorType	= XmNO_LINE;
	    XmNtopAttachment	= XmATTACH_WIDGET;
	    XmNtopWidget	= prop_lb_ok;
	 };
    };
     

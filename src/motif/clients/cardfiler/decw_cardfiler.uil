!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!       C A R D F I L E R . U I L
!             DECWindows Cardfiler UIL Widgets
!
!----------------------------------------------------------------------
!
/*
  Copyright (c) Digital Equipment Corporation, 1987, 1988, 1989, 1990,
  1991, 1992.  All Rights Reserved.  Unpublished rights reserved
  under the copyright laws of the United States.

  The software contained on this media is proprietary
  to and embodies the confidential technology of
  Digital Equipment Corporation.  Possession, use,
  duplication or dissemination of the software and
  media is authorized only pursuant to a valid written
  license from Digital Equipment Corporation.

  RESTRICTED RIGHTS LEGEND   Use, duplication, or
  disclosure by the U.S. Government is subject to
  restrictions as set forth in Subparagraph (c)(1)(ii)
  of DFARS 252.227-7013, or in FAR 52.227-19, as
  applicable.
*/
!
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! Facility:
!   DECWindows Cardfiler
!
!   Facility:           DECW DECWindows Cardfiler
!
!   Modification History:
!
!   Version 2.0
!       Mar - 1989	(NFF) V2.0 internationalization modifications
!
!   Version 3.0
!	Nov - 1990	(ASP) V3.0 Motif conversion and Memex support.
!
!   Version 3.1
!       Nov - 1991      (SP)  V3.1 Add Asian I18N Support
!                                  Changed Cascade buttons to gadgets
!                                  except for linkworks pulldown menu.
!----------------------------------------------------------------------
!
! This files does NOT contain any translatable strings
!
! This file contains the widget definitions for cardfiler.
!

module card
	version = '3.1'
	names = case_sensitive
	objects = { XmSeparator = gadget; XmPushButton = gadget;
		    XmToggleButton = gadget; XmLabel = gadget;
		    XmCascadeButton = widget; }

include file	'card_def.uil';
include file	'card_msg.uil';
include file	'card_values.uil';
include file	'card_defhlp.uil';
!include file	'XmAppl.uil';

value DXmNdelayPopupMenuRealization :
	argument ('DXmdelayPopupMenuRealization', boolean);

procedure
	addproc (integer);
	card_file_select_action ();
	cardhelp (string);
	clearaction();
	clearfunc();
	closeproc();
	copyproc();
	create_button (integer);
	create_dialog (integer);
	create_text (integer);
	dialog_mapped (integer);
	selectgraphicproc();
	deselectgraphicproc();
	cutproc();
	deleteaction();
	delproc();
	duplicate();
	edit_pulling();
	exitproc();
	exitsave();
        enterfnameaction();
	file_select_action ();
	findnextproc();
	findaction (integer);
	findproc (integer);
	gotoaction (integer);
	gotoproc (integer);
	help_done_proc (integer);
	indexhelp (string);
	mergeproc();
	nextproc();
	noaction ();
	NoFunction ();
	on_context_activate_proc ();
	opencard();
	open_caution_action();
	pasteproc();
	previousproc();
	printproc (integer);
	readgraphicproc();
	redrawbitmap();
	renameindex();
	renameaction (integer);
	restoreproc();
	restore_settings_proc();
	retrievecards();
	save_settings_proc();
	select_callback();
	selectanddisplay_callback();
	svn_select_callback();
	svn_selectanddisplay_callback();
	svn_getentry_callback();
	svn_attach_to_source_callback();
	storecards();
	storeascards();
	textwidgetcalls ();
	undeleteproc();
	undoproc();
	create_connection_menu(); ! Memex


object
    indexmainwindow : XmMainWindow {
        arguments {
        };
        controls {
    	    XmMenuBar 	index_menubar;
!	    XmFrame	index_workarea_frame;
	    XmForm	index_workarea;
        };
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEXMAINWINDOW);
	};
    };

!V1.2 of SVN will have its own border
!    index_workarea_frame : XmFrame {
!	arguments {
!	    XmNmarginWidth = 3;
!	    XmNmarginHeight = 3;
!	    XmNshadowThickness = 0;
!	};
!	controls {
!	    XmForm	index_workarea;
!	};
!    };

    index_workarea : XmForm {
    	arguments {
	    XmNunitType = XmPIXELS;
	    XmNshadowType = XmSHADOW_IN;
	    XmNshadowThickness = 2;
 	};
    	controls {
	    DXmSvn	 svnList;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEX_WORKAREA);
	    MrmNcreateCallback = procedure create_dialog (k_indexworkarea);
	};
    };

    svnList  :  DXmSvn	{
	arguments {
	    DXmSvnNexpectHighlighting = false;
	    DXmSvnNdefaultSpacing = 5;
	    DXmSvnNindentMargin = 5;
	    DXmSvnNmultipleSelections = false;
	    DXmSvnNuseScrollButtons = false;
	    DXmSvnNshowPathToRoot = false;
	    XmNleftAttachment = XmATTACH_FORM; XmNleftOffset = 5;
 	    XmNrightAttachment = XmATTACH_FORM; XmNrightOffset = 5;
	    XmNtopAttachment = XmATTACH_FORM; XmNtopOffset = 5;
	    XmNbottomAttachment = XmATTACH_FORM; XmNbottomOffset = 5;
	};
	callbacks {
            DXmSvnNentrySelectedCallback = procedure svn_select_callback;
            DXmSvnNselectAndConfirmCallback = procedure
						svn_selectanddisplay_callback;
            DXmSvnNgetEntryCallback = procedure svn_getentry_callback;
	    DXmSvnNattachToSourceCallback = procedure
						svn_attach_to_source_callback;
!        DXmSvnNentryUnselectedCallback = procedure DwmSvnEntryUnselected(tag);
!        DXmSvnNdetachFromSourceCallback = procedure DwmSvnDetachFromSource;
            MrmNcreateCallback = procedure create_dialog (k_svnlist);
	};
    };


    cardmainwindow : XmMainWindow {
    	arguments {
	};
	controls {
    	    XmMenuBar 	card_menubar;
	    XmForm	card_workarea;
        };
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARDMAINWINDOW);
	};
    };

    card_workarea : XmForm {
    	arguments {
	    XmNunitType = XmPIXELS;
	    XmNshadowType = XmSHADOW_OUT;
            XmNshadowThickness = 2;
	    XmNresizePolicy = XmRESIZE_NONE;
!	    XmNnoResize = true;
         };
    	controls {
            XmPanedWindow	card_pane;
	    XmForm		button_box;
    	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_WORKAREA);
	    MrmNcreateCallback = procedure create_dialog (k_cardworkarea);
	};
    };

    card_pane : XmPanedWindow {
	arguments {
            XmNleftAttachment = XmATTACH_FORM; 
	    XmNleftOffset = CARD_PANE_OFFSET;
            XmNrightAttachment = XmATTACH_FORM;
	    XmNrightOffset = CARD_PANE_OFFSET;
            XmNtopAttachment = XmATTACH_FORM;
	    XmNtopOffset = CARD_PANE_OFFSET;
	    XmNbottomAttachment = XmATTACH_WIDGET;
	    XmNbottomOffset = 0;
	    XmNbottomWidget = XmForm button_box; 
!	    XmNspacing = 15;
	    XmNsashIndent = -22;
	    XmNresizable = false;
	};
	controls {
            XmScrolledWindow		card_drawing;
	    DXmScrolledCSText		card_text;
	};
	callbacks {
!	    MrmNcreateCallback = procedure create_dialog (k_card_pane_window);
	};
    };

    card_drawing : XmScrolledWindow {
	arguments {
!	    XmNworkWindow = XmDrawingArea card_image;
	    XmNscrollingPolicy = XmAUTOMATIC;
!           XmNunitType = XmPIXELS;
	};
	controls {
	    XmDrawingArea	card_image;
	};
	callbacks {
	    MrmNcreateCallback = procedure create_dialog (k_card_scroll_window);
	};
    };

    card_image : XmDrawingArea {
    	arguments {
	    XmNunitType = XmPIXELS;
!	    XmNmarginWidth = 0;
!	    XmNmarginHeight = 0;
        };
	callbacks {
	    XmNexposeCallback = procedure redrawbitmap ();
	    XmNresizeCallback = procedure redrawbitmap ();
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_WORKAREA);
	    MrmNcreateCallback = procedure create_dialog (k_cardimagearea);
	};
    };

    card_text : DXmScrolledCSText {
	arguments {
	    XmNvalue = CARD_TEXT_NULL;
	    XmNx = CARD_TEXT_X;
	    XmNy = CARD_TEXT_Y;
	    XmNeditMode = XmMULTI_LINE_EDIT;
	    XmNcolumns = CARD_TEXT_COLS;
	    XmNrows = CARD_TEXT_ROWS;
	    XmNmaxLength = CARD_TEXT_MAX_LENGTH;
	    XmNwordWrap = true;
	    XmNscrollHorizontal = false;
	    XmNscrollVertical = true;	!I18N
	};
	callbacks {
	    XmNmotionVerifyCallback = procedure textwidgetcalls ();
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_TEXT);
	    MrmNcreateCallback = procedure create_dialog (k_valuewindow);
	};
    };

    button_box : XmForm {
    	arguments {
	    XmNunitType = XmPIXELS;
	    XmNresizePolicy = XmRESIZE_NONE;
!	    XmNnoResize = true;
!	    XmNmarginWidth = 10;
!	    XmNmarginHeight = 10;
!	    XmNshadowType = XmSHADOW_IN;
!	    XmNshadowThickness = 0;
            XmNleftAttachment = XmATTACH_FORM;
	    XmNleftOffset = CARD_BUTTON_OFFSET;
            XmNrightAttachment = XmATTACH_FORM;
	    XmNrightOffset = CARD_BUTTON_OFFSET;
            XmNbottomAttachment = XmATTACH_FORM;
            XmNbottomOffset = CARD_BUTTON_OFFSET;
        };
    	controls {
	    XmArrowButton previous;
	    XmPushButton close;
	    XmArrowButton next;
    	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_BUTTON_BOX);
	    MrmNcreateCallback = procedure create_dialog (k_buttonbox);
	};
    };

    previous : XmArrowButton {
	arguments {
	    XmNy = 20;
!	    XmNlabelString = CARD_PREVIOUS_L;
	    XmNarrowDirection = XmARROW_LEFT;
	    XmNleftAttachment = XmATTACH_FORM;
!	    XmNleftOffset = 5;
            XmNtopAttachment = XmATTACH_FORM;
!	    XmNtopOffset = 5;
            XmNbottomAttachment = XmATTACH_FORM;
!	    XmNbottomOffset = 5;
	};
	callbacks {
	    XmNactivateCallback = procedure previousproc ();
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_PREVIOUS);
	    MrmNcreateCallback = procedure create_dialog (k_bb_button1);
	};
    };

    close : XmPushButton {
	arguments {
!	    XmNy = 4;
	    XmNlabelString = CARD_CLOSE_L;
            XmNtopAttachment = XmATTACH_FORM;
!	    XmNtopOffset = 5;
            XmNbottomAttachment = XmATTACH_FORM;
!	    XmNbottomOffset = 5;
	};
	callbacks {
	    XmNactivateCallback = procedure closeproc ();
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CLOSE);
	    MrmNcreateCallback = procedure create_dialog (k_bb_close);
	};
    };

    next : XmArrowButton {
	arguments {
!	    XmNy = 4;
!	    XmNlabelString = CARD_NEXT_L;
	    XmNarrowDirection = XmARROW_RIGHT;
	    XmNrightAttachment = XmATTACH_FORM;
!	    XmNrightOffset = 5;
            XmNtopAttachment = XmATTACH_FORM;
!	    XmNtopOffset = 5;
            XmNbottomAttachment = XmATTACH_FORM;
!	    XmNbottomOffset = 5;
	};
	callbacks {
	    XmNactivateCallback = procedure nextproc ();
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_NEXT);
	    MrmNcreateCallback = procedure create_dialog (k_bb_button2);
	};
    };


    index_menubar : XmMenuBar {
	arguments {
	    XmNorientation = XmHORIZONTAL;
	    XmNmenuHelpWidget = XmCascadeButtonGadget help_pulldown;
	};
	controls {
	    XmCascadeButtonGadget indexfile;
	    XmCascadeButton connection; ! Memex
	    XmCascadeButtonGadget search;
	    XmCascadeButtonGadget indexcard;
	    XmCascadeButtonGadget help_pulldown;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEX_MENUBAR);
	};
    };


    connection : XmCascadeButton {
	arguments {
	    XmNlabelString = CARD_MEMEX_L;
	    XmNmnemonic = IndexLinkMnemonic;
	};
	callbacks {
	    MrmNcreateCallback = procedure create_connection_menu();
!Do not provide a helpcallback. Linkworks will define the helpcallback.
!           XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEXLINK);
	};
    };

    indexfile : XmCascadeButtonGadget {
	arguments {
	    XmNlabelString = CARD_INDEXFILE_L;
	    XmNmnemonic = IndexFileMnemonic;
	};
	controls {
	    XmPulldownMenu indexfilemenu;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEXFILE);
	};
    };

    indexfilemenu : XmPulldownMenu {
	arguments {
                XmNtearOffModel = XmTEAR_OFF_ENABLED;
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {
	    XmPushButton openfile;
	    XmPushButton mergefile;
	    XmSeparator sep_gadget;
	    XmPushButton save;
	    XmPushButton saveas;
	    XmSeparator sep_gadget;
	    XmPushButton printfile;
	    XmPushButton printfileas;
	    XmSeparator sep_gadget;
	    XmPushButton save_settings;
	    XmPushButton restore_settings;
	    XmSeparator sep_gadget;
	    XmPushButton exit;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEXFILEMENU);
	};
    };

    sep_gadget : XmSeparator {
    };

    openfile : XmPushButton {
	arguments {
	    XmNlabelString = CARD_OPENFILE_L;
	    XmNmnemonic = IFileOpenMnemonic;
	};
	callbacks {
	    XmNactivateCallback = procedure retrievecards ();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_OPENFILE);
	};
    };

    mergefile : XmPushButton {
	arguments {
	    XmNlabelString = CARD_MERGEFILE_L;
	    XmNmnemonic = IFileMergeMnemonic;
	};
	callbacks {
	    XmNactivateCallback = procedure mergeproc ();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_MERGEFILE);
	};
    };

    save : XmPushButton {
	arguments {
	    XmNlabelString = CARD_SAVE_L;
	    XmNmnemonic = IFileSaveMnemonic;
	};
	callbacks {
	    XmNactivateCallback = procedure storecards ();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_SAVE);
	};
    };

    saveas : XmPushButton {
	arguments {
	    XmNlabelString = CARD_SAVEAS_L;
	    XmNmnemonic = IFileSaveAsMnemonic;
	};
	callbacks {
	    XmNactivateCallback = procedure storeascards ();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_SAVEAS);
	};
    };

    printfile : XmPushButton {
	arguments {
	    XmNlabelString = CARD_PRINTFILE_L;
	    XmNmnemonic = IFilePrintMnemonic;
	    XmNsensitive = false;
	};
	callbacks {
	    XmNactivateCallback = procedure printproc (k_print_all_now);
	    MrmNcreateCallback = procedure create_button (k_printfile);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_PRINTFILE);
	};
    };

    printfileas : XmPushButton {
	arguments {
	    XmNlabelString = CARD_PRINTFILEAS_L;
	    XmNmnemonic = IFilePrintAsMnemonic;
	    XmNsensitive = false;
	};
	callbacks {
	    XmNactivateCallback = procedure printproc (k_print_all);
	    MrmNcreateCallback = procedure create_button (k_printfileas);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_PRINTFILEAS);
	};
    };

    save_settings : XmPushButton {
        arguments {
            XmNlabelString = CARD_SAVE_SETTINGS_L;
	    XmNmnemonic = IFileSaveGeometryMnemonic;
        };
        callbacks {
            XmNactivateCallback = procedure save_settings_proc ();
            XmNhelpCallback = procedure indexhelp (CARD_HLP_SAVE_SETTINGS);
        };
    };

    restore_settings : XmPushButton {
        arguments {
            XmNlabelString = CARD_RESTORE_SETTINGS_L;
	    XmNmnemonic = IFileRestoreDefSettingsMnemonic;
        };
        callbacks {
            XmNactivateCallback = procedure restore_settings_proc ();
            XmNhelpCallback = procedure indexhelp (CARD_HLP_RESTORE_SETTINGS);
        };
    };

    exit : XmPushButton {
	arguments {
	    XmNlabelString = CARD_EXIT_L;
	    XmNmnemonic = IFileExitMnemonic;
	};
	callbacks {
	    XmNactivateCallback = procedure exitproc();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_QUIT);
	};
    };


    search : XmCascadeButtonGadget {
	arguments {
	    XmNlabelString = CARD_SEARCH_L;
	    XmNmnemonic = IndexSearchMnemonic;
	};
	controls {
	    XmPulldownMenu searchmenu;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_SEARCH);
	};
    };

    searchmenu : XmPulldownMenu {
	arguments {
                XmNtearOffModel = XmTEAR_OFF_ENABLED;
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {
	    XmPushButton indexgoto;
	    XmPushButton indexfind;
	    XmSeparator sep_gadget;
	    XmPushButton indexfindnext;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_SEARCHMENU);
	};
    };

    indexgoto : XmPushButton {
	arguments {
	    XmNlabelString = CARD_INDEXGOTO_L;
	    XmNmnemonic = ISearchIndexMnemonic;
	    XmNsensitive = false;
!	    XmNacceleratorText = CARD_CARDGOTO_ACCEL_L;
!	    XmNaccelerator = CARD_CARDGOTO_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure gotoproc (0);
	    MrmNcreateCallback = procedure create_button (k_indexgoto);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEXGOTO);
	};
    };

    indexfind : XmPushButton {
	arguments {
	    XmNlabelString = CARD_INDEXFIND_L;
	    XmNmnemonic = ISearchCardMnemonic;
	    XmNsensitive = false;
!	    XmNacceleratorText = CARD_CARDFIND_ACCEL_L;
!	    XmNaccelerator = CARD_CARDFIND_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure findproc (0);
	    MrmNcreateCallback = procedure create_button (k_indexfind);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEXFIND);
	};
    };

    indexfindnext : XmPushButton {
	arguments {
	    XmNlabelString = CARD_INDEXFINDNEXT_L;
	    XmNmnemonic = IFindNextMnemonic;
	    XmNsensitive = false;
	    XmNacceleratorText = CARD_CARDFIND_NEXT_ACCEL_L;
	    XmNaccelerator = CARD_CARDFIND_NEXT_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure findnextproc ();
	    MrmNcreateCallback = procedure create_button (k_indexfindnext);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEXFINDNEXT);
	};
    };


    indexcard : XmCascadeButtonGadget {
	arguments {
	    XmNlabelString = CARD_INDEXCARD_L;
	    XmNmnemonic = IndexCardMnemonic;
	};
	controls {
	    XmPulldownMenu indexcardmenu;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEXCARD);
	};
    };

    indexcardmenu : XmPulldownMenu {
	arguments{
                XmNtearOffModel = XmTEAR_OFF_ENABLED;
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {
	    XmPushButton newcard;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEXCARDMENU);
	};
    };

    newcard : XmPushButton {
	arguments {
	    XmNlabelString = CARD_NEWCARD_L;
	    XmNmnemonic = ICardCreateMnemonic;
	    XmNacceleratorText = CARD_CARD_NEWCARD_ACCEL_L;
	    XmNaccelerator = CARD_CARD_NEWCARD_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure addproc (0);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_NEWCARD);
	};
    };


    help_pulldown : XmCascadeButtonGadget {
	arguments {
	    XmNlabelString = CARD_HELP_PULLDOWN_L;
	    XmNmnemonic = IndexHelpMnemonic;
	};
	controls {
	    XmPulldownMenu help_menu;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_HELP_PULLDOWN);
	};
    };

    help_menu : XmPulldownMenu {
	arguments {
                XmNtearOffModel = XmTEAR_OFF_ENABLED;
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {
	    XmPushButton help_but_on_context;
	    XmSeparator sep_gadget;
	    XmPushButton help_but;
	    XmPushButton help_but_on_help;
	    XmPushButton help_about_but;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_HELP_MENU);
	};
    };

    help_but_on_context : XmPushButton {
	arguments {
       	    XmNlabelString = CARD_HELP_ON_CONTEXT_L;
	    XmNmnemonic = IHelpOnContextMnemonic;
            XmNaccelerator = CARD_ON_CONTEXT_ACCEL_TRANS;
            XmNacceleratorText = CARD_ON_CONTEXT_ACCEL_L;
    	};
	callbacks {
	    XmNactivateCallback = procedure on_context_activate_proc ();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_HELP_ONCONTEXT);
	};
    };


    help_but : XmPushButton {
	arguments {
       	    XmNlabelString = CARD_HELP_BUT_L;
	    XmNmnemonic = IHelpOnWindowMnemonic;
            XmNaccelerator = HelpOnWindowAccel;
    	};
	callbacks {
	    XmNactivateCallback = procedure indexhelp (CARD_HLP_OVERVIEW);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_HELP_ONWINDOW);
	};
    };

    help_but_on_help : XmPushButton {
	arguments {
       	    XmNlabelString = CARD_HELP_ON_HELP_L;
	    XmNmnemonic = IHelpOnHelpMnemonic;
    	};
	callbacks {
	    XmNactivateCallback = procedure indexhelp (CARD_HLP_ON_HELP);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_HELP_ONHELP);
	};
    };

    help_about_but : XmPushButton {
	arguments {
       	    XmNlabelString = CARD_HELP_ABOUT_BUT_L;
	    XmNmnemonic = IHelpOnVersionMnemonic;
    	};
	callbacks {
	    XmNactivateCallback = procedure indexhelp (CARD_HLP_ABOUT);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_HELP_ONVERSION);
	};
    };


    card_menubar : XmMenuBar {
    	arguments {
	    XmNorientation = XmHORIZONTAL;
	    XmNmenuHelpWidget = XmCascadeButtonGadget card_help_pulldown;
	};
	controls {
	    XmCascadeButtonGadget cardfile;
	    XmCascadeButtonGadget edit;
	    XmCascadeButtonGadget cardsearch;
	    XmCascadeButtonGadget cardb;
	    XmCascadeButtonGadget card_help_pulldown;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_MENUBAR);
	};
    };


    cardfile : XmCascadeButtonGadget {
	arguments {
	    XmNlabelString = CARD_CARDFILE_L;
	    XmNmnemonic = CardFileMnemonic;
	};
	controls {
	    XmPulldownMenu cardfilemenu;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARDFILE);
	};
    };

    cardfilemenu : XmPulldownMenu {
	arguments {
                XmNtearOffModel = XmTEAR_OFF_ENABLED;
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {
	    XmPushButton readbitmapfile;
	    XmSeparator sep_gadget;
	    XmPushButton print;
	    XmPushButton printas;
	    XmSeparator sep_gadget;
	    XmPushButton pulldown_close;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARDFILEMENU);
	};
    };

    readbitmapfile : XmPushButton {
	arguments {
	    XmNlabelString = CARD_READBITMAPFILE_L;
	    XmNmnemonic = CFileIncludeImageMnemonic;
	    XmNacceleratorText = CARD_READBITMAPFILE_ACCEL_L;
	    XmNaccelerator = CARD_READBITMAPFILE_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure readgraphicproc ();
	    MrmNcreateCallback = procedure create_button (k_readbitmapfile);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_READBITMAPFILE);
	};
    };

    print : XmPushButton {
	arguments {
	    XmNlabelString = CARD_PRINT_L;
	    XmNmnemonic = CFilePrintMnemonic;
	};
	callbacks {
	    XmNactivateCallback = procedure printproc (k_print_one_now);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_PRINT);
	};
    };

    printas : XmPushButton {
	arguments {
	    XmNlabelString = CARD_PRINTAS_L;
	    XmNmnemonic = CFilePrintAsMnemonic;
!	    XmNacceleratorText = CARD_PRINTAS_ACCEL_L;
!	    XmNaccelerator = CARD_PRINTAS_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure printproc (k_print_one);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_PRINTAS);
	};
    };

    pulldown_close : XmPushButton {
	arguments {
	    XmNlabelString = CARD_PULLDOWN_CLOSE_L;
	    XmNmnemonic = CFileCloseMnemonic;
	    XmNacceleratorText = CARD_PULLDOWN_CLOSE_ACCEL_L;
	    XmNaccelerator = CARD_PULLDOWN_CLOSE_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure closeproc ();
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_PULLDOWN_CLOSE);
	};
    };


    edit : XmCascadeButtonGadget {
	arguments {
	    XmNlabelString = CARD_EDIT_L;
	    XmNmnemonic = CardEditMnemonic;
	};
	controls {
	    XmPulldownMenu editmenu;
	};
	callbacks {
	    XmNcascadingCallback = procedure edit_pulling ();
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_EDIT);
	};
    };

    editmenu : XmPulldownMenu {
	arguments {
                XmNtearOffModel = XmTEAR_OFF_ENABLED;
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {
	    XmPushButton undo;
	    XmSeparator sep_gadget;
	    XmPushButton cut;
	    XmPushButton copy;
	    XmPushButton paste;
	    XmSeparator sep_gadget;
	    XmPushButton selectgraphic;
	    XmPushButton deselectgraphic;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_EDITMENU);
	};
    };

    undo : XmPushButton {
	arguments {
	    XmNlabelString = CARD_UNDO_L;
	    XmNmnemonic = CEditUndoMnemonic;
	    XmNacceleratorText = CARD_UNDO_ACCEL_L;
	    XmNaccelerator = CARD_UNDO_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure undoproc ();
	    MrmNcreateCallback = procedure create_button (k_undo);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_UNDO);
	};
    };

    cut : XmPushButton {
	arguments {
	    XmNlabelString = CARD_CUT_L;
	    XmNmnemonic = CEditCutMnemonic;
	    XmNacceleratorText = CARD_CUT_ACCEL_L;
	    XmNaccelerator = CARD_CUT_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure cutproc ();
	    MrmNcreateCallback = procedure create_button (k_cut);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CUT);
	};
    };

    copy : XmPushButton {
	arguments {
	    XmNlabelString = CARD_COPY_L;
	    XmNmnemonic = CEditCopyMnemonic;
	    XmNacceleratorText = CARD_COPY_ACCEL_L;
	    XmNaccelerator = CARD_COPY_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure copyproc ();
	    MrmNcreateCallback = procedure create_button (k_copy);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_COPY);
	};
    };

    paste : XmPushButton {
	arguments {
	    XmNlabelString = CARD_PASTE_L;
	    XmNmnemonic = CEditPasteMnemonic;
	    XmNacceleratorText = CARD_PASTE_ACCEL_L;
	    XmNaccelerator = CARD_PASTE_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure pasteproc ();
	    MrmNcreateCallback = procedure create_button (k_paste);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_PASTE);
	};
    };

    selectgraphic : XmPushButton {
	arguments {
	    XmNlabelString = CARD_SELECTGRAPHIC_L;
	    XmNmnemonic = CEditSelectMnemonic;
	    XmNsensitive = false;
!	    XmNacceleratorText = CARD_CUTGRAPHIC_ACCEL_L;
!	    XmNaccelerator = CARD_CUTGRAPHIC_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure selectgraphicproc ();
	    MrmNcreateCallback = procedure create_button (k_select_graphic);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_SELECTGRAPHIC);
	};
    };


    deselectgraphic : XmPushButton {
	arguments {
	    XmNlabelString = CARD_DESELECTGRAPHIC_L;
	    XmNmnemonic = CEditDeselectMnemonic;
	    XmNsensitive = false;
!	    XmNacceleratorText = CARD_CUTGRAPHIC_ACCEL_L;
!	    XmNaccelerator = CARD_CUTGRAPHIC_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure deselectgraphicproc ();
	    MrmNcreateCallback = procedure create_button (k_deselect_graphic);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_DESELECTGRAPHIC);
	};
    };


    cardb : XmCascadeButtonGadget {
	arguments {
	    XmNlabelString = CARD_CARD_L;
	    XmNmnemonic = CardCardMnemonic;
	};
	controls {
	    XmPulldownMenu cardmenu;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD);
	};
    };

    cardmenu : XmPulldownMenu {
	arguments {
                XmNtearOffModel = XmTEAR_OFF_ENABLED;
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {
	    XmPushButton card_newcard;
	    XmSeparator sep_gadget;
	    XmPushButton duplicatecard;
	    XmPushButton rename;
	    XmSeparator sep_gadget;
    	    XmPushButton deletecard;
    	    XmPushButton undeletecard;
	    XmSeparator sep_gadget;
	    XmPushButton pulldown_next;
	    XmPushButton pulldown_previous;
	    XmSeparator sep_gadget;
    	    XmPushButton restore;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARDMENU);
	};
    };

    card_newcard : XmPushButton {
	arguments {
	    XmNlabelString = CARD_CARD_NEWCARD_L;
	    XmNmnemonic = CCardCreateMnemonic;
	    XmNacceleratorText = CARD_CARD_NEWCARD_ACCEL_L;
	    XmNaccelerator = CARD_CARD_NEWCARD_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure addproc (1);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_NEWCARD);
	};
    };

    duplicatecard : XmPushButton {
	arguments {
	    XmNlabelString = CARD_DUPLICATECARD_L;
	    XmNmnemonic = CCardDuplicateMnemonic;
!	    XmNacceleratorText = CARD_DUPLICATECARD_ACCEL_L;
!	    XmNaccelerator = CARD_DUPLICATECARD_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure duplicate ();
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_DUPLICATECARD);
	};
    };

    rename : XmPushButton {
	arguments {
	    XmNlabelString = CARD_RENAME_L;
	    XmNmnemonic = CCardRenameMnemonic;
	    XmNacceleratorText = CARD_RENAME_ACCEL_L;
	    XmNaccelerator = CARD_RENAME_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure renameindex ();
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_RENAME);
	};
    };

    deletecard : XmPushButton {
	arguments {
	    XmNlabelString = CARD_DELETECARD_L;
	    XmNmnemonic = CCardDeleteMnemonic;
	    XmNacceleratorText = CARD_DELETECARD_ACCEL_L;
	    XmNaccelerator = CARD_DELETECARD_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure delproc ();
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_DELETECARD);
	};
    };

    undeletecard : XmPushButton {
	arguments {
	    XmNlabelString = CARD_UNDELETECARD_L;
	    XmNmnemonic = CCardUndeleteMnemonic;
!	    XmNacceleratorText = CARD_UNDELETECARD_ACCEL_L;
!	    XmNaccelerator = CARD_UNDELETECARD_ACCEL_TRANS;
	    XmNsensitive = false;
	};
	callbacks {
	    XmNactivateCallback = procedure undeleteproc ();
	    MrmNcreateCallback = procedure create_button (k_undelete);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_UNDELETECARD);
	};
    };

    pulldown_previous : XmPushButton {
	arguments {
	    XmNlabelString = CARD_PULLDOWN_PREVIOUS_L;
	    XmNmnemonic = CCardPreviousMnemonic;
	    XmNacceleratorText = CARD_PREVIOUS_ACCEL_L;
	    XmNaccelerator = CARD_PREVIOUS_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure previousproc ();
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_PULLDOWN_PREVIOUS);
	};
    };

    pulldown_next : XmPushButton {
	arguments {
	    XmNlabelString = CARD_PULLDOWN_NEXT_L;
	    XmNmnemonic = CCardNextMnemonic;
	    XmNacceleratorText = CARD_NEXT_ACCEL_L;
	    XmNaccelerator = CARD_NEXT_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure nextproc ();
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_PULLDOWN_NEXT);
	};
    };

    restore : XmPushButton {
	arguments {
	    XmNlabelString = CARD_RESTORE_L;
	    XmNmnemonic = CCardRestoreMnemonic;
!	    XmNacceleratorText = CARD_RESTORE_ACCEL_L;
!	    XmNaccelerator = CARD_RESTORE_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure restoreproc ();
	    MrmNcreateCallback = procedure create_button (k_restore);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_RESTORE);
	};
    };


    cardsearch : XmCascadeButtonGadget {
	arguments {
	    XmNlabelString = CARD_CARDSEARCH_L;
	    XmNmnemonic = CardSearchMnemonic;
	};
	controls {
	    XmPulldownMenu cardsearchmenu;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARDSEARCH);
	};
    };

    cardsearchmenu : XmPulldownMenu {
	arguments {
                XmNtearOffModel = XmTEAR_OFF_ENABLED;
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {
	    XmPushButton cardgoto;
	    XmPushButton cardfind;
	    XmSeparator sep_gadget;
	    XmPushButton cardfindnext;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARDSEARCHMENU);
	};
    };

    cardgoto : XmPushButton {
	arguments {
	    XmNlabelString = CARD_CARDGOTO_L;
	    XmNmnemonic = CSearchIndexMnemonic;
	    XmNsensitive = false;
!	    XmNacceleratorText = CARD_CARDGOTO_ACCEL_L;
!	    XmNaccelerator = CARD_CARDGOTO_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure gotoproc (1);
	    MrmNcreateCallback = procedure create_button (k_cardgoto);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARDGOTO);
	};
    };

    cardfind : XmPushButton {
	arguments {
	    XmNlabelString = CARD_CARDFIND_L;
	    XmNmnemonic = CSearchCardMnemonic;
	    XmNsensitive = false;
!	    XmNacceleratorText = CARD_CARDFIND_ACCEL_L;
!	    XmNaccelerator = CARD_CARDFIND_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure findproc (1);
	    MrmNcreateCallback = procedure create_button (k_cardfind);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARDFIND);
	};
    };

    cardfindnext : XmPushButton {
	arguments {
	    XmNlabelString = CARD_CARDFINDNEXT_L;
	    XmNmnemonic = CFindNextMnemonic;
	    XmNsensitive = false;
	    XmNacceleratorText = CARD_CARDFIND_NEXT_ACCEL_L;
	    XmNaccelerator = CARD_CARDFIND_NEXT_ACCEL_TRANS;
	};
	callbacks {
	    XmNactivateCallback = procedure findnextproc ();
	    MrmNcreateCallback = procedure create_button (k_cardfindnext);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARDFINDNEXT);
	};
    };


    card_help_pulldown : XmCascadeButtonGadget {
	arguments {
	    XmNlabelString = CARD_CARD_HELP_PULLDOWN_L;
	    XmNmnemonic = CardHelpMnemonic;
	};
	controls {
	    XmPulldownMenu card_help_menu;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_HELP_PULLDOWN);
	};
    };

    card_help_menu : XmPulldownMenu {
	arguments {
                XmNtearOffModel = XmTEAR_OFF_ENABLED;
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {
	    XmPushButton card_help_but_on_context;
	    XmSeparator sep_gadget;
	    XmPushButton card_help_but;
	    XmPushButton card_help_but_on_help;
	    XmPushButton card_help_about_but;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_HELP_MENU);
	};
    };

    card_help_but_on_context : XmPushButton {
	arguments {
       	    XmNlabelString = CARD_CARD_HELP_ON_CONTEXT_L;
	    XmNmnemonic = CHelpOnContextMnemonic;
!	    XmNsensitive = false;
    	};
	callbacks {
	    XmNactivateCallback = procedure on_context_activate_proc ();
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_HELP_ONCONTEXT);
	};
    };

    card_help_but : XmPushButton {
	arguments {
       	    XmNlabelString = CARD_CARD_HELP_MENU_L;
	    XmNmnemonic = CHelpOnWindowMnemonic;
    	};
	callbacks {
	    XmNactivateCallback = procedure cardhelp (CARD_HLP_OVERVIEW);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_HELP_ONWINDOW);
	};
    };

    card_help_but_on_help : XmPushButton {
	arguments {
       	    XmNlabelString = CARD_CARD_HELP_ON_HELP_L;
	    XmNmnemonic = CHelpOnHelpMnemonic;
    	};
	callbacks {
	    XmNactivateCallback = procedure cardhelp (CARD_HLP_ON_HELP);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_HELP_ONHELP);
	};
    };

    card_help_about_but : XmPushButton {
	arguments {
       	    XmNlabelString = CARD_CARD_HELP_ABOUT_BUT_L;
	    XmNmnemonic = CHelpOnVersionMnemonic;
    	};
	callbacks {
	    XmNactivateCallback = procedure cardhelp (CARD_HLP_ABOUT);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_HELP_ONVERSION);
	};
    };


    file_select_dialog : XmFileSelectionDialog {
	arguments {
	    XmNdialogTitle = FILE_SELECT_DIALOG_T;
	    XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	    XmNdefaultPosition = true;
	    XmNlistVisibleItemCount = CARD_FILE_ITEMS_COUNT;
	};
	callbacks {
	    XmNokCallback = procedure file_select_action ();
	    XmNcancelCallback = procedure file_select_action ();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_FILE_SELECT_DIALOG);
	};
    };

    card_file_select_dialog : XmFileSelectionDialog {
	arguments {
	    XmNdialogTitle = CARD_FILE_SELECT_DIALOG_T;
	    XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	    XmNdefaultPosition = true;
	    XmNlistVisibleItemCount = CARD_FILE_ITEMS_COUNT;
	};
	callbacks {
	    XmNokCallback = procedure card_file_select_action ();
	    XmNcancelCallback = procedure card_file_select_action ();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_FILE_SELECT_DIALOG);
	};
    };


    open_caution : XmQuestionDialog {
	arguments {
	    XmNmessageString = CARD_OPEN_CAUTION_L;
	    XmNdialogTitle = CARD_OPEN_CAUTION_T;
	    XmNdialogType = XmDIALOG_QUESTION;
	    XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	    XmNnoResize = true;
	    XmNokLabelString = YES_LABEL;
	};
	callbacks {
	    XmNokCallback = procedure open_caution_action ();
	    XmNcancelCallback = procedure open_caution_action ();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_OPEN_CAUTION);
	    MrmNcreateCallback = procedure create_dialog (k_open_caution);
	};
    };

    open_no_button : XmPushButton {
	arguments {
	    XmNlabelString = NO_LABEL;
	};
	callbacks {
	    XmNactivateCallback = procedure open_caution_action();
	};
    };

    exit_dialog : XmQuestionDialog {
	arguments {
	    XmNmessageString = CARD_EXIT_DIALOG_L;
	    XmNdialogTitle = CARD_EXIT_DIALOG_T;
	    XmNdialogType = XmDIALOG_QUESTION;
	    XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	    XmNnoResize = true;
	    XmNokLabelString = YES_LABEL;
	};
	callbacks {
	    XmNokCallback = procedure exitsave ();
	    XmNcancelCallback = procedure exitsave ();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_OPEN_CAUTION);
	    MrmNcreateCallback = procedure create_dialog (k_exit_dialog);
	};
    };

    exit_no_button : XmPushButton {
	arguments {
	    XmNlabelString = NO_LABEL;
	};
	callbacks {
	    XmNactivateCallback = procedure exitsave();
	};
    };

    enter_fname_dialog : XmQuestionDialog {
	arguments {
	    XmNmessageString = ENTER_FNAME_DIALOG_L;
	    XmNdialogTitle = ENTER_FNAME_DIALOG_T;
	    XmNdialogType = XmDIALOG_QUESTION;
	    XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	    XmNnoResize = true;
	    XmNdefaultPosition = true;
	    XmNokLabelString = YES_LABEL;
	    XmNcancelLabelString = NO_LABEL;
	};
	callbacks {
	    XmNokCallback = procedure enterfnameaction ();
	    XmNcancelCallback = procedure enterfnameaction ();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_EXIT_DIALOG);
	};
    };


    delete_dialog : XmWarningDialog {
	arguments {
	    XmNmessageString = CARD_DELETE_DIALOG_L;
	    XmNdialogTitle = CARD_DELETE_DIALOG_T;
	    XmNdialogType = XmDIALOG_WARNING;
	    XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	    XmNnoResize = true;
	    XmNdefaultPosition = true;
	};
	callbacks {
	    XmNokCallback = procedure deleteaction ();
	    XmNcancelCallback = procedure deleteaction ();
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_DELETE_DIALOG);
	};
    };


    clear_dialog : XmWarningDialog {
	arguments {
	    XmNmessageString = CARD_CLEAR_DIALOG_L;
	    XmNdialogTitle = CARD_CLEAR_DIALOG_T;
	    XmNdialogType = XmDIALOG_WARNING;
	    XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	    XmNnoResize = true;
	    XmNdefaultPosition = true;
	};
    	callbacks {
	    XmNokCallback = procedure clearaction ();
	    XmNcancelCallback = procedure clearaction ();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_CLEAR_DIALOG);
	};
    };


    message_dialog : XmInformationDialog {
	arguments {
	    XmNmessageString = CARD_MESSAGE_DIALOG_L;
	    XmNdialogTitle = CARD_MESSAGE_DIALOG_T;
	    XmNdialogType = XmDIALOG_INFORMATION;
!	    XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
	    XmNnoResize = true;
	    XmNdefaultPosition = true;
	};
	callbacks {
    	    XmNokCallback = procedure noaction ();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_MESSAGE_DIALOG);
	};
    };


    card_message_dialog : XmInformationDialog {
	arguments {
	    XmNmessageString = CARD_MESSAGE_DIALOG_L;
	    XmNdialogTitle = CARD_MESSAGE_DIALOG_T;
	    XmNdialogType = XmDIALOG_INFORMATION;
!	    XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
	    XmNnoResize = true;
	    XmNdefaultPosition = true;
	};
	callbacks {
    	    XmNokCallback = procedure noaction ();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_MESSAGE_DIALOG);
	};
    };


    error_dialog : XmErrorDialog {
	arguments {
	    XmNmessageString = CARD_ERROR_DIALOG_L;
	    XmNdialogTitle = CARD_ERROR_DIALOG_T;
	    XmNdialogType = XmDIALOG_ERROR;
	    XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	    XmNnoResize = true;
	    XmNdefaultPosition = true;
	};
	callbacks {
    	    XmNokCallback = procedure noaction ();
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_MESSAGE_DIALOG);
	};
    };

    index_dialog : XmBulletinBoardDialog {
	arguments {
	   XmNdialogTitle = CARD_INDEX_DIALOG_T;
	   XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	   XmNdefaultPosition = true;
	   XmNdefaultButton = XmPushButton index_ok;
	   XmNcancelButton = XmPushButton index_cancel;
           XmNmarginWidth = CARD_MARGIN_WIDTH;
           XmNmarginHeight = CARD_MARGIN_HEIGHT;
	};
	controls {
	   XmLabel 		index_label;
	   DXmCSText 		index_dialog_text;
	   XmPushButton 	index_ok;
	   XmPushButton 	index_cancel;
	};
	callbacks {
	    XmNmapCallback = procedure dialog_mapped (k_index_dialog_text);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_INDEX_DIALOG);
	};
    };

    index_label : XmLabel {
	arguments {
	    XmNlabelString = CARD_INDEX_LABEL_L;
	    XmNx = CARD_INDEX_LABEL_X;
	    XmNy = CARD_INDEX_LABEL_Y;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEX_LABEL);
	};
    };

    index_dialog_text : DXmCSText {
	arguments {
	    XmNx = CARD_INDEX_DIALOG_TEXT_X;
	    XmNy = CARD_INDEX_DIALOG_TEXT_Y;
	    XmNcolumns = CARD_INDEX_MAX_LEN;
	    XmNmaxLength = CARD_INDEX_MAX_LEN;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEX_DIALOG_TEXT);
	    MrmNcreateCallback = procedure create_text (k_index_dialog_text);
	};
    };

    index_ok : XmPushButton {
	arguments {
	    XmNlabelString = CARD_INDEX_OK_L;
	    XmNx = CARD_INDEX_OK_X;
	    XmNy = CARD_INDEX_OK_Y;
	};
	callbacks {
	   XmNactivateCallback = procedure renameaction (1);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEX_OK);
	};
    };

    index_cancel : XmPushButton {
	arguments {
	    XmNlabelString = CARD_INDEX_CANCEL_L;
	    XmNx = CARD_INDEX_CANCEL_X;
	    XmNy = CARD_INDEX_CANCEL_Y;
	};
	callbacks {
	    XmNactivateCallback = procedure renameaction (0);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_INDEX_CANCEL);
    	};
    };


    goto_dialog : XmBulletinBoardDialog {
	arguments {
	    XmNdialogTitle = CARD_GOTO_DIALOG_T;
	    XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
	    XmNdefaultPosition = true;
	    XmNdefaultButton = XmPushButton goto_ok;
 	    XmNcancelButton = XmPushButton goto_cancel;
            XmNmarginWidth = CARD_MARGIN_WIDTH;
            XmNmarginHeight = CARD_MARGIN_HEIGHT;
	};
	controls {
	    XmLabel 		goto_label;
	    DXmCSText 		goto_text;
	    XmPushButton 	goto_ok;
	    XmPushButton 	goto_cancel;
	};
	callbacks {
	    XmNmapCallback = procedure dialog_mapped (k_goto_text);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_GOTO_DIALOG);
	};
    };

    goto_label : XmLabel {
	arguments {
	    XmNlabelString = CARD_GOTO_LABEL_L;
	    XmNx = CARD_GOTO_LABEL_X;
	    XmNy = CARD_GOTO_LABEL_Y;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_GOTO_LABEL);
	};
    };

    goto_text : DXmCSText {
	arguments {
	    XmNx = CARD_GOTO_TEXT_X;
	    XmNy = CARD_GOTO_TEXT_Y;
	    XmNcolumns = CARD_INDEX_MAX_LEN;
	    XmNmaxLength = CARD_INDEX_MAX_LEN;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_GOTO_TEXT);
	    MrmNcreateCallback = procedure create_text (k_goto_text);
	};
    };

    goto_ok : XmPushButton {
	arguments {
	    XmNlabelString = CARD_GOTO_OK_L;
	    XmNx = CARD_GOTO_OK_X;
	    XmNy = CARD_GOTO_OK_Y;
	};
	callbacks {
	    XmNactivateCallback = procedure gotoaction (1);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_GOTO_OK);
	};
    };

    goto_cancel : XmPushButton {
	arguments {
	    XmNlabelString = CARD_GOTO_CANCEL_L;
	    XmNx = CARD_GOTO_CANCEL_X;
	    XmNy = CARD_GOTO_CANCEL_Y;
	};
	callbacks {
	    XmNactivateCallback = procedure gotoaction (0);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_GOTO_CANCEL);
    	};
    };


    find_dialog : XmBulletinBoardDialog {
	arguments {
	    XmNdialogTitle = CARD_FIND_DIALOG_T;
	    XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
	    XmNdefaultPosition = true;
	    XmNdefaultButton = XmPushButton find_ok;
	    XmNcancelButton = XmPushButton find_cancel;
            XmNmarginWidth = CARD_MARGIN_WIDTH;
            XmNmarginHeight = CARD_MARGIN_HEIGHT;
	};
	controls {
	    XmLabel 		find_label;
	    DXmCSText 		find_text;
	    XmPushButton 	find_ok;
	    XmPushButton 	find_cancel;
	};
      	callbacks {
	    XmNmapCallback = procedure dialog_mapped (k_find_text);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_FIND_DIALOG);
	};
    };

    find_label : XmLabel {
	arguments {
	    XmNlabelString = CARD_FIND_LABEL_L;
	    XmNx = CARD_FIND_LABEL_X;
	    XmNy = CARD_FIND_LABEL_Y;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_FIND_LABEL);
	};
    };

    find_text : DXmCSText {
	arguments {
	    XmNx = CARD_FIND_TEXT_X;
	    XmNy = CARD_FIND_TEXT_Y;
	    XmNcolumns = CARD_INDEX_MAX_LEN;
	    XmNmaxLength = CARD_FIND_MAX_LEN;
	};
	callbacks {
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_FIND_TEXT);
	    MrmNcreateCallback = procedure create_text (k_find_text);
	};
    };

    find_ok : XmPushButton {
	arguments {
	    XmNlabelString = CARD_FIND_OK_L;
	    XmNx = CARD_FIND_OK_X;
	    XmNy = CARD_FIND_OK_Y;
	};
	callbacks {
	    XmNactivateCallback = procedure findaction (1);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_FIND_OK);
	};
    };

    find_cancel : XmPushButton {
	arguments {
	    XmNlabelString = CARD_FIND_CANCEL_L;
	    XmNx = CARD_FIND_CANCEL_X;
	    XmNy = CARD_FIND_CANCEL_Y;
	};
	callbacks {
	    XmNactivateCallback = procedure findaction (0);
	    XmNhelpCallback = procedure indexhelp (CARD_HLP_FIND_CANCEL);
    	};
    };


    card_index_dialog : XmBulletinBoardDialog {
	arguments {
	   XmNdialogTitle = CARD_CARD_INDEX_DIALOG_T;
	   XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	   XmNdefaultPosition = true;
	   XmNdefaultButton = XmPushButton card_index_ok;
	   XmNcancelButton = XmPushButton card_index_cancel;
           XmNmarginWidth = CARD_MARGIN_WIDTH;
           XmNmarginHeight = CARD_MARGIN_HEIGHT;
	};
	controls {
	   XmLabel 		card_index_label;
	   DXmCSText 		card_index_dialog_text;
	   XmPushButton 	card_index_ok;
	   XmPushButton 	card_index_cancel;
	};
	callbacks {
	    XmNmapCallback = procedure dialog_mapped (k_card_index_dialog_text);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_INDEX_DIALOG);
	};
    };

    card_index_label : XmLabel {
	arguments {
	    XmNlabelString = CARD_CARD_INDEX_LABEL_L;
	    XmNx = CARD_CARD_INDEX_LABEL_X;
	    XmNy = CARD_CARD_INDEX_LABEL_Y;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_INDEX_LABEL);
	};
    };

    card_index_dialog_text : DXmCSText {
	arguments {
	    XmNx = CARD_CARD_INDEX_DIALOG_TEXT_X;
	    XmNy = CARD_CARD_INDEX_DIALOG_TEXT_Y;
	    XmNcolumns = CARD_INDEX_MAX_LEN;
	    XmNmaxLength = CARD_INDEX_MAX_LEN;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_INDEX_DIALOG_TEXT);
	    MrmNcreateCallback = procedure create_text (k_card_index_dialog_text);
	};
    };

    card_index_ok : XmPushButton {
	arguments {
	    XmNlabelString = CARD_CARD_INDEX_OK_L;
	    XmNx = CARD_CARD_INDEX_OK_X;
	    XmNy = CARD_CARD_INDEX_OK_Y;
	};
	callbacks {
	    XmNactivateCallback = procedure renameaction (1);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_INDEX_OK);
	};
    };

    card_index_cancel : XmPushButton {
	arguments {
	    XmNlabelString = CARD_CARD_INDEX_CANCEL_L;
	    XmNx = CARD_CARD_INDEX_CANCEL_X;
	    XmNy = CARD_CARD_INDEX_CANCEL_Y;
	};
	callbacks {
	    XmNactivateCallback = procedure renameaction (0);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_INDEX_CANCEL);
    	};
    };


    card_goto_dialog : XmBulletinBoardDialog {
	arguments {
	    XmNdialogTitle = CARD_CARD_GOTO_DIALOG_T;
	    XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
	    XmNdefaultPosition = true;
	    XmNdefaultButton = XmPushButton card_goto_ok;
	    XmNcancelButton = XmPushButton card_goto_cancel;
            XmNmarginWidth = CARD_MARGIN_WIDTH;
            XmNmarginHeight = CARD_MARGIN_HEIGHT;
	};
	controls {
	    XmLabel 		card_goto_label;
	    DXmCSText 		card_goto_text;
	    XmPushButton 	card_goto_ok;
	    XmPushButton 	card_goto_cancel;
	};
	callbacks {
	    XmNmapCallback = procedure dialog_mapped (k_card_goto_text);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_GOTO_DIALOG);
	};
    };

    card_goto_label : XmLabel {
	arguments {
	    XmNlabelString = CARD_CARD_GOTO_LABEL_L;
	    XmNx = CARD_CARD_GOTO_LABEL_X;
	    XmNy = CARD_CARD_GOTO_LABEL_Y;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_GOTO_LABEL);
	};
    };

    card_goto_text : DXmCSText {
	arguments {
	    XmNx = CARD_CARD_GOTO_TEXT_X;
	    XmNy = CARD_CARD_GOTO_TEXT_Y;
	    XmNcolumns = CARD_INDEX_MAX_LEN;
	    XmNmaxLength = CARD_INDEX_MAX_LEN;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_GOTO_TEXT);
	    MrmNcreateCallback = procedure create_text (k_card_goto_text);
	};
    };

    card_goto_ok : XmPushButton {
	arguments {
	    XmNlabelString = CARD_CARD_GOTO_OK_L;
	    XmNx = CARD_CARD_GOTO_OK_X;
	    XmNy = CARD_CARD_GOTO_OK_Y;
	};
	callbacks {
	    XmNactivateCallback = procedure gotoaction (1);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_GOTO_OK);
	};
    };

    card_goto_cancel : XmPushButton {
	arguments {
	    XmNlabelString = CARD_CARD_GOTO_CANCEL_L;
	    XmNx = CARD_CARD_GOTO_CANCEL_X;
	    XmNy = CARD_CARD_GOTO_CANCEL_Y;
	};
	callbacks {
	    XmNactivateCallback = procedure gotoaction (0);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_GOTO_CANCEL);
    	};
    };


    card_find_dialog : XmBulletinBoardDialog {
	arguments {
	    XmNdialogTitle = CARD_CARD_FIND_DIALOG_T;
	    XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
	    XmNdefaultPosition = true;
	    XmNdefaultButton = XmPushButton card_find_ok;
	    XmNcancelButton = XmPushButton card_find_cancel;
            XmNmarginWidth = CARD_MARGIN_WIDTH;
            XmNmarginHeight = CARD_MARGIN_HEIGHT;
	};
	controls {
	    XmLabel 		card_find_label;
	    DXmCSText 		card_find_text;
	    XmPushButton 	card_find_ok;
	    XmPushButton 	card_find_cancel;
	};
      	callbacks {
	    XmNmapCallback = procedure dialog_mapped (k_card_find_text);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_FIND_DIALOG);
	};
    };

    card_find_label : XmLabel {
	arguments {
	    XmNlabelString = CARD_CARD_FIND_LABEL_L;
	    XmNx = CARD_CARD_FIND_LABEL_X;
	    XmNy = CARD_CARD_FIND_LABEL_Y;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_FIND_LABEL);
	};
    };

    card_find_text : DXmCSText {
	arguments {
	    XmNx = CARD_CARD_FIND_TEXT_X;
	    XmNy = CARD_CARD_FIND_TEXT_Y;
	    XmNcolumns = CARD_INDEX_MAX_LEN;
	    XmNmaxLength = CARD_FIND_MAX_LEN;
	};
	callbacks {
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_FIND_TEXT);
	    MrmNcreateCallback = procedure create_text (k_card_find_text);
	};
    };

    card_find_ok : XmPushButton {
	arguments {
	    XmNlabelString = CARD_CARD_FIND_OK_L;
	    XmNx = CARD_CARD_FIND_OK_X;
	    XmNy = CARD_CARD_FIND_OK_Y;
	};
	callbacks {
	    XmNactivateCallback = procedure findaction (1);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_FIND_OK);
	};
    };

    card_find_cancel : XmPushButton {
	arguments {
	    XmNlabelString = CARD_CARD_FIND_CANCEL_L;
	    XmNx = CARD_CARD_FIND_CANCEL_X;
	    XmNy = CARD_CARD_FIND_CANCEL_Y;
	};
	callbacks {
	    XmNactivateCallback = procedure findaction (0);
	    XmNhelpCallback = procedure cardhelp (CARD_HLP_CARD_FIND_CANCEL);
    	};
    };


    main_help : DXmHelpDialog {
	arguments {
	    DXmNapplicationName = CARD_HELP_APP_NAME_L;
	    DXmNfirstTopic = 'Overview';
	    DXmNoverviewTopic = 'Overview';
	    DXmNdefaultPosition = true;
	    DXmNlibraryType = DXmTextLibrary;
	};
	callbacks {
	    XmNunmapCallback = procedure help_done_proc (0);
	};
    };

    card_main_help : DXmHelpDialog {
	arguments {
	    DXmNapplicationName = CARD_HELP_APP_NAME_L;
	    DXmNfirstTopic = 'Overview';
	    DXmNoverviewTopic = 'Overview';
	    DXmNlibraryType = DXmTextLibrary;
	    DXmNdefaultPosition = true;
	};
	callbacks {
	    XmNunmapCallback = procedure help_done_proc (1);
	};
    };
end module;

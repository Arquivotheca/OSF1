.\"
.\" *****************************************************************
.\" *                                                               *
.\" *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
.\" *                                                               *
.\" *   All Rights Reserved.  Unpublished rights  reserved  under   *
.\" *   the copyright laws of the United States.                    *
.\" *                                                               *
.\" *   The software contained on this media  is  proprietary  to   *
.\" *   and  embodies  the  confidential  technology  of  Digital   *
.\" *   Equipment Corporation.  Possession, use,  duplication  or   *
.\" *   dissemination of the software and media is authorized only  *
.\" *   pursuant to a valid written license from Digital Equipment  *
.\" *   Corporation.                                                *
.\" *                                                               *
.\" *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
.\" *   by the U.S. Government is subject to restrictions  as  set  *
.\" *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
.\" *   or  in  FAR 52.227-19, as applicable.                       *
.\" *                                                               *
.\" *****************************************************************
.\"
.\"
.\" HISTORY
.\"
.de EX		\"Begin example
.ne 5
.if n .sp 1
.if t .sp .5
.nf
.in +.5i
..
.de EE
.fi
.in -.5i
.if n .sp 1
.if t .sp .5
..
.TH DDXkeycaps 1 "9-jan-91" "X Version 11"
.SH NAME
DXkeycaps - graphically display and edit the keyboard mapping
.SH SYNOPSIS
.B DXkeycaps
[-\fItoolkitoption\fP ...] [-\fIoption\fP ...]
.SH DESCRIPTION
The \fIDXkeycaps\fP program displays a keyboard.  Moving the mouse over a 
key describes the keysyms and modifiers that that key generates.  Clicking
left on a key simulates a KeyPress event.  Clicking right on a key brings
up a menu of operations, including a command to change the keysyms that
the key generates. Pressing a key simulates a KeyPress event and also
describes the key.   This program is, in part, a graphical front-end 
to \fIxmodmap\fP.
.SH OPTIONS
.I DXkeycaps
accepts all of the standard toolkit options, and also accepts the
following options:
.TP 8
.B \-keyboard \fIkeyboard\-name\fP or \fB\-kbd\fP \fIkeyboard\-name\fP
Specifies the type of keyboard to display.  There are many different computer
keyboards in the world, and \fIDXkeycaps\fP must know which one you are using 
in order to function correctly.  The following keyboards are known:
.EX
DEC LK201
DEC LK401
.EE
Case does not matter when specifying a keyboard name, but you may need to
quote the spaces, as in
.EX
% DXkeycaps -keyboard "dec lk201"
.EE
.TP 8
.B \-gutterwidth \fInumber\fP or \fB\-gw\fP \fInumber\fP
Specifies the number of pixels of space to leave between each key.
.TP 8
.B \-font \fIfontname\fP
Specifies the font to use to display the keycaps.
.TP 8
The following standard X Toolkit command line arguments are commonly 
used with \fIDXkeycaps\fP:
.TP 8
.B \-display \fIhost:dpy\fP
This option specifies the X server to contact.
.TP 8
.B \-geometry \fIgeometry\fP
This option specifies the preferred size and position of the window.
.TP 8
.B \-bg \fIcolor\fP
This option specifies the color to use for the background of the window.
The default is light gray.
.TP 8
.B \-fg \fIcolor\fP
This option specifies the color to use for the foreground of the window.
The default is black.
.TP 8
.B \-bw \fInumber\fP
This option specifies the width in pixels of the border surrounding 
the window.
.TP 8
.B \-xrm \fIresourcestring\fP
This option specifies a resource string to be used.  This is especially
useful for setting resources that do not have separate command line options.
.SH DISPLAY
The bottom part of the window is a drawing of a keyboard.  In the top left of
each key is printed the string which actually appears on the surface of the
key.  In the bottom right of the key is the (hexadecimal) keycode that this
key generates.

At the top of the screen are several lines of text describing the key
under the mouse (or the most recently typed key.)  These lines are:
.TP 12
.B KeyCode:
This displays the text printed on the physical key, and the keycode generated
by that key in hex, decimal, and octal.
.TP 12
.B KeySym:
This displays the set of KeySyms that this key currently generates.  
.TP 12
.B Modifiers:
this displays the modifier bits which this key generates.  If a key generates
modifiers, it is a chord-key like \fIShift\fP or \fIControl\fP.
.TP 12
.B AutoRepeat:
Whether the X server claims that this key autorepeats.  I
say ``\fIclaims\fP'' because I have yet to encounter an X server for which
this information is accurate.  The per-key autorepeat flag seems to be
universally ignored.
.SH COMMANDS
There are several buttons in the upper left corner of the window.  They are:
.TP 8
.B Quit
Exits the program.
.TP 8
.B Select Keyboard
Pops up a menu from which you can change which keyboard is displayed.  
.TP 8
.B Restore Default Map
This command restores the keyboard to its default state.  If you execute
this command while displaying a keyboard which is not the type of keyboard
you are really using, your keymap will be in a nonsensical state.  There is
no way for \fIDXkeycaps\fP to tell what keyboard you are using except by
taking your word for it, so don't lie.
.TP 8
.B Save Session
This command writes an \fIxmodmap\fP input file representing the current
state of the keyboard (including all of your changes) to the standard output.
The file is saved in your home directory as .dxkeycaps. 
It prompts you with a dialog box: you can either write an \fIxmodmap\fP 
file representing the state of every key, or you can write a smaller
file which describes only the changes.

You can arrange for these bindings to be installed each time you log in
by placing the command
.EX
xmodmap \f.xkeycaps\fP
.EE
in your .X11Startup.  In such a case, ensure that your .X11Startup is loaded 
by the Session Manager, dxsession.  You may wish to read the man pages for
dxsession to find out how to do that.
.PP
Clicking left on a key simulates a \fBKeyPress\fP event.  Releasing the button
simulates a \fBKeyRelease\fP event.  If you click left on a key and move the
mouse while the button is down, \fBKeyPress\fP and \fBKeyRelease\fP events 
will be simulated on every key you move the mouse over.  Think of the mouse 
as your finger: if you drag the mouse over several keys, they will go down
and up in turn.

Clicking left on a key which is associated with modifier bits (such as
Shift or Control) causes that key to ``lock'' down.  Clicking left again
releases the key.  In this way, you can generate key-chords with the mouse:
to generate \fIControl-C\fP, click left on the \fIControl\fP key, and then 
click on the \fIC\fP key.  Click on \fIControl\fP again to turn the control
modifier off.

Typing a key on the \fIreal\fP keyboard simulates 
a \fBKeyPress\fP/\fBKeyRelease\fP event pair in the same way that
clicking on a key does.

You can also combine mouse and keyboard input: for example, if you use
the mouse to select the \fIShift\fP key, and type a character, the event
that is simulated will have the \fIShift\fP modifier set.  And if you
hold down the real \fIControl\fP key, and click on the \fIC\fP key in
the window, a \fIcontrol-C\fP event will be generated.  (Assuming, that 
is, that your window manager does not intercept control-left-button for its 
own purposes.)

Clicking right on a key pops up a menu of commands for the given key.
They are:
.TP 8
.B Exchange Keys
After selecting this menu item, you are asked to click on another key.
That key and the key on which you brought up the menu will be exchanged.
This actually changes the current keyboard mapping.
.TP 8
.B Duplicate Key
After selecting this menu item, you are asked to click on another key.
That key will be made a copy of the key on which you brought up the menu.
That is, the two keys will generate the same set of keysyms and modifiers.
This actually changes the current keyboard mapping.
.TP 8
.B Disable Key
The key on which you brought up the menu will be made to generate no
keysyms and no modifiers.  This actually changes the current keyboard mapping.
.TP 8
.B Restore Key To Default
The key on which you brought up the menu will be restored to its default
state; no other key will be altered.  This actually changes the current
keyboard mapping.
.TP 8
.B Edit KeySyms of Key
This pops up the "Edit Key" window, which allows you to arbitrarily change
which keysyms and modifiers this key generates.

On the left side of the window is the list of the keysyms that this key
currently generates.  (A key may generate up to eight keysyms; the 
interpretation of these keysyms is described in the X protocol document,
and is summarized later in the \fBKEYSYMS AND KEYCODES\fP section of
this man page.)

The second column is a multiple-choice list of the eight modifier bits
that this key may generate.  For example, if you want a key to behave
as a ``control'' key, you should select the \fBControl\fP modifier.

The third and fourth column (the scrolling lists) are for changing the 
keysym associated with the key.  When you select a keysym-position from 
the first column, the character set and keysym will be displayed in
the scrolling lists.  Clicking on a keysym in the ``KeySym'' column will
install that keysym in the highlighted slot in the first column.

To select a keysym from a different character set, click on the character
set name in the second column.  (The \fBLatin1\fP and \fBKeyboard\fP
character sets are the most commonly used.)

At the bottom of the window are three buttons: \fBUndo\fP, \fBAbort\fP, 
and \fBOk\fP.  Clicking on \fBUndo\fP reverts the Edit Key window to the
current state of the key in question.  \fBAbort\fP closes the Edit Key
window without making any changes.  \fBOk\fP closes the Edit Key window
and installs your changes (the current keyboard mapping is modified.)

.SH X DEFAULTS
\fIDXkeycaps\fP understands all of the core resource names and classes 
as well as:
.PP
.TP 8
.B *Keyboard.keyboard (\fPclass\fB Keyboard)
Which keyboard to display; this is the same as the \fB\-keyboard\fP 
command-line option.  If this is not specified, the default keyboard
is guessed, based on the server's vendor identification string.
.TP 8
.B *Keyboard.Key.highlight (\fPclass\fB Background)
The color to use to highlight a key when it is depressed.  If this is
the same as the background color of the key, it is highlighted with a
stipple pattern instead.
.TP 8
.B *Keyboard.Key.keycapColor (\fPclass\fB Foreground)
The color to paint the keycap string.
.TP 8
.B *Keyboard.Key.keycodeColor (\fPclass\fB Foreground)
The color to paint the keycode number.
.TP 8
.B *Keyboard.Key.borderColor (\fPclass\fB Color)
The color of the box around each key.
.TP 8
.B *Keyboard.Key.keycapFont (\fPclass\fB Font)
The font to use to draw the keycap string.
.TP 8
.B *Keyboard.Key.keycodeFont (\fPclass\fB Font)
The font to use to draw the keycode number.
.TP 8
.B *Keyboard.Key.borderWidth (\fPclass\fB Int)
The thickness of the box around each key.
.TP 8
.B *Keyboard.Key.gutterWidth (\fPclass\fB Int)
How many pixels to leave between this key and it's neighbors to the right
and bottom.
.PP
The class of each key widget is ``Key,'' as you see above.  The name of
each key is the string(s) printed on its face.  So if you wanted (for example)
the \fBShift\fP keys to have wider borders, you could specify that with
.EX
DXkeycaps*Keyboard.Shift.borderWidth: 2
.EE
.SH ACTIONS
It is possible to rebind the actions which happen when a key or mouse button
is pressed or released.  These actions are available on the \fBKeyboard\fP
widget:
.TP 8
.B "HighlightKey(\fIcondition\fP, \fIarg\fP)"
This places the key in question in the highlighted state.

If no \fIargument\fP is passed to this action, then the key is determined by
the event which invoked this action.  If this action is invoked by
a \fBKeyPress\fP or \fBKeyRelease\fP event, the key-widget is the key
corresponding to the key that the event represents.  If it is 
a \fBButtonPress\fP, \fBButtonRelease\fP, or \fBPointerMotion\fP event, 
then the key-widget is the one under the mouse.

The \fIargument\fP may be one of the words \fImouse\fP, \fIhighlighted\fP,
or \fIdisplayed\fP, meaning the key under the mouse, the key most recently
highlighted, or the key currently being described in the ``Info'' area
at the top of the window, respectively.

The \fIcondition\fP may be one of the words \fIifmod\fP, \fIunlessmod\fP,
\fIiftracking\fP, \fIunlesstracking\fP, \fIifhighlighted\fP, or 
\fIunlesshighlighted\fP.  If \fIifmod\fP was specified and the key in
question (as determined by the \fIargument\fP or by the invoking event) is 
not a modifier key, then this action is not executed.  The \fIunlessmod\fP 
condition is the opposite.  The \fIiftracking\fP and \fIunlesstracking\fP 
conditions allow you to do some actions only if (or unless) the key is 
being ``tracked'' with the mouse (see below.)  The \fIifhighlighted\fP
and \fIunlesshighlighted\fP actions allow you to do some things only if
(or unless) the key in question is currently in the highlighted state.
.TP 8
.B "UnhighlightKey(\fIcondition\fP, \fIarg\fP)"
This places the key in question in the unhighlighted state.  Arguments
are as above.
.TP 8
.B "ToggleKey(\fIcondition\fP, \fIarg\fP)"
This makes the key be highlighted if it is unhighlighted, or unhighlighted 
if it is highlighted.  Arguments are as above.
.TP 8
.B "SimulateKeyPress(\fIcondition\fP, \fIarg\fP)"
This action makes a \fBKeyPress\fP event corresponding to the key be
synthesized on the focus window.  Arguments are as above.
.TP 8
.B "SimulateKeyRelease(\fIcondition\fP, \fIarg\fP)"
This action makes a \fBKeyRelease\fP event corresponding to the key be
synthesized on the focus window.  Arguments are as above.
.TP 8
.B "TrackKey(\fIcondition\fP, \fIarg\fP)"
This makes the key in question begin being ``tracked'', which means that
moving the mouse off of it will simulate a button-release action, and then
will simulate a button-press action on the key that the mouse has moved
on to.  This action may only be invoked from a \fBButtonPress\fP
or \fBButtonRelease\fP event.
.TP 8
.B "UntrackKey(\fIcondition\fP, \fIarg\fP)"
This makes the key in question no longer be ``tracked.''
.TP 8
.B "DescribeKey(\fIcondition\fP, \fIarg\fP)"
This action causes the key and its bindings to be displayed in the ``Info''
section at the top of the window, if it is not already described there.
.PP
The default actions for the \fBKeyboard\fP widget are:
.EX
<Motion>:   DescribeKey(mouse,unlessTracking)      \\n\\
\\
<KeyDown>:  HighlightKey()                         \\
            DescribeKey(unlessMod)                 \\
            DescribeKey(displayed)                 \\
            SimulateKeyPress()                     \\n\\
\\
<KeyUp>:    UnhighlightKey()                       \\
            DescribeKey(displayed)                 \\
            SimulateKeyRelease()                   \\n\\
\\
<Btn1Down>: HighlightKey(unlessMod)                \\
            ToggleKey(ifMod)                       \\
            TrackKey(unlessMod)                    \\
            SimulateKeyPress(ifHighlighted)        \\
            SimulateKeyRelease(unlessHighlighted)  \\n\\
\\
<Btn1Up>:   UntrackKey(highlighted)                \\
            SimulateKeyRelease(highlighted,unlessMod) \\
            UnhighlightKey(highlighted,unlessMod)  \\n\\
\\
<Btn3Down>: XawPositionSimpleMenu(keyMenu)         \\
            MenuPopup(keyMenu)                     \\n
.EE
If you don't want a key to be described each time the mouse moves over
it, you can remove the \fI<Motion>\fP action.  In that case, you should
probably add \fBDescribeKey()\fP to the \fI<Btn1Down>\fP and \fI<KeyDown>\fP
actions.

If you want the key under the mouse to be described even while the mouse
is moving with a button down, then remove the \fIunlessTracking\fP
parameter from the \fBDescribeKey\fP action bound to \fB<Motion>\fP.

If you don't want the modifier keys to toggle, then change the \fIButton1\fP
actions to
.EX
DXkeycaps*Keyboard.actions:  #override               \\
        <Btn1Down>: HighlightKey()                  \\
                    TrackKey(unlessmod)             \\
                    SimulateKeyPress()              \\n\\
        <Btn1Up>:   UntrackKey(highlighted)         \\
                    SimulateKeyRelease(highlighted) \\
                    UnhighlightKey(highlighted)     \\n
.EE
Remember that these actions exist on the \fIKeyboard\fP widget, not on
the \fIKey\fP widgets.  If you add actions to the \fIKey\fP widgets,
things will malfunction.

.SH KEYSYMS AND KEYCODES
The following description is from the X Protocol document, and is reprinted
here for your convenience:

.RS
A list of \fBKeySym\fPs is associated with each \fBKeyCode\fP.  If that 
list (ignoring trailing \fBNoSymbol\fP entries) is a single \fBKeySym\fP ``K'',
then the list is treated as if it were the 
list \fB``K NoSymbol K NoSymbol''\fP.  
If the list (ignoring trailing \fBNoSymbol\fP entries) is a pair 
of \fBKeySym\fPs ``K1 K2'', then the list is treated as if it were the 
list \fB``K1 K2 K1 K2''\fP.  If the list (ignoring trailing \fBNoSymbol\fP 
entries) is a triple of \fBKeySym\fPs \fB``K1 K2 K3''\fP, then the list
is treated as if it were the list \fB``K1 K2 K3 NoSymbol''\fP.

The first four elements of the list are split into two groups
of \fBKeySym\fPs.  Group 1 contains the first and second \fBKeySym\fPs, 
Group 2 contains third and fourth \fBKeySym\fPs.  Within each group, if the
second element of the group is \fBNoSymbol\fP, then the group should be
treated as if the second element were the same as the first element, except
when the first element is an alphabetic \fBKeySym\fP ``K'' for which both
lowercase and uppercase forms are defined.  In that case, the group should
be treated as if the first element were the lowercase form of ``K'' and the
second element were the uppercase form of ``K''.

The standard rules for obtaining a \fBKeySym\fP from a KeyPress event make
use of only the Group 1 and Group 2 \fBKeySym\fPs; no interpretation of
other \fBKeySym\fPs in the list is given here.  (That is, the last four
KeySyms are unused.)

Which group to use is determined by modifier state.  Switching
between groups is controlled by the \fBKeySym\fP named \fBMode_switch\fP.

By attaching that \fBKeySym\fP to some \fBKeyCode\fP and attaching 
that \fBKeyCode\fP to any one of the modifiers \fBMod1\fP 
through \fBMod5\fP.  This modifier is called the ``group modifier''.  
For any \fBKeyCode\fP, Group 1 is used when the group modifier is off, 
and Group 2 is used when the group modifier is on.

Within a group, which \fBKeySym\fP to use is also determined by
modifier state.  The first \fBKeySym\fP is used when the \fBShift\fP 
and \fBLock\fP modifiers are off.  The second \fBKeySym\fP is used when 
the \fBShift\fP modifier is on, or when the \fBLock\fP modifier is on 
and the second \fBKeySym\fP is uppercase alphabetic, or when the \fBLock\fP
modifier is on and is interpreted as \fBShiftLock\fP.  Otherwise,
when the \fBLock\fP modifier is on and is interpreted as \fBCapsLock\fP,
the state of the \fBShift\fP modifier is applied first to select
a \fBKeySym\fP, but if that \fBKeySym\fP is lowercase alphabetic, then 
the corresponding uppercase \fBKeySym\fP is used instead.
.RE

.SH THE MODIFIER MAPPING
The following description is from the InterClient Communications 
Conventions Manual:

.RS
X11 supports 8 modifier bits,  of which 3 are pre-assigned to \fBShift\fP,
\fBLock\fP and \fBControl\fP.  Each modifier bit is controlled by the state
of a set of keys, and these sets are specified in a table accessed by
\fBGetModifierMapping()\fP and \fBSetModifierMapping()\fP.

A client needing to use one of the pre-assigned modifiers should assume that
the modifier table has been set up correctly to control these modifiers.
The \fILock\fP modifier should be interpreted as \fICaps Lock\fP 
or \fIShift Lock\fP according as the keycodes in its controlling set
include \fBXK_Caps_Lock\fP or \fBXK_Shift_Lock\fP.

Clients should determine the meaning of a modifier bit from the keysyms
being used to control it.

A client needing to use an extra modifier,  for example \fIMeta\fP,  should:
.RS

Scan the existing modifier mappings.
If it finds a modifier that contains a keycode whose set of keysyms
includes \fBXK_Meta_L\fP or \fBXK_Meta_R\fP, it should use that modifier bit.

If there is no existing modifier controlled by \fBXK_Meta_L\fP 
or \fBXK_Meta_R\fP, it should select an unused modifier bit (one with an
empty controlling set) and:
.RS

If there is a keycode with \fBXL_Meta_L\fP in its set of keysyms, add that
keycode to the set for the chosen modifier, then

if there is a keycode with \fBXL_Meta_R\fB in its set of keysyms, add that
keycode to the set for the chosen modifier, then

if the controlling set is still empty,  interact with the user to
select one or more keys to be \fBMeta\fP.
.RE

If there are no unused modifier bits, ask the user to take corrective action.
.RE
.RE

This means that the \fBMod1\fP modifier does not necessarily mean \fIMeta\fP,
although some applications (such as \fItwm\fP and \fIemacs\fP) assume that.
Any of the five unassigned modifier bits could mean Meta; what matters is
that a modifier bit is generated by a keycode which is bound to the
keysym \fBMeta_L\fP or \fBMeta-R\fP.

Therefore, if you want to make a ``meta'' key, the best way is to make
the keycode in question generate both a \fBMeta\fP keysym, and a modifier
bit.

.SH ENVIRONMENT
.PP
.TP 8
.B DISPLAY
to get the default host and display number.
.TP 8
.B XENVIRONMENT
to get the name of a resource file that overrides the global resources
stored in the RESOURCE_MANAGER property.
.SH "SEE ALSO"
X(1),
xmodmap(1)
.SH BUGS
Because this program has default colors that aren't "black" and "white",
the \fB\-rv\fP command-line option doesn't work.  But the incantation
.EX
% dxkeycaps -fg white -bg black -bd white
.EE
will do what you want on a monochrome screen.

The default keyboard that is used is "dec lk201".  If you wish to use
other keyboards (at present, only the dec lk401 set is supported), you
will need to specify it either via the resources or through the command
line option.

If you depress more than a dozen keys at a time, many X servers get confused,
and don't transmit enough \fBKeyRelease\fP events; the result of this is
that the \fIDXkeycaps\fP keys will get ``stuck'' until they are pressed again.
(Don't go like that.)

The \fBAutoRepeat\fP flag is useless, because all X servers I've seen
ignore it.

The \fIType at Window\fP command doesn't seem to work on the WreckStation
version of XTerm.  I assume some variation of the normal XTerm's
\fIAllow SendEvents\fP command is necessary.

If the popup menu is always greyed out, it's probably because you're
running the \fIxswarm\fP program or something like it.  (Don't go like that.)

There doesn't seem to be any way to notice key-transitions when we don't
have the keyboard focus.  I would like this program to track the state of
the keyboard even when the user isn't focusing on it.

The output should be written to a file instead of to standard-output; but
the Athena widget set doesn't seem to come with a file-requestor widget,
and I don't want to write one.

It needs to know about more keyboard types.

L-shaped keys aren't drawn accurately.  We should use the Shape extension
for that.

In addition to displaying the ASCII version of the given character, it
should display the corresponding character in the character set (Latin2,
Kana, Greek, etc.)  This would require having fonts for all of those 
character sets, though, and as far as I can tell, they don't all come
standard.

.SH COPYRIGHT
Copyright 1991, Jamie Zawinski, Satish Ramachandran.
Permission to use, copy, modify, distribute,
and sell this software and its documentation for any purpose is hereby granted
without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting
documentation.  No representations are made about the suitability of this
software for any purpose.  It is provided "as is" without express or
implied warranty.
.SH AUTHOR
Jamie Zawinski <jwz@lucid.com>, 10-nov-91.
Satish Ramachandran <satish@wsl.dec.com> March, '92.
Please let Satish know if you find any bugs or make any improvement.


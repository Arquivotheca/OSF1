! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
! @(#)$RCSfile: sm_cust_lang.src.uil,v $ $Revision: 1.1.2.2 $ (DEC) $Date: 92/12/28 13:01:45 $
! 
!	This module is part of the SESSION MANAGER component.  
!	It contains no translatable text.

!
! UIL file for Language Switch mock SM
!

procedure
	setlanguage_ok_pb_cb();
	setlanguage_apply_pb_cb();
	setlanguage_dismiss_pb_cb();
	setlanguage_list_single_cb();
	setlanguage_list_create_cb();

object          
	SETLANGUAGE_BOX: XmFormDialog {
	    arguments {
                XmNnoResize = true;
		XmNdialogTitle = setlanguage_box_title;
		XmNdialogStyle = XmDIALOG_MODELESS;
		XmNdefaultPosition = true;
		XmNhorizontalSpacing = k_adb_horizontal_offset;
		XmNverticalSpacing = k_adb_vertical_offset;
		XmNmarginWidth = setlanguage_mwidth;
		XmNmarginHeight = setlanguage_mheight;
		XmNdefaultButton = XmPushButton LangOK;
                XmNcancelButton = XmPushButton LangDismiss;
	    };
    controls
      {
	XmForm LangContainer;
	XmForm LangButtonsContainer;
      };
};

object LangContainer : XmForm
  {
    arguments
      {
        arguments top_form_args;
        XmNdefaultButton = XmPushButton LangOK;
        XmNcancelButton = XmPushButton LangDismiss;
      };
     controls
       {
	 XmLabel LangLABEL;
	 XmScrolledList	LangLIST_BOX;
       };
  };

object LangButtonsContainer : XmForm
  {
    arguments
      {
        arguments form_button_args;
	XmNtopWidget = XmForm LangContainer;
        XmNdefaultButton = XmPushButton LangOK;
        XmNcancelButton = XmPushButton LangDismiss;
      };
    controls
      {                                    
        XmPushButton LangOK;
        XmPushButton LangApply;
        XmPushButton LangDismiss;
#ifdef HYPERHELP
        XmPushButton LangHelp;
#endif
      };
  };
  
object
	LangLABEL: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNleftOffset = k_adb_horizontal_offset;
		XmNtopAttachment = XmATTACH_FORM;
		XmNtopOffset = k_adb_vertical_offset;
		XmNlabelString = setlanguage_label_text;
	    };
	};

object
	LangLIST_BOX: XmScrolledList {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel LangLABEL;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel LangLABEL;
		XmNtopOffset = k_adb_lb_vert_offset;
		XmNvisibleItemCount = 5;
		XmNitems = setlanguage_list;
		XmNselectionPolicy = XmSINGLE_SELECT;
		XmNlistSizePolicy = XmCONSTANT;
		XmNbottomAttachment = XmATTACH_FORM;
		XmNbottomOffset = k_shadow_thickness*2;
	    };
	    callbacks {
		XmNsingleSelectionCallback
			= procedure setlanguage_list_single_cb();
		MrmNcreateCallback = procedure setlanguage_list_create_cb();
	    };
	};

object
	LangOK: XmPushButton {
	    arguments {
		arguments ok_args;
		XmNtopWidget = XmPushButton LangApply;
		XmNrightWidget = XmPushButton LangApply;
	    };
	    callbacks {
		XmNactivateCallback = procedure setlanguage_ok_pb_cb();
	    };
	};

object
	LangApply: XmPushButton {
	    arguments {
		arguments apply_args;
	    };
    	    callbacks {
		XmNactivateCallback = procedure setlanguage_apply_pb_cb();
	    };
	};

object
	LangDismiss: XmPushButton {
	    arguments {
		arguments cancel_args;
		XmNtopWidget = XmPushButton LangOK;
		XmNleftWidget = XmPushButton LangApply;
	    };
	    callbacks {
		XmNactivateCallback = procedure setlanguage_dismiss_pb_cb();
	    };		
	};
object
	LangHelp: XmPushButton {
	    arguments {
		arguments help_args;
 		XmNtopWidget = XmPushButton LangOK;
		XmNleftWidget = XmPushButton LangDismiss;
	    };
	    callbacks {
#ifdef HYPERHELP
		XmNactivateCallback
			= procedure help_system_proc(k_setting_lang_help);
#endif
	    };		
	};

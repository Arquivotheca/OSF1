! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
! @(#)$RCSfile: sm_cust_autostart.src.uil,v $ $Revision: 1.1.2.2 $ (DEC) $Date: 92/12/28 13:01:34 $
! 
!	This module is part of the SESSION MANAGER component.  
!	It contains no translatable text.

!
! Customize AutoStart Menu box
!

identifier
	autostart_menu_listbox_id;
	autostart_def_listbox_id;

procedure
        AutoStartOkCallback();
        AutoStartDismissCallback();
        AutoStartApplyCallback();
        AutoStartAddCallback();
        AutoStartRemoveCallback();


object
	CustomizeAutoStart: XmFormDialog {
	    arguments {
		XmNnoResize = true;
		XmNdefaultPosition = true;
		XmNhorizontalSpacing = k_adb_horizontal_offset;
		XmNverticalSpacing = k_adb_vertical_offset;
		XmNdialogTitle = k_autostart_title_text;
		XmNdialogStyle = XmDIALOG_MODELESS;
		XmNmarginHeight = k_autostart_db_mheight;
		XmNmarginWidth = k_autostart_db_mwidth;
		XmNautoUnmanage = false;
                XmNdefaultButton = XmPushButton AutoStartOK;
                XmNcancelButton = XmPushButton AutoStartDismiss;
	    };
    controls
      {
	XmForm ASContainer;
	XmForm ASButtonsContainer;
      };
  };

object ASContainer : XmForm
  {
    arguments
      {
        arguments top_form_args;
        XmNdefaultButton = XmPushButton AutoStartOK;
        XmNcancelButton = XmPushButton AutoStartDismiss;
      };
     controls
       {
	 XmForm ASDefContainer;
	 XmForm ASMenuContainer;
       };
  };

object
	ASDefContainer: XmForm {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNleftOffset = k_adb_horizontal_offset*2;
		XmNtopAttachment = XmATTACH_FORM;
		XmNtopOffset = k_adb_vertical_offset;
		XmNbottomAttachment = XmATTACH_FORM;
		XmNbottomOffset = k_shadow_thickness*2;
		XmNborderWidth = 0;
		XmNmarginHeight = 0;		
		XmNmarginWidth = 0;
	    };
            controls {
                XmLabel ASDefListLabel;
                XmScrolledList ASDefList;
	    };
	};

object
	ASDefListLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_FORM;
		XmNtopOffset = 0;
		XmNlabelString = k_as_deflist_list_text;
	    };
	};

object
	ASDefList: XmScrolledList {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel ASDefListLabel;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel ASDefListLabel;
		XmNtopOffset = k_adb_lb_vert_offset;
		XmNwidth = k_deflist_list_lb_width;
		XmNvisibleItemCount = k_deflist_list_lb_items;
		XmNselectionPolicy = XmSINGLE_SELECT;
		XmNlistSizePolicy = XmCONSTANT;
	    };
            callbacks {
                MrmNcreateCallback
		       = procedure widget_create_proc(autostart_def_listbox_id);
                XmNsingleSelectionCallback = procedure AutoStartAddCallback();
                XmNdefaultActionCallback = procedure AutoStartAddCallback();
#ifdef HYPERHELP
		XmNhelpCallback = procedure help_system_proc(k_autostart_help);
#endif
	    };
	};

object
	ASMenuContainer: XmForm {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmForm ASDefContainer;
		XmNleftOffset = k_adb_medium_horiz_offset;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmForm ASDefContainer;
		XmNtopOffset = 0;
		XmNrightAttachment = XmATTACH_FORM;
		XmNrightOffset = k_adb_horizontal_offset + 5;
		XmNborderWidth = 0;
		XmNmarginHeight = 0;		
		XmNmarginWidth = 0;
	    };
            controls {
                XmLabel ASMenuListLabel;
                XmScrolledList ASMenuList;
	    };
	};

object
	ASMenuListLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_FORM;
		XmNtopOffset = 0;
		XmNlabelString = k_as_menulist_list_text;
	    };
	};

object
	ASMenuList: XmScrolledList {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel ASMenuListLabel;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel ASMenuListLabel;
		XmNtopOffset = k_adb_lb_vert_offset;
		XmNrightAttachment = XmATTACH_FORM;
		XmNrightOffset = 0;
		XmNwidth = k_menulist_list_lb_width;
		XmNvisibleItemCount = k_menulist_list_lb_items;
		XmNselectionPolicy = XmSINGLE_SELECT;
		XmNlistSizePolicy = XmCONSTANT;
	    };
            callbacks {
                MrmNcreateCallback
		     = procedure widget_create_proc (autostart_menu_listbox_id);
                XmNsingleSelectionCallback
		     = procedure AutoStartRemoveCallback();
                XmNdefaultActionCallback = procedure AutoStartRemoveCallback();
#ifdef HYPERHELP
		XmNhelpCallback = procedure help_system_proc(k_autostart_help);
#endif
	    };
	};

object ASButtonsContainer : XmForm
  {
    arguments
      {
        arguments form_button_args;
	XmNtopWidget = XmForm ASContainer;
        XmNdefaultButton = XmPushButton AutoStartOK;
        XmNcancelButton = XmPushButton AutoStartDismiss;
      };
    controls
      {
        XmPushButton AutoStartOK;
        XmPushButton AutoStartApply;
        XmPushButton AutoStartDismiss;
#ifdef HYPERHELP
        XmPushButton AutoStartHelp;
#endif
      };
  };
  
object
	AutoStartOK: XmPushButton {
	    arguments {
		arguments ok_args;
		XmNtopWidget = XmPushButton AutoStartApply;
		XmNrightWidget = XmPushButton AutoStartApply;
	    };
            callbacks {
		XmNactivateCallback = procedure AutoStartOkCallback();
            };
	};

object
	AutoStartApply: XmPushButton {
	    arguments {
		arguments apply_args;
	    };
            callbacks {
		XmNactivateCallback = procedure AutoStartApplyCallback();
            };
	};

object
	AutoStartDismiss: XmPushButton {
	    arguments {
		arguments cancel_args;
		XmNtopWidget = XmPushButton AutoStartOK;
		XmNleftWidget = XmPushButton AutoStartApply;
	    };
            callbacks {
		XmNactivateCallback = procedure AutoStartDismissCallback();
            };
	};

object
	AutoStartHelp: XmPushButton {
	    arguments {
		arguments help_args;
		XmNleftWidget = XmPushButton AutoStartDismiss;
		XmNtopWidget = XmPushButton AutoStartOK;
	    };
            callbacks {
#ifdef HYPERHELP
		XmNactivateCallback
			= procedure help_system_proc(k_autostart_help);
#endif
            };
	};


! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
!	This module is part of the SESSION MANAGER component.  
!	It contains no translatable text.

!
! Customize Keyboard box
!

identifier
	bellenablebox_id;
	belldisable_id;
	bellenable_id;
	bellslider_id;
	clickenablebox_id;
	clickdisable_id;
	clickenable_id;
	clickslider_id;
	autorepeatbox_id;
	repeatenable_id;
	repeatdisable_id;
	lockbox_id;
	lockcaps_id;
	lockshift_id;
	operatorbox_id;
	operator_f2_id;
	operator_f1_id;
	operatormodbox_id;
	operator_ctrl_id;
	operator_shift_id;
	keylistbox_id;
        kbdprobe_id;

procedure
        KeyOkCallback();
        KeyApplyCallback();
        KeyCancelCallback();
        KeyListboxCallback();
        KeyboardProbeCallback();


object
	CustomizeKeyboard: XmFormDialog {
	    arguments {
                XmNnoResize = true;
		XmNdefaultPosition = true;
		XmNhorizontalSpacing = k_adb_horizontal_offset;
		XmNverticalSpacing = k_adb_vertical_offset;
		XmNdialogTitle = k_keyboard_title_text;
		XmNdialogStyle = XmDIALOG_MODELESS;
		XmNmarginHeight = k_keyboard_db_mheight;
		XmNmarginWidth = k_keyboard_db_mwidth;
                XmNautoUnmanage = false;
                XmNdefaultButton = XmPushButton KeyboardOK;
                XmNcancelButton = XmPushButton KeyboardDismiss;
	    };
    controls
      {
	XmForm KeyboardContainer;      
        XmPushButton KeyboardOK;
        XmPushButton KeyboardApply;
        XmPushButton KeyboardDismiss;
#ifdef HYPERHELP
        XmPushButton KeyboardHelp;
#endif
      };
  };

object KeyboardContainer : XmForm
  {
    arguments
      {
        arguments top_form_args;
      };
            controls {
                XmLabel BellEnableLabel;
		XmRadioBox BellEnableBox;
		XmScale BellSlider;
                XmLabel ClickEnableLabel;
		XmRadioBox ClickEnableBox;
		XmScale ClickSlider;
                XmLabel AutoRepeatLabel;
		XmRadioBox AutoRepeatBox;
                XmLabel LockLabel;
		XmRadioBox LockBox;
		XmLabel KeyboardLabel;
		XmScrolledList KeyboardList;
		XmPushButton KeyboardProbe;
            };
	};

object
	BellEnableLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNleftOffset = k_adb_horizontal_offset;
		XmNtopAttachment = XmATTACH_FORM;
		XmNtopOffset = k_adb_vertical_offset;
		XmNlabelString = k_keyboard_bell_text;
	    };
	};

object
	BellEnableBox: XmRadioBox {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel BellEnableLabel;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel BellEnableLabel;
		XmNtopOffset = 0;
		XmNborderWidth = 0;
		XmNradioBehavior = true;
	    };
            controls {
		XmToggleButton BellEnable;
		XmToggleButton BellDisable;
            };	    
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (bellenablebox_id);
#ifdef HYPERHELP
		XmNhelpCallback = procedure help_system_proc(k_bell_set_help);
#endif
            };
	};

object
	BellEnable: XmToggleButton {
	    arguments {
		XmNlabelString = k_keyboard_bell_enable_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (bellenable_id);
            };
	};

object
	BellDisable: XmToggleButton {
	    arguments {
		XmNlabelString = k_keyboard_bell_disable_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (belldisable_id);
            };
	};

object
	BellSlider: XmScale {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmRadioBox BellEnableBox;
		XmNleftOffset = k_adb_medium_horiz_offset - 5;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmLabel BellEnableLabel;
		XmNtopOffset = k_adb_scale_vert_offset+6;
		XmNwidth = k_keyboard_bell_scale_width;
		XmNvalue = 0;
		XmNminimum = 0;
		XmNmaximum = 100;
		XmNtitleString = k_keyboard_bell_scale_text;
		XmNorientation = XmHORIZONTAL;
		XmNshowValue = true;
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (bellslider_id);
#ifdef HYPERHELP
		XmNhelpCallback = procedure help_system_proc(k_bell_set_help);
#endif
            };
	};

object
	KeyboardLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmScale BellSlider;
		XmNleftOffset = k_adb_medium_horiz_offset;
		XmNtopAttachment = XmATTACH_FORM;
		XmNtopOffset = k_adb_small_vert_offset;
		XmNlabelString = k_keyboard_type_text;
	    };
	};

object
	KeyboardList: XmScrolledList {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel KeyboardLabel;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel KeyboardLabel;
		XmNtopOffset = k_adb_lb_vert_offset;
		XmNrightAttachment = XmATTACH_FORM;
		XmNrightOffset = k_adb_horizontal_offset + 2;
		XmNvisibleItemCount = k_keyboard_type_lb_items;
		XmNselectionPolicy = XmSINGLE_SELECT;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (keylistbox_id);
                XmNsingleSelectionCallback = procedure KeyListboxCallback();
                XmNdefaultActionCallback = procedure KeyListboxCallback();
#ifdef HYPERHELP
		XmNhelpCallback = procedure help_system_proc(k_kybrd_typ_help);
#endif
            };
	};

object
	KeyboardProbe: XmPushButton {
	    arguments {
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmScrolledList KeyboardList;
		XmNtopOffset = k_adb_lb_vert_offset + 10;
		XmNrightAttachment = XmATTACH_FORM;
		XmNrightOffset = k_adb_horizontal_offset + 80;
		XmNlabelString =  k_keyboard_dxkeycaps_text;
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (kbdprobe_id);
                XmNactivateCallback = procedure KeyboardProbeCallback();
#ifdef HYPERHELP
		XmNhelpCallback = procedure help_system_proc(k_keycaps_help);
#endif
            };
	};


object
	ClickEnableLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel BellEnableLabel;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmRadioBox BellEnableBox;
		XmNtopOffset = k_adb_radio_vert_offset;
		XmNlabelString = k_keyboard_click_text;
	    };
	};

object
	ClickEnableBox: XmRadioBox {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel ClickEnableLabel;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel ClickEnableLabel;
		XmNtopOffset = 0;
		XmNborderWidth = 0;
		XmNradioBehavior = true;
	    };
            controls {
		XmToggleButton ClickEnable;
		XmToggleButton ClickDisable;
            };	    
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (clickenablebox_id);
#ifdef HYPERHELP
		XmNhelpCallback = procedure help_system_proc(k_kyclk_set_help);
#endif
            };
	};

object
	ClickEnable: XmToggleButton {
	    arguments {
		XmNlabelString = k_keyboard_click_enable_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (clickenable_id);
            };
	};

object
	ClickDisable: XmToggleButton {
	    arguments {
		XmNlabelString = k_keyboard_click_disable_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (clickdisable_id);
            };
	};

object
	ClickSlider: XmScale {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmRadioBox ClickEnableBox;
		XmNleftOffset = k_adb_medium_horiz_offset - 5;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmLabel ClickEnableLabel;
		XmNtopOffset = k_adb_scale_vert_offset + 7;
		XmNwidth = k_keyboard_click_scale_width;
		XmNvalue = 0;
		XmNminimum = 0;
		XmNmaximum = 100;
		XmNtitleString = k_keyboard_click_scale_text;
		XmNorientation = XmHORIZONTAL;
		XmNshowValue = true;
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (clickslider_id);
#ifdef HYPERHELP
		XmNhelpCallback = procedure help_system_proc(k_kyclk_set_help);
#endif
            };
	};

object
	AutoRepeatLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel ClickEnableLabel;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmRadioBox ClickEnableBox;
		XmNtopOffset = k_adb_radio_vert_offset + 10;
		XmNlabelString = k_keyboard_repeat_text;
	    };
	};

object
	AutoRepeatBox: XmRadioBox {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel AutoRepeatLabel;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel AutoRepeatLabel;
		XmNtopOffset = 0;
		XmNbottomAttachment = XmATTACH_FORM;
		XmNbottomOffset = k_shadow_thickness*2;
		XmNborderWidth = 0;
		XmNradioBehavior = true;
	    };
            controls {
		XmToggleButton RepeatEnable;
		XmToggleButton RepeatDisable;
            };	    
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (autorepeatbox_id);
#ifdef HYPERHELP
		XmNhelpCallback 
			= procedure help_system_proc(k_autorpt_set_help);
#endif
            };
	};

object
	RepeatEnable: XmToggleButton {
	    arguments {
		XmNlabelString = k_keyboard_repeat_enable_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (repeatenable_id);
            };
	};

object
	RepeatDisable: XmToggleButton {
	    arguments {
		XmNlabelString = k_keyboard_repeat_disable_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (repeatdisable_id);
            };
	};

object
	LockLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmRadioBox AutoRepeatBox;
		XmNleftOffset = k_adb_medium_horiz_offset;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmLabel AutoRepeatLabel;
		XmNtopOffset = 0;
		XmNlabelString = k_keyboard_lock_text;
	    };
	};

object
	LockBox: XmRadioBox {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel LockLabel;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel LockLabel;
		XmNtopOffset = 0;
		XmNborderWidth = 0;
		XmNradioBehavior = true;
	    };
            controls {
		XmToggleButton LockCaps;
		XmToggleButton LockShift;
            };	    
            callbacks {
                MrmNcreateCallback = procedure widget_create_proc (lockbox_id);
#ifdef HYPERHELP
		XmNhelpCallback = procedure help_system_proc(k_lockey_set_help);
#endif
            };
	};

object
	LockCaps: XmToggleButton {
	    arguments {
		XmNlabelString = k_keyboard_lock_caps_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (lockcaps_id);
            };
	};

object
	LockShift: XmToggleButton {
	    arguments {
		XmNlabelString = k_keyboard_lock_shift_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc(lockshift_id);
            };
	};

object
	OperatorLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmRadioBox LockBox;
		XmNleftOffset = k_adb_medium_horiz_offset;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmLabel LockLabel;
		XmNtopOffset = 0;
		XmNlabelString = k_keyboard_opkey_text;
	    };
	};

object
	OperatorModBox: XmRadioBox {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel OperatorLabel;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel OperatorLabel;
		XmNtopOffset = 0;
		XmNborderWidth = 0;
		XmNradioBehavior = true;
	    };
            controls {
		XmToggleButton Ctrl;
		XmToggleButton Shift;
            };	    
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (operatormodbox_id);
            };
	};

object
	Ctrl: XmToggleButton {
	    arguments {
		XmNlabelString = k_keyboard_opmod_control_text;
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (operator_ctrl_id);
            };
	};

object
	Shift: XmToggleButton {
	    arguments {
		XmNlabelString = k_keyboard_opmod_shift_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (operator_shift_id);
            };
	};

object
	OperatorModLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmRadioBox OperatorModBox;
		XmNleftOffset = k_keyboard_opmod_left_offset;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmRadioBox OperatorModBox;
		XmNtopOffset = k_keyboard_opmod_top_offset;
		XmNlabelString = k_keyboard_opmod_text;
	    };
	};

object
	OperatorBox: XmRadioBox {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmLabel OperatorModLabel;
		XmNleftOffset = k_keyboard_opmod_left_offset;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmRadioBox OperatorModBox;
		XmNtopOffset = 0;
		XmNborderWidth = 0;
		XmNradioBehavior = true;
	    };
            controls {
		XmToggleButton F1;
		XmToggleButton F2;
            };	    
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (operatorbox_id);
            };
	};

object
	F1: XmToggleButton {
	    arguments {
		XmNlabelString = k_keyboard_opkey_f1_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (operator_f1_id);
            };
	};

object
	F2: XmToggleButton {
	    arguments {
		XmNlabelString = k_keyboard_opkey_f2_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (operator_f2_id);
            };
	};

object
	KeyboardOK: XmPushButton {
	    arguments {
		arguments button_ok_args;
		XmNtopWidget = XmPushButton KeyboardApply;
		XmNrightWidget = XmPushButton KeyboardApply;
	    };
            callbacks {
		XmNactivateCallback = procedure KeyOkCallback();
            };
	};

object
	KeyboardApply: XmPushButton {
	    arguments {
		arguments button_apply_args;
    	        XmNtopWidget = XmForm KeyboardContainer;
	    };
            callbacks {
		XmNactivateCallback = procedure KeyApplyCallback();
            };
	};

object
	KeyboardDismiss: XmPushButton {
	    arguments {
		arguments button_cancel_args;
		XmNtopWidget = XmPushButton KeyboardOK;
		XmNleftWidget = XmPushButton KeyboardApply;
	    };
            callbacks {
		XmNactivateCallback = procedure KeyCancelCallback();
            };
	};
object
	KeyboardHelp: XmPushButton {
	    arguments {
		arguments button_help_args;
		XmNtopWidget = XmPushButton KeyboardOK;
		XmNleftWidget = XmPushButton KeyboardDismiss;
	    };
            callbacks {
#ifdef HYPERHELP
		XmNactivateCallback
			= procedure help_system_proc(k_setting_keyboard_help);
#endif
            };
	};

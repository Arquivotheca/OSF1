! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
! @(#)$RCSfile: sm_cust_security.src.uil,v $ $Revision: 1.1.4.2 $ (DEC) $Date: 1993/06/25 18:45:43 $
! 
!	This module is part of the SESSION MANAGER component.  
!	It contains no translatable text.

!
! Customize Security box
!

identifier
        listbox_id;
        text_id;
        remove_id;
        add_id;
        ok_id;
        apply_id;

!
! callback procedure declarations
!
procedure
        AddButtonCallback();
        RemoveButtonCallback();
        OkButtonCallback();
        DismissButtonCallback();
        ApplyButtonCallback();
	HostListCallback();

object
	CustomizeSecurity: XmFormDialog {
	    arguments {
                XmNnoResize = true;
                XmNdefaultPosition = true;
		XmNhorizontalSpacing = k_adb_horizontal_offset;
		XmNverticalSpacing = k_adb_vertical_offset;
		XmNdialogTitle = k_security_title_text;
		XmNdialogStyle = XmDIALOG_MODELESS;
		XmNmarginHeight = k_security_db_mheight;
		XmNmarginWidth = k_security_db_mwidth;
		XmNautoUnmanage = false;
		XmNdefaultButton = XmPushButton SecurityAdd;
		XmNcancelButton = XmPushButton SecurityDismiss;
	    };
    controls
      {
	XmForm SecurityContainer;
	XmForm SecurityButtonsContainer;
      };

};

object SecurityContainer : XmForm
  {
    arguments
      {
        arguments top_form_args;
        XmNdefaultButton = XmPushButton SecurityOK;
        XmNcancelButton = XmPushButton SecurityDismiss;
      };
     controls
       {
         XmLabel HostListLabel;
         XmScrolledList HostList;
	 XmText TextField;
	 XmLabel TextLabel;
	 XmPushButton SecurityAdd;
	 XmPushButton SecurityRemove;
       };
  };

object SecurityButtonsContainer : XmForm
  {
    arguments
      {
        arguments form_button_args;
	XmNtopWidget = XmForm SecurityContainer;
        XmNdefaultButton = XmPushButton SecurityOK;
        XmNcancelButton = XmPushButton SecurityDismiss;
      };
    controls
      {
        XmPushButton SecurityOK;
        XmPushButton SecurityApply;
        XmPushButton SecurityDismiss;
#ifdef HYPERHELP
        XmPushButton SecurityHelp;
#endif
      };
  };
  
object
	HostListLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNleftOffset = k_adb_horizontal_offset;
		XmNtopAttachment = XmATTACH_FORM;
		XmNtopOffset = k_adb_vertical_offset;
		XmNlabelString = k_security_list_text;
	    };
	};

object
	HostList: XmScrolledList {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel HostListLabel;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel HostListLabel;
		XmNtopOffset = k_adb_lb_vert_offset;
		XmNwidth = k_security_list_lb_width;
		XmNvisibleItemCount = k_security_list_lb_items;
		XmNlistSizePolicy = XmCONSTANT;
		XmNselectionPolicy = XmSINGLE_SELECT;
		XmNbottomAttachment = XmATTACH_FORM;
		XmNbottomOffset = k_shadow_thickness*2;
	    };
            callbacks {
                MrmNcreateCallback = procedure widget_create_proc (listbox_id);
		XmNsingleSelectionCallback = procedure HostListCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_setting_secure_help);
#endif
	    };
	};

object
	TextField: XmText {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmScrolledList HostList;
		XmNleftOffset = k_adb_medium_horiz_offset;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmScrolledList HostList;
		XmNtopOffset = 0;
		XmNrightAttachment = XmATTACH_FORM;
		XmNrightOffset = k_adb_horizontal_offset + 5;
		XmNcolumns = k_security_text_cols;
		XmNrows = k_security_text_rows;
		XmNresizeHeight = false;
		XmNresizeWidth = false;
	    };
            callbacks {
                MrmNcreateCallback = procedure widget_create_proc (text_id);
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_setting_secure_help);
#endif
	    };
	};

object
	TextLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmText TextField;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmText TextField;
		XmNtopOffset = 0;
		XmNlabelString = k_security_text_text;
	    };
	};

object
	SecurityAdd: XmPushButton {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel TextLabel;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel TextLabel;
		XmNtopOffset = k_adb_small_vert_offset;
		XmNwidth = k_security_add_pb_width;
		XmNlabelString = k_security_add_text;
	    };
            callbacks {
                MrmNcreateCallback = procedure widget_create_proc (add_id);
		XmNactivateCallback = procedure AddButtonCallback();
	    };
	};

object
	SecurityRemove: XmPushButton {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmPushButton SecurityAdd;
		XmNleftOffset = k_adb_medium_horiz_offset;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmPushButton SecurityAdd;
		XmNtopOffset = 0;
		XmNwidth = k_security_remove_pb_width;
		XmNlabelString = k_security_remove_text;
	    };
            callbacks {
                MrmNcreateCallback = procedure widget_create_proc (remove_id);
		XmNactivateCallback = procedure RemoveButtonCallback();
	    };
	};

object
	SecurityOK: XmPushButton {
	    arguments {
		arguments ok_args;
		XmNtopWidget = XmPushButton SecurityApply;
		XmNrightWidget = XmPushButton SecurityApply;
	    };
	    callbacks {
                MrmNcreateCallback = procedure widget_create_proc (ok_id);
		XmNactivateCallback = procedure OkButtonCallback();
	    };
	};

object
	SecurityApply: XmPushButton {
	    arguments {
		arguments apply_args;
	    };
            callbacks {
                MrmNcreateCallback = procedure widget_create_proc (apply_id);
		XmNactivateCallback = procedure ApplyButtonCallback();
	    };
	};

object
	SecurityDismiss: XmPushButton {
	    arguments {
		arguments cancel_args;
		XmNtopWidget = XmPushButton SecurityOK;
		XmNleftWidget = XmPushButton SecurityApply;
	    };
            callbacks {
		XmNactivateCallback = procedure DismissButtonCallback();
	    };
	};

object
	SecurityHelp: XmPushButton {
	    arguments {
 		arguments help_args;
		XmNtopWidget = XmPushButton SecurityOK;
		XmNleftWidget = XmPushButton SecurityDismiss;
	    };
            callbacks {
#ifdef HYPERHELP
		XmNactivateCallback
			= procedure help_system_proc(k_setting_secure_help);
#endif
	    };
	};


! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
!	This module is part of the SESSION MANAGER component.  
!	It contains no translatable text.

!
! Customize Pointer box
!

identifier
	accelbox_id;
	accelnone_id;
	accelslow_id;
	accelmedium_id;
	accelfast_id;
	buttonbox_id;
	buttonright_id;
	buttonleft_id;
	doubleclick_id;
	bwblack_id;
	bwwhite_id;
	bwforeground_id;
	clforeground_id;
	clbackground_id;
	shapebox_id;

procedure
        PointOkCallback();
        PointCancelCallback();
        PointApplyCallback();
	ColorSelectCallback();
	ShapeListboxCallback();

object
	BWCustomizePointer: XmFormDialog {
	    arguments {
                XmNnoResize = true;
		XmNdefaultPosition = true;
		XmNhorizontalSpacing = k_adb_horizontal_offset;
		XmNverticalSpacing = k_adb_vertical_offset;
		XmNdialogTitle = k_pointer_title_text;
		XmNdialogStyle = XmDIALOG_MODELESS;
		XmNmarginHeight = k_pointer_db_mheight;
		XmNmarginWidth = k_pointer_db_mwidth;
                XmNautoUnmanage = false;
                XmNdefaultButton = XmPushButton BWPointerOK;
                XmNcancelButton = XmPushButton BWPointerDismiss;
	    };
    controls
      {
	XmForm BWPointer1Container;
	XmForm BWPointer2Container;
        XmPushButton BWPointerOK;
        XmPushButton BWPointerApply;
        XmPushButton BWPointerDismiss;
#ifdef HYPERHELP
        XmPushButton BWPointerHelp;
#endif
      };
  };

object BWPointer1Container : XmForm
  {
    arguments
      {
        arguments top_form_args;
!        XmNdefaultButton = XmPushButton BWPointerOK;
!        XmNcancelButton = XmPushButton BWPointerDismiss;
      };
     controls
       {
                XmLabel ButtonLabel;
		XmRadioBox ButtonBox;
                XmLabel AccelLabel;
		XmRadioBox AccelBox;
		XmForm ClickContainer;
      };
  };

object BWPointer2Container : XmForm
  {
    arguments
      {
        arguments form_args;
        XmNtopWidget = XmForm BWPointer1Container;
!        XmNdefaultButton = XmPushButton BWPointerOK;
!        XmNcancelButton = XmPushButton BWPointerDismiss;
      };
     controls
       {
                XmLabel ShapeLabel;
                XmScrolledList ShapeBox;
!		XmLabel BWForegroundLabel;
     		XmRadioBox BWForegroundBox;
      };
  };

object
	CLCustomizePointer: XmFormDialog {
	    arguments {
                XmNnoResize = true;
		XmNdefaultPosition = true;
		XmNhorizontalSpacing = k_adb_horizontal_offset;
		XmNverticalSpacing = k_adb_vertical_offset;
		XmNdialogTitle = k_pointer_title_text;
		XmNdialogStyle = XmDIALOG_MODELESS;
		XmNmarginHeight = k_pointer_db_mheight;
		XmNmarginWidth = k_pointer_db_mwidth;
                XmNautoUnmanage = false;
                XmNdefaultButton = XmPushButton ColorPointerOK;
                XmNcancelButton = XmPushButton ColorPointerDismiss;
	    };
    controls
      {
	XmForm ColorPointer1Container;
	XmForm ColorPointer2Container;
        XmPushButton ColorPointerOK;
        XmPushButton ColorPointerApply;
        XmPushButton ColorPointerDismiss;
#ifdef HYPERHELP
        XmPushButton ColorPointerHelp;
#endif
      };
  };

object ColorPointer1Container : XmForm
  {
    arguments
      {
        arguments top_form_args;
!        XmNdefaultButton = XmPushButton ColorPointerOK;
!        XmNcancelButton = XmPushButton ColorPointerDismiss;
      };
            controls {
                XmLabel ButtonLabel;
		XmRadioBox ButtonBox;
                XmLabel AccelLabel;
		XmRadioBox AccelBox;
		XmForm ClickContainer;
            };
	};

object ColorPointer2Container : XmForm
  {
    arguments
      {
        arguments form_args;
        XmNtopWidget = XmForm ColorPointer1Container;
!        XmNdefaultButton = XmPushButton ColorPointerOK;
!        XmNcancelButton = XmPushButton ColorPointerDismiss;
      };
            controls {
                XmLabel ShapeLabel;
                XmScrolledList ShapeBox;
		XmLabel CLForegroundLabel;
		XmLabel CLBackgroundLabel;
		XmPushButton CLForegroundBox;
		XmPushButton CLBackgroundBox;
            };
	};

object
	AccelLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNleftOffset = k_adb_horizontal_offset;
		XmNtopAttachment = XmATTACH_FORM;
		XmNtopOffset = k_adb_vertical_offset;
		XmNlabelString = k_pointer_accel_text;
	    };
	};

object
	AccelBox: XmRadioBox {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel AccelLabel;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel AccelLabel;
		XmNtopOffset = 0;
		XmNborderWidth = 0;
		XmNradioBehavior = true;
	    };
            controls {
                XmToggleButton AccelNone;
                XmToggleButton AccelSlow;
                XmToggleButton AccelMedium;
                XmToggleButton AccelFast;
            };
            callbacks {
                MrmNcreateCallback = procedure widget_create_proc (accelbox_id);
#ifdef HYPERHELP
		XmNhelpCallback = procedure help_system_proc(k_point_acc_help);
#endif
            };
	};

object
	AccelNone: XmToggleButton {
	    arguments {
		XmNlabelString = k_pointer_accel_none_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (accelnone_id);
            };
	};

object
	AccelSlow: XmToggleButton {
	    arguments {
		XmNlabelString = k_pointer_accel_slow_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (accelslow_id);
            };
	};

object
	AccelMedium: XmToggleButton {
	    arguments {
		XmNlabelString = k_pointer_accel_medium_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (accelmedium_id);
            };
	};

object
	AccelFast: XmToggleButton {
	    arguments {
		XmNlabelString = k_pointer_accel_fast_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (accelfast_id);
            };
	};
!
! definition for bw, color and gray XmSelectionDialog widgets
!

!
! black and white
!
object
	BWForegroundBox: XmRadioBox {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmScrolledList ShapeBox;
		XmNleftOffset = 20;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmScrolledList ShapeBox;
!		XmNtopOffset = 0;
!		XmNborderWidth = 1;
		XmNradioBehavior = true;
	    };
	    controls {
		XmToggleButton Black;
		XmToggleButton White;
	    };
	    callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (bwforeground_id);
#ifdef HYPERHELP
		XmNhelpCallback 
			= procedure help_system_proc(k_point_foreclr_help);
#endif
            };
	};

object
	Black: XmToggleButton {
	    arguments {
		XmNlabelString = k_pointer_bw_bw_text;
	    };
	    callbacks {
                MrmNcreateCallback = procedure widget_create_proc (bwblack_id);
            };
	};

object
	White: XmToggleButton {
	    arguments {
		XmNlabelString = k_pointer_bw_wb_text;
	    };
	    callbacks {
                MrmNcreateCallback = procedure widget_create_proc (bwwhite_id);
            };
	};

object
	ButtonLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmLabel AccelLabel;
		XmNleftOffset = k_adb_medium_horiz_offset;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmLabel AccelLabel;
!		XmNtopOffset = k_adb_radio_vert_offset;
		XmNlabelString = k_pointer_button_text;
	    };
	};

object
	ButtonBox: XmRadioBox {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel ButtonLabel;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel ButtonLabel;
		XmNtopOffset = 0;
		XmNborderWidth = 0;
		XmNradioBehavior = true;
	    };
            controls {
                XmToggleButton ButtonRight;
                XmToggleButton ButtonLeft;
            };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (buttonbox_id);
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_button_arrng_help);
#endif
            };
	};

object
	ButtonRight: XmToggleButton {
	    arguments {
		XmNlabelString = k_pointer_button_right_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (buttonright_id);
            };
	};
                                            
object
	ButtonLeft: XmToggleButton {
	    arguments {
		XmNlabelString = k_pointer_button_left_text;		
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (buttonleft_id);
            };
	};

object
	ShapeLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
!		XmNleftOffset = k_adb_medium_horiz_offset;
 		XmNtopAttachment = XmATTACH_FORM;
!		XmNtopOffset = 0;
	       	XmNlabelString = k_pointer_shape_text;
	    };
	};

object
	ShapeBox: XmScrolledList {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel ShapeLabel;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel ShapeLabel;
		XmNtopOffset = k_adb_lb_vert_offset;
		XmNselectionPolicy = XmSINGLE_SELECT;
		XmNfontList = k_pointer_shape_lb_font;
		XmNvisibleItemCount = k_pointer_shape_lb_items;
		XmNbottomAttachment = XmATTACH_FORM;
		XmNbottomOffset = k_shadow_thickness*2;
	    };
	    callbacks {
		MrmNcreateCallback = procedure widget_create_proc (shapebox_id);
                XmNsingleSelectionCallback = procedure ShapeListboxCallback();
                XmNdefaultActionCallback = procedure ShapeListboxCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_point_shpe_help);
#endif
	    };
	};

object
	ClickContainer: XmForm {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmLabel AccelLabel;
		XmNleftOffset = k_adb_medium_horiz_offset;
		XmNrightAttachment = XmATTACH_FORM;
		XmNrightOffset = k_shadow_thickness*2;
		XmNbottomAttachment = XmATTACH_FORM;
		XmNbottomOffset = k_shadow_thickness*2;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmRadioBox ButtonBox;
		XmNtopOffset = k_adb_radio_vert_offset;
 		XmNborderWidth = 0;
		XmNmarginHeight = 0;		
		XmNmarginWidth = 0;
	    };
            controls {
		XmLabel ClickLabel;
		XmScale DoubleClickSlider;
	    };
	};

object
	ClickLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_FORM;
		XmNtopOffset = 0;
		XmNlabelString = k_pointer_timeout_text;
	    };
	};

object
	DoubleClickSlider: XmScale {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel ClickLabel;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel ClickLabel;
	       	XmNtopOffset = -2;
		XmNwidth = k_pointer_timeout_scale_width;
		XmNvalue = 1;
		XmNminimum = 1;
		XmNmaximum = 1000;
		XmNtitleString = k_pointer_timeout_scale_text;
		XmNorientation = XmHORIZONTAL;
		XmNshowValue = true;
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (doubleclick_id);
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_dbl_clicktim_help);
#endif
            };
	};

object
	BWPointerOK: XmPushButton {
	    arguments {
		arguments button_ok_args;
		XmNtopWidget = XmPushButton BWPointerApply;
		XmNrightWidget = XmPushButton BWPointerApply;
	    };
            callbacks {
		XmNactivateCallback = procedure PointOkCallback();
                      };
	};

object
	BWPointerApply: XmPushButton {
	    arguments {
                arguments button_apply_args;
                XmNtopWidget = XmForm BWPointer2Container;
	    };
            callbacks {
		XmNactivateCallback = procedure PointApplyCallback();
            };
	};

object
	BWPointerDismiss: XmPushButton {
	    arguments {
		arguments button_cancel_args;
		XmNtopWidget = XmPushButton BWPointerOK;
		XmNleftWidget = XmPushButton BWPointerApply;
	    };
            callbacks {
		XmNactivateCallback = procedure PointCancelCallback();
            };
	};

object
       	BWPointerHelp: XmPushButton {
	    arguments {
		arguments button_help_args;
		XmNtopWidget = XmPushButton BWPointerOK;    
		XmNleftWidget = XmPushButton BWPointerDismiss;
	    };
            callbacks {
		XmNactivateCallback = procedure help_system_proc(k_setting_pointer_help);
            };
	};

object
	ColorPointerOK: XmPushButton {
	    arguments {
		arguments button_ok_args;
		XmNtopWidget = XmPushButton ColorPointerApply;
		XmNrightWidget = XmPushButton ColorPointerApply;
	    };
            callbacks {
		XmNactivateCallback = procedure PointOkCallback();
                      };
	};

object
	ColorPointerApply: XmPushButton {
	    arguments {
                arguments button_apply_args;
                XmNtopWidget = XmForm ColorPointer2Container;
	    };
            callbacks {
		XmNactivateCallback = procedure PointApplyCallback();
            };
	};

object
	ColorPointerDismiss: XmPushButton {
	    arguments {
		arguments button_cancel_args;
		XmNtopWidget = XmPushButton ColorPointerOK;
		XmNleftWidget = XmPushButton ColorPointerApply;
	    };
            callbacks {
		XmNactivateCallback = procedure PointCancelCallback();
            };
	};

object
	ColorPointerHelp: XmPushButton {
	    arguments {
		arguments button_help_args;
		XmNtopWidget = XmPushButton ColorPointerOK;
		XmNleftWidget = XmPushButton ColorPointerDismiss;
	    };
            callbacks {
#ifdef HYPERHELP
		XmNactivateCallback = procedure help_system_proc(k_setting_pointer_help);
#endif
            };
	};

object
	CLForegroundBox: XmPushButton widget {
	    arguments {
       		XmNleftAttachment = XmATTACH_WIDGET;
                XmNleftWidget = XmScrolledList ShapeBox;
		XmNleftOffset = 20;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
                XmNtopWidget = XmScrolledList ShapeBox;
		XmNheight = k_button_height;
		XmNwidth = k_button_width;
		XmNlabelString = ' ';
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (clforeground_id);
		XmNactivateCallback = procedure ColorSelectCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_point_foreclr_help);
#endif
            };
	};

object
	CLForegroundLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmPushButton CLForegroundBox;
		XmNleftOffset = k_adb_color_horiz_offset*2;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmPushButton CLForegroundBox;
		XmNtopOffset = k_adb_color_neg_offset;
		XmNlabelString = k_pointer_color_fg_text;
	    };
	};

object
	CLBackgroundLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel CLForegroundLabel;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel CLForegroundLabel;
		XmNlabelString = k_pointer_color_bg_text;
		XmNtopOffset = k_adb_small_vert_offset;
	    };
	};
                                                                    
object
	CLBackgroundBox: XmPushButton widget {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmPushButton CLForegroundBox;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmLabel CLBackgroundLabel;
		XmNtopOffset = k_adb_color_pos_offset;
		XmNheight = k_button_height;
		XmNwidth = k_button_width;
		XmNlabelString = ' ';
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (clbackground_id);
		XmNactivateCallback = procedure ColorSelectCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_point_bckclr_help);
#endif
            };
	};

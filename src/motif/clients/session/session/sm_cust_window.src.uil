! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
!	This module is part of the SESSION MANAGER component.  
!	It contains no translatable text.

!
! Customize Window box
!


identifier
	saveronoff_id;
	saveron_id;
	saveroff_id;
	saverscale_id;
	winmgricon_id;
	winmgrsmall_id;
	winmgrlarge_id;
	winmgrexe_id;
	winmgrdefault_id;
	winmgrother_id;
	winmgrothertext_id;
	patterncurrent_id;
	patternfg_id;
	patternbg_id;
	patterndefault_id;
	palette_id;
	bwscreenfg_id;
	bwwindowfg_id;
	bwscreenblack_id;
	bwscreenwhite_id;
	clscreenfg_id;
	clscreenbg_id;
	clwindowfg_id;
	clwindowbg_id;
	clhighlight_id;
	clborder_id;

procedure
        WindowOkCallback();
        WindowApplyCallback();
        WindowCancelCallback();
	PatternCurrentCallback();
	PatternFgCallback();
	PatternBgCallback();
	PatternDefaultCallback();
	BWScreenCallback();
	WMDefaultCallback();

object
	CustomizeBWWindow: XmFormDialog {
	    arguments {
                XmNdefaultPosition = true;	 
		XmNhorizontalSpacing = k_adb_horizontal_offset;
		XmNverticalSpacing = k_adb_vertical_offset;
		XmNdialogTitle = k_window_title_text;
		XmNdialogStyle = XmDIALOG_MODELESS;
		XmNmarginHeight = k_window_db_mheight;
		XmNmarginWidth = k_window_db_mwidth;
	        XmNautoUnmanage = false;
                XmNdefaultButton = XmPushButton BWWindowOK;
                XmNcancelButton = XmPushButton BWWindowDismiss;
	    };
    controls
      {
	XmForm BWWindow1Container;
/* XUI only
	XmForm HiddenBWContainer;
*/	XmForm BWPatternContainer;
	XmForm BWWindow2Container;
        XmPushButton BWWindowOK;
        XmPushButton BWWindowApply;
        XmPushButton BWWindowDismiss;
#ifdef HYPERHELP
        XmPushButton BWWindowHelp;
#endif
      };
  };

object BWWindow1Container : XmForm
  {
    arguments
      {
        arguments top_form_args;
      };
     controls
       {
         XmLabel ScreenSaverEnableLabel;
         XmRadioBox ScreenSaverEnableBox;
         XmScale SaverSlider;
	 XmLabel WMExeLabel;
	 XmRadioBox WMExeBox;
	 XmText WMOtherText;
       };
 };  

object BWWindow2Container : XmForm
  {
    arguments
      {
        arguments form_args;
	XmNtopWidget = XmForm BWPatternContainer;
      };
     controls
       {
	 XmLabel BWScreenForegroundLabel;
	 XmRadioBox BWScreenForegroundBox;    
	 XmLabel BWWindowForegroundLabel;
	 XmRadioBox BWWindowForegroundBox;
       };
 };  

object
	CustomizeColorWindow: XmFormDialog {
	    arguments {
                XmNdefaultPosition = true;
		XmNhorizontalSpacing = k_adb_horizontal_offset;
		XmNverticalSpacing = k_adb_vertical_offset;
		XmNdialogTitle = k_window_title_text;
		XmNdialogStyle = XmDIALOG_MODELESS;
		XmNmarginHeight = k_window_db_mheight;
		XmNmarginWidth = k_window_db_mwidth;
	        XmNautoUnmanage = false;
                XmNdefaultButton = XmPushButton ColorWindowOK;
                XmNcancelButton = XmPushButton ColorWindowDismiss;
	    };
    controls
      {
	XmForm ColorWindow1Container;
/* XUI only
	XmForm HiddenColorContainer;
*/
	XmForm ColorPatternContainer;
	XmForm ColorWindow2Container;
        XmPushButton ColorWindowOK;
        XmPushButton ColorWindowApply;
        XmPushButton ColorWindowDismiss;
#ifdef HYPERHELP
        XmPushButton ColorWindowHelp;
#endif
      };
  };

/* XUI only 
object HiddenColorContainer : XmForm
  {
    arguments
      {
        arguments top_form_args;
!	XmNtraversalOn = false;
      };
    controls 
      {
        XmLabel IconStyleLabel;
        XmRadioBox IconStyleBox;
	XmLabel BorderLabel;
 	XmPushButton WindowBorder;
      };
  };

object HiddenBWContainer : XmForm
  {
    arguments
      {
        arguments top_form_args;
!	XmNtraversalOn = false;
      };
    controls 
      {
        XmLabel IconStyleLabel;
        XmRadioBox IconStyleBox;
      };
  };
*/
object ColorWindow1Container : XmForm
  {
    arguments
      {
        arguments top_form_args;
      };
    controls 
      {
        XmLabel ScreenSaverEnableLabel;
        XmRadioBox ScreenSaverEnableBox;
        XmScale SaverSlider;
	XmLabel WMExeLabel;
	XmRadioBox WMExeBox;
	XmText WMOtherText;
      };
  };

object ColorWindow2Container : XmForm
  {
    arguments
      {
        arguments form_args;
	XmNtopWidget = XmForm ColorPatternContainer;
      };
    controls 
      {
	XmLabel CLWindowForegroundLabel;
	XmPushButton CLWindowForegroundBox;
	XmLabel CLWindowBackgroundLabel;
	XmPushButton CLWindowBackgroundBox;
	XmLabel CLWindowHighlightLabel;
	XmPushButton CLWindowHighlightBox;
      };

  };

object
	ScreenSaverEnableLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNleftOffset = k_adb_horizontal_offset;
		XmNtopAttachment = XmATTACH_FORM;
		XmNtopOffset = k_adb_vertical_offset;
		XmNlabelString = k_window_saver_text;
	    };
	};

object
	ScreenSaverEnableBox: XmRadioBox {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel ScreenSaverEnableLabel;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNbottomAttachment = XmATTACH_FORM;
		XmNbottomOffset = k_shadow_thickness*2;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel ScreenSaverEnableLabel;
		XmNtopOffset = 0;
		XmNborderWidth = 0;
		XmNradioBehavior = true;
	    };
            controls {
                XmToggleButton SaverEnable;
                XmToggleButton SaverDisable;
            };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (saveronoff_id);
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_scrn_saver_help);
#endif
            };
	};

object
	SaverEnable: XmToggleButton {
	    arguments {
		XmNlabelString = k_window_saver_enable_text;
	    };
            callbacks {
                MrmNcreateCallback = procedure widget_create_proc (saveron_id);
            };
	};

object
	SaverDisable: XmToggleButton {
	    arguments {
		XmNlabelString = k_window_saver_disable_text;
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (saveroff_id);
            };
	};

object
	SaverSlider: XmScale {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget =  XmRadioBox ScreenSaverEnableBox;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmLabel ScreenSaverEnableLabel;
		XmNtopOffset = 15;
		XmNwidth = k_window_saver_scale_width;
		XmNvalue = 1;
		XmNminimum = 1;
		XmNmaximum = 60;
		XmNtitleString = k_window_saver_scale_text;
		XmNorientation = XmHORIZONTAL;
		XmNshowValue = true;
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (saverscale_id);
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_scrn_saver_help);
#endif
            };
	};

object
	BWPatternContainer: XmForm {
	    arguments {
		arguments form_args;
		XmNtopWidget = XmForm BWWindow1Container;
	    };
            controls {
		XmLabel BWPatternLabel;
		XmPushButton BWPatternCurrent;
		XmPushButton BWPatternFg;
		XmPushButton BWPatternBg;
		XmPushButton BWDefault;
		XmDrawingArea BWPatternPalette;
	    };
	};
object
	ColorPatternContainer: XmForm {
	    arguments {
		arguments form_args;
		XmNtopWidget = XmForm ColorWindow1Container;
	    };
            controls {
		XmLabel CLScreenForegroundLabel;
		XmPushButton CLScreenForegroundBox;
		XmLabel CLScreenBackgroundLabel;
		XmPushButton CLScreenBackgroundBox;
		XmPushButton CLPatternCurrent;
		XmLabel CLPatternLabel;
		XmPushButton CLPatternFg;
		XmPushButton CLPatternBg;
		XmPushButton CLDefault;
		XmDrawingArea CLPatternPalette;
	    };
	};

object
	CLPatternLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel CLScreenBackgroundLabel;
!		XmNleftOffset = k_window_current_left_offset;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel CLScreenBackgroundLabel;
		XmNtopOffset = k_adb_small_vert_offset;
		XmNlabelString = k_window_pattern_text;
	    };
	};

object
	CLPatternCurrent: XmPushButton widget {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmPushButton CLScreenBackgroundBox;
!		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmPushButton CLScreenBackgroundBox;
		XmNtopOffset = k_adb_color_pos_offset;
!		XmNtopOffset = 0;
		XmNlabelType = XmPIXMAP;
!		XmNsensitive = false;
		XmNwidth = k_button_width;
		XmNheight = k_button_height;
	    };
	    callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (patterncurrent_id);
		XmNactivateCallback = procedure PatternCurrentCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_scrn_backgrnd_help);
#endif
	    };
	};

object
	CLPatternFg: XmPushButton widget {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmPushButton CLPatternCurrent;
!		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmPushButton CLPatternCurrent;
		XmNtopOffset = 0;
		XmNlabelType = XmPIXMAP;
		XmNwidth = k_button_width*2;
		XmNheight = k_button_height;
	    };
	    callbacks {
                MrmNcreateCallback = procedure widget_create_proc(patternfg_id);
		XmNactivateCallback = procedure PatternFgCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_scrn_backgrnd_help);
#endif
	    };
	};

object
	CLPatternBg: XmPushButton widget {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmPushButton CLPatternFg;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmPushButton CLPatternFg;
		XmNtopOffset = 0;
		XmNlabelType = XmPIXMAP;
		XmNwidth = k_button_width*2;
		XmNheight = k_button_height;
	    };
	    callbacks {
                MrmNcreateCallback = procedure widget_create_proc(patternbg_id);
		XmNactivateCallback = procedure PatternBgCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_scrn_backgrnd_help);
#endif
	    };
	};

object
	CLDefault: XmPushButton widget {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmPushButton CLPatternBg;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmPushButton CLPatternBg;
		XmNtopOffset = 0;
		XmNlabelString = k_window_pattern_default_text;
	        XmNalignment = XmALIGNMENT_BEGINNING;
!		XmNshadowThickness = 0;
	    };
	    callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (patterndefault_id);
		XmNactivateCallback = procedure PatternDefaultCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_scrn_backgrnd_help);
#endif
	    };
	};
object
	CLPatternPalette: XmDrawingArea {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmLabel CLPatternLabel;
		XmNleftOffset = 25;
		XmNtopAttachment = XmATTACH_FORM;
!		XmNtopOffset = k_adb_small_vert_offset;
		XmNbottomAttachment = XmATTACH_FORM;
		XmNbottomOffset = k_shadow_thickness*2;
		XmNwidth = k_window_palette_width;
		XmNheight = k_window_palette_height;
		XmNborderWidth = 1;
		XmNmarginHeight = 0;
		XmNmarginWidth = 0;
	    };
	    callbacks {
                MrmNcreateCallback = procedure widget_create_proc (palette_id);
            };
	};

object
	BWPatternLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmPushButton BWPatternCurrent;
!		XmNleftOffset = k_window_current_left_offset;
		XmNtopAttachment = XmATTACH_FORM;
		XmNtopOffset = k_shadow_thickness*2;
		XmNlabelString = k_window_pattern_text;
	    };
	};

object
	BWPatternCurrent: XmPushButton widget {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNtopAttachment = XmATTACH_FORM;
!		XmNleftOffset = 0;
		XmNtopOffset = k_shadow_thickness+2;
!		XmNtopOffset = 0;
		XmNlabelType = XmPIXMAP;
!		XmNsensitive = false;
		XmNwidth = k_button_width;
		XmNheight = k_button_height;
	    };
	    callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (patterncurrent_id);
		XmNactivateCallback = procedure PatternCurrentCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_scrn_backgrnd_help);
#endif
	    };
	};

object
	BWPatternFg: XmPushButton widget {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmPushButton BWPatternCurrent;
!		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmPushButton BWPatternCurrent;
		XmNtopOffset = 0;
		XmNlabelType = XmPIXMAP;
		XmNwidth = k_button_width*2;
		XmNheight = k_button_height;
	    };
	    callbacks {
                MrmNcreateCallback = procedure widget_create_proc(patternfg_id);
		XmNactivateCallback = procedure PatternFgCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_scrn_backgrnd_help);
#endif
	    };
	};

object
	BWPatternBg: XmPushButton widget {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmPushButton BWPatternFg;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmPushButton BWPatternFg;
		XmNtopOffset = 0;
		XmNlabelType = XmPIXMAP;
		XmNwidth = k_button_width*2;
		XmNheight = k_button_height;
	    };
	    callbacks {
                MrmNcreateCallback = procedure widget_create_proc(patternbg_id);
		XmNactivateCallback = procedure PatternBgCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_scrn_backgrnd_help);
#endif
	    };
	};

object
	BWDefault: XmPushButton widget {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmPushButton BWPatternBg;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmPushButton BWPatternBg;
		XmNtopOffset = 0;
		XmNlabelString = k_window_pattern_default_text;
	        XmNalignment = XmALIGNMENT_BEGINNING;
!		XmNshadowThickness = 0;
	    };
	    callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (patterndefault_id);
		XmNactivateCallback = procedure PatternDefaultCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_scrn_backgrnd_help);
#endif
	    };
	};
object
	BWPatternPalette: XmDrawingArea {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmLabel BWPatternLabel;
		XmNleftOffset = 25;
		XmNtopAttachment = XmATTACH_FORM;
!		XmNtopOffset = k_adb_small_vert_offset;
		XmNbottomAttachment = XmATTACH_FORM;
		XmNbottomOffset = k_shadow_thickness*2;
		XmNwidth = k_window_palette_width;
		XmNheight = k_window_palette_height;
		XmNborderWidth = 1;
		XmNmarginHeight = 0;
		XmNmarginWidth = 0;
	    };
	    callbacks {
                MrmNcreateCallback = procedure widget_create_proc (palette_id);
            };
	};

object
	WMExeLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmScale SaverSlider;
		XmNleftOffset = k_adb_medium_horiz_offset;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmLabel ScreenSaverEnableLabel;
		XmNtopOffset = 0;
		XmNlabelString = k_window_wm_text;
	    };
	};

object
	WMExeBox: XmRadioBox {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel WMExeLabel;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel WMExeLabel;
		XmNtopOffset = 0;
		XmNbottomAttachment = XmATTACH_FORM;
		XmNbottomOffset = k_shadow_thickness*3;
		XmNborderWidth = 0;
		XmNradioBehavior = true;
	    };
            controls {
                XmToggleButton WMDefault;
                XmToggleButton WMOther;
            };
            callbacks {
                MrmNcreateCallback = procedure widget_create_proc(winmgrexe_id);
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_window_name_help);
#endif
            };
	};

object
	WMDefault: XmToggleButton {
	    arguments {
		XmNlabelString = k_window_wm_default_text;
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (winmgrdefault_id);
		XmNvalueChangedCallback = procedure WMDefaultCallback();
            };       
	};

object
	WMOther: XmToggleButton {       
	    arguments {
		XmNlabelString = k_window_wm_other_text;
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (winmgrother_id);
            };
	};
                                    
object
	WMOtherText: XmText {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmRadioBox WMExeBox;
		XmNleftOffset = 0;
		XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNbottomWidget = XmRadioBox WMExeBox;
		XmNbottomOffset = 0;
		XmNrightAttachment = XmATTACH_FORM;
		XmNrightOffset = k_adb_horizontal_offset + 5;
		XmNcolumns = k_window_othertext_text_cols;
		XmNrows = k_window_othertext_text_rows;
		XmNresizeHeight = false;
		XmNresizeWidth = false;
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (winmgrothertext_id);
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_window_name_help);
#endif
            };
	};
/* XUI only
object
	IconStyleLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNtopAttachment = XmATTACH_FORM;
		XmNlabelString = k_window_icon_text;
	    };
	};

object
	IconStyleBox: XmRadioBox {
	    arguments {
                XmNsensitive = false;
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel IconStyleLabel;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel IconStyleLabel;
		XmNtopOffset = 0;
		XmNborderWidth = 0;
		XmNradioBehavior = true;
	    };
            controls {
                XmToggleButton IconSmall;
                XmToggleButton IconLarge;
            };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (winmgricon_id);
            };
	};
 
object
	IconSmall: XmToggleButton {
	    arguments {
		XmNtraversalOn = false;
		XmNlabelString = k_window_icon_small_text;
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (winmgrsmall_id);
            };
	};

object
	IconLarge: XmToggleButton {
	    arguments {
		XmNtraversalOn = false;
		XmNlabelString = k_window_icon_large_text;
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (winmgrlarge_id);
            };
	};
           
*/                                 
!
! Black and white
!
object
	BWScreenForegroundLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNtopAttachment = XmATTACH_FORM;
		XmNlabelString = k_window_scr_bw_text;
	    };
	};

object
	BWScreenForegroundBox: XmRadioBox {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmLabel BWScreenForegroundLabel;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmLabel BWScreenForegroundLabel;
		XmNtopOffset = 0;
		XmNradioBehavior = true;
!		XmNborderWidth = 1;
		XmNmarginHeight = 0;
		XmNmarginWidth = 0;
	    };
            controls {
                XmToggleButton ScreenBlack;
                XmToggleButton ScreenWhite;
                    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (bwscreenfg_id);
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_scrn_forgrndclr_help);
#endif
            };
	};

object
	ScreenBlack: XmToggleButton {
	    arguments {
		XmNlabelString = k_pointer_bw_bw_text;
	    };
	    callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (bwscreenblack_id);
		XmNvalueChangedCallback = procedure BWScreenCallback();
            };
	};

object
	ScreenWhite: XmToggleButton {
	    arguments {
		XmNlabelString = k_pointer_bw_wb_text;
	    };
	    callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (bwscreenwhite_id);
            };
	};

object
	BWWindowForegroundLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel BWScreenForegroundLabel;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmRadioBox BWScreenForegroundBox;
		XmNtopOffset = k_adb_small_vert_offset;
		XmNlabelString = k_window_win_bw_text;
	    };
	};

object
	BWWindowForegroundBox: XmRadioBox {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmLabel BWWindowForegroundLabel;
		XmNleftOffset = k_adb_small_horiz_offset;
		XmNbottomAttachment = XmATTACH_FORM;
		XmNbottomOffset = k_shadow_thickness*2;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmLabel BWWindowForegroundLabel;
		XmNtopOffset = 0;
		XmNradioBehavior = true;
!		XmNborderWidth = 1;
		XmNmarginHeight = 0;
		XmNmarginWidth = 0;
		};
            controls {
                XmToggleButton Black;
                XmToggleButton White;
            };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (bwwindowfg_id);
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_window_forgrndclr_help);
#endif
            };
	};
!
! Color
!
object
	CLScreenForegroundBox: XmPushButton widget {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNtopAttachment = XmATTACH_FORM;
		XmNheight = k_button_height;
		XmNwidth = k_button_width;
		XmNlabelString = ' ';
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (clscreenfg_id);
		XmNactivateCallback = procedure ColorSelectCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_scrn_forgrndclr_help);
#endif
            };
	};

object
	CLScreenForegroundLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmPushButton CLScreenForegroundBox;
		XmNleftOffset = k_adb_color_horiz_offset*2;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmPushButton CLScreenForegroundBox;
		XmNtopOffset = k_adb_color_neg_offset;
		XmNlabelString = k_window_screen_fg_text;
	    };
	};

object
	CLScreenBackgroundLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel CLScreenForegroundLabel;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel CLScreenForegroundLabel;
		XmNtopOffset = k_adb_small_vert_offset;
		XmNlabelString = k_window_screen_bg_text;
	    };
	};

object
	CLScreenBackgroundBox: XmPushButton widget {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmPushButton CLScreenForegroundBox;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmLabel CLScreenBackgroundLabel;
		XmNtopOffset = k_adb_color_pos_offset;
		XmNheight = k_button_height;
		XmNwidth = k_button_width;
		XmNlabelString = ' ';
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (clscreenbg_id);
		XmNactivateCallback = procedure ColorSelectCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_screen_bckgrndclr_help);
#endif
            };
	};

object
	CLWindowForegroundLabel: XmLabel {
	    arguments
              {
		XmNleftAttachment = XmATTACH_WIDGET;
		XmNleftWidget = XmPushButton CLWindowForegroundBox;
		XmNleftOffset = k_adb_color_horiz_offset*2;
!		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmPushButton CLWindowForegroundBox;
!		XmNtopOffset = k_adb_color_neg_offset;
		XmNtopOffset = 0;
		XmNlabelString = k_window_window_fg_text;
	    };
	};

object
	CLWindowForegroundBox: XmPushButton widget {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNtopAttachment = XmATTACH_FORM;
		XmNheight = k_button_height;
		XmNwidth = k_button_width;
		XmNlabelString = ' ';
!		XmNshadowThickness = 0;
		XmNborderWidth = 0;
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (clwindowfg_id);
		XmNactivateCallback = procedure ColorSelectCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_window_forgrndclr_help);
#endif
            };
	};

object
	CLWindowBackgroundLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel CLWindowForegroundLabel;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel CLWindowForegroundLabel;
		XmNtopOffset = k_adb_small_vert_offset;
		XmNlabelString = k_window_window_bg_text;
	    };
	};

object
	CLWindowBackgroundBox: XmPushButton widget {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmPushButton CLWindowForegroundBox;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmLabel CLWindowBackgroundLabel;
		XmNtopOffset = k_adb_color_pos_offset;
		XmNheight = k_button_height;
		XmNwidth = k_button_width;
		XmNlabelString = ' ';
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (clwindowbg_id);
		XmNactivateCallback = procedure ColorSelectCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_window_bckgrndclr_help);
#endif
            };
	};

 object
	CLWindowHighlightLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmLabel CLWindowBackgroundLabel;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_WIDGET;
		XmNtopWidget = XmLabel CLWindowBackgroundLabel;
		XmNtopOffset = k_adb_small_vert_offset;
		XmNbottomAttachment = XmATTACH_FORM;
		XmNbottomOffset = k_shadow_thickness*2;
		XmNlabelString = k_window_highlight_text;
	    };
	};

object
	CLWindowHighlightBox: XmPushButton widget {
	    arguments {
		XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNleftWidget = XmPushButton CLWindowForegroundBox;
		XmNleftOffset = 0;
		XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
		XmNtopWidget = XmLabel CLWindowHighlightLabel;
		XmNtopOffset = k_adb_color_pos_offset;
		XmNbottomAttachment = XmATTACH_FORM;
		XmNbottomOffset = k_shadow_thickness*2;
		XmNheight = k_button_height;
		XmNwidth = k_button_width;
		XmNlabelString = ' ';
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (clhighlight_id);
		XmNactivateCallback = procedure ColorSelectCallback();
#ifdef HYPERHELP
		XmNhelpCallback
			= procedure help_system_proc(k_window_highltclr_help);
#endif
            };
	};
/* XUI only
object
	BorderLabel: XmLabel {
	    arguments {
		XmNleftAttachment = XmATTACH_FORM;
		XmNtopAttachment = XmATTACH_FORM;
		XmNlabelString = k_window_border_text;
	    };
	};

object
	WindowBorder: XmPushButton widget {
	    arguments {
		XmNtraversalOn = false;
		XmNleftAttachment = XmATTACH_FORM;
		XmNtopAttachment = XmATTACH_FORM;
		XmNheight = k_button_height;
		XmNwidth = k_button_width;
		XmNlabelString = ' ';
	    };
            callbacks {
                MrmNcreateCallback
			= procedure widget_create_proc (clborder_id);
		XmNactivateCallback = procedure ColorSelectCallback();
            };
	};

*/
object
	BWWindowOK: XmPushButton {                   
	    arguments {
		arguments button_ok_args;
		XmNtopWidget = XmPushButton BWWindowApply;
		XmNrightWidget = XmPushButton BWWindowApply;
	    };
            callbacks {
		XmNactivateCallback = procedure WindowOkCallback();
            };
	};

object
	BWWindowApply: XmPushButton {
	    arguments {
		arguments button_apply_args;
                XmNtopWidget = XmForm BWWindow2Container;
	    };
            callbacks {
		XmNactivateCallback = procedure WindowApplyCallback();
            };
	};

object
	BWWindowDismiss: XmPushButton {
	    arguments {
		arguments button_cancel_args;
		XmNtopWidget = XmPushButton BWWindowOK;
		XmNleftWidget = XmPushButton BWWindowApply;
	    };
            callbacks {
		XmNactivateCallback = procedure WindowCancelCallback();
            };
	};

object
	BWWindowHelp: XmPushButton {
	    arguments {
		arguments button_help_args;
	    	XmNtopWidget = XmPushButton BWWindowOK;
		XmNleftWidget = XmPushButton BWWindowDismiss;
	    };
            callbacks {
#ifdef HYPERHELP
		XmNactivateCallback
			= procedure help_system_proc(k_window_colors_help);
#endif
            };
	};

object
	ColorWindowOK: XmPushButton {                   
	    arguments {
		arguments button_ok_args;
		XmNtopWidget = XmPushButton ColorWindowApply;
		XmNrightWidget = XmPushButton ColorWindowApply;
	    };
            callbacks {
		XmNactivateCallback = procedure WindowOkCallback();
            };
	};

object
	ColorWindowApply: XmPushButton {
	    arguments {
		arguments button_apply_args;
                XmNtopWidget = XmForm ColorWindow2Container;
	    };
            callbacks {
		XmNactivateCallback = procedure WindowApplyCallback();
            };
	};

object
	ColorWindowDismiss: XmPushButton {
	    arguments {
		arguments button_cancel_args;
		XmNtopWidget = XmPushButton ColorWindowOK;
		XmNleftWidget = XmPushButton ColorWindowApply;
	    };
            callbacks {
		XmNactivateCallback = procedure WindowCancelCallback();
            };
	};
object
	ColorWindowHelp: XmPushButton {
	    arguments {                                              
		arguments button_help_args;
		XmNtopWidget = XmPushButton ColorWindowOK;
		XmNleftWidget = XmPushButton ColorWindowDismiss;
	    };
            callbacks {
#ifdef HYPERHELP
		XmNactivateCallback
			= procedure help_system_proc(k_window_colors_help);
#endif
            };
	};

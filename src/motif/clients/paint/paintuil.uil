! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
/*
**************************************************************************
**                   DIGITAL EQUIPMENT CORPORATION                      **
**                         CONFIDENTIAL                                 **
**    NOT FOR MODIFICATION OR REDISTRIBUTION IN ANY MANNER WHATSOEVER   **
**************************************************************************
*/
! Generated file - do not put under source control

!******************************************************************************
!*                                                                            *
!*  UIL Module for Paint                                                      *
!*                                                                            *
!*   - Contains all widgets utilized by paint.			              *
!*                                                                            *
!*   - written by Jonathan Joseph  18 Aug 1988                                *
!*                                                                            *
!******************************************************************************

module paint
  names = case_sensitive
!  character_set = iso_latin1
  objects = { XmPushButton = gadget;
	      XmToggleButton = gadget;
	      XmSeparator = gadget; }


include file 'XmAppl.uil';
include file 'position.uil'; 
include file 'translate.uil';
include file 'keys.uil';
include file 'icons.uil';
include file 'icons_neg.uil';
include file 'icons_ins.uil';


!****************
!*  Procedures  *
!****************

procedure
  Read_File_Callback (integer);
  Include_File_Callback (integer);
  Write_File_Callback (integer);
  Change_File_Format (integer);
  Change_File_Color (integer);

  File_Command (integer);
  Edit_Command (integer);
  Option_Command (integer);
  Change_Font_Family (integer);
  Change_Font_Size (integer);
  Change_Font_Style (integer);
  help (string);
  Help_On_Context ();
  Unmap_Help ();

  Hbar_Change ();
  Hbar_Increment ();
  Vbar_Change ();
  Vbar_Increment ();
  To_Bottom (integer);
  To_Top (integer);

  Dismiss_Brush_Dialog ();
  Dismiss_Line_Dialog ();
  Dismiss_Pattern_Dialog ();
  Delete_Edit_Pattern_Dialog (integer);
  Dismiss_Color_Dialog ();

  Color_Mix_Apply ();
  Color_Mix_Cancel ();
  Color_Mix_OK ();

  Set_Sample (integer);
  Set_Sample_Pattern (integer);

  Set_Standard_Size (integer);
  Set_Picture_Size (integer);
  Set_Resolution (integer);
  Change_Resolution ();
  Change_Units (integer);
  Change_Resize_Crop_Or_Scale (integer);

  Scale_Size (integer);

  Question_Reply (integer);
  AI_Error_Exit_Reply (integer);
  Color_Mix_Apply_Reply (integer);

  Unmap_Message_Box ();

  Create_Callback (integer);
  Create_Icon_Button (integer);

  Clicked_On_Icon (integer);

  Print_File_Callback (integer);
  Print_2_File_Callback (integer);

  Change_Pr_Output_Format (integer);
  Change_Pr_Output_Device (integer);
  Change_Aspect_Ratio (integer);
  Change_Pr_H_Alignment	(integer);
  Change_Pr_V_Alignment (integer);
  Change_Pr_Send_To (integer);

  Change_Grid_Size_Val ();
  Grid_Size_Button (integer);

  WindowCreate ();

!*****************
!*  Identifiers  *
!*****************
identifier

  pimage_wd;
  pimage_ht;
  position_ht;


!************
!*  Values  *
!************

value

  bg_icon : icon (
    '****************',
    '*              *',
    '*              *',
    '*              *',
    '*              *',
    '*              *',
    '*              *',
    '*              *',
    '*              *',
    '*              *',
    '*              *',
    '*              *',
    '*              *',
    '*              *',
    '*              *',
    '****************'
  );

  fg_icon : icon (
    '****************',
    '****************',
    '****************',
    '****************',
    '****************',
    '****************',
    '****************',
    '****************',
    '****************',
    '****************',
    '****************',
    '****************',
    '****************',
    '****************',
    '****************',
    '****************'
  );

  question_mark_icon : icon (
    '                       ',
    '     **********        ',
    '    ** * * * * *       ',
    '   ** * * * * * *      ',
    '  ** * ******* * *     ',
    '  * * ********* * *    ',
    '  ** *********** *     ',
    '  * * *** * *** * *    ',
    '  ** ***** ***** * *   ',
    '  * * *** * *** * * *  ',
    '  ** * * * ***** * * * ',
    '  * * * * ***** * **** ',
    '  ** * * ***** * *     ',
    '   ** * ***** * * *    ',
    '    ** * *** * * *     ',
    '     ** ***** * *      ',
    '      ** * * * * *     ',
    '      * * * * * *      ',
    '      ** *** *         ',
    '      * ***** *        ',
    '      ** *** *         ',
    '     ** * * * *        ',
    '     * * * * * *       '
  );

!
! Edit menu pushbutton id's.
! 
  EDIT_UNDO_ID :  0;
  EDIT_CUT_ID :  1;
  EDIT_COPY_ID :  2;
  EDIT_PASTE_ID :  3;
  EDIT_CLEAR_ID :  4;
  EDIT_INVERT_ID :  5;
  EDIT_SCALE_ID :  6;
  EDIT_CROP_ID :  7;
  EDIT_SELECT_ALL_ID :  8;
  EDIT_SCALE_PICTURE_ID :  9;
  EDIT_QUICK_COPY_ID :  10;
  EDIT_CLEAR_WW_ID :  11;

!
! Options menu pushbutton id's.
! 
  OPTIONS_OPAQUE_ID :  0;
  OPTIONS_GRID_ID :  1;
  OPTIONS_BRUSHES_ID :  2;
  OPTIONS_PATTERNS_ID :  3;
  OPTIONS_LINES_ID :  4;
  OPTIONS_ZOOM_ID :  5;
  OPTIONS_EDIT_PATTERN_ID :  6;
  OPTIONS_TRANSPARENT_ID :  7;
  OPTIONS_PAINT_VIEW_ID :  8;
  OPTIONS_COLOR_ID :  9;
  OPTIONS_COLOR_MIX_ID :  10;
  OPTIONS_FULL_VIEW_ID :  11;
  OPTIONS_GRID_SIZE_ID :  12;
  OPTIONS_PICTURE_SIZE_ID :  13;

  FILE_SELECTION_ACTIVATE_ID :  0;
  FILE_SELECTION_CANCEL_ID :  1;

!
! File format toggle button id's.
! 
  DDIF_FILE_FORMAT_ID :  0;
  X11_FILE_FORMAT_ID :  1;

!
! File color toggle button id's.
! 
  SAVE_COLOR :  0;
  SAVE_GRAY :  1;
  SAVE_BW :  2;

!
! File menu pushbutton id's.
! 
  FILE_QUIT_ID :  0;
  FILE_SAVE_ID :  1;
  FILE_SAVE_AS_ID :  2;
  FILE_OPEN_ID :  3;
  FILE_PRINT_AS_ID :  4;
  FILE_PRINT_ID :  5;
  FILE_INCLUDE_ID :  6;

!
! Widget id's for global widget array.
! 
  EDIT_UNDO_BUTTON :  0;
  EDIT_CUT_BUTTON :  1;
  EDIT_COPY_BUTTON :  2;
  EDIT_CLEAR_BUTTON :  3;
  EDIT_INVERT_BUTTON :  4;
  EDIT_SCALE_BUTTON :  5;
  EDIT_CROP_BUTTON :  6;
  DDIF_FILE_FORMAT_TOGGLE :  7;
  X11_FILE_FORMAT_TOGGLE :  8;
  PIC_SHAPE_WIDTH_TEXT :  9;
  PIC_SHAPE_HEIGHT_TEXT :  10;
  LINE_DIALOG_WINDOW :  11;
  BRUSH_DIALOG_WINDOW :  12;
  PATTERN_SAMPLE_WINDOW :  13;
  OUTLINE_PATTERN_WINDOW :  14;
  FILL_PATTERN_WINDOW :  15;
  OPTIONS_ZOOM_BUTTON :  16;
  PBITS_WINDOW :  17;
  PSAMPLE_WINDOW :  18;
  PICTURE_WINDOW :  19;
  SCALE_X_BY_TEXT :  20;
  PIC_SHAPE_OPTION_MENU :  21;
  PAGE_SIZE_TOGGLE :  22;
  SCREEN_SIZE_TOGGLE :  23;
  NON_STANDARD_SIZE_TOGGLE :  24;
  ICON_WINDOW :  25;
  ZOOM_WINDOW :  26;
  RESOLUTION_OPTION_MENU :  27;
  RESOLUTION_TEXT :  28;
  RES_75_TOGGLE :  29;
  RES_300_TOGGLE :  30;
  RES_NON_STANDARD_TOGGLE :  31;
  POSITION_WINDOW :  32;
  OPTIONS_PAINT_VIEW_BUTTON :  33;
  OPTIONS_EDIT_PATTERN_BUTTON :  34;
  OPAQUE_TOGGLE :  35;
  TRANSPARENT_TOGGLE :  36;
  RES_100_TOGGLE :  37;
  SOLID_FG_BUTTON :  38;
  SOLID_BG_BUTTON :  39;
  PAINT_H_SCROLL_BAR :  40;
  PAINT_V_SCROLL_BAR :  41;
  PAINT_WINDOW :  42;
  SP_MODE_OPTION_MENU :  43;
  SP_DO_BUTTON :  44;
  SP_POSITION_MODE_TOGGLE :  45;
  SP_CROP_MODE_TOGGLE :  46;
  PATTERN_DIALOG_DISMISS_BUTTON :  47;
  EPAT_OK_BUTTON :  48;
  EPAT_CANCEL_BUTTON :  49;
  LINE_DIALOG_DISMISS_BUTTON :  50;
  BRUSH_DIALOG_DISMISS_BUTTON :  51;
  PATTERN_NONE_BUTTON :  52;
  SCALE_Y_BY_TEXT :  56;
  SCALE_PERCENT_LABEL :  57;
  COLOR_DIALOG_DISMISS_BUTTON :  58;
  COLOR_SCALE :  59;
  COLOR_DIALOG_WINDOW :  60;
  BORDER_WINDOW :  61;
  OPTIONS_COLOR_BUTTON :  62;
  OPTIONS_COLOR_MIX_BUTTON :  63;
  FILE_COLOR_COLOR_TOGGLE :  64;
  FILE_COLOR_GRAY_TOGGLE :  65;
  FILE_COLOR_BW_TOGGLE :  66;
  PR_FORMAT_OPTION_MENU :  67;
  PR_DEVICE_OPTION_MENU :  68;
  PR_AR_OPTION_MENU :  69;
  PR_H_ALIGN_OPTION_MENU :  70;
  PR_V_ALIGN_OPTION_MENU :  71;
  PR_SEND_TO_RADIO_BOX :  72;
  PR_PRINTERS_OPTION_MENU :  73;
  PR_PRINTERS_PULLDOWN_MENU :  74;
  PR_AR_1_TO_1_TOGGLE :  75;
  PR_MONO_DEVICE_TOGGLE :  76;
  PR_ALIGN_LEFT_TOGGLE :  77;
  PR_ALIGN_TOP_TOGGLE :  78;
  PR_DUMMY_TOGGLE :  79;
  PR_OK_BUTTON :  80;
  PR_APPLY_BUTTON :  81;
  PR_OPTIONS_BUTTON :  82;
  PR_CANCEL_BUTTON :  83;
  PR_FILENAME_TEXT :  84;
  SCROLLING_WINDOW :  85;
  SCALE_OK_BUTTON :  86;
  SCALE_CANCEL_BUTTON :  87;
  PS_OK_BUTTON :  88;
  PS_CANCEL_BUTTON :  89;
  OUTLINE_PATTERN_TOGGLE :  90;
  FILL_PATTERN_TOGGLE :  91;
  PATTERN_FORM_1 :  92;
  PATTERN_FORM_2 :  93;
  PR_SEND_TO_PRINTER_TOGGLE :  94;
  PR_SEND_TO_FILE_TOGGLE :  95;
  PR_SEND_TO_BOTH_TOGGLE :  96;
  COLOR_MIX_WIDGET :  97;
  OPTIONS_FULL_VIEW_BUTTON :  98;
  OPTIONS_GRID_BUTTON :  99;
  EDIT_PASTE_BUTTON :  100;
  EDIT_SELECT_ALL_BUTTON :  101;
  EDIT_SCALE_PIC_BUTTON :  102;
  EDIT_QUICK_COPY_BUTTON :  103;
  PS_RESIZE_CROP_TOGGLE :  104;
  PS_RESIZE_SCALE_TOGGLE :  105;
  GSD_SCALE :  106;
  GSD_OK_BUTTON :  107;
  GSD_APPLY_BUTTON :  108;
  GSD_CANCEL_BUTTON :  109;
  EDIT_CLEAR_WW_BUTTON :  110;
  MAIN_MENU_BAR :  111;
  FONT_STYLE_NORMAL_TOGGLE :  112;
  FONT_STYLE_ITALIC_TOGGLE :  113;
  FONT_STYLE_BOLD_TOGGLE :  114;
  PR_FORMAT_LABEL :  115;
  PR_DEVICE_LABEL :  116;
  PR_H_ALIGN_LABEL :  117;
  PR_V_ALIGN_LABEL :  118;
  PR_AR_LABEL :  119;
  PR_BUTTONS_ROW_COLUMN :  120;
  PR_FORM_1 :  121;
  SCALE_APPLY_BUTTON :  122;
  SCALE_BUTTONS_ROW_COLUMN :  123;
  PS_APPLY_BUTTON :  124;
  PS_BUTTONS_ROW_COLUMN :  125;
  PS_FORM_1 :  126;
  PS_FORM_2 :  127;
  PS_SVC_RADIO_BOX :  128;
  PS_WIDTH_LABEL :  129;
  PS_HEIGHT_LABEL :  130;
  SCALE_X_BY_LABEL :  131;
  SCALE_Y_BY_LABEL :  132;
  SCALE_FORM_1 :  133;
  SCALE_FORM_2 :  134;
  PS_UNITS_RADIO_BOX :  135;
  PS_RESOLUTION_LABEL :  136;
  PATTERN_SAMPLE_WINDOW_FRAME :  137;
  DQ_BUTTONS_ROW_COLUMN :  138;
  DQ_YES_BUTTON :  139;
  DQ_NO_BUTTON :  140;
  DQ_CANCEL_BUTTON :  141;
  DQ_HELP_BUTTON :  142;
  DQ_PIXMAP :  143;
  DQ_LABEL :  144;

  PATTERN_NONE_ID :  0;
  PATTERN_BG_ID :  1;
  PATTERN_FG_ID :  2;

  OUTLINE_PATTERN_ID :  0;
  FILL_PATTERN_ID :  1;

!
! Scale pusbutton id's
!
  SCALE_OK_ID :  0;
  SCALE_APPLY_ID :  1;
  SCALE_CANCEL_ID :  2;
  SCALE_X_25_ID :  3;
  SCALE_X_50_ID :  4;
  SCALE_X_100_ID :  5;
  SCALE_X_200_ID :  6;
  SCALE_X_300_ID :  7;
  SCALE_X_400_ID :  8;
  MAX_SCALE_X_ID :  SCALE_X_400_ID;
  SCALE_Y_25_ID :  9;
  SCALE_Y_50_ID :  10;
  SCALE_Y_100_ID :  11;
  SCALE_Y_200_ID :  12;
  SCALE_Y_300_ID :  13;
  SCALE_Y_400_ID :  14;

!
! Edit Pattern pusbutton id's
!
  EPAT_OK_ID :  0;
  EPAT_CANCEL_ID :  1;

!
! Picture Size pusbutton and togglebutton id's
!
  PIC_SHAPE_OK_ID :  0;
  PIC_SHAPE_APPLY_ID :  1;
  PIC_SHAPE_CANCEL_ID :  2;

  PAGE_ID :  0;
  SCREEN_ID :  1;
  NON_STANDARD_ID :  2;

  PIXEL_ID :  0;
  INCH_ID :  1;
  CENTIMETER_ID :  2;

  RES_75_ID :  0;
  RES_300_ID :  1;
  RES_NON_STANDARD_ID :  2;
  RES_100_ID :  3;

  RESIZE_CROP_ID :  0;
  RESIZE_SCALE_ID :  1;

!
! Font togglebutton id's
!
  FONT_STYLE_BOLD_ID :  0;
  FONT_STYLE_ITALIC_ID :  1;
  FONT_STYLE_NORMAL_ID :  2;

!
! Print pushbutton id's
!
  PRINT_2_OK_ID :  0;
  PRINT_2_CANCEL_ID :  1;

  PRINT_OK_ID :  0;
  PRINT_APPLY_ID :  1;
  PRINT_OPTIONS_ID :  2;
  PRINT_CANCEL_ID :  3;

  PR_PS_FORMAT :  0;
  PR_SIXEL_FORMAT :  1;

  PR_COLOR_DEVICE :  0;
  PR_MONO_DEVICE :  1;

  ASPECT_1_TO_1_ID :  0;
  ASPECT_2_TO_1_ID :  1;

  JUSTIFY_LEFT :  0;
  JUSTIFY_RIGHT :  1;
  CENTER_HORIZONTAL :  2;

  JUSTIFY_TOP :  0;
  JUSTIFY_BOTTOM :  1;
  CENTER_VERTICAL :  2;

  PR_SEND_TO_PRINTER :  0;
  PR_SEND_TO_FILE :  1;
  PR_SEND_TO_BOTH :  2;

!
! Quit/Open/SP_Crop/AI_Error/Scale_Picture caution box pushbutton id's
!
  DQ_YES_ID :  0;
  DQ_NO_ID :  1;
  DQ_CANCEL_ID :  2;
  DQ_HELP_ID :  3;

  AI_ERROR_EXIT_YES_ID :  0;
  AI_ERROR_EXIT_NO_ID :  1;
  AI_ERROR_EXIT_HELP_ID :  2;

  COLOR_MIX_APPLY_YES_ID :  0;
  COLOR_MIX_APPLY_NO_ID :  1;
  COLOR_MIX_APPLY_HELP_ID :  2;

!
! Scroll Bar id's
!
  VERTICAL_SCROLL_BAR_ID :  0;
  HORIZONTAL_SCROLL_BAR_ID :  1;

!
! Icon id's
!
  SELECT_ICON_ID :  0;
  SPRAYCAN_ICON_ID :  1;
  ERASER_ICON_ID :  2;
  TEXT_ICON_ID :  3;
  LINE_ICON_ID :  4;
  RECTANGLE_ICON_ID :  5;
  ELLIPSE_ICON_ID :  6;
  STROKE_ICON_ID :  7;
  DROPPER_ICON_ID :  8;
  SCISSORS_ICON_ID :  9;
  PENCIL_ICON_ID :  10;
  BRUSH_ICON_ID :  11;
  BUCKET_ICON_ID :  12;
  ARC_ICON_ID :  13;
  SQUARE_ICON_ID :  14;
  CIRCLE_ICON_ID :  15;
  POLYGON_ICON_ID :  16;

!
! Grid Size Dialog id's
!
  GSD_OK_ID :  0;
  GSD_APPLY_ID :  1;
  GSD_CANCEL_ID :  2;


!value
!  XmNleftAttachment : argument('adbLeftAttachment' , integer);
!  XmNrightAttachment : argument('adbRightAttachment' , integer);
!  XmNtopAttachment : argument('adbTopAttachment' , integer);
!  XmNbottomAttachment : argument('adbBottomAttachment' , integer);
!
!  XmNleftPosition : argument('adbLeftPosition', integer);
!  XmNrightPosition : argument('adbRightPosition', integer);
!  XmNtopPosition : argument('adbTopPosition', integer);
!  XmNbottomPosition : argument('adbBottomPosition', integer);
!
!  XmNleftWidget : argument('adbLeftWidget', any);
!  XmNrightWidget : argument('adbRightWidget', any);
!  XmNtopWidget : argument('adbTopWidget', any);
!  XmNbottomWidget : argument('adbBottomWidget', any);
!
!  XmNleftOffset : argument ('adbLeftOffset', integer);
!  XmNrightOffset : argument ('adbRightOffset', integer);
!  XmNtopOffset : argument ('adbTopOffset', integer);
!  XmNbottomOffset : argument ('adbBottomOffset', integer);



!****************************
!*  Main Translation Table  *
!****************************


main_translation_table : exported
  translation_table ('~Help<Btn1Down> : Pressed_Button()',
		     '<Btn2Down> : Pressed_Button2()',
		     '~Help<Btn1Up> : Released_Button_1()',
		     '~Help<Btn2Up> : Released_Button_2()',
		     '~Help<Btn3Up> : Released_Button_3()',
		     'Button1<Motion> : Moved_Mouse()',
		     REFRESH_ACCELERATOR,
		     '<Expose> : Refresh_Window()'); 


motion_translation_table : exported
  translation_table ('<Motion> : Moved_Mouse()',
		     '~Help<Btn1Down> : Pressed_Button()',
		     '<Btn2Down> : Pressed_Button2()',
		     '~Help<Btn1Up> : Released_Button_1()',
		     '~Help<Btn2Up> : Released_Button_2()',
		     '~Help<Btn3Up> : Released_Button_3()',
		     'Button1<Motion> : Moved_Mouse()',
		     REFRESH_ACCELERATOR,
		     '<Expose> : Refresh_Window()');


zoom_translation_table : exported
  translation_table ('<Motion> : Moved_Mouse()',
		     '~Help<Btn1Down> : Pressed_Button()',
		     '<Btn2Down> : Pressed_Button2()',
		     '~Help<Btn1Up> : Released_Button_1()',
		     '~Help<Btn2Up> : Released_Button_2()',
		     '~Help<Btn3Up> : Released_Button_3()',
		     'Button1<Motion> : Moved_Mouse()',
		     REFRESH_ACCELERATOR,
		     '<Configure> : Configure_Window()',
		     '<Expose> : Refresh_Window()');



!			     *************
!			     *  Objects  *
!			     *************


!*****************
!*  Main Window  *
!*****************

object

  main : exported XmMainWindow {
    arguments {
      XmNx = mw_x;
      XmNy = mw_y;
      XmNwidth = mw_wd;
      XmNheight = mw_ht;
      XmNworkWindow = XmForm work_window;
    };
    controls {
      XmMenuBar	  main_menu_bar;
      XmForm	  work_window;	
    };
    callbacks {
      XmNhelpCallback = procedure help (MainHelp);
    };
  };


!  *****************
!  *  Work Window  *
!  *****************

  object
    work_window : XmForm {
      arguments {
!	XmNwidth = main_wd;	! decided at run time
!	XmNheight = main_ht;	! decided at run time
	XmNunitType = ww_units;
	XmNborderWidth = ww_bwd;
	XmNmarginWidth = ww_mwd;
	XmNmarginHeight = ww_mht;
      };
      controls {
	XmFrame		  icon_window_frame;
	XmFrame		  position_window_frame;
	XmFrame		  paint_window_frame;
      };
    };


!    *********************
!    *  The Icon Window  *
!    *********************

    object

      icon_window_frame : XmFrame {
	arguments {
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNleftOffset = iwf_lo;
	  XmNtopOffset = iwf_to;
	  XmNmarginWidth = iwf_mwd;
	  XmNmarginHeight = iwf_mht;
	  XmNshadowType = iwf_sh_type;
	  XmNshadowThickness = iwf_sh_thick;
	};
	controls {
	  XmRowColumn icon_row_column;
	};
      };

      icon_row_column : exported XmRowColumn {
	arguments {
	  XmNorientation = XmVERTICAL;
	  XmNnumColumns = irc_cols;
	  XmNpacking = XmPACK_COLUMN;
	  XmNmarginWidth = irc_mwd;
	  XmNmarginHeight = irc_mht;
	  XmNspacing = irc_spacing;
	};
	controls {
	  XmPushButton select_button;
	  XmPushButton spraycan_button;
	  XmPushButton eraser_button;
	  XmPushButton text_button;
	  XmPushButton line_button;
	  XmPushButton rectangle_button;
	  XmPushButton ellipse_button;
	  XmPushButton stroke_button;
	  XmPushButton dropper_button;
	  XmPushButton scissors_button;
	  XmPushButton pencil_button;
	  XmPushButton brush_button;
	  XmPushButton bucket_button;
	  XmPushButton arc_button;
	  XmPushButton square_button;
	  XmPushButton circle_button;
	  XmPushButton polygon_button;
	};
        callbacks {
	  MrmNcreateCallback = procedure Create_Callback (ICON_WINDOW);
	};
      };


	select_button : exported XmPushButton widget {
	  arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = select_icon_40;
!	    XmNlabelInsensitivePixmap = select_icon_40_ins;
!	    XmNhighlightPixmap = select_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (SELECT_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (SELECT_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsSelectHelp);
	  };
	};


	spraycan_button : exported XmPushButton widget {
	  arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = spraycan_icon_40;
!	    XmNlabelInsensitivePixmap = spraycan_icon_40_ins;
!	    XmNhighlightPixmap = spraycan_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (SPRAYCAN_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (SPRAYCAN_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsSprayCanHelp);
	  };
	};


	eraser_button : exported XmPushButton widget {
	  arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = eraser_icon_40;
!	    XmNlabelInsensitivePixmap = eraser_icon_40_ins;
!	    XmNhighlightPixmap = eraser_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (ERASER_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (ERASER_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsEraserHelp);
	  };
	};


	text_button : exported XmPushButton widget {
	  arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = text_icon_40;
!	    XmNlabelInsensitivePixmap = text_icon_40_ins;
!	    XmNhighlightPixmap = text_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (TEXT_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (TEXT_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsTextHelp);
	  };
	};


	line_button : exported XmPushButton widget {
	  arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = line_icon_40;
!	    XmNlabelInsensitivePixmap = line_icon_40_ins;
!	    XmNhighlightPixmap = line_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (LINE_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (LINE_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsLineHelp);
	  };
	};


	rectangle_button : exported XmPushButton widget {
	  arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = rectangle_icon_40;
!	    XmNlabelInsensitivePixmap = rectangle_icon_40_ins;
!	    XmNhighlightPixmap = rectangle_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (RECTANGLE_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (RECTANGLE_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsRectangleHelp);
	  };
	};


	ellipse_button : exported XmPushButton widget {
          arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = ellipse_icon_40;
!	    XmNlabelInsensitivePixmap = ellipse_icon_40_ins;
!	    XmNhighlightPixmap = ellipse_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (ELLIPSE_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (ELLIPSE_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsEllipseHelp);
	  };
	};


	stroke_button : exported XmPushButton widget {
	  arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = stroke_icon_40;
!	    XmNlabelInsensitivePixmap = stroke_icon_40_ins;
!	    XmNhighlightPixmap = stroke_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (STROKE_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (STROKE_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsStrokeHelp);
	  };
	};


	dropper_button : exported XmPushButton widget {
	  arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = dropper_icon_40;
!	    XmNlabelInsensitivePixmap = dropper_icon_40_ins;
!	    XmNhighlightPixmap = dropper_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (DROPPER_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (DROPPER_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsDropperHelp);
	  };
	};


	scissors_button : exported XmPushButton widget {
	  arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = scissors_icon_40;
!	    XmNlabelInsensitivePixmap = scissors_icon_40_ins;
!	    XmNhighlightPixmap = scissors_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (SCISSORS_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (SCISSORS_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsScissorsHelp);
	  };
	};


	pencil_button : exported XmPushButton widget {
	  arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = pencil_icon_40;
!	    XmNlabelInsensitivePixmap = pencil_icon_40_ins;
!	    XmNhighlightPixmap = pencil_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (PENCIL_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (PENCIL_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsPencilHelp);
	  };
	};


	brush_button : exported XmPushButton widget {
          arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = brush_icon_40_neg;
!	    XmNlabelInsensitivePixmap = brush_icon_40_ins;
!	    XmNhighlightPixmap = brush_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (BRUSH_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (BRUSH_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsBrushHelp);
	  };
	};


	bucket_button : exported XmPushButton widget {
	  arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = bucket_icon_40;
!	    XmNlabelInsensitivePixmap = bucket_icon_40_ins;
!	    XmNhighlightPixmap = bucket_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (BUCKET_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (BUCKET_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsBucketHelp);
	  };
	};


	arc_button : exported XmPushButton widget {
          arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = arc_icon_40;
!	    XmNlabelInsensitivePixmap = arc_icon_40_ins;
!	    XmNhighlightPixmap = arc_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (ARC_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (ARC_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsArcHelp);
	  };
	};


	square_button : exported XmPushButton widget {
	  arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = square_icon_40;
!	    XmNlabelInsensitivePixmap = square_icon_40_ins;
!	    XmNhighlightPixmap = square_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (SQUARE_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (SQUARE_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsSquareHelp);
	  };
	};


	circle_button : exported XmPushButton widget {
	  arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = circle_icon_40;
!	    XmNlabelInsensitivePixmap = circle_icon_40_ins;
!	    XmNhighlightPixmap = circle_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (CIRCLE_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (CIRCLE_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsCircleHelp);
	  };
	};


	polygon_button : exported XmPushButton widget {
	  arguments {
	    XmNlabelType = XmPIXMAP;
!	    XmNlabelPixmap = polygon_icon_40;
!	    XmNlabelInsensitivePixmap = polygon_icon_40_ins;
!	    XmNhighlightPixmap = polygon_icon_40_neg;
!	    XmNborderWidth = 0;
!	    XmNshadowThickness = 0;
	    XmNmarginWidth = ib_mwd;
	    XmNmarginHeight = ib_mht;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Icon_Button (POLYGON_ICON_ID);
	    XmNarmCallback = procedure Clicked_On_Icon (POLYGON_ICON_ID);
	    XmNhelpCallback = procedure help (ToolsPolygonHelp);
	  };
	};


!    *************************
!    *  The Position Window  *
!    *************************

    object

      position_window_frame : XmFrame {
	arguments {
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNrightAttachment = XmATTACH_OPPOSITE_WIDGET;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNtopWidget = XmFrame icon_window_frame;
	  XmNrightWidget = XmFrame icon_window_frame;
	  XmNleftOffset = poswf_lo;
	  XmNtopOffset = poswf_to;
	  XmNmarginWidth = poswf_mwd;
	  XmNmarginHeight = poswf_mht;
	  XmNshadowType = poswf_sh_type;
	  XmNshadowThickness = poswf_sh_thick;
	  XmNresizable = false;
	};
	controls {
	  XmDrawingArea position_window;
	};
      };

      position_window : exported XmDrawingArea {
	arguments {
	  XmNheight = position_ht;
!	  XmNborderWidth = posw_bwd;
	  XmNtranslations =
	   translation_table ('~Help<Btn1Down> : Clicked_In_Pos_Window()',
			      'Button1<Motion> : Position_Moved_Mouse()',
			      '<Motion> : Position_Moved_Mouse()',
			      '~Help<Btn1Up> : Released_In_Pos_Window()',
			      '<Expose> : Refresh_Pos_Window()');
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (POSITION_WINDOW);
	  XmNhelpCallback = procedure help (PositionWindowHelp);
	};
      };



!    ***********************
!    *  The Scroll Window  *
!    ***********************

    object

      paint_window_frame : XmFrame {
	arguments {
	  XmNleftAttachment = XmATTACH_WIDGET;
	  XmNleftWidget = XmFrame icon_window_frame;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNleftOffset = pwf_lo;
	  XmNtopOffset = pwf_to;
	  XmNmarginWidth = pwf_mwd;
	  XmNmarginHeight = pwf_mht;
	  XmNshadowType = pwf_sh_type;
	  XmNshadowThickness = pwf_sh_thick;
	};
	controls {
	  XmScrolledWindow paint_window;
	};
      };

      paint_window : exported XmScrolledWindow {
	arguments {
	  XmNworkWindow = XmDrawingArea scrolling_window;
	  XmNhorizontalScrollBar = XmScrollBar paint_h_scroll_bar;
	  XmNverticalScrollBar = XmScrollBar paint_v_scroll_bar;
	  XmNtranslations =
	   translation_table ('<Configure> : Configure_Window()');
	};
	controls {
	  XmScrollBar paint_h_scroll_bar;
	  XmScrollBar paint_v_scroll_bar;
	  XmDrawingArea scrolling_window;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PAINT_WINDOW);
	};
      };


	paint_h_scroll_bar : exported XmScrollBar {
	  arguments {
	    XmNmaximum = pimage_wd;
	    XmNorientation = XmHORIZONTAL;
	    XmNincrement = hsb_inc;
!	    XmNpageIncrement = (set at run time)
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Callback (PAINT_H_SCROLL_BAR);
	    XmNvalueChangedCallback = procedure Hbar_Change;
	    XmNincrementCallback = procedure Hbar_Increment;
	    XmNdecrementCallback = procedure Hbar_Increment;
	    XmNpageIncrementCallback = procedure Hbar_Increment;
	    XmNpageDecrementCallback = procedure Hbar_Increment;
	    XmNtoBottomCallback = procedure To_Bottom (HORIZONTAL_SCROLL_BAR_ID);
	    XmNtoTopCallback = procedure To_Top (HORIZONTAL_SCROLL_BAR_ID);
	    XmNhelpCallback = procedure help (ScrollBarHelp);
	  };
	};


	paint_v_scroll_bar : exported XmScrollBar {
	  arguments {
	    XmNmaximum = pimage_ht;
	    XmNorientation = XmVERTICAL;
	    XmNincrement = vsb_inc;
!	    XmNpageIncrement = (set at runtime);
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Callback (PAINT_V_SCROLL_BAR);
	    XmNvalueChangedCallback = procedure Vbar_Change;
	    XmNincrementCallback = procedure Vbar_Increment;
	    XmNdecrementCallback = procedure Vbar_Increment;
	    XmNpageIncrementCallback = procedure Vbar_Increment;
	    XmNpageDecrementCallback = procedure Vbar_Increment;
	    XmNtoBottomCallback = procedure To_Bottom (VERTICAL_SCROLL_BAR_ID);
	    XmNtoTopCallback = procedure To_Top (VERTICAL_SCROLL_BAR_ID);
	    XmNhelpCallback = procedure help (ScrollBarHelp);
	  };
	};

	scrolling_window : XmDrawingArea {
	  arguments {
	    XmNmarginWidth = scrollw_mwd;
	    XmNmarginHeight = scrollw_mht;
	  };
	  controls {
	    user_defined picture_window;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Callback (SCROLLING_WINDOW);
	  };
	};	    

	picture_window : exported user_defined procedure WindowCreate {
	  arguments {
	    XmNwidth = pw_wd;
      	    XmNheight = pw_ht;
	    XmNtranslations = main_translation_table;
	    XmNresizePolicy = XmRESIZE_NONE;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Callback (PICTURE_WINDOW);
	  };
	};

!        border_window : exported XmDrawingArea {
!
!          arguments {
!            XmNx = -1;
!            XmNy = -1;
!            XmNwidth = picture_wd;
!            XmNheight = picture_ht;
!            XmNborderWidth = bw_bwd;
!          };
!
!          callbacks {
!            MrmNcreateCallback = procedure Create_Callback (BORDER_WINDOW);
!          };
!        };


!  *******************
!  *  Main Menu Bar  *
!  *******************

  object

    main_menu_bar : exported XmMenuBar {
      arguments {
	XmNorientation = XmHORIZONTAL;
	XmNmenuHelpWidget = XmCascadeButton help_menu_entry;
      };
      controls {
	XmCascadeButton  file_menu_entry;
	XmCascadeButton  edit_menu_entry;
	XmCascadeButton  font_menu_entry;
	XmCascadeButton  options_menu_entry;
	XmCascadeButton  help_menu_entry;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (MAIN_MENU_BAR);
      };
    };


!    *******************
!    *  File Pulldown  *
!    *******************

    object

      file_menu_entry : XmCascadeButton {
	arguments {
	  XmNlabelString = T_FILE;
	  XmNmnemonic = FileMnemonic;
	};
	controls {
	  XmPulldownMenu file_menu;
	};
	callbacks {
	    XmNhelpCallback = procedure help (FileMenuHelp);
	};
      };


	file_menu : XmPulldownMenu {
	  arguments {
	    XmNtearOffModel = XmTEAR_OFF_ENABLED;
	  };
	  controls {
	    XmPushButton file_menu_open_button;
	    XmPushButton file_menu_include_button;
	    XmSeparator   default_separator;
	    XmPushButton file_menu_save_button;
	    XmPushButton file_menu_saveas_button;
	    XmSeparator	default_separator;
	    XmPushButton file_menu_print1_button;
	    XmPushButton file_menu_print2_button;
	    XmSeparator	default_separator;
	    XmPushButton file_menu_quit_button;
	  };
	};


	  file_menu_open_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_OPEN;
	      XmNaccelerator = OPEN_ACCELERATOR;
	      XmNacceleratorText = OPEN_ACCELERATOR_TEXT;
	      XmNmnemonic = OpenMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure File_Command (FILE_OPEN_ID);
	      XmNhelpCallback = procedure help (FileOpenHelp);
	    };
	  };


	  file_menu_include_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_INCLUDE;
	      XmNmnemonic = IncludeMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure File_Command (FILE_INCLUDE_ID);
	      XmNhelpCallback = procedure help (FileIncludeHelp);
	    };
	  };


	  file_menu_save_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_SAVE;
	      XmNaccelerator = SAVE_ACCELERATOR;
	      XmNacceleratorText = SAVE_ACCELERATOR_TEXT;
	      XmNmnemonic = SaveMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure File_Command (FILE_SAVE_ID);
	      XmNhelpCallback = procedure help (FileSaveHelp);
	    };
	  };


	  file_menu_saveas_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_SAVE_AS;
	      XmNmnemonic = SaveAsMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure File_Command (FILE_SAVE_AS_ID);
	      XmNhelpCallback = procedure help (FileSaveAsHelp);
	    };
	  };


	  file_menu_print1_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_PRINT;
	      XmNaccelerator = PRINT_ACCELERATOR;
	      XmNacceleratorText = PRINT_ACCELERATOR_TEXT;
	      XmNmnemonic = PrintMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure File_Command (FILE_PRINT_ID);
	      XmNhelpCallback = procedure help (FilePrintHelp);
	    };
	  };


	  file_menu_print2_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_PRINT_AS;
	      XmNmnemonic = PrintAsMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure File_Command (FILE_PRINT_AS_ID);
	      XmNhelpCallback = procedure help (FilePrintAsHelp);
	    };
	  };


	  file_menu_quit_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_QUIT;
	      XmNaccelerator = QUIT_ACCELERATOR;
	      XmNacceleratorText = QUIT_ACCELERATOR_TEXT;
	      XmNmnemonic = QuitMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure File_Command (FILE_QUIT_ID);
	      XmNhelpCallback = procedure help (FileQuitHelp);
	    };
	  };


!    *******************
!    *  Edit Pulldown  *
!    *******************

    object

      edit_menu_entry : XmCascadeButton {
	arguments {
	  XmNlabelString = T_EDIT;
	  XmNmnemonic = EditMnemonic;
	};
	controls {
	  XmPulldownMenu edit_menu;
	};
	callbacks {
	  XmNhelpCallback = procedure help (EditMenuHelp);
	};
      };  


	edit_menu : XmPulldownMenu {
	  arguments {
	    XmNtearOffModel = XmTEAR_OFF_ENABLED;
	  };
	  controls {
	    XmPushButton edit_menu_undo_button;
            XmSeparator   default_separator;   
            XmPushButton edit_menu_cut_button;   
            XmPushButton edit_menu_copy_button;
	    XmPushButton edit_menu_quick_copy_button;
            XmPushButton edit_menu_paste_button;   
            XmSeparator   default_separator;   
            XmPushButton edit_menu_clear_button;   
            XmPushButton edit_menu_invert_button;   
            XmPushButton edit_menu_crop_button;   
            XmPushButton edit_menu_scale_button;   
            XmSeparator   default_separator;   
            XmPushButton edit_menu_clear_ww_button;   
            XmPushButton edit_menu_select_all_button;   
            XmPushButton edit_menu_scale_picture_button;   
          };
	};


	  edit_menu_undo_button : exported XmPushButton {
	    arguments {
	      XmNlabelString = T_UNDO;
	      XmNaccelerator = UNDO_ACCELERATOR;
	      XmNacceleratorText = UNDO_ACCELERATOR_TEXT;
	      XmNsensitive = false;
	      XmNmnemonic = UndoMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Edit_Command (EDIT_UNDO_ID);
	      MrmNcreateCallback = procedure Create_Callback (EDIT_UNDO_BUTTON);
	      XmNhelpCallback = procedure help (EditUndoHelp);
	    };
	  };


	  edit_menu_cut_button : exported XmPushButton {
	    arguments {
	      XmNlabelString = T_CUT;
	      XmNaccelerator = CUT_ACCELERATOR;
	      XmNacceleratorText = CUT_ACCELERATOR_TEXT;
	      XmNsensitive = false;
	      XmNmnemonic = CutMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Edit_Command (EDIT_CUT_ID);
	      MrmNcreateCallback = procedure Create_Callback (EDIT_CUT_BUTTON);
	      XmNhelpCallback = procedure help (EditCutHelp);
	    };
	  };


	  edit_menu_copy_button : exported XmPushButton {
	    arguments {
	      XmNlabelString = T_COPY;
	      XmNaccelerator = COPY_ACCELERATOR;
	      XmNacceleratorText = COPY_ACCELERATOR_TEXT;
	      XmNsensitive = false;
	      XmNmnemonic = CopyMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Edit_Command (EDIT_COPY_ID);
	      MrmNcreateCallback = procedure Create_Callback (EDIT_COPY_BUTTON);
	      XmNhelpCallback = procedure help (EditCopyHelp);
	    };
	  };


	  edit_menu_quick_copy_button : exported XmPushButton {
	    arguments {
	      XmNlabelString = T_QUICK_COPY;
	      XmNaccelerator = QUICK_COPY_ACCELERATOR;
	      XmNacceleratorText = QUICK_COPY_ACCELERATOR_TEXT;
	      XmNsensitive = false;
	      XmNmnemonic = QuickCopyMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Edit_Command (EDIT_QUICK_COPY_ID);
	      MrmNcreateCallback = procedure Create_Callback (EDIT_QUICK_COPY_BUTTON);
	      XmNhelpCallback = procedure help (EditQuickCopyHelp);
	    };
	  };


	  edit_menu_paste_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_PASTE;
	      XmNaccelerator = PASTE_ACCELERATOR;
	      XmNacceleratorText = PASTE_ACCELERATOR_TEXT;
	      XmNmnemonic = PasteMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Edit_Command (EDIT_PASTE_ID);
	      MrmNcreateCallback = procedure Create_Callback (EDIT_PASTE_BUTTON);
	      XmNhelpCallback = procedure help (EditPasteHelp);
	    };
	  };


	  edit_menu_clear_button : exported XmPushButton {
	    arguments {
	      XmNlabelString = T_CLEAR;
	      XmNsensitive = false;
	      XmNmnemonic = ClearMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Edit_Command (EDIT_CLEAR_ID);
	      MrmNcreateCallback = procedure Create_Callback (EDIT_CLEAR_BUTTON);
	      XmNhelpCallback = procedure help (EditClearHelp);
	    };
	  };


	  edit_menu_invert_button : exported XmPushButton {
	    arguments {
	      XmNlabelString = T_INVERT;
	      XmNsensitive = false;
	      XmNmnemonic = InvertMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Edit_Command (EDIT_INVERT_ID);
	      MrmNcreateCallback = procedure Create_Callback (EDIT_INVERT_BUTTON);
	      XmNhelpCallback = procedure help (EditInvertHelp);
	    };
	  };


	  edit_menu_crop_button : exported XmPushButton {
	    arguments {
	      XmNlabelString = T_CROP;
	      XmNsensitive = false;
	      XmNmnemonic = CropMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Edit_Command (EDIT_CROP_ID);
	      MrmNcreateCallback = procedure Create_Callback (EDIT_CROP_BUTTON);
	      XmNhelpCallback = procedure help (EditCropHelp);
	    };
	  };


	  edit_menu_scale_button : exported XmPushButton {
	    arguments {
	      XmNlabelString = T_SCALE;
	      XmNsensitive = false;
	      XmNmnemonic = ScaleMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Edit_Command (EDIT_SCALE_ID);
	      MrmNcreateCallback = procedure Create_Callback (EDIT_SCALE_BUTTON);
	      XmNhelpCallback = procedure help (EditScaleHelp);
	    };
	  };


	  edit_menu_clear_ww_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_CLEAR_WW;
	      XmNmnemonic = ClearWindowMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Edit_Command (EDIT_CLEAR_WW_ID);
	      MrmNcreateCallback = procedure Create_Callback (EDIT_CLEAR_WW_BUTTON);
	      XmNhelpCallback = procedure help (EditClearWindowHelp);
	    };
	  };


	  edit_menu_select_all_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_SELECT_ALL;
	      XmNmnemonic = SelectAllMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Edit_Command (EDIT_SELECT_ALL_ID);
	      MrmNcreateCallback = procedure Create_Callback (EDIT_SELECT_ALL_BUTTON);
	      XmNhelpCallback = procedure help (EditSelectWindowHelp);
	    };
	  };


	  edit_menu_scale_picture_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_SCALE_PICTURE;
	      XmNmnemonic = ScalePictureMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Edit_Command (EDIT_SCALE_PICTURE_ID);
	      MrmNcreateCallback = procedure Create_Callback (EDIT_SCALE_PIC_BUTTON);
	      XmNhelpCallback = procedure help (EditScalePictureHelp);
	    };
	  };


!	***********************
!	*  Default Separator  *
!	***********************

	object

	  default_separator : XmSeparator {};


!    *******************
!    *  Font Pulldown  *
!    *******************

    object

      font_menu_entry : XmCascadeButton {
	arguments {
	  XmNlabelString = T_FONT;
	  XmNmnemonic = TextMnemonic;
	};
	controls {
	  XmPulldownMenu font_menu;
	};
	callbacks {
	  XmNhelpCallback = procedure help (FontMenuHelp);
	};
      };  


	font_menu : XmPulldownMenu {
	  arguments {
	    XmNtearOffModel = XmTEAR_OFF_ENABLED;
	  };
	  controls {
	    XmCascadeButton font_family_menu_entry;
	    XmCascadeButton font_size_menu_entry;
	    XmCascadeButton font_style_menu_entry;
	  };
	};


	  font_family_menu_entry : XmCascadeButton {
	    arguments {
	      XmNlabelString = T_FAMILY;
	      XmNmnemonic = FamilyMnemonic;
	    };
	    controls {
	      XmPulldownMenu font_family_menu;
	    };
	    callbacks {
	      XmNhelpCallback = procedure help (FontFamilyHelp);
	    };
	  };


	    font_family_menu : XmPulldownMenu {
	      arguments {
		XmNradioBehavior = true;
	      };
	      controls {
		XmToggleButton family_courier_toggle_button;
		XmToggleButton family_times_toggle_button;
		XmToggleButton family_helvetica_toggle_button;
	      };
	    };


	      family_courier_toggle_button : XmToggleButton {
		arguments {
		  XmNindicatorType = XmONE_OF_MANY;
		  XmNset = true;
		  XmNlabelString = T_COURIER;
		  XmNmnemonic = CourierMnemonic;
		};
		callbacks {
		  XmNvalueChangedCallback = procedure Change_Font_Family (1);
		};
	      };


	      family_times_toggle_button : XmToggleButton {
		arguments {
		  XmNindicatorType = XmONE_OF_MANY;
		  XmNlabelString = T_TIMES;
		  XmNmnemonic = TimesMnemonic;
		};
		callbacks {
		  XmNvalueChangedCallback = procedure Change_Font_Family (2);
		};
	      };


	      family_helvetica_toggle_button : XmToggleButton {
		arguments {
		  XmNindicatorType = XmONE_OF_MANY;
		  XmNlabelString = T_HELVETICA;
		  XmNmnemonic = HelveticaMnemonic;
		};
		callbacks {
		  XmNvalueChangedCallback = procedure Change_Font_Family (3);
	         };
	      };


	  font_size_menu_entry : XmCascadeButton {
	    arguments {
	      XmNlabelString = T_SIZE;
	      XmNmnemonic = SizeMnemonic;
	    };
	    controls {
	      XmPulldownMenu font_size_menu;
	    };
	    callbacks {
	      XmNhelpCallback = procedure help (FontSizeHelp);
	    };
	  };


	    font_size_menu : XmPulldownMenu {
	      arguments {
		XmNradioBehavior = true;
	      };
	      controls {
		XmToggleButton size_10_toggle_button;
		XmToggleButton size_12_toggle_button;
		XmToggleButton size_14_toggle_button;
		XmToggleButton size_18_toggle_button;
		XmToggleButton size_24_toggle_button;
	      };
	    };


	      size_10_toggle_button : XmToggleButton {
		arguments {
		  XmNindicatorType = XmONE_OF_MANY;
		  XmNlabelString = T_10;
		  XmNmnemonic = TenMnemonic;
		};
		callbacks {
		  XmNvalueChangedCallback = procedure Change_Font_Size (1);
		};
	      };


	      size_12_toggle_button : XmToggleButton {
		arguments {
		  XmNindicatorType = XmONE_OF_MANY;
		  XmNlabelString = T_12;
		  XmNmnemonic = TwelveMnemonic;
		};
		callbacks {
		  XmNvalueChangedCallback = procedure Change_Font_Size (2);
		};
	      };


	      size_14_toggle_button : XmToggleButton {
	        arguments {
		  XmNindicatorType = XmONE_OF_MANY;
		  XmNset = true;
		  XmNlabelString = T_14;
		  XmNmnemonic = FourteenMnemonic;
		};
	         callbacks {
		  XmNvalueChangedCallback = procedure Change_Font_Size (3);
		};
	      };


	      size_18_toggle_button : XmToggleButton {
		arguments {
		  XmNindicatorType = XmONE_OF_MANY;
		  XmNlabelString = T_18;
		  XmNmnemonic = EighteenMnemonic;
		};
		callbacks {
		  XmNvalueChangedCallback = procedure Change_Font_Size (4);
		};
	      };

  
	      size_24_toggle_button : XmToggleButton {
		arguments {
		  XmNindicatorType = XmONE_OF_MANY;
		  XmNlabelString = T_24;
		  XmNmnemonic = TwentyFourMnemonic;
		};
		callbacks {
		  XmNvalueChangedCallback = procedure Change_Font_Size (5);
		};
	      };


	  font_style_menu_entry : XmCascadeButton {
	    arguments {
	      XmNlabelString = T_STYLE;
	      XmNmnemonic = StyleMnemonic;
	    };
	    controls {
	      XmPulldownMenu font_style_menu;
	    };
	    callbacks {
	      XmNhelpCallback = procedure help (FontStyleHelp);
	    };
	  };


	    font_style_menu : XmPulldownMenu {
	      controls {
		XmToggleButton style_normal_toggle_button;
		XmToggleButton style_italic_toggle_button;
		XmToggleButton style_bold_toggle_button;
	      };
	    };


	      style_normal_toggle_button : exported XmToggleButton {
		arguments {
		  XmNlabelString = T_NORMAL;
		  XmNmnemonic = NormalMnemonic;
		};
		callbacks {
		  XmNvalueChangedCallback = procedure Change_Font_Style (FONT_STYLE_NORMAL_ID);
		  MrmNcreateCallback = procedure Create_Callback (FONT_STYLE_NORMAL_TOGGLE);
		};
	      };


	      style_italic_toggle_button : XmToggleButton {
		arguments {
		  XmNlabelString = T_ITALIC;
		  XmNmnemonic = ItalicMnemonic;
		};
		callbacks {
		  XmNvalueChangedCallback = procedure Change_Font_Style (FONT_STYLE_ITALIC_ID);
		  MrmNcreateCallback = procedure Create_Callback (FONT_STYLE_ITALIC_TOGGLE);
		};
	      };


	      style_bold_toggle_button : XmToggleButton {
		arguments {
		  XmNset = true;
		  XmNlabelString = T_BOLD;
		  XmNmnemonic = BoldMnemonic;
		};
		callbacks {
		  XmNvalueChangedCallback = procedure Change_Font_Style (FONT_STYLE_BOLD_ID);
		  MrmNcreateCallback = procedure Create_Callback (FONT_STYLE_BOLD_TOGGLE);
		};
	      };


!    **********************
!    *  Options Pulldown  *
!    **********************

    object
 
      options_menu_entry : XmCascadeButton {
	arguments {
	  XmNlabelString = T_OPTIONS;
	  XmNmnemonic = OptionsMnemonic;
	};
	controls {
	  XmPulldownMenu options_menu;
	};
	callbacks {
	  XmNhelpCallback = procedure help (OptionsMenuHelp);
	};
      };  


	options_menu : XmPulldownMenu {
	  arguments {
	    XmNtearOffModel = XmTEAR_OFF_ENABLED;
	  };
	  controls {
            XmPushButton options_pic_size_button;
            XmPushButton options_menu_brush_shape_button;
	    XmPushButton options_menu_line_width_button;
	    XmPushButton options_menu_patterns_button;
	    XmPushButton options_menu_edit_pat_button;
	    XmPushButton options_menu_color_button;
	    XmPushButton options_menu_color_mix_button;
	    XmPushButton options_menu_grid_size_button;
	    XmSeparator   default_separator;
	    XmToggleButton options_menu_opaque_button;
	    XmToggleButton options_menu_trnsprnt_button;
	    XmSeparator   default_separator;
	    XmToggleButton options_paint_view_button;
	    XmToggleButton options_full_view_button;
	    XmSeparator   default_separator;
	    XmPushButton options_menu_grid_button;
	    XmPushButton options_menu_zoom_button;
	  };
	};


	  options_pic_size_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_PIC_SIZE;
	      XmNmnemonic = PictureSizeMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Option_Command (OPTIONS_PICTURE_SIZE_ID);
	      XmNhelpCallback = procedure help (OptionsPictureSizeHelp);
	    };
	  };

	  options_menu_brush_shape_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_BRUSH_SHAPE;
	      XmNmnemonic = BrushesMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Option_Command (OPTIONS_BRUSHES_ID);
	      XmNhelpCallback = procedure help (OptionsBrushesHelp);
	    };
	  };


	  options_menu_line_width_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_LINE_WIDTH;
	      XmNmnemonic = LinesMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Option_Command (OPTIONS_LINES_ID);
	      XmNhelpCallback = procedure help (OptionsLineWidthHelp);
	    };
	  };


	  options_menu_patterns_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_PATTERNS;
	      XmNmnemonic = PatternsMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Option_Command (OPTIONS_PATTERNS_ID);
	      XmNhelpCallback = procedure help (OptionsPatternsHelp);
	    };
	  };


	  options_menu_edit_pat_button : exported XmPushButton {
	    arguments {
	      XmNlabelString = T_EDIT_PATTERN;
	      XmNsensitive = false;
	      XmNmnemonic = EditPatternMnemonic;
	    };
	     callbacks {
	      MrmNcreateCallback = procedure Create_Callback (OPTIONS_EDIT_PATTERN_BUTTON);
	      XmNactivateCallback = procedure Option_Command (OPTIONS_EDIT_PATTERN_ID);
	      XmNhelpCallback = procedure help (OptionsEditPatternHelp);
	    };
	  };


	  options_menu_color_button : exported XmPushButton {
	    arguments {
	      XmNlabelString = T_COLOR;
	      XmNsensitive = true;
	      XmNmnemonic = ColorMnemonic;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (OPTIONS_COLOR_BUTTON);
	      XmNactivateCallback = procedure Option_Command (OPTIONS_COLOR_ID);
	      XmNhelpCallback = procedure help (OptionsPaletteHelp);
	    };
	  };


	  options_menu_color_mix_button : exported XmPushButton {
	    arguments {
	      XmNlabelString = T_COLOR_MIX;
	      XmNsensitive = true;
	      XmNmnemonic = MixColorMnemonic;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (OPTIONS_COLOR_MIX_BUTTON);
	      XmNactivateCallback = procedure Option_Command (OPTIONS_COLOR_MIX_ID);
	      XmNhelpCallback = procedure help (OptionsMixColorHelp);
	    };
	  };


	  options_menu_grid_size_button : exported XmPushButton {
	    arguments {
	      XmNlabelString = T_GRID_SIZE;
	      XmNmnemonic = GridSizeMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Option_Command (OPTIONS_GRID_SIZE_ID);
	      XmNhelpCallback = procedure help (OptionsGridSizeHelp);
	    };
	  };


	  options_menu_opaque_button : XmToggleButton {
	    arguments {
	      XmNindicatorType = XmONE_OF_MANY;
	      XmNset = true;
	      XmNlabelString = T_OPAQUE;
	      XmNmnemonic = OpaqueMnemonic;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (OPAQUE_TOGGLE);
	      XmNvalueChangedCallback = procedure Option_Command (OPTIONS_OPAQUE_ID);
	      XmNhelpCallback = procedure help (OptionsOpaqueHelp);
	    };
	  };


	  options_menu_trnsprnt_button : XmToggleButton {
	    arguments {
	      XmNindicatorType = XmONE_OF_MANY;
	      XmNlabelString = T_TRANSPARENT;
	      XmNmnemonic = TransparentMnemonic;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (TRANSPARENT_TOGGLE);
	      XmNvalueChangedCallback = procedure Option_Command (OPTIONS_TRANSPARENT_ID);
	      XmNhelpCallback = procedure help (OptionsTransparentHelp);
	    };
	  };


	  options_paint_view_button : XmToggleButton {
	    arguments {
	      XmNindicatorType = XmONE_OF_MANY;
	      XmNset = true;
	      XmNlabelString = T_PAINT_VIEW;
	      XmNmnemonic = PaintViewMnemonic;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (OPTIONS_PAINT_VIEW_BUTTON);
	      XmNvalueChangedCallback = procedure Option_Command (OPTIONS_PAINT_VIEW_ID);
	      XmNhelpCallback = procedure help (OptionsPaintViewHelp);
	    };
	  };


	  options_full_view_button : XmToggleButton {
	    arguments {
	      XmNindicatorType = XmONE_OF_MANY;
	      XmNlabelString = T_FULL_VIEW;
	      XmNmnemonic = FullViewMnemonic;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (OPTIONS_FULL_VIEW_BUTTON);
	      XmNvalueChangedCallback = procedure Option_Command (OPTIONS_FULL_VIEW_ID);
	      XmNhelpCallback = procedure help (OptionsFullViewHelp);
	    };
	  };


	  options_menu_grid_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_GRID_ON;
	      XmNmnemonic = GridMnemonic;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (OPTIONS_GRID_BUTTON);
	      XmNactivateCallback = procedure Option_Command (OPTIONS_GRID_ID);
	      XmNhelpCallback = procedure help (OptionsGridHelp);
	    };
	  };


	  options_menu_zoom_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_ZOOM_ON;
	      XmNmnemonic = ZoomMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure Option_Command (OPTIONS_ZOOM_ID);
	      MrmNcreateCallback = procedure Create_Callback (OPTIONS_ZOOM_BUTTON);
	      XmNhelpCallback = procedure help (OptionsZoomHelp);
	    };
	  };


!    *******************
!    *  Help Pulldown  *
!    *******************

    object

      help_menu_entry : XmCascadeButton {
	arguments {
	  XmNlabelString = T_HELP;
	  XmNmnemonic = HelpMnemonic;
	};
	controls {
	  XmPulldownMenu help_menu;
	};
	callbacks {
	  XmNhelpCallback = procedure help (HelpMenuHelp);
	};
      };  


	help_menu : XmPulldownMenu {
	  arguments {
	    XmNtearOffModel = XmTEAR_OFF_ENABLED;
	  };
	  controls {
	    XmPushButton help_on_context_button;
	    XmSeparator {};
	    XmPushButton help_on_window_button;
	    XmPushButton help_on_help_button;
	    XmPushButton help_on_version_button;
          };
	};


	  help_on_context_button : XmPushButton {
	    arguments {
	      XmNlabelString 	= T_CONTEXT_SENSITIVE;
	      XmNmnemonic 	= ContextSensitiveMnemonic;
	      XmNaccelerator 	= ON_CONTEXT_ACCEL;
	      XmNacceleratorText= ON_CONTEXT_ACCEL_TEXT;


	    };
	    callbacks {
	      XmNactivateCallback = procedure Help_On_Context;
	      XmNhelpCallback = procedure help (HelpOnContextHelp);
	    };
	  };


	  help_on_window_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_OVERVIEW;
	      XmNmnemonic = OverviewMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure help (OnWindowHelp);
	      XmNhelpCallback = procedure help (HelpOnWindowHelp);
	    };
	  };

	  help_on_help_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_USING_HELP;
	      XmNmnemonic = UsingHelpMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure help (OnHelpHelp);
	      XmNhelpCallback = procedure help (HelpOnHelpHelp);
	    };
	  };

	  help_on_version_button : XmPushButton {
	    arguments {
	      XmNlabelString = T_PRODUCT_INFORMATION;
	      XmNmnemonic = ProductInformationMnemonic;
	    };
	    callbacks {
	      XmNactivateCallback = procedure help (OnVersionHelp);
	      XmNhelpCallback = procedure help (HelpOnVersionHelp);
	    };
	  };


!  **************************
!  *  File Selection Boxes  *
!  **************************

  object

    read_file_box : exported XmFileSelectionDialog {
      arguments {
!	arguments file_selection_args;
	XmNdialogTitle = T_OPEN_PICTURE;
	XmNdefaultPosition = true;
	XmNdirMask = T_DIR_MASK;
	XmNdialogStyle = XmDIALOG_MODELESS;
      };
      callbacks {
	XmNokCallback = procedure Read_File_Callback (FILE_SELECTION_ACTIVATE_ID);
	XmNcancelCallback = procedure Read_File_Callback (FILE_SELECTION_CANCEL_ID);
	XmNhelpCallback = procedure help (OpenDialogHelp);
      };
    };


    include_file_box : exported XmFileSelectionDialog {
      arguments {
!	arguments file_selection_args;
	XmNdialogTitle = T_INCLUDE_PICTURE;
	XmNdefaultPosition = true;
	XmNdirMask = T_DIR_MASK;
	XmNdialogStyle = XmDIALOG_MODELESS;
      };
      callbacks {
	XmNokCallback = procedure Include_File_Callback (FILE_SELECTION_ACTIVATE_ID);
	XmNcancelCallback = procedure Include_File_Callback (FILE_SELECTION_CANCEL_ID);
	XmNhelpCallback = procedure help (IncludeDialogHelp);
      };
    };


    write_file_box : exported XmFileSelectionDialog {
      arguments {
!	arguments file_selection_args;
	XmNdialogTitle = T_SAVE_PICTURE;
	XmNdefaultPosition = true;
	XmNdirMask = T_DIR_MASK;
	XmNdialogStyle = XmDIALOG_MODELESS;
      };
      callbacks {
	XmNokCallback = procedure Write_File_Callback (FILE_SELECTION_ACTIVATE_ID);
	XmNcancelCallback = procedure Write_File_Callback (FILE_SELECTION_CANCEL_ID);
	XmNhelpCallback = procedure help (SaveDialogHelp);
      };
      controls {
	XmForm file_format_form;
!	XmRowColumn file_format_radio_box;
!	XmRadioBox file_color_radio_box;
      };
    };


      file_format_form : XmForm {
	arguments {
	  XmNshadowType = fff_sh_type;
	  XmNshadowThickness = fff_sh_thick;
	  XmNhorizontalSpacing = fff_hs;
	  XmNverticalSpacing = fff_vs;
	  XmNmarginWidth = fff_mwd;
	  XmNmarginHeight = fff_mht;
	};
	controls {
	  XmRadioBox ff_radio_box_1;
          XmSeparator ff_separator;   
	  XmRadioBox ff_radio_box_2;
	};
      };


      ff_radio_box_1 : exported XmRadioBox {
        arguments {
	  XmNorientation = XmHORIZONTAL;
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNmarginHeight = ffrb1_mht;
	  XmNmarginWidth= ffrb1_mwd;
	  XmNborderWidth = ffrb1_bwd;
        };
	controls {
	  XmToggleButton write_file_ddif_button;
	  XmToggleButton write_file_x11_button;
	};
!	callbacks {
!	  MrmNcreateCallback = procedure Create_Callback (FF_RADIO_BOX_1);
!	};
      };    


	write_file_ddif_button : exported XmToggleButton {
	  arguments {
	    XmNindicatorType = XmONE_OF_MANY;
	    XmNlabelString = T_DDIF;
	  };
	  callbacks {
	    XmNvalueChangedCallback = procedure Change_File_Format (DDIF_FILE_FORMAT_ID);
	    MrmNcreateCallback = procedure Create_Callback (DDIF_FILE_FORMAT_TOGGLE);
	  };
	};

  
	write_file_x11_button : exported XmToggleButton {
	  arguments {
	    XmNindicatorType = XmONE_OF_MANY;
	    XmNlabelString = T_X11;
	  };
	  callbacks {
	    XmNvalueChangedCallback = procedure Change_File_Format (X11_FILE_FORMAT_ID);
	    MrmNcreateCallback = procedure Create_Callback (X11_FILE_FORMAT_TOGGLE);
	  };
	};
  
      ff_separator : XmSeparator {
	arguments {
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmRadioBox ff_radio_box_1;
	};
      };

      ff_radio_box_2 : exported XmRadioBox {
        arguments {
	  XmNorientation = XmHORIZONTAL;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmSeparator ff_separator;
	  XmNmarginHeight = ffrb2_mht;
	  XmNmarginWidth= ffrb2_mwd;
	  XmNborderWidth = ffrb2_bwd;
        };
	controls {
	  XmToggleButton file_color_color_toggle;
	  XmToggleButton file_color_gray_toggle;
	  XmToggleButton file_color_bw_toggle;
	};
!	callbacks {
!	  MrmNcreateCallback = procedure Create_Callback (FF_RADIO_BOX_2);
!	};
      };    


	file_color_color_toggle : exported XmToggleButton {
	  arguments {
	    XmNindicatorType = XmONE_OF_MANY;
	    XmNlabelString = T_COLOR_FILE;
	  };
	  callbacks {
	    XmNvalueChangedCallback = procedure Change_File_Color (SAVE_COLOR);
	    MrmNcreateCallback = procedure Create_Callback (FILE_COLOR_COLOR_TOGGLE);
	  };
	};


	file_color_gray_toggle : exported XmToggleButton {
	  arguments {
	    XmNindicatorType = XmONE_OF_MANY;
	    XmNlabelString = T_GRAY_FILE;
	  };
	  callbacks {
	    XmNvalueChangedCallback = procedure Change_File_Color (SAVE_GRAY);
	    MrmNcreateCallback = procedure Create_Callback (FILE_COLOR_GRAY_TOGGLE);
	  };
	};


	file_color_bw_toggle : exported XmToggleButton {
	  arguments {
	    XmNindicatorType = XmONE_OF_MANY;
	    XmNlabelString = T_BW_FILE;
	  };
	  callbacks {
	    XmNvalueChangedCallback = procedure Change_File_Color (SAVE_BW);
	    MrmNcreateCallback = procedure Create_Callback (FILE_COLOR_BW_TOGGLE);
	  };
	};

!  **********************
!  *  Brush Dialog Box  *
!  **********************
  
  object

    brush_dialog_box : exported XmFormDialog {
      arguments {
	XmNdialogStyle = XmDIALOG_MODELESS;
	XmNdefaultPosition = true;
	XmNdefaultButton = XmPushButton brush_dialog_dismiss_button;
	XmNdialogTitle = T_BSHAPES;
	XmNunitType = XmPIXELS;
	XmNnoResize = true;
	XmNfractionBase = bdb_fb;
	XmNhorizontalSpacing = bdb_dho;
	XmNverticalSpacing = bdb_dvo;
	XmNmarginWidth = bdb_mwd;
	XmNmarginHeight = bdb_mht;
      };
      controls {
	XmFrame	brush_dialog_window_frame;
	XmPushButton brush_dialog_dismiss_button;
      };
      callbacks {
	XmNhelpCallback = procedure help (BrushDialogHelp);
      };
    };


      brush_dialog_window_frame : XmFrame {
	arguments {
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNmarginWidth = bdwf_mwd;
	  XmNmarginHeight = bdwf_mht;
	  XmNshadowType = bdwf_sh_type;
	  XmNshadowThickness = bdwf_sh_thick;
	  XmNresizable = false;
	};
	controls {
	  XmDrawingArea brush_dialog_window;
	};
      };


      brush_dialog_window : exported XmDrawingArea {
	arguments {
	  XmNwidth = bdw_wd;
	  XmNheight = bdw_ht;
!	  XmNborderWidth = bdw_bwd;
	  XmNtranslations =
	   translation_table ('~Help<Btn1Down> : Clicked_On_Bshape()',
			      '<Expose> : Refresh_Brush_Window()');
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (BRUSH_DIALOG_WINDOW);
	};
      };


      brush_dialog_dismiss_button : exported XmPushButton {
	arguments {
	  XmNleftAttachment = XmATTACH_POSITION;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNleftPosition = bddb_adblp;
	  XmNtopWidget = XmFrame brush_dialog_window_frame;
	  XmNlabelString = T_OK;
	  XmNwidth = PUSH_BUTTON_WD;
	};
	callbacks {
	  XmNactivateCallback = procedure Dismiss_Brush_Dialog;
	  MrmNcreateCallback = procedure Create_Callback (BRUSH_DIALOG_DISMISS_BUTTON);
	};
      };


!  *********************
!  *  Line Dialog Box  *
!  *********************

  object

    line_dialog_box : exported XmFormDialog {
      arguments {
	XmNdialogStyle = XmDIALOG_MODELESS;
	XmNdefaultPosition = true;
	XmNdefaultButton = XmPushButton line_dialog_dismiss_button;
	XmNdialogTitle = T_LWIDTHS;
	XmNunitType = XmPIXELS;
	XmNnoResize = true;
	XmNfractionBase = ldb_fb;
	XmNhorizontalSpacing = ldb_dho;
	XmNverticalSpacing = ldb_dvo;
	XmNmarginWidth = ldb_mwd;
	XmNmarginHeight = ldb_mht;
      };
      controls {
	XmFrame	line_dialog_window_frame;
	XmPushButton line_dialog_dismiss_button;
      };
      callbacks {
	XmNhelpCallback = procedure help (LineDialogHelp);
      };
    };


    line_dialog_window_frame : XmFrame {
      arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNmarginWidth = ldwf_mwd;
	XmNmarginHeight = ldwf_mht;
	XmNshadowType = ldwf_sh_type;
	XmNshadowThickness = ldwf_sh_thick;
	XmNresizable = false;
      };
      controls {
	XmDrawingArea line_dialog_window;
      };
    };


      line_dialog_window : exported XmDrawingArea {
	arguments {
          XmNwidth = ldw_wd;
          XmNheight = ldw_ht;
!	  XmNborderWidth = ldw_bwd;
	  XmNtranslations =
	   translation_table ('~Help<Btn1Down> : Clicked_On_Line()',
			      '<Expose> : Refresh_Line_Window()');
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (LINE_DIALOG_WINDOW);
	};
      };


      line_dialog_dismiss_button : exported XmPushButton {
	arguments {
	  XmNleftAttachment = XmATTACH_POSITION;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNleftPosition = lddb_adblp;
	  XmNtopWidget = XmFrame line_dialog_window_frame;
	  XmNlabelString = T_OK;
	  XmNwidth = PUSH_BUTTON_WD;
	};
        callbacks {
	  XmNactivateCallback = procedure Dismiss_Line_Dialog;
	  MrmNcreateCallback = procedure Create_Callback (LINE_DIALOG_DISMISS_BUTTON);
	};
      };


!  **************************
!  *  Grid Size Dialog Box  *
!  **************************

  object

    grid_size_dialog_box : exported XmFormDialog {
      arguments {
	XmNdialogStyle = XmDIALOG_MODELESS;
	XmNautoUnmanage = false;
	XmNdefaultPosition = true;
	XmNdefaultButton = XmPushButton gsd_ok_button;
	XmNdialogTitle = T_GRID_SIZE_TITLE;
	XmNunitType = XmPIXELS;
	XmNnoResize = true;
	XmNhorizontalSpacing = gsdb_dho;
	XmNverticalSpacing = gsdb_dvo;
	XmNmarginWidth = gsdb_mwd;
	XmNmarginHeight = gsdb_mht;
	XmNcancelButton = XmPushButton gsd_cancel_button;
      };
      controls {
	XmScale gsd_scale;
	XmPushButton gsd_ok_button;
	XmPushButton gsd_apply_button;
	XmPushButton gsd_cancel_button;
      };
      callbacks {
	XmNhelpCallback = procedure help (GridSizeDialogHelp);
      };
    };

      gsd_scale : XmScale {
	arguments {
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNmaximum = gsds_maxv;
	  XmNminimum = gsds_minv;
	  XmNorientation = XmHORIZONTAL;
	  XmNvalue = gsds_sv;
	  XmNshowValue = true;
	  XmNtitleString = T_GRID_SIZE_SCALE_TITLE;
	  XmNprocessingDirection = gsds_pd;
	};
	callbacks {
	  XmNvalueChangedCallback = procedure Change_Grid_Size_Val;
	  MrmNcreateCallback = procedure Create_Callback (GSD_SCALE);
	};
      };

      gsd_ok_button : exported XmPushButton {
	arguments {
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmScale gsd_scale;
	  XmNlabelString = T_OK;
	  XmNwidth = PUSH_BUTTON_WD;
	};
	callbacks {
	  XmNactivateCallback = procedure Grid_Size_Button (GSD_OK_ID);
	  MrmNcreateCallback = procedure Create_Callback (GSD_OK_BUTTON);
	};
      };

      gsd_apply_button : exported XmPushButton {
	arguments {
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftAttachment = XmATTACH_WIDGET;
	  XmNtopWidget = XmScale gsd_scale;
	  XmNleftWidget = XmPushButton gsd_ok_button;
	  XmNlabelString = T_APPLY;
	  XmNwidth = PUSH_BUTTON_WD;
	};
	callbacks {
	  XmNactivateCallback = procedure Grid_Size_Button (GSD_APPLY_ID);
	  MrmNcreateCallback = procedure Create_Callback (GSD_APPLY_BUTTON);
	};
      };

      gsd_cancel_button : exported XmPushButton {
	arguments {
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftAttachment = XmATTACH_WIDGET;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmScale gsd_scale;
	  XmNleftWidget = XmPushButton gsd_apply_button;
	  XmNlabelString = T_CANCEL;
	  XmNwidth = PUSH_BUTTON_WD;
	};
	callbacks {
	  XmNactivateCallback = procedure Grid_Size_Button (GSD_CANCEL_ID);
	  MrmNcreateCallback = procedure Create_Callback (GSD_CANCEL_BUTTON);
	};
      };


!  ************************
!  *  Pattern Dialog Box  *
!  ************************

  object

    pattern_dialog_box : exported XmFormDialog {
      arguments {
	XmNdialogStyle = XmDIALOG_MODELESS;
	XmNautoUnmanage = false;
	XmNdefaultPosition = true;
	XmNdefaultButton = XmPushButton pattern_dialog_dismiss_button;
	XmNdialogTitle = T_PATTERNS_TITLE;
	XmNunitType = XmPIXELS;
	XmNnoResize = true;
	XmNfractionBase = pdb_fb;
	XmNhorizontalSpacing = pdb_hs;
	XmNverticalSpacing = pdb_vs;
	XmNmarginWidth = pdb_mwd;
	XmNmarginHeight = pdb_mht;
	XmNresizable = false;
      };
      controls {
	XmForm pattern_form_1;
	XmSeparator pdb_separator;
	XmForm pattern_form_2;
	XmFrame pattern_sample_window_frame;
	XmPushButton pattern_dialog_dismiss_button;
      };
      callbacks {
	XmNhelpCallback = procedure help (PatternDialogHelp);
      };
    };


    pattern_form_1 : XmForm {
      arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhorizontalSpacing = pf1_hs;
	XmNverticalSpacing = pf1_vs;
	XmNmarginWidth = pf1_mwd;
	XmNmarginHeight = pf1_mht;
      };
      controls {
	XmToggleButton outline_pattern_toggle;
	XmFrame outline_pattern_da_frame;
	XmToggleButton fill_pattern_toggle;
	XmFrame fill_pattern_da_frame;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (PATTERN_FORM_1);
      };
    };

    outline_pattern_toggle : XmToggleButton {
      arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_FORM;
	XmNlabelString = T_OUTLINE_PATTERN_TOGGLE_LABEL;
	XmNindicatorType = XmONE_OF_MANY;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (OUTLINE_PATTERN_TOGGLE);
	XmNvalueChangedCallback = procedure Set_Sample (OUTLINE_PATTERN_ID);
      };
    };


    outline_pattern_da_frame : XmFrame {
      arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNrightAttachment = XmATTACH_FORM;
	XmNleftWidget = XmToggleButton outline_pattern_toggle;
	XmNleftOffset = opdaf_lo;
	XmNmarginWidth = opdaf_mwd;
	XmNmarginHeight = opdaf_mht;
	XmNshadowType = opdaf_sh_type;
	XmNshadowThickness = opdaf_sh_thick;
	XmNresizable = false;
      };
      controls {
	XmDrawingArea outline_pattern_drawing_area;
      };
    };

    outline_pattern_drawing_area : XmDrawingArea {
      arguments {
	XmNwidth = opda_wd;
	XmNheight = opda_ht;
	XmNtranslations =
	  translation_table ('<Expose> : Refresh_Outline_Pattern_Window()');
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (OUTLINE_PATTERN_WINDOW);
      };
    };

    fill_pattern_toggle : XmToggleButton {
      arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNleftAttachment = XmATTACH_FORM;
	XmNtopWidget = XmFrame outline_pattern_da_frame;
	XmNtopOffset = fpt_to;
	XmNlabelString = T_FILL_PATTERN_TOGGLE_LABEL;
	XmNindicatorType = XmONE_OF_MANY;
	XmNset = true;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (FILL_PATTERN_TOGGLE);
	XmNvalueChangedCallback = procedure Set_Sample (FILL_PATTERN_ID);
      };
    };

    fill_pattern_da_frame : XmFrame {
      arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNtopWidget = XmFrame outline_pattern_da_frame;
	XmNleftWidget = XmFrame outline_pattern_da_frame;
	XmNtopOffset = fpdaf_to;
	XmNmarginWidth = fpdaf_mwd;
	XmNmarginHeight = fpdaf_mht;
	XmNshadowType = fpdaf_sh_type;
	XmNshadowThickness = fpdaf_sh_thick;
	XmNresizable = false;
      };
      controls {
	XmDrawingArea fill_pattern_drawing_area;
      };
    };

    fill_pattern_drawing_area : XmDrawingArea {
      arguments {
	XmNwidth = fpda_wd;
	XmNheight = fpda_ht;
	XmNtranslations =
	  translation_table ('<Expose> : Refresh_Fill_Pattern_Window()');
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (FILL_PATTERN_WINDOW);
      };
    };


    pdb_separator : XmSeparator {
      arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNtopWidget = XmForm pattern_form_1;
      };
    };


    pattern_form_2 : exported XmForm {
      arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNleftAttachment = XmATTACH_FORM;
	XmNtopWidget = XmSeparator pdb_separator;
	XmNhorizontalSpacing = pf2_hs;
	XmNverticalSpacing = pf2_vs;
	XmNmarginWidth = pf2_mwd;
	XmNmarginHeight = pf2_mht;
      };
      controls {
	XmPushButton solid_fg_push_button;
	XmPushButton solid_bg_push_button;
	XmPushButton pattern_none_push_button;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (PATTERN_FORM_2);
      };
    };

      solid_fg_push_button : exported XmPushButton {
	arguments {
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNlabelPixmap = fg_icon;
!	  XmNwidth = sfpb_wd;
!	  XmNheight = sfpb_ht;
!	  XmNborderWidth = sfpb_bwd;
	  XmNmarginWidth = sfpb_mwd;
	  XmNmarginHeight = sfpb_mht;
          XmNlabelType = XmPIXMAP;
	  XmNshadowThickness = sfpb_sh_thick;
	};
	callbacks {
	  XmNactivateCallback = procedure Set_Sample_Pattern (PATTERN_FG_ID);
	  MrmNcreateCallback = procedure Create_Callback (SOLID_FG_BUTTON);
	};
      };


      solid_bg_push_button : exported XmPushButton {
	arguments {
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNleftAttachment = XmATTACH_WIDGET;
	  XmNleftWidget = XmPushButton solid_fg_push_button;
	  XmNleftOffset = sbpb_lo;
	  XmNlabelPixmap = bg_icon;
!	  XmNwidth = sbpb_wd;
!	  XmNheight = sbpb_ht;
!	  XmNborderWidth = sbpb_bwd;
	  XmNmarginWidth = sbpb_mwd;
	  XmNmarginHeight = sbpb_mht;
	  XmNlabelType = XmPIXMAP;
	  XmNshadowThickness = sbpb_sh_thick;
	};
	callbacks {
	  XmNactivateCallback = procedure Set_Sample_Pattern (PATTERN_BG_ID);
	  MrmNcreateCallback = procedure Create_Callback (SOLID_BG_BUTTON);
	};
      };


      pattern_none_push_button : exported XmPushButton {
	arguments {
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNleftAttachment = XmATTACH_WIDGET;
	  XmNleftWidget = XmPushButton solid_bg_push_button;
	  XmNleftOffset = pnpb_lo;
	  XmNlabelString = T_NONE;
	  XmNwidth = PUSH_BUTTON_WD;
	};
	callbacks {
	  XmNactivateCallback = procedure Set_Sample_Pattern (PATTERN_NONE_ID);
	  MrmNcreateCallback = procedure Create_Callback (PATTERN_NONE_BUTTON);
	};
      };

      pattern_sample_window_frame : exported XmFrame {
	arguments {
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmForm pattern_form_2;
	  XmNmarginWidth = pswf_mwd;
	  XmNmarginHeight = pswf_mht;
	  XmNshadowType = pswf_sh_type;
	  XmNshadowThickness = pswf_sh_thick;
	  XmNresizable = false;
	};
	controls {
	  XmDrawingArea pattern_sample_window;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PATTERN_SAMPLE_WINDOW_FRAME);
	};
      };

      pattern_sample_window : exported XmDrawingArea {
        arguments {
	  XmNwidth = psw_wd;
	  XmNheight = psw_ht;
	  XmNtranslations =
	   translation_table ('~Help<Btn1Down> : Clicked_On_Pattern()',
			      '<Expose> : Refresh_Pattern_Window()');
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PATTERN_SAMPLE_WINDOW);
	};
      };
  

      pattern_dialog_dismiss_button : XmPushButton {
	arguments {
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftAttachment = XmATTACH_POSITION;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmFrame pattern_sample_window_frame;
	  XmNleftPosition = pddb_lp;
	  XmNlabelString = T_OK;
	  XmNwidth = PUSH_BUTTON_WD;
	};
	callbacks {
	  XmNactivateCallback = procedure Dismiss_Pattern_Dialog;
	  MrmNcreateCallback = procedure Create_Callback (PATTERN_DIALOG_DISMISS_BUTTON);
	};
      };


!  *****************************
!  *  Edit Pattern Dialog Box  *
!  *****************************

  object

    edit_pattern_dialog_box : exported XmFormDialog {
      arguments {
	XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	XmNdefaultPosition = true;
	XmNdefaultButton = XmPushButton edit_pat_ok_push_button;
	XmNdialogTitle = T_EDIT_PATTERN;
        XmNnoResize = true;
	XmNunitType = XmPIXELS;
        XmNfractionBase = epdb_fb;
	XmNhorizontalSpacing = epdb_dho;
	XmNverticalSpacing = epdb_dvo;
	XmNmarginWidth = epdb_mwd;
	XmNmarginHeight = epdb_mht;
	XmNcancelButton = XmPushButton edit_pat_cancel_push_button;
      };
      controls {
	XmFrame epat_sample_window_frame;
	XmFrame epat_zoom_window_frame;
	XmPushButton edit_pat_ok_push_button;
	XmPushButton edit_pat_cancel_push_button;
      };
      callbacks {
	XmNhelpCallback = procedure help (EditPatternDialogHelp);
      };
    };


      epat_sample_window_frame : XmFrame {
	arguments {
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNmarginWidth = eswf_mwd;
	  XmNmarginHeight = eswf_mht;
	  XmNshadowType = eswf_sh_type;
	  XmNshadowThickness = eswf_sh_thick;
	  XmNresizable = false;
	};
	controls {
	  XmDrawingArea edit_pat_sample_window;
	};
      };

      edit_pat_sample_window : exported XmDrawingArea {
	arguments {
!	  XmNbackground = window_bg;
	  XmNwidth = epsw_wd;
	  XmNheight = epsw_ht;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PSAMPLE_WINDOW);
	};
      };

      epat_zoom_window_frame : XmFrame {
	arguments {
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNleftAttachment = XmATTACH_WIDGET;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNleftWidget = XmFrame epat_sample_window_frame;
	  XmNmarginWidth = ezwf_mwd;
	  XmNmarginHeight = ezwf_mht;
	  XmNshadowType = ezwf_sh_type;
	  XmNshadowThickness = ezwf_sh_thick;
	  XmNresizable = false;
	};
	controls {
	  XmDrawingArea edit_pat_zoom_window;
	};
      };

      edit_pat_zoom_window : exported XmDrawingArea {
	arguments {
!	  XmNbackground = window_bg;
	  XmNwidth = epzw_wd;
	  XmNheight = epzw_ht;
          XmNtranslations =
	    translation_table ('~Help<Btn1Down> : Epat_Pressed_Button()',
			       '~Help<Btn1Up> : Epat_Released_Button()',
			       'Button1<Motion> : Epat_Moved_Mouse()',
			       '<Expose> : Refresh_Edit_Pattern()');
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PBITS_WINDOW);
	};
      };


      edit_pat_ok_push_button : exported XmPushButton {
	arguments {
          XmNleftAttachment = XmATTACH_POSITION;
          XmNtopAttachment = XmATTACH_WIDGET;
	  XmNbottomAttachment = XmATTACH_FORM;
          XmNleftPosition = epopb_adblp;
          XmNtopWidget = XmFrame epat_sample_window_frame;
	  XmNlabelString = T_OK;
	  XmNwidth = PUSH_BUTTON_WD;
	};
	callbacks {
	  XmNactivateCallback = procedure Delete_Edit_Pattern_Dialog (EPAT_OK_ID);
	  MrmNcreateCallback = procedure Create_Callback (EPAT_OK_BUTTON);
	};
      };


      edit_pat_cancel_push_button : exported XmPushButton {
	arguments {
          XmNleftAttachment = XmATTACH_POSITION;
          XmNtopAttachment = XmATTACH_WIDGET;
          XmNleftPosition = epcpb_adblp;
          XmNtopWidget = XmFrame epat_sample_window_frame;
	  XmNlabelString = T_CANCEL;
	  XmNwidth = PUSH_BUTTON_WD;
	};
	callbacks {
	  XmNactivateCallback = procedure Delete_Edit_Pattern_Dialog (EPAT_CANCEL_ID);
	  MrmNcreateCallback = procedure Create_Callback (EPAT_CANCEL_BUTTON);
	};
      };


!  **********************
!  *  Color Dialog Box  *
!  **********************
  
  object

    color_dialog_box : exported XmFormDialog {
      arguments {
	XmNdialogStyle = XmDIALOG_MODELESS;
	XmNdefaultPosition = true;
	XmNdefaultButton = XmPushButton color_dialog_dismiss_button;
	XmNdialogTitle = T_COLOR_TITLE;
	XmNunitType = XmPIXELS;
	XmNnoResize = true;
	XmNfractionBase = cdb_fb;
	XmNhorizontalSpacing = cdb_dho;
	XmNverticalSpacing = cdb_dvo;
	XmNmarginWidth = cdb_mwd;
	XmNmarginHeight = cdb_mht;
      };
      controls {
	XmFrame	color_dialog_window_frame;
	XmPushButton   color_dialog_dismiss_button;
      };
      callbacks {
	XmNhelpCallback = procedure help (PaletteDialogHelp);
      };
    };


      color_dialog_window_frame : XmFrame {
	arguments {
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNmarginWidth = cdwf_mwd;
	  XmNmarginHeight = cdwf_mht;
	  XmNshadowType = cdwf_sh_type;
	  XmNshadowThickness = cdwf_sh_thick;
	  XmNresizable = false;
	};
	controls {
	  user_defined  color_dialog_window;
	};
      };


      color_dialog_window : exported user_defined procedure WindowCreate {
	arguments {
          XmNwidth = cdw_wd;
          XmNheight = cdw_ht;
!	  XmNborderWidth = cdw_bwd;
          XmNtranslations =
	    translation_table ('~Help<Btn1Down> : Clicked_On_FG_Color()',
			       'Button1<Motion> : Drag_FG_Color()',
			       '~Help<Btn1Up> : Change_FG_Color()',
			       '<Expose> : Refresh_Color_Dialog_Window()');
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (COLOR_DIALOG_WINDOW);
	};
      };


      color_dialog_dismiss_button : exported XmPushButton {
	arguments {
	  XmNleftAttachment = XmATTACH_POSITION;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNleftPosition = cddb_adblp;
	  XmNtopWidget = XmFrame color_dialog_window_frame;
	  XmNlabelString = T_OK;
	  XmNwidth = PUSH_BUTTON_WD;
	};
	callbacks {
	  XmNactivateCallback = procedure Dismiss_Color_Dialog;
	  MrmNcreateCallback = procedure Create_Callback (COLOR_DIALOG_DISMISS_BUTTON);
	};
      };


!  *********************
!  *  Color Mix Widget *
!  *********************
  
  object

!    color_mix_dialog : exported XmFormDialog {
!      arguments {
!	XmNdefaultPosition = true;
!	XmNdialogTitle = T_COLOR_MIX_TITLE;
!      };
!      controls {
!	DXmColorMix color_mix_widget;
!      };
!    };

    color_mix_dialog : exported DXmColorMixDialog {
      arguments {
	XmNdialogTitle = T_CM_TITLE;
	XmNapplyLabelString = T_CM_APPLY_LABEL;
	XmNokLabelString = T_CM_OK_LABEL;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (COLOR_MIX_WIDGET);
	XmNcancelCallback = procedure Color_Mix_Cancel;
	XmNapplyCallback = procedure Color_Mix_Apply;
	XmNokCallback = procedure Color_Mix_OK;
	XmNhelpCallback = procedure help (MixColorDialogHelp);
      };      
    };



!  ******************************
!  *  Picture Shape Dialog Box  *
!  ******************************

  object

    pic_shape_dialog_box : exported XmFormDialog {
      arguments {
	XmNdialogStyle = XmDIALOG_MODELESS;
	XmNdefaultPosition = true;
	XmNautoUnmanage = false;
!	XmNdefaultButton = XmPushButton pic_shape_ok_push_button;
	XmNunitType = XmPIXELS;
	XmNnoResize = true;
	XmNhorizontalSpacing = psdb_hs;
	XmNverticalSpacing = psdb_vs;
	XmNmarginWidth = psdb_mwd;
	XmNmarginHeight = psdb_mht;
	XmNdialogTitle = T_PSIZE_TITLE;
	XmNcancelButton = XmPushButton pic_shape_cancel_push_button;
      };
      controls {
	XmRadioBox  pic_shape_scale_vs_crop;
	XmForm	    ps_form_1;
	XmForm	    ps_form_2;
	XmRowColumn ps_buttons_row_column;
      };
      callbacks {
	XmNhelpCallback = procedure help (PictureSizeDialogHelp);
      };
    };

      pic_shape_scale_vs_crop : exported XmRadioBox {
	arguments {
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNmarginHeight = pssvc_mht;
	  XmNmarginWidth = pssvc_mwd;
	  XmNborderWidth = pssvc_bwd;
	  XmNorientation = XmHORIZONTAL;
!	  XmNsensitive = false;
	};
	controls {
	  XmToggleButton pic_shape_crop_button;
	  XmToggleButton pic_shape_scale_button;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PS_SVC_RADIO_BOX);
	};
      };

	pic_shape_crop_button : XmToggleButton {
	  arguments {
	    XmNindicatorType = XmONE_OF_MANY;
	    XmNlabelString = T_PS_CROP_BUTTON_LABEL;
	    XmNset = true;
	  };
	  callbacks {
	    XmNvalueChangedCallback =
	      procedure Change_Resize_Crop_Or_Scale (RESIZE_CROP_ID);
	    MrmNcreateCallback = procedure Create_Callback (PS_RESIZE_CROP_TOGGLE);
	  };
	};

	pic_shape_scale_button : XmToggleButton {
	  arguments {
	    XmNindicatorType = XmONE_OF_MANY;
	    XmNlabelString = T_PS_SCALE_BUTTON_LABEL;
	  };
	  callbacks {
	    XmNvalueChangedCallback =
	      procedure Change_Resize_Crop_Or_Scale (RESIZE_SCALE_ID);
	    MrmNcreateCallback = procedure Create_Callback (PS_RESIZE_SCALE_TOGGLE);
	  };
	};

    ps_form_1 : exported XmForm {
      arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNrightAttachment = XmATTACH_FORM;
	XmNtopWidget = XmRadioBox pic_shape_scale_vs_crop;
	XmNshadowType = psf1_sh_type;
	XmNshadowThickness = psf1_sh_thick;
	XmNhorizontalSpacing = psf1_hs;
	XmNverticalSpacing = psf1_vs;
	XmNmarginWidth = psf1_mwd;
	XmNmarginHeight = psf1_mht;
      };
      controls {
	XmOptionMenu  pic_shape_option_menu;
        XmLabel	      pic_shape_width_label;
	DXmCSText     pic_shape_width_text;
	XmLabel	      pic_shape_height_label;
	DXmCSText     pic_shape_height_text;
	XmRadioBox    pic_shape_radio_box;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (PS_FORM_1);
      };
    };


      pic_shape_option_menu : exported XmOptionMenu {
	arguments {
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNlabelString = T_SIZE;
	  XmNmenuHistory = XmToggleButton page_size_toggle_button;
	  XmNmarginWidth = psom_mwd;
	};
	controls {
	  XmPulldownMenu pic_shape_pulldown_menu;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PIC_SHAPE_OPTION_MENU);
	};
      };


	pic_shape_pulldown_menu : XmPulldownMenu {
	  arguments {
	    XmNradioBehavior = true;
	  };
	  controls {
	    XmToggleButton page_size_toggle_button;
	    XmToggleButton screen_size_toggle_button;
	    XmToggleButton non_standard_size_toggle_button;
	  };
	};


	  page_size_toggle_button : exported XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNset = true;
	      XmNlabelString = T_PAGE;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (PAGE_SIZE_TOGGLE);
	      XmNvalueChangedCallback = procedure Set_Standard_Size (PAGE_ID);
	    };
	  };


	  screen_size_toggle_button : exported XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNlabelString = T_SCREEN;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (SCREEN_SIZE_TOGGLE);
	      XmNvalueChangedCallback = procedure Set_Standard_Size (SCREEN_ID);
	    };
	  };


	  non_standard_size_toggle_button : exported XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNlabelString = T_NON_STANDARD;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (NON_STANDARD_SIZE_TOGGLE);
	      XmNvalueChangedCallback = procedure Set_Standard_Size (NON_STANDARD_ID);
	    };
	  };


      pic_shape_width_label : exported XmLabel {
	arguments {
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmOptionMenu pic_shape_option_menu;
	  XmNlabelString = T_WIDTH_LABEL;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PS_WIDTH_LABEL);
	};
      };


      pic_shape_height_label : exported XmLabel {
	arguments {
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmLabel pic_shape_width_label;
	  XmNlabelString = T_HEIGHT_LABEL;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PS_HEIGHT_LABEL);
	};
      };


      pic_shape_width_text : exported DXmCSText {
	arguments {
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftAttachment = XmATTACH_WIDGET;
	  XmNtopWidget = XmOptionMenu pic_shape_option_menu;
	  XmNleftWidget = XmLabel pic_shape_height_label;
	  XmNcolumns = pswt_cols;
	  XmNrows = pswt_rows;
	  XmNresizeWidth = false;
	  XmNresizeHeight = false;
	  XmNsensitive = false;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PIC_SHAPE_WIDTH_TEXT);
	};
      };


      pic_shape_height_text : exported DXmCSText {
	arguments {
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
	  XmNtopWidget = DXmCSText pic_shape_width_text;
	  XmNleftWidget = DXmCSText pic_shape_width_text;
	  XmNleftOffset = psht_lo;
	  XmNcolumns = psht_cols;
	  XmNrows = psht_rows;
	  XmNresizeWidth = false;
	  XmNresizeHeight = false;
	  XmNsensitive = false;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PIC_SHAPE_HEIGHT_TEXT);
	};
      };


      pic_shape_radio_box : exported XmRadioBox {
        arguments {
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftAttachment = XmATTACH_WIDGET;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmOptionMenu pic_shape_option_menu;
	  XmNleftWidget = DXmCSText pic_shape_width_text;
!	  XmNleftOffset = psrb_lo;
	  XmNmarginHeight = psrb_mht;
	  XmNborderWidth = psrb_bwd;
        };
	controls {
	  XmToggleButton pixel_unit_toggle_button;
	  XmToggleButton inch_unit_toggle_button;
	  XmToggleButton centimeter_unit_toggle_button;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PS_UNITS_RADIO_BOX);
	};
      };    


	pixel_unit_toggle_button : XmToggleButton {
	  arguments {
	    XmNindicatorType = XmONE_OF_MANY;
	    XmNlabelString = T_PIXELS;
	    XmNset = true;
	  };
	  callbacks {
	    XmNvalueChangedCallback = procedure Change_Units (PIXEL_ID);
	  };
	};

	inch_unit_toggle_button : XmToggleButton {
	  arguments {
	    XmNindicatorType = XmONE_OF_MANY;
	    XmNlabelString = T_INCHES;
	  };
	  callbacks {
	    XmNvalueChangedCallback = procedure Change_Units (INCH_ID);
          };
	};

	centimeter_unit_toggle_button : XmToggleButton {
	  arguments {
	    XmNindicatorType = XmONE_OF_MANY;
	    XmNlabelString = T_CENTIMETERS;
	  };
	  callbacks {
	    XmNvalueChangedCallback = procedure Change_Units (CENTIMETER_ID);
	  };
	};


    ps_form_2 : exported XmForm {
      arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNrightAttachment = XmATTACH_FORM;
	XmNtopWidget = XmForm ps_form_1;
	XmNshadowType = psf2_sh_type;
	XmNshadowThickness = psf2_sh_thick;
	XmNhorizontalSpacing = psf2_hs;
	XmNverticalSpacing = psf2_vs;
	XmNmarginWidth = psf2_mwd;
	XmNmarginHeight = psf2_mht;
      };
      controls {
	XmOptionMenu  resolution_option_menu;
	XmLabel       pic_shape_dpi_label;
	DXmCSText     pic_shape_resolution_text;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (PS_FORM_2);
      };
    };


      resolution_option_menu : exported XmOptionMenu {
	arguments {
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNlabelString = T_RESOLUTION;
	  XmNmenuHistory = XmToggleButton res_75_toggle_button;
	  XmNmarginWidth = rom_mwd;
	};
	controls {
	  XmPulldownMenu resolution_pulldown_menu;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (RESOLUTION_OPTION_MENU);
	};
      };


	resolution_pulldown_menu : XmPulldownMenu {
	  arguments {
	    XmNradioBehavior = true;
	  };
	  controls {
	    XmToggleButton res_75_toggle_button;
	    XmToggleButton res_100_toggle_button;
	    XmToggleButton res_300_toggle_button;
	    XmToggleButton res_non_standard_toggle_button;
	  };
	};


	  res_75_toggle_button : exported XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNset = true;
	      XmNlabelString = T_75_DPI;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (RES_75_TOGGLE);
	      XmNvalueChangedCallback = procedure Set_Resolution (RES_75_ID);
	    };
	  };


	  res_100_toggle_button : exported XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNlabelString = T_100_DPI;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (RES_100_TOGGLE);
	      XmNvalueChangedCallback = procedure Set_Resolution (RES_100_ID);
	    };
	  };


	  res_300_toggle_button : exported XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNlabelString = T_300_DPI;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (RES_300_TOGGLE);
	      XmNvalueChangedCallback = procedure Set_Resolution (RES_300_ID);
	    };
	  };


	  res_non_standard_toggle_button : exported XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNlabelString = T_NON_STANDARD;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (RES_NON_STANDARD_TOGGLE);
	      XmNvalueChangedCallback = procedure Set_Resolution (RES_NON_STANDARD_ID);
	    };
	  };


      pic_shape_dpi_label : exported XmLabel {
	arguments {
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmOptionMenu resolution_option_menu;
	  XmNlabelString = T_DOTS_PER_INCH;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PS_RESOLUTION_LABEL);
	};
      };


      pic_shape_resolution_text : exported DXmCSText {
	arguments {
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftAttachment = XmATTACH_WIDGET;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmOptionMenu resolution_option_menu;
	  XmNleftWidget = XmLabel pic_shape_dpi_label;
	  XmNcolumns = psrt_cols;
	  XmNrows = psrt_rows;
	  XmNmaxLength = psrt_ml;
	  XmNresizeWidth = false;
	  XmNresizeHeight = false;
	  XmNsensitive = false;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (RESOLUTION_TEXT);
	  XmNactivateCallback = procedure Change_Resolution;
	};
      };


      ps_buttons_row_column : exported XmRowColumn {
	arguments {
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmForm ps_form_2;
	  XmNorientation = XmHORIZONTAL;
	  XmNentryAlignment = XmALIGNMENT_CENTER;
	  XmNpacking = XmPACK_COLUMN;
	  XmNmarginWidth = psbrc_mwd;
	  XmNmarginHeight = psbrc_mht;
	};
	controls {
	  XmPushButton  pic_shape_ok_push_button;
	  XmPushButton  pic_shape_apply_push_button;
	  XmPushButton  pic_shape_cancel_push_button;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PS_BUTTONS_ROW_COLUMN);
	};
      };

      pic_shape_ok_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_OK;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PS_OK_BUTTON);
	  XmNactivateCallback = procedure Set_Picture_Size (PIC_SHAPE_OK_ID);
	};
      };


      pic_shape_apply_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_APPLY;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PS_APPLY_BUTTON);
	  XmNactivateCallback = procedure Set_Picture_Size (PIC_SHAPE_APPLY_ID);
	};
      };


      pic_shape_cancel_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_CANCEL;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PS_CANCEL_BUTTON);
	  XmNactivateCallback = procedure Set_Picture_Size (PIC_SHAPE_CANCEL_ID);
	};
      };


!  **********************
!  *  Scale Dialog Box  *
!  **********************

  object

    scale_dialog_box : exported XmFormDialog {
      arguments {
	XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	XmNdefaultPosition = true;
	XmNautoUnmanage = false;
	XmNdefaultButton = XmPushButton scale_ok_push_button;
	XmNdialogTitle = T_SCALE_TITLE;
	XmNunitType = XmPIXELS;
	XmNnoResize = true;
	XmNhorizontalSpacing = sdb_dho;
	XmNverticalSpacing = sdb_dvo;
	XmNmarginWidth = sdb_mwd;
	XmNmarginHeight = sdb_mht;
	XmNcancelButton = XmPushButton scale_cancel_push_button;
      };
      controls {
	XmForm scale_form_1;
	XmForm scale_form_2;
	XmRowColumn scale_buttons_row_column;
      };
      callbacks {
	XmNhelpCallback = procedure help (ScaleDialogHelp);
      };
    };

    scale_form_1 : XmForm {
      arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_FORM;
	XmNshadowType = sf1_sh_type;
	XmNshadowThickness = sf1_sh_thick;
	XmNhorizontalSpacing = sf1_hs;
	XmNverticalSpacing = sf1_vs;
	XmNmarginWidth = sf1_mwd;
	XmNmarginHeight = sf1_mht;
      };
      controls {
	XmRowColumn scale_x_row_column;
	XmLabel scale_x_by_label;
	DXmCSText scale_x_by_text;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (SCALE_FORM_1);
      };
    };

    scale_x_row_column : XmRowColumn {
      arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNorientation = XmVERTICAL;
	XmNnumColumns = sxrc_cols;
	XmNpacking = XmPACK_COLUMN;
	XmNmarginWidth = sxrc_mwd;
	XmNmarginHeight = sxrc_mht;
	XmNspacing = sxrc_sp;
	XmNentryAlignment = XmALIGNMENT_CENTER;
      };
      controls {
	XmPushButton   scale_x_25_push_button;
	XmPushButton   scale_x_50_push_button;
	XmPushButton   scale_x_100_push_button;
	XmPushButton   scale_x_200_push_button;
	XmPushButton   scale_x_300_push_button;
	XmPushButton   scale_x_400_push_button;
      };
    };

      scale_x_25_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_25PERCENT;
	  XmNwidth = PUSH_BUTTON_WD;
	  XmNrecomputeSize = false;
	};
	callbacks {
	  XmNactivateCallback = procedure Scale_Size (SCALE_X_25_ID);
	};
      };


      scale_x_50_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_50PERCENT;
	  XmNwidth = PUSH_BUTTON_WD;
	  XmNrecomputeSize = false;
	};
	callbacks {
	  XmNactivateCallback = procedure Scale_Size (SCALE_X_50_ID);
	};
      };

      scale_x_100_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_100PERCENT;
	  XmNwidth = PUSH_BUTTON_WD;
	  XmNrecomputeSize = false;
	}; 
	callbacks {
	  XmNactivateCallback = procedure Scale_Size (SCALE_X_100_ID);
	};
      };

      scale_x_200_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_200PERCENT;
	  XmNwidth = PUSH_BUTTON_WD;
	  XmNrecomputeSize = false;
	}; 
	callbacks {
	  XmNactivateCallback = procedure Scale_Size (SCALE_X_200_ID);
	};
      };

      scale_x_300_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_300PERCENT;
	  XmNwidth = PUSH_BUTTON_WD;
	  XmNrecomputeSize = false;
	};
	callbacks {
	  XmNactivateCallback = procedure Scale_Size (SCALE_X_300_ID);
	};
      };

      scale_x_400_push_button : XmPushButton {
	arguments {
          XmNlabelString = T_400PERCENT;
	  XmNwidth = PUSH_BUTTON_WD;
	  XmNrecomputeSize = false;
	};
	callbacks {
	  XmNactivateCallback = procedure Scale_Size (SCALE_X_400_ID);
	};
      };

      scale_x_by_label : XmLabel {
	arguments {
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNtopWidget = XmRowColumn scale_x_row_column;
	  XmNlabelString = T_SCALE_X_BY;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (SCALE_X_BY_LABEL);
	};
      };


      scale_x_by_text : exported DXmCSText {
	arguments {
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmRowColumn scale_x_row_column;
	  XmNcolumns = sxbt_cols;
	  XmNrows = sxbt_rows;
	  XmNmaxLength = sxbt_ml;
	  XmNresizeWidth = false;
	  XmNresizeHeight = false;
	  XmNvalue = T_200;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (SCALE_X_BY_TEXT);
	};
      };

    scale_form_2 : XmForm {
      arguments {
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNtopAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNleftWidget = XmForm scale_form_1;
	XmNshadowType = sf2_sh_type;
	XmNshadowThickness = sf2_sh_thick;
	XmNhorizontalSpacing = sf2_hs;
	XmNverticalSpacing = sf2_vs;
	XmNmarginWidth = sf2_mwd;
	XmNmarginHeight = sf2_mht;
      };
      controls {
	XmRowColumn scale_y_row_column;
	XmLabel scale_y_by_label;
	DXmCSText scale_y_by_text;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (SCALE_FORM_2);
      };
    };

    scale_y_row_column : XmRowColumn {
      arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNorientation = XmVERTICAL;
	XmNnumColumns = syrc_cols;
	XmNpacking = XmPACK_COLUMN;
	XmNmarginWidth = syrc_mwd;
	XmNmarginHeight = syrc_mht;
	XmNspacing = syrc_sp;
	XmNentryAlignment = XmALIGNMENT_CENTER;
      };
      controls {
	XmPushButton   scale_y_25_push_button;
	XmPushButton   scale_y_50_push_button;
	XmPushButton   scale_y_100_push_button;
	XmPushButton   scale_y_200_push_button;
	XmPushButton   scale_y_300_push_button;
	XmPushButton   scale_y_400_push_button;
      };
    };

      scale_y_25_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_25PERCENT;
	  XmNwidth = PUSH_BUTTON_WD;
	  XmNrecomputeSize = false;
	};
	callbacks {
	  XmNactivateCallback = procedure Scale_Size (SCALE_Y_25_ID);
	};
      };

      scale_y_50_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_50PERCENT;
	  XmNwidth = PUSH_BUTTON_WD;
	  XmNrecomputeSize = false;
	};
	callbacks {
	  XmNactivateCallback = procedure Scale_Size (SCALE_Y_50_ID);
	};
      };

      scale_y_100_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_100PERCENT;
	  XmNwidth = PUSH_BUTTON_WD;
	  XmNrecomputeSize = false;
	}; 
	callbacks {
	  XmNactivateCallback = procedure Scale_Size (SCALE_Y_100_ID);
	};
      };

      scale_y_200_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_200PERCENT;
	  XmNwidth = PUSH_BUTTON_WD;
	  XmNrecomputeSize = false;
	}; 
	callbacks {
	  XmNactivateCallback = procedure Scale_Size (SCALE_Y_200_ID);
	};
      };

      scale_y_300_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_300PERCENT;
	  XmNwidth = PUSH_BUTTON_WD;
	  XmNrecomputeSize = false;
	};
	callbacks {
	  XmNactivateCallback = procedure Scale_Size (SCALE_Y_300_ID);
	};
      };

      scale_y_400_push_button : XmPushButton {
	arguments {
          XmNlabelString = T_400PERCENT;
	  XmNwidth = PUSH_BUTTON_WD;
	  XmNrecomputeSize = false;
	};
	callbacks {
	  XmNactivateCallback = procedure Scale_Size (SCALE_Y_400_ID);
	};
      };

      scale_y_by_label : XmLabel {
	arguments {
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNtopWidget = XmRowColumn scale_y_row_column;
	  XmNlabelString = T_SCALE_Y_BY;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (SCALE_Y_BY_LABEL);
	};
      };


      scale_y_by_text : exported DXmCSText {
	arguments {
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmRowColumn scale_y_row_column;
	  XmNcolumns = sybt_cols;
	  XmNrows = sybt_rows;
	  XmNmaxLength = sybt_ml;
	  XmNresizeWidth = false;
	  XmNresizeHeight = false;
	  XmNvalue = T_200;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (SCALE_Y_BY_TEXT);
	};
      };


      scale_buttons_row_column : exported XmRowColumn {
	arguments {
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmForm scale_form_1;
	  XmNorientation = XmHORIZONTAL;
	  XmNentryAlignment = XmALIGNMENT_CENTER;
	  XmNpacking = XmPACK_COLUMN;
	  XmNmarginWidth = sbrc_mwd;
	  XmNmarginHeight = sbrc_mht;
	};
	controls {
	  XmPushButton   scale_ok_push_button;
	  XmPushButton   scale_apply_push_button;
	  XmPushButton   scale_cancel_push_button;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (SCALE_BUTTONS_ROW_COLUMN);
	};
      };

      scale_ok_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_OK;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (SCALE_OK_BUTTON);
	  XmNactivateCallback = procedure Scale_Size (SCALE_OK_ID);
	};
      };


      scale_apply_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_APPLY;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (SCALE_APPLY_BUTTON);
	  XmNactivateCallback = procedure Scale_Size (SCALE_APPLY_ID);
	};
      };


      scale_cancel_push_button : XmPushButton {
	arguments {
	  XmNlabelString = T_CANCEL;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (SCALE_CANCEL_BUTTON);
	  XmNactivateCallback = procedure Scale_Size (SCALE_CANCEL_ID);
	};
      };


!  *********************
!  *  Zoom Dialog Box  *
!  *********************

  object

    zoom_dialog_box : exported XmFormDialog {
      arguments {
	XmNdialogTitle = T_ZOOM;
!	XmNx = zdb_x;
!	XmNy = zdb_y;
!	XmNwidth = zdb_wd;
!	XmNheight = zdb_ht;
	XmNdialogStyle = XmDIALOG_MODELESS;
	XmNnoResize = false;
	XmNresizePolicy = XmRESIZE_ANY;
	XmNdefaultPosition = false;
	XmNmarginWidth = zdb_mwd;
	XmNmarginHeight = zdb_mht;
	XmNunitType = zdb_units;
	XmNtranslations =
	  translation_table ('<Configure> : Configure_Window()');
      };
      controls {
        user_defined zoom_window;
      };
!      callbacks {
!	XmNhelpCallback = procedure help (ZoomDialogHelp);
!      };
    };


      zoom_window : exported user_defined procedure WindowCreate {
	arguments {
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNbottomAttachment = XmATTACH_FORM;
!	  XmNwidth = zw_wd;
!	  XmNheight = zw_ht;
	  XmNborderWidth = zw_bwd;
!	  XmNbackground = window_bg;
	  XmNtranslations = zoom_translation_table;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (ZOOM_WINDOW);
	};
      };  


!  ****************************
!  *  Default Question Dialog *
!  ****************************

object 
    default_question_dialog : XmFormDialog {
      arguments {
	XmNdefaultPosition = true;
	XmNnoResize = true;
	XmNautoUnmanage = false;
	XmNdialogTitle = T_QUESTION_BOX_TITLE;      
	XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	XmNhorizontalSpacing = dqd_hs;
	XmNverticalSpacing = dqd_vs;
        XmNdefaultButton = XmPushButton dq_yes_button;
        XmNcancelButton = XmPushButton dq_cancel_button;
      };
      controls {
	XmLabel dq_pixmap;
	XmLabel dq_label;
	XmSeparator dq_margin_separator1;
	XmSeparator dq_separator;
	XmRowColumn dq_buttons_row_column;
	XmSeparator dq_margin_separator2;
      };
    };              

    dq_pixmap : XmLabel {
      arguments {
	XmNlabelType = XmPIXMAP;
	XmNlabelPixmap = question_mark_icon;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_FORM;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (DQ_PIXMAP);
      };
    };
    
    dq_label : XmLabel {
      arguments {
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel dq_pixmap;
	XmNleftWidget = XmLabel dq_pixmap;
	XmNtopOffset = dql_to;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (DQ_LABEL);
      };
    };
    
    dq_margin_separator1 : XmSeparator {
      arguments {
	XmNseparatorType = XmNO_LINE;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel dq_label;
      };
    };

    dq_separator : XmSeparator {
      arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = dq_pixmap;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = dqs_lo;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = dqs_ro;
      };
    };

    dq_buttons_row_column : exported XmRowColumn {
      arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNrightAttachment = XmATTACH_FORM;
	XmNtopWidget = dq_separator;
	XmNorientation = XmHORIZONTAL;
	XmNentryAlignment = XmALIGNMENT_CENTER;
	XmNpacking = XmPACK_COLUMN;
	XmNmarginWidth = dqbrc_mwd;
	XmNmarginHeight = dqbrc_mht;
	};
      controls {
	XmPushButton dq_yes_button;
	XmPushButton dq_no_button;
	XmPushButton dq_cancel_button;
	XmPushButton dq_help_button;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (DQ_BUTTONS_ROW_COLUMN);
      };
    };

    dq_yes_button : XmPushButton {
      arguments {
	XmNlabelString = T_YES;
	XmNdefaultButtonShadowThickness = dqyb_dbst;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (DQ_YES_BUTTON);
        XmNactivateCallback = procedure Question_Reply (DQ_YES_ID);
      };
    };

    dq_no_button : XmPushButton {
      arguments {
	XmNlabelString = T_NO;
	XmNdefaultButtonShadowThickness = dqnb_dbst;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (DQ_NO_BUTTON);
        XmNactivateCallback = procedure Question_Reply (DQ_NO_ID);
      };
    };

    dq_cancel_button : XmPushButton {
      arguments {
	XmNlabelString = T_CANCEL;
	XmNdefaultButtonShadowThickness = dqcb_dbst;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (DQ_CANCEL_BUTTON);
        XmNactivateCallback = procedure Question_Reply (DQ_CANCEL_ID);
      };
    };

    dq_help_button : XmPushButton {
      arguments {
	XmNlabelString = T_HELP;
	XmNdefaultButtonShadowThickness = dqhb_dbst;
      };
      callbacks {
	MrmNcreateCallback = procedure Create_Callback (DQ_HELP_BUTTON);
        XmNactivateCallback = procedure Question_Reply (DQ_HELP_ID);
      };
    };

    dq_margin_separator2 : XmSeparator {
      arguments {
	XmNseparatorType = XmNO_LINE;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRowColumn dq_buttons_row_column;
      };
    };


!  **************************
!  *  AI Error Caution Box  *
!  **************************

  object

    ai_error_caution_box : XmQuestionDialog {
      arguments {
	XmNnoResize = true;
	XmNdialogTitle = T_QUESTION_BOX_TITLE;
!	arguments caution_box_args;
	XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	XmNdefaultPosition = true;
	XmNokLabelString = T_YES;
	XmNcancelLabelString = T_NO;
      };
      callbacks {
	XmNokCallback = procedure AI_Error_Exit_Reply (AI_ERROR_EXIT_YES_ID);
	XmNcancelCallback = procedure AI_Error_Exit_Reply (AI_ERROR_EXIT_NO_ID);
      };
    };


!  *********************************
!  *  Color Mix Apply Caution Box  *
!  *********************************

  object

    color_mix_apply_cb : XmQuestionDialog {
      arguments {
	XmNnoResize = true;
	XmNdialogTitle = T_QUESTION_BOX_TITLE;
!	arguments caution_box_args;
	XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
	XmNdefaultPosition = true;
	XmNokLabelString = T_YES;
	XmNcancelLabelString = T_NO;
      };
      callbacks {
	XmNokCallback = procedure Color_Mix_Apply_Reply (COLOR_MIX_APPLY_YES_ID);
	XmNcancelCallback = procedure Color_Mix_Apply_Reply (COLOR_MIX_APPLY_NO_ID);
      };
    };


!  **********************
!  *  Main Message Box  *
!  **********************

  object

    main_message_box : XmInformationDialog {
      arguments {
	XmNnoResize = true;
	XmNdialogTitle = T_MESSAGE_BOX_TITLE;
	XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
!	arguments message_box_args;
	XmNdefaultPosition = true;
	XmNautoUnmanage = false;
      };
      callbacks {
	XmNokCallback = procedure Unmap_Message_Box;
      };
    };



!  **********************
!  *  Print Dialog Box  *
!  **********************
  
  object

    print_2_dialog_box : DXmPrintDialog {
      arguments {
	XmNdialogTitle = T_PRINT_2_TITLE;
        XmNdefaultPosition = false;
	XmNx = prdb2_x;
	XmNy = prdb2_y;
	DXmNprintFormatList = string_table(compound_string("PostScript(R)"));
	DXmNprintFormatCount = 1;
	DXmNsuppressOptionsMask = 1;
	XmNnoResize = true;
      };
      callbacks {
	XmNokCallback = procedure Print_2_File_Callback (PRINT_2_OK_ID);
	XmNcancelCallback = procedure Print_2_File_Callback (PRINT_2_CANCEL_ID);
      };
    };


    print_dialog_box : exported XmFormDialog {
      arguments {
	XmNdialogStyle = XmDIALOG_MODELESS;
	XmNautoUnmanage = false;
	XmNdefaultPosition = true;
        XmNdefaultButton = XmPushButton pr_ok_button;
	XmNdialogTitle = T_PRINT_TITLE;
	XmNunitType = XmPIXELS;
	XmNresizePolicy = XmRESIZE_ANY;
	XmNnoResize = true;
!	XmNfractionBase = prdb_fb;
	XmNhorizontalSpacing = prdb_dho;
	XmNverticalSpacing = prdb_dvo;
	XmNmarginWidth = prdb_mwd;
	XmNmarginHeight = prdb_mht;
	XmNcancelButton = XmPushButton pr_cancel_button;
      };
      controls {
	XmLabel pr_filename_label;
	DXmCSText pr_filename_text;
	XmForm	pr_form_1;
	XmForm	pr_form_2;
	XmRowColumn pr_buttons_row_column;
      };
      callbacks {
	XmNhelpCallback = procedure help (PrintDialogHelp);
      };
    };

  
      pr_filename_label : XmLabel {
	arguments {
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNlabelString = T_PR_FILENAME;
	};
      };


      pr_filename_text : exported DXmCSText {
	arguments {
	  XmNleftAttachment = XmATTACH_WIDGET;
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNleftWidget = XmLabel pr_filename_label;
!	  XmNcolumns = prft_cols;
!	  XmNrows = prft_rows;
	  XmNresizeHeight = false;
	  XmNresizeWidth = false;
!	  XmNmaxLength = prft_ml;
!	  XmNvalue = "";
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_FILENAME_TEXT);
	};
      };


      pr_form_1 : exported XmForm {
	arguments {
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNtopWidget = DXmCSText pr_filename_text;
	  XmNshadowType = prf1_sh_type;
	  XmNshadowThickness = prf1_sh_thick;
	  XmNhorizontalSpacing = prf1_hs;
	  XmNverticalSpacing = prf1_vs;
	  XmNmarginWidth = prf1_mwd;
	  XmNmarginHeight = prf1_mht;
	};
	controls {
	  XmLabel pr_format_label;
	  XmLabel pr_device_label;
	  XmLabel pr_h_align_label;
	  XmLabel pr_v_align_label;
	  XmLabel pr_ar_label;
	  XmOptionMenu pr_format_option_menu;
	  XmOptionMenu pr_device_option_menu;
	  XmOptionMenu pr_h_align_option_menu;
	  XmOptionMenu pr_v_align_option_menu;
	  XmOptionMenu pr_ar_option_menu;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_FORM_1);
	};
      };

      pr_format_label : exported XmLabel {
	arguments {
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNtopWidget = XmOptionMenu pr_format_option_menu;
	  XmNlabelString = T_PR_FORMAT;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_FORMAT_LABEL);
	};
      };

      pr_device_label : XmLabel {
	arguments {
	  XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftOffset = prdl_lo;
	  XmNtopWidget = XmLabel pr_format_label;
	  XmNleftWidget = XmLabel pr_format_label;
	  XmNlabelString = T_PR_DEVICE;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_DEVICE_LABEL);
	};
      };

      pr_h_align_label : XmLabel {
	arguments {
	  XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftOffset = prhal_lo;
	  XmNtopWidget = XmLabel pr_device_label;
	  XmNleftWidget = XmLabel pr_format_label;
	  XmNlabelString = T_PR_H_ALIGNMENT;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_H_ALIGN_LABEL);
	};
      };

      pr_v_align_label : XmLabel {
	arguments {
	  XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftOffset = prval_lo;
	  XmNtopWidget = XmLabel pr_h_align_label;
	  XmNleftWidget = XmLabel pr_format_label;
	  XmNlabelString = T_PR_V_ALIGNMENT;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_V_ALIGN_LABEL);
	};
      };

      pr_ar_label : XmLabel {
	arguments {
	  XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftOffset = prarl_lo;
	  XmNtopWidget = XmLabel pr_v_align_label;
	  XmNleftWidget = XmLabel pr_format_label;
	  XmNlabelString = T_PR_ASPECT_RATIO;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_AR_LABEL);
	};
      };


      pr_format_option_menu : exported XmOptionMenu {
	arguments {
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNleftAttachment = XmATTACH_WIDGET;
	  XmNleftWidget = XmLabel pr_h_align_label;
	  XmNmenuHistory = XmToggleButton pr_ps_toggle;
	  XmNmarginWidth = prfom_mwd;
	};
	controls {
	  XmPulldownMenu pr_format_pulldown_menu;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_FORMAT_OPTION_MENU);
	};
      };

	pr_format_pulldown_menu : XmPulldownMenu {
	  arguments {
	    XmNradioBehavior = true;
	  };
	  controls {
	    XmToggleButton pr_ps_toggle;
	    XmToggleButton pr_sixel_toggle;
	  };
	};


	  pr_ps_toggle : XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNset = true;
	      XmNlabelString = T_PR_POSTSCRIPT;
	    };
	    callbacks {
	      XmNvalueChangedCallback =
		procedure Change_Pr_Output_Format (PR_PS_FORMAT);
	    };
	  };


	  pr_sixel_toggle : XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNlabelString = T_PR_SIXEL;
	    };
	    callbacks {
	      XmNvalueChangedCallback =
		procedure Change_Pr_Output_Format (PR_SIXEL_FORMAT);
	    };
	  };


      pr_device_option_menu : exported XmOptionMenu {
	arguments {
	  XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNleftOffset = prdom_lo;
	  XmNleftWidget = XmOptionMenu pr_format_option_menu;
	  XmNtopWidget = XmOptionMenu pr_format_option_menu;
	  XmNmenuHistory = XmToggleButton pr_color_device_toggle;
	  XmNmarginWidth = prdom_mwd;
	};
	controls {
	  XmPulldownMenu pr_device_pulldown_menu;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_DEVICE_OPTION_MENU);
	};
      };


	pr_device_pulldown_menu : XmPulldownMenu {
	  arguments {
	    XmNradioBehavior = true;
	  };
	  controls {
	    XmToggleButton pr_color_device_toggle;
	    XmToggleButton pr_mono_device_toggle;
	  };
	};


	  pr_color_device_toggle : XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNset = true;
	      XmNlabelString = T_PR_COLOR;
	    };
	    callbacks {
	      XmNvalueChangedCallback =
		procedure Change_Pr_Output_Device (PR_COLOR_DEVICE);
	    };
	  };


	  pr_mono_device_toggle : XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNlabelString = T_PR_MONOCHROME;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (PR_MONO_DEVICE_TOGGLE);
	      XmNvalueChangedCallback =
		procedure Change_Pr_Output_Device (PR_MONO_DEVICE);
	    };
	  };


      pr_h_align_option_menu : exported XmOptionMenu {
	arguments {
	  XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftOffset = prhaom_lo;
	  XmNleftWidget = XmOptionMenu pr_format_option_menu;
	  XmNtopWidget = XmOptionMenu pr_device_option_menu;
	  XmNmenuHistory = XmToggleButton pr_h_left_toggle;
	  XmNmarginWidth = prhaom_mwd;
	};
	controls {
	  XmPulldownMenu pr_h_align_pulldown_menu;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_H_ALIGN_OPTION_MENU);
	};
      };


	pr_h_align_pulldown_menu : XmPulldownMenu {
	  arguments {
	    XmNradioBehavior = true;
	  };
	  controls {
	    XmToggleButton pr_h_left_toggle;
	    XmToggleButton pr_h_center_toggle;
	    XmToggleButton pr_h_right_toggle;
	  };
	};


	  pr_h_left_toggle : XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNset = true;
	      XmNlabelString = T_PR_H_LEFT;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (PR_ALIGN_LEFT_TOGGLE);
	      XmNvalueChangedCallback = procedure Change_Pr_H_Alignment (JUSTIFY_LEFT);
	    };
	  };


	  pr_h_center_toggle : XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNlabelString = T_PR_H_CENTER;
	    };
	    callbacks {
	      XmNvalueChangedCallback =
		procedure Change_Pr_H_Alignment (CENTER_HORIZONTAL);
	    };
	  };


	  pr_h_right_toggle : XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNlabelString = T_PR_H_RIGHT;
	    };
	    callbacks {
	      XmNvalueChangedCallback = procedure Change_Pr_H_Alignment (JUSTIFY_RIGHT);
	    };
	  };


      pr_v_align_option_menu : XmOptionMenu {
	arguments {
	  XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNleftOffset = prvaom_lo;
	  XmNleftWidget = XmOptionMenu pr_format_option_menu;
	  XmNtopWidget = XmOptionMenu pr_h_align_option_menu;
	  XmNmenuHistory = XmToggleButton pr_v_top_toggle;
	  XmNmarginWidth = prvaom_mwd;
	};
	controls {
	  XmPulldownMenu pr_v_align_pulldown_menu;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_V_ALIGN_OPTION_MENU);
	};
      };


	pr_v_align_pulldown_menu : XmPulldownMenu {
	  arguments {
	    XmNradioBehavior = true;
	  };
	  controls {
	    XmToggleButton pr_v_top_toggle;
	    XmToggleButton pr_v_center_toggle;
	    XmToggleButton pr_v_bottom_toggle;
	  };
	};


	  pr_v_top_toggle : XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNset = true;
	      XmNlabelString = T_PR_V_TOP;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (PR_ALIGN_TOP_TOGGLE);
	      XmNvalueChangedCallback = procedure Change_Pr_V_Alignment (JUSTIFY_TOP);
	    };
	  };


	  pr_v_center_toggle : XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNlabelString = T_PR_V_CENTER;
	    };
	    callbacks {
	      XmNvalueChangedCallback = procedure Change_Pr_V_Alignment (CENTER_VERTICAL);
	    };
	  };


	  pr_v_bottom_toggle : XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNlabelString = T_PR_V_BOTTOM;
	    };
	    callbacks {
	      XmNvalueChangedCallback = procedure Change_Pr_V_Alignment (JUSTIFY_BOTTOM);
	    };
	  };


      pr_ar_option_menu : XmOptionMenu {
	arguments {
!	  XmNsensitive = false;
	  XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNleftOffset = prarom_lo;
	  XmNleftWidget = XmOptionMenu pr_format_option_menu;
	  XmNtopWidget = XmOptionMenu pr_v_align_option_menu;
	  XmNmenuHistory = XmToggleButton pr_ar_1_1_toggle;
	  XmNmarginWidth = prarom_mwd;
	};
	controls {
	  XmPulldownMenu pr_ar_pulldown_menu;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_AR_OPTION_MENU);
	};
      };

	pr_ar_pulldown_menu : XmPulldownMenu {
	  arguments {
	    XmNradioBehavior = true;
	  };
	  controls {
	    XmToggleButton pr_ar_1_1_toggle;
	    XmToggleButton pr_ar_2_1_toggle;
	  };
	};

	  pr_ar_1_1_toggle : XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNset = true;
	      XmNlabelString = T_PR_1_TO_1;
	    };
	    callbacks {
	      XmNvalueChangedCallback = procedure Change_Aspect_Ratio (ASPECT_1_TO_1_ID);
	      MrmNcreateCallback = procedure Create_Callback (PR_AR_1_TO_1_TOGGLE);
	    };
	  };


	  pr_ar_2_1_toggle : XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNlabelString = T_PR_2_TO_1;
	    };
	    callbacks {
	      XmNvalueChangedCallback = procedure Change_Aspect_Ratio (ASPECT_2_TO_1_ID);
	    };
	  };


      pr_form_2 : XmForm {
	arguments {
	  XmNleftAttachment = XmATTACH_WIDGET;
	  XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNtopOffset = prf2_to;
	  XmNtopWidget = XmForm pr_form_1;
	  XmNleftWidget = XmForm pr_form_1;
	  XmNshadowType = prf2_sh_type;
	  XmNshadowThickness = prf2_sh_thick;
	  XmNhorizontalSpacing = prf2_hs;
	  XmNverticalSpacing = prf2_vs;
	  XmNmarginWidth = prf2_mwd;
	  XmNmarginHeight = prf2_mht;
	};
	controls {
	  XmRadioBox pr_send_to_radio_box;
	  XmOptionMenu pr_printers_option_menu;
	};
      };


      pr_send_to_radio_box : exported XmRadioBox {
	arguments {
	  XmNleftAttachment = XmATTACH_FORM;
	  XmNtopAttachment = XmATTACH_FORM;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNborderWidth = prstrb_bwd;
	  XmNorientation = XmVERTICAL;
	  XmNradioAlwaysOne = true;
	  XmNmenuHistory = XmToggleButton pr_send_to_printer_toggle;
	};
	controls {
	  XmToggleButton pr_send_to_printer_toggle;
	  XmToggleButton pr_send_to_file_toggle;
	  XmToggleButton pr_send_to_both_toggle;
	};

	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_SEND_TO_RADIO_BOX);
	};
      };


	pr_send_to_printer_toggle : XmToggleButton {
	  arguments {
	    XmNindicatorType = XmONE_OF_MANY;
	    XmNlabelString = T_PR_SEND_TO_PRINTER;
	    XmNset = true;
	  };
	  callbacks {
	    XmNvalueChangedCallback = procedure Change_Pr_Send_To (PR_SEND_TO_PRINTER);
	    MrmNcreateCallback = procedure Create_Callback (PR_SEND_TO_PRINTER_TOGGLE);
	  };
	};


	pr_send_to_file_toggle : XmToggleButton {
	  arguments {
	    XmNindicatorType = XmONE_OF_MANY;
	    XmNlabelString = T_PR_SEND_TO_FILE;
	  };
	  callbacks {
	    XmNvalueChangedCallback = procedure Change_Pr_Send_To (PR_SEND_TO_FILE);
	    MrmNcreateCallback = procedure Create_Callback (PR_SEND_TO_FILE_TOGGLE);
	  };
	};


	pr_send_to_both_toggle : XmToggleButton {
	  arguments {
	    XmNindicatorType = XmONE_OF_MANY;
	    XmNlabelString = T_PR_SEND_TO_BOTH;
	  };
	  callbacks {
	    XmNvalueChangedCallback = procedure Change_Pr_Send_To (PR_SEND_TO_BOTH);
	    MrmNcreateCallback = procedure Create_Callback (PR_SEND_TO_BOTH_TOGGLE);
	  };
	};


      pr_printers_option_menu : exported XmOptionMenu {
	arguments {
	  XmNleftAttachment = XmATTACH_WIDGET;
	  XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNtopOffset = prpom_to;
	  XmNleftWidget = XmRadioBox pr_send_to_radio_box;
	  XmNtopWidget = XmRadioBox pr_send_to_radio_box;
	  XmNlabelString = T_NULL_STRING;
	  XmNmenuHistory = XmToggleButton pr_dummy_toggle;
	  XmNmarginWidth = prpom_mwd;
	};
	controls {
	  XmPulldownMenu pr_printers_pulldown_menu;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_PRINTERS_OPTION_MENU);
	};
      };

	pr_printers_pulldown_menu : XmPulldownMenu {
	  arguments {
	    XmNradioBehavior = true;
	  };
	  controls {
	    XmToggleButton pr_dummy_toggle;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure Create_Callback (PR_PRINTERS_PULLDOWN_MENU);
	  };
	};

	  pr_dummy_toggle : XmToggleButton widget {
	    arguments {
	      XmNindicatorOn = false;
	      XmNset = true;
	      XmNlabelString = T_BLANK_SPACE;
	    };
	    callbacks {
	      MrmNcreateCallback = procedure Create_Callback (PR_DUMMY_TOGGLE);
	    };
	  };


      pr_buttons_row_column : exported XmRowColumn {
	arguments {
	  XmNleftAttachment = XmATTACH_WIDGET;
!	  XmNtopAttachment = XmATTACH_WIDGET;
	  XmNrightAttachment = XmATTACH_FORM;
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNleftWidget = XmForm pr_form_1;
!	  XmNtopWidget = XmForm pr_form_1;
	  XmNorientation = XmHORIZONTAL;
	  XmNentryAlignment = XmALIGNMENT_CENTER;
	  XmNpacking = XmPACK_COLUMN;
	  XmNmarginWidth = prbrc_mwd;
	  XmNmarginHeight = prbrc_mht;
	};
	controls {
	  XmPushButton pr_ok_button;
	  XmPushButton pr_apply_button;
	  XmPushButton pr_options_button;
	  XmPushButton pr_cancel_button;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_BUTTONS_ROW_COLUMN);
	};
      };

      pr_ok_button : exported XmPushButton {
	arguments {
	  XmNlabelString = T_OK;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_OK_BUTTON);
	  XmNactivateCallback = procedure Print_File_Callback (PRINT_OK_ID);
	};
      };


      pr_apply_button : exported XmPushButton {
	arguments {
	  XmNlabelString = T_APPLY;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_APPLY_BUTTON);
	  XmNactivateCallback = procedure Print_File_Callback (PRINT_APPLY_ID);
	};
      };


      pr_options_button : exported XmPushButton {
	arguments {
	  XmNlabelString = T_OPTIONS_DOT;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_OPTIONS_BUTTON);
	  XmNactivateCallback = procedure Print_File_Callback (PRINT_OPTIONS_ID);
	};
      };

      pr_cancel_button : exported XmPushButton {
	arguments {
	  XmNlabelString = T_CANCEL;
	};
	callbacks {
	  MrmNcreateCallback = procedure Create_Callback (PR_CANCEL_BUTTON);
	  XmNactivateCallback = procedure Print_File_Callback (PRINT_CANCEL_ID);
	};
      };


!  *********************
!  *  Help Dialog Box  *
!  *********************
  
  object

    help_dialog_box : DXmHelpDialog {
      arguments {
!	arguments help_box_args;
!        XmNdefaultPosition = true;
	DXmNapplicationName = T_DECPAINT;
	DXmNlibraryType = 1;
	DXmNoverviewTopic = "main_overview";
      };
      callbacks {
	XmNunmapCallback = procedure Unmap_Help;
      };
    };
 
end module;


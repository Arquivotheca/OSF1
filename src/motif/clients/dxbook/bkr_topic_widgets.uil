!
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
!
/* VAX/DEC CMS REPLACEMENT HISTORY, Element BKR_TOPIC_WIDGETS.UIL*/
/* *14   17-NOV-1992 22:52:53 BALLENGER "Create CC-specific help menus."*/
/* *13    3-SEP-1992 13:01:59 GOSSELIN "added Keyboard and Contents items to Help Menus"*/
/* *12   11-JUN-1992 09:42:41 ROSE "Made next arrow the default topic window button"*/
/* *11   20-MAY-1992 11:29:14 KLUM "UI rework + printing from topic windows"*/
/* *10   19-MAR-1992 16:02:14 FITZELL "edit/copy help callbacks"*/
/* *9    19-MAR-1992 12:00:14 FITZELL "edit/copy button for clipboard"*/
/* *8    10-FEB-1992 09:15:58 KLUM "comment out Edit menu button"*/
/* *7     6-FEB-1992 10:11:24 KLUM "start to add cut to buffer"*/
/* *6    21-JAN-1992 16:41:27 KLUM "bl1"*/
/* *5     7-JAN-1992 14:18:14 PARMENTER "adding CBR/Search"*/
/* *4     2-JAN-1992 10:47:37 KLUM ""*/
/* *3    11-DEC-1991 11:25:07 GOSSELIN "finished adding help Index"*/
/* *2     1-NOV-1991 12:37:22 BALLENGER "Reintegrate memex support."*/
/* *1    16-SEP-1991 12:50:14 PARMENTER "UIL definitions for Topic window."*/
/* VAX/DEC CMS REPLACEMENT HISTORY, Element BKR_TOPIC_WIDGETS.UIL*/
/*
***************************************************************
**  Copyright (c) Digital Equipment Corporation, 1988, 1990  **
**  All Rights Reserved.  Unpublished rights reserved	     **
**  under the copyright laws of the United States.  	     **
**  	    	    	    	    	    	    	     **
**  The software contained on this media is proprietary	     **
**  to and embodies the confidential technology of  	     **
**  Digital Equipment Corporation.  Possession, use,	     **
**  duplication or dissemination of the software and	     **
**  media is authorized only pursuant to a valid written     **
**  license from Digital Equipment Corporation.	    	     **
**  	    	    	    	    	    	    	     **
**  RESTRICTED RIGHTS LEGEND   Use, duplication, or 	     **
**  disclosure by the U.S. Government is subject to 	     **
**  restrictions as set forth in Subparagraph (c)(1)(ii)     **
**  of DFARS 252.227-7013, or in FAR 52.227-19, as  	     **
**  applicable.	    	    	    	    	    	     **
***************************************************************
*/


/*
**++
**  FACILITY:
**
**      Bookreader User Interface (BKR)
**
**  ABSTRACT:
**
**  	User Interface Language definitions for Topic window.
**
**  AUTHORS:
**
**      James A. Ferguson
**
**  CREATION DATE:     1-Nov-1989
**
**  MODIFICATION HISTORY:
**
**--
**/


/*
 *  Translation table for the workArea widgets -- same table for both
 *  	    workArea and standardTopicWorkArea widgets.
 */

list work_area_trans : arguments
{
    XmNtranslations = translation_table
    ( 
    	'<Configure> : CONFIGURE()'
    );
};


/*
 *  STANDARD Topic Main Window widget
 *
 *  NOTE:  The STANDARD Topic window has its own mainWindow because it
 *         is the ONLY window which contains a button box.  It also
 *  	   needs its own work area widget because that widget uses a form
 *  	   widget.
 */

object standardTopicMainWindow : XmMainWindow
{
    arguments
    {
    	XmNborderWidth	= k_main_window_border_width;
    };
    controls
    {
    	XmMenuBar   topicMenuBar;	    
    	XmForm	    standardTopicWorkArea;
    };
    callbacks
    {
    	MrmNcreateCallback = procedure bkr_save_widgets( W_MAIN_WINDOW );
    };
};


/*
 * FORMAL Topic Main Window widget
 */

object formalTopicMainWindow : XmMainWindow
{
    arguments
    {
    	XmNborderWidth	= k_main_window_border_width;
    };
    controls
    {
    	XmMenuBar   topicMenuBar;	    	    
    	XmForm 	    formalTopicWorkArea;
    };
    callbacks
    {
    	MrmNcreateCallback = procedure bkr_save_widgets( W_MAIN_WINDOW );
    };
};

/*
 * shared by STANDARD and FORMAL Topic Windows
 */

object topicMenuBar : XmMenuBar	       
{
    arguments
    {
    	XmNborderWidth	    = k_menu_bar_border_width;
       	XmNmenuHelpWidget   = XmCascadeButton topicHelpPulldownEntry;
    	XmNorientation 	    = XmHORIZONTAL;
    };
    controls
    {
    	XmCascadeButton     	topicFilePulldownEntry;
    	XmCascadeButton     	topicEditPulldownEntry;
    	XmCascadeButton widget	topicLinkPulldownEntry;
    	XmCascadeButton     	topicViewPulldownEntry;
    	XmCascadeButton     	topicSearchPulldownEntry;	/* SEARCH */
    	XmCascadeButton     	topicHelpPulldownEntry;
    };
    callbacks
    {
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_MENU_BAR );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_topic_menu_bar_help );
    };
};


/*
 *  Connection pulldown menu entry
 */

object topicLinkPulldownEntry : XmCascadeButton widget
{
    arguments
    {
    	XmNlabelString  = s_link_label;
    	XmNmnemonic 	= s_link_mnemonic;
    };
    callbacks
    {
    	MrmNcreateCallback  = procedure bmi_save_connection_menu( tag );
    };
};


/*
 * File pulldown menu entry -- shared by STANDARD and FORMAL Topic windows
 */

object topicFilePulldownEntry : XmCascadeButton
{
    arguments
    {
    	XmNlabelString  = s_file_label;
    	XmNmnemonic 	= s_file_mnemonic;
    };

    /*
     *  Pulldown menu not included here because it will be fetched later
     *  in a work procedure to hopefully speed up startup time.   The work 
     *  procedure will fetch a different menu based on the window type.
     *
     *	    controls
     *	    {  
     *	    	XmPulldownMenu selectionFileMenu 	<OR> 
     *	    	    	       standardTopicFileMenu 	<OR>
     *	    	    	       formalTopicFileMenu 
     *	    };
     */

    callbacks
    {
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_FILE_PULLDOWN_ENTRY );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_topic_file_pm_help );
    };
};


/*
 * Edit pulldown menu entry -- for STANDARD Topic windows
 */

object topicEditPulldownEntry : XmCascadeButton
{
    arguments
    {
    	XmNlabelString  = s_edit_label;
    	XmNmnemonic 	= s_edit_mnemonic;
    };

    /*
     *  Pulldown menu not included here because it will be fetched later
     *  in a work procedure to hopefully speed up startup time.   The work 
     *  procedure will fetch a different menu based on the window type.
     *
     *	    controls
     *	    {  
     *	    	XmPulldownMenu selectionFileMenu 	<OR> 
     *	    	    	       standardTopicFileMenu 	<OR>
     *	    	    	       formalTopicFileMenu 
     *	    };
     */

    callbacks
    {
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_EDIT_PULLDOWN_ENTRY );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_topic_edit_pm_help );
    };
};


/*
 * View pulldown menu entry -- shared by STANDARD and FORMAL Topic windows
 */

object topicViewPulldownEntry : XmCascadeButton
{
    arguments
    {
    	XmNlabelString  = s_view_label;
    	XmNmnemonic 	= s_view_mnemonic;
    };

    /*
     *  Pulldown menu not included here because it will be fetched later
     *  in a work procedure to hopefully speed up startup time.   The work 
     *  procedure will fetch a different menu based on the window type.
     *
     *	    controls
     *	    {  
     *	    	XmPulldownMenu selectionViewMenu     <OR>
     *	    	    	       standardTopicViewMenu <OR>
     *	    	    	       formalTopicViewMenu 
     *	    };
     */

    callbacks
    {
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_VIEW_PULLDOWN_ENTRY );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_topic_view_pm_help );
    };
};


/*
 * Help pulldown menu entry and push buttons 
 */

object topicHelpPulldownEntry : XmCascadeButton
{
    arguments
    {
    	XmNlabelString 	= s_help_label;
    	XmNmnemonic 	= s_help_mnemonic;
    };
    callbacks
    {
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_topic_help_pm_help );
    };
};

object topicHelpMenu : XmPulldownMenu
{
    controls
    {
    	XmPushButton 	topicOnContextEntry;
	XmSeparator 	{};
    	XmPushButton 	topicOnWindowEntry;
    	XmPushButton 	topicIndexEntry;
    	XmPushButton 	topicKeyboardEntry;
    	XmPushButton 	topicContentsEntry;
    	XmPushButton 	topicOnHelpEntry;
    	XmPushButton 	topicOnVersionEntry;
    };
};

/* Character cell version of the help menu that exclude the Help Mode /
 * Help-On-Context entry, since those don't work too well without a mouse.
 */
object topicHelpMenuCC : XmPulldownMenu
{
    controls
    {
    	XmPushButton 	topicOnWindowEntry;
    	XmPushButton 	topicContentsEntry;
    	XmPushButton 	topicIndexEntry;
    	XmPushButton 	topicKeyboardEntry;
    	XmPushButton 	topicOnHelpEntry;
    	XmPushButton 	topicOnVersionEntry;
    };
};

object topicOnContextEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString  = s_on_context_label;
    	XmNmnemonic 	= s_on_context_mnemonic;
	XmNaccelerator  = s_on_context_accel;
	XmNacceleratorText  = s_on_context_accel_text;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_help_on_context();
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_top_on_context_help );
    };
};

object topicOnWindowEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString  = s_on_window_label;
    	XmNmnemonic 	= s_on_window_mnemonic;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_help_on_widget( s_topic_window_help );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_top_on_window_help );
    };
};

object topicContentsEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString  = s_contents_label;
    	XmNmnemonic 	= s_contents_mnemonic;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_help_on_widget( s_contents_help );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_top_contents_help );
    };
};

object topicIndexEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString  = s_index_label;
    	XmNmnemonic 	= s_index_mnemonic;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_help_on_widget( s_index_help );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_top_index_help );
    };
};

object topicKeyboardEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString  = s_keyboard_label;
    	XmNmnemonic 	= s_keyboard_mnemonic;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_help_on_widget( s_keyboard_help );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_top_keyboard_help );
    };
};

object topicOnHelpEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString  = s_on_help_label;
    	XmNmnemonic 	= s_on_help_mnemonic;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_help_on_widget( s_on_help_help );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_top_on_help_help );
    };
};

object topicOnVersionEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString  = s_on_version_label;
    	XmNmnemonic 	= s_on_version_mnemonic;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_help_on_widget( s_on_version_help );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_top_on_version_help );
    };
};


/*
 *  STANDARD Topic work area widget
 */

object standardTopicWorkArea : XmForm
{
    arguments
    {
    	arguments   	   work_area_trans;
    	XmNborderWidth	 = k_work_area_border_width;
    	XmNresizePolicy	 = XmRESIZE_NONE;
    	XmNdefaultButton = XmArrowButton bboxNextScreen;
    };
    controls
    {
    	XmLabel widget	    topicLabel;	    	/* defined in BKR_WIDGETS.UIL */
    	XmSeparator 	    topicLabelSeparator;/* defined in BKR_WIDGETS.UIL */
    	XmScrolledWindow    standardTopicScrolledWindow;
    	XmSeparator 	    standardTopicBoxSeparator;
    	XmRowColumn 	    standardTopicButtonBox;
    };
    callbacks
    {
    	MrmNcreateCallback = procedure bkr_save_widgets( W_WORK_AREA );
    };
};


/*
 * FORMAL Topic work Area dialog box widget
 */

object formalTopicWorkArea : XmForm
{
    arguments
    {
    	arguments   	  work_area_trans;
	XmNresizePolicy    = XmRESIZE_NONE;
    	XmNborderWidth	= k_work_area_border_width;
    };
    controls
    {
    	XmLabel widget	    topicLabel;	        /* defined in BKR_WIDGETS.UIL */
    	XmSeparator 	    topicLabelSeparator;/* defined in BKR_WIDGETS.UIL */
    	XmScrolledWindow    formalTopicScrolledWindow;
    	XmSeparator 	    formalTopicBoxSeparator;
     	XmRowColumn 	    formalTopicButtonBox;
    };
    callbacks
    {
    	MrmNcreateCallback = procedure bkr_save_widgets( W_WORK_AREA );
    };
};
/*
 *  FORMAL Topic Button box widget
 */

object formalTopicButtonBox : XmRowColumn 
{
    arguments
    {
	XmNborderWidth          = k_button_box_border_width;
        XmNentryBorder          = k_button_box_entry_border;
        XmNmarginWidth          = k_button_box_margin_width;
        XmNmarginHeight         = k_button_box_margin_height;
        XmNspacing              = k_button_box_spacing;
        XmNorientation          = XmHORIZONTAL;
        XmNleftAttachment       = XmATTACH_FORM;
        XmNrightAttachment      = XmATTACH_FORM;
        XmNbottomAttachment     = XmATTACH_FORM;
        XmNadjustLast           = false;
        XmNnavigationType       = XmSTICKY_TAB_GROUP;


    };
    controls
    {
       	XmPushButton 	    topicCloseButton;	
    };	
    callbacks
    {
    	MrmNcreateCallback = procedure bkr_save_widgets( W_BUTTON_BOX );
 	XmNhelpCallback    = procedure bkr_help_on_widget( s_topic_button_box_help );
    };
};

/*
 *  FORMAL Topic Button box separator
 */

object formalTopicBoxSeparator : XmSeparator
{
    arguments
    {
      	XmNbottomAttachment    	= XmATTACH_WIDGET;
     	XmNbottomWidget	    	= XmRowColumn formalTopicButtonBox;
   	XmNleftAttachment  	= XmATTACH_FORM;
    	XmNrightAttachment  	= XmATTACH_FORM;
    };
};

/*
 *  STANDARD Topic Button box widget
 */

object standardTopicButtonBox : XmRowColumn 
{
    arguments
    {
   	XmNborderWidth    	= k_button_box_border_width;
	XmNentryBorder  	= k_button_box_entry_border;
    	XmNmarginWidth	       	= k_button_box_margin_width;
        XmNmarginHeight   	= k_button_box_margin_height;
    	XmNspacing  	    	= k_button_box_spacing;
	XmNorientation 	    	= XmHORIZONTAL;
    	XmNleftAttachment  	= XmATTACH_FORM;
    	XmNrightAttachment  	= XmATTACH_FORM;
    	XmNbottomAttachment  	= XmATTACH_FORM;
    	XmNadjustLast	    	= false;
	XmNnavigationType	= XmSTICKY_TAB_GROUP;
    };
    controls
    {
       	XmPushButton 	    topicCloseButton;  

    	XmLabel     	    spaceGadget;

   	XmPushButton 	    bboxGoBack;

    	XmLabel     	    spaceGadget;

    	XmArrowButton 	    bboxPreviousTopic;
    	XmLabel	    	    bboxTopicTop;
    	XmArrowButton 	    bboxNextTopic;

    	XmLabel	    	    spaceGadget;

    	XmArrowButton 	    bboxPreviousScreen;
    	XmLabel	    	    bboxTopicBottom;
    	XmArrowButton 	    bboxNextScreen;
    };
    callbacks
    {
    	MrmNcreateCallback = procedure bkr_save_widgets( W_BUTTON_BOX );
 	XmNhelpCallback    = procedure bkr_help_on_widget( s_topic_button_box_help );
    };
};

/*
 *  STANDARD Topic Button box separator
 */

object standardTopicBoxSeparator : XmSeparator
{
    arguments
    {
      	XmNbottomAttachment    	= XmATTACH_WIDGET;
     	XmNbottomWidget	    	= XmRowColumn standardTopicButtonBox;
   	XmNleftAttachment  	= XmATTACH_FORM;
    	XmNrightAttachment  	= XmATTACH_FORM;
    };
};


object spaceGadget : XmLabel
{
    arguments
    {
    	XmNlabelString	= compound_string( "  " );  /* <-- 2 spaces */
    	XmNsensitive   	= false;
    };
};

object topicCloseButton : XmPushButton
{
    arguments
    {
    	XmNlabelString	= s_close_label;
    	XmNmarginLeft	= k_button_box_button_margin;
    	XmNmarginRight	= k_button_box_button_margin;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_close_topic_window( tag );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_close_help );
    };
};

object bboxGoBack : XmPushButton
{
    arguments
    {
    	XmNlabelString	= s_popup_goback_label;
    	XmNsensitive   	= false;
    	XmNmarginLeft	= k_button_box_button_margin;
    	XmNmarginRight	= k_button_box_button_margin;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_goback( tag );
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_GOBACK_BUTTON );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_goback_help );
    };
};

object bboxPreviousTopic : XmArrowButton
{
    arguments
    {
	XmNarrowDirection = XmARROW_LEFT;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_previous( tag );
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_PREV_TOPIC_BUTTON );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_prev_topic_help );
    };
};

object bboxTopicTop : XmLabel
{
    arguments
    {
    	XmNlabelString	= s_topic_label;
    	XmNtraversalOn  = false;
    };
    callbacks
    {
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_topic_top_help );
    };	
};

object bboxNextTopic : XmArrowButton
{
    arguments
    {
	XmNarrowDirection = XmARROW_RIGHT;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_next( tag );
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_NEXT_TOPIC_BUTTON );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_next_topic_help );
    };
};

object bboxPreviousScreen : XmArrowButton
{
    arguments
    {
	XmNarrowDirection = XmARROW_LEFT;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_previous_screen( tag );
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_PREV_SCREEN_BUTTON );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_prev_screen_help );
    };
};

object bboxTopicBottom : XmLabel
{
    arguments
    {
    	XmNlabelString	= s_screen_label;
    	XmNtraversalOn  = false;
    };
    callbacks
    {
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_topic_bottom_help );
    };	
};

object bboxNextScreen : XmArrowButton
{
    arguments
    {
	XmNarrowDirection = XmARROW_RIGHT;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_next_screen( tag );
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_NEXT_SCREEN_BUTTON );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_next_screen_help );
    };
};


/*
 * STANDARD Topic Scrolled window widget
 */

object standardTopicScrolledWindow : XmScrolledWindow   
{
    arguments
    {
    	XmNspacing  	    	= k_scrolled_window_spacing;
    	XmNborderWidth      	= k_scrolled_window_border_width;

    	XmNtopAttachment    	= XmATTACH_WIDGET;
    	XmNtopWidget	    	= XmSeparator topicLabelSeparator;
    	XmNleftAttachment   	= XmATTACH_FORM;
    	XmNrightAttachment  	= XmATTACH_FORM;
    	XmNrightOffset      	= k_scrolled_window_right_offset;
    	XmNbottomAttachment 	= XmATTACH_WIDGET;
     	XmNbottomWidget	    	= XmSeparator standardTopicBoxSeparator;

    	XmNscrollBarDisplayPolicy = XmSTATIC;
    	XmNscrollingPolicy  	  = XmAPPLICATION_DEFINED;
    	XmNvisualPolicy	    	  = XmVARIABLE;

    	XmNhorizontalScrollBar	= XmScrollBar  	horizScrollBar;
    	XmNverticalScrollBar	= XmScrollBar  	vertScrollBar;
    	XmNworkWindow	    	= XmDrawingArea drawingWindow;
    };
    controls
    {
    	XmScrollBar	horizScrollBar;	  /* all 3 defined in BKR_WIDGETS.UIL */
    	XmScrollBar  	vertScrollBar;
    	XmDrawingArea  	drawingWindow;
    };
    callbacks
    {
    	MrmNcreateCallback = procedure bkr_save_widgets( W_SCROLLED_WINDOW );
    };
};


/*
 *  FORMAL Topic Scrolled window widget
 */

object formalTopicScrolledWindow : XmScrolledWindow   
{
    arguments
    {
    	XmNspacing  	    	= k_scrolled_window_spacing;
    	XmNborderWidth    	= k_scrolled_window_border_width;

    	XmNtopAttachment        = XmATTACH_WIDGET;
    	XmNtopWidget	    	= XmSeparator topicLabelSeparator;
    	XmNleftAttachment  	= XmATTACH_FORM;
    	XmNrightAttachment  	= XmATTACH_FORM;
    	XmNrightOffset    	= k_scrolled_window_right_offset;
    	XmNbottomAttachment 	= XmATTACH_WIDGET;
     	XmNbottomWidget	    	= XmSeparator formalTopicBoxSeparator;
 
    	XmNscrollBarDisplayPolicy = XmSTATIC;
    	XmNscrollingPolicy  	  = XmAPPLICATION_DEFINED;
    	XmNvisualPolicy	    	  = XmVARIABLE;

    	XmNhorizontalScrollBar	= XmScrollBar  	horizScrollBar;
    	XmNverticalScrollBar	= XmScrollBar  	vertScrollBar;
    	XmNworkWindow	    	= XmDrawingArea drawingWindow;
    };
    controls
    {
    	XmScrollBar	horizScrollBar;
    	XmScrollBar  	vertScrollBar;
    	XmDrawingArea  	drawingWindow;
    };
    callbacks
    {
    	MrmNcreateCallback = procedure bkr_save_widgets( W_SCROLLED_WINDOW );
    };
};


/*
 * STANDARD Topic File Pulldown menu 
 */
object standardTopicFileMenu : XmPulldownMenu
{
    controls
    {
    	unmanaged XmPushButton	openNavigationWindow;
        XmPushButton 	topicOpenTopicInDefaultWindow;   
        XmPushButton 	topicOpenTopicInNewWindow;	   
	XmSeparator {};
        XmPushButton    printtopic_button;
	XmSeparator {};
!!    	XmPushButton 	makeDefaultEntry;   /* Removed for V3 */
!!	XmSeparator {};	    	    	    /* Removed for V3 */
    	XmPushButton 	topicCloseTopicEntry;
    };

    /*
     * 	Not needed for deferred fetching
     *
     *	    callbacks
     *	    {
     *	    	MrmNcreateCallback = procedure bkr_save_widgets( W_FILE_MENU );
     *	    };
     */
};


object topicOpenTopicInDefaultWindow : XmPushButton
{
    arguments
    {
    	XmNlabelString 	= s_topic_open_label;
    	XmNsensitive   	= false;
    	XmNmnemonic 	= s_open_in_default_mnemonic;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_open_in_default( tag );
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_OPEN_TOPIC_IN_DEFAULT );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_top_open_topic_in_default_help);
    };
};


object topicOpenTopicInNewWindow : XmPushButton 
{
    arguments
    {
    	XmNlabelString 	= s_topic_in_new_label;
    	XmNsensitive   	= false;
    	XmNmnemonic 	= s_open_in_new_mnemonic;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_open_in_new( tag );
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_OPEN_TOPIC_IN_NEW );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_top_open_topic_in_new_help);
    };
};


object openNavigationWindow : XmPushButton
{
    arguments
    {
    	XmNlabelString 	= s_open_navigation_window_label;
    	XmNmnemonic 	= s_open_navigation_mnemonic;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_selection_open_default_dir( tag );
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_OPEN_DEFAULT_DIR_ENTRY );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_top_open_navigation_help );
    };
};


object topicCloseTopicEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString 	= s_close_topic_label;
    	XmNmnemonic 	= s_close_mnemonic;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_close_topic_window( tag );
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_CLOSE_TOPIC_ENTRY );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_top_close_topic_help );
    };
};


/*
 * FORMAL Topic File Pulldown menu 
 */
object formalTopicFileMenu : XmPulldownMenu
{
    controls
    {
    	unmanaged XmPushButton	openNavigationWindow;
        XmPushButton 	topicOpenTopicInDefaultWindow; 
        XmPushButton 	topicOpenTopicInNewWindow;     
	XmSeparator {};
        XmPushButton    printpopup_button;
	XmSeparator {};
    	XmPushButton 	topicCloseTopicEntry;
    };
    /*
     *  Not needed for deferred fetching
     *
     *	    callbacks
     *	    {
     *	    	MrmNcreateCallback = procedure bkr_save_widgets( W_FILE_MENU );
     *	    };
     */
};



/*
 * STANDARD Topic File Pulldown menu 
 */
object standardTopicEditMenu : XmPulldownMenu
{
    controls
    {
        XmPushButton 	topicCopy;
!	XmSeparator {};
    };

    /*
     * 	Not needed for deferred fetching
     *
     *	    callbacks
     *	    {
     *	    	MrmNcreateCallback = procedure bkr_save_widgets( W_EDIT_MENU );
     *	    };
     */
};


object topicCopy : XmPushButton
{
    arguments
    {
    	XmNlabelString 	= s_topic_copy_label;
    	XmNsensitive   	= true;
    	XmNmnemonic 	= s_topic_copy_mnemonic;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_copy_clipboard();
!    	MrmNcreateCallback  = procedure bkr_save_widgets( W_OPEN_TOPIC_IN_DE);
 	XmNhelpCallback     = procedure bkr_help_on_widget(s_topic_copy_pm_help);
    };
};




/*
 * STANDARD Topic View Pulldown menu
 */
object standardTopicViewMenu : XmPulldownMenu
{
    controls
    {
    	XmPushButton     prevTopicEntry;
    	XmPushButton     nextTopicEntry;
    	XmPushButton     gobackEntry;
	XmSeparator {};
    	XmToggleButton	 hotspotsEntry;
    	XmToggleButton	 extensionsEntry;
    };
    /*
     *  Not needed for deferred fetching
     *
     *	    callbacks
     *	    {
     *	    	MrmNcreateCallback = procedure bkr_save_widgets( W_VIEW_MENU );
     *	    };
     */
};

object prevTopicEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString 	= s_prev_topic_label;
    	XmNmnemonic 	= s_prev_topic_mnemonic;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_previous( tag );
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_PREV_TOPIC_ENTRY );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_prev_topic_entry_help );
    };
};

object nextTopicEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString 	= s_next_topic_label;
    	XmNmnemonic 	= s_next_topic_mnemonic;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_next( tag );
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_NEXT_TOPIC_ENTRY );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_next_topic_entry_help );
    };
};

object gobackEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString 	= s_goback_label;
    	XmNsensitive   	= false;
    	XmNmnemonic 	= s_go_back_mnemonic;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_goback( tag );
    	MrmNcreateCallback  = procedure bkr_save_widgets( W_GOBACK_ENTRY );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_goback_entry_help );
    };
};

object hotspotsEntry : XmToggleButton
{
    arguments
    {
    	XmNlabelString  = s_hotspots_label;
    	XmNmnemonic 	= s_hot_spot_mnemonic;
    };
    callbacks
    {
    	XmNvalueChangedCallback = procedure bkr_topic_hot_spots_onoff( tag );
    	MrmNcreateCallback  	= procedure bkr_save_widgets( W_HOTSPOTS_ENTRY );
 	XmNhelpCallback     	= procedure bkr_help_on_widget( s_show_hotspots_help );
    };
};

object extensionsEntry : XmToggleButton
{
    arguments
    {
    	XmNlabelString  = s_extensions_label;
    	XmNmnemonic 	= s_extensions_mnemonic;
    };
    callbacks
    {
    	XmNvalueChangedCallback = procedure bkr_topic_extensions_onoff( tag );
    	MrmNcreateCallback  	= procedure bkr_save_widgets( W_EXTENSIONS_ENTRY );
 	XmNhelpCallback     	= procedure bkr_help_on_widget( s_show_extension_help );
    };
};


/*
 * FORMAL Topic View Pulldown menu
 */
object formalTopicViewMenu : XmPulldownMenu
{
    controls
    {
    	XmToggleButton	hotspotsEntry;
    	XmToggleButton	extensionsEntry;
    };

    /*
     *  Not needed for deferred fetching
     *
     *	    callbacks
     *	    {
     *	    	MrmNcreateCallback = procedure bkr_save_widgets( W_VIEW_MENU );
     *	    };
     */
};


/*
 *  Topic window popup menu (both FORMAL and STANDARD)
 */

object topicPopupMenu : XmPopupMenu
{
    controls
    {
    	XmPushButton 	closeTopicPopupEntry;
    	XmPushButton 	openHotSpotPopupEntry;
    	XmPushButton 	openHotSpotInNewPopupEntry;
    	XmPushButton	prevTopicPopupEntry;
    	XmPushButton    nextTopicPopupEntry;
    	XmPushButton    gobackPopupEntry;
    };
};

object openHotSpotPopupEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString = s_popup_topic_open_label;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_open_in_default();
    	MrmNcreateCallback  = procedure bkr_topic_create_save_ids( W_HOT_SPOT_POPUP_ENTRY );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_hotspot_popup_help );
    };
};

object openHotSpotInNewPopupEntry : XmPushButton 
{
    arguments
    {
    	XmNlabelString = s_popup_topic_in_new_label;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_open_in_new();
    	MrmNcreateCallback  = procedure bkr_topic_create_save_ids( W_HOT_SPOT_IN_NEW_POPUP_ENTRY );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_hotspot_popup_in_new_help );
    };
};

object prevTopicPopupEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString 	= s_popup_prev_topic_label;
    	XmNsensitive   	= false;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_previous();
    	MrmNcreateCallback  = procedure bkr_topic_create_save_ids( W_PREV_TOPIC_POPUP_ENTRY );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_prev_topic_help );
    };
};

object nextTopicPopupEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString 	= s_popup_next_topic_label;
    	XmNsensitive   	= false;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_next();
    	MrmNcreateCallback  = procedure bkr_topic_create_save_ids( W_NEXT_TOPIC_POPUP_ENTRY );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_next_topic_help );
    };
};

object gobackPopupEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString 	= s_popup_goback_label;
    	XmNsensitive   	= false;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_topic_goback();
    	MrmNcreateCallback  = procedure bkr_topic_create_save_ids( W_GOBACK_POPUP_ENTRY );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_goback_help );
    };
};

object closeTopicPopupEntry : XmPushButton
{
    arguments
    {
    	XmNlabelString 	= s_popup_close_topic_label;
    };
    callbacks
    {
    	XmNactivateCallback = procedure bkr_close_topic_window();
    	MrmNcreateCallback  = procedure bkr_topic_create_save_ids( W_CLOSE_TOPIC_POPUP_ENTRY );
 	XmNhelpCallback     = procedure bkr_help_on_widget( s_top_close_topic_help );
    };
};



! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!++
!
!       C A L C . U I L
!             DECWindows Calculator UIL widgets defintions
!
!----------------------------------------------------------------------
!
/*
  Copyright (c) Digital Equipment Corporation, 
  1987, 1988, 1989, 1990, 1991, 1992.
  All Rights Reserved.  Unpublished rights reserved
  under the copyright laws of the United States.

  The software contained on this media is proprietary
  to and embodies the confidential technology of
  Digital Equipment Corporation.  Possession, use,
  duplication or dissemination of the software and
  media is authorized only pursuant to a valid written
  license from Digital Equipment Corporation.

  RESTRICTED RIGHTS LEGEND   Use, duplication, or
  disclosure by the U.S. Government is subject to
  restrictions as set forth in Subparagraph (c)(1)(ii)
  of DFARS 252.227-7013, or in FAR 52.227-19, as
  applicable.
*/
!
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! Facility:
!   DECWindows Calculator
!
!   Facility:           DECW DECWindows Calculator
!
!   Modification History:
!
!   Version 2.0
!       Mar - 1989	(NFF) V2.0 internationalization modifications
!
!   Version 3.0
!	Nov - 1990	(ASP) V3.0 converting to Motif.
!
!   Version 3.1
!       Mar - 1992	(SP)  V3.1 performance and more I18N modifications
!
!----------------------------------------------------------------------
!
! This file does NOT contain any translatable strings
!

module calc
	version = 'V3.1'
	names = case_sensitive
	objects = { XmSeparator = gadget; XmPushButton = gadget;
		    XmToggleButton = gadget; XmLabel = gadget;
		    XmCascadeButton = gadget;
		  }

include file	'calc_def.uil';
include file	'calc_trans.uil';
include file	'calc_values.uil';
include file	'calc_defhlp.uil';
include file	'XmAppl.uil';


value DXmNdelayPopupMenuRealization :
	argument ('DXmdelayPopupMenuRealization', boolean);

procedure

	DwtMyCalcCreate();

	copy_proc ();
	create_proc (integer);
	exit_proc ();
	help_done_proc ();
	main_help_proc (compound_string);
	message_done_proc ();
	mode_proc (integer);
	on_context_activate_proc ();
	paste_proc ();
	restore_settings_proc ();
	save_settings_proc ();
	undo_proc ();


object
    calc_widget : user_defined	procedure DwtMyCalcCreate {
	arguments {
	    XmNtranslations = calc_translations;
	};
	controls {
	   XmMenuBar 	calc_menu_bar;
       	};
	callbacks {
	};
    };

    calc_menu_bar : XmMenuBar {
	arguments {
	    XmNorientation = XmHORIZONTAL;
	    XmNmenuHelpWidget = XmCascadeButton help_pulldown;
	};
 	controls {      
	    XmCascadeButton file;
	    XmCascadeButton edit;
	    XmCascadeButton mode;
	    XmCascadeButton help_pulldown;
 	};
	callbacks {
	    MrmNcreateCallback = procedure create_proc (k_menu_bar);
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_S_MENU_BAR);
	};
    };


    file : XmCascadeButton {
	arguments {
	    XmNlabelString = CALC_FILE_L;
	    XmNmnemonic = FileMnemonic;
    	};
	controls {      
	    XmPulldownMenu file_menu;                       
    	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_FILE);
	};
    };

    file_menu : XmPulldownMenu {
	arguments {
                XmNtearOffModel = XmTEAR_OFF_ENABLED;
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {
	    XmPushButton save_settings;
	    XmPushButton restore_settings;
	    XmSeparator sep_gadget;
	    XmPushButton exit;
	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_FILE_MENU);
	};
    };

    sep_gadget : XmSeparator {
    };

    save_settings : XmPushButton {
	arguments {
	    XmNlabelString = CALC_SAVE_SETTINGS_L;
	    XmNmnemonic = SaveGeometryMnemonic;
    	};
	callbacks {
	    XmNactivateCallback = procedure save_settings_proc ();
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_SAVE_SETTINGS);
	};
    };

    restore_settings : XmPushButton {
	arguments {
	    XmNlabelString = CALC_RESTORE_SETTINGS_L;
	    XmNmnemonic = RestoreSettingsMnemonic;
    	};
	callbacks {
	    XmNactivateCallback = procedure restore_settings_proc ();
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_RESTORE_SETTINGS);
	};
    };

    exit : XmPushButton {
	arguments {
	    XmNlabelString = CALC_EXIT_L;
	    XmNmnemonic = ExitMnemonic;
	    XmNacceleratorText = CALC_EXIT_ACCEL_L;
	    XmNaccelerator = CALC_EXIT_ACCEL_TRANS;
    	};
	callbacks {
	    XmNactivateCallback = procedure exit_proc ();
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_EXIT);
	};
    };


    edit : XmCascadeButton {
	arguments {
	    XmNmnemonic = EditMnemonic;
	    XmNlabelString = CALC_EDIT_L;
    	};
	controls {
	    XmPulldownMenu edit_menu;
    	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_EDIT);
	};
    };

    edit_menu : XmPulldownMenu {
	arguments {
                XmNtearOffModel = XmTEAR_OFF_ENABLED;
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {      
	    XmPushButton undo;
	    XmPushButton copy;
	    XmPushButton paste;
	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_EDIT_MENU);
	};
    };

    undo : XmPushButton {
	arguments {
       	    XmNlabelString = CALC_UNDO_L;
	    XmNmnemonic = UndoMnemonic;
	    XmNacceleratorText = CALC_UNDO_ACCEL_L;
	    XmNaccelerator = CALC_UNDO_ACCEL_TRANS;
    	};
	callbacks {
	    MrmNcreateCallback = procedure create_proc (k_pull_down_undo_button);
	    XmNactivateCallback = procedure undo_proc ();
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_PULL_DOWN_UNDO);
	};
    };

    copy : XmPushButton {
	arguments {
       	    XmNlabelString = CALC_COPY_L;
	    XmNmnemonic = CopyMnemonic;
	    XmNacceleratorText = CALC_COPY_ACCEL_L;
	    XmNaccelerator = CALC_COPY_ACCEL_TRANS;
    	};
	callbacks {
	    XmNactivateCallback = procedure copy_proc ();
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_COPY);
	};
    };

    paste : XmPushButton {
	arguments {
       	    XmNlabelString = CALC_PASTE_L;
	    XmNmnemonic = PasteMnemonic;
	    XmNacceleratorText = CALC_PASTE_ACCEL_L;
	    XmNaccelerator = CALC_PASTE_ACCEL_TRANS;
    	};
	callbacks {
	    XmNactivateCallback = procedure paste_proc ();
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_PASTE);
	};
    };


    mode : XmCascadeButton {
	arguments {
	    XmNlabelString = CALC_MODE_L;
	    XmNmnemonic = ModeMnemonic;
    	};
	controls {
	    XmPulldownMenu mode_menu;
    	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_MODE);
	};
    };

    mode_menu : XmPulldownMenu {
	arguments {
                XmNtearOffModel = XmTEAR_OFF_ENABLED;
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {      
	    XmPushButton decimal;
	    XmPushButton hexadecimal;
	    XmPushButton octal;
!	    XmPushButton binary;		! Binary not currently supported
	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_MODE_MENU);
	};
    };

    decimal : XmPushButton {
	arguments {
       	    XmNlabelString= CALC_DECIMAL_L;
	    XmNmnemonic = DecimalMnemonic;
	    XmNacceleratorText = CALC_DECIMAL_ACCEL_L;
	    XmNaccelerator = CALC_DECIMAL_ACCEL_TRANS;
    	};
	callbacks {
	    XmNactivateCallback = procedure mode_proc (k_decimal);
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_DECIMAL);
	};
    };

    hexadecimal : XmPushButton {
	arguments {
       	    XmNlabelString= CALC_HEXADECIMAL_L;
	    XmNmnemonic = HexMnemonic;
	    XmNacceleratorText = CALC_HEXADECIMAL_ACCEL_L;
	    XmNaccelerator = CALC_HEXADECIMAL_ACCEL_TRANS;
    	};
	callbacks {
	    XmNactivateCallback = procedure mode_proc (k_hexadecimal);
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_HEXADECIMAL);
	};
    };

    octal : XmPushButton {
	arguments {
       	    XmNlabelString = CALC_OCTAL_L;
	    XmNmnemonic = OctalMnemonic;
	    XmNacceleratorText = CALC_OCTAL_ACCEL_L;
	    XmNaccelerator = CALC_OCTAL_ACCEL_TRANS;
    	};
	callbacks {
	    XmNactivateCallback = procedure mode_proc (k_octal);
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_OCTAL);
	};
    };

!    binary : XmPushButton {
!	arguments {
!           XmNlabelString = CALC_BINARY_L;
!	    XmNacceleratorText = CALC_BINARY_ACCEL_L;
!	    XmNaccelerator = CALC_BINARY_ACCEL_TRANS;
!    	};
!	callbacks {
!	    XmNactivateCallback = procedure mode_proc (k_binary);
!	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_BINARY);
!	};
!    };

    help_pulldown : XmCascadeButton {
        arguments {
            XmNlabelString = CALC_HELP_PULLDOWN_L;
	    XmNmnemonic = HelpMnemonic;
        };
        controls {
            XmPulldownMenu help_menu;
        };
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_HELP_PULLDOWN);
	};
    };

    help_menu : XmPulldownMenu {
	arguments {
                XmNtearOffModel = XmTEAR_OFF_ENABLED;
		DXmNdelayPopupMenuRealization = true;
    	};
	controls {      
	    XmPushButton help_but_on_context;
	    XmSeparator sep_gadget;
	    XmPushButton help_but;
	    XmPushButton help_but_on_help;
	    XmPushButton help_about_but;
	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_HELP_MENU);
	};
    };

    help_but_on_context : XmPushButton {
	arguments {
       	    XmNlabelString = CALC_HELP_BUT_ON_CONTEXT_L;
	    XmNmnemonic = OnContextMnemonic;
	    XmNaccelerator = CALC_ON_CONTEXT_ACCEL_TRANS;
	    XmNacceleratorText = CALC_ON_CONTEXT_ACCEL_L;
    	};
	callbacks {
            XmNactivateCallback = procedure on_context_activate_proc ();
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_HELP_MENU_ONCONTEXT);
	};
    };

    help_but : XmPushButton {
	arguments {
       	    XmNlabelString = CALC_HELP_BUT_L;
	    XmNmnemonic = OnWindowMnemonic;
	    XmNaccelerator = CALC_HELP_BUT_ACCEL_TRANS;
!	    XmNacceleratorText = CALC_HELP_BUT_ACCEL_L;
    	};
	callbacks {
	    XmNactivateCallback = procedure main_help_proc (CALC_HLP_OVERVIEW);
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_HELP_MENU_ONWINDOW);
	};
    };

    help_but_on_help : XmPushButton {
	arguments {
       	    XmNlabelString = CALC_HELP_BUT_ON_HELP_L;
	    XmNmnemonic = OnHelpMnemonic;
    	};
	callbacks {
	    XmNactivateCallback = procedure main_help_proc (CALC_HLP_ONHELP);
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_HELP_MENU_ONHELP);
	};
    };

    help_about_but : XmPushButton {
	arguments {
       	    XmNlabelString = CALC_HELP_ABOUT_BUT_L;
	    XmNmnemonic = OnVersionMnemonic;
    	};
	callbacks {
	    XmNactivateCallback = procedure main_help_proc (CALC_HLP_ABOUT);
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_HELP_MENU_ONVERSION);
	};
    };


    opt_popup_menu : XmPopupMenu {
	arguments {
    	};
	controls {      
	    XmPushButton pop_up_undo;
	    XmPushButton pop_up_copy;
	    XmPushButton pop_up_paste;
	    XmPushButton pop_up_exit;
	};
	callbacks {
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_OPT_POPUP_MENU);
	};
    };

    pop_up_exit : XmPushButton {
	arguments {
	    XmNlabelString = CALC_EXIT_L;
    	};
	callbacks {
	    XmNactivateCallback = procedure exit_proc ();
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_EXIT);
	};
    };

    pop_up_undo : XmPushButton {
	arguments {
       	    XmNlabelString = CALC_UNDO_L;
    	};
	callbacks {
	    MrmNcreateCallback = procedure create_proc (k_pop_up_undo_button);
	    XmNactivateCallback = procedure undo_proc ();
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_POP_UP_UNDO);
	};
    };

    pop_up_copy : XmPushButton {
	arguments {
       	    XmNlabelString = CALC_COPY_L;
    	};
	callbacks {
	    XmNactivateCallback = procedure copy_proc ();
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_COPY);
	};
    };

    pop_up_paste : XmPushButton {
	arguments {
       	    XmNlabelString = CALC_PASTE_L;
    	};
	callbacks {
	    XmNactivateCallback = procedure paste_proc ();
	    XmNhelpCallback = procedure main_help_proc (CALC_HLP_PASTE);
	};
    };


    main_help : DXmHelpDialog {
	arguments {
	    DXmNapplicationName = CALC_HELP_T;
	    DXmNfirstTopic = 'Overview';
	    DXmNoverviewTopic = 'Overview';
	    DXmNdefaultPosition = true;
	    DXmNlibraryType = DXmTextLibrary;
	};
	callbacks {
	    XmNunmapCallback = procedure help_done_proc ();
	};
    };
end module;

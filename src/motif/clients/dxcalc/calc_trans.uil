!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!++
!
!       C A L C _ T R A N S . U I L
!             DECWindows Calculator UIL widgets defintions
!
!----------------------------------------------------------------------
!
/*
  Copyright (c) Digital Equipment Corporation, 
  1987, 1988, 1989, 1990, 1991, 1992.
  All Rights Reserved.  Unpublished rights reserved
  under the copyright laws of the United States.

  The software contained on this media is proprietary
  to and embodies the confidential technology of
  Digital Equipment Corporation.  Possession, use,
  duplication or dissemination of the software and
  media is authorized only pursuant to a valid written
  license from Digital Equipment Corporation.

  RESTRICTED RIGHTS LEGEND   Use, duplication, or
  disclosure by the U.S. Government is subject to
  restrictions as set forth in Subparagraph (c)(1)(ii)
  of DFARS 252.227-7013, or in FAR 52.227-19, as
  applicable.
*/
 !
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
! Facility:
!   DECWindows Calculator
!
!   Facility:           DECW DECWindows Calculator
!
!   Modification History:
!	pjw 3-Dec-93 	Fix for Ctrl-E conflict with exit accelerator in 
!			hex mode. Ootb_bug 451
!
!   Version 2.0
!       Mar - 1989	(NFF) V2.0 internationalization modifications
!
!   Version 3.0
!	Nov - 1990	(ASP) V3.0 converting to Motif.
!
!   Version 3.1
!       Mar - 1992	(SP)  V3.1 performance and more I18N modifications
!
!----------------------------------------------------------------------
!
! This file defines the translation table for the calculator widget.
!
! The left hand side of the translation table determines which key or 
! combination of keys will cause a entry to be processed.
!
! The parameter to the key_pressed routine determines what the calculator will
! process.
!
! Important: (to the translators)
!
!	Pay attention the the location of the translated keys on the keyboard 
!	that your are doing the translation for.  If the key symbol is a lower
!	case key, use '~Shift<KeyDown> ' as the modifier.  Use 'Any<KeyDown> '
!	or 'Shift<KeyDown> ' for all upper cased key symbols.
!	For example:
!		use 'Any<KeyDown>slash:		key_pressed(/)'  for Norwegian Keyboard
!				and
!		use '~Shift<KeyDown>slash:	key_pressed(/)'  for US Keyboard.

value 

!** This is the translation table for decimal mode.  I plan to change from
!** character encodings to hex encodings for the bug fix release.

calc_translations : exported translation_table (
	'Any<KeyDown>c:		key_pressed(c)',
	'Any<KeyDown>e:		key_pressed(ce)',

	'~Shift<KeyDown>0:	key_pressed(0)',	! Need upper row
	'~Shift<KeyDown>1:	key_pressed(1)',	! Other functions
	'~Shift<KeyDown>2:	key_pressed(2)',
	'~Shift<KeyDown>3:	key_pressed(3)',
	'~Shift<KeyDown>4:	key_pressed(4)',
	'~Shift<KeyDown>5:	key_pressed(5)',
	'~Shift<KeyDown>6:	key_pressed(6)',
	'~Shift<KeyDown>7:	key_pressed(7)',
	'~Shift<KeyDown>8:	key_pressed(8)',
	'~Shift<KeyDown>9:	key_pressed(9)',
	'Any<KeyDown>.:		key_pressed(.)',
	'Any<KeyDown>p:		key_pressed(pi)',

	'~Shift<KeyDown>slash:	key_pressed(/)',	! Need upper row
	'Any<KeyDown>asterisk:	key_pressed(*)',	! * symbol
	'~Shift<KeyDown>=:	key_pressed(=)',	! Need upper row
	'Any<KeyDown>plus:	key_pressed(+)',	! + symbol
	'~Shift<KeyDown>-:	key_pressed(-)',	! Need upper row
	'Any<KeyDown>n:		key_pressed(+-)',
	'Any<KeyDown>percent:	key_pressed(%)',	! % symbol

	'Any<KeyDown>i:		key_pressed(inv)',
	'Any<KeyDown>s:		key_pressed(sin)',
	'~Ctrl<KeyDown>o:	key_pressed(cos)',
	'Any<KeyDown>t:		key_pressed(tan)',
	'Any<KeyDown>l,Any<KeyUp>,Any<KeyDown>o:	key_pressed(log)',
	'Any<KeyDown>l,Any<KeyUp>,Any<KeyDown>n:	key_pressed(nat_log)',
	'Any<KeyDown>q:		key_pressed(sqrt)',
	'Any<KeyDown>asciicircum:	key_pressed(y^x)',	! ^ symbol

	'~Ctrl<KeyDown>d:	key_pressed(deg)',
	'Any<KeyDown>exclam:	key_pressed(x!)',	! ! symbol
	'Any<KeyDown>asciitilde: key_pressed(1/x)',	! ~ symbol
	'Any<KeyDown>r:		key_pressed(rnd)',

	'Any<KeyDown>m,Any<KeyUp>,Any<KeyDown>c:	key_pressed(mc)',
	'Any<KeyDown>m,Any<KeyUp>,Any<KeyDown>r:	key_pressed(mr)',
	'Any<KeyDown>m,Any<KeyUp>,Any<KeyDown>plus:	key_pressed(m+)',
	'Any<KeyDown>m,Any<KeyUp>,~Shift<KeyDown>-:	key_pressed(m-)',

	'~Meta<KeyDown>osfDelete:	key_pressed(delete)',
	'~Meta<KeyDown>osfBackSpace:	key_pressed(delete)',

	'Shift<KeyDown>F1:	key_pressed(c)',
	'Shift<KeyDown>F2:	key_pressed(ce)',

	'Any<KeyDown>KP_0:	key_pressed(0)',
	'Any<KeyDown>KP_1:	key_pressed(1)',
	'Any<KeyDown>KP_2:	key_pressed(2)',
	'Any<KeyDown>KP_3:	key_pressed(3)',
	'Any<KeyDown>KP_4:	key_pressed(4)',
	'Any<KeyDown>KP_5:	key_pressed(5)',
	'Any<KeyDown>KP_6:	key_pressed(6)',
	'Any<KeyDown>KP_7:	key_pressed(7)',
	'Any<KeyDown>KP_8:	key_pressed(8)',
	'Any<KeyDown>KP_9:	key_pressed(9)',

	'Any<KeyDown>KP_F1:	key_pressed(*)',
	'Any<KeyDown>KP_F2:	key_pressed(/)',
	'Any<KeyDown>KP_F3:	key_pressed(+-)',
	'Any<KeyDown>KP_F4:	key_pressed(%)',

	'Any<KeyDown>KP_Subtract:	key_pressed(-)',
	'Any<KeyDown>KP_Decimal:	key_pressed(.)',
	'Any<KeyDown>KP_Separator:	key_pressed(+)',

	'Any<KeyDown>osfActivate:	key_pressed(=)',
	'Any<KeyDown>Return:	key_pressed(=)',
	'Any<KeyDown>Menu:	key_pressed(=)',	! The DO key

	'Shift<KeyDown>F3:	key_pressed(inv)',
	'Shift<KeyDown>F4:	key_pressed(sin)',
	'Shift<KeyDown>F5:	key_pressed(cos)',
	'Shift<KeyDown>F6:	key_pressed(tan)',
	'Shift<KeyDown>F7:	key_pressed(log)',
	'Shift<KeyDown>F8:	key_pressed(nat_log)',
	'Shift<KeyDown>F9:	key_pressed(sqrt)',
	'Shift<KeyDown>F10:	key_pressed(y^x)',

        'Ctrl<KeyDown>F4:       key_pressed(mc)',
        'Ctrl<KeyDown>F5:       key_pressed(mr)',
        'Ctrl<KeyDown>F6:       key_pressed(m+)',
        'Ctrl<KeyDown>F7:       key_pressed(m-)',

        'Ctrl<KeyDown>F8:       key_pressed(deg)',
        'Ctrl<KeyDown>F9:       key_pressed(x!)',
        'Ctrl<KeyDown>F10:      key_pressed(1/x)',
        'Ctrl<KeyDown>F11:	key_pressed(rnd)',

	'Any<KeyUp>:		key_released()',
	'~Help<Btn1Down>:	button_pressed()',
	'~Help<Btn1Up>:		button_released()',
	'<Leave>:		button_released()',
	'<Btn3Down>:		MenuCalled()',
	'Help<Btn1Down>:	Help()'
	);

value
!**
!** This is the translation table for hexdecimal mode.  Note that many of
!** the bindings change to accomidate the new hexadecimal functions.
!** 
! Important: (to the translators)
!
!	Pay attention the the location of the translated keys on the keyboard 
!	that your are doing the translation for.  If the key symbol is a lower
!	case key, use '~Shift<KeyDown> ' as the modifier.  Use 'Any<KeyDown> '
!	or 'Shift<KeyDown> ' for all upper cased key symbols.
!	For example:
!		use 'Any<KeyDown>slash:		key_pressed(/)'  for Norwegian Keyboard
!				and
!		use '~Shift<KeyDown>slash:	key_pressed(/)'  for US Keyboard.
!
calc_hex_translations : exported translation_table (
	'Ctrl<KeyDown>c:	key_pressed(c)',
! pjw - Note that Ctrl-e is an extremely poor choice for this since
! it's the accelerator for Exit!!! Since there already is a
! keyboard way to do Clear Entry (Shift F2) and this works in all 
! the modes, I'm simply going to disable this. 
!	'Ctrl<KeyDown>e:	key_pressed(ce)',

	'~Shift<KeyDown>0:	key_pressed(0)',	! Need upper row
	'~Shift<KeyDown>1:	key_pressed(1)',	! Other functions
	'~Shift<KeyDown>2:	key_pressed(2)',
	'~Shift<KeyDown>3:	key_pressed(3)',
	'~Shift<KeyDown>4:	key_pressed(4)',
	'~Shift<KeyDown>5:	key_pressed(5)',
	'~Shift<KeyDown>6:	key_pressed(6)',
	'~Shift<KeyDown>7:	key_pressed(7)',
	'~Shift<KeyDown>8:	key_pressed(8)',
	'~Shift<KeyDown>9:	key_pressed(9)',

	'Any<KeyDown>a:		key_pressed(ha)',
	'Any<KeyDown>b:		key_pressed(hb)',
	'~Ctrl<KeyDown>c:	key_pressed(hc)',
	'Any<KeyDown>d:		key_pressed(hd)',
	'~Ctrl<KeyDown>e:	key_pressed(he)',
	'Any<KeyDown>f:		key_pressed(hf)',

	'~Shift<KeyDown>slash:	key_pressed(/)',	! Need upper row
	'Any<KeyDown>asterisk:	key_pressed(*)',	! * symbol
	'~Shift<KeyDown>=:	key_pressed(=)',	! Need upper row
	'Any<KeyDown>plus:	key_pressed(+)',	! + symbol
	'~Shift<KeyDown>-:	key_pressed(-)',	! Need upper row

	'Any<KeyDown>asciitilde: key_pressed(not)',	! ~ symbol
	'Any<KeyDown>exclam:	key_pressed(neg)',	! ! symbol

	'Any<KeyDown>bar:	key_pressed(or)',	! | symbol
	'Any<KeyDown>ampersand:	key_pressed(and)',	! & symbol
	'Any<KeyDown>asciicircum:	key_pressed(xor)',	! ^ symbol

	'Any<KeyDown>m,Any<KeyUp>,Any<KeyDown>c:	key_pressed(mc)',
	'Any<KeyDown>m,Any<KeyUp>,Any<KeyDown>r:	key_pressed(mr)',
	'Any<KeyDown>m,Any<KeyUp>,Any<KeyDown>plus:	key_pressed(m+)',
	'Any<KeyDown>m,Any<KeyUp>,~Shift<KeyDown>-:	key_pressed(m-)',

	'~Meta<KeyDown>osfDelete:	key_pressed(delete)',
	'~Meta<KeyDown>osfBackSpace:	key_pressed(delete)',

	'Shift<KeyDown>F1:	key_pressed(c)',
	'Shift<KeyDown>F2:	key_pressed(ce)',

	'Any<KeyDown>KP_0:	key_pressed(0)',
	'Any<KeyDown>KP_1:	key_pressed(1)',
	'Any<KeyDown>KP_2:	key_pressed(2)',
	'Any<KeyDown>KP_3:	key_pressed(3)',
	'Any<KeyDown>KP_4:	key_pressed(4)',
	'Any<KeyDown>KP_5:	key_pressed(5)',
	'Any<KeyDown>KP_6:	key_pressed(6)',
	'Any<KeyDown>KP_7:	key_pressed(7)',
	'Any<KeyDown>KP_8:	key_pressed(8)',
	'Any<KeyDown>KP_9:	key_pressed(9)',

	'Any<KeyDown>KP_F1:	key_pressed(*)',
	'Any<KeyDown>KP_F2:	key_pressed(/)',

	'Any<KeyDown>KP_Subtract:	key_pressed(-)',
	'Any<KeyDown>KP_Separator:	key_pressed(+)',

	'Any<KeyDown>osfActivate:	key_pressed(=)',
	'Any<KeyDown>Return:	key_pressed(=)',
	'Any<KeyDown>Menu:	key_pressed(=)',	! The DO key

	'Shift<KeyDown>F3:	key_pressed(ha)',
	'Shift<KeyDown>F4:	key_pressed(hb)',
	'Shift<KeyDown>F5:	key_pressed(hc)',
	'Shift<KeyDown>F6:	key_pressed(hd)',
	'Shift<KeyDown>F7:	key_pressed(he)',
	'Shift<KeyDown>F8:	key_pressed(hf)',
	'Shift<KeyDown>F9:	key_pressed(not)',
	'Shift<KeyDown>F10:	key_pressed(neg)',

        'Ctrl<KeyDown>F4:       key_pressed(mc)',
        'Ctrl<KeyDown>F5:       key_pressed(mr)',
        'Ctrl<KeyDown>F6:       key_pressed(m+)',
        'Ctrl<KeyDown>F7:       key_pressed(m-)',

        'Ctrl<KeyDown>F8:       key_pressed(and)',
        'Ctrl<KeyDown>F9:       key_pressed(or)',
        'Ctrl<KeyDown>F10:      key_pressed(xor)',
        'Ctrl<KeyDown>F11:	key_pressed(nor)',

	'Any<KeyUp>:		key_released()',
	'~Help<Btn1Down>:	button_pressed()',
	'~Help<Btn1Up>:		button_released()',
	'<Leave>:		button_released()',
	'<Btn3Down>:		MenuCalled()',
	'Help<Btn1Down>:	Help()'
	);

value
!**
!** This is the translation table for octal mode.  Note that many of
!** the bindings change to accomidate the new octal functions.
!** 
! Important: (to the translators)
!
!	Pay attention the the location of the translated keys on the keyboard 
!	that your are doing the translation for.  If the key symbol is a lower
!	case key, use '~Shift<KeyDown> ' as the modifier.  Use 'Any<KeyDown> '
!	or 'Shift<KeyDown> ' for all upper cased key symbols.
!	For example:
!		use 'Any<KeyDown>slash:		key_pressed(/)'  for Norwegian Keyboard
!				and
!		use '~Shift<KeyDown>slash:	key_pressed(/)'  for US Keyboard.
!
calc_oct_translations : exported translation_table (
	'Any<KeyDown>c:	key_pressed(c)',
	'Any<KeyDown>e:	key_pressed(ce)',

	'~Shift<KeyDown>0:	key_pressed(0)',	! Need upper row
	'~Shift<KeyDown>1:	key_pressed(1)',	! Other functions
	'~Shift<KeyDown>2:	key_pressed(2)',
	'~Shift<KeyDown>3:	key_pressed(3)',
	'~Shift<KeyDown>4:	key_pressed(4)',
	'~Shift<KeyDown>5:	key_pressed(5)',
	'~Shift<KeyDown>6:	key_pressed(6)',
	'~Shift<KeyDown>7:	key_pressed(7)',

	'~Shift<KeyDown>slash:	key_pressed(/)',	! Need upper row
	'Any<KeyDown>asterisk:	key_pressed(*)',	! * symbol
	'~Shift<KeyDown>=:	key_pressed(=)',	! Need upper row
	'Any<KeyDown>plus:	key_pressed(+)',	! + symbol
	'~Shift<KeyDown>-:	key_pressed(-)',	! Need upper row

	'Any<KeyDown>asciitilde: key_pressed(not)',	! ~ symbol
	'Any<KeyDown>exclam:	key_pressed(neg)',	! ! symbol

	'Any<KeyDown>bar:	key_pressed(or)',	! | symbol
	'Any<KeyDown>ampersand:	key_pressed(and)',	! & symbol
	'Any<KeyDown>asciicircum:	key_pressed(xor)',	! ^ symbol

	'Any<KeyDown>m,Any<KeyUp>,Any<KeyDown>c:	key_pressed(mc)',
	'Any<KeyDown>m,Any<KeyUp>,Any<KeyDown>r:	key_pressed(mr)',
	'Any<KeyDown>m,Any<KeyUp>,Any<KeyDown>plus:	key_pressed(m+)',
	'Any<KeyDown>m,Any<KeyUp>,~Shift<KeyDown>-:	key_pressed(m-)',

	'~Meta<KeyDown>osfDelete:	key_pressed(delete)',
	'~Meta<KeyDown>osfBackSpace:	key_pressed(delete)',

	'Shift<KeyDown>F1:	key_pressed(c)',
	'Shift<KeyDown>F2:	key_pressed(ce)',

	'Any<KeyDown>KP_0:	key_pressed(0)',
	'Any<KeyDown>KP_1:	key_pressed(1)',
	'Any<KeyDown>KP_2:	key_pressed(2)',
	'Any<KeyDown>KP_3:	key_pressed(3)',
	'Any<KeyDown>KP_4:	key_pressed(4)',
	'Any<KeyDown>KP_5:	key_pressed(5)',
	'Any<KeyDown>KP_6:	key_pressed(6)',
	'Any<KeyDown>KP_7:	key_pressed(7)',

	'Any<KeyDown>KP_F1:	key_pressed(*)',
	'Any<KeyDown>KP_F2:	key_pressed(/)',

	'Any<KeyDown>KP_Subtract:	key_pressed(-)',
	'Any<KeyDown>KP_Separator:	key_pressed(+)',

	'Any<KeyDown>osfActivate:	key_pressed(=)',
	'Any<KeyDown>Return:	key_pressed(=)',
	'Any<KeyDown>Menu:	key_pressed(=)',	! The DO key

	'Shift<KeyDown>F9:	key_pressed(not)',
	'Shift<KeyDown>F10:	key_pressed(neg)',

        'Ctrl<KeyDown>F4:       key_pressed(mc)',
        'Ctrl<KeyDown>F5:       key_pressed(mr)',
        'Ctrl<KeyDown>F6:       key_pressed(m+)',
        'Ctrl<KeyDown>F7:       key_pressed(m-)',

        'Ctrl<KeyDown>F8:       key_pressed(and)',
        'Ctrl<KeyDown>F9:       key_pressed(or)',
        'Ctrl<KeyDown>F10:      key_pressed(xor)',
        'Ctrl<KeyDown>F11:	key_pressed(nor)',

	'Any<KeyUp>:		key_released()',
	'~Help<Btn1Down>:	button_pressed()',
	'~Help<Btn1Up>:		button_released()',
	'<Leave>:		button_released()',
	'<Btn3Down>:		MenuCalled()',
	'Help<Btn1Down>:	Help()'
	);

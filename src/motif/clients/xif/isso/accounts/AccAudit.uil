!
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
!
! @(#)$RCSfile: AccAudit.uil,v $ $Revision: 1.1.2.4 $ (DEC) $Date: 1993/10/13 19:37:48 $
!

procedure
    AccountsOpenAuditScreenCB();
    AccTmpltsOpenAuditScreenCB();
    AccAuditSelectNoCB();
    AccAuditSelectAllCB();
    AccAuditGetWidgetCB(integer);
    AccAuditSaveCB();
    AccAuditSaveNCloseCB();
    AccAuditCloseCB();

/******************************************************************************/
/* A C C O U N T / T E M P L A T E   A U D I T I N G */
/******************************************************************************/

object

    AccountAuditEventsFD: XmFormDialog 
        {
        arguments
            {
            XmNborderWidth = 1;
            XmNresizePolicy = XmRESIZE_NONE;
            XmNautoUnmanage = false; 
            XmNdialogTitle = compound_string("Audit: Modify User Audit Events");
            XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
            };
        controls
            {
            XmLabel AccAuditAccntNameLB;
            XmTextField AccAuditAccntNameTF;
            XmForm AccAuditMainFormFM;
            XmForm AccAuditProcessControlFM;
            XmRowColumn AccAuditControlPBRC;
            };
        };

    AccTmpltAuditEventsFD: XmFormDialog 
        {
        arguments
            {
            XmNborderWidth = 1;
            XmNresizePolicy = XmRESIZE_NONE;
            XmNautoUnmanage = false; 
            XmNdialogTitle = compound_string("Audit: Modify User Audit Events");
            XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
            };
        controls
            {
            XmLabel AccAuditAccntNameLB;
            XmTextField AccAuditAccntNameTF;
            XmForm AccAuditMainFormFM;
            XmForm AccAuditProcessControlFM;
            XmRowColumn AccAuditControlPBRC;
            };
        };

    AccAuditAccntNameLB: XmLabel 
        {
        arguments
            {
            XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNleftWidget = XmForm AccAuditMainFormFM;
            XmNbottomAttachment = XmATTACH_WIDGET;
            XmNbottomWidget = XmForm AccAuditMainFormFM;
            XmNbottomOffset = 25;
            XmNlabelString = compound_string("Name: ");
            };
        };

    AccAuditAccntNameTF: XmTextField 
        {
        arguments
            {
            XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
            XmNtopWidget = XmLabel AccAuditAccntNameLB;
            XmNleftAttachment = XmATTACH_WIDGET;
            XmNleftWidget = XmLabel AccAuditAccntNameLB;
            XmNleftOffset = 10;
            XmNcolumns = MAX_NAME_LENGTH;
            XmNfontList = TEXT_ENTRY_FONT;
            XmNmaxLength = MAX_NAME_LENGTH;
            XmNsensitive = false;
            XmNeditable = false;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                AccAuditGetWidgetCB(ACC_AUD_NAME);
                };
            };
        };

    AccAuditMainFormFM: XmForm 
        {
        arguments
            {
            XmNleftAttachment = XmATTACH_FORM;
            XmNleftOffset = 10;
            XmNrightAttachment = XmATTACH_FORM;
            XmNrightOffset = 10;
            XmNbottomAttachment = XmATTACH_WIDGET;
            XmNbottomWidget = XmForm AccAuditProcessControlFM;
            XmNbottomOffset = 10;
            XmNresizePolicy = XmRESIZE_NONE;
            XmNshadowThickness = 4;
            XmNshadowType = XmSHADOW_ETCHED_IN;
            };
        controls
            {
            XmLabel AccAudModSelEventLBL;
            XmForm  AccAudModSelBaseEventFRM;
            XmForm  AccAudModSelAliasEventFRM;
            XmRowColumn AccAudModSelEventSelRC;
            };
        };
    AccAudModSelEventLBL: XmLabel 
        {
        arguments
            {
            XmNlabelString = compound_string("Events");
            XmNleftAttachment = XmATTACH_FORM;
            XmNleftOffset = 10;
            XmNrightAttachment = XmATTACH_FORM;
            XmNrightOffset = 10;
            XmNtopAttachment = XmATTACH_FORM;
            XmNtopOffset = 10;
            XmNfontList = font_table(font('-*-HELVETICA-BOLD-R-*--*-140-*-*-*-*-ISO8859-1'));
            };
        };

    AccAudModSelEventSelRC: XmRowColumn
        {
        arguments
            {
            XmNborderWidth = 0;
            XmNleftAttachment = XmATTACH_FORM;
            XmNleftOffset = 95;
            XmNrightAttachment = XmATTACH_FORM;
            XmNrightOffset = 95;
            XmNbottomAttachment = XmATTACH_FORM;
            XmNbottomOffset = 10;
            XmNentryAlignment = XmALIGNMENT_CENTER;
            XmNorientation = XmHORIZONTAL;
            XmNpacking = XmPACK_COLUMN;
            };
        controls
            {
            XmPushButton AccAudModSelSelectNoPB;
            XmPushButton AccAudModSelSelectAllPB;
            };
        };

        AccAudModSelSelectNoPB: XmPushButton 
            {
            arguments
                {
                XmNlabelString = compound_string("Select NONE");
                };
            callbacks
                {
                MrmNcreateCallback = procedures
                    {
                    AccAuditGetWidgetCB(ACC_AUD_SELECT_NONE_PB);
                    };
                XmNactivateCallback = procedures
                    {
                    AccAuditSelectNoCB();
                    };
                };
            };
    AccAudModSelSelectAllPB: XmPushButton 
        {
        arguments
            {
            XmNlabelString = compound_string("Select ALL");
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                AccAuditGetWidgetCB(ACC_AUD_SELECT_ALL_PB);
                };
            XmNactivateCallback = procedures
                {
                AccAuditSelectAllCB();
                };
            };
        };

    AccAudModSelBaseEventFRM: XmForm
	{
	arguments
	    {
            XmNleftAttachment = XmATTACH_FORM;
            XmNrightAttachment = XmATTACH_FORM;
            XmNleftOffset = 10;
            XmNrightOffset = 10;
            XmNtopAttachment = XmATTACH_WIDGET;
            XmNtopWidget = XmLabel AccAudModSelEventLBL;
            XmNbottomAttachment = XmATTACH_WIDGET;
            XmNbottomWidget = XmForm AccAudModSelAliasEventFRM;
	    XmNresizePolicy = XmRESIZE_NONE;
            };
	controls
	    {
		user_defined AccAudModSelBaseEventSLTB;
	    } ;
	};

    AccAudModSelAliasEventFRM: XmForm
	{
	arguments
	    {
            XmNleftAttachment = XmATTACH_FORM;
            XmNrightAttachment = XmATTACH_FORM;
            XmNleftOffset = 10;
            XmNrightOffset = 10;
            XmNtopAttachment = XmATTACH_POSITION;
            XmNtopPosition = 50;
            XmNbottomAttachment = XmATTACH_WIDGET;
            XmNbottomWidget = XmRowColumn AccAudModSelEventSelRC;
            XmNbottomOffset = 5;
	    XmNresizePolicy = XmRESIZE_NONE;
            };
	controls
	    {
		user_defined AccAudModSelAliasEventSLTB;
	    };
	};

    AccAudModSelBaseEventSLTB: user_defined procedure XmCreateSelectListTB
        {
        arguments
            {
            XmNrightAttachment = XmATTACH_POSITION;
            XmNbottomAttachment = XmATTACH_FORM;
            XmNleftAttachment = XmATTACH_FORM;
            XmNrightPosition = 43;
            XmNvisibleItemCount = 7;
            XmNselectionPolicy = XmSINGLE_SELECT;
            XmNscrollBarDisplayPolicy = XmSTATIC;
            XmNalphabetizeListTBs = true;
	    XmNselectListTBLabelString = "Selected Base/Site";
            XmNavailableListTBLabelString = "Available Base/Site";
            XmNselectListTBOnLabelString = "S ";
            XmNselectListTBOffLabelString = " F  ";
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                AccAuditGetWidgetCB(ACC_AUD_BASE_EVENTS);
                };
            };
        };
    AccAudModSelAliasEventSLTB: user_defined procedure XmCreateSelectListTB
        {
        arguments
            {
            XmNrightAttachment = XmATTACH_POSITION;
            XmNrightPosition = 43;
            XmNbottomAttachment = XmATTACH_FORM;
            XmNleftAttachment = XmATTACH_FORM;
            XmNvisibleItemCount = 7;
            XmNselectionPolicy = XmSINGLE_SELECT;
            XmNscrollBarDisplayPolicy = XmSTATIC;
            XmNalphabetizeListTBs = true;
	    XmNselectListTBLabelString = "Selected Aliases";
            XmNavailableListTBLabelString = "Available Aliases";
            XmNselectListTBOnLabelString = "S ";
            XmNselectListTBOffLabelString = " F  ";
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                AccAuditGetWidgetCB(ACC_AUD_ALIAS_EVENTS);
                };
            };
        };

/******************************************************************************/
/* A C C O U N T / T E M P L A T E   P R O C E S S / S Y S T E M   C N T R L  */
/******************************************************************************/
   AccAuditProcessControlFM: XmForm 
      {
      arguments
          {
          XmNbottomAttachment = XmATTACH_WIDGET;
          XmNbottomOffset = 25;
          XmNleftAttachment = XmATTACH_FORM;
          XmNleftOffset = 10;
          XmNrightAttachment = XmATTACH_FORM;
          XmNrightOffset = 10;
          XmNbottomWidget = XmRowColumn AccAuditControlPBRC;
          XmNshadowThickness = 4;
          XmNshadowType = XmSHADOW_ETCHED_IN;
          };
      controls
          {
          XmLabel AccAuditProcessControlLBL;
          XmRowColumn AccAuditProcessControlRC;
          };
       };

    AccAuditProcessControlLBL: XmLabel
        {
        arguments
            {
            XmNtopAttachment = XmATTACH_FORM;
            XmNtopOffset = 10;
            XmNbottomAttachment = XmATTACH_WIDGET;
            XmNbottomWidget = XmRowColumn AccAuditProcessControlRC;
            XmNbottomOffset = 25;
            XmNleftAttachment = XmATTACH_FORM;
            XmNleftOffset = 10;
            XmNrightAttachment = XmATTACH_FORM;
            XmNrightOffset = 10;
            XmNlabelString = compound_string("System Mask Audit Control");
            XmNfontList = BIG_LABEL_FONT;
            };
        };

   AccAuditProcessControlRC: XmRowColumn
        {
        arguments
            {
            XmNbottomAttachment = XmATTACH_FORM;
            XmNbottomOffset = 10;
            XmNleftAttachment = XmATTACH_FORM;
            XmNleftOffset = 25;
            XmNpacking = XmPACK_COLUMN;
            XmNorientation = XmVERTICAL;
            XmNnumColumns = 2;
            XmNspacing = 0;
            XmNmarginHeight = 0;
            XmNradioBehavior = true;
            };
        controls
            {
            XmToggleButton AccAuditAndCntrlTB;
            XmToggleButton AccAuditOrCntrlTB;
            XmToggleButton AccAuditUserCntrlTB;
            XmToggleButton AccAuditOffCntrlTB;
            };
        };

    AccAuditAndCntrlTB: XmToggleButton
        {
        arguments
            {
            XmNlabelString = compound_string("AND User Mask");
            XmNfontList = TOGGLE_BUTTON_FONT;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                AccAuditGetWidgetCB(ACC_AUD_AND_MASK);
                };
            };
        };
    AccAuditOrCntrlTB: XmToggleButton
        {
        arguments
            {
            XmNlabelString = compound_string("OR User Mask");
            XmNfontList = TOGGLE_BUTTON_FONT;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                AccAuditGetWidgetCB(ACC_AUD_OR_MASK);
                };
            };
        };
    AccAuditUserCntrlTB: XmToggleButton
        {
        arguments
            {
            XmNlabelString = compound_string("Use USER Mask");
            XmNfontList = TOGGLE_BUTTON_FONT;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                AccAuditGetWidgetCB(ACC_AUD_USER_MASK);
                };
            };
        };
    AccAuditOffCntrlTB: XmToggleButton
        {
        arguments
            {
            XmNlabelString = compound_string("USER Mask OFF");
            XmNfontList = TOGGLE_BUTTON_FONT;
            };
        callbacks
            {
            MrmNcreateCallback = procedures
                {
                AccAuditGetWidgetCB(ACC_AUD_OFF_MASK);
                };
            };
        };

/******************************************************************************/
/* A C C O U N T / T E M P L A T E   A U D I T I N G   C O N T R O L   P B S  */
/******************************************************************************/

   AccAuditControlPBRC: XmRowColumn
      {
      arguments
          {
          XmNleftAttachment = XmATTACH_POSITION;
          XmNleftPosition = 22;
          XmNbottomAttachment = XmATTACH_FORM;
          XmNbottomOffset = 10;
          XmNentryAlignment = XmALIGNMENT_CENTER;
          XmNorientation = XmHORIZONTAL;
          XmNpacking = XmPACK_COLUMN;
          };
      controls
          {
          XmPushButton AccAuditControlOKPB;
          XmPushButton AccAuditControlApplyPB;
          XmPushButton AccAuditControlCancelPB;
          XmPushButton AccAuditControlHelplPB;
          };
      };
   AccAuditControlOKPB: XmPushButton
      {
      arguments
          {
          XmNlabelString = compound_string("OK");
          };
      callbacks
          {
          MrmNcreateCallback = procedures
              {
              AccAuditGetWidgetCB(ACC_AUD_OK_PB);
              };
          XmNactivateCallback = procedures
              {
              AccAuditSaveNCloseCB();
              };
          };
      };
   AccAuditControlApplyPB: XmPushButton
      {
      arguments
          {
          XmNlabelString = compound_string("Apply");
          };
      callbacks
          {
          MrmNcreateCallback = procedures
              {
              AccAuditGetWidgetCB(ACC_AUD_APPLY_PB);
              };
          XmNactivateCallback = procedures
              {
              AccAuditSaveCB();
              };
          };
      };
   AccAuditControlCancelPB: XmPushButton
      {
      arguments
          {
          XmNlabelString = compound_string("Cancel");
          };
      callbacks
          {
          MrmNcreateCallback = procedures
              {
              AccAuditGetWidgetCB(ACC_AUD_CANCEL_PB);
              };
          XmNactivateCallback = procedures
              {
              AccAuditCloseCB();
              };
          };
      };
   AccAuditControlHelplPB: XmPushButton
      {
      arguments
          {
          XmNlabelString = compound_string("Help");
          };
      callbacks
          {
          MrmNcreateCallback = procedures
              {
              AccAuditGetWidgetCB(ACC_AUD_HELP_PB);
              };
          XmNactivateCallback = procedures
              {
              IssoHelpCB(AUDIT_FIELD_BOX);
              };
          };
      };

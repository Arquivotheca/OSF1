!+
!  #module decterm "V3.0"
!
!  Title:  decterm.uil
!
! *
! *  +------------------------------------------------------------------------+
! *  | Copyright © Digital Equipment Corporation, 1988, 1993  All Rights      |
! *  | Reserved.  Unpublished rights reserved under the copyright laws of     |
! *  | the United States.                                                     |
! *  |                                                                        |
! *  | The software contained on this media is proprietary to and embodies    |
! *  | the confidential technology of Digital Equipment Corporation.          |
! *  | Possession, use, duplication or dissemination of the software and      |
! *  | media is authorized only pursuant to a valid written license from      |
! *  | Digital Equipment Corporation.                                         |
! *  |                                                                        |
! *  | RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure by the      |
! *  | U.S. Government is subject to restrictions as set forth in             |
! *  | Subparagraph (c)(1)(ii) of DFARS 252.227-7013, or in FAR 52.227-19,    |
! *  | as applicable.                                                         |
! *  |                                                                        |
! *  | The information in this software is subject to change  without  notice |
! *  | and  should  not  be  construed  as  a commitment by Digital Equipment |
! *  | Corporation.                                                           |
! *  |                                                                        |
! *  | DIGITAL assumes no responsibility for the use or  reliability  of  its |
! *  | software on equipment which is not supplied by DIGITAL.                |
! *  +------------------------------------------------------------------------+
! *
!
!  Module Abstract:
!
!	DECterm UIL specification file for:
!           window setup
!           display setup
!           general setup
!           keyboard setup
!
!  Author:	Peter Sichel       3-Apr-1988
!
!  Modification history:
!
!  Alfred von Campe     09-Dec-1993     BL-E
!       - Remove accelerators.
!
!  Alfred von Campe     15-Oct-1993     BL-E
!       - Update with latest changes from VMS UIL file.
!
!  Grace Chung		15-Sep-1993	BL-E
!	- Add 7-bit/8-bit printer support
!
!  Alfred von Campe     05-Nov-1992	Ag/BL11
!       - Merge HyperHelp support from VMS uil file.
!       - Merge 7-bit NRCS fix from VMS uil file.
!
!  Alfred von Campe     06-Oct-1991     Hercules/1 T0.7
!       - Merge secure keyboard and quickcopy features from ULTRIX.
!
!  Alfred von Campe     24-May-1991     V3.0
!       - Don't specify a glossary topic for the Help widgets.
!
!  Alfred von Campe     15-May-1991     V3.0
!       - Modify menu names to conform to DECwindows Motif standards and fix
!         other non-compliant items per Tom Spine's suggestions.
!       - Fix context sensitive help.
!       - Fix Window & Print dialog box traversal oddities.
!       - Update help widget syntax for EFT2.
!
!  Alfred von Campe     24-Apr-1991     V3.0
!       - Change 7-Bit NRCS Selection, Graphics, and Printer dialog boxes to
!         XmFormDialog.
!       - Change often-used values to constants (defined in DECTERM_DEF.UIL).
!       - Place children of all dialog boxes in XmForms.
!       - Miscellaneous and cosmetic fixes for Motif compliance.
!
!  Alfred von Campe     13-Apr-1991     V3.0
!       - Clean up Display, General, and Keyboard dialog boxes.
!       - Change Keyboard and Version dialog boxes to XmFormDialog.
!       - Remove x-y coordinate dependencies for I18N.
!       - Other miscellaneous fixes.
!
!  Alfred von Campe     12-Apr-1991     V3.0
!       - Split file in two to separate translatable text from object
!         declarations (for I18N).
!       - Add gadget declarations for XmArrowButton, XmCascadeButton, XmLabel,
!         and XmPushButton to module header.
!       - Change Window dialog box from XmBulletinBoard to XmForm and fix the
!         pushbutton sizes.
!       - Update Print Widget syntax.
!
!  Alfred von Campe     04-Apr-1991     V3.0
!       - Add two dialog boxes for paste error messages.
!       - Update copyright date from 1990 to 1991.
!
!  Eric Osman		28-Jan-1991	DECwindows V3, EFT
!	- Fix ok and cancel callbacks on print widget
!
!  Jim Bay		11-Jan-1991	 T3.0
!	- Made queued printer option dialog box modeless
!	- Removed mnemonics for Ok, Cancel, Help
!	- Updated version to T3.0 for external field test
!
!  Jim Bay		12-Dec-1990	X3.0-8
!	- Added XmNmenuAccelerator key definition to menu bar
!
!  Jim Bay		20-Nov-1990	X3.0-8
!	- Changed widgets to gadgets
!
!  Jim Bay		25-Oct-1990	X3.0-7
!	- Updated copyright notice to comply with copyright guidelines
!
!  Bob Messenger	15-Sep-1990	X3.0-7
!	- Add German Standard Font button.
!
!  Bob Messenger	26-Jul-1990	X3.0-5
!	- Create the print widget as a built in widget, rather than as a
!	  user-defined widget.
!
!  Mark Woodbury	17-July-1990	X3.0-5
!  - Added XmNshowAsDefault to the OK pushbuttons.  Without this they do not
!    get the default highlight border in Forms.  (Seems to work without it in
!    bulletinboards.)
!
!  Bob Messenger	 7-Sep-1990	X3.0-6
!	- Change XmNlabelString to XmNfileListLabelString in file selection
!	  widget.
!
!  Bob Messenger	 4-Jul-1990	X3.0-5
!	- Added printer port support.
!	- Fixed up some of the comments.
!
!  Mark Woodbury	3-July-1990	X3.0-5
!  - Add attached dialog box for options window, display, and general dialog
!    boxes.
!    There has been no code added to the c programs for tab groups.  It
!    appears that if you use the correct widget type the window manager gives
!    you tab groups.
!
!    Made all gadgets widget until BL5.  The toolkit has problems with
!    gadgets in BL4.
!
!  Mark Woodbury	12-March-1990	X3.0-3M
!	- Motif conversion
!     The menu bar changes for Motif to match style guide mnemonic rules.
!     added dialect_create_cb
!	  the file selection widgets need XmNtestValue to work
!	  the text widgets need the XmNscrollHorizontal/Vertical to work
!
! Note: all entries prior to 12-mar-1990 dealt with the XUI version of
!       decterm.  the motif conversion ulities have changed some of the
!       text to the new motif names so it looks like the code has
!       always been motif.  No time to change them back.  Mark
!
!  Bob Messenger	12-Mar-1990	V2.1
!	- Change copyright to 1988, 1990
!
!  Bob Messenger	12-Aug-1989	X2.0-19
!	- Change copyright to 1988, 1989
!	- Use 'DECterm: XXXX' instead of 'Customize XXXX' for dialog box
!	  titles.
!	- Increase XmNlistSpacing between toggle buttons to 12.
!	- Make labels line up with text widgets.
!
!  Bob Messenger	 5-Jun-1989	X2.0-13
!	- Use gadgets for pulldown entries.
!
!  Bob Messenger	26-May-1989	X2.0-13
!	- Update copyright date to 1989.
!
!  Bob Messenger	13-May-1989	X2.0-10
!	- Add exported values for the default title and copyright notices,
!	  so they can be translated.
!
!  Bob Messenger	22-Apr-1989	X2.0-7
!	- Don't use attached dialog boxes (causes Use Saved Settings From...
!	  to hang on Ultrix).
!
!  Bob Messenger	 8-Apr-1989	X2.0-6
!	- Add hooks for context sensitive help.
!
!  Bob Messenger	 7-Apr-1989	X2.0-6
!	- Make NN Bit Planes sensitive.
!
!  Bob Messenger	 5-Apr-1989	X2.0-5
!	- Make Enable Backing Store sensitive
!
!  Bob Messenger	 1-Apr-1989	X2.0-5
!	- Make Terminal Driver Resize, Window Title, Icon Name and Record NNNN
!	  Lines Off Top sensitive.  Move Icon Name down a little in Customize
!	  Window.
!
!  Bob Messenger	31-Mar-1989	X2.0-5
!	- Make Share Color Map Entries sensitive.  Make Customize Graphics
!	  Cancel a gadget.
!
!  Bob Messenger	18-Mar-1989	X2.0-3
!	- Update with V2 user interface; add graphics setup.  Remove
!	  value_changed callbacks.
!
!  Bob Messenger	15-Feb-1989	X1.1-1
!	- Change "Dismiss" back to "Cancel"
!
!  Tom Porcher		14-Sep-1988	X0.5-2
!	- Add copyright_callback as XmNmapCallback callback to all pulldown menus.
!
!  Tom Porcher		15-Aug-1988	X0.4-43
!	- remove keyclick from Customize/Keyboard.
!	- add Ctrl-Q/S = Hold.
!
!  Tom Porcher		15-Aug-1988	X0.4-43
!	- remove label_label  argument from XmPulldownMenu widgets.
!	  These are not needed and now cause UIL warnings.
!	- add XmNmaxLength arguments to XmText widgets in Customize/Window.
!	  This fixes the problems with entering numbers larger than four digits.
!	- add XmNscrollVertical and XmNscrollHorizontal (false) arguments to
!	  XmText widgets.  This fixes the problem that you get a scroll
!	  bar if you say "DECW$TERMINAL*scrollVertical: on" in Xdefaults!
!
!  Peter Sichel         29-Jun-1988    X0.4-32
!       - converted pulldown menus, fixed labels, and
!         non-default push-buttons to gadgets.
!
!  Eric Osman (uh oh!)	28-Jun-1988    X0.4-32
!	- Collapse open and save into one of each, rather than
!	  ultrix and vms versions.  Remove XmNdirMask, since we set
!	  it at run-time.
!
!  Peter Sichel          8-Jun-1988    X0.4-31
!       - changed "Keyboard Dialect Set-Up" to "7-bit NRCS Selection"
!         to accomodate V1 Xlib restrictions.
!         Commented out Keyboard Usage Mode radio box.
!         Made help menu the menu bar help widget (right justified).
!         Eliminated File menu, put selections under customize & commands
!
!  Peter Sichel         30-May-1988    X0.4-30
!       - Added help menu with "show version" and "about decterm"
!
!  Tom Porcher		11-May-1988	X0.4-26
!	- Added "Clear Comm".
!
!  Peter Sichel         3-May-1988      X0.4-14
!       - Commented out VT340 VT320 in Terminal ID radio box
!
!  Peter Sichel         22-Apr-1988     X0.4-10
!       - Moved save_lines_off_top from commands menu
!         to window setup.  Commented out un-implemented widgets.
!         Added text input for rows and columns to window setup.
!
! Tom Porcher	    	20-Apr-1988	X0.4-10
!	- Corrected name of default path on VMS to be "DECW$USER_DEFAULTS:".
!
!  Peter Sichel         14-Apr-1988     X0.4-8
!       added file XmSelectionDialog dialog boxes
!
!  Peter Sichel         10-Apr-1988     X0.4-8
!       added application menubar
!
!-

module decterm
    version = 'V3.0'
    names   = case_sensitive
    objects = { XmArrowButton = gadget;
                XmCascadeButton = gadget;
                XmLabel = gadget;
                XmPushButton = gadget;
                XmSeparator = gadget;
		XmToggleButton = gadget;
	      }

include file 'decterm_def.uil';


!+
!
! declare callback procedures
!
!-
!+
! callbacks for menubar
!-
procedure

    copyright_callback       ();
    file_new_cb              ();
    file_open_cb             ();
    file_save_cb             ();
    file_saveas_cb           ();
    file_revert_cb           ();
    file_exit_cb             ();
    edit_copy_cb             ();
    edit_paste_cb            ();
    edit_selectall_cb        ();
    commands_clearlinesofftop_cb ();
    commands_resizewindow_cb ();
    commands_resetterminal_cb();
    commands_cleardisplay_cb ();
    commands_clearcomm_cb    ();
    is_printer_supported_cb  ();
    commands_map_cb          ();
    commands_secure_cb       ();
    setup_window_cb          ();
    setup_display_cb         ();
    setup_general_cb         ();
    setup_keyboard_cb        ();
    setup_keyboarddialect_cb ();
    setup_tabs_cb            ();
    setup_graphics_cb        ();
    setup_printer_cb         ();
    print_page_cb            ();
    print_selected_cb        ();
    print_all_cb             ();
    print_graphics_cb        ();
    finish_printing_cb       ();
    cancel_printing_cb       ();
    help_show_version_cb     ();
    show_version_label_cb    ();
    show_version_acknowledge_cb ();
    help_about_cb            ();
    on_context_cb            ();
    on_help_cb               ();
    help_overview_cb         ();
    cs_help_cb               ( compound_string );
    help_activate_proc	     (integer);
    help_system_proc	     (string);
    options_cb		     ();
    save_options_cb	     ();
!+
! callbacks for window setup widgets
!-
    big_font_set_cb          ();
    little_font_set_cb       ();
    gs_font_set_cb           ();
    big_font_default_create_cb();
    big_font_other_create_cb();
    big_font_other_arm_cb();
    big_font_name_create_cb();
    big_font_name_focus_cb();
    little_font_default_create_cb();
    little_font_other_create_cb();
    little_font_other_arm_cb();
    little_font_name_create_cb();
    little_font_name_focus_cb();
    gs_font_default_create_cb();
    gs_font_other_create_cb();
    gs_font_other_arm_cb();
    gs_font_name_create_cb();
    gs_font_name_focus_cb();
    normal_font_cb           ();
    condensed_font_cb        ();
    variable_font_cb         ();
    rows_text_cb             ();
    rows_24_cb               ();
    rows_48_cb               ();
    rows_72_cb               ();
    columns_text_cb          ();
    columns_80_cb            ();
    columns_132_cb           ();
    auto_resize_terminal_cb  ();
    auto_resize_window_cb    ();
    terminal_driver_resize_cb();
    window_title_cb          ();
    icon_name_cb             ();
    window_ok_cb             ();
    window_apply_cb          ();
    window_cancel_cb         ();
!+
! callbacks for display setup widgets
!-
    display_ok_cb         ();
    display_apply_cb      ();
    display_cancel_cb     ();
    save_lines_off_top_cb ();
    scroll_horizontal_cb  ();
    scroll_vertical_cb    ();
    coupling_horizontal_cb();
    coupling_vertical_cb  ();
    auto_wrap_cb          ();
    display_cursor_cb     ();
    cursor_blink_cb       ();
    light_text_cb         ();
    dark_text_cb          ();
    block_cursor_cb       ();
    underline_cursor_cb   ();
    no_status_display_cb  ();
    host_status_display_cb();
    batch_scroll_cb       ();
    transcript_size_cb    ();
!+
! callbacks for general setup widgets
!-
    general_ok_cb        ();
    general_apply_cb     ();
    general_cancel_cb    ();
    newline_cb           ();
    udk_locked_cb        ();
    features_locked_cb   ();
    local_echo_cb	 ();
    normal_cursor_keys_cb();
    appl_cursor_keys_cb  ();
    decterm_id_cb        ();
    vt340_id_cb          ();
    vt330_id_cb          ();
    vt320_id_cb          ();
    vt240_id_cb          ();
    vt220_id_cb          ();
    vt125_id_cb          ();
    vt102_id_cb          ();
    vt101_id_cb          ();
    vt100_id_cb          ();
    numeric_keypad_cb    ();
    appl_keypad_cb       ();
    upss_dec_cb          ();
    upss_iso_cb          ();
    upss_dec_turkish_cb	 ();
    upss_iso_turkish_cb	 ();
    upss_dec_greek_cb	 ();
    upss_iso_greek_cb	 ();
    upss_radio_create_cb ();
    eight_bit_cb         ();
    seven_bit_cb         ();
    vt300_8bitc_mode_cb  ();
    vt300_7bitc_mode_cb  ();
    vt100_mode_cb        ();
    vt52_mode_cb         ();
    answerback_message_cb();
    conceal_answerback_cb();
    erase_answerback_cb();
    change_conceal_answerback_cb();
    toggle_conceal_answerback_cb();
!+
! callbacks for keyboard setup widgets
!-
    warning_bell_cb      ();
    margin_bell_cb       ();
    auto_repeat_cb       ();
    control_QS_hold_cb   ();
    allow_quickcopy_cb   ();
    backarrow_BS_cb      ();
    backarrow_DEL_cb     ();
    comma_comma_cb       ();
    comma_angle_cb       ();
    f11_f11_cb		 ();
    f11_escape_cb	 ();
    tilde_tilde_cb       ();
    tilde_escape_cb      ();
    angle_angle_cb       ();
    angle_tilde_cb       ();
    keyboard_ok_cb       ();
    keyboard_apply_cb    ();
    keyboard_cancel_cb   ();
!+
! callbacks for keyboard dialect setup widgets
!-
    dialect_create_cb            ();
    dialect_ok_cb                ();
    dialect_apply_cb             ();
    dialect_cancel_cb            ();
!+
! callbacks for graphics setup widgets
!-
    share_colormap_entries_cb    ();
    enable_backing_store_cb      ();
    macrograph_report_cb         ();
    bit_planes_text_cb           ();
    graphics_ok_cb               ();
    graphics_apply_cb            ();
    graphics_cancel_cb           ();
!+
! callbacks for printer setup widgets
!-
    queued_printer_cb            ();
    printer_port_cb              ();
    printer_file_cb              ();
    printer_none_cb              ();
    queued_printer_options_cb    ();
    printer_port_text_cb         ();
    printer_file_text_cb         ();
    normal_print_cb              ();
    auto_print_cb                ();
    printer_controller_cb        ();
    print_full_page_cb           ();
    print_full_page_transcript_cb();
    print_scroll_region_cb       ();
    print_selection_cb           ();
    print_national_cb            ();
    print_national_line_drawing_cb();
    print_all_characters_cb      ();
    form_feed_terminator_cb      ();
    printer_to_host_cb           ();
    graphics_printing_cb         ();
    background_printing_cb       ();
    level_1_sixel_cb             ();
    level_2_sixel_cb             ();
    la210_sixel_cb               ();
    compressed_printing_cb       ();
    expanded_printing_cb         ();
    rotated_printing_cb          ();
    monochrome_printing_cb       ();
    color_printing_cb            ();
    printer_7bit_cb              ();	  
    printer_8bit_cb              ();	  
    hls_syntax_cb                ();
    rgb_syntax_cb                ();
    printer_ok_cb                ();
    printer_apply_cb             ();
    printer_cancel_cb            ();
!+
! Callbacks for queued printer options dialog box
!-
    print_widget_create_cb       ();
    print_widget_ok_cb           ();
    print_widget_cancel_cb       ();
!+
! callbacks for file selection widgets
!-
    file_open_fs_cb              ();
    file_saveas_fs_cb            ();
    file_open_create_cb		 ();
    file_saveas_create_cb	 ();
!+
! callbacks for message box widgets
!-
    warn_window_cb		 ();


!-------------------------------------------------------------------------------
!+
! Define warning boxes.
!-
object file_read_warning: XmInformationDialog widget {
    arguments {
        XmNdialogTitle = WarningBoxTitleText;
	XmNdefaultPosition = true;
	XmNmessageString = FileReadWarningText;
    };
    callbacks {
	XmNokCallback = procedure warn_window_cb();
    };
};

object printer_open_warning: XmInformationDialog widget {
    arguments {
        XmNdialogTitle = WarningBoxTitleText;
	XmNdefaultPosition = true;
	XmNmessageString = PrinterOpenWarningText;
    };
    callbacks {
	XmNokCallback = procedure warn_window_cb();
    };
};

object file_write_warning: XmInformationDialog widget {
    arguments {
        XmNdialogTitle = WarningBoxTitleText;
	XmNdefaultPosition = true;
	XmNmessageString = FileWriteWarningText;
    };
    callbacks {
	XmNokCallback = procedure warn_window_cb();
    };
};

object cant_set_type_warning: XmInformationDialog widget {
    arguments{
        XmNdialogTitle = WarningBoxTitleText;
	XmNdefaultPosition = true;
	XmNmessageString = CantSetTypeWarningText;
    };
    callbacks {
	XmNokCallback = procedure warn_window_cb();
    };
};

object find_font_warning: XmInformationDialog widget {
    arguments{
        XmNdialogTitle = WarningBoxTitleText;
	XmNdefaultPosition = true;
	XmNmessageString = FindFontWarningText;
    };
    callbacks {
	XmNokCallback = procedure warn_window_cb();
    };
};

object cant_lock_clipboard_warning: XmInformationDialog widget {
    arguments {
        XmNdialogTitle = WarningBoxTitleText;
	XmNdefaultPosition = true;
	XmNmessageString = CantLockClipbopardWarningText;
    };
    callbacks {
	XmNokCallback = procedure warn_window_cb();
    };
};

object cant_paste_warning: XmInformationDialog widget {
    arguments {
        XmNdialogTitle = WarningBoxTitleText;
	XmNdefaultPosition = true;
	XmNmessageString = CantPasteWarningText;
    };
    callbacks {
	XmNokCallback = procedure warn_window_cb();
    };
};

!+
! Define menubar
! Define <ctrl>F10 as menuAccelerator so that F10 is released by
! Motif to be processed by the application
!-
object decterm_mb: XmMenuBar
    {
    arguments
        {
        XmNorientation = XmHORIZONTAL;
        XmNspacing = 1;
        XmNmenuHelpWidget = XmCascadeButton help_menu_entry;
	XmNmenuAccelerator = 'Ctrl<Key>F10:';
        };
    controls
        {
        XmCascadeButton file_menu_entry;
        XmCascadeButton edit_menu_entry;
        XmCascadeButton commands_menu_entry;
        XmCascadeButton setup_menu_entry;
	XmCascadeButton print_menu_entry;
        XmCascadeButton help_menu_entry;
        };
    callbacks
	{
	XmNhelpCallback = procedure help_system_proc( menu_cs_help );
  	};
    };


! file menu
object file_menu_entry: XmCascadeButton
    {
    arguments
        {
        XmNlabelString = FileMenuName;
	XmNmnemonic = FileMenuMnemonic;
        };
    controls
        {
        XmPulldownMenu file_menu;
        };
    callbacks
	{
	XmNhelpCallback = procedure help_system_proc( file_entry_cs_help );
	};
    };

object file_menu: XmPulldownMenu
    {
    arguments
        {
        XmNtearOffModel = XmTEAR_OFF_ENABLED;
        };
    controls
        {
        XmPushButton file_exit_pb;
        };
    callbacks
        {
        XmNmapCallback = procedure copyright_callback();
        };
    };

object file_exit_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = FileExitPBName;
	XmNmnemonic = FileExitPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure file_exit_cb();
	XmNhelpCallback = procedure help_system_proc( exit_cs_help );
        };
    };

!------------------------------------------------------------------------------
! edit menu
object edit_menu_entry: XmCascadeButton
    {
    arguments
        {
        XmNlabelString = EditMenuName;
	XmNmnemonic = EditMenuMnemonic;
        };
    controls
        {
        XmPulldownMenu edit_menu;
        };
    callbacks
	{
	XmNhelpCallback = procedure help_system_proc( edit_entry_cs_help );
	};
    };

object edit_menu: XmPulldownMenu
    {
    arguments
        {
        XmNtearOffModel = XmTEAR_OFF_ENABLED;
        };
    controls
        {
        XmPushButton edit_copy_pb;
        XmPushButton edit_paste_pb;
        XmSeparator  edit_menu_separator;
        XmPushButton edit_selectall_pb;
        };
    callbacks
        {
        XmNmapCallback = procedure copyright_callback();
        };
    };

object edit_copy_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = EditCopyPBName;
	XmNmnemonic = EditCopyPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure edit_copy_cb();
	XmNhelpCallback = procedure help_system_proc( copy_cs_help );
        };
    };

object edit_paste_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = EditPastePBName;
	XmNmnemonic = EditPastePBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure edit_paste_cb();
	XmNhelpCallback = procedure help_system_proc( paste_cs_help );
        };
    };

object edit_menu_separator: XmSeparator
    {
    };

object edit_selectall_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = EditSelectAllPBName;
	XmNmnemonic = EditSelectAllPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure edit_selectall_cb();
	XmNhelpCallback = procedure help_system_proc( selectall_cs_help );
        };
    };

!------------------------------------------------------------------------------
! commands menu
object commands_menu_entry: XmCascadeButton
    {
    arguments
        {
        XmNlabelString = CommandsMenuName;
	XmNmnemonic = CommandsMenuMnemonic;
        };
    controls
        {
        XmPulldownMenu commands_menu;
        };
    callbacks
	{
	XmNhelpCallback = procedure help_system_proc( commands_entry_cs_help );
	};
    };

object commands_menu: XmPulldownMenu
    {
    arguments
        {
        XmNtearOffModel = XmTEAR_OFF_ENABLED;
        };
    controls
        {
	XmToggleButton commands_secure_tb;
	XmSeparator commands_separator;
        XmPushButton commands_clearlinesofftop_pb;
        XmPushButton commands_cleardisplay_pb;
        XmPushButton commands_resizewindow_pb;
        XmPushButton commands_clearcomm_pb;
        XmPushButton commands_resetterminal_pb;
        };
    callbacks
        {
        XmNmapCallback = procedure commands_map_cb();
        };
    };

object commands_secure_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = CommandsSecureTBName;
	XmNmnemonic = CommandsSecureTBMnemonic;
        };
    callbacks
        {
	MrmNcreateCallback = procedure commands_secure_cb();
	XmNhelpCallback = procedure help_system_proc( securekeyboard_cs_help );
	XmNvalueChangedCallback = procedure commands_secure_cb();
        };
    };

object commands_separator: XmSeparator
    {
    };

object commands_clearlinesofftop_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = CommandsClearLinesOffTopPBName;
	XmNmnemonic = CommandsClearLinesOffTopPBMnemonic;
        };
    callbacks
        {
	XmNactivateCallback = procedure commands_clearlinesofftop_cb();
	XmNhelpCallback = procedure help_system_proc( clearlinesofftop_cs_help );
        };
    };

object commands_cleardisplay_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = CommandsClearDisplayPBName;
	XmNmnemonic = CommandsClearDisplayPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure commands_cleardisplay_cb();
	XmNhelpCallback = procedure help_system_proc( cleardisplay_cs_help );
        };
    };

object commands_resizewindow_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = CommandsResizeWindowPBName;
	XmNmnemonic = CommandsResizeWindowPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure commands_resizewindow_cb();
	XmNhelpCallback = procedure help_system_proc( resizewindow_cs_help );
        };
    };

object commands_clearcomm_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = CommandsClearCommPBName;
	XmNmnemonic = CommandsClearCommPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure commands_clearcomm_cb();
	XmNhelpCallback = procedure help_system_proc( clearcomm_cs_help );
        };
    };

object commands_resetterminal_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = CommandsResetTerminalPBName;
	XmNmnemonic = CommandsResetTerminalPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure commands_resetterminal_cb();
	XmNhelpCallback = procedure help_system_proc( resetterminal_cs_help );
        };
    };

!------------------------------------------------------------------------------
! setup menu
object setup_menu_entry: XmCascadeButton
    {
    arguments
        {
        XmNlabelString = OptionsMenuName;
	XmNmnemonic = OptionsMenuMnemonic;
        };
    controls
        {
        XmPulldownMenu setup_menu;
        };
    callbacks
	{
	XmNhelpCallback = procedure help_system_proc( customize_entry_cs_help );
	};
    };

object setup_menu: XmPulldownMenu
    {
    arguments
        {
        XmNtearOffModel = XmTEAR_OFF_ENABLED;
        };
    controls
        {
        XmPushButton setup_window_pb;
        XmPushButton setup_display_pb;
        XmPushButton setup_general_pb;
        XmPushButton setup_keyboard_pb;
        XmPushButton setup_keyboarddialect_pb;
        XmPushButton setup_graphics_pb;
	XmPushButton setup_printer_pb;
        XmSeparator  setup_menu_separator;
        XmPushButton file_save_pb;
        XmPushButton file_revert_pb;
        XmPushButton file_saveas_pb;
        XmPushButton file_open_pb;
        XmPushButton file_new_pb;
        };
    callbacks
        {
        XmNmapCallback = procedure copyright_callback();
        };
    };

object setup_window_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = OptionsWindowPBName;
	XmNmnemonic = OptionsWindowPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure setup_window_cb();
	XmNhelpCallback = procedure help_system_proc( window_button_cs_help );
        };
    };

object setup_display_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = OptionsDisplayPBName;
	XmNmnemonic = OptionsDisplayPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure setup_display_cb();
	XmNhelpCallback = procedure help_system_proc( display_button_cs_help );
        };
    };

object setup_general_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = OptionsGeneralPBName;
	XmNmnemonic = OptionsGeneralPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure setup_general_cb();
	XmNhelpCallback = procedure help_system_proc( general_button_cs_help );
        };
    };

object setup_keyboard_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = OptionsKeyboardPBName;
	XmNmnemonic = OptionsKeyboardPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure setup_keyboard_cb();
	XmNhelpCallback = procedure help_system_proc( keyboard_button_cs_help );
        };
    };

object setup_keyboarddialect_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = Options7bitNRCSSelectionPBName;
	XmNmnemonic = Options7bitNRCSSelectionPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure setup_keyboarddialect_cb();
	XmNhelpCallback = procedure help_system_proc( dialect_button_cs_help );
        };
    };

object setup_graphics_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = OptionsGraphicsPBName;
	XmNmnemonic = OptionsGraphicsPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure setup_graphics_cb();
	XmNhelpCallback = procedure help_system_proc( graphics_button_cs_help );
        };
    };

object setup_printer_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = OptionsPrinterPBName;
	XmNmnemonic = OptionsPrinterPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure setup_printer_cb();
	XmNhelpCallback = procedure help_system_proc( printer_button_cs_help );
        };
    };

object setup_menu_separator: XmSeparator
    {
    };

object file_save_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = OptionsSaveSettingsPBName;
	XmNmnemonic = OptionsSaveSettingsPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure file_save_cb();
	XmNhelpCallback = procedure help_system_proc( file_save_cs_help );
        };
    };

object file_revert_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = OptionsUseLastSettingsPBName;
	XmNmnemonic = OptionsUseLastSettingsPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure file_revert_cb();
	XmNhelpCallback = procedure help_system_proc( file_revert_cs_help );
        };
    };

object file_saveas_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = OptionsSaveSettingsAsPBName;
	XmNmnemonic = OptionsSaveSettingsAsPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure file_saveas_cb();
	XmNhelpCallback = procedure help_system_proc( file_saveas_cs_help );
        };
    };

object file_open_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = OptionsUseSettingsFromPBName;
	XmNmnemonic = OptionsUseSettingsFromPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure file_open_cb();
	XmNhelpCallback = procedure help_system_proc( file_open_cs_help );
        };
    };

object file_new_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = OptionsUseSystemDefaultsPBName;
	XmNmnemonic = OptionsUseSystemDefaultsPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure file_new_cb();
	XmNhelpCallback = procedure help_system_proc( file_new_cs_help );
        };
    };

!------------------------------------------------------------------------------
! print menu
object print_menu_entry: XmCascadeButton
    {
    arguments
        {
        XmNlabelString = PrintMenuName;
	XmNmnemonic = PrintMenuMnemonic;
        };
    controls
        {
        XmPulldownMenu print_menu;
        };
    callbacks
	{
	XmNhelpCallback = procedure help_system_proc( print_entry_cs_help );
	};
    };

object print_menu: XmPulldownMenu
    {
    arguments
        {
        XmNtearOffModel = XmTEAR_OFF_ENABLED;
        };
    controls
        {
	XmPushButton print_page_pb;
	XmPushButton print_selected_pb;
	XmPushButton print_all_pb;
	XmPushButton print_graphics_pb;
	XmPushButton finish_printing_pb;
	XmPushButton cancel_printing_pb;
        };
    callbacks
        {
        XmNmapCallback = procedure copyright_callback();
        };
    };

object print_page_pb: XmPushButton
    {
    arguments
	{
	XmNlabelString = PrintTextPagePBName;
	XmNmnemonic = PrintTextPagePBMnemonic;
	};
    callbacks
	{
	XmNactivateCallback = procedure print_page_cb();
	XmNhelpCallback = procedure help_system_proc( print_page_cs_help );
	};
    };

object print_selected_pb: XmPushButton
    {
    arguments
	{
	XmNlabelString = PrintSelectedTextPBName;
	XmNmnemonic = PrintSelectedTextPBMnemonic;
	};
    callbacks
	{
	XmNactivateCallback = procedure print_selected_cb();
	XmNhelpCallback = procedure help_system_proc( print_selected_cs_help );
	};
    };

object print_all_pb: XmPushButton
    {
    arguments
	{
	XmNlabelString = PrintAllTextPBName;
	XmNmnemonic = PrintAllTextPBMnemonic;
	};
    callbacks
	{
	XmNactivateCallback = procedure print_all_cb();
	XmNhelpCallback = procedure help_system_proc( print_all_cs_help );
	};
    };

object print_graphics_pb: XmPushButton
    {
    arguments
	{
	XmNlabelString = PrintGraphicsPBName;
	XmNmnemonic = PrintGraphicsPBMnemonic;
	};
    callbacks
	{
	XmNactivateCallback = procedure print_graphics_cb();
	XmNhelpCallback = procedure help_system_proc( print_graphics_cs_help );
	};
    };

object finish_printing_pb: XmPushButton
    {
    arguments
	{
	XmNlabelString = PrintFinishPrintingPBName;
	XmNmnemonic = PrintFinishPrintingPBMnemonic;
	};
    callbacks
	{
	XmNactivateCallback = procedure finish_printing_cb();
	XmNhelpCallback = procedure help_system_proc( finish_printing_cs_help );
	};
    };

object cancel_printing_pb: XmPushButton
    {
    arguments
	{
	XmNlabelString = PrintCancelPrintingPBName;
	XmNmnemonic = PrintCancelPrintingPBMnemonic;
	};
    callbacks
	{
	XmNactivateCallback = procedure cancel_printing_cb();
	XmNhelpCallback = procedure help_system_proc( cancel_printing_cs_help );
	};
    };

!-------------------------------------------------------------------------------
! help menu
object help_menu_entry: XmCascadeButton
    {
    arguments
        {
	XmNlabelString = HelpMenuName;
	XmNmnemonic = HelpMenuMnemonic;
        };
    controls
        {
        XmPulldownMenu help_menu;
        };
    callbacks
	{
	XmNhelpCallback = procedure help_system_proc( help_entry_cs_help );
	};
    };

object help_menu: XmPulldownMenu
    {
    arguments
        {
        XmNtearOffModel = XmTEAR_OFF_ENABLED;
        };
    controls
        {
        XmPushButton help_on_context_pb;
        XmSeparator  help_separator;
        XmPushButton help_on_window_pb;
        XmPushButton help_on_help_pb;
        XmPushButton help_on_version_pb;
        };
    callbacks
        {
        XmNmapCallback = procedure copyright_callback();
        };
    };

object help_on_context_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = HelpOnContextPBName;
	XmNmnemonic = HelpOnContextPBMnemonic;
        };
    callbacks
        {
	XmNactivateCallback = procedure help_activate_proc (k_help_on_context);
	XmNhelpCallback = procedure help_system_proc( on_context_cs_help );
        };
    };

object help_separator: XmSeparator
    {
    };

object help_on_window_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = HelpOnWindowPBName;
	XmNmnemonic = HelpOnWindowPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure help_activate_proc(k_help_on_window);
	XmNhelpCallback = procedure help_system_proc( on_window_cs_help );
        };
    };

object help_on_help_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = HelpOnHelpPBName;
	XmNmnemonic = HelpOnHelpPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure help_activate_proc(k_help_on_help);
	XmNhelpCallback     = procedure help_system_proc(on_help_cs_help);
        };
    };


object help_on_version_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = HelpOnVersionPBName;
	XmNmnemonic = HelpOnVersionPBMnemonic;
        };
    callbacks
        {
        XmNactivateCallback = procedure help_activate_proc(k_help_on_version);
	XmNhelpCallback = procedure help_system_proc( on_version_cs_help );
        };
    };

!-------------------------------------------------------------------------------
! Show version dialog box
object help_show_version_db: XmFormDialog
    {
    arguments
        {
	XmNallowOverlap = false;
        XmNdefaultPosition = true;
        XmNdialogTitle = VersionDBTitle;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNnoResize = true;
        XmNdefaultButton = XmPushButton show_version_acknowledge_pb;
        };
    controls
        {
        XmLabel show_version_label;
        XmPushButton show_version_acknowledge_pb;
        };
    };

object show_version_label: XmLabel
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = NormalOffset;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = MediumOffset;
        XmNrightAttachment = XmATTACH_FORM;
        XmNrightOffset = MediumOffset;
        XmNlabelString = VersionDBVersionLabel;
        };
    callbacks
        {
        MrmNcreateCallback = procedure show_version_label_cb();
        };
    };

object show_version_acknowledge_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNtopWidget = XmLabel show_version_label;
        XmNtopOffset = NormalOffset;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = MediumOffset;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNbottomOffset = NormalOffset;
        XmNrightAttachment = XmATTACH_FORM;
        XmNrightOffset = MediumOffset;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = OKLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure show_version_acknowledge_cb();
        };
    };

!-------------------------------------------------------------------------------
object cs_help_hb: DXmHelpDialog
    {
    arguments
        {
        DXmNapplicationName = HelpApplicationName;
        DXmNdefaultPosition = true;
        DXmNoverviewTopic = HelpOnWindowTopic;
	};
    };

object help_overview_hb: DXmHelpDialog
    {
    arguments
        {
        DXmNapplicationName = HelpApplicationName;
        DXmNdefaultPosition = true;
        DXmNfirstTopic = HelpOnWindowTopic;
        DXmNoverviewTopic = HelpOnWindowTopic;
	};
    };

object help_about_hb: DXmHelpDialog
    {
    arguments
        {
        DXmNapplicationName = HelpApplicationName;
        DXmNdefaultPosition = true;
        DXmNfirstTopic = HelpOnVersionTopic;
        DXmNoverviewTopic = HelpOnWindowTopic;
	};
    };

object on_help_hb: DXmHelpDialog
    {
    arguments
        {
        DXmNapplicationName = HelpApplicationName;
        DXmNdefaultPosition = true;
        DXmNfirstTopic = HelpOnHelpTopic;
        DXmNoverviewTopic = HelpOnWindowTopic;
	};
    };


!+
! Define window setup dialog box
!-
object setup_window_db: XmFormDialog {
    arguments {
	XmNautoUnmanage = false;
	XmNallowOverlap = true;
        XmNdefaultPosition = true;
        XmNdialogTitle = WindowDBTitle;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNnoResize = true;
        XmNcancelButton = XmPushButton window_cancel_pb;
        XmNdefaultButton = XmPushButton window_ok_pb;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    };
    controls {
        XmForm          window_left_form;
        XmForm          window_right_form;
	XmForm		window_middle_left_form;
	XmForm		window_middle_right_form;
        XmForm          window_bottom_form;
        XmForm          window_buttons_form;
    };
};
 
object window_left_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    };
    controls {
	XmRowColumn	resize_rc;	
        XmRadioBox      font_width_rb;
    };
};	
    
!
!+
! toggle buttons rowcolumn
!-
object resize_rc: XmRowColumn {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_COLUMN;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    };
    controls {
        XmToggleButton  auto_resize_terminal_tb;
        XmToggleButton  auto_resize_window_tb;
	XmToggleButton  terminal_driver_resize_tb;
    };
};	
!+
! toggle buttons
!-
object auto_resize_terminal_tb: XmToggleButton {
    arguments {
        XmNlabelString = WindowDBResizeTerminalTB;
    };
    callbacks {
        MrmNcreateCallback = procedure auto_resize_terminal_cb();
	XmNhelpCallback = procedure help_system_proc( auto_resize_terminal_cs_help );
    };
};

object auto_resize_window_tb: XmToggleButton {
    arguments {
        XmNlabelString = WindowDBResizeWindowTB;
    };
    callbacks {
        MrmNcreateCallback = procedure auto_resize_window_cb();
	XmNhelpCallback = procedure help_system_proc( auto_resize_window_cs_help );
    };
};

object terminal_driver_resize_tb: XmToggleButton {
    arguments {
        XmNlabelString = WindowDBDriverResizeTB;
    };
    callbacks {
        MrmNcreateCallback = procedure terminal_driver_resize_cb();
	XmNhelpCallback = procedure help_system_proc( terminal_driver_resize_cs_help );
    };
};

!+
! font width radio box
!-
object font_width_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRowColumn resize_rc;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
        };
    controls
        {
        XmToggleButton  normal_font_tb;
        XmToggleButton  condensed_font_tb;
	XmToggleButton  variable_font_tb;
        };
    };

object normal_font_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = WindowDBNormalFontTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure normal_font_cb();
	XmNhelpCallback = procedure help_system_proc( normal_font_cs_help );
        };
    };

object condensed_font_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = WindowDBCondensedFontTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure condensed_font_cb();
	XmNhelpCallback = procedure help_system_proc( condensed_font_cs_help );
        };
    };

object variable_font_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = WindowDBNormalCondensedFontTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure variable_font_cb();
	XmNhelpCallback = procedure help_system_proc( variable_font_cs_help );
	};
    };

object window_right_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmForm window_left_form;
	XmNleftOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    };
    controls {
        XmLabel         terminal_size_label;

        XmText    	rows_text_st;
        XmLabel         rows_label;
	XmRowColumn	rows_rc;	

        XmText    	columns_text_st;
        XmLabel         columns_label;
	XmRowColumn	columns_rc;	
    };
};	

object terminal_size_label: XmLabel
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
        XmNlabelString = WindowDBTerminalSizeLabel;
        };
    };

object rows_text_st: XmText
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel terminal_size_label;
	XmNtopOffset = SmallOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
        XmNcolumns = 3;
        XmNrows = 1;
	XmNmaxLength = 3;
        XmNresizeHeight = false;
        XmNresizeWidth  = false;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
        };
    callbacks {
        MrmNcreateCallback = procedure rows_text_cb;
	XmNhelpCallback = procedure help_system_proc( rows_cs_help );
    };
};

object rows_label: XmLabel
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNtopWidget = XmText rows_text_st;
	XmNtopOffset = LabelTextVerticalOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmText rows_text_st;
	XmNleftOffset = LabelTextHorizontalOffset;
        XmNlabelString = WindowDBRowsLabel;
        };
    };
!
!+
! row buttons rowcolumn
!-
object rows_rc: XmRowColumn {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmText rows_text_st;
	XmNtopOffset = SmallOffset;
	XmNrightAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNrightWidget = XmText rows_text_st;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_COLUMN;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    };
    controls {
        XmPushButton    rows_24_pb;
        XmPushButton    rows_48_pb;
        XmPushButton    rows_72_pb;
    };
};	

object rows_24_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = '  24';
        };
    callbacks
        {
        XmNactivateCallback = procedure rows_24_cb();
	XmNhelpCallback = procedure help_system_proc( rows_24_cs_help );
        };
    };

object rows_48_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = '  48';
        };
    callbacks
        {
        XmNactivateCallback = procedure rows_48_cb();
	XmNhelpCallback = procedure help_system_proc( rows_48_cs_help );
        };
    };

object rows_72_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = '  72';
        };
    callbacks
        {
        XmNactivateCallback = procedure rows_72_cb();
	XmNhelpCallback = procedure help_system_proc( rows_72_cs_help );
        };
    };

object columns_text_st: XmText
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNtopWidget = XmText rows_text_st;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel rows_label;
	XmNleftOffset = NormalOffset;
        XmNcolumns = 3;
        XmNrows = 1;
	XmNmaxLength = 3;
        XmNresizeHeight = false;
        XmNresizeWidth  = false;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
        };
    callbacks
        {
        MrmNcreateCallback = procedure columns_text_cb;
	XmNhelpCallback = procedure help_system_proc( columns_cs_help );
        };
    };

object columns_label: XmLabel
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNtopWidget = XmText columns_text_st;
	XmNtopOffset = LabelTextVerticalOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmText columns_text_st;
	XmNleftOffset = LabelTextHorizontalOffset;
        XmNlabelString = WindowDBColumnsLabel;
        };
    };
!
!+
! column buttons rowcolumn
!-
object columns_rc: XmRowColumn {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmText columns_text_st;
	XmNtopOffset = SmallOffset;
	XmNrightAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNrightWidget = XmText columns_text_st;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_COLUMN;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    };
    controls {
        XmPushButton    columns_80_pb;
        XmPushButton    columns_132_pb;
    };
};	

object columns_80_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = '  80';
        };
    callbacks
        {
        XmNactivateCallback = procedure columns_80_cb();
	XmNhelpCallback = procedure help_system_proc( columns_80_cs_help );
        };
    };

object columns_132_pb: XmPushButton
    {
    arguments
        {
        XmNlabelString = ' 132';
        };
    callbacks
        {
        XmNactivateCallback = procedure columns_132_cb();
	XmNhelpCallback = procedure help_system_proc( columns_132_cs_help );
        };
    };

!+
! font size buttons
!-
object window_middle_left_form: XmForm 
    {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm window_left_form;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    	};
    controls {
	XmRadioBox font_size_rb;
    	};
    };

!+
! font size radio box
!-
object font_size_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	XmNspacing = NormalOffset * 3 + SmallOffset + 2;
        };
    controls
        {
        XmToggleButton  big_font_set_tb;
        XmToggleButton  little_font_set_tb;
	XmToggleButton  gs_font_set_tb;
        };
    };

object big_font_set_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = WindowDBBigFontTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure big_font_set_cb();
	XmNhelpCallback = procedure help_system_proc( big_font_cs_help );
        };
    };

object little_font_set_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = WindowDBLittleFontTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure little_font_set_cb();
	XmNhelpCallback = procedure help_system_proc( little_font_cs_help );
        };
    };

object gs_font_set_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = WindowDBGSFontTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure gs_font_set_cb();
	XmNhelpCallback = procedure help_system_proc( gs_font_cs_help );
        };
    };

object window_middle_right_form: XmForm 
    {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm window_left_form;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmForm window_middle_left_form;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    	};
    controls {
	XmForm big_font_form;
	XmForm little_font_form;
	XmForm gs_font_form;
    	};
    };

object big_font_form: XmForm 
    {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    	};
    controls {
	XmRadioBox big_font_rb;
	XmText big_font_name_st;
    	};
    };

object big_font_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
        };
    controls
        {
        XmToggleButton  big_font_default_tb;
        XmToggleButton  big_font_other_tb;
        };
    };

object big_font_default_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = WindowDBFontDefaultTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure big_font_default_create_cb();
	XmNhelpCallback = procedure help_system_proc( big_default_cs_help );
        };
    };

object big_font_other_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = WindowDBFontOtherTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure big_font_other_create_cb();
        XmNarmCallback = procedure big_font_other_arm_cb();
	XmNhelpCallback = procedure help_system_proc( big_other_cs_help );
        };
    };

object big_font_name_st: XmText
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset * 2;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmRadioBox big_font_rb;
	XmNleftOffset = 0;
	XmNcolumns = 25;
	XmNrows = 1;
	XmNmaxLength = 256;
	};
    callbacks
	{
	MrmNcreateCallback = procedure big_font_name_create_cb();
	XmNfocusCallback = procedure big_font_name_focus_cb();
	XmNhelpCallback = procedure help_system_proc( big_text_cs_help );
	};
    };


object little_font_form: XmForm 
    {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm big_font_form;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    	};
    controls {
	XmRadioBox little_font_rb;
	XmText little_font_name_st;
    	};
    };

object little_font_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
        };
    controls
        {
        XmToggleButton  little_font_default_tb;
        XmToggleButton  little_font_other_tb;
        };
    };

object little_font_default_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = WindowDBFontDefaultTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure little_font_default_create_cb();
	XmNhelpCallback = procedure help_system_proc( little_default_cs_help );
        };
    };

object little_font_other_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = WindowDBFontOtherTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure little_font_other_create_cb();
        XmNarmCallback = procedure little_font_other_arm_cb();
	XmNhelpCallback = procedure help_system_proc( little_other_cs_help );
        };
    };

object little_font_name_st: XmText
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset * 2;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmRadioBox little_font_rb;
	XmNleftOffset = 0;
	XmNcolumns = 25;
	XmNrows = 1;
	XmNmaxLength = 256;
	};
    callbacks
	{
	MrmNcreateCallback = procedure little_font_name_create_cb();
	XmNfocusCallback = procedure little_font_name_focus_cb();
	XmNhelpCallback = procedure help_system_proc( little_text_cs_help );
	};
    };

object gs_font_form: XmForm 
    {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm little_font_form;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    	};
    controls {
	XmRadioBox gs_font_rb;
	XmText gs_font_name_st;
    	};
    };

object gs_font_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
        };
    controls
        {
        XmToggleButton  gs_font_default_tb;
        XmToggleButton  gs_font_other_tb;
        };
    };


object gs_font_default_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = WindowDBFontDefaultTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure gs_font_default_create_cb();
	XmNhelpCallback = procedure help_system_proc( gs_default_cs_help );
        };
    };

object gs_font_other_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = WindowDBFontOtherTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure gs_font_other_create_cb();
        XmNarmCallback = procedure gs_font_other_arm_cb();
	XmNhelpCallback = procedure help_system_proc( gs_other_cs_help );
        };
    };

object gs_font_name_st: XmText
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset * 2;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmRadioBox gs_font_rb;
	XmNleftOffset = 0;
	XmNcolumns = 25;
	XmNrows = 1;
	XmNmaxLength = 256;
	};
    callbacks
	{
	MrmNcreateCallback = procedure gs_font_name_create_cb();
	XmNfocusCallback = procedure gs_font_name_focus_cb();
	XmNhelpCallback = procedure help_system_proc( gs_text_cs_help );
	};
    };


object window_bottom_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm window_middle_right_form;
	XmNtopOffset = NormalOffset + SmallOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    };
    controls {
	XmText    	window_title_st;
	XmLabel         window_title_label;

	XmText    	icon_name_st;
	XmLabel         icon_name_label;
    };
};	

object window_title_st: XmText
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNcolumns = 25;
	XmNrows = 1;
	XmNmaxLength = 80;
	XmNresizeHeight = false;
	XmNresizeWidth = false;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	};
    callbacks
	{
	MrmNcreateCallback = procedure window_title_cb;
	XmNhelpCallback = procedure help_system_proc( window_title_cs_help );
	};
    };

object window_title_label: XmLabel
	{
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmText window_title_st;
	XmNtopOffset = TinyOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = 0;
	XmNlabelString = WindowDBWindowTitleLabel;
    };
};

object icon_name_st: XmText {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmText window_title_st;
	XmNleftOffset = MediumOffset;
	XmNcolumns = 25;
	XmNrows = 1;
	XmNmaxLength = 80;
	XmNresizeHeight = false;
	XmNresizeWidth = false;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    };
    callbacks {
	MrmNcreateCallback = procedure icon_name_cb;
	XmNhelpCallback = procedure help_system_proc( icon_name_cs_help );
    };
};

object icon_name_label: XmLabel
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmText icon_name_st;
	XmNtopOffset = TinyOffset;
	XmNleftAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNleftWidget = XmText icon_name_st;
	XmNleftOffset = 0;
	XmNlabelString = WindowDBIconNameLabel;
	};
    };

object window_buttons_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm window_bottom_form;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    };
    controls {
        XmPushButton    window_ok_pb;
        XmPushButton    window_apply_pb;
        XmPushButton    window_cancel_pb;
        XmPushButton    window_help_pb;
    };
};	
  
object window_ok_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
 	XmNdefaultButtonShadowThickness = 1;
	XmNshowAsDefault = 1;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = OKLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure window_ok_cb();
	XmNhelpCallback = procedure help_system_proc( window_ok_cs_help );
        };
    };

object window_apply_pb: XmPushButton
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftWidget = XmPushButton window_ok_pb;
        XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = ApplyLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure window_apply_cb();
	XmNhelpCallback = procedure help_system_proc( window_apply_cs_help );
        };
    };

object window_cancel_pb: XmPushButton
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftWidget = XmPushButton window_apply_pb;
        XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = CancelLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure window_cancel_cb();
	XmNhelpCallback = procedure help_system_proc( window_cancel_cs_help );
        };
    };

object window_help_pb: XmPushButton
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftWidget = XmPushButton window_cancel_pb;
        XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = HelpLabel;
        };
    callbacks
        {
	XmNactivateCallback =
			  procedure help_system_proc(window_button_cs_help);
	XmNhelpCallback = procedure help_system_proc(window_help_cs_help);
	};
    };


!+
! Define display setup dialog box
!-
object setup_display_db: XmFormDialog
    {
    arguments
        {
	XmNautoUnmanage = false;
	XmNallowOverlap = true;
        XmNdefaultPosition = true;
        XmNdialogTitle = DisplayDBTitle;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNnoResize = true;
        XmNcancelButton = XmPushButton display_cancel_pb;
        XmNdefaultButton = XmPushButton display_ok_pb;
        };
    controls
        {
	XmRowColumn	display_rc;	
	XmForm          display_right_form;
	XmForm          display_bottom_form;
	XmForm          display_buttons_form;
        };
    };

!+
! toggle buttons rowcolumn
!-
object display_rc: XmRowColumn {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNpacking = XmPACK_COLUMN;
    };
    controls {
        XmToggleButton  save_lines_off_top_tb;
        XmToggleButton  scroll_vertical_tb;
        XmToggleButton  scroll_horizontal_tb;
        XmToggleButton  coupling_vertical_tb;
        XmToggleButton  coupling_horizontal_tb;
        XmToggleButton  auto_wrap_tb;
        XmToggleButton  display_cursor_tb;
        XmToggleButton  cursor_blink_tb;
    };
};	

!+
! toggle buttons
!-
object save_lines_off_top_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = DisplayDBRecordLinesTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure save_lines_off_top_cb();
	XmNhelpCallback = procedure help_system_proc( save_lines_off_top_cs_help );
        };
    };

object scroll_vertical_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = DisplayDBVerticalScrollBarTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure scroll_vertical_cb();
	XmNhelpCallback = procedure help_system_proc( scroll_vertical_cs_help );
        };
    };

object scroll_horizontal_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = DisplayDBHorizontalScrollBarTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure scroll_horizontal_cb();
	XmNhelpCallback = procedure help_system_proc( scroll_horizontal_cs_help );
        };
    };

object coupling_vertical_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = DisplayDBVerticalCouplingTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure coupling_vertical_cb();
	XmNhelpCallback = procedure help_system_proc( coupling_vertical_cs_help );
        };
    };

object coupling_horizontal_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = DisplayDBHorizontalCouplingTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure coupling_horizontal_cb();
	XmNhelpCallback = procedure help_system_proc( coupling_horizontal_cs_help );
        };
    };

object auto_wrap_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = DisplayDBAutoWrapTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure auto_wrap_cb();
	XmNhelpCallback = procedure help_system_proc( auto_wrap_cs_help );
        };
    };

object display_cursor_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = DisplayDBDisplayCursorTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure display_cursor_cb();
	XmNhelpCallback = procedure help_system_proc( display_cursor_cs_help );
        };
    };

object cursor_blink_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = DisplayDBCursorBlinkTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure cursor_blink_cb();
	XmNhelpCallback = procedure help_system_proc( cursor_blink_cs_help );
        };
    };

object display_right_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmRowColumn display_rc;
	XmNleftOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
    };
    controls {
        XmRadioBox      screen_mode_rb;
        XmRadioBox      cursor_style_rb;
        XmRadioBox	status_display_mode_rb;
    };
};	

object screen_mode_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
        };
    controls
        {
        XmToggleButton  dark_text_tb;
        XmToggleButton  light_text_tb;
        };
    };

object dark_text_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = DisplayDBDarkTextTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure dark_text_cb();
	XmNhelpCallback = procedure help_system_proc( dark_text_cs_help );
        };
    };

object light_text_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = DisplayDBLightTextTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure light_text_cb();
	XmNhelpCallback = procedure help_system_proc( light_text_cs_help );
        };
    };

!+
! status display mode radio box
!   no status display
!   host writable status display
!-
object status_display_mode_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox screen_mode_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
        };
    controls
        {
        XmToggleButton no_status_display_tb;
        XmToggleButton host_status_display_tb;
        };
    };

object no_status_display_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = DisplayDBNoStatusDisplayTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure no_status_display_cb();
	XmNhelpCallback = procedure help_system_proc( no_status_display_cs_help );
        };
    };

object host_status_display_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = DisplayDBHostStatusDisplayTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure host_status_display_cb();
	XmNhelpCallback = procedure help_system_proc( host_status_display_cs_help );
        };
    };


!+
! cursor XmNdialogStyle radio box
!   block cursor
!   underline cursor
!-
object cursor_style_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox status_display_mode_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
        };
    controls
        {
        XmToggleButton block_cursor_tb;
        XmToggleButton underline_cursor_tb;
        };
    };

object block_cursor_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = DisplayDBBlockCursorTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure block_cursor_cb();
	XmNhelpCallback = procedure help_system_proc( block_cursor_cs_help );
        };
    };

object underline_cursor_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = DisplayDBUnderlineCursorTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure underline_cursor_cb();
	XmNhelpCallback = procedure help_system_proc( underline_cursor_cs_help );
        };
    };

object display_bottom_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRowColumn display_rc;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
    };
    controls {
	XmLabel		batch_scroll_label;
	XmText    	batch_scroll_text_st;
	XmLabel         lines_label;

	XmLabel         record_label;
	XmText    	transcript_size_text_st;
	XmLabel         lines_off_top_label;
    };
};	

object batch_scroll_label: XmLabel
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = SmallOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNlabelString = DisplayDBBatchScrollLabel;
	};
    };

object batch_scroll_text_st: XmText
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNtopWidget = XmLabel batch_scroll_label;
	XmNtopOffset = -LabelTextVerticalOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel batch_scroll_label;
	XmNleftOffset = LabelTextHorizontalOffset;
	XmNcolumns = 3;
	XmNrows = 1;
	XmNmaxLength = 3;
	XmNresizeHeight = false;
	XmNresizeWidth = false;
	};
    callbacks
	{
	MrmNcreateCallback = procedure batch_scroll_cb();
	XmNhelpCallback = procedure help_system_proc( batch_scroll_cs_help );
	};
};

object lines_label: XmLabel
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNtopWidget = XmText batch_scroll_text_st;
	XmNtopOffset = LabelTextVerticalOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmText batch_scroll_text_st;
	XmNleftOffset = LabelTextHorizontalOffset;
	XmNlabelString = DisplayDBLinesLabel;
	};
};

object record_label: XmLabel
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNtopWidget = XmLabel lines_label;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel lines_label;
	XmNleftOffset = LargeOffset;
	XmNlabelString = DisplayDBRecordLabel;
	};
    };

object transcript_size_text_st: XmText
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNtopWidget = XmLabel record_label;
	XmNtopOffset = -LabelTextVerticalOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel record_label;
	XmNleftOffset = LabelTextHorizontalOffset;
	XmNcolumns = 4;
	XmNrows = 1;
	XmNmaxLength = 4;
	XmNresizeHeight = false;
	XmNresizeWidth = false;
	};
    callbacks
	{
	MrmNcreateCallback = procedure transcript_size_cb();
	XmNhelpCallback = procedure help_system_proc( transcript_size_cs_help );
	};
    };

object lines_off_top_label: XmLabel
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNtopWidget = XmText transcript_size_text_st;
	XmNtopOffset = LabelTextVerticalOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmText transcript_size_text_st;
	XmNleftOffset = LabelTextHorizontalOffset;
	XmNlabelString = DisplayDBLinesOffTopLabel;
	};
};

object display_buttons_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm display_bottom_form;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
    };
    controls {
        XmPushButton    display_ok_pb;
	XmPushButton    display_apply_pb;
	XmPushButton    display_cancel_pb;
	XmPushButton    display_help_pb;
    };
};	

object display_ok_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = 0;
 	XmNdefaultButtonShadowThickness = 1;
	XmNshowAsDefault = 1;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = OKLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure display_ok_cb();
	XmNhelpCallback = procedure help_system_proc( display_ok_cs_help );
        };
    };

object display_apply_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmPushButton display_ok_pb;
	XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = ApplyLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure display_apply_cb();
	XmNhelpCallback = procedure help_system_proc( display_apply_cs_help );
        };
    };

object display_cancel_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmPushButton display_apply_pb;
	XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = CancelLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure display_cancel_cb();
	XmNhelpCallback = procedure help_system_proc( display_cancel_cs_help );
        };
    };

object display_help_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmPushButton display_cancel_pb;
	XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = HelpLabel;
        };
    callbacks
        {
	XmNactivateCallback = 
			  procedure help_system_proc( display_button_cs_help );
	XmNhelpCallback = procedure help_system_proc( display_help_cs_help );
        };
    };


!+
! Define general setup dialog box
!-
object setup_general_db: XmFormDialog
    {
    arguments
        {
	XmNautoUnmanage = false;
	XmNallowOverlap = true;
        XmNdefaultPosition = true;
        XmNdialogTitle = GeneralDBTitle;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNnoResize = true;
        XmNcancelButton = XmPushButton general_cancel_pb;
        XmNdefaultButton = XmPushButton general_ok_pb;
        };
    controls
        {
        XmForm          general_left_form;
        XmForm          general_right_form;
        XmForm          general_buttons_form;
        };
    };
 
object general_left_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
    };
    controls {
	XmRowColumn	features_rc;	
        XmRadioBox      cursor_keys_rb;
        XmRadioBox      keypad_rb;
        XmRadioBox      upss_rb;
        XmRadioBox      character_set_mode_rb;
	XmForm		general_answerback_form;
    };
};	

!+
! toggle buttons rowcolumn
!-
object features_rc: XmRowColumn {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_COLUMN;
    };
    controls {
        XmToggleButton  newline_tb;
        XmToggleButton  udk_locked_tb;
        XmToggleButton  features_locked_tb;
        XmToggleButton  local_echo_tb;
    };
};	

!+
! toggle buttons
!-
object newline_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBNewlineTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure newline_cb();
	XmNhelpCallback = procedure help_system_proc( newline_cs_help );
        };
    };

object udk_locked_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBLockUDKsTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure udk_locked_cb();
	XmNhelpCallback = procedure help_system_proc( udk_locked_cs_help );
        };
    };

object features_locked_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBLockUserFeaturesTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure features_locked_cb();
	XmNhelpCallback = procedure help_system_proc( features_locked_cs_help );
        };
    };

object local_echo_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBLocalEchoTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure local_echo_cb();
	XmNhelpCallback = procedure help_system_proc( local_echo_cs_help );
        };              
    };

!+
! cursor keys radio box
!-
object cursor_keys_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRowColumn features_rc;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
        };
    controls
        {
        XmToggleButton  normal_cursor_keys_tb;
        XmToggleButton  appl_cursor_keys_tb;
        };
    };

object normal_cursor_keys_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBNormalCursorKeysTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure normal_cursor_keys_cb();
	XmNhelpCallback = procedure help_system_proc( normal_cursor_keys_cs_help );
        };
    };

object appl_cursor_keys_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBApplicationCursorKeys;
        };
    callbacks
        {
        MrmNcreateCallback = procedure appl_cursor_keys_cb();
	XmNhelpCallback = procedure help_system_proc( appl_cursor_keys_cs_help );
        };
    };


!+
! keypad mode radio box
!   numeric keypad mode
!   application keypad mode
!-
object keypad_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox cursor_keys_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
        };
    controls
        {
        XmToggleButton numeric_keypad_tb;
        XmToggleButton appl_keypad_tb;
        };
    };

object numeric_keypad_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBNumericKeypadTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure numeric_keypad_cb();
	XmNhelpCallback = procedure help_system_proc( numeric_keypad_cs_help );
        };
    };

object appl_keypad_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBApplicationKeypadTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure appl_keypad_cb();
	XmNhelpCallback = procedure help_system_proc( appl_keypad_cs_help );
        };
    };

!+
! user preference supplemental set radio box
!   upss = DEC Supplemental
!   upss = ISO Latin-1
!-
object upss_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox keypad_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
        };
    callbacks
	{
        MrmNcreateCallback = procedure upss_radio_create_cb();
	};
!    controls
!        {
!
! Do it in MENU_STUBS.C's upss_radio_create_cb();
!
!       XmToggleButton upss_dec_tb;
!       XmToggleButton upss_iso_tb;
!        };
    };

object upss_dec_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBDECSupplementalTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure upss_dec_cb();
	XmNhelpCallback = procedure help_system_proc( upss_dec_cs_help );
        };
    };

object upss_iso_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBISOLatin1TB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure upss_iso_cb();
	XmNhelpCallback = procedure help_system_proc( upss_iso_cs_help );
        };
    };

object upss_dec_turkish_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBDECTurkishSupplementalTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure upss_dec_turkish_cb();
	XmNhelpCallback = procedure help_system_proc( upss_dec_turk_cs_help );
        };
    };

object upss_iso_turkish_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBISOLatin5TB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure upss_iso_turkish_cb();
	XmNhelpCallback = procedure help_system_proc( upss_iso_turk_cs_help );
        };
    };

object upss_dec_greek_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBDECGreekSupplementalTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure upss_dec_greek_cb();
	XmNhelpCallback = procedure help_system_proc( upss_dec_grk_cs_help );
        };
    };

object upss_iso_greek_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBISOLatin7TB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure upss_iso_greek_cb();
	XmNhelpCallback = procedure help_system_proc( upss_iso_grk_cs_help );
        };
    };


!+
! character set mode radio box
!   7-bit characters
!   8-bit characters
!-
object character_set_mode_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox upss_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
        };
    controls
        {
        XmToggleButton eight_bit_tb;
        XmToggleButton seven_bit_tb;
        };
    };

object eight_bit_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDB8bitMultinationalTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure eight_bit_cb();
	XmNhelpCallback = procedure help_system_proc( eight_bit_cs_help );
        };
    };

object seven_bit_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDB7bitNRCSTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure seven_bit_cb();
	XmNhelpCallback = procedure help_system_proc( seven_bit_cs_help );
        };
    };
 
!+
! terminal operating mode radio box
!   vt300 mode, 8-bit controls
!   vt300 mode, 7-bit controls
!   vt100 mode
!   vt52  mode
!-
object terminal_mode_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
        };
    controls
        {
        XmToggleButton vt300_8bitc_mode_tb;
        XmToggleButton vt300_7bitc_mode_tb;
        XmToggleButton vt100_mode_tb;
        XmToggleButton vt52_mode_tb;
        };
    };

object vt300_8bitc_mode_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBVT300Mode8bitTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure vt300_8bitc_mode_cb();
	XmNhelpCallback = procedure help_system_proc( vt300_8bitc_mode_cs_help );
        };
    };

object vt300_7bitc_mode_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBVT300Mode7bitTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure vt300_7bitc_mode_cb();
	XmNhelpCallback = procedure help_system_proc( vt300_7bitc_mode_cs_help );
        };
    };

object vt100_mode_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBVT100ModeTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure vt100_mode_cb();
	XmNhelpCallback = procedure help_system_proc( vt100_mode_cs_help );
        };
    };

object vt52_mode_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBVT52ModeTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure vt52_mode_cb();
	XmNhelpCallback = procedure help_system_proc( vt52_mode_cs_help );
        };
    };

object decterm_id_label: XmLabel
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox terminal_mode_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
        XmNlabelString = GeneralDBTerminalIDLabel;
        };
    };

!+
! terminal id (device attributes response) radio box
!-
object decterm_id_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel decterm_id_label;
	XmNtopOffset = TinyOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
        };
    controls
        {
        XmToggleButton decterm_id_tb;
        XmToggleButton vt340_id_tb;
        XmToggleButton vt330_id_tb;
        XmToggleButton vt320_id_tb;
        XmToggleButton vt240_id_tb;
        XmToggleButton vt220_id_tb;
        XmToggleButton vt125_id_tb;
        XmToggleButton vt102_id_tb;
        XmToggleButton vt101_id_tb;
        XmToggleButton vt100_id_tb;
        };
    };

object decterm_id_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBDECtermIDTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure decterm_id_cb();
	XmNhelpCallback = procedure help_system_proc( decterm_id_cs_help );
        };
    };

object vt340_id_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBVT340IDTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure vt340_id_cb();
	XmNhelpCallback = procedure help_system_proc( vt340_id_cs_help );
        };
    };

object vt330_id_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBVT330IDTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure vt330_id_cb();
	XmNhelpCallback = procedure help_system_proc( vt330_id_cs_help );
        };
    };

object vt320_id_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBVT320IDTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure vt320_id_cb();
	XmNhelpCallback = procedure help_system_proc( vt320_id_cs_help );
        };
    };

object vt240_id_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBVT240IDTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure vt240_id_cb();
	XmNhelpCallback = procedure help_system_proc( vt240_id_cs_help );
        };
    };

object vt220_id_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBVT220IDTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure vt220_id_cb();
	XmNhelpCallback = procedure help_system_proc( vt220_id_cs_help );
        };
    };

object vt125_id_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBVT125IDTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure vt125_id_cb();
	XmNhelpCallback = procedure help_system_proc( vt125_id_cs_help );
        };
    };

object vt102_id_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBVT102IDTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure vt102_id_cb();
	XmNhelpCallback = procedure help_system_proc( vt102_id_cs_help );
        };
    };

object vt101_id_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBVT101IDTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure vt101_id_cb();
	XmNhelpCallback = procedure help_system_proc( vt101_id_cs_help );
        };
    };

object vt100_id_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = GeneralDBVT100IDTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure vt100_id_cb();
	XmNhelpCallback = procedure help_system_proc( vt100_id_cs_help );
        };
    };

object general_right_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmForm general_left_form;
	XmNleftOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
    };
    controls {
        XmRadioBox      terminal_mode_rb;
        XmLabel         decterm_id_label;
        XmRadioBox      decterm_id_rb;
    };
};	

object general_answerback_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget =  XmRadioBox character_set_mode_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
    };
    controls {
        XmText		answerback_message_st;
        XmLabel         answerback_message_label;
        XmToggleButton  conceal_answerback_tb;
    };
};

!
!+
! answerback message text widget 
!-
object answerback_message_st: XmText
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNcolumns = 30;
	XmNrows = 1;
	XmNmaxLength = 30;
	XmNresizeHeight = false;
	XmNresizeWidth = false;
	};
    callbacks
	{
	MrmNcreateCallback = procedure answerback_message_cb();
	XmNfocusCallback = procedure change_conceal_answerback_cb();
	XmNhelpCallback = procedure help_system_proc( answerback_message_cs_help );
	};
    };

object answerback_message_label: XmLabel 
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmText answerback_message_st;
	XmNtopOffset = TinyOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
        XmNlabelString = GeneralDBAnsbckMesLB;
        };
    };

!+      
! conceal answerback message toggle button
!-
object conceal_answerback_tb: XmToggleButton
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel answerback_message_label;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
        XmNlabelString = GeneralDBConAnsbckMesTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure conceal_answerback_cb();
	XmNdisarmCallback = procedure toggle_conceal_answerback_cb();
	XmNhelpCallback = procedure help_system_proc( conceal_answerback_cs_help );
        };              
    };

object general_buttons_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm general_left_form;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    };
    controls {
        XmPushButton    general_ok_pb;
        XmPushButton    general_apply_pb;
        XmPushButton    general_cancel_pb;
        XmPushButton    general_help_pb;
    };
};	

object general_ok_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
 	XmNdefaultButtonShadowThickness = 1;
	XmNshowAsDefault = 1;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = OKLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure general_ok_cb();
	XmNhelpCallback = procedure help_system_proc( general_ok_cs_help );
        };
    };

object general_apply_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmPushButton general_ok_pb;
	XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = ApplyLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure general_apply_cb();
	XmNhelpCallback = procedure help_system_proc( general_apply_cs_help );
        };
    };

object general_cancel_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmPushButton general_apply_pb;
	XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = CancelLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure general_cancel_cb();
	XmNhelpCallback = procedure help_system_proc( general_cancel_cs_help );
        };
    };

object general_help_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmPushButton general_cancel_pb;
	XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = HelpLabel;
        };
    callbacks
        {
	XmNactivateCallback = 
			  procedure help_system_proc ( general_button_cs_help );
	XmNhelpCallback = procedure help_system_proc ( general_help_cs_help );
        };
    };

!+
! Define keyboard setup dialog box
!-
object setup_keyboard_db: XmFormDialog
    {
    arguments
        {
	XmNautoUnmanage = false;
	XmNallowOverlap = true;
        XmNdefaultPosition = true;
        XmNdialogTitle = KeyboardDBTitle;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNnoResize = true;
        XmNcancelButton = keyboard_cancel_pb;
        XmNdefaultButton = XmPushButton keyboard_ok_pb;
        };
    controls
        {
        XmForm          keyboard_left_form;
        XmForm          keyboard_right_form;
        XmForm          keyboard_buttons_form;
        };
    };
 
object keyboard_left_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
    };
    controls {
	XmRowColumn	bell_rc;
        XmRadioBox      f11_key_rb;
        XmRadioBox      tilde_key_rb;
        XmRadioBox      angle_key_rb;
    };
};	

!+
! toggle buttons rowcolumn
!-
object bell_rc: XmRowColumn {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_COLUMN;
    };
    controls {
        XmToggleButton  warning_bell_tb;
        XmToggleButton  margin_bell_tb;
    };
};

!+
! toggle buttons
!-
object warning_bell_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBWarningBellTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure warning_bell_cb();
	XmNhelpCallback = procedure help_system_proc( warning_bell_cs_help );
        };
    };

object margin_bell_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBMarginBellTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure margin_bell_cb();
	XmNhelpCallback = procedure help_system_proc( margin_bell_cs_help );
        };
    };

!+
! f11 key radio box
!   f11 f11
!   f11 escape
!-
object f11_key_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRowColumn bell_rc;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
        };
    controls
        {
        XmToggleButton f11_f11_tb;
        XmToggleButton f11_escape_tb;
        };
    };

object f11_f11_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBF11F11TB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure f11_f11_cb();
	XmNhelpCallback = procedure help_system_proc( f11_f11_cs_help );
        };
    };

object f11_escape_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBF11EscapeTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure f11_escape_cb();
	XmNhelpCallback = procedure help_system_proc( f11_escape_cs_help );
        };
    };


!+
! tilde key radio box
!   tilde sends `~
!   tilde sends ESC
!-
object tilde_key_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox f11_key_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
        };
    controls
        {
        XmToggleButton tilde_tilde_tb;
        XmToggleButton tilde_escape_tb;
        };
    };

object tilde_tilde_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBTildeTildeTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure tilde_tilde_cb();
	XmNhelpCallback = procedure help_system_proc( tilde_tilde_cs_help );
        };
    };

object tilde_escape_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBTildeEscapeTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure tilde_escape_cb();
	XmNhelpCallback = procedure help_system_proc( tilde_escape_cs_help );
        };
    };

!+
! angle key radio box
!   angle key sends <>
!   angle key sends `~
!-
object angle_key_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox tilde_key_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = 0;
	XmNpacking = XmPACK_TIGHT;
        };
    controls
        {
        XmToggleButton angle_angle_tb;
        XmToggleButton angle_tilde_tb;
        };
    };

object angle_angle_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBBracketBracketTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure angle_angle_cb();
	XmNhelpCallback = procedure help_system_proc( angle_angle_cs_help );
        };
    };

object angle_tilde_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBBracketTildeTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure angle_tilde_cb();
	XmNhelpCallback = procedure help_system_proc( angle_tilde_cs_help );
        };
    };
 
object keyboard_right_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmForm keyboard_left_form;
	XmNleftOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
    };
    controls {
        XmRowColumn     key_rc;
        XmRadioBox      backarrow_key_rb;
        XmRadioBox      comma_key_rb;
    };
};	

!+
! toggle buttons rowcolumn
!-
object key_rc: XmRowColumn {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_COLUMN;
    };
    controls {
        XmToggleButton  auto_repeat_tb;
	XmToggleButton  control_QS_hold_tb;
	XmToggleButton  allow_quickcopy_tb;
    };
};

object auto_repeat_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBAutoRepeatTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure auto_repeat_cb();
	XmNhelpCallback = procedure help_system_proc( auto_repeat_cs_help );
        };
    };

object control_QS_hold_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBCtrlQCtrlSTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure control_QS_hold_cb();
	XmNhelpCallback = procedure help_system_proc( control_QS_hold_cs_help );
        };
    };

object allow_quickcopy_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBAllowQuickCopyTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure allow_quickcopy_cb();
	XmNhelpCallback = procedure help_system_proc( allow_quickcopy_cs_help );
        };
    };


!+
! backarrow key radio box
!   DEL
!   BS
!-
object backarrow_key_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRowColumn key_rc;
	XmNtopOffset = LargeOffset-5;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
        };
    controls
        {
        XmToggleButton backarrow_DEL_tb;
        XmToggleButton backarrow_BS_tb;
        };
    };

object backarrow_DEL_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBDeleteTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure backarrow_DEL_cb();
	XmNhelpCallback = procedure help_system_proc( backarrow_DEL_cs_help );
        };
    };

object backarrow_BS_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBBackspaceTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure backarrow_BS_cb();
	XmNhelpCallback = procedure help_system_proc( backarrow_BS_cs_help );
        };
    };

!+
! comma key radio box
!   comma comma
!   comma angle
!-
object comma_key_rb: XmRadioBox
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox backarrow_key_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = 0;
	XmNpacking = XmPACK_TIGHT;
        };
    controls
        {
        XmToggleButton comma_comma_tb;
        XmToggleButton comma_angle_tb;
        };
    };

object comma_comma_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBCommaCommaTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure comma_comma_cb();
	XmNhelpCallback = procedure help_system_proc( comma_comma_cs_help );
        };
    };

object comma_angle_tb: XmToggleButton
    {
    arguments
        {
        XmNlabelString = KeyboardDBCommaBracketTB;
        };
    callbacks
        {
        MrmNcreateCallback = procedure comma_angle_cb();
	XmNhelpCallback = procedure help_system_proc( comma_angle_cs_help );
        };
    };
 
object keyboard_buttons_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm keyboard_left_form;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
    };
    controls {
        XmPushButton    keyboard_ok_pb;
	XmPushButton    keyboard_apply_pb;
        XmPushButton    keyboard_cancel_pb;
        XmPushButton    keyboard_help_pb;
    };
};	

object keyboard_ok_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
 	XmNdefaultButtonShadowThickness = 1;
	XmNshowAsDefault = 1;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = OKLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure keyboard_ok_cb();
	XmNhelpCallback = procedure help_system_proc( keyboard_ok_cs_help );
        };
    };

object keyboard_apply_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftWidget = XmPushButton keyboard_ok_pb;
        XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
        XmNwidth = LongestLabelWidth;
        XmNlabelString = ApplyLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure keyboard_apply_cb();
	XmNhelpCallback = procedure help_system_proc( keyboard_apply_cs_help );
        };
    };

object keyboard_cancel_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftWidget = XmPushButton keyboard_apply_pb;
        XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
	XmNwidth = LongestLabelWidth;
        XmNlabelString = CancelLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure keyboard_cancel_cb();
	XmNhelpCallback = procedure help_system_proc( keyboard_cancel_cs_help );
        };
    };

object keyboard_help_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftWidget = XmPushButton keyboard_cancel_pb;
        XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
	XmNwidth = LongestLabelWidth;
        XmNlabelString = HelpLabel;
        };
    callbacks
        {
	XmNactivateCallback = 
			  procedure help_system_proc (keyboard_button_cs_help);
	XmNhelpCallback = procedure help_system_proc (keyboard_help_cs_help);
        };
    };


!+
! Define keyboard dialect setup dialog box
!-
object setup_keyboard_dialect_db: XmFormDialog
    {
    arguments
        {
	XmNautoUnmanage = false;
        XmNallowOverlap = false;
        XmNdefaultPosition = true;
        XmNdialogTitle = DialectDBTitle;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNnoResize = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNcancelButton = XmPushButton dialect_cancel_pb;
        XmNdefaultButton = XmPushButton dialect_ok_pb;
        };
    controls
        {
        XmScrolledList  dialect_select_lb;
        XmForm          dialect_buttons_form;
        };
    };

object dialect_select_lb: XmScrolledList
    {
    arguments
        {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = LargeOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
 	XmNvisibleItemCount = 8;
	XmNitems = DialectDBDialectList;
	XmNselectionPolicy = XmBROWSE_SELECT;
        };
    callbacks
        {
        MrmNcreateCallback = procedure dialect_create_cb();
	XmNhelpCallback = procedure help_system_proc( dialect_select_cs_help );
        };
    };
 
object dialect_buttons_form: XmForm {
    arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
    };
    controls {
        XmPushButton    dialect_ok_pb;
	XmPushButton    dialect_apply_pb;
        XmPushButton    dialect_cancel_pb;
        XmPushButton    dialect_help_pb;
    };
};	

object dialect_ok_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
 	XmNdefaultButtonShadowThickness = 1;
	XmNshowAsDefault = 1;
	XmNwidth = LongestLabelWidth;
	XmNlabelString = OKLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure dialect_ok_cb();
	XmNhelpCallback = procedure help_system_proc( dialect_ok_cs_help );
        };
    };

object dialect_apply_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = dialect_ok_pb;
        XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
	XmNwidth = LongestLabelWidth;
        XmNlabelString = ApplyLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure dialect_apply_cb();
	XmNhelpCallback = procedure help_system_proc( dialect_apply_cs_help );
        };
    };

object dialect_cancel_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftWidget = XmPushButton dialect_apply_pb;
        XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
	XmNwidth = LongestLabelWidth;
        XmNlabelString = CancelLabel;
        };
    callbacks
        {
        XmNactivateCallback = procedure dialect_cancel_cb();
	XmNhelpCallback = procedure help_system_proc( dialect_cancel_cs_help );
        };
    };

object dialect_help_pb: XmPushButton
    {
    arguments
        {
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftWidget = XmPushButton dialect_cancel_pb;
        XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
	XmNwidth = LongestLabelWidth;
        XmNlabelString = HelpLabel;
        };
    callbacks
        {
	XmNactivateCallback =
			  procedure help_system_proc( dialect_button_cs_help );
	XmNhelpCallback = procedure help_system_proc( dialect_help_cs_help );
        };
    };

!+
! Define graphics setup dialog box
!-
object setup_graphics_db: XmFormDialog
    {
    arguments
	{
	XmNautoUnmanage = false;
	XmNallowOverlap = true;
	XmNdefaultPosition = true;
	XmNdialogTitle = GraphicsDBTitle;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNnoResize = true;
        XmNcancelButton = XmPushButton graphics_cancel_pb;
	XmNdefaultButton = XmPushButton graphics_ok_pb;
	};
    controls
	{
	XmRowColumn     graphics_options_rc;
	XmForm          graphics_right_form;
	XmForm          graphics_buttons_form;
	};
    };

object graphics_options_rc: XmRowColumn {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNpacking = XmPACK_COLUMN;
    };
    controls {
	XmToggleButton  share_colormap_entries_tb;
	XmToggleButton  enable_backing_store_tb;
	XmToggleButton  report_macrograph_contents_tb;
    };
};

object share_colormap_entries_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = GraphicsDBShareColorMapTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure share_colormap_entries_cb();
	XmNhelpCallback = procedure help_system_proc( share_colormap_entries_cs_help );
	};
    };

object enable_backing_store_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = GraphicsDBEnableBackingStoreTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure enable_backing_store_cb();
	XmNhelpCallback = procedure help_system_proc( enable_backing_store_cs_help );
	};
    };

object report_macrograph_contents_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = GraphicsDBReportMacrographTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure macrograph_report_cb();
	XmNhelpCallback = procedure help_system_proc( macrograph_report_cs_help );
	};
    };
 
object graphics_right_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmRowColumn graphics_options_rc;
	XmNleftOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
    };
    controls {
	XmText          bit_planes_text_st;
	XmLabel         bit_planes_label;
    };
};	

object bit_planes_text_st: XmText
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNcolumns = 2;
	XmNrows = 1;
	XmNmaxLength = 1;
	XmNresizeHeight = false;
	XmNresizeWidth = false;
	};
    callbacks
	{
	MrmNcreateCallback = procedure bit_planes_text_cb();
	XmNhelpCallback = procedure help_system_proc( bit_planes_text_cs_help );
	};
    };

object bit_planes_label: XmLabel
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNtopWidget = XmText bit_planes_text_st;
	XmNtopOffset = LabelTextVerticalOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmText bit_planes_text_st;
	XmNleftOffset = LabelTextHorizontalOffset;
	XmNlabelString = GraphicsDBBitPlanesLabel;
	};
    };
 
object graphics_buttons_form: XmForm {
    arguments {
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNtopWidget = XmRowColumn graphics_options_rc;
        XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
    };
    controls {
	XmPushButton    graphics_ok_pb;
	XmPushButton    graphics_apply_pb;
	XmPushButton    graphics_cancel_pb;
	XmPushButton    graphics_help_pb;
    };
};	

object graphics_ok_pb: XmPushButton
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
 	XmNdefaultButtonShadowThickness = 1;
	XmNshowAsDefault = 1;
	XmNwidth = LongestLabelWidth;
	XmNlabelString = OKLabel;
	};
    callbacks
	{
	XmNactivateCallback = procedure graphics_ok_cb();
	XmNhelpCallback = procedure help_system_proc( graphics_ok_cs_help );
	};
    };

object graphics_apply_pb: XmPushButton
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftWidget = XmPushButton graphics_ok_pb;
	XmNleftOffset = NormalOffset;
	XmNdefaultButtonShadowThickness = 1;
	XmNwidth = LongestLabelWidth;
	XmNlabelString = ApplyLabel;
	};
    callbacks
	{
	XmNactivateCallback = procedure graphics_apply_cb();
	XmNhelpCallback = procedure help_system_proc( graphics_apply_cs_help );
	};
    };

object graphics_cancel_pb: XmPushButton
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftWidget = XmPushButton graphics_apply_pb;
	XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
	XmNwidth = LongestLabelWidth;
	XmNlabelString = CancelLabel;
	};
    callbacks
	{
	XmNactivateCallback = procedure graphics_cancel_cb();
	XmNhelpCallback = procedure help_system_proc( graphics_cancel_cs_help );
	};
    };

object graphics_help_pb: XmPushButton
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
        XmNleftWidget = XmPushButton graphics_cancel_pb;
	XmNleftOffset = NormalOffset;
 	XmNdefaultButtonShadowThickness = 1;
	XmNwidth = LongestLabelWidth;
	XmNlabelString = HelpLabel;
	};
    callbacks
	{
	XmNactivateCallback = 
			  procedure help_system_proc (graphics_button_cs_help);
	XmNhelpCallback = procedure help_system_proc (graphics_help_cs_help);
	};
    };


!+
! Define printer setup dialog box
!-
object setup_printer_db: XmFormDialog
    {
    arguments
	{
	XmNautoUnmanage = false;
	XmNallowOverlap = true;
	XmNdefaultPosition = true;
	XmNdialogTitle = PrinterDBTitle;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNnoResize = true;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
        XmNcancelButton = XmPushButton printer_cancel_pb;
	XmNdefaultButton = XmPushButton printer_ok_pb;
	};
    controls
	{
	XmForm          printer_left_form;
	XmForm          printer_right_form;
	XmForm          printer_buttons_form;
	};
    };
 
object printer_left_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    };
    controls {
	XmLabel		printing_destination_label;
	XmRadioBox	printing_destination_rb;
	XmPushButton	queued_printer_options_pb;
	XmText		printer_port_st;
	XmText		printer_file_st;

	XmRadioBox	print_mode_rb;
	XmRadioBox	print_extent_rb;
	XmRadioBox	print_data_type_rb;
    };
};	

!+
! printing destination radio box
!
!	Printing Destination
!
!	o Queued Printer  [Options...]
!	o Printer Port  |_____________
!	o File  |_____________________
!	o None
!-
object printing_destination_label: XmLabel
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNlabelString = PrinterDBPrintingDestinationLabel;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	};
    };

object printing_destination_rb: XmRadioBox
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel printing_destination_label;
	XmNtopOffset = TinyOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNspacing = SmallOffset;
	XmNpacking = XmPACK_TIGHT;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	};
    controls
	{
	XmToggleButton queued_printer_tb;
	XmToggleButton printer_port_tb;
	XmToggleButton printer_file_tb;
	XmToggleButton printer_none_tb;
	};
    };

object queued_printer_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBQueuedPrinterTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure queued_printer_cb();
	XmNhelpCallback = procedure help_system_proc( queued_printer_cs_help );
	};
    };

object printer_port_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBPrinterPortTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure printer_port_cb();
	XmNhelpCallback = procedure help_system_proc( printer_port_cs_help );
	};
    };

object printer_file_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBFileTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure printer_file_cb();
	XmNhelpCallback = procedure help_system_proc( printer_file_cs_help );
	};
    };

object printer_none_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBNoneTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure printer_none_cb();
	XmNhelpCallback = procedure help_system_proc( printer_none_cs_help );
	};
    };

object queued_printer_options_pb: XmPushButton
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNtopWidget = printing_destination_rb;
	XmNtopOffset = TinyOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmRadioBox printing_destination_rb;
	XmNleftOffset = SmallOffset;
	XmNlabelString = PrinterDBOptionsPB;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	};
    callbacks
	{
	XmNactivateCallback = procedure queued_printer_options_cb();
	XmNhelpCallback = procedure help_system_proc( queued_printer_options_cs_help );
	};
    };

object printer_port_st: XmText
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmPushButton queued_printer_options_pb;
	XmNtopOffset = TinyOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmRadioBox printing_destination_rb;
	XmNleftOffset = SmallOffset;
	XmNcolumns = 15;
	XmNrows = 1;
	XmNmaxLength = 30;
	XmNresizeHeight = false;
	XmNresizeWidth = false;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	};
    callbacks
	{
	MrmNcreateCallback = procedure printer_port_text_cb();
	XmNhelpCallback = procedure help_system_proc( printer_port_text_cs_help );
	};
    };

object printer_file_st: XmText
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmText printer_port_st;
	XmNtopOffset = TinyOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmRadioBox printing_destination_rb;
	XmNleftOffset = SmallOffset;
	XmNcolumns = 15;
	XmNrows = 1;
	XmNmaxLength = 100;
	XmNresizeHeight = false;
	XmNresizeWidth = false;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	};
    callbacks
	{
	MrmNcreateCallback = procedure printer_file_text_cb();
	XmNhelpCallback = procedure help_system_proc( printer_file_text_cs_help );
	};
    };

!+
! print mode radio box
!	normal print mode
!	auto print mode
!	printer controller mode
!-
object print_mode_rb: XmRadioBox
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox printing_destination_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	};
    controls
	{
	XmToggleButton normal_print_tb;
	XmToggleButton auto_print_tb;
	XmToggleButton printer_controller_tb;
	};
    };

object normal_print_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBNormalModeTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure normal_print_cb();
	XmNhelpCallback = procedure help_system_proc( normal_print_cs_help );
	};
    };

object auto_print_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBAutoModeTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure auto_print_cb();
	XmNhelpCallback = procedure help_system_proc( auto_print_cs_help );
	};
    };

object printer_controller_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBControllerModeTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure printer_controller_cb();
	XmNhelpCallback = procedure help_system_proc( printer_controller_cs_help );
	};
    };
!+
! print extent radio box
!	print full page
!	print full page + transcript
!	print scroll region only
!	print selection only
!-
object print_extent_rb: XmRadioBox
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox print_mode_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	};
    controls
	{
	XmToggleButton print_full_page_tb;
	XmToggleButton print_full_page_transcript_tb;
	XmToggleButton print_scroll_region_tb;
	XmToggleButton print_selection_tb;
	};
    };

object print_full_page_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBFullPageTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure print_full_page_cb();
	XmNhelpCallback = procedure help_system_proc( print_full_page_cs_help );
	};
    };

object print_full_page_transcript_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBFullPageTranscriptTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure print_full_page_transcript_cb();
	XmNhelpCallback = procedure help_system_proc( full_page_transcript_cs_help );
	};
    };

object print_scroll_region_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBScrollRegionOnlyTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure print_scroll_region_cb();
	XmNhelpCallback = procedure help_system_proc( print_scroll_region_cs_help );
	};
    };

object print_selection_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBSelectionOnlyTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure print_selection_cb();
	XmNhelpCallback = procedure help_system_proc( print_selection_cs_help );
	};
    };
!+
! print data type radio box
!	print national characters only
!	print national + line drawing
!	print all characters
!-
object print_data_type_rb: XmRadioBox
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox print_extent_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	};
    controls
	{
	XmToggleButton print_national_tb;
	XmToggleButton print_national_line_drawing_tb;
	XmToggleButton print_all_characters_tb;
	};
    };

object print_national_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBPrintNationalOnlyTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure print_national_cb();
	XmNhelpCallback = procedure help_system_proc( print_national_cs_help );
	};
    };

object print_national_line_drawing_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBPrintNationalLineTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure print_national_line_drawing_cb();
	XmNhelpCallback = procedure help_system_proc( national_line_drawing_cs_help );
	};
    };

object print_all_characters_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBPrintAll;
	};
    callbacks
	{
	MrmNcreateCallback = procedure print_all_characters_cb();
	XmNhelpCallback = procedure help_system_proc( print_all_characters_cs_help );
	};
    };
 
object printer_right_form: XmForm {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmForm printer_left_form;
	XmNleftOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    };
    controls {
        XmRowColumn     printer_options_rc;
	XmRadioBox	sixel_level_rb;
	XmRadioBox	print_orientation_rb;
	XmRadioBox	color_printing_rb;
	XmRadioBox	printer_nbits_rb;
	XmRadioBox	print_color_syntax_rb;
    };
};	

!+
! toggle buttons rowcolumn
!       form feed terminator
!       printer to host
!       graphics printing
!       background printing
!-
object printer_options_rc: XmRowColumn {
    arguments {
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_COLUMN;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    };
    controls {
	XmToggleButton	form_feed_terminator_tb;
	XmToggleButton	printer_to_host_tb;
	XmToggleButton	graphics_printing_tb;
	XmToggleButton	background_printing_tb;
    };
};

object form_feed_terminator_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBFormFeedTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure form_feed_terminator_cb();
	XmNhelpCallback = procedure help_system_proc( form_feed_terminator_cs_help );
	};
    };

object printer_to_host_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBPrinterToHostTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure printer_to_host_cb();
	XmNhelpCallback = procedure help_system_proc( printer_to_host_cs_help );
	};
    };

object graphics_printing_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBGraphicsPrintingTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure graphics_printing_cb();
	XmNhelpCallback = procedure help_system_proc( graphics_printing_cs_help );
	};
    };

object background_printing_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBBackgroundPrintingTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure background_printing_cb();
	XmNhelpCallback = procedure help_system_proc( background_printing_cs_help );
	};
    };

!+
! sixel level radio box
!	level 1 sixel graphics
!	level 2 sixel graphics
!	la210 sixel graphics
!-
object sixel_level_rb: XmRadioBox
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRowColumn printer_options_rc;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	};
    controls
	{
	XmToggleButton level_1_sixel_tb;
	XmToggleButton level_2_sixel_tb;
	XmToggleButton la210_sixel_tb;
	};
    };

object level_1_sixel_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBLevel1SixelTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure level_1_sixel_cb();
	XmNhelpCallback = procedure help_system_proc( level_1_sixel_cs_help );
	};
    };

object level_2_sixel_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBLevel2SixelTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure level_2_sixel_cb();
	XmNhelpCallback = procedure help_system_proc( level_2_sixel_cs_help );
	};
    };

object la210_sixel_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBLA210SixelTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure la210_sixel_cb();
	XmNhelpCallback = procedure help_system_proc( la210_sixel_cs_help );
	};
    };

!+
! print orientation radio box
!	compressed graphics printing
!	expanded graphics printing
!	rotated graphics printing
!-
object print_orientation_rb: XmRadioBox
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox sixel_level_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	};
    controls
	{
	XmToggleButton compressed_printing_tb;
	XmToggleButton expanded_printing_tb;
	XmToggleButton rotated_printing_tb;
	};
    };

object compressed_printing_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBCompressedGraphicsTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure compressed_printing_cb();
	XmNhelpCallback = procedure help_system_proc( compressed_printing_cs_help );
	};
    };

object expanded_printing_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBExpandedGraphicsTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure expanded_printing_cb();
	XmNhelpCallback = procedure help_system_proc( expanded_printing_cs_help );
	};
    };

object rotated_printing_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBRotatedGraphicsTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure rotated_printing_cb();
	XmNhelpCallback = procedure help_system_proc( rotated_printing_cs_help );
	};
    };

!+
! monochrome/color printing radio box
!	monochrome printing
!	color printing
!-
object color_printing_rb: XmRadioBox
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox print_orientation_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	};
    controls
	{
	XmToggleButton monochrome_printing_tb;
	XmToggleButton color_printing_tb;
	};
    };

object monochrome_printing_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBMonochromePrintingTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure monochrome_printing_cb();
	XmNhelpCallback = procedure help_system_proc( monochrome_printing_cs_help );
	};
    };

object color_printing_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBColorPrintingTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure color_printing_cb();
	XmNhelpCallback = procedure help_system_proc( color_printing_cs_help );
	};
    };
!+
! 7-bit/8-bit printer radio box
!	7-bit printer
!	8-bit printer
!-
object printer_nbits_rb: XmRadioBox
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox color_printing_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	};
    controls
	{
	XmToggleButton printer_7bit_tb;
	XmToggleButton printer_8bit_tb;
	};
    };

object printer_7bit_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDB7BitPrinterTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure printer_7bit_cb();
	XmNhelpCallback = procedure help_system_proc( printer_7bit_cs_help );
	};
    };

object printer_8bit_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDB8BitPrinterTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure printer_8bit_cb();
	XmNhelpCallback = procedure help_system_proc( printer_8bit_cs_help );
	};
    };

!+
! color syntax radio box
!-
object print_color_syntax_rb: XmRadioBox
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmRadioBox printer_nbits_rb;
	XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNpacking = XmPACK_TIGHT;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
	};
    controls
	{
	XmToggleButton hls_syntax_tb;
	XmToggleButton rgb_syntax_tb;
	};
    };

object hls_syntax_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBHLSColorSyntaxTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure hls_syntax_cb();
	XmNhelpCallback = procedure help_system_proc( hls_syntax_cs_help );
	};
    };

object rgb_syntax_tb: XmToggleButton
    {
    arguments
	{
	XmNlabelString = PrinterDBRGBColorSyntaxTB;
	};
    callbacks
	{
	MrmNcreateCallback = procedure rgb_syntax_cb();
	XmNhelpCallback = procedure help_system_proc( rgb_syntax_cs_help );
	};
    };
 
object printer_buttons_form: XmForm {
    arguments {
        XmNtopAttachment = XmATTACH_WIDGET;
        XmNtopWidget = XmForm printer_right_form;
        XmNtopOffset = NormalOffset;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = NormalOffset;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = NormalOffset;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = NormalOffset;
	XmNnavigationType = XmEXCLUSIVE_TAB_GROUP;
    };
    controls {
	XmPushButton	printer_ok_pb;
	XmPushButton	printer_apply_pb;
	XmPushButton	printer_cancel_pb;
	XmPushButton	printer_help_pb;
    };
};	

!+
! Printer OK, Apply, and Cancel push buttons
!-
object printer_ok_pb: XmPushButton
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNdefaultButtonShadowThickness = 1;
	XmNshowAsDefault = 1;
	XmNwidth = LongestLabelWidth;
	XmNlabelString = OKLabel;
	};
    callbacks
	{
	XmNactivateCallback = procedure printer_ok_cb();
	XmNhelpCallback = procedure help_system_proc( printer_ok_cs_help );
	};
    };

object printer_apply_pb: XmPushButton
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmPushButton printer_ok_pb;
	XmNleftOffset = NormalOffset;
	XmNdefaultButtonShadowThickness = 1;
	XmNwidth = LongestLabelWidth;
	XmNlabelString = ApplyLabel;
	};
    callbacks
	{
	XmNactivateCallback = procedure printer_apply_cb();
	XmNhelpCallback = procedure help_system_proc( printer_apply_cs_help );
	};
    };

object printer_cancel_pb: XmPushButton
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmPushButton printer_apply_pb;
	XmNleftOffset = NormalOffset;
	XmNdefaultButtonShadowThickness = 1;
	XmNwidth = LongestLabelWidth;
	XmNlabelString = CancelLabel;
	};
    callbacks
	{
	XmNactivateCallback = procedure printer_cancel_cb();
	XmNhelpCallback = procedure help_system_proc( printer_cancel_cs_help );
	};
    };

object printer_help_pb: XmPushButton
    {
    arguments
	{
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 0;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmPushButton printer_cancel_pb;
	XmNleftOffset = NormalOffset;
	XmNbottomOffset = 0;
	XmNdefaultButtonShadowThickness = 1;
	XmNwidth = LongestLabelWidth;
	XmNlabelString = HelpLabel;
	};
    callbacks
	{
	XmNactivateCallback = 
			  procedure help_system_proc( printer_button_cs_help );
	XmNhelpCallback = procedure help_system_proc( printer_help_cs_help );
	};
    };

!+
! Define queued printer options (print widget) dialog box
!-
object queued_printer_options_db: DXmPrintDialog
    {
    arguments
	{
	XmNdialogTitle = QueuedPrinterOptionsDBTitle;
	};
    callbacks
	{
	MrmNcreateCallback = procedure print_widget_create_cb();
        XmNokCallback = procedure print_widget_ok_cb();
        XmNcancelCallback = procedure print_widget_ok_cb();
	};
    };


!+
! File Selection Widgets
!-
! VMS
object file_open_fs: XmFileSelectionDialog
    {
    arguments
        {
        XmNdefaultPosition = true;
        XmNdialogTitle = UseSettingsFromDBTitle;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNfileListLabelString = UseSettingsFromDBSelectLabel;
        XmNlistVisibleItemCount = 5;
        XmNmarginWidth = NormalOffset;
        XmNresizePolicy = XmRESIZE_NONE;
        };
    callbacks
        {
        XmNokCallback = procedure file_open_fs_cb();
        XmNcancelCallback   = procedure file_open_fs_cb();
	XmNhelpCallback = procedure help_system_proc( file_open_cs_help );
        MrmNcreateCallback = procedure file_open_create_cb();
        };
    };

object file_saveas_fs: XmFileSelectionDialog
    {
    arguments
        {
        XmNdefaultPosition = true;
        XmNdialogTitle = SaveSettingsAsDBTitle;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNfileListLabelString = SaveSettingsAsDBSelectLabel;
        XmNlistVisibleItemCount = 5;
        XmNmarginWidth = NormalOffset;
        XmNresizePolicy = XmRESIZE_NONE;
        };
    callbacks
        {
        XmNokCallback = procedure file_saveas_fs_cb();
        XmNcancelCallback   = procedure file_saveas_fs_cb();
	XmNhelpCallback = procedure help_system_proc( file_saveas_cs_help );
        MrmNcreateCallback = procedure file_saveas_create_cb();
        };
    };

end module;

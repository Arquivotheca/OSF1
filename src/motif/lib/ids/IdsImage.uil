!**************************************************************************
!**
!**  Copyright (c) Digital Equipment Corporation, 1990 All Rights Reserved.
!**  Unpublished rights reserved under the copyright laws of the United States.
!**  The software contained on this media is proprietary to and embodies the
!**  confidential technology of Digital Equipment Corporation.  Possession, use,
!**  duplication or dissemination of the software and media is authorized only
!**  pursuant to a valid written license from Digital Equipment Corporation.
!**
!**  RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure by the U.S.
!**  Government is subject to restrictions as set forth in Subparagraph
!**  (c)(1)(ii) of DFARS 252.227-7013, or in FAR 52.227-19, as applicable.
!***************************************************************************
!
! Module IDS$IMAGE
!
include file 'IdsDef.uil';
!
!  Widget creation entry points
!
procedure IdsPannedImageCreate();
procedure IdsStaticImageCreate();
procedure IdsXmPannedImageCreate();
procedure IdsXmStaticImageCreate();
! 
!  Resource names
!
value image_background		: argument(IdsNimageBackground,color);
value image_foreground		: argument(IdsNimageForeground,color);
value frame_depth		: argument(IdsNframeDepth,integer);
value frame_width		: argument(IdsNframeWidth,integer);
value frame_height		: argument(IdsNframeHeight,integer);
value render_mode		: argument(IdsNrenderMode,integer);
value compute_mode		: argument(IdsNcomputeMode,integer);
value render_scheme		: argument(IdsNrenderScheme,integer);
value protocol			: argument(IdsNprotocol,integer);
value fid			: argument(IdsNfid,integer);
value roi			: argument(IdsNroi,integer);
value colormap_mode		: argument(IdsNcolormapMode,integer);
value colormap_update		: argument(IdsNcolormapUpdate,integer);
value rotate_mode		: argument(IdsNrotateMode,integer);
value rotate_options		: argument(IdsNrotateOptions,integer);
value rotate_angle		: argument(IdsNrotateAngle,integer);
value flip_options		: argument(IdsNflipOptions,integer);
value scale_mode		: argument(IdsNscaleMode,integer);
value scale_options		: argument(IdsNscaleOptions,integer);
value x_scale			: argument(IdsNxScale,integer);
value y_scale			: argument(IdsNyScale,integer);
value punch_1			: argument(IdsNpunch1,integer);
value punch_2			: argument(IdsNpunch2,integer);
value sharpen			: argument(IdsNsharpen,integer);
value dither_algorithm		: argument(IdsNditherAlgorithm,integer);
value dither_threshold		: argument(IdsNditherThreshold,integer);
value pixel_list		: argument(IdsNpixelList,integer);
value pixel_count		: argument(IdsNpixelCount,integer);
value palette_list		: argument(IdsNpaletteList,integer);
value palette_count		: argument(IdsNpaletteCount,integer);
value color_space		: argument(IdsNcolorSpace,integer);
value match_limit		: argument(IdsNmatchLimit,integer);
value gray_limit		: argument(IdsNgrayLimit,integer);
value x_pels_per_bmu		: argument(IdsNxPelsPerBMU,integer);
value y_pels_per_bmu		: argument(IdsNyPelsPerBMU,integer);
value rendering_class		: argument(IdsNrenderingClass,integer);
value levels_gray		: argument(IdsNlevelsGray,integer);
value levels_red		: argument(IdsNlevelsRed,integer);
value levels_green		: argument(IdsNlevelsGreen,integer);
value levels_blue		: argument(IdsNlevelsBlue,integer);
value fit_levels		: argument(IdsNfitLevels,integer);
value fit_width			: argument(IdsNfitWidth,integer);
value fit_height		: argument(IdsNfitHeight,integer);
value copy_fid			: argument(IdsNcopyFid,integer);
value rotate_width	 	: argument(IdsNrotateWidth,integer);
value rotate_height	 	: argument(IdsNrotateHeight,integer);
value rotate_first_fill	 	: argument(IdsNrotateFirstFill,integer);
value rotate_second_fill	: argument(IdsNrotateSecondFill,integer);
value rotate_third_fill	 	: argument(IdsNrotateThirdFill,integer);
value save_mode	 	        : argument(IdsNsaveRendition,integer);
value cmpres_mode	        : argument(IdsNcompressMode,integer);
value cmporg_mode	        : argument(IdsNcomporgMode,integer);


value source_x			: argument(IdsNsourceX,integer);
value source_y			: argument(IdsNsourceY,integer);
value source_width		: argument(IdsNsourceWidth,integer);
value source_height		: argument(IdsNsourceHeight,integer);
value source_gravity		: argument(IdsNsourceGravity,integer);
value window_gravity		: argument(IdsNwindowGravity,integer);
value window_x			: argument(IdsNwindowX,integer);
value window_y			: argument(IdsNwindowY,integer);
value window_width		: argument(IdsNwindowWidth,integer);
value window_height		: argument(IdsNwindowHeight,integer);
value scroll_dynamic		: argument(IdsNscrollDynamic,integer);
!
! Callback reasons
!
value render			: reason(IdsNrenderCallback);
value notify			: reason(IdsNworkNotifyCallback);
value error			: reason(IdsNerrorCallback);
value expose			: reason(IdsNexposeCallback);
value xielist			: reason(IdsNxieListCallback);
value save			: reason(IdsNsaveImageCallback);
value view			: reason(IdsNviewCallback);
value drag			: reason(IdsNdragCallback);

! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
!++
! COPYRIGHT (c) 1988, 1989, 1990, 1991 BY
! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.
! ALL RIGHTS RESERVED.
!
! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
! ONLY  IN  ACCORDANCE  OF  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE
! INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER
! COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
! OTHER PERSON.  NO TITLE TO AND  OWNERSHIP OF THE  SOFTWARE IS  HEREBY
! TRANSFERRED.
!
! THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE
! AND  SHOULD  NOT  BE  CONSTRUED  AS A COMMITMENT BY DIGITAL EQUIPMENT
! CORPORATION.
!
! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS
! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
!--

!++
!
! Facility:
!   LinkWorks Services User Interface
!
! Abstract:
!   LWK DXm User Interface highlight box description file.
!
! Author:
!   Patricia Avigdor
!
! Creation Date:
!   7-Oct-88
!
! Modification History:
!
!--


!++
!   callback procedures
!--

procedure
    LwkCreateHlightHighlight(any);
    LwkCreateHlightSources(any);
    LwkCreateHlightTargets(any);
    LwkCreateHlightOrphans(any);
    LwkCreateHlightCurrentSource(any);
    LwkCreateHlightCurrentTarget(any);
    LwkCreateHlightDestination(any);
    LwkToggleHlightHighlight(any);
    LwkToggleHlightToggle(any);
    LwkActivateHlightOk(any);
    LwkActivateHlightApply(any);
    LwkActivateHlightReset(any);
    LwkActivateHlightCancel(any);
    LwkCreateHlightOk(any);
    LwkCreateHlightApply(any);
    LwkCreateHlightReset(any);
    LwkCreateHlightCancel(any);


!++
! Beginning of I18N Translatable values for this Module
!--

!
! Dialog Box Title template: the Application name will appended before
! the :
!

value
    HlightBoxTitle : exported
	compound_string(": Highlighting");

!   
! To make all the Push Buttons in the Box the same width, this value should
! be large enough so that the XmLabel of the largest Push Button just fits
!
value
    HlightMaxButtonWidth : 70;


!
! To make the Push Buttons equally spaced you should play with these values.
!
    HlightOkBLeftPos	    :  2;
    HlightApplyBLeftPos	    : 22;
    HlightCancelBLeftPos    : 42;
    HlightResetBLeftPos	    : 62;
    HlightHelpBLeftPos	    : 82;
    
value
    HlightToggleIndentForm : 30;
    HlightToggleSeparator : 2;


!
! Labels for the Toggle/Push Buttons
!

value
    HlightHightlightLabel :
	compound_string("Highlight");
    HlightSourcesLabel :
	compound_string("Sources");
    HlightTargetsLabel :
	compound_string("Targets");
    HlightOrphansLabel :
	compound_string("Orphans");
    HlightCurrentSourceLabel :
	compound_string("Pending Source");
    HlightCurrentTargetLabel :
	compound_string("Pending Target");
    HlightCurrentDestinationLabel :
	compound_string("Navigation Destination");
    HlightOkLabel :
	compound_string("OK");
    HlightApplyLabel :
	compound_string("Apply");
    HlightResetLabel :
	compound_string("Reset");
    HlightCancelLabel :
	compound_string("Cancel");
    HlightHelpLabel :
	compound_string("Help");

!++
! End of I18N Translatable values for this Module
!--


!++
!   Highlight dialog box description
!--

object HighlightBox : XmFormDialog {
    arguments {
	XmNnoResize = true;
	XmNdefaultPosition = false;
    	XmNautoUnmanage = false;
	XmNhorizontalSpacing = LWKDefaultDialogBorder;
	XmNverticalSpacing = LWKDefaultDialogBorder;
        XmNdefaultButton = XmPushButton HlightOk;
	XmNcancelButton = XmPushButton HlightCancel;
	XmNuserData = LwkPrivate;
    };
    controls {
	XmForm		HighlightSettingToggleButtons;
	XmPushButton 	HlightOk;
	XmPushButton 	HlightApply;
	XmPushButton 	HlightReset;
	XmPushButton 	HlightCancel;
	XmPushButton 	HlightHelp;
    };
    callbacks {
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(HighlightBoxHelpKey);
    };
};


object HighlightSettingToggleButtons : XmForm  {
    arguments {
	XmNshadowThickness = LWKDefaultShadowThickness;
	XmNshadowType = LWKDefaultShadowType;
	XmNleftAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhorizontalSpacing = LWKDefaultMarginWidth;
	XmNverticalSpacing = LWKDefaultMarginHeight;	
    };
    controls {
	XmToggleButton	HlightHighlight;
	XmRowColumn	HlightRowColumn;
    };
};

object HlightRowColumn : XmRowColumn {
    arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = HlightToggleIndentForm;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopOffset = 0;
	XmNtopWidget = XmToggleButton HlightHighlight;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNpacking = XmPACK_COLUMN;
	XmNnumColumns = 2;
	XmNorientation = XmVERTICAL;
    };
    controls {
	XmToggleButton	HlightSources;
	XmToggleButton	HlightTargets;
	XmToggleButton	HlightOrphans;
	XmToggleButton	HlightCurrentSource;
	XmToggleButton	HlightCurrentTarget;
	XmToggleButton	HlightDestination;
    };
};


object HlightHighlight : XmToggleButton {
    arguments {
	XmNlabelString  = HlightHightlightLabel;
	XmNleftAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateHlightHighlight(LwkPrivate);
	XmNvalueChangedCallback = 
	    procedure LwkToggleHlightHighlight(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(HlightHightlightHelpKey);
    };
};

object HlightSources : XmToggleButton {
    arguments {
	XmNlabelString  = HlightSourcesLabel;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateHlightSources(LwkPrivate);
	XmNvalueChangedCallback = procedure LwkToggleHlightToggle(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(HlightSourcesHelpKey);
    };
};

object HlightTargets : XmToggleButton {
    arguments {
      	XmNlabelString  = HlightTargetsLabel;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateHlightTargets(LwkPrivate);
	XmNvalueChangedCallback = procedure LwkToggleHlightToggle(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(HlightTargetsHelpKey);
    };
};

object HlightOrphans : XmToggleButton {
    arguments {
	XmNlabelString  = HlightOrphansLabel;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateHlightOrphans(LwkPrivate);
	XmNvalueChangedCallback = procedure LwkToggleHlightToggle(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(HlightOrphansHelpKey);
    };
};

object HlightCurrentSource : XmToggleButton {
    arguments {
	XmNlabelString  = HlightCurrentSourceLabel;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateHlightCurrentSource(LwkPrivate);
	XmNvalueChangedCallback = procedure LwkToggleHlightToggle(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(HlightCurrentSourceHelpKey);
    };
};

object HlightCurrentTarget : XmToggleButton {
    arguments {
	XmNlabelString  = HlightCurrentTargetLabel;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateHlightCurrentTarget(LwkPrivate);
	XmNvalueChangedCallback = procedure LwkToggleHlightToggle(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(HlightCurrentTargetHelpKey);
    };
};

object HlightDestination : XmToggleButton {
    arguments {
	XmNlabelString  = HlightCurrentDestinationLabel;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateHlightDestination(LwkPrivate);
	XmNvalueChangedCallback = procedure LwkToggleHlightToggle(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(HlightCurrentDestinationHelpKey);
    };
};

object HlightOk : XmPushButton {
    arguments {
	XmNlabelString = HlightOkLabel;
	XmNwidth = HlightMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = HlightOkBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm HighlightSettingToggleButtons;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateHlightOk(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateHlightOk(LwkPrivate);	
	XmNhelpCallback = procedure LwkContextSensitiveHelp(HlightOkHelpKey);
    };
};

object HlightApply : XmPushButton {
    arguments {
	XmNlabelString = HlightApplyLabel;
	XmNwidth = HlightMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = HlightApplyBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm HighlightSettingToggleButtons;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateHlightApply(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateHlightApply(LwkPrivate);	
	XmNhelpCallback = procedure LwkContextSensitiveHelp(HlightApplyHelpKey);
    };
};

object HlightReset : XmPushButton {
    arguments {
	XmNlabelString = HlightResetLabel;
	XmNwidth = HlightMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = HlightResetBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm HighlightSettingToggleButtons;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateHlightReset(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateHlightReset(LwkPrivate);	
	XmNhelpCallback = procedure LwkContextSensitiveHelp(HlightResetHelpKey);
    };
};

object HlightCancel: XmPushButton {
    arguments {
	XmNlabelString = HlightCancelLabel;
	XmNwidth = HlightMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = HlightCancelBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm HighlightSettingToggleButtons;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateHlightCancel(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateHlightCancel(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(HlightCancelHelpKey);
    };
};

object HlightHelp: XmPushButton {
    arguments {
	XmNlabelString = HlightHelpLabel;
	XmNwidth = HlightMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = HlightHelpBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm HighlightSettingToggleButtons;
	XmNuserData = LwkPrivate;
    };
    callbacks {
    	XmNactivateCallback = 
	    procedure LwkContextSensitiveHelp(HighlightBoxHelpKey);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(HlightHelpHelpKey);
    };
};

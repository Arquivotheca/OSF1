! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
!++
! COPYRIGHT (c) 1988, 1989, 1990, 1991 BY
! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.
! ALL RIGHTS RESERVED.
!
! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
! ONLY  IN  ACCORDANCE  OF  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE
! INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER
! COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
! OTHER PERSON.  NO TITLE TO AND  OWNERSHIP OF THE  SOFTWARE IS  HEREBY
! TRANSFERRED.
!
! THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE
! AND  SHOULD  NOT  BE  CONSTRUED  AS A COMMITMENT BY DIGITAL EQUIPMENT
! CORPORATION.
!
! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS
! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
!--

!++
!
! Facility:
!   LinkWorks Services User Interface
!
! Abstract:
!   LWK DXm User Interface Show Links box description file.
!
! Author:
!   Patricia Avigdor
!
! Creation Date:
!   7-Oct-88
!
! Modification History:
!
!--



!++
! Beginning of I18N Translatable values for this Module
!--

!
! Dialog Box Title template: the Application name will be substituted
! before the colon
!

value
    ShowLinksBoxTitle : exported
	compound_string(": Links");

!
! Dialog Box sizes
!

value
    ShowLinksSvnWidth : 300;
    ShowLinksSvnHeight : 200;

!
! To make all the Push Buttons in the Box the same width, this value should
! be large enough so that the Label of the largest Push Button just fits
!
value
    ShowLinksButtonWidth	: 70;

!
! Define offset values
! 
value
    ShowLinksIndentation    : 10;
    
! 
!
! Labels and Text for the Delete Link Caution Box
!

value
    DeleteLinkCautionLabel :
	compound_string("Are you sure you want to delete this Link?");

!
! Labels for the Push Buttons
!

value
    ShowLinksListLabelLabel :
	compound_string("Links");
    
! The spaces added in the following label are just there because this label is 
! not attached to the right on the form.
    ShowLinksLinkOpLabelLabel :
	compound_string("Link Operations");
	
    ShowLinksUpdateLabel :
	compound_string("Update");

    ShowLinksShowLinkLabel :
	compound_string("Show Link...");
    
    ShowLinksDeleteLabel :
	compound_string("Delete Link");
    
    ShowLinksNavLabelLabel:
	compound_string("Navigation");
    
    ShowLinksOprLabelLabel :
	compound_string("Operation");
    
    ShowLinksVisitLabel :
	compound_string("Visit");
    
    ShowLinksGoToLabel :
	compound_string("Go To");
    
    ShowLinksCancelLabel :
	compound_string("Cancel");
    
    ShowLinksHelpLabel :
	compound_string("Help");

!++
! End of I18N Translatable values for this Module
!--


!++
!   callback procedures
!--

procedure
    LwkCreateShowLinksLinks(any);
    LwkCreateShowLinksShow(any);
    LwkCreateShowLinksDelete(any);
    LwkCreateShowLinksCancel(any);
    LwkCreateShowLinksGoTo(any);
    LwkCreateShowLinksVisit(any);
    LwkCreateShowLinksOperationMenu(any);
    LwkCreateShowLinksListForm(any);
    LwkCreateShowLinksButtonsForm(any);
    LwkCreateShowLinksNavigateForm(any);
    LwkCreateShowLinksEditForm(any);
    LwkActivateShowLinksUpdate(any);
    LwkActivateShowLinksShow(any);
    LwkActivateShowLinksDelete(any);
    LwkActivateShowLinksGoTo(any);
    LwkActivateShowLinksVisit(any);
    LwkActivateShowLinksCancel(any);
    LwkConfirmShowLinksDelete(any);
    LwkSelectShowLinksLink(any);
    LwkConfirmShowLinksLink(any);
    LwkSelectShowLinksOperation(any);
    LwkSelectShowLinksDone(any);


!++
!   Show Links Dialog Box description
!--

object ShowLinksBox : XmFormDialog {
    arguments {
	XmNnoResize = false;
	XmNdefaultPosition = false;
	XmNresizePolicy = XmRESIZE_ANY;
	XmNautoUnmanage = false;
	XmNhorizontalSpacing = LWKDefaultDialogBorder;
	XmNverticalSpacing = LWKDefaultDialogBorder;
	XmNcancelButton = XmPushButton ShowLinksCancel;
	XmNuserData = LwkPrivate;
    };
    controls { 
	XmForm ShowLinksButtonsForm;
	XmForm ShowLinksNavigateForm;
	XmForm ShowLinksEditForm;
	XmPushButton ShowLinksUpdate;
	XmForm ShowLinksListForm;
    };
    callbacks {
	XmNhelpCallback =
	    procedure LwkContextSensitiveHelp(ShowLinksBoxHelpKey);
    };
};

object ShowLinksButtonsForm : XmForm {
    arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 0;
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 0;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNhorizontalSpacing = LWKDefaultMarginWidth;
	XmNverticalSpacing = LWKDefaultMarginHeight;
	XmNcancelButton = XmPushButton ShowLinksCancel;
    };
    controls {
	XmPushButton ShowLinksCancel;
	XmPushButton ShowLinksHelp;
    };
    callbacks {
	MrmNcreateCallback = procedure 
	    LwkCreateShowLinksButtonsForm(LwkPrivate);
    };
};

object ShowLinksNavigateForm : XmForm {
    arguments {
	XmNshadowThickness = LWKDefaultShadowThickness;
	XmNshadowType = LWKDefaultShadowType;
	XmNhorizontalSpacing = LWKDefaultMarginWidth;
	XmNverticalSpacing = LWKDefaultMarginHeight;
	XmNbottomAttachment = XmATTACH_WIDGET;
	XmNbottomWidget = XmForm ShowLinksButtonsForm;
	XmNbottomOffset = 0;
	XmNleftAttachment = XmATTACH_FORM;
    };
    controls {
	XmLabel		ShowLinksNavLabel;
	XmOptionMenu	ShowLinksOprOptions;
	XmPushButton 	ShowLinksVisit;
	XmPushButton 	ShowLinksGoTo;
    };
    callbacks {
	MrmNcreateCallback = procedure
	    LwkCreateShowLinksNavigateForm(LwkPrivate);
    };
};

object ShowLinksEditForm : XmForm {
    arguments {
	XmNshadowThickness = LWKDefaultShadowThickness;
	XmNshadowType = LWKDefaultShadowType;
	XmNhorizontalSpacing = LWKDefaultMarginWidth;
	XmNverticalSpacing = LWKDefaultMarginHeight;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmForm ShowLinksNavigateForm;
	XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNtopWidget = XmForm ShowLinksNavigateForm;
	XmNtopOffset = 0;
	XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNbottomOffset = 0;
	XmNbottomWidget = XmForm ShowLinksNavigateForm;
    };
    controls {
	XmLabel		ShowLinksLinkOpLabel;
	XmPushButton 	ShowLinksDelete;
	XmPushButton 	ShowLinksShowLink;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateShowLinksEditForm(LwkPrivate);
    };
};

object ShowLinksUpdate : XmPushButton {
    arguments {
	XmNlabelString = ShowLinksUpdateLabel;             
	XmNwidth = ShowLinksButtonWidth;
	XmNrecomputeSize = false;
	XmNdefaultButtonShadowThickness = LWKDefaultPBShadow;
	XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNtopWidget = XmForm ShowLinksNavigateForm;
	XmNtopOffset = 0;
	XmNleftWidget = XmForm ShowLinksEditForm;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	XmNactivateCallback =
	    procedure LwkActivateShowLinksUpdate(LwkPrivate);
	XmNhelpCallback =
	    procedure LwkContextSensitiveHelp(ShowLinksUpdateHelpKey);
    };
};

object ShowLinksListForm : XmForm {
    arguments {
	XmNshadowThickness = LWKDefaultShadowThickness;
	XmNshadowType = LWKDefaultShadowType;
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNbottomAttachment = XmATTACH_WIDGET;
	XmNbottomWidget = XmForm ShowLinksNavigateForm;
	XmNhorizontalSpacing = LWKDefaultMarginWidth;
	XmNverticalSpacing = LWKDefaultMarginHeight;
	XmNwidth = ShowLinksSvnWidth;
	XmNheight = ShowLinksSvnHeight;
    };
    controls {
	XmLabel	    ShowLinksListLabel;
	XmSeparator ShowLinksSeparator;
	DXmSvn	    ShowLinksList;
    }; 
    callbacks {
	MrmNcreateCallback = procedure LwkCreateShowLinksListForm(LwkPrivate);
    };
};


!++
!   Delete Link Caution Box description
!--

object DeleteLinkCautionBox : XmQuestionDialog
 {
    arguments {
	XmNmessageString = DeleteLinkCautionLabel;
	XmNdefaultPosition = true;
	XmNdefaultButtonType = XmDIALOG_CANCEL_BUTTON;
	XmNnoResize = true;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	XmNokCallback = procedure LwkConfirmShowLinksDelete(LwkPrivate);
	XmNhelpCallback =
	    procedure LwkContextSensitiveHelp(DeleteLinkCautionBoxHelpKey);
    };
};

object ShowLinksListLabel : XmLabel {
    arguments {
	XmNlabelString = ShowLinksListLabelLabel;
	XmNtopAttachment = XmATTACH_FORM; 
	XmNleftAttachment = XmATTACH_FORM;
    };
};
    
object ShowLinksSeparator : XmSeparator {
    arguments {
	XmNorientation = XmHORIZONTAL;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel ShowLinksListLabel;
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;    
    };
};

object ShowLinksList : DXmSvn {
    arguments {
	DXmSvnNmultipleSelections = false;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmSeparator ShowLinksSeparator;
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNuserData = LwkPrivate;
	};
    callbacks {
	MrmNcreateCallback = procedure LwkCreateShowLinksLinks(LwkPrivate);
	DXmSvnNselectAndConfirmCallback =
	    procedure LwkConfirmShowLinksLink(LwkPrivate);
	DXmSvnNentrySelectedCallback =
	    procedure LwkSelectShowLinksLink(LwkPrivate);
	DXmSvnNtransitionsDoneCallback =
	    procedure LwkSelectShowLinksDone(LwkPrivate);
	DXmSvnNhelpRequestedCallback =
	    procedure LwkSvnHelpRequested(ShowLinksListHelpKey);
  };
};

object ShowLinksNavLabel : XmLabel {
    arguments {
	XmNlabelString = ShowLinksNavLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_FORM; 
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
    };
};

    
object ShowLinksOprOptions : XmOptionMenu {
    arguments {
	XmNlabelString = ShowLinksOprLabelLabel;
	XmNmenuHistory = XmPushButton ShowLinksOprMenuButton;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = ShowLinksIndentation;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel ShowLinksNavLabel;
	XmNrightAttachment = XmATTACH_FORM;
	XmNuserData = LwkPrivate;
    };
    controls {
	XmPulldownMenu ShowLinksOprMenu;
    };
    callbacks {
	MrmNcreateCallback = 
	    procedure LwkCreateShowLinksOperationMenu(LwkPrivate);
	XmNhelpCallback =
	    procedure LwkContextSensitiveHelp(ShowLinksOprListHelpKey);
    };
};

object ShowLinksOprMenu : XmPulldownMenu {
    arguments {
	XmNmenuHistory = XmPushButton ShowLinksOprMenuButton;
	XmNorientation = XmVERTICAL;
	XmNuserData = LwkPrivate;
    };
    controls {
	XmPushButton	ShowLinksOprMenuButton;
    };
    callbacks {
	XmNentryCallback = procedure LwkSelectShowLinksOperation(LwkPrivate);
	XmNhelpCallback =
	    procedure LwkContextSensitiveHelp(ShowLinksOprListHelpKey);
    };
};

object ShowLinksOprMenuButton : XmPushButton {
    arguments {
	XmNlabelString = "...";
	XmNhighlightThickness = LWKDefaultHighlightThickness;
    };
};

object ShowLinksVisit : XmPushButton {
    arguments {
	XmNlabelString = ShowLinksVisitLabel;
	XmNwidth = ShowLinksButtonWidth;
	XmNrecomputeSize = false;
	XmNdefaultButtonShadowThickness = LWKDefaultPBShadow;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmOptionMenu ShowLinksOprOptions;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = ShowLinksIndentation;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateShowLinksVisit(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateShowLinksVisit(LwkPrivate);
	XmNhelpCallback =
	    procedure LwkContextSensitiveHelp(ShowLinksVisitHelpKey);
    };
};

object ShowLinksGoTo : XmPushButton {
    arguments {
	XmNlabelString = ShowLinksGoToLabel;
	XmNwidth = ShowLinksButtonWidth;
	XmNrecomputeSize = false;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmPushButton ShowLinksVisit;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmOptionMenu ShowLinksOprOptions;
	XmNbottomAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNbottomWidget = XmPushButton ShowLinksVisit;
	XmNbottomOffset = 0;
	XmNdefaultButtonShadowThickness = LWKDefaultPBShadow;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateShowLinksGoTo(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateShowLinksGoTo(LwkPrivate);
	XmNhelpCallback =
	    procedure LwkContextSensitiveHelp(ShowLinksGoToHelpKey);
    };
};


object ShowLinksLinkOpLabel : XmLabel {
    arguments {
	XmNlabelString          = ShowLinksLinkOpLabelLabel;
	XmNalignment		= XmALIGNMENT_BEGINNING;
	XmNtopAttachment	= XmATTACH_FORM; 
	XmNleftAttachment       = XmATTACH_FORM;
	XmNrightAttachment	= XmATTACH_FORM;
    };
};

object ShowLinksShowLink : XmPushButton {
    arguments {
	XmNlabelString = ShowLinksShowLinkLabel;
	XmNdefaultButtonShadowThickness = LWKDefaultPBShadow;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel ShowLinksLinkOpLabel;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = ShowLinksIndentation;
	XmNrightAttachment = XmATTACH_FORM;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateShowLinksShow(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateShowLinksShow(LwkPrivate);
	XmNhelpCallback =
	    procedure LwkContextSensitiveHelp(ShowLinksShowLinkHelpKey);
    };
};

object ShowLinksDelete : XmPushButton {
    arguments {
	XmNlabelString = ShowLinksDeleteLabel;
	XmNdefaultButtonShadowThickness = LWKDefaultPBShadow;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = ShowLinksIndentation;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateShowLinksDelete(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateShowLinksDelete(LwkPrivate);
	XmNhelpCallback =
	    procedure LwkContextSensitiveHelp(ShowLinksDeleteHelpKey);
    };
};

object ShowLinksCancel : XmPushButton {
    arguments {
	XmNlabelString = ShowLinksCancelLabel;
	XmNwidth = ShowLinksButtonWidth;
	XmNrecomputeSize = false;
	XmNdefaultButtonShadowThickness = LWKDefaultPBShadow;
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_FORM;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateShowLinksCancel(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateShowLinksCancel(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(ShowLinksCancelHelpKey);
    };
};

object ShowLinksHelp : XmPushButton {
    arguments {
	XmNlabelString = ShowLinksHelpLabel;
	XmNwidth = ShowLinksButtonWidth;
	XmNrecomputeSize = false;
	XmNdefaultButtonShadowThickness = LWKDefaultPBShadow;
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmPushButton ShowLinksCancel;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	XmNactivateCallback =
	    procedure LwkContextSensitiveHelp(ShowLinksBoxHelpKey);
	XmNhelpCallback =
	    procedure LwkContextSensitiveHelp(ShowLinksCancelHelpKey);
    };
};

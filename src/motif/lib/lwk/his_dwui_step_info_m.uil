! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
!++
! COPYRIGHT (c) 1988, 1989, 1990, 1991 BY
! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.
! ALL RIGHTS RESERVED.
!
! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
! ONLY  IN  ACCORDANCE  OF  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE
! INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER
! COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
! OTHER PERSON.  NO TITLE TO AND  OWNERSHIP OF THE  SOFTWARE IS  HEREBY
! TRANSFERRED.
!
! THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE
! AND  SHOULD  NOT  BE  CONSTRUED  AS A COMMITMENT BY DIGITAL EQUIPMENT
! CORPORATION.
!
! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS
! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
!--

!++
!
! Facility:
!   LinkWorks Services User Interface
!
! Abstract:
!   LWK DXm User Interface Step properties dialog box description file.
!
! Author:
!   Doug Rayner
!
! Creation Date:
!   16-Mar-89
!
! Modification History:
!
!--


!++
! Beginning of I18N Translatable values for this Module
!--

!   Number of pixels the description information is indented from
!   the section title.

value
    LWKStepIndentFromTitle : 15;

!
! Dialog Box size
!

!value
!    StepBoxWidth : 500;

!
! To make all the field Labels in the Box the same width, this value should
! be large enough so that the largest Label just fits
!

value
    StepMaxLabelWidth : 90;

!
! To make all the Labels in the Push Buttons the same width, this value should
! be large enough so that the Label of the largest Push Button just fits
!

value
    StepMaxButtonWidth : 70;

!
! To make the Push Buttons equally spaced you should play with these values.
!
    StepOkBLeftPos	    :  2;
    StepApplyBLeftPos	    : 22;
    StepCancelBLeftPos	    : 42;
    StepResetBLeftPos	    : 62;
    StepHelpBLeftPos	    : 82;
    

!
! Labels for the Toggle/Push Buttons
!

value
    StepBoxTitle :
	compound_string("LinkWorks: Step");

    StepOriginLabelLabel :
	compound_string("Origin");

    StepOriginDescLabelLabel :
	compound_string("Description");

    StepStepLabelLabel :
	compound_string("Step");

    StepDescLabelLabel :
	compound_string("Description");

    StepFollowTypeLabelLabel :
	compound_string("Follow Type");

    StepFollowTypeGoToLabel :
	compound_string("Go To");

    StepFollowTypeVisitLabel :
	compound_string("Visit");

    StepOperationMenuLabel :
	compound_string("Operation");

    StepDestinationLabelLabel :
	compound_string("Destination");

    StepDestinationDescLabelLabel :
	compound_string("Description");

    StepOkLabel :
	compound_string("OK");

    StepApplyLabel :
	compound_string("Apply");

    StepCancelLabel :
	compound_string("Cancel");

    StepResetLabel :
	compound_string("Reset");

    StepHelpLabel :
	compound_string("Help");

!++
! End of I18N Translatable values for this Module
!--


!++
!   Step callback procedures
!--

procedure
    LwkCreateStepOriginDesc(any);
    LwkCreateStepOriginType(any);
    LwkCreateStepDesc(any);
    LwkCreateStepGoTo(any);
    LwkCreateStepVisit(any);
    LwkCreateStepOperationMenu(any);
    LwkCreateStepDestType(any);
    LwkCreateStepDestDesc(any);
    LwkCreateStepOk(any);
    LwkCreateStepApply(any);
    LwkCreateStepReset(any);
    LwkCreateStepCancel(any);
    LwkChangeStepOriginDesc(any);
    LwkChangeStepDesc(any);
    LwkChangeStepFollowType(any);
    LwkChangeStepDestDesc(any);
    LwkSelectStepOperation(any);
    LwkActivateStepOk(any);
    LwkActivateStepApply(any);
    LwkActivateStepReset(any);
    LwkActivateStepCancel(any);


!++
!   Step dialog box description
!--

object StepBox : XmFormDialog {
    arguments {
	XmNdialogTitle = StepBoxTitle;
	XmNautoUnmanage = false;
	XmNhorizontalSpacing = LWKDefaultDialogBorder;
	XmNverticalSpacing = LWKDefaultDialogBorder;
	XmNdefaultButton = XmPushButton StepOk;
	XmNcancelButton = XmPushButton StepCancel;
	XmNuserData = LwkPrivate;
	XmNdefaultPosition = false;
    };
    controls {
	XmForm StepOriginForm;
	XmForm StepStepForm;
	XmForm StepDestinationForm;
    	XmPushButton StepOk;
	XmPushButton StepApply;
	XmPushButton StepCancel;
	XmPushButton StepReset;       
	XmPushButton StepHelp;       
    };
   callbacks {
	XmNhelpCallback = procedure LwkContextSensitiveHelp(StepBoxHelpKey);
   };
};


object StepOriginForm : XmForm {
    arguments {
	XmNshadowThickness = LWKDefaultShadowThickness;
	XmNshadowType = LWKDefaultShadowType;
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhorizontalSpacing = LWKDefaultMarginWidth;
	XmNverticalSpacing = LWKDefaultMarginHeight;
    };
    controls {
	XmLabel StepOriginLabel;
	XmLabel StepOriginTypeLabel;
	XmLabel StepOriginDescLabel;
	DXmCSText StepOriginDescText;
    };
};

object StepStepForm : XmForm {
    arguments {
	XmNshadowThickness = LWKDefaultShadowThickness;
	XmNshadowType = LWKDefaultShadowType;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm StepOriginForm;
	XmNtopOffset = LWKDefaultMarginBetweenForms;
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhorizontalSpacing = LWKDefaultMarginWidth;
	XmNverticalSpacing = LWKDefaultMarginHeight;
    };
    controls {
	XmLabel StepStepLabel;
	XmLabel StepDescLabel;
	DXmCSText StepDescText;
	XmLabel StepFollowTypeLabel;
	XmRadioBox StepFollowTypeBox;
    };
};

object StepDestinationForm : XmForm {
    arguments {
	XmNshadowThickness = LWKDefaultShadowThickness;
	XmNshadowType = LWKDefaultShadowType;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm StepStepForm;
	XmNtopOffset = LWKDefaultMarginBetweenForms;
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhorizontalSpacing = LWKDefaultMarginWidth;
	XmNverticalSpacing = LWKDefaultMarginHeight;
    };
    controls {
	XmLabel StepDestLabel;
	XmLabel StepDestTypeLabel;
	XmLabel StepDestDescLabel;
	DXmCSText StepDestDescText;
	XmOptionMenu StepOperationOptions;
    };
};

object StepOriginLabel : XmLabel {
   arguments {
	XmNlabelString = StepOriginLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_FORM;
	XmNuserData = LwkPrivate;
    };
};

object StepOriginTypeLabel : XmLabel {
   arguments {
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel StepOriginLabel;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = LWKStepIndentFromTitle + LWKDefaultMarginWidth;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateStepOriginType(LwkPrivate);
    };
};

object StepOriginDescLabel : XmLabel {
   arguments {
	XmNlabelString = StepOriginDescLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel StepOriginTypeLabel;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = LWKStepIndentFromTitle + LWKDefaultMarginWidth;
	XmNuserData = LwkPrivate;
    };
   callbacks {
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(StepOriginDescHelpKey);
   };
};

object StepOriginDescText : DXmCSText
 {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel StepOriginTypeLabel;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel StepOriginDescLabel;
	XmNrightAttachment = XmATTACH_FORM;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
   };
   callbacks {
	MrmNcreateCallback = procedure LwkCreateStepOriginDesc(LwkPrivate);
	XmNvalueChangedCallback = procedure LwkChangeStepOriginDesc(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(StepOriginDescTextHelpKey);
   };
};


object StepStepLabel : XmLabel {
   arguments {
	XmNlabelString = StepStepLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_FORM;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(StepStepLabelHelpKey);
    };
};

object StepDescLabel : XmLabel {
    arguments {
	XmNlabelString = StepDescLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel StepStepLabel;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = LWKStepIndentFromTitle + LWKDefaultMarginWidth;
	XmNuserData = LwkPrivate;
    };
   callbacks {
	XmNhelpCallback = procedure LwkContextSensitiveHelp(StepDescHelpKey);
   };
};

object StepDescText : DXmCSText
 {
   arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel StepStepLabel;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel StepDescLabel;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
   };
   callbacks {
	MrmNcreateCallback = procedure LwkCreateStepDesc(LwkPrivate);
	XmNvalueChangedCallback = procedure LwkChangeStepDesc(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(StepDescTextHelpKey);
  };
};

object StepFollowTypeLabel : XmLabel {
    arguments {
	XmNlabelString = StepFollowTypeLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = DXmCSText StepDescText;
	XmNtopOffset = LWKDefaultMarginWidth;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = LWKStepIndentFromTitle + LWKDefaultMarginWidth;
	XmNuserData = LwkPrivate;
    };
   callbacks {
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(StepFollowTypeHelpKey);
   };
};

object StepFollowTypeGoTo : XmToggleButton {
    arguments {
	XmNlabelString = StepFollowTypeGoToLabel;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateStepGoTo(LwkPrivate);
	XmNvalueChangedCallback = procedure LwkChangeStepFollowType(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(StepFollowTypeGoToHelpKey);
    };
};	

object StepFollowTypeVisit : XmToggleButton {
    arguments {
	XmNlabelString = StepFollowTypeVisitLabel;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateStepVisit(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(StepFollowTypeVisitHelpKey);
    };
};

object StepFollowTypeBox : XmRadioBox {
    arguments {
	XmNorientation = XmHORIZONTAL;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel StepFollowTypeLabel;
	XmNisHomogeneous = false; !use toggle widgets not gadgets
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = DXmCSText StepDescText;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNuserData = LwkPrivate;
    };
    controls {
	XmToggleButton StepFollowTypeGoTo;
	XmToggleButton StepFollowTypeVisit;
    };
   callbacks {
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(StepFollowTypeBoxHelpKey);
   };
};



object StepDestLabel : XmLabel {
   arguments {
	XmNlabelString = StepDestinationLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_FORM;
	XmNuserData = LwkPrivate;
   };
};

object StepDestTypeLabel : XmLabel {
   arguments {
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel StepDestLabel;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = LWKStepIndentFromTitle + LWKDefaultMarginWidth;
	XmNuserData = LwkPrivate;
   };
   callbacks {
	MrmNcreateCallback = procedure LwkCreateStepDestType(LwkPrivate);
   };
};

object StepDestDescLabel : XmLabel {
    arguments {   
	XmNlabelString = StepDestinationDescLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel StepDestTypeLabel;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = LWKStepIndentFromTitle + LWKDefaultMarginWidth;
	XmNuserData = LwkPrivate;
    };
   callbacks {
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(StepDestinationDescHelpKey);
   };
};

object StepDestDescText : DXmCSText
 {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel StepDestTypeLabel;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel StepDestDescLabel;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
   };
   callbacks {
	MrmNcreateCallback = procedure LwkCreateStepDestDesc(LwkPrivate);
	XmNvalueChangedCallback = procedure LwkChangeStepDestDesc(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(StepDestinationDescTextHelpKey);
   };
};

object StepOperationOptions : XmOptionMenu {
    arguments {
	XmNlabelString = StepOperationMenuLabel;
	XmNmenuHistory = XmPushButton StepOperationMenuButton;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = LWKStepIndentFromTitle + LWKDefaultMarginWidth;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = DXmCSText StepDestDescText;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNuserData = LwkPrivate;
    };
    controls {
	XmPulldownMenu StepOperationMenu;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateStepOperationMenu(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(StepOperationHelpKey);
    };
};

object StepOperationMenu : XmPulldownMenu {
    arguments {
	XmNmenuHistory = XmPushButton StepOperationMenuButton;
	XmNuserData = LwkPrivate;
    };
    controls {
	XmPushButton	StepOperationMenuButton;
    };
    callbacks {
	XmNentryCallback = procedure LwkSelectStepOperation(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(StepOperationHelpKey);
    };
};

object StepOperationMenuButton : XmPushButton {
    arguments {
	XmNlabelString = "...";
    };
};

object StepOk : XmPushButton {
    arguments {
	XmNlabelString = StepOkLabel;
	XmNwidth = StepMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = StepOkBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm StepDestinationForm;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateStepOk(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateStepOk(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(StepOkHelpKey);
    };
};

object StepApply : XmPushButton {
    arguments {
	XmNlabelString = StepApplyLabel;
	XmNwidth = StepMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = StepApplyBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm StepDestinationForm;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateStepApply(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateStepApply(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(StepApplyHelpKey);
    };
};

object StepReset : XmPushButton {
    arguments {
	XmNlabelString = StepResetLabel;
	XmNwidth = StepMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = StepResetBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm StepDestinationForm;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateStepReset(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateStepReset(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(StepResetHelpKey);
    };
};

object StepCancel : XmPushButton {
    arguments {
	XmNlabelString = StepCancelLabel;
	XmNwidth = StepMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = StepCancelBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm StepDestinationForm;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateStepCancel(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateStepCancel(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(StepCancelHelpKey);
    };
};

object StepHelp : XmPushButton {
    arguments {
	XmNlabelString = StepHelpLabel;
	XmNwidth = StepMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = StepHelpBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm StepDestinationForm;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	XmNactivateCallback = procedure LwkContextSensitiveHelp(StepBoxHelpKey);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(StepHelpHelpKey);
    };
};

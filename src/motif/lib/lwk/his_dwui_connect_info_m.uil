! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
!++
! COPYRIGHT (c) 1988, 1989, 1990, 1991, 1992 BY
! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.
! ALL RIGHTS RESERVED.
!
! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
! ONLY  IN  ACCORDANCE  OF  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE
! INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER
! COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
! OTHER PERSON.  NO TITLE TO AND  OWNERSHIP OF THE  SOFTWARE IS  HEREBY
! TRANSFERRED.
!
! THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE
! AND  SHOULD  NOT  BE  CONSTRUED  AS A COMMITMENT BY DIGITAL EQUIPMENT
! CORPORATION.
! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS
! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
!--

!++
!
! Facility:
!   LinkWorks Services User Interface
!
! Abstract:
!   LWK DXm User Interface generic Link properties dialog box
!   description file.
!
! Author:
!   Patricia Avigdor
!
! Creation Date:
!   7-Oct-88
!
! Modification History:
! 
! 001  LG  15-Nov-90	Remove Apply button from Link box.  
!
!--

 
    
!++
! Beginning of I18N Translatable values for this Module
!--

!
! Show Link Dialog Box Title template: the Application name will be
! appended before the :
!
value
    ShowLinkBoxTitle : exported
	compound_string(": Link");

    LinkOkBLeftPos	    :  2;
    LinkCancelBLeftPos	    : 28;
    LinkResetBLeftPos	    : 55;
    LinkHelpBLeftPos	    : 82;
    
    ShowLinkApplyBLeftPos   : 22;
    ShowLinkCancelBLeftPos  : 42;
    ShowLinkResetBLeftPos   : 62;
    ShowLinkHelpBLeftPos    : 82;
    
! To make all the Labels in the Push Buttons the same width, this value should
! be large enough so that the Label of the largest Push Button just fits
!
value
    LinkMaxButtonWidth : 70;

! 
!   Number of units the description information is indented from
!   the section title.
!
value
    LWKLinkIndentFromTitle : 15;

!
! Labels 
!
value
    CompleteLinkBoxTitle : 
	compound_string("LinkWorks: Complete Link");

    LinkSourceLabelLabel :
	compound_string("Source");

    LinkSourceDescLabelLabel :
	compound_string("Description");

    LinkShowLinkLabelLabel :
	compound_string("Link");

    LinkTypeLabelLabel :
	compound_string("Relationship");

    LinkDescLabelLabel :
	compound_string("Description");

    LinkTargetLabelLabel :
	compound_string("Target");

    LinkTargetDescLabelLabel :
	compound_string("Description");

    LinkOkLabel :
	compound_string("OK");

    LinkApplyLabel :
	compound_string("Apply");

    LinkRetainSourceLabel :
	compound_string("Retain This Source");

    LinkCancelLabel :
	compound_string("Cancel");

    LinkResetLabel :
	compound_string("Reset");
	
    LinkHelpLabel :
	compound_string("Help");

!++
! End of I18N Translatable values for this Module
!--



!++
!   Callback Procedures
!--

procedure
    LwkCreateLinkSourceDesc(any);
    LwkCreateLinkSourceType(any);
    LwkCreateLinkType(any);
    LwkCreateLinkDesc(any);
    LwkCreateLinkTargetType(any);
    LwkCreateLinkTargetDesc(any);
    LwkCreateLinkRetainSource(any);
    LwkCreateLinkOkButton(any);
    LwkCreateLinkResetButton(any);
    LwkCreateLinkCancelButton(any);
    LwkCreateLinkApplyButton(any);
    LwkChangeLinkSourceDesc(any);
    LwkChangeLinkType(any);
    LwkChangeLinkDesc(any);
    LwkChangeLinkTargetDesc(any);
    LwkActivateLinkOk(any);
    LwkActivateLinkApply(any);
    LwkActivateLinkCancel(any);
    LwkActivateLinkReset(any);


!++
!   Link Dialog Box description
!--
                      
object CompleteLinkBox : XmFormDialog {     
    arguments {
	XmNdialogTitle = CompleteLinkBoxTitle;
	XmNdefaultPosition = false;
	XmNautoUnmanage = false;
	XmNdefaultButton = XmPushButton LinkOk;
	XmNcancelButton = XmPushButton LinkCancel;
	XmNhorizontalSpacing = LWKDefaultDialogBorder;
	XmNverticalSpacing = LWKDefaultDialogBorder;
	XmNuserData = LwkPrivate;
    };
    controls {
	XmForm LinkSourceForm;
	XmForm LinkShowLinkForm;
	XmForm LinkTargetForm;
	XmPushButton LinkOk;
	XmPushButton LinkCancel;
	XmPushButton LinkReset;
	XmPushButton LinkHelp;                
    };
   callbacks {
	XmNhelpCallback = procedure 
	    LwkContextSensitiveHelp(CompleteLinkBoxHelpKey);
   };
};

object LinkSourceForm : XmForm {
    arguments {
	XmNshadowThickness = LWKDefaultShadowThickness;
	XmNshadowType = LWKDefaultShadowType;
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhorizontalSpacing = LWKDefaultMarginWidth;
	XmNverticalSpacing = LWKDefaultMarginHeight;
	XmNuserData = LwkPrivate;
    };
    controls {
	XmLabel LinkSourceLabel;
	XmLabel LinkSourceTypeLabel;
	XmLabel LinkSourceDescLabel;
	DXmCSText LinkSourceDescText;
	XmToggleButton LinkRetainSource;
    };
};

object LinkShowLinkForm : XmForm {
    arguments {
	XmNshadowThickness = LWKDefaultShadowThickness;
	XmNshadowType = LWKDefaultShadowType;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm LinkSourceForm;
	XmNtopOffset = LWKDefaultMarginBetweenForms;
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhorizontalSpacing = LWKDefaultMarginWidth;
	XmNverticalSpacing = LWKDefaultMarginHeight;
	XmNuserData = LwkPrivate;
    };
    controls {
	XmLabel LinkShowLinkLabel;
	XmLabel LinkTypeLabel;
	DXmCSText LinkTypeText;
	XmLabel LinkDescLabel;
	DXmCSText LinkDescText;
    };
};

object LinkTargetForm : XmForm {
    arguments {
	XmNshadowThickness = LWKDefaultShadowThickness;
	XmNshadowType = LWKDefaultShadowType;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm LinkShowLinkForm;
	XmNtopOffset = LWKDefaultMarginBetweenForms;
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhorizontalSpacing = LWKDefaultMarginWidth;
	XmNverticalSpacing = LWKDefaultMarginHeight;
	XmNuserData = LwkPrivate;
    };
    controls {
	XmLabel LinkTargetLabel;
	XmLabel LinkTargetTypeLabel;
	XmLabel LinkTargetDescLabel;
	DXmCSText LinkTargetDescText;
    };
};



!++
!   Show Link Dialog Box description
!--

object ShowLinkBox : XmFormDialog {
    arguments {
	XmNdefaultPosition = false;
	XmNautoUnmanage = false;
	XmNdefaultButton = XmPushButton ShowLinkCancel;
	XmNcancelButton = XmPushButton ShowLinkCancel;
	XmNhorizontalSpacing = LWKDefaultDialogBorder;
	XmNverticalSpacing = LWKDefaultDialogBorder;
	XmNuserData = LwkPrivate;
    };
    controls {
	XmForm ShowLinkSourceForm;
	XmForm ShowLinkShowLinkForm;
	XmForm ShowLinkTargetForm;
	XmPushButton ShowLinkOk;
	XmPushButton ShowLinkApply;
	XmPushButton ShowLinkCancel;
	XmPushButton ShowLinkReset;
	XmPushButton ShowLinkHelp;
    };
   callbacks {
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(ShowLinkBoxHelpKey);
   };
};


object ShowLinkSourceForm : XmForm {
    arguments {
	XmNshadowThickness = LWKDefaultShadowThickness;
	XmNshadowType = LWKDefaultShadowType;
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhorizontalSpacing = LWKDefaultMarginWidth;
	XmNverticalSpacing = LWKDefaultMarginHeight;
	XmNuserData = LwkPrivate;
    };
    controls {
	XmLabel LinkSourceLabel;
	XmLabel LinkSourceTypeLabel;
	XmLabel LinkSourceDescLabel;
	DXmCSText ShowLinkSourceDescText;
    };
};

object ShowLinkShowLinkForm : XmForm {
    arguments {
	XmNshadowThickness = LWKDefaultShadowThickness;
	XmNshadowType = LWKDefaultShadowType;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm ShowLinkSourceForm;
	XmNtopOffset = LWKDefaultMarginBetweenForms;
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhorizontalSpacing = LWKDefaultMarginWidth;
	XmNverticalSpacing = LWKDefaultMarginHeight;
	XmNuserData = LwkPrivate;
    };
    controls {
	XmLabel LinkShowLinkLabel;
	XmLabel LinkTypeLabel;
	DXmCSText LinkTypeText;
	XmLabel LinkDescLabel;
	DXmCSText LinkDescText;
    };
};

object ShowLinkTargetForm : XmForm {
    arguments {
	XmNshadowThickness = LWKDefaultShadowThickness;
	XmNshadowType = LWKDefaultShadowType;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm ShowLinkShowLinkForm;
	XmNtopOffset = LWKDefaultMarginBetweenForms;
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhorizontalSpacing = LWKDefaultMarginWidth;
	XmNverticalSpacing = LWKDefaultMarginHeight;
	XmNuserData = LwkPrivate;
    };
    controls {
	XmLabel LinkTargetLabel;
	XmLabel LinkTargetTypeLabel;
	XmLabel LinkTargetDescLabel;
	DXmCSText ShowLinkTargetDescText;
    };
};

object LinkSourceLabel : XmLabel {
   arguments {
	XmNlabelString = LinkSourceLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_FORM;
	XmNuserData = LwkPrivate;
    };
};

object LinkSourceTypeLabel : XmLabel {
   arguments {
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel LinkSourceLabel;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = LWKLinkIndentFromTitle + LWKDefaultMarginWidth;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkSourceType(LwkPrivate);
    };
};

object LinkSourceDescLabel : XmLabel {
   arguments {
	XmNlabelString = LinkSourceDescLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel LinkSourceTypeLabel;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = LWKLinkIndentFromTitle + LWKDefaultMarginWidth;
	XmNuserData = LwkPrivate;
    };
   callbacks {
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkSourceDescHelpKey);
   };
};

object LinkSourceDescText : DXmCSText {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel LinkSourceTypeLabel;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel LinkSourceDescLabel;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
   };
   callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkSourceDesc(LwkPrivate);
	XmNvalueChangedCallback = 
	    procedure LwkChangeLinkSourceDesc(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkSourceDescTextHelpKey);
   };
};

object ShowLinkSourceDescText : DXmCSText {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel LinkSourceTypeLabel;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel LinkSourceDescLabel;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
   };
   callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkSourceDesc(LwkPrivate);
	XmNvalueChangedCallback = 
	    procedure LwkChangeLinkSourceDesc(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkSourceDescTextHelpKey);
   };
};

object LinkRetainSource : XmToggleButton {
    arguments {
	XmNlabelString = LinkRetainSourceLabel;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = DXmCSText LinkSourceDescText;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = LWKLinkIndentFromTitle + LWKDefaultMarginWidth;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
   callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkRetainSource(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkRetainSourceHelpKey);
   };
};

object LinkShowLinkLabel : XmLabel {
   arguments {
	XmNlabelString = LinkShowLinkLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_FORM;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkShowLinkLabelHelpKey);
    };
};

object LinkTypeLabel : XmLabel {
   arguments {
	XmNlabelString = LinkTypeLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel LinkShowLinkLabel;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = LWKLinkIndentFromTitle + LWKDefaultMarginWidth;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	XmNhelpCallback = procedure LwkContextSensitiveHelp(LinkTypeHelpKey);
    };
};

object LinkTypeText : DXmCSText {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel LinkShowLinkLabel;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel LinkTypeLabel;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
    };
   callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkType(LwkPrivate);
	XmNvalueChangedCallback = procedure LwkChangeLinkType(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkTypeTextHelpKey);
    };
};

object LinkDescLabel : XmLabel {
    arguments {
	XmNlabelString = LinkDescLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = DXmCSText LinkTypeText;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = LWKLinkIndentFromTitle + LWKDefaultMarginWidth;
	XmNuserData = LwkPrivate;
    };
   callbacks {
	XmNhelpCallback = procedure LwkContextSensitiveHelp(LinkDescHelpKey);
   };
};

object LinkDescText : DXmCSText {
   arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = DXmCSText LinkTypeText;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel LinkTypeLabel;
	XmNrightAttachment = XmATTACH_FORM;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
   };
   callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkDesc(LwkPrivate);
	XmNvalueChangedCallback = procedure LwkChangeLinkDesc(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkDescTextHelpKey);
  };
};


object LinkTargetLabel : XmLabel {
   arguments {
	XmNlabelString = LinkTargetLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_FORM;
	XmNleftAttachment = XmATTACH_FORM;
	XmNuserData = LwkPrivate;
   };
};

object LinkTargetTypeLabel : XmLabel {
   arguments {
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel LinkTargetLabel;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = LWKLinkIndentFromTitle + LWKDefaultMarginWidth;
	XmNuserData = LwkPrivate;
   };
   callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkTargetType(LwkPrivate);
   };
};

object LinkTargetDescLabel : XmLabel {
    arguments {
	XmNlabelString = LinkTargetDescLabelLabel;
	XmNalignment = XmALIGNMENT_BEGINNING;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel LinkTargetTypeLabel;
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = LWKLinkIndentFromTitle + LWKDefaultMarginWidth;
	XmNuserData = LwkPrivate;
    };
   callbacks {
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkTargetDescHelpKey);
   };
};

object LinkTargetDescText : DXmCSText
 {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel LinkTargetTypeLabel;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel LinkTargetDescLabel;
	XmNrightAttachment = XmATTACH_FORM;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
   };
   callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkTargetDesc(LwkPrivate);
	XmNvalueChangedCallback = 
	    procedure LwkChangeLinkTargetDesc(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkTargetDescTextHelpKey);
   };
};

object ShowLinkTargetDescText : DXmCSText {
    arguments {
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel LinkTargetTypeLabel;
	XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel LinkTargetDescLabel;
	XmNrightAttachment = XmATTACH_FORM;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNuserData = LwkPrivate;
   };
   callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkTargetDesc(LwkPrivate);
	XmNvalueChangedCallback = 
	    procedure LwkChangeLinkTargetDesc(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkTargetDescTextHelpKey);
   };
};


object ShowLinkOk : XmPushButton {
    arguments {
	XmNlabelString = LinkOkLabel;
	XmNwidth = LinkMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = LinkOkBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm ShowLinkTargetForm;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkOkButton(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateLinkOk(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(LinkOkHelpKey);
    };
};

object ShowLinkApply : XmPushButton {
    arguments {
	XmNlabelString = LinkApplyLabel;
	XmNwidth = LinkMaxButtonWidth;
	XmNrecomputeSize = false;
      	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = ShowLinkApplyBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm ShowLinkTargetForm;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkApplyButton(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateLinkApply(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkApplyHelpKey);
    };
};

object ShowLinkReset : XmPushButton {
    arguments {
	XmNlabelString = LinkResetLabel;
	XmNwidth = LinkMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = ShowLinkResetBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm ShowLinkTargetForm;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkResetButton(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateLinkReset(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkResetHelpKey);
    };
};


object ShowLinkCancel : XmPushButton {
    arguments {
	XmNlabelString = LinkCancelLabel;
	XmNwidth = LinkMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNshowAsDefault = LWKDefaultPBShadow;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = ShowLinkCancelBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm ShowLinkTargetForm;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkCancelButton(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateLinkCancel(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkCancelHelpKey);
    };
};

object ShowLinkHelp : XmPushButton {
    arguments {
	XmNlabelString = LinkHelpLabel;
	XmNwidth = LinkMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = ShowLinkHelpBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm ShowLinkTargetForm;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	XmNactivateCallback = 
	    procedure LwkContextSensitiveHelp(ShowLinkBoxHelpKey);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkHelpHelpKey);
    };
};

object LinkOk : XmPushButton {
    arguments {
	XmNlabelString = LinkOkLabel;
	XmNwidth = LinkMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNshowAsDefault = LWKDefaultPBShadow;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = LinkOkBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm LinkTargetForm;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkOkButton(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateLinkOk(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(LinkOkHelpKey);
    };
};

object LinkReset : XmPushButton {
    arguments {
	XmNlabelString = LinkResetLabel;
	XmNwidth = LinkMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = LinkResetBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm LinkTargetForm;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateLinkResetButton(LwkPrivate);
	XmNactivateCallback = procedure LwkActivateLinkReset(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkResetHelpKey);
    };
};


object LinkCancel : XmPushButton {
    arguments {
	XmNlabelString = LinkCancelLabel;
	XmNwidth = LinkMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = LinkCancelBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm LinkTargetForm;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	XmNactivateCallback = procedure LwkActivateLinkCancel(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkCancelHelpKey);
    };
};


object LinkHelp : XmPushButton {
    arguments {
	XmNlabelString = LinkHelpLabel;
	XmNwidth = LinkMaxButtonWidth;
	XmNrecomputeSize = false;
	XmNhighlightThickness = LWKDefaultHighlightThickness;
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = LinkHelpBLeftPos;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmForm LinkTargetForm;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	XmNactivateCallback = 
	    procedure LwkContextSensitiveHelp(CompleteLinkBoxHelpKey);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(LinkHelpHelpKey);
    };
};

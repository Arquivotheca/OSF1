! 
! *****************************************************************
! *                                                               *
! *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
! *                                                               *
! *   All Rights Reserved.  Unpublished rights  reserved  under   *
! *   the copyright laws of the United States.                    *
! *                                                               *
! *   The software contained on this media  is  proprietary  to   *
! *   and  embodies  the  confidential  technology  of  Digital   *
! *   Equipment Corporation.  Possession, use,  duplication  or   *
! *   dissemination of the software and media is authorized only  *
! *   pursuant to a valid written license from Digital Equipment  *
! *   Corporation.                                                *
! *                                                               *
! *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
! *   by the U.S. Government is subject to restrictions  as  set  *
! *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
! *   or  in  FAR 52.227-19, as applicable.                       *
! *                                                               *
! *****************************************************************
!
! HISTORY
! 
!++
! COPYRIGHT (c) 1988, 1989, 1990, 1991 BY
! DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.
! ALL RIGHTS RESERVED.
!
! THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
! ONLY  IN  ACCORDANCE  OF  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE
! INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER
! COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
! OTHER PERSON.  NO TITLE TO AND  OWNERSHIP OF THE  SOFTWARE IS  HEREBY
! TRANSFERRED.
!
! THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE
! AND  SHOULD  NOT  BE  CONSTRUED  AS A COMMITMENT BY DIGITAL EQUIPMENT
! CORPORATION.
!
! DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS
! SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
!--

!++
!
! Facility:
!   LinkWorks Services user Interface
!
! Abstract:
!   LWK DXm User Interface Link pulldown menu description file.
!
! Author:
!   Patricia Avigdor
!
! Creation Date:
!   7-Oct-88
!
! Modification History:
!   dpr   12-Jul-89  BL6 refinements to UI: Connect (non-dialog), Annotate
!   dpr   27-Sep-89  BL6 create 2 variants of Menu -- w/ and w/o accelerators
!
!--


!++
! Beginning of I18N Translatable values for this Module
!--

!
! Literal Text Values -- replacement labels for "toggling" Highlight
! Push Buttons
!

value
    HighlightOnLiteral : exported
	compound_string('Turn Highlight On');
    HighlightOnMnemonic: exported
	mnemonic_T;
    HighlightOffLiteral : exported
	compound_string('Turn Highlight Off');
    HighlightOffMnemonic : exported 
	mnemonic_T;

!
! Labels, Accelerators, for the Menu Push Buttons
!

value
    GoToLabel :
	compound_string('Go To');
!    GoToAccelerator :
!	'Shift<Key>Find :';
!    GoToAcceleratorText :
!	compound_string('Shift+Find');
    GoToMnemonic:
	mnemonic_G;

    VisitLabel :
	compound_string('Visit');
!    VisitAccelerator :
!	'Alt<Key>Find :';
!    VisitAcceleratorText :
!	compound_string('Alt+Find');
    VisitMnemonic:
	mnemonic_V;

    StepForwardLabel :
	compound_string('Step Forward');
    StepForwardAccelerator :
    	'Alt<Key>Next :';
    StepForwardAcceleratorText :
	compound_string('Alt+Next');
    StepMnemonic:
	mnemonic_F;

    ShowHistoryLabel :
	compound_string('Show History...');
    ShowHistoryMnemonic:
	mnemonic_y;

    UndoLabel :
	compound_string('Go Back');
    UndoMnemonic:
	mnemonic_B;

    StartLinkLabel :
	compound_string('Start Link');
    StartLinkAccelerator :
	'Alt<Key>Up :';
    StartLinkAcceleratorText :
	compound_string('Alt+up');
    StartLinkMnemonic:
	mnemonic_S;
    

    CompleteLinkDialogLabel :
	compound_string('Complete Link...');
    CompleteLinkDialogMnemonic:
	mnemonic_o;

    CompleteLinkLabel :
	compound_string('Complete Link');
    CompleteLinkAccelerator :
	'Alt<Key>Down :';
    CompleteLinkAcceleratorText :
	compound_string('Alt+down');
    CompleteLinkMnemonic:
	mnemonic_C;

    AnnotateLabel :
	compound_string('Annotate');
    AnnotateMnemonic:
	mnemonic_A;
        
    ShowLinksLabel :
	compound_string('Show Links...');
    ShowLinksMnemonic:
	mnemonic_L;

    HighlightLabel :
	compound_string('Highlight...');
    HighlightDialogMnemonic:
	mnemonic_H;

    ToggleHighlightLabel :
	compound_string('Highlight');
!    ToggleHighlightAccelerator :
!	'Alt<Key>Select :';
!    ToggleHighlightAcceleratorText :
!	compound_string('Alt+Select');

!++
! End of I18N Translatable values for this Module
!--


!++
!   callback procedures
!--

procedure
    LwkMapMenu(any);
    LwkCreateGoTo(any);
    LwkActivateGoTo(any);
    LwkCreateVisit(any);
    LwkActivateVisit(any);
    LwkCreateShowHistory(any);
    LwkActivateShowHistory(any);
    LwkCreateStepForward(any);
    LwkActivateStepForward(any);
    LwkCreateUndo(any);
    LwkActivateUndo(any);
    LwkCreateStartLink(any);
    LwkActivateStartLink(any);
    LwkCreateAnnotate(any);
    LwkActivateAnnotate(any);
    LwkCreateCompleteLinkDialog(any);
    LwkActivateCompleteLinkDialog(any);
    LwkCreateShowLinks(any);
    LwkActivateShowLinks(any);
    LwkCreateHighlight(any);
    LwkActivateHighlight(any);
    LwkCreateHighlightToggle(any);
    LwkToggleHighlight(any);
    LwkCreateCompleteLink(any);
    LwkActivateCompleteLink(any);


!++
!   Help Window for Context Sensitive Help
!--                            

procedure
    LwkContextSensitiveHelp(compound_string);

object HelpWindow : DXmHelpDialog {
    arguments {
	DXmNlibrarySpec = HelpLibrarySpecification;
    };
};

!++
!   Link Menu description
!--

object LinkMenu : XmPulldownMenu {
    controls {
	XmPushButton	GoToButton;
	XmPushButton	VisitButton;
	XmPushButton	StepButton;
	XmSeparator	{};
	XmPushButton	ShowLinksButton;
	XmPushButton	ShowHistoryButton;
	XmPushButton	UndoButton;
	XmSeparator	{};
	XmPushButton	StartLinkButton;
	XmPushButton	CompleteLinkButton;
	XmPushButton	CompleteLinkDialogButton;
	unmanaged XmPushButton AnnotateButton;
	XmSeparator	{};
	XmPushButton	HighlightToggle;
	XmPushButton	HighlightButton;
    };
    arguments {
	XmNuserData = LwkPrivate;
    };                                          
    callbacks {
	XmNmapCallback = procedure LwkMapMenu(LwkMenu);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(MenuHelpKey);
    };
};

object LinkMenuAccel : XmPulldownMenu {
    controls {
	XmPushButton	GoToButtonAccel;
	XmPushButton	VisitButtonAccel;
	XmPushButton	StepButtonAccel;
	XmSeparator	{};
	XmPushButton	ShowLinksButton;
	XmPushButton	ShowHistoryButton;
	XmPushButton	UndoButton;
	XmSeparator	{};
	XmPushButton	StartLinkButtonAccel;
	XmPushButton	CompleteLinkButtonAccel;
	XmPushButton	CompleteLinkDialogButton;
	unmanaged XmPushButton AnnotateButton;
	XmSeparator	{};
	XmPushButton	HighlightToggleAccel;
	XmPushButton	HighlightButton;
    };
    arguments {
	XmNuserData = LwkPrivate;
    };                                          
    callbacks {
	XmNmapCallback = procedure LwkMapMenu(LwkMenu);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(MenuHelpKey);
    };
};

object GoToButton : XmPushButton {
    arguments {
	XmNlabelString = GoToLabel;
	XmNmnemonic = GoToMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateGoTo(LwkMenu);
	XmNactivateCallback = procedure LwkActivateGoTo(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(GoToHelpKey);
    };
};	

object VisitButton : XmPushButton {
    arguments {
	XmNlabelString = VisitLabel;
	XmNmnemonic = VisitMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateVisit(LwkMenu);
	XmNactivateCallback = procedure LwkActivateVisit(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(VisitHelpKey);
    };
};

object UndoButton : XmPushButton {
    arguments {
	XmNlabelString = UndoLabel;
	XmNmnemonic = UndoMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateUndo(LwkMenu);
	XmNactivateCallback = procedure LwkActivateUndo(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(UndoHelpKey);
    };
};

object StepButton : XmPushButton {
    arguments {
	XmNlabelString = StepForwardLabel;
	XmNmnemonic = StepMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateStepForward(LwkMenu);
	XmNactivateCallback = procedure LwkActivateStepForward(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(StepForwardHelpKey);
    };
};

object ShowHistoryButton : XmPushButton {
    arguments {
	XmNlabelString = ShowHistoryLabel;
	XmNmnemonic = ShowHistoryMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateShowHistory(LwkMenu);
	XmNactivateCallback = procedure LwkActivateShowHistory(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(ShowHistoryHelpKey);
    };
};

object StartLinkButton : XmPushButton {
    arguments {
	XmNlabelString = StartLinkLabel;
	XmNmnemonic = StartLinkMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateStartLink(LwkMenu);
	XmNactivateCallback = procedure LwkActivateStartLink(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(StartLinkHelpKey);
    };
};	

object CompleteLinkButton : XmPushButton {
    arguments {
	XmNlabelString = CompleteLinkLabel;
	XmNmnemonic = CompleteLinkMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateCompleteLink(LwkMenu);
	XmNactivateCallback = procedure LwkActivateCompleteLink(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(CompleteLinkHelpKey);
    };
};	

object CompleteLinkDialogButton : XmPushButton {
    arguments {
	XmNlabelString = CompleteLinkDialogLabel;
	XmNmnemonic = CompleteLinkDialogMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateCompleteLinkDialog(LwkMenu);
	XmNactivateCallback = 
	    procedure LwkActivateCompleteLinkDialog(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(CompleteLinkDialogHelpKey);
    };
};	

object AnnotateButton : XmPushButton {
    arguments {
	XmNlabelString = AnnotateLabel;
	XmNmnemonic = AnnotateMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateAnnotate(LwkMenu);
	XmNactivateCallback = procedure LwkActivateAnnotate(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(AnnotateHelpKey);
    };
};	

object ShowLinksButton : XmPushButton {
    arguments {
	XmNlabelString = ShowLinksLabel;
	XmNmnemonic = ShowLinksMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateShowLinks(LwkMenu);
	XmNactivateCallback = procedure LwkActivateShowLinks(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(ShowLinksHelpKey);
    };
};	

object HighlightButton : XmPushButton {
    arguments {
	XmNlabelString = HighlightLabel;
	XmNmnemonic = HighlightDialogMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateHighlight(LwkMenu);
	XmNactivateCallback = procedure LwkActivateHighlight(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(HighlightHelpKey);
    };
};	

object HighlightToggle : XmPushButton {
    arguments {
	XmNlabelString = ToggleHighlightLabel;
	XmNmnemonic = HighlightOnMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateHighlightToggle(LwkMenu);
	XmNactivateCallback = procedure LwkToggleHighlight(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(ToggleHighlightHelpKey);
    };
};	

object HighlightToggleAccel : XmPushButton {
    arguments {
	XmNlabelString = ToggleHighlightLabel;
!	XmNaccelerator = ToggleHighlightAccelerator;
!	XmNacceleratorText = ToggleHighlightAcceleratorText;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateHighlightToggle(LwkMenu);
	XmNactivateCallback = procedure LwkToggleHighlight(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(ToggleHighlightHelpKey);
    };
};	

object GoToButtonAccel : XmPushButton {
    arguments {
	XmNlabelString = GoToLabel;
!	XmNaccelerator = GoToAccelerator;
!	XmNacceleratorText = GoToAcceleratorText;
	XmNmnemonic = GoToMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateGoTo(LwkMenu);
	XmNactivateCallback = procedure LwkActivateGoTo(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(GoToHelpKey);
    };
};	

object VisitButtonAccel : XmPushButton {
    arguments {
	XmNlabelString = VisitLabel;
!	XmNaccelerator = VisitAccelerator;
!	XmNacceleratorText = VisitAcceleratorText;
	XmNmnemonic = VisitMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateVisit(LwkMenu);
	XmNactivateCallback = procedure LwkActivateVisit(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(VisitHelpKey);
    };
};


object StepButtonAccel : XmPushButton {
    arguments {
	XmNlabelString = StepForwardLabel;
	XmNaccelerator = StepForwardAccelerator;
	XmNacceleratorText = StepForwardAcceleratorText;
	XmNmnemonic = StepMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateStepForward(LwkMenu);
	XmNactivateCallback = procedure LwkActivateStepForward(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(StepForwardHelpKey);
    };
};


object StartLinkButtonAccel : XmPushButton {
    arguments {
	XmNlabelString = StartLinkLabel;
	XmNaccelerator = StartLinkAccelerator;
	XmNacceleratorText = StartLinkAcceleratorText;
	XmNmnemonic = StartLinkMnemonic;
	XmNuserData = LwkPrivate;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateStartLink(LwkMenu);
	XmNactivateCallback = procedure LwkActivateStartLink(LwkPrivate);
	XmNhelpCallback = procedure LwkContextSensitiveHelp(StartLinkHelpKey);
    };
};	

object CompleteLinkButtonAccel : XmPushButton {
    arguments {
	XmNlabelString = CompleteLinkLabel;
	XmNmnemonic = CompleteLinkMnemonic;
	XmNuserData = LwkPrivate;
	XmNacceleratorText = CompleteLinkAcceleratorText;
	XmNaccelerator = CompleteLinkAccelerator;
    };
    callbacks {
	MrmNcreateCallback = procedure LwkCreateCompleteLink(LwkMenu);
	XmNactivateCallback = procedure LwkActivateCompleteLink(LwkPrivate);
	XmNhelpCallback = 
	    procedure LwkContextSensitiveHelp(CompleteLinkHelpKey);
    };
};


.\"
.\" *****************************************************************
.\" *                                                               *
.\" *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
.\" *                                                               *
.\" *   All Rights Reserved.  Unpublished rights  reserved  under   *
.\" *   the copyright laws of the United States.                    *
.\" *                                                               *
.\" *   The software contained on this media  is  proprietary  to   *
.\" *   and  embodies  the  confidential  technology  of  Digital   *
.\" *   Equipment Corporation.  Possession, use,  duplication  or   *
.\" *   dissemination of the software and media is authorized only  *
.\" *   pursuant to a valid written license from Digital Equipment  *
.\" *   Corporation.                                                *
.\" *                                                               *
.\" *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
.\" *   by the U.S. Government is subject to restrictions  as  set  *
.\" *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
.\" *   or  in  FAR 52.227-19, as applicable.                       *
.\" *                                                               *
.\" *****************************************************************
.\"
.\"
.\" HISTORY
.\"
.COMMENT SCCS_data: @(#) Xcp.man 1.1 92/03/18 11:08:27
.TH "Xcp" 1 "1 March 1992"
.SH NAME
Xcp \- Cornell Widget Set Public Library
.SH SYNOPSIS
.ta 1.5i 2.5i
.nf
.ft B
#include <X11/Intrinsic.h>
#include <X11/Wc/WcCreate.h>
#include <X11/Xcp/Xcp.h>

/* All Wcl applications should provide at least the Wcl options:
*/
static XrmOptionDescRec options[] = {
    ... application specific command line options ...
    WCL_XRM_OPTIONS
};

main ( argc, argv )
    int    argc;
    char*  argv[];
{
    /*  -- Intialize Toolkit creating the application shell
    */
    Widget appShell = XtInitialize (
        argv[0], WcAppClass( argc, argv ),      /* app name & class  */
        options, XtNumber(options),             /* argv option descr */
        &argc, argv
    );
    XtAppContext app = XtWidgetToApplicationContext(appShell);

    /*  -- Register application specific callbacks and widget classes
    */
    RegisterApplication ( app );

    /*  -- Register all widget classes and constructors
    */
    XcpRegisterCornell( app );

    /*  -- Create widget tree below toplevel shell using Xrm database
    */
    if ( WcWidgetCreation ( appShell ) )
        exit(1);

    /*  -- Realize the widget tree
    */
    XtRealizeWidget ( appShell );

    /*  -- and finally, enter the main application loop
    */
    XtMainLoop ( );
}
.fi
.ft R

.SH LINK BY
.RS
.nf
.ft B
example% ld -o prog prog.o -lXcp -lXcu -lWc <dynLinkLib> -lXmu -lXt -lX11
.ft R
.RE
.LP 
On SunOS or SVR4 machines, the <dynLinkLib> is named -ldl.
Other architectures cannot use the dynamic linking capabilites of
Wcl, and therefore do not need any dynamic link library.
.SH DESCRIPTION
.LP
.I Xcp
is intended to be used with
.I Wcl
and the Cornell widget set.  Xcp provides a procedure for registering all
Cornell widgets, and convenience functions frequently needed by Cornell
applications.  Xcp also includes the XpTableWidget.
.SH REGISTRATION PROCEDURES
.LP
.I Wcl
must be told the names of all widgets and widget constructors before
it can create widgets as specified in the resource file of client
applications.
.I Xcp
provides a registration procedure for registering all Cornell widgets.
For backward compatibility with previous releases of Wcl, this
registration procedure has three names: CriRegisterCornell(), 
XcpRegisterAll(), and XcpRegisterCornell().  These procedures
are exactly equivalent.
.TP
.B void XcpRegisterCornell( XtAppContext )
This procedure registers all of the Cornell widget class pointer names,
widget class names, and widget constructor function names with Wcl.
It also registers all Xcp callback procedures with Wcl.
.SH CALLBACKS
.LP
The provided callback procedures, as named in the
resource database, are as follows:
.nf
.ft B
XcuBmgrManage( button [button ...] )
XcuBmgrSample( xcuBmgr )
XcuBmgrSetAll( xcuBmgr )
XcuBmgrUnsetAll( xcuBmgr )
XcuBmgrToggleAll( xcuBmgr )
XcuDeckRaiseLowest( xcuDeck )
XcuDeckLowerHighest( xcuDeck )
XcuDeckRaiseWidget( xcuDeck widget )
.ft R
.fi
.LP
Each callback procedure can also be named in resource files as
the name of the procedure followed by CB: i.e, XcuBmgrSample()
can also be invoked as a callback by giving the name XcuBmgrSampleCB()
for a callback resource value.  Each
.I Xcp
procedure is discussed in detail below.
.TP
.B XcuBmgrManage( button [button ...] )
Causes a button manager to manage the named widgets.  This callback
must be invoked in the context of a XcuBmgr widget, usually as a
creation time callback.
.TP
.B XcuBmgrSample( xcuBmgr )
Invokes the XcuBmgrSample method of the named XcuBmgr.
.TP
.B XcuBmgrSetAll( xcuBmgr )
Invokes the XcuBmgrSetAll method of the named XcuBmgr.
.TP
.B XcuBmgrUnsetAll( xcuBmgr )
Invokes the XcuBmgrUnsetAll method of the named XcuBmgr.
.TP
.B XcuBmgrToggleAll( xcuBmgr )
Invokes the XcuBmgrUnsetAll method of the named XcuBmgr.
.TP
.B XcuDeckRaiseLowest( xcuDeck )
Invokes the XcuDeckRaiseLowest method of the named XcuDeck.
.TP
.B XcuDeckLowerHighest( xcuDeck )
Invokes the XcuDeckLowerHighest method of the named XcuDeck.
.TP
.B XcuDeckRaiseWidget( xcuDeck widget )
Invokes the XcuDeckRaiseWidget method of the named XcuDeck, which raises
the named child widget.
.SH "SEE ALSO"
.BI XpTable (3),
.BI Cri (1),	
.BI Wcl (3),
.BI X (1)
.SH AUTHORS
Kim Gillies (gillies@noao.edu) did most of the work of implementing
Xcp, and 
David E. Smyth (David.Smyth@sniap.mchp.sni.de) at Siemens Nixdorf
Informationssysteme AG, Munich Germany hacked slightly to upgrade Xcp
for Wcl release 2.0.

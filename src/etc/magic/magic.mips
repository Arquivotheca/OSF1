# 
# *****************************************************************
# *                                                               *
# *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
# *                                                               *
# *   All Rights Reserved.  Unpublished rights  reserved  under   *
# *   the copyright laws of the United States.                    *
# *                                                               *
# *   The software contained on this media  is  proprietary  to   *
# *   and  embodies  the  confidential  technology  of  Digital   *
# *   Equipment Corporation.  Possession, use,  duplication  or   *
# *   dissemination of the software and media is authorized only  *
# *   pursuant to a valid written license from Digital Equipment  *
# *   Corporation.                                                *
# *                                                               *
# *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
# *   by the U.S. Government is subject to restrictions  as  set  *
# *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
# *   or  in  FAR 52.227-19, as applicable.                       *
# *                                                               *
# *****************************************************************
#
# HISTORY
# 
# @(#)$RCSfile: magic.mips,v $ $Revision: 4.1.7.2 $ (DEC) $Date: 1993/08/03 21:30:18 $ 
# 
#
# (c) Copyright 1990, OPEN SOFTWARE FOUNDATION, INC.
# ALL RIGHTS RESERVED
#
#
# OSF/1 Release 1.0
#--------------------------------------------------------------------
#
#		Magic File For The file Command
#
#	The fields of each entry in this file are as follows:
#
#	byte offset:  Where magic information is to be found in the
#	file.  This is the number of bytes from the beginning of the
#	file to the first byte of the magic number or string. This may,
#	optionally,  be preceded by a '>' to indicate a continuation
#	line to supply extra information in the printed message.
#
#	value type: The type of the information to be found at the
#	specified byte offset.  Valid types are the following:
#		byte	interpret file data as "unsigned char" type.
#		short	interpret file data as "unsigned short" type.
#		long	interpret file data as "long" type.
#		string	interpret file data as a character(byte) string
#
#	optional operator: How the value specified here should be
#	compared with the data at the desired offset.  Valid operator
#	characters are: =, >, and <.  If none is specified, = is assumed.
#
#	value: The value to match. Numeric values may be decimal, octal,
#	or hex.  Strings values are defined as regular expressions here.
#	The regular expressions used here are extended in two ways from
#	regular expression definition in ed(1).
#	1. Normally unprintable characters may be escaped with '\'.  The
#	special characters \n, \b, \r, and \f are allowed.  An octal
#	representation can also be used to insert any desired byte value
#	(except 0).  Normally, regular expression can not handle such 
#	character values.  Because the backslash is used as an escape
#	character while the regular expression is being read in, normal
#	occurances of a backslash in a regular expression must be escaped
#	with a second backslash ( \( -> \\(, \. -> \\., ...)
#	2. Text found in a file can also be inserted in the printed string
#	with the use of the \\% delimiter.  All text found between these
#	delimiters is substituted into the print string.  See the entries
#	below for script and PostScript files for examples of this usage.
#	Note this is really just a \% delimiter with the backslash escaped.
#	Finally, a word of caution: This regular expression search never
#	terminates until a match is explicitly found or rejected.  (\n is
#	a valid character in the patterns).  Therefore the pattern ".*"
#	should probably never be used here.
#
#	string to print: Any desired text string.  Data from the file
#	may be included with the use of continuation lines beginning
#	with a '>'.  Two types of continuation lines are possible,
#	depending on the sign of the byte offset entry.  If the byte offset
#	is positive, the specified data may be printed in the string
#	when requested with an appropriate printf(3) format.  If the offset
#	is a negative number, an internal routine will be called
#	to test if a particular string is necessary and if so, to return
#	it.  The byte offset number is an index to an internal table of
#	routines available for use.  Two such routines are currently
#	defined, both for a.out images:
#
#   Byte offset	  String(s) returned by routine if appropriate
#
#	-1:	["old version 7 style symbol table"] <-- Obsolete
#	-2:	["setuid "]["setgid "]["sticky "]
#	
#offset	type	operator+value		string to print
#
#  Various sorts of archives
#
0	long	0177555			very old pdp11 archive
0	short	0177545			old pdp11 archive
0	string	^<ar>			System V archive
0	string	^!<arch>\n__\\.SYMDEF	archive random library
0	string	^!<arch>\n__________E	MIPS archive
>20	string	^U			with mipsucode members
>21	string	^L			with mipsel members
>21	string	^B			with mipseb members
>19	string	^L			and a EL hash table
>19	string	^B			and a EB hash table
>22	string	^X			-- out of date
0	string	^!<arch>\n________64E	Alpha archive
>22	string	^X			-- out of date
0	string	^!<arch>\n		archive
#
#  All sorts of scripts (like /bin/sh, /bin/awk, etc.) are identified
#  here.
#
0	string	^#![ ]*\\%[^ \n]*\\%	%s
# Fix for (001-zanne)  starts the second line from here.
>7	string	^sh			shell script -- commands text
>8	string	^sh			shell script -- commands text
>9	string	^sh			shell script -- commands text
>11	string	^sh			shell script -- commands text
>12	string	^sh			shell script -- commands text
>13	string	^sh			shell script -- commands text
# Fix for (001-zanne) ends here.
#
#  Various sorts of executable images.  Note how either "POSIX" or "SVID"
#  are chosen based on the value of the second short word.
#
0	short	0407			VAX executable (object file)
>8	short	>0			not stripped
0	long	0410			VAX pure
>16	long	>0			not stripped
0	short	0413			VAX demand paged pure
>2	short	02			POSIX
>2	short	01			SVID
>16	long	>0			not stripped
0	short	0401			Ultrix-11 Stand-alone or boot executable
0	short	0430			Ultrix-11 overlay text kernel executable
0	short	0431			Ultrix-11 user overlay (separated I&D) executable
0	short	0450			Ultrix-11 overlay kernel executable
0	short	0451			Ultrix-11 overlay kernel (separated I&D) executable
#
#  Various sorts of text and data files.
#
0	string	^\01h[0-9][0-9][0-9][0-9][0-9]	sccsfile
0	string	^#ifndef			c program
0	string	^070707				ASCII cpio archive
0	string	^%!PS-Adobe-\\%[.0-9]*\\%\n	PostScript (v%s) text
#
#
0	string	^\0377\0377\0177	ddis/ddif 
0	string	^\0377\0377\0174	ddis/dots archive
0	string	^\0377\0377\0176	ddis/dtif table data
0	string	^\033c\033		LN03 output
0	string	^\0100\0357		troff (CAT) output
0	long	04553207		X image
0	short	017777			compacted data
0	short	0116437			compressed data 
0	short	070707			cpio archive
0	short	017037			packed data
0	string	^begin\040[0-9]		uuencoded data
#
#	MIPS magic info follows.
#
0	long		0x1010101	MMDF mailbox
#
# MIPS binary information - Note that version number printing is an
# extreme hack.
#
0	short		0x0160		mipseb
>20	short		0407		executable
>20	short		0410		pure
>20	short		0413		demand paged
>8	long		!0		not stripped
#0	short		0x0162		mipsel
#>20	short		0407		407
#>20	short		0410		pure
#>20	short		0413		demand paged
#>8	long		0		executable
#>8	long		>0		not stripped
#>8	long		<0		not stripped
0	short		0x6001		swapped mipseb
>20	short		03401		executable
>20	short		04001		pure
>20	short		05401		demand paged
>8	long		!0		not stripped
0	short		0x6201		swapped mipsel
>20	short		03401		407
>20	short		04001		pure
>20	short		05401		demand paged
>8	long		0		executable
>8	long		>0		not stripped
>8	long		<0		not stripped
0	short		0x180		mipseb ucode
0	short		0x182		mipsel ucode
0	short		0x18f		Alpha ucode
#
# Locale data tables (MIPS and Alpha).
#
0	short		0x0501		locale data table
>6	short		0x24		for MIPS
>6	short		0x40		for Alpha
# Alpha ucode magic number
0	short		0x18f	Alpha ucode

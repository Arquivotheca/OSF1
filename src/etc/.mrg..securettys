#
# *****************************************************************
# *                                                               *
# *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
# *                                                               *
# *   All Rights Reserved.  Unpublished rights  reserved  under   *
# *   the copyright laws of the United States.                    *
# *                                                               *
# *   The software contained on this media  is  proprietary  to   *
# *   and  embodies  the  confidential  technology  of  Digital   *
# *   Equipment Corporation.  Possession, use,  duplication  or   *
# *   dissemination of the software and media is authorized only  *
# *   pursuant to a valid written license from Digital Equipment  *
# *   Corporation.                                                *
# *                                                               *
# *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
# *   by the U.S. Government is subject to restrictions  as  set  *
# *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
# *   or  in  FAR 52.227-19, as applicable.                       *
# *                                                               *
# *****************************************************************
#
# HISTORY
#
# @(#)$RCSfile: .mrg..securettys,v $ $Revision: 1.1.4.8 $ (DEC) $Date: 1993/11/09 22:00:51 $
#


MERGE_ROUTINE=DRI_Merge


#	-DRI_Merge
#		merge routine provided by the DRIs.
#
#	given: 	global variable $_FILE
#	return: 0 if success
#		non-zero if failure
#
#	Note:	1) use MRG_Echo() to output additional messages.
#		2) see also /usr/share/lib/shell/libmrg for other available 
#		   global variables.

DRI_Merge()
{
	case "$_FILE" in
	.proto..*)
		# merge protos
		SECURETTYS=.proto..securettys
		TTYS=.proto..ttys
		;;
	*)	SECURETTYS=securettys
		TTYS=ttys
		;;
	esac

	grep -q 'local:0' ${SECURETTYS} || {
		MRG_Echo "Added shared memory transport identifier which is an"
		MRG_Echo "alterative to ':0'"
		echo 'local:0' >> "${SECURETTYS}"
	}

#

	[ -f $TTYS -a -s $SECURETTYS ] ||
	{
		# we don't have both so there's nothing to do.
		return 0
	}

	read LINE1 < $SECURETTYS &&
		[ "$LINE1" -eq '# Secure tty data base model file.' ] ||
		return 0

	#
	grep '^#' "${SECURETTYS}" | tail +2  > "${SECURETTYS}.comments"
	echo '# Secure tty data base.' > "${SECURETTYS}"
	cat  "${SECURETTYS}.comments" >> "${SECURETTYS}"
	rm -f "${SECURETTYS}.comments"
	#

	cat "${TTYS}" | grep -v '^[ 	]*#' | grep -v '^[ 	]*$' |
	grep '^[^ 	]*[ 	]*[^ 	]*[ 	]*none[ 	][ 	]*secure' |
	sed -e 's/^\([^: 	]*\)[ 	]*[^ 	]*[ 	]*none[ 	][ 	]*secure\(.*\)/\/dev\/\1\2/' -e \
		's/^\(:[^ 	]*\)[ 	]*[^ 	]*[ 	]*none[ 	][ 	]*secure\(.*\)/\1\2/' >> "${SECURETTYS}"

	cat "${TTYS}" | grep -v '^[ 	]*#' | grep -v '^[ 	]*$' |
		grep -q '^[^ 	]*[ 	]*[^ 	]*[ 	]*network[ 	][ 	]*secure'
	if [ ${?} -eq  0 ]
	then
		echo 'ptys	# All network lines are secure' >> "${SECURETTYS}"
	fi
	mv "${TTYS}" "${TTYS}.obsolete"

	return 0

}


SHELL_LIB=${SHELL_LIB:-/usr/share/lib/shell}
. $SHELL_LIB/libmrg


[ "$CHECK_SYNTAX" ] || MRG_Merge "$@" 


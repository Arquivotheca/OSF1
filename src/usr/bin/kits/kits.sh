#!/bin/sh
# 
# *****************************************************************
# *                                                               *
# *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
# *                                                               *
# *   All Rights Reserved.  Unpublished rights  reserved  under   *
# *   the copyright laws of the United States.                    *
# *                                                               *
# *   The software contained on this media  is  proprietary  to   *
# *   and  embodies  the  confidential  technology  of  Digital   *
# *   Equipment Corporation.  Possession, use,  duplication  or   *
# *   dissemination of the software and media is authorized only  *
# *   pursuant to a valid written license from Digital Equipment  *
# *   Corporation.                                                *
# *                                                               *
# *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
# *   by the U.S. Government is subject to restrictions  as  set  *
# *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
# *   or  in  FAR 52.227-19, as applicable.                       *
# *                                                               *
# *****************************************************************
#
# HISTORY
# 
# @(#)$RCSfile: kits.sh,v $ $Revision: 4.3.9.5 $ (DEC) $Date: 1993/10/07 20:48:09 $ 
#
#	kits -
#		make dd'able images of setld(8) readables.
#
#	kits <ringfile>
#
#	000	ccb	22-Aug-1985
#		(C) 1985 DEC
#		Thanks to robin & tarsa.
#
#	001	Chas. Bennett	09-05-1985
#		make sure there is '\n' on the end of all of the
#			scripts generated by tarsets.c
#
#	002	ccb	06-19-86
#		upgrade for new setld.
#
#	003	ccb	2-jun-1987
#		remove stream edit to change blocksizes from floppy
#		to tape blocking
#
#	004	ccb	09-mar-1990
#		Compress the subsets in the TODIR directory rather
#		than the local directory.
#		Make RXMAKE default to 0.
#
#	005	ech	27-sep-1991
#		change echo -n to echo \c
#
umask 2
PATH="/usr/lbin:/usr/bin:/etc:/usr/ucb"
export PATH

# constants
PROG=$0
USAGE="Usage: $PROG key-file input-path output-path [subset...]"
ID=.inv

KITGLOBAL=/usr/tmp/kglbl$$
KITSUBS=/usr/tmp/ksubs$$

# write protect.
readonly PROG USAGE ID

PWD=`pwd`

# get standard args.
case $# in
[012])  echo $USAGE
	exit 1
        ;;
*)      KITFILE=$1
	# translate FROMDIR and TODIR to absolute paths
	FROMDIR=`(cd $2; pwd)`
        TODIR=`(cd $3; pwd)`
        shift;shift;shift
        ;;
esac

# do we have the parts the user specified?

[ -f $KITFILE ] ||
{
        echo "$PROG: $KITFILE not found."
        exit 1
}
[ -d $FROMDIR ] ||
{
        echo "$PROG: $FROMDIR not found."
        exit 1
}
[ -d $TODIR ] ||
{
        echo "$PROG: $TODIR not found."
        exit 1
}
[ -d $TODIR/instctrl ] || mkdir $TODIR/instctrl ||
{
        echo "$PROG: cannot create instctrl directory."
        exit 1
}

# split up the key file.
#  this writes the global section of the file to KITGLOBAL
#  and prepends ordering numbers to the subset section leaving
#  the result in KITSUBS
(
        ed - $KITFILE <<!
1,/%%/-1w $KITGLOBAL
/%%/+1,\$p
q
!
) | cat -n > $KITSUBS

# initialize ROOT, as it may not be specified in the key file
ROOT=

# pick up global data
. $KITGLOBAL

case "~$NAME~$CODE~$VERS~$MI~$ROOT~" in
"*~~*")
        echo "$PROG: $KITFILE format error"
        exit 1
        ;;
esac

# check on presence of MI and possible root.
[ -f $MI ] ||
{
        echo "Inventory file $MI not found."
        exit 1
}
case "$ROOT" in 
*ROOT)	
        [ -f $TODIR/$ROOT ] ||
        {
                echo "root image $ROOT not found in $TODIR.\nYou must create the root image $ROOT before running this procedure."
                exit 1
        }
        ;;
esac

ALLSUBS=`awk '{print $2}' $KITSUBS`
case "$*" in
"")     S_LIST=$ALLSUBS
        rm -rf $TODIR/instctrl
        mkdir $TODIR/instctrl
        ;;
*)      S_LIST=$*
        ;;
esac
set - $S_LIST

echo "Creating $# $NAME subsets."

rm -f *.ctrl Volume*

[ "$RXMAKE" = 1 ] && 
{
	rm -f stderr
	echo "\n=== Stderr redirected to diagnostic file \`stderr' ===" 
}

I=0
for SUB in $S_LIST
do 
	# clean up
	rm -f Volume*
	rm -f $TODIR/$SUB* $TODIR/instctrl/$SUB*

	I=`expr $I + 1`
	echo "\n$I   Subset $SUB"

	INV=$SUB$ID
	CTRL=$SUB.ctrl

	echo "\n\tGenerating media creation information...\c"

	grep "	$SUB\$" $MI | invcutter -v $VERS $FROMDIR > $TODIR/instctrl/$INV || 	
	{
		echo "failed to create $INV."
		exit 1
	}
 
	# if RXMAKE is set to 1, do floppy specific stuff 
	[ "$RXMAKE" = 1 ] && 
	{
		# making floppies
		cat $TODIR/instctrl/$INV | tarsets $FROMDIR > ts.$SUB 2>/dev/null || 
		{
			echo "failed."
			exit 1
		}
		echo "done."

		# figure out how many floppy volumes
		NVOLS=`grep -c '^tar' ts.$SUB`

		echo "\tCreating $NVOLS volume file(s)...\c"

		J=0; while :
		do
			case $J in
			$NVOLS)
				break
				;;
			esac
			J=`expr $J + 1`
			echo "$CODE\n$VERS\n$SUB" > Volume$J 
			echo ".$J\c"
		done
		echo "...done." 

		# create floppy specific tar image(s) 
		chmod 744 ts.$SUB 
		TO=$TODIR ./ts.$SUB 
	}

	# create list of files in the subset excluding directories 
	cat $TODIR/instctrl/$INV | grep -v '	d	' |
	awk '{print $10}' > ts.$SUB || 
	{
		echo "failed."
		exit 1
	}
	[ "$RXMAKE" = 1 ] ||
	{
		echo "done" 
		NVOLS=0
	} 

	chmod 744 ts.$SUB
	echo "\tCreating $SUB control file...\c"

	LINE=`awk '$2 == "'$SUB'"' $KITSUBS`
	case "$LINE" in
	"")	echo "No such subset in $KITFILE: subset $SUB"
		continue
		;;
	esac

	# break up descriptor from key file
	set - $LINE
	TLOC=$1
	shift;shift
	DEPS=`echo $1|sed 's/|/ /'g`
	shift
	FLAGS=` case $1 in
		FLGEXP*)
			eval echo \\\$${1}
			;;
		*)
			echo $1
			;;
		esac`
	shift

	DESC="$*"

        # if '%' exits in the full subset description, 
        # pad the description part to 36 characters long
        # so that when an ULTRIX RIS server extracts subsets, 
        # the categories won't show up in the setld menu.

	echo $DESC | grep % > /dev/null &&
		DESC=`echo $DESC| awk -F% '{printf "%-36s%%%s\n", $1, $2}'`

	cat > $TODIR/instctrl/$CTRL <<!
NAME='$NAME $SUB'
DESC=$DESC
NVOLS=1:$NVOLS
MTLOC=1:$TLOC
DEPS="$DEPS"
FLAGS=$FLAGS
!

	echo "done.\n\tMaking tar image...\c"

	(cd $FROMDIR; tar cfR $TODIR/$SUB $PWD/ts.$SUB)
	echo "done."

	(cd $TODIR
		case "$COMPRESS" in
		1)	echo "\tCompressing "
			echo "\t   \c" 
			compress -f -v $SUB ||
			{
				echo "\tcompression failed. status = $?"
				exit 1
			}
			SPC=`expr $SUB : '\(...\).*'`
			SVC=`expr $SUB : '.*\(...\)'`
			> instctrl/$SPC$SVC.comp
		esac
	) 
 
	if [ -f scps/$SUB.scp ]
	then
		cp scps/$SUB.scp $TODIR/instctrl
	else
		touch $TODIR/instctrl/$SUB.scp
		chmod 744 $TODIR/instctrl/$SUB.scp
		echo "\tNull subset control program created for $SUB."  
	fi

	echo "\n\t*** Finished creating media image for $SUB. ***" 
done 

case "$COMPRESS" in
1)	wait
	(cd $TODIR
		for SUB in $S_LIST
		{
			dd if=$SUB.Z of=$SUB bs=10k conv=sync 2> /dev/null
			rm $SUB.Z
		}
	)
esac

echo "\nCreating $CODE.image"

case "$ROOT" in
*ROOT)	ALLSUBS="$ROOT $ALLSUBS"
	;;
esac

(	# subshell for cd only
	cd $TODIR
	sum $ALLSUBS > instctrl/$CODE.image
	echo "\nCreating INSTCTRL"
	cd instctrl; tar cpvf ../INSTCTRL *
	cp $CODE.image ..
)
rm -f Volume* ts.* $KITGLOBAL $KITSUBS
echo "\nMedia image production complete."

#!debug rm -f $.*
exit 0

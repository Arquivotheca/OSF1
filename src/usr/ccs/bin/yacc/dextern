/*
 * *****************************************************************
 * *                                                               *
 * *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
 * *                                                               *
 * *   All Rights Reserved.  Unpublished rights  reserved  under   *
 * *   the copyright laws of the United States.                    *
 * *                                                               *
 * *   The software contained on this media  is  proprietary  to   *
 * *   and  embodies  the  confidential  technology  of  Digital   *
 * *   Equipment Corporation.  Possession, use,  duplication  or   *
 * *   dissemination of the software and media is authorized only  *
 * *   pursuant to a valid written license from Digital Equipment  *
 * *   Corporation.                                                *
 * *                                                               *
 * *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
 * *   by the U.S. Government is subject to restrictions  as  set  *
 * *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
 * *   or  in  FAR 52.227-19, as applicable.                       *
 * *                                                               *
 * *****************************************************************
 */
/*
 * HISTORY
 */
/*
 * @(#)$RCSfile: dextern,v $ $Revision: 4.1.4.2 $ (DEC) $Date: 1993/08/02 19:42:22 $
 */
/*
 * (c) Copyright 1990, 1991, 1992, 1993 OPEN SOFTWARE FOUNDATION, INC. 
 * ALL RIGHTS RESERVED 
 */
/*
 * OSF/1 1.2
 */
/*
 * COMPONENT_NAME: (CMDLANG) Language Utilities
 *
 * FUNCTIONS: 
 *
 *
 * (C) COPYRIGHT International Business Machines Corp. 1985, 1989
 * All Rights Reserved
 *
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */

# include <stdio.h>
# include <ctype.h>
# include "files"

        /*  MANIFEST CONSTANT DEFINITIONS */

        /* base of nonterminal internal numbers */
# define NTBASE 010000

        /* internal codes for error and accept actions */

# define ERRCODE  8190
# define ACCEPTCODE 8191

        /* sizes and limits */

# ifdef HUGE
# define ACTSIZE 70000
# define MEMSIZE 40000
# define NSTATES 5000
# define NTERMS 3000
# define NPROD 2000
# define NNONTERM 1000
# define TEMPSIZE 3000
# define CNAMSZ 8000
# define LSETBLOCK 600
# define WSETSIZE 1400
# endif

# ifdef MEDIUM
# define ACTSIZE 4000
# define MEMSIZE 5200
# define NSTATES 600
# define NTERMS 127
# define NPROD 400
# define NNONTERM 200
# define TEMPSIZE 800
# define CNAMSZ 4000
# define LSETBLOCK 450
# define WSETSIZE 250
# endif

# define NAMESIZE 50
# define NTYPES 63

# ifdef WORD32
# define TBITSET ((32+NTERMS)/32)

        /* bit packing macros (may be machine dependent) */
# define BIT(a,i) ((a)[(i)>>5] & (1<<((i)&037)))
# define SETBIT(a,i) ((a)[(i)>>5] |= (1<<((i)&037)))

        /* number of words needed to hold n+1 bits */
# define NWORDS(n) (((n)+32)/32)

# else

# define TBITSET ((16+NTERMS)/16)

        /* bit packing macros (may be machine dependent) */
# define BIT(a,i) ((a)[(i)>>4] & (1<<((i)&017)))
# define SETBIT(a,i) ((a)[(i)>>4] |= (1<<((i)&017)))

        /* number of words needed to hold n+1 bits */
# define NWORDS(n) (((n)+16)/16)
# endif

        /* relationships which must hold:
        TBITSET ints must hold NTERMS+1 bits...
        WSETSIZE >= NNONTERM
        LSETBLOCK >= NNONTERM
        TEMPSIZE >= NTERMS + NNONTERMs + 1
        TEMPSIZE >= NSTATES
        */

        /* associativities */

# define NOASC 0  /* no assoc. */
# define LASC 1  /* left assoc. */
# define RASC 2  /* right assoc. */
# define BASC 3  /* binary assoc. */

        /* flags for state generation */

# define DONE 0
# define MUSTDO 1
# define MUSTLOOKAHEAD 2

        /* flags for a rule having an action, and being reduced */

# define ACTFLAG 04
# define REDFLAG 010

        /* output parser flags */
# define YYFLAG1 (-1000)

        /* macros for getting associativity and precedence levels */

# define ASSOC(i) ((i)&03)
# define PLEVEL(i) (((i)>>4)&077)
# define TYPE(i)  ((i>>10)&077)

        /* macros for setting associativity and precedence levels */

# define SETASC(i,j) i|=j
# define SETPLEV(i,j) i |= (j<<4)
# define SETTYPE(i,j) i |= (j<<10)

        /* looping macros */

# define TLOOP(i) for(i=1;i<=ntokens;++i)
# define NTLOOP(i) for(i=0;i<=nnonter;++i)
# define PLOOP(s,i) for(i=s;i<nprod;++i)
# define SLOOP(i) for(i=0;i<nstate;++i)
# define WSBUMP(x) ++x
# define WSLOOP(s,j) for(j=s;j<cwp;++j)
# define ITMLOOP(i,p,q) q=pstate[i+1];for(p=pstate[i];p<q;++p)
# define SETLOOP(i) for(i=0;i<tbitset;++i)

        /* I/O descriptors */

extern FILE * finput;           /* input file */
extern FILE * faction;          /* file for saving actions */
extern FILE * fdefine;          /* file for # defines */
extern FILE * ftable;           /* y.tab.c file */
extern FILE * ftemp;            /* tempfile to pass 2 */
extern FILE * fdebug;           /* tempfile for two debugging info arrays */
extern FILE * foutput;          /* y.output file */

        /* structure declarations */

struct looksets {
        int lset[TBITSET];
        };

struct item {
        int *pitem;
        struct looksets *look;
        };

struct toksymb {
        char *name;
        int value;
        };

struct ntsymb {
        char *name;
        int tvalue;
        };

struct wset {
        int *pitem;
        int flag;
        struct looksets ws;
        };

        /* special flag for splitting yyparse into many small routines */
extern SplitFlag;

        /* token information */

extern int ntokens ;    /* number of tokens */
extern struct toksymb tokset[];
extern int toklev[];    /* vector with the precedence of the terminals */

        /* nonterminal information */

extern int nnonter ;    /* the number of nonterminals */
extern struct ntsymb nontrst[];

        /* grammar rule information */

extern int nprod ;      /* number of productions */
extern int *prdptr[];   /* pointers to descriptions of productions */
extern int levprd[] ;   /* contains production levels to break conflicts */
extern char had_act[];  /* set if reduction has associated action code */

        /* state information */

extern int nstate ;             /* number of states */
extern struct item *pstate[];   /* pointers to the descriptions
                                 * of the states */
extern int tystate[];   /* contains type information about the states */
extern int defact[];    /* the default action of the state */
extern int tstates[];   /* the states deriving each token */
extern int ntstates[];  /* the states deriving each nonterminal */
extern int mstates[];   /* the continuation of the chains begun
                         * in tstates and ntstates */

        /* lookahead set information */

extern struct looksets *lkst;
extern int nolook;  /* flag to turn off lookahead computations */

        /* working set information */

extern struct wset wsets[];
extern struct wset *cwp;

        /* storage for productions */

extern int *mem0;
extern int *mem;
extern int memsize;

        /* storage for action table */

extern int amem[];  /* action table storage */
extern int *memp ;              /* next free action table position */
extern int indgo[];             /* index to the stored goto table */

        /* temporary vector, indexable by states, terms, or ntokens */

extern int temp1[];
extern int lineno; /* current line number */

        /* statistics collection variables */

extern int zzgoent ;
extern int zzgobest ;
extern int zzacent ;
extern int zzexcp ;
extern int zzclose ;
extern int zzrrconf ;
extern int zzsrconf ;
        /* define functions with strange types... */

extern char *cstash();
extern struct looksets *flset();
extern char *symnam();
extern char *writem();
extern void warray(const char *, const int*, int);
extern void error(char *, ...);


extern int defin( int, char * ); /* define symbol S as terminal (t==0) */
				 /* or Non-terminal (t==1) */

        /* default settings for a number of macros */

        /* name of yacc tempfiles */

# ifndef TEMPNAME
# define TEMPNAME "yacc.tmp"
# endif

# ifndef ACTNAME
# define ACTNAME "yacc.acts"
# endif

# ifndef DEBUGNAME
# define DEBUGNAME "yacc.debug"
# endif

        /* output file name */

char *prefix;
char *ofile;

        /* user output file name */

char *fileu;

        /* user-defined parser name */

extern char     *ParserPath;

       /* output file for # defines */

char *filed;

        /* command to clobber tempfiles after use */

# ifndef ZAPFILE
# define ZAPFILE(x) unlink(x)
# endif

extern char	*gsprefix;	/* Global String prefix */

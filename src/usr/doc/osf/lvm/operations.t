.\"
.\" (c) Copyright 1990, OPEN SOFTWARE FOUNDATION, INC.
.\" ALL RIGHTS RESERVED
.\"
.\"
.\" OSF/1 Release 1.0
.\"
.H 1 "Operational Considerations and Examples"
This section ties together the programming interfaces presented in the
previous section and shows how these interfaces are used to perform common
operations.
The operations are discussed in the order necessary to convert a
set of block devices into a volume group and create logical volumes.
.H 2 "Physical Volume Creation"
Before a block device can be added to a volume group, the
.B "Physical Volume Reserved Area"
(PVRA) must be initialized.
The PVRA is composed of two areas, the
.B "LVM Record"
and the
.B Bad Block Directory .
Each of these areas must be initialized and written
to disk by the physical volume creation command.
.P
The backup copies of both the LVM record and the bad block directory must also
be written with the same data as the primary copy.
Not until both copies of
the LVM record and the bad block directory are written is the physical volume
considered created.
.P
One very important note when writting the Physical Volume Reserved Area
is that no bad block relocation is performed this area.
If there are uncorrectable bad
blocks in the PVRA, then the device can not be made into a physical volume.
.H 3 "LVM Record Initialization"
When the physical volume is created all of the field of the LVM record must
be set to zero, with the following exceptions:
.BL
.LI
.I "LVM Identification Field" .
This field must be set to
.Cw LVMREC01 .
.LI
.I "Unique ID of the Physical Volume" .
This can be set to either 0 or to a
unique ID generated by the physical volume initialization function.
A possible way to generate this field is to put the hostid into the first
32-bits and the time of day stamp into the second 32-bits.
.LI
.I "Last Physical Sector Number" .
This must be set the the last sector in
the physical volume.
This field can be determined by the PV creation program
either by using the information in \fB/etc/disktab\fR, or possibly
by interrogating the block device's physical device driver for layout
information.
The utility \fInewfs\fR can be used as a model to determine this information.
.LE
.P
All of the other records of the LVM record will be set when the physical
volume is installed in a volume group.
.H 3 "Bad Block Directory Initialization"
The bad block 
directory consists of a number of records that indicate which sectors on disk
are bad, and if relocated, where they are relocated.
When this directory is
initialized by the PV create command, the command must fill in the following
fields of each entry:
.BL
.LI
.I "Reason code" .
This will typically be set to 0x1 (\fIthe device manufacturer
found a defect\fR).
Currently this field is not examined by the operating system.
.LI
.I "Bad Sector" .
The bad sector number relative to the block device.
.LI
.I "Physical sector number of the relocated block" .
This must be zero (0).
The sector will be relocated by the LVM on the first write.
When the physical sector number of the relocated block is zero,
the relocation status is not used.
.LE
.P
The physical volume creation function must zero all unused bad block entries
in the bad block directory. 
.P
After all of the bad sectors have been written to the bad block directory,
then entry zero (0) is written to contain the ASCII string
.Cw DEFECT01 .
This write is performed last to insure that the directory is correctly written
before it is marked as valid.
If this write were done first, then it would be
possible for the bad block directory to be in a inconsistent state. 
.H 2 "Volume Group Creation"
.P
The system administration command that creates a volume group will first open
the volume group's control device.
The control device is always the
device with minor number zero (0) in the volume group's major number.
The control device is often referred to as \fBLogical Volume Zero\fR (lvol[0]).
Once the device is opened, ioctl's
can be performed to control the state and configuration of the volume group.
.P
When creating a volume group for the first time, a \fBLVM_CREATEVG\fR ioctl
must be performed.
The arguments to this ioctl should be specified as
follows:
.BL
.LI
\fIpxsize\fR \(em This is the physical, and hence, logical extent size for
this volume group.
This value should be chosen with care, as it will not be
possible to change it later without re-initializing the volume group.
.LI
\fIvgda_size\fR \(em The amount of space to reserve for the volume group
descriptor area.
This must be specified so that the operating system knows
where to place the first physical extent on the physical volumes.
This should be sized to be large enough to contain the descriptors of all
of the physical volumes that will be installed in this volume group.
.LI
\fIvg_id\fR \(em A unique ID for the volume group.  This ID will be written
into the physical volumes that get installed in this volume group.  This ID
needs to be unique so that error checking can be performed when attaching
physical volumes to volume groups.
.LE
.P
Performing this ioctl will create an in-memory copy of the VGDA.  The
in-memory volume group header will be initialized as follows:
.BL
.LI
\fIvg_timestamp\fR \(em This will not be set until the VGDA is first written
to a physical volume.
.LI
\fIvg_id\fR \(em Will be set to the vg_id specified in the \fBLVM_CREATEVG\fR
ioctl.
.LI
\fInumlvs\fR \(em Will be initialized to 0.
.LI
\fImaxlvs\fR \(em Will be initialized to LVM_MAXLVS.  It was decided to always
set this to the maximum because overhead for each logical volume is small and
there is no way to expand this number without reinitializing the volume group.
.LI
\fIpp_size\fR \(em As specified on the \fBLVM_CREATEVG\fR ioctl.
.LI
\fInumpvs\fR \(em Is initialized to 0 - there are no physical volumes in the
volume group yet.
.LI
\fItotal_vgdas\fR \(em Initializes to 0 - there are no VGDAs on physical
volumes yet.
.LI
\fIvgda_size\fR \(em As specified in the \fBLVM_CREATEVG\fR ioctl.
.LE
.P
The \fILV_entries\fR of the in-memory VGDA are zero'ed as are the physical
volume headers and entries.  The timestamp in the VG_trailer is left
un-initialized until the first time the VGDA is written to a physical volume.
.P
As physical volumes are installed to the volume group, this in-memory copy
will be updated and written to them.
.P
Once the volume group has been created, it can be activated with the
\fBLVM_ACTIVATE\fR ioctl.  This simply changes the state of the volume group
to active.  The active state is only reflected in in-memory data structures,
it does not effect the on-disk data structures. Physical volumes can only be
installed in active volume groups.
.P
With the volume group created and activated, we can now install physical
volumes.  This operation is the same as installing a physical volume in a
existing volume group.
.H 2 "Installing a Physical Volume"
Each physical volume is installed using the \fBLVM_INSTALLPV\fR ioctl.  This
ioctl takes only one argument, the path name of the block device containing
the physical volume, e.g. /dev/rz0c.
.P
This operation will open the device in the same manner that the Unix
operation \fImount\fR opens devices.
The Physical volume reserved area will be read from 
the block device to determine if it is an initialized physical volume, this is
done by verifing that the \fILVM Identification Field\fR of both LVM records
contain the ascii
string \fBLVMREC01\fR and that the first entry of both bad block directories
contain the ascii string \fBDEFECT01\fR .  If these checks pass, then the
volume group ID field of both LVM records is checked.  This field must be zero.
If it is not zero, then this physical volume is already a member of a volume
group and it can not be added to this volume group.
.P
If the checks are all successful, then the physical volume will be installed
in the volume group.  This operation will update the LVM record on the
physical volume, install a VGDA on this physical volume and update the VGDA on
all other physical volumes in this volume group.  All of this is done by the
operating system and is carefully ordered to ensure that the on-disk data
structures are always consistent.  Consistency must be maintained at all times
to insure recoverability in case of a system failure.
.P
The first thing that is updated is the LVM record on the physical volume being
installed.
The fields of the LVM record that were not initialized when the physical
volume was created are initialized and written to disk.  These fields are set
as follows:
.BL
.LI
\fIUnique ID of the Volume Group\fR \(em The volume group ID is written here.
.LI
\fILength of the VG Reserved Area\fR \(em This is calculated from sizes of the
VGDA, VGSA and the mirror write cache.
.LI
\fILength of the VGDA\fR \(em The volume group descriptor area length is
written here.
.LI
\fILength of the VGSA\fR \(em The volume group status area length is written
here.
.LI
\fIPhysical Sector Number of Primary Descriptor and Status Area\fR \(em This
will usually be sector 128.
.LI
\fIPhysical Sector Number of Secondary Descriptor and Status Area\fR \(em This
is calculated from the size of the VGDA, the size of the VGSA and the sector
number of the primary descriptor and status area.
.LI
\fILength of the Mirror Consistency Record\fR \(em \fBWe need to specify how
this is derived.\fR
.LI
\fIPhysical Sector Number of Primary Mirror Consistency Record\fR \(em \fBWe
need to specify how this is derived.\fR
.LI
\fIPhysical Sector Number of Secondary Mirror Consistency Record\fR \(em \fBWe
need to specify how this is derived.\fR
.LI
\fIPhysical Sector Number of the LVM User Data Area\fR \(em This is derived
from the physical sector number of the secondary mirror consistency record and
the size of the mirror consistency record.
.LI
\fIPhysical Extent Size\fR \(em Copied from the volume group's VGDA.
.LI
\fIPhysical Extent Space\fR \(em Currently this is the same as the physical
extent size.  \fBWe need a way to set this.  It can not be done a create PV
time, as we don`t know the physical extent size of the volume group that
this physical volume will be inserted into.\fR
.LI
\fIPhysical Parition Count\fR \(em This is derived from the physical extent
space, the number of sectors in the physical volume and the start of the LVM
user data area.
.LI
\fILength of the Bad Block Relocation Pool\fR \(em This is the space remaining
after the user data area has been split into physical extent.  This length
must be greater than zero.
.LI
\fIPhysical Sector Number of the Bad Block Relocation Pool\fR \(em This is the
derived from the start of the LVM user data area, the physical extent space
and the physical extent count.
.LE
.P
\fBQUESTION - WHAT IF WE CRASH HERE?\fR.
.P
The in-memory copy of the VGDA is now updated to reflect the fact that a new
physical volume has been added.  The following changes will be made to the
VGDA:
.BL
.LI
The \fInumpvs\fR field is incremented by one.
.LI
The \fItotal_vgdas\fR will is reset.  If this is the first physical volume,
this will be set to two.  If it is the second physical volume, it will be set
to four.  If it is the third physical volume it will be set to three.  See the
specification of the VGDA for a description of the algorithm for placing VGDAs
on physical volumes.
.LI
A \fBPhysical Volume Header\fR is created for this physical volume.  This is
inserted into the list of physical volume entries on the VGDA.  The data
contained in this header is derived from the LVM record on the physical
volume, with the exception of the \fIpv_num\fR.  The \fIpv_num\fR is set to
the first unused number in this volume group.  \fBJEFF - DID WE CHANGE
THIS?\fR
.LI
Space is allocated for the physical extent map entries and initialized to
zero.
.LE
.P
After the in-memory VGDA has been updated it is written to disk.  The VGDA is
first written to the physical volume being installed, then to the rest of the
physical volumes in the volume group.  This algorithm ensures that a quorum
can always be obtained.
.P
When all of these steps are completed, the physical volume has been added to
the volume group.
.P
\fBWe have to write the VGSA and the Mirror consistency cache some time, when
and how do we do this?\fR.
.H 2 "Enabling a Volume Group"
.P
Each time the system is booted, the volume groups must be brought on line.
This process verifies the integrity of the volume group, builds the volume
group's in-memory data structures, and performs any necessary mirror
synchronization.
.P
The process of enabling a volume group is slightly different from creating a
volume group.  The first step in enabling a volume group is to set the volume
group ID with the \fBLVM_SETVGID\fR ioctl.  This ID will be used to check the
validity of subsequent physical volume attach operations on this volume group.
.P
Once the volume group has been given its ID, its physical volumes can be
attached with the \fBLVM_ATTACHPV\fR operation.  This operation will read the
\fILVM Record\fR from the physical volume and verify that
it is a member of this volume group.  This is done by comparing the volume
group ID saved in the LVM record with the one set in the \fBLVM_SETVGID\fR
operation above.  If these are inconsistent, then an error is indicated and
the physical volume is not added to the volume group.
.P
Once all of the physical volumes have been attached to the volume group, the
volume group can be activated.  This is done with the \fBLVM_ACTIVATEVG\fR
ioctl.  All of the LVM record's of the attached physical volumes will be
reconciled at this time.  The activation may fail if a quorum of physical
volumes can not be obtained.  If the activate is successful, then the volume
group has been enabled.
.H 2 "Creating a Logical Volume"
.P
Logical volumes are created with the \fBLVM_CREATELV\fR ioctl.  This ioctl
is issued to the control device of the volume group that will contain the
logical volume.  The arguments to the ioctl should be set as follows:
.BL
.LI
\fIminor_num\fR \(em The minor device number of the logical volume.  This must
be in the range 1 to MAXLVS.  If there is already a logical volume with this
minor number, then the operation will fail.
.LI
\fImirror_policy\fR \(em This should set to either \fBLVM_PARALLEL\fR or
\fBLVM_SEQUENTIAL\fR.
.LI
\fIflags\fR \(em The policies and permissions desired should be set in the
flags arguments.
.LE
.P
If this ioctl is successful, then the logical volume entry in the volume
group descriptor area at offset \fIminor_num - 1\fR will be initialized.  The
volume group descriptor will then be written to the physical volumes.  At this
point, the logical volume exists and has a size of zero.
.H 2 "Extending a Logical Volume"
.P
Existing logical volumes can have their size extended with the
\fBLVM_EXTENDLV\fR ioctl.  This ioctl is issued to the control device of the
volume group that contains the logical extent.  The arguments to the ioctl
should be:
.BL
.LI
\fIminor_num\fR \(em The minor number of the logical volume that is being
extended.  There must be a valid logical volume with this minor number.
.LI
\fInum_pp\fR \(em The number of physical extent that are being added to
the logical volume.
.LI
\fIparts\fR \(em An array of physical extent that will be added to the
logical volume.  The array contains structures with the following fields:
.BL
.LI
\fIpv_id\fR \(em The physical volume ID number.  This ID is obtained from the
\vBLVM_QUERYPV\fR ioctl.
.LI
\fIpp_num\fR \(em The physical extent number to add to this logical volume.
.LI
\fIlp_num\fR \(em The logical extent number being mapped to the specified
physical extent.
.LI
\fImirror_num\fR \(em The mirror number of the physical extent being added.
This field is used primarily for error checking.  If the specified logical
extent already has a mirror at this mirror number, or if there are no
mirrors below this mirror number, then an error is returned.
.LE
.LE
.P
Each extent is added to the logical volume one at a time.  It is possible
for some of the additions to fail.  If any of them fail, then the \fBWHAT DO
WE DO ON ERRORS?\fR

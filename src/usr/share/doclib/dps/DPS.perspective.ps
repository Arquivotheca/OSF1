%!PS-Adobe-1.0
%%Title: perspective.mss
%%DocumentFonts: (atend)
%%Creator: Amy Davidson and Scribe 5(1501)
%%CreationDate: 3 November 1992 15:04
%%Pages: (atend)
%%EndComments

%Passthrough from Scribe
/CreationDate (Tue Nov  3 15:04:00 1992) def
/DraftStyle   (5)  def
DraftStyle () eq {/DraftStyle 0 def}
        {/DraftStyle DraftStyle cvi def}ifelse

% Adobe local stuff required for pssupplement
/bd{bind def}def
/pica{12 mul}bd/inch{72 mul}bd/mtx matrix def
/pagewidth 7.375 inch def/pagelength 9.25 inch def
/shtm 9 def /shtl 12 def

/draftmsg{
 gsave
 0.2 setlinewidth
 /Helvetica-Bold findfont 36 scalefont setfont
 420 720 moveto 10 rotate (DRAFT)false charpath stroke
 grestore
 /Helvetica findfont 8 scalefont setfont
 585 720 moveto -90 rotate
 (DRAFT of )show
 CreationDate show (.  )show
 (This is a draft copy only.  The final revision will not contain this message.)
 show
}bd

/pagegridprocs[

{gsave 0 setlinecap .25 setlinewidth newpath
 0 shtm neg moveto 0 shtl neg rlineto stroke
 shtm neg 0 moveto shtl neg 0 rlineto stroke
 pagewidth shtm add 0 moveto shtl 0 rlineto stroke
 pagewidth shtm neg moveto 0 shtl neg rlineto stroke
 0 pagelength shtm add moveto 0 shtl rlineto stroke
 shtm neg pagelength moveto shtl neg 0 rlineto stroke
 pagewidth shtm add pagelength moveto shtl 0 rlineto stroke
 pagewidth pagelength shtm add moveto 0 shtl rlineto stroke 
 grestore
}bind

{gsave
 initgraphics
 draftmsg
 grestore
}bind

{0 0 moveto pagewidth 0 lineto pagewidth pagelength lineto
 0 pagelength lineto 0 0 lineto closepath 0 setlinewidth stroke
 }bind

{gsave
 initgraphics
 94 720 moveto 315 0 rlineto 0 50 rlineto -315 0 rlineto closepath
 1 setlinewidth stroke
 /Helvetica-Bold findfont 14 scalefont setfont
 120 740 moveto (This draft is for Adobe Internal Use Only)show
 draftmsg
 grestore
}bind

{gsave
 initgraphics
 94 720 moveto 315 0 rlineto 0 50 rlineto -315 0 rlineto closepath
 1 setlinewidth stroke
 /Helvetica-Bold findfont 14 scalefont setfont
 100 756 moveto (This draft is provided under a non-disclosure)show
 100 740 moveto (agreement. Not to be re-distributed without)show
 100 724 moveto (written permission from Adobe Systems Inc.)show
 draftmsg
 grestore
}bind

{}
]def

/pagegrid /pagegridprocs load DraftStyle get def

/PSLogod 20 dict def
/Helvetica findfont{1 index/FID ne{PSLogod 3 1 roll put}{pop pop}ifelse}forall
PSLogod/FontMatrix[0.001 0 0 0.000916667 0 0]put
PSLogod/FontName/PSLogo put/PSLogo PSLogod definefont pop

/BOT{pop gsave currentpoint translate 90 rotate SSZ -.7 mul 0 moveto(^)show
 grestore(^)stringwidth rmoveto}def

% chapter box/fountain
/fstr 128 13 sub string def 128 1 255 13 sub{fstr exch dup
 255 div 180 mul cos neg 2 div .5 add 255 mul cvi exch 128 sub exch put}for
/fountain{/ury exch def/urx exch def/lly exch def/llx exch def
 gsave urx ury translate 180 rotate urx llx sub ury lly sub scale
 128 13 sub 10 8[-128 13 add 0 0 10 128 13 sub 0]{fstr}image grestore}def

% John's Figure Stuff
/figdict 100 dict def figdict begin
/scl .2157 def %scale of page
/rscl 1 scl div def % inverse scale
/hfpt .5 rscl mul def
/flpt rscl def
/qtpt .25 rscl mul def
/dsh {qtpt setlinewidth [2 rscl mul dup ] 0 setdash}def
/fntsz 8 rscl mul def
/fntoff fntsz .75 mul 2 div def
/hv /Helvetica findfont fntsz scalefont def
/hvs /Helvetica findfont fntsz .75 mul scalefont def
/sym /Symbol findfont fntsz scalefont def
/syms /Symbol findfont fntsz .75 mul scalefont def
/arrow
{/ye exch def /xe exch def
 /yb exch def /xb exch def
 /xd xe xb sub def /yd ye yb sub def
 /mg xd dup mul yd dup mul add sqrt def
 /ang yd xd atan def
 gsave xb yb translate ang rotate
 2 rscl mul 0 moveto mg 2 rscl mul sub 0 lineto qtpt setlinewidth stroke
 mg 0 moveto -4 rscl mul 2 rscl mul rlineto 0 -4 rscl mul rlineto closepath 
 fill grestore
}def

/2arrow 
{/ye exch def /xe exch def
 /yb exch def /xb exch def
 /xd xe xb sub def /yd ye yb sub def
 /mg xd dup mul yd dup mul add sqrt def
 /ang yd xd atan def
 gsave
 xb yb translate ang rotate
 2 rscl mul 0 moveto mg 2 rscl mul sub 0 lineto 
 qtpt setlinewidth stroke
 0 0 moveto 4 rscl mul 2 rscl mul lineto
 0 -4 rscl mul rlineto closepath fill
 mg 0 moveto -4 rscl mul 2 rscl mul rlineto
 0 -4 rscl mul rlineto closepath fill
 grestore
}def

/inch {72 mul}def

/angshow
{gsave
 /prc exch def
 /rd exch def
 /eang exch def
 /bang exch def
 /ys exch def
 /xs exch def
 /ad 180 rd 3.14159 mul div .75 mul def
 newpath
 xs ys rd bang eang ad sub arc
 qtpt setlinewidth stroke
 gsave xs ys translate
 eang rotate rd 0 translate
 flpt neg flpt 3 mul neg moveto flpt 2 mul 0 rlineto
 0 0 lineto closepath fill
 grestore
 hv setfont
 /mang bang eang add 2 div def
 /prc load
 xs mang cos rd mul 2 rscl mul sub add
 ys mang sin rd mul 4 rscl mul sub add rtext
grestore
}def  

/dotrad 1.5 rscl mul def
/dot 
{gsave 
 translate dotrad 0 moveto 0 0 dotrad 0 359 arc closepath fill 
 grestore
}def
/shw {show}def

/subscript  
{gsave 
 hvs setfont subbck suboff rmoveto show
 currentpoint suboff neg add exch subbck neg add exch
 grestore moveto}def

/subbck -.5 rscl mul def
/suboff -4 rscl mul def

/rtext
{gsave translate /prc exch def
 $ct begin
 0 0 moveto
 prc currentpoint
 end
 /ty exch def /tx exch def
 0 0 moveto
 tx neg 0 rmoveto
 prc 
 grestore
 }def

/ctext
{gsave translate /prc exch def
 $ct begin
 0 0 moveto
 prc currentpoint
 end
 /ty exch def /tx exch def
 0 0 moveto
 tx 2 div neg 0 rmoveto
 prc 
 grestore
 }def
/wbox
{gsave
 /ury exch def /urx exch def /lly exch def /llx exch def
 llx lly moveto llx ury lineto urx ury lineto urx lly lineto
 closepath 1 setgray fill grestore}def
/cwtext
{gsave translate /prc exch def
 $ct begin
 0 0 moveto
 prc currentpoint
 end
 /ty exch def /tx exch def
 tx 2 div neg fntsz neg .25 mul tx 2 div fntsz wbox
 0 0 moveto
 tx 2 div neg 0 rmoveto
 prc 
 grestore
}def

/ltext
{gsave translate /prc exch def
 0 0 moveto
 prc 
 grestore
}def
/$ct 10 dict def
$ct /show {stringwidth rmoveto} put
end %end figdict
%               END John's Stuff
/reencsmalldict 12 dict def /ReEncodeSmall      % oldname newname vector
{reencsmalldict begin
 /newcodesandnames exch def /newfontname exch def /basefontname exch def
 FontDirectory newfontname known
  {/ReEncodeSmall errordict /fontalreadydefined get exec} if
 /basefontdict basefontname findfont def
 /newfont basefontdict maxlength dict def
 basefontdict {exch dup /FID ne {dup /Encoding eq
  {exch dup length array copy newfont 3 1 roll put}
  {exch newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall
 newfont /FontName newfontname put newcodesandnames aload pop
 newcodesandnames length 2 idiv{newfont /Encoding get 3 1 roll put}repeat
 newfontname newfont definefont pop end}def
/univers[
0/Aacute 1/aacute
2/Acircumflex 3/acircumflex
4/Adieresis 5/adieresis
6/Agrave 7/agrave
8/Aring 9/aring
10/Atilde 11/atilde
12/Ccedilla 13/ccedilla
14/Eacute 15/eacute
16/Ecircumflex 17/ecircumflex
18/Edieresis 19/edieresis
20/Egrave 21/egrave
22/Iacute 23/iacute
24/Icircumflex 25/icircumflex
26/Idieresis 27/idieresis
28/Igrave 29/igrave
30/Ntilde 31/ntilde
128/Oacute 129/oacute
130/Ocircumflex 131/ocircumflex
132/Odieresis 133/odieresis
134/Ograve 135/ograve
136/Otilde 137/otilde
138/Scaron 139/scaron
140/Uacute 141/uacute
142/Ucircumflex 143/ucircumflex
144/Udieresis 145/udieresis
146/Ugrave 147/ugrave
148/Ydieresis 149/ydieresis
150/Zcaron 151/zcaron
]def
/tspecial[
1/Aacute 2/Acircumflex 3/Adieresis 4/Agrave 5/Aring 6/Atilde
7/Ccedilla
8/Eacute 9/Ecircumflex 10/Edieresis 11/Egrave
12/Iacute 13/Icircumflex 14/Idieresis 15/Igrave
16/Ntilde
17/Oacute 18/Ocircumflex 19/Odieresis 20/Ograve 21/Otilde
22/Scaron
23/Uacute 24/Ucircumflex 25/Udieresis 26/Ugrave
27/Ydieresis
28/Zcaron
129/aacute 130/acircumflex 131/adieresis 132/agrave 133/aring 134/atilde
135/ccedilla
136/eacute 137/ecircumflex 138/edieresis 139/egrave
140/iacute 141/icircumflex 142/idieresis 143/igrave 
144/ntilde
145/oacute 146/ocircumflex 147/odieresis 148/ograve 149/otilde
150/scaron
151/uacute 152/ucircumflex 153/udieresis 154/ugrave 
155/ydieresis
156/zcaron
] def
/Times-Roman /Times-Special tspecial ReEncodeSmall

% mostly standard stuff 
/BS {/SV save def 40 40 translate pagegrid
     0.0 pagelength translate .01 -.01 scale}bd
/ES {showpage SV restore}bd
/SC {setrgbcolor}bd
/FMTX matrix def
/RDF {WFT SLT 0.0 eq
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont}bd
/SLT 0.0 def
/SI { /SLT exch cvr def RDF}bd
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF}bd
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF}bd
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF}bd
/MT /moveto load def
/XM {currentpoint exch pop moveto}bd
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore}bd
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore}bd
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore}bd
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore}bd
/BX1 {grestore}bd
/BX2 {setlinewidth 1 setgray stroke grestore}bd
/PB {/PV save def /PICY exch def /PICX exch def
PICX 4985 le {/PICX 4500 def}{PICX 6120 le {/PICX 5400 def}if}ifelse
PICX PICY translate 100.0 -100.0 scale pop
/showpage{}def }bd
/PE {PV restore}bd
/SH /show load def
/MX {exch show 0.0 rmoveto}bd
/W {0 32 4 -1 roll widthshow}bd
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto}bd
%%EndProlog


%%Page: 1 1 
BS
0 SI
11 SS 
0 5400 5400 PB %!
% display postscript system title page
gsave 
0 -5 pica translate  
0 0 36 pica 5 pica fountain
1 setlinewidth -.25 0 moveto 36 pica .5 add 0 rlineto stroke
-.25 5 pica moveto 36 pica .5 add 0 rlineto stroke
.5 setlinewidth 0 -.5 moveto 0 5 pica 1 add rlineto stroke
36 pica -.5 moveto 0 5 pica 1 add rlineto stroke grestore

/Helvetica findfont 12 scalefont setfont
/slength (ADOBE SYSTEMS) stringwidth pop def

/hbig /Helvetica-Bold findfont 30 scalefont def 
hbig setfont
newpath 0 0 moveto
(P) false charpath flattenpath pathbbox exch pop exch sub 
/ph exch def pop
/bl 5 pica ph 16 add sub 2 div ph add def
% NEW STUFF
newpath
7 pica bl neg moveto
gsave
 gsave 
 (D) false charpath gsave 1 setgray fill grestore
 .5 setlinewidth stroke
 grestore
 (D) stringwidth rmoveto
 /hsq /Helvetica-Bold findfont [30 0 0 27 0 0] makefont def 
 hsq setfont
 gsave
 (ISPLA) false charpath gsave 1 setgray fill grestore
 .5 setlinewidth stroke
 grestore
 (ISPLA) stringwidth rmoveto
 -4 0 rmoveto
 (Y) false charpath gsave 1 setgray fill grestore
 .5 setlinewidth stroke
grestore
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
newpath
18 pica bl neg moveto
gsave
gsave 
(P) false charpath gsave 1 setgray fill grestore
.5 setlinewidth stroke
grestore
(P) stringwidth rmoveto
/hsq /Helvetica-Bold findfont [30 0 0 27 0 0] makefont def 
hsq setfont
gsave
(OST) false charpath gsave 1 setgray fill grestore
.5 setlinewidth stroke
grestore
(OST) stringwidth rmoveto
hbig setfont
gsave
(S) false charpath gsave 1 setgray fill grestore
.5 setlinewidth stroke
grestore
(S) stringwidth rmoveto
hsq setfont
gsave
(CRIPT) false charpath gsave 1 setgray fill grestore
.5 setlinewidth stroke
grestore
grestore

0 -16 rmoveto
/Helvetica findfont 10 scalefont setfont
gsave 
slength (SYSTEM) stringwidth pop sub 5 div 0
(SYSTEM) ashow grestore

0 -25 pica rmoveto
/Helvetica findfont 12 scalefont setfont
gsave (ADOBE SYSTEMS) show grestore
0 -14 rmoveto
/Helvetica findfont 8 scalefont setfont
gsave
slength (INCORPORATED) stringwidth pop sub 11 div 0
(INCORPORATED) ashow
grestore

%% end of title page
 PE 18 /Helvetica AF
26998 22910 MT
(Perspective)SH
26998 24706 MT
(for Software Developers)SH
ES
%%Page: 2 2 
BS
0 SI
9 /Times-Bold AF
24890 19395 MT
(Perspective for Software Developers)SH
/Times-Roman SF
24890 22389 MT
(July 29, 1991)SH
24890 24385 MT
(Copyright)SH
/Symbol SF
28765 XM
(\323)SH
/Times-Roman SF
29701 XM
(1988-1991 Adobe Systems Incorporated.)SH
24898 25383 MT
(All rights reserved.)SH
24890 27379 MT
(PostScript and Display PostScript are registered trademarks of)SH
24898 28377 MT
(Adobe Systems Incorporated.)SH
24898 29375 MT
(X Window System is a trademark of the Massachusetts)SH
24898 30373 MT
(Institute of Technology.)SH
8 SS 
24890 32269 MT
(The information in this document is furnished for informational use)SH
24898 33167 MT
(only, is subject to change without notice, and should not be construed)SH
24898 34065 MT
(as a commitment by Adobe Systems Incorporated.  Adobe Systems)SH
24898 34963 MT
(Incorporated assumes no responsibility or liability for any errors or)SH
24898 35861 MT
(inaccuracies that may appear in this document. The software described)SH
24898 36759 MT
(in this document is furnished under license and may only be used or)SH
24898 37657 MT
(copied in accordance with the terms of such license.)SH
24890 39553 MT
(No part of this publication may be reproduced, stored in a retrieval)SH
24898 40451 MT
(system, or transmitted in any form or by any means, electronic,)SH
24898 41349 MT
(mechanical, recording, or otherwise, without the prior written)SH
24898 42247 MT
(permission of Adobe Systems Incorporated.)SH
9 SS 
24890 44243 MT
(Written by Amy Davidson.)SH
ES
%%Page: 1 3 
BS
0 SI
12 /Helvetica AF
12592 6275 MT
(1 ABOUT)
491 W( THIS DOCUMENT)SH
11 /Times-Roman AF
19791 8826 MT
(This document is your introduction)
148 W( to application development)147 W
19799 10123 MT
(using the text and graphics imaging)
243 W( resources of the Display)244 W
9 /Symbol AF
24323 11084 MT
(\322)SH
11 /Times-Roman AF
19799 11447 MT
(PostScript)SH
25309 XM
(system.)SH
19791 13642 MT
(This overview for the application programmer describes:)SH
/Symbol SF
21418 15919 MT
(\267)SH
/Times-Roman SF
22199 XM
(The Display PostScript system environment you'll be)
22 W( inter-)21 W
22199 17116 MT
(acting with.)SH
/Symbol SF
21418 18912 MT
(\267)SH
/Times-Roman SF
22199 XM
(The Client Library interface you'll be programming for.)SH
/Symbol SF
21418 20708 MT
(\267)SH
/Times-Roman SF
22199 XM
(The use of the)337 W
/Times-Italic SF
30083 XM
(pswrap)SH
/Times-Roman SF
33935 XM
(translator to prepare C-callable)337 W
9 /Symbol AF
36741 21669 MT
(\322)SH
11 /Times-Roman AF
22199 22032 MT
(procedures containing PostScript)SH
37727 XM
(language programs.)SH
/Symbol SF
21418 23828 MT
(\267)SH
/Times-Roman SF
22199 XM
(The manuals you'll need.)SH
12 /Helvetica AF
12592 27696 MT
(2 ABOUT)
491 W( THE DISPLAY POSTSCRIPT SYSTEM)SH
11 /Times-Roman AF
19791 30247 MT
(The Display PostScript)
260 W( system provides a device-independent)259 W
19799 31544 MT
(imaging model for displaying information)
83 W( on a screen. This im-)84 W
19799 32841 MT
(aging model is fully compatible with the)
63 W( imaging model used in)62 W
19799 34138 MT
(PostScript printers. By allowing you to)
164 W( use the PostScript lan-)165 W
19799 35435 MT
(guage to display text, graphics, and sampled images, it frees)
42 W( you)41 W
19799 36732 MT
(from display-specific details)
71 W( such as screen resolution and num-)72 W
19799 38029 MT
(ber of available colors.)SH
19791 40224 MT
(You can look at)
217 W( the Display PostScript system as part of the)216 W
19799 41521 MT
(window system. Your application will use window system)
136 W( fea-)137 W
19799 42818 MT
(tures for window placement and sizing, menu creation, and event)13 W
19799 44115 MT
(handling, while using Display PostScript system)
59 W( features to take)60 W
19799 45412 MT
(care of imaging inside the window.)SH
19791 47607 MT
(Display PostScript system)
595 W( components include the Client)594 W
19799 48904 MT
(Library, the PostScript interpreter, and the)282 W
/Times-Italic SF
40370 XM
(pswrap)SH
/Times-Roman SF
44168 XM
(translator.)SH
19799 50201 MT
(These components are described in)
294 W( the accompanying set of)293 W
19799 51498 MT
(manuals. If you are a new PostScript language programmer,)301 W
19799 52795 MT
(you'll also need copies of the PostScript language)
84 W( manuals. See)83 W
19799 54092 MT
(Section 6.2 for a)
56 W( discussion of documentation required by appli-)57 W
19799 55389 MT
(cation developers.)SH
19791 57584 MT
(Figure 1 shows the relationship)
14 W( between your application and the)13 W
8 /Helvetica AF
27445 63450 MT
(2 ABOUT)
327 W( THE DISPLAY POSTSCRIPT SYSTEM)SH
10 SS 
48041 XM
(1)SH
ES
%%Page: 2 4 
BS
0 SI
11 /Times-Roman AF
18899 6155 MT
(Display PostScript)
342 W( system. The Client Library contains data)343 W
18899 7452 MT
(structures and procedures your)
163 W( application will use to send re-)162 W
18899 8749 MT
(quests to)
227 W( the PostScript interpreter. No matter what operating)228 W
18899 10046 MT
(system you're dealing with, you can)
190 W( send PostScript language)189 W
18899 11343 MT
(programs to the interpreter in the same way, using the same)
41 W( pro-)42 W
18899 12640 MT
(cedure calls.)
31 W( Therefore portability issues are minimized if you're)30 W
18899 13937 MT
(developing an application for more than one environment.)SH
10 /Helvetica-Bold AF
4500 15862 MT
(Figure 1)SH
/Helvetica-Oblique SF
8752 XM
(The Display PostScript System)SH
43197 50 4500 17771 UL
1 SS 
18000 4500 35812 PB %!
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize                     % - initialize -
{
/packedarray where
        {
        pop
        }
        {
        Adobe_packedarray begin
        Adobe_packedarray
                {
                dup xcheck
                        {
                        bind
                        } if
                userdict 3 1 roll put
                } forall
        end
        } ifelse
} def
/terminate                      % - terminate -
{
} def
/packedarray            % arguments count packedarray array
{
array astore readonly
} def
/setpacking                     % boolean setpacking -
{
pop
} def
/currentpacking         % - setpacking boolean
{
false
} def
currentdict readonly pop end
Adobe_packedarray /initialize get exec
% cmykcolor Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize                     % - initialize -
{
/setcmykcolor where
        {
        pop
        }
        {
        userdict /Adobe_cmykcolor_vars 2 dict dup begin put
        /_setrgbcolor
                /setrgbcolor load def
        /_currentrgbcolor
                /currentrgbcolor load def
        Adobe_cmykcolor begin
        Adobe_cmykcolor
                {
                dup xcheck
                        {
                        bind
                        } if
                pop pop
                } forall
        end
        end
        Adobe_cmykcolor begin
        } ifelse
} def
/terminate                      % - terminate -
{
currentdict Adobe_cmykcolor eq
        {
        end
        } if
} def
/setcmykcolor           % cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
        {
        3 index add neg dup 0 lt
                {
                pop 0
                } if
        3 1 roll
        } repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor       % - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
        {
        1 sub neg 3 1 roll
        } repeat
0
} def
currentdict readonly pop end
setpacking
% cshow Operator
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize                     % - initialize -
{
/cshow where
        {
        pop
        }
        {
        userdict /Adobe_cshow_vars 1 dict dup begin put
        /_cshow         % - _cshow proc
                {} def
        Adobe_cshow begin
        Adobe_cshow
                {
                dup xcheck
                        {
                        bind
                        } if
                userdict 3 1 roll put
                } forall
        end
        end
        } ifelse
} def
/terminate                      % - terminate -
{
} def
/cshow                          % string proc cshow -
{
Adobe_cshow_vars
        exch /_cshow
        exch put
        {
        0 0 Adobe_cshow_vars /_cshow get exec
        } forall
} def
currentdict readonly pop end
setpacking
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize                     % - initialize -
{
/setcustomcolor where
        {
        pop
        }
        {
        Adobe_customcolor begin
        Adobe_customcolor
                {
                dup xcheck
                        {
                        bind
                        } if
                pop pop
                } forall
        end
        Adobe_customcolor begin
        } ifelse
} def
/terminate                      % - terminate -
{
currentdict Adobe_customcolor eq
        {
        end
        } if
} def
/findcmykcustomcolor    % cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor         % object tint setcustomcolor -
{
exch
aload pop pop
4
        {
        4 index mul 4 1 roll
        } repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint           % boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
% Adobe Illustrator (TM) Prolog
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize                             % - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
        {
        dup xcheck
                {
                bind
                } if
        pop pop
        } forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate                              % - terminate -
{
end
end
} def
% definition operators
/_                                      % - _ null
null def
/ddef                           % key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput                           % key value literal xput -
{
dup load dup length exch maxlength eq
        {
        dup dup load dup
        length 2 mul dict copy def
        } if
load begin def end
} def
/npop                           % integer npop -
{
        {
        pop
        } repeat
} def
% marking operators
/sw                                     % ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss                                     % ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
        {
        2 npop (0) exch
        2 copy 0 exch put pop
        gsave
        false charpath
        currentpoint
        4 index setmatrix
        stroke
        grestore
        moveto
        2 copy rmoveto
        } cshow
3 npop
} def
% path operators
/sp                                     % ax ay length string sp -
{
exch pop
        {
        2 npop (0) exch
        2 copy 0 exch put pop
        false charpath
        2 copy rmoveto
        } cshow
2 npop
} def
% path construction operators
/pl                                     % x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c                              % x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v                              % x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y                              % x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l                              % x y l -
{
lineto
} def
/L
/l load def
/m                              % x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d                                      % array phase d -
{
setdash
} def
/cf                                     % - cf flatness
currentflat def
/i                                      % flatness i -
{
dup 0 eq
        {
        pop cf
        } if
setflat
} def
/j                                      % linejoin j -
{
setlinejoin
} def
/J                                      % linecap J -
{
setlinecap
} def
/M                                      % miterlimit M -
{
setmiterlimit
} def
/w                                      % linewidth w -
{
setlinewidth
} def
% path painting operators
/H                                      % - H -
{} def
/h                                      % - h -
{
closepath
} def
/N                                      % - N -
{
newpath
} def
/n                                      % - n -
/N load def
/F                                      % - F -
{
_pf
} def
/f                                      % - f -
{
closepath
F
} def
/S                                      % - S -
{
_ps
} def
/s                                      % - s -
{
closepath
S
} def
/B                                      % - B -
{
gsave F grestore
S
} def
/b                                      % - b -
{
closepath
B
} def
/W                                      % - W -
{
clip
} def
% text painting operators
/ta                                     % length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl                                     % - tl -
{
_tl aload pop translate
} def
/as                                     % - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z                                      % literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
        {
        0 _tt astore pop
        0 exch neg _tl astore pop
        }
        {
        0 exch neg _tt astore pop
        neg 0 _tl astore pop
        } ifelse
exch findfont exch scalefont setfont
} def
/tm                                     % matrix tm -
{
_tm currentmatrix pop
concat
} def
/I                                      % matrix I -
{
tm
/t
        {
        ta sp
        tl
        } ddef
} def
/o                                      % matrix o -
{
tm
/t
        {
        ta 4 npop
        tl
        newpath
        } ddef
} def
/e                                      % matrix e -
{
tm
/t
        {
        ta _psf
        tl
        newpath
        } ddef
} def
/r                                      % matrix r -
{
tm
/t
        {
        ta _tm _pss
        tl
        newpath
        } ddef
} def
/a                                      % matrix a -
{
tm
/t
        {
        2 copy
        ta _psf
        newpath
        ta _tm _pss
        tl
        newpath
        } ddef
} def
/T                                      % - T -
{
_tm setmatrix
} def
% font operators
/Z                                      % array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
        {
        1 index /FID ne
                {
                def
                }
                {
                2 npop
                } ifelse
        } forall
/FontName exch def dup length 0 ne
        {
        /Encoding Encoding 256 array copy def
        0 exch
                {
                dup type /nametype eq
                        {
                        Encoding 2 index 2 index put pop
                        1 add
                        }
                        {
                        exch pop
                        } ifelse
                } forall
        } if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u                                      % - u -
{} def
/U                                      % - U -
{} def
/q                                      % - q -
{
gsave
} def
/Q                                      % - Q -
{
grestore
} def
% place operators
/`                                      % matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~                                      % - ~ -
{
end
_i restore
} def
% color operators
/O                                      % flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R                                      % flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g                                      % gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
        {
        _of setoverprint
        _gf setgray
        /_lp /fill ddef
        } if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G                                      % gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
        {
        _os setoverprint
        _gs setgray
        /_lp /stroke ddef
        } if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k                                      % cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
        {
        _of setoverprint
        _cf aload pop setcmykcolor
        /_lp /fill ddef
        } if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K                                      % cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
        {
        _os setoverprint
        _cs aload pop setcmykcolor
        /_lp /stroke ddef
        } if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x                                      % cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
        {
        _of setoverprint
        _if _gf 1 exch sub setcustomcolor
        /_lp /fill ddef
        } if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X                                      % cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
        {
        _os setoverprint
        _is _gs 1 exch sub setcustomcolor
        /_lp /stroke ddef
        } if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A                                      % value A -
{
pop
} def
currentdict readonly pop end
setpacking

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
]/_Helvetica/Helvetica 0 Z
0 A
u
0 O
0 g
0 R
0 G
1 i 2 J 0 j 1 w 10 M []0 d
366.75 97.75 m
367.5 61.75 L
S
1 g
0 J
340.125 91.75 m
394.125 91.75 L
399.714 91.75 404.25 87.214 404.25 81.625 C
404.25 81.625 L
404.25 76.036 399.714 71.5 394.125 71.5 C
340.125 71.5 L
334.536 71.5 330 76.036 330 81.625 C
330 81.625 L
330 87.214 334.536 91.75 340.125 91.75 C
b
6 152.5 m
114 152.5 L
114 44.5 L
6 44.5 L
6 152.5 L
b
195 152.5 m
303 152.5 L
303 44.5 L
195 44.5 L
195 152.5 L
b
0 g
1 J 1 j 0.24 w
/_Helvetica 12 14 0 0 z
[0.75 0 0 0.75 128.25 123.25]e
10 (PostScript)t
T
[0.75 0 0 0.75 128.25 69.25]e
13 (Data & Events)t
T
[0.75 0 0 0.75 348 77.5]e
8 (Keyboard)t
T
u
1 g
0 J 0 j 1 w
354.375 64.75 m
382.875 64.75 L
388.464 64.75 393 60.214 393 54.625 C
393 54.625 L
393 49.036 388.464 44.5 382.875 44.5 C
354.375 44.5 L
348.786 44.5 344.25 49.036 344.25 54.625 C
344.25 54.625 L
344.25 60.214 348.786 64.75 354.375 64.75 C
b
0 g
1 J 1 j 0.24 w
[0.75 0 0 0.75 357 51.25]e
5 (Mouse)t
T
U
u
2 J 0 j
303 55.75 m
310.2 52.15 L
310.2 59.35 L
303 55.75 L
f
1 w
342 55.75 m
308.04 55.75 L
S
U
1 g
0 J
340.125 152.5 m
394.125 152.5 L
399.714 152.5 404.25 147.964 404.25 142.375 C
404.25 108.625 L
404.25 103.036 399.714 98.5 394.125 98.5 C
340.125 98.5 L
334.536 98.5 330 103.036 330 108.625 C
330 142.375 L
330 147.964 334.536 152.5 340.125 152.5 C
b
0 g
1 J 1 j 0.24 w
[0.75 0 0 0.75 351 123.25]e
7 (Display)t
T
u
2 J 0 j
195 64.75 m
187.8 68.35 L
187.8 61.15 L
195 64.75 L
f
114 64.75 m
121.2 61.15 L
121.2 68.35 L
114 64.75 L
f
1 w
119.04 64.75 m
189.96 64.75 L
S
U
u
0.969 g
0 J
222 139 m
289.5 139 L
289.5 91.75 L
222 91.75 L
222 139 L
b
u
232.5 124 m
279 124 L
279 103 L
232.5 103 L
232.5 124 L
f
0 g
1 J 1 j 0.24 w
/_Helvetica 12 14 0 1 z
[0.75 0 0 0.75 255.75 116.5]e
10 (PostScript)t
11 (Interpreter)t
T
U
U
/_Helvetica 12 14 0 0 z
[0.75 0 0 0.75 202.5 143.5]e
6 (Window)t
T
[0.75 0 0 0.75 203.25 79]e
6 (System)t
T
1 g
0 J 0 j 1 w
6 31 m
303 31 L
303 4 L
6 4 L
6 31 L
b
0 g
1 J 1 j 0.24 w
[0.75 0 0 0.75 114.75 15.25]e
16 (Operating System)t
T
2 J 0 j 1 w
60 44.5 m
60 31 L
S
249 44.5 m
249 31 L
S
0.969 g
0 J
53.25 139 m
114 139 L
114 91.75 L
53.25 91.75 L
53.25 139 L
b
u
0 g
2 J
222 118.75 m
214.8 122.35 L
214.8 115.15 L
222 118.75 L
f
114 118.75 m
121.2 115.15 L
121.2 122.35 L
114 118.75 L
f
119.04 118.75 m
216.96 118.75 L
S
U
u
330 118.75 m
322.8 122.35 L
322.8 115.15 L
330 118.75 L
f
289.5 118.75 m
324.96 118.75 L
S
U
1 J 1 j 0.24 w
[0.75 0 0 0.75 13.5 143.5]e
11 (Application)t
T
[0.75 0 0 0.75 67.5 116.5]e
6 (Client)t
7 (Library)t
T
[0.75 0 0 0.75 128.25 109.75]e
8 (Language)t
T
u
2 J 0 j
303.75 80.5 m
310.95 76.9 L
310.95 84.1 L
303.75 80.5 L
f
1 w
330.75 80.5 m
308.79 80.5 L
S
U
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec

 PE 43197 50 4500 38567 UL
12 /Helvetica AF
11692 42235 MT
(3 APPLICATION)
491 W( BUILDING BLOCKS)SH
11 /Times-Roman AF
18891 44786 MT
(Most of your application will be written in C or)
155 W( another high-)156 W
18899 46083 MT
(level languge.)
214 W( You'll call Client Library procedures to start a)213 W
18899 47380 MT
(PostScript execution)
311 W( context, send programs and data to the)312 W
18899 48677 MT
(PostScript interpreter, and get results from the)
217 W( the interpreter.)216 W
18899 49974 MT
(The Client Library is the)
148 W( application's primary interface to the)149 W
18899 51271 MT
(Display PostScript system.)SH
18891 53466 MT
(In addition, you'll call)23 W
/Times-Italic SF
29096 XM
(wraps)SH
/Times-Roman SF
32235 XM
(\320 PostScript)
174 W( language)
23 W( procedures)22 W
18899 54763 MT
(developed specifically for your)
313 W( application. Wraps, short for)314 W
/Times-Italic SF
18899 56060 MT
(wrapped procedures)130 W
/Times-Roman SF
(, are created by the)129 W
/Times-Italic SF
37357 XM
(pswrap)SH
/Times-Roman SF
41001 XM
(translator from)129 W
18899 57357 MT
(PostScript language programs written to meet application needs.)64 W
18899 58654 MT
(Figure 2 on page 3 shows how an application program is built.)SH
10 /Helvetica AF
4500 63450 MT
(2)SH
8 SS 
7456 XM
(Perspective for Software Developers / Version of July 29, 1991)SH
ES
%%Page: 3 5 
BS
0 SI
12 /Helvetica AF
12592 6275 MT
(4 USING)491 W
/Helvetica-Oblique SF
18318 XM
(PSWRAP)SH
11 /Times-Roman AF
19791 8826 MT
(Your application will perform calculations, communicate)
224 W( with)223 W
19799 10123 MT
(the window system, read and write files,)
8 W( and do other application)9 W
19799 11420 MT
(processing in C or another high-level)
132 W( language. It will perform)131 W
19799 12717 MT
(imaging tasks by calling wrapped)
86 W( procedures to send PostScript)87 W
19799 14014 MT
(language programs to the interpreter. The)370 W
/Times-Italic SF
40558 XM
(pswrap)SH
/Times-Roman SF
44443 XM
(translator)SH
19799 15311 MT
(creates these wraps from PostScript language input.)SH
19791 17506 MT
(Figure 2 shows how an application is built of C source)
48 W( code and)49 W
19799 18803 MT
(PostScript language code translated into)
208 W( C-callable procedures)207 W
19799 20100 MT
(by)SH
/Times-Italic SF
21174 XM
(pswrap)SH
/Times-Roman SF
(.)SH
10 /Helvetica-Bold AF
5400 22025 MT
(Figure 2)SH
/Helvetica-Oblique SF
9652 XM
(Creating a Display PostScript Application)SH
43197 50 5400 23934 UL
1 SS 
28800 5400 52775 PB %!
% packedarray Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
userdict /Adobe_packedarray 5 dict dup begin put
/initialize                     % - initialize -
{
/packedarray where
        {
        pop
        }
        {
        Adobe_packedarray begin
        Adobe_packedarray
                {
                dup xcheck
                        {
                        bind
                        } if
                userdict 3 1 roll put
                } forall
        end
        } ifelse
} def
/terminate                      % - terminate -
{
} def
/packedarray            % arguments count packedarray array
{
array astore readonly
} def
/setpacking                     % boolean setpacking -
{
pop
} def
/currentpacking         % - setpacking boolean
{
false
} def
currentdict readonly pop end
Adobe_packedarray /initialize get exec
% cmykcolor Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize                     % - initialize -
{
/setcmykcolor where
        {
        pop
        }
        {
        userdict /Adobe_cmykcolor_vars 2 dict dup begin put
        /_setrgbcolor
                /setrgbcolor load def
        /_currentrgbcolor
                /currentrgbcolor load def
        Adobe_cmykcolor begin
        Adobe_cmykcolor
                {
                dup xcheck
                        {
                        bind
                        } if
                pop pop
                } forall
        end
        end
        Adobe_cmykcolor begin
        } ifelse
} def
/terminate                      % - terminate -
{
currentdict Adobe_cmykcolor eq
        {
        end
        } if
} def
/setcmykcolor           % cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
        {
        3 index add neg dup 0 lt
                {
                pop 0
                } if
        3 1 roll
        } repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor       % - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
        {
        1 sub neg 3 1 roll
        } repeat
0
} def
currentdict readonly pop end
setpacking
% cshow Operator
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize                     % - initialize -
{
/cshow where
        {
        pop
        }
        {
        userdict /Adobe_cshow_vars 1 dict dup begin put
        /_cshow         % - _cshow proc
                {} def
        Adobe_cshow begin
        Adobe_cshow
                {
                dup xcheck
                        {
                        bind
                        } if
                userdict 3 1 roll put
                } forall
        end
        end
        } ifelse
} def
/terminate                      % - terminate -
{
} def
/cshow                          % string proc cshow -
{
Adobe_cshow_vars
        exch /_cshow
        exch put
        {
        0 0 Adobe_cshow_vars /_cshow get exec
        } forall
} def
currentdict readonly pop end
setpacking
% Custom Color Operators
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize                     % - initialize -
{
/setcustomcolor where
        {
        pop
        }
        {
        Adobe_customcolor begin
        Adobe_customcolor
                {
                dup xcheck
                        {
                        bind
                        } if
                pop pop
                } forall
        end
        Adobe_customcolor begin
        } ifelse
} def
/terminate                      % - terminate -
{
currentdict Adobe_customcolor eq
        {
        end
        } if
} def
/findcmykcustomcolor    % cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor         % object tint setcustomcolor -
{
exch
aload pop pop
4
        {
        4 index mul 4 1 roll
        } repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint           % boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
% Adobe Illustrator (TM) Prolog
% Version 1.0 5/9/1988
% Copyright (C) 1987, 1988
% Adobe Systems Incorporated
% All Rights Reserved
currentpacking true setpacking
userdict /Adobe_Illustrator881 72 dict dup begin put
% initialization
/initialize                             % - initialize -
{
userdict /Adobe_Illustrator881_vars 29 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
% text operands
/_a null def
/_as null def
/_tt 2 array def
/_tl 2 array def
/_tm matrix def
/t {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_Illustrator881 begin
Adobe_Illustrator881
        {
        dup xcheck
                {
                bind
                } if
        pop pop
        } forall
end
end
Adobe_Illustrator881 begin
Adobe_Illustrator881_vars begin
newpath
} def
/terminate                              % - terminate -
{
end
end
} def
% definition operators
/_                                      % - _ null
null def
/ddef                           % key value ddef -
{
Adobe_Illustrator881_vars 3 1 roll put
} def
/xput                           % key value literal xput -
{
dup load dup length exch maxlength eq
        {
        dup dup load dup
        length 2 mul dict copy def
        } if
load begin def end
} def
/npop                           % integer npop -
{
        {
        pop
        } repeat
} def
% marking operators
/sw                                     % ax ay length string sw x y
{
stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/ss                                     % ax ay length string matrix ss -
{
3 -1 roll pop
4 1 roll
        {
        2 npop (0) exch
        2 copy 0 exch put pop
        gsave
        false charpath
        currentpoint
        4 index setmatrix
        stroke
        grestore
        moveto
        2 copy rmoveto
        } cshow
3 npop
} def
% path operators
/sp                                     % ax ay length string sp -
{
exch pop
        {
        2 npop (0) exch
        2 copy 0 exch put pop
        false charpath
        2 copy rmoveto
        } cshow
2 npop
} def
% path construction operators
/pl                                     % x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{
pop true setstrokeadjust
/c                              % x1 y1 x2 y2 x3 y3 c -
{
curveto
} def
/C
/c load def
/v                              % x2 y2 x3 y3 v -
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y                              % x1 y1 x2 y2 y -
{
2 copy curveto
} def
/Y
/y load def
/l                              % x y l -
{
lineto
} def
/L
/l load def
/m                              % x y m -
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
% graphic state operators
/d                                      % array phase d -
{
setdash
} def
/cf                                     % - cf flatness
currentflat def
/i                                      % flatness i -
{
dup 0 eq
        {
        pop cf
        } if
setflat
} def
/j                                      % linejoin j -
{
setlinejoin
} def
/J                                      % linecap J -
{
setlinecap
} def
/M                                      % miterlimit M -
{
setmiterlimit
} def
/w                                      % linewidth w -
{
setlinewidth
} def
% path painting operators
/H                                      % - H -
{} def
/h                                      % - h -
{
closepath
} def
/N                                      % - N -
{
newpath
} def
/n                                      % - n -
/N load def
/F                                      % - F -
{
_pf
} def
/f                                      % - f -
{
closepath
F
} def
/S                                      % - S -
{
_ps
} def
/s                                      % - s -
{
closepath
S
} def
/B                                      % - B -
{
gsave F grestore
S
} def
/b                                      % - b -
{
closepath
B
} def
/W                                      % - W -
{
clip
} def
% text painting operators
/ta                                     % length string ta ax ay length string
{
_as moveto
_tt aload pop 4 -2 roll
} def
/tl                                     % - tl -
{
_tl aload pop translate
} def
/as                                     % - as array
{
{
0 0
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg 2 div exch neg 2 div
}
{
2 copy _tt aload pop 4 -2 roll sw
exch neg exch neg
}
{
0 0
}
} cvlit def
/z                                      % literal size leading tracking align z -
{
/_a exch ddef
/_as as _a get ddef
_a 2 le
        {
        0 _tt astore pop
        0 exch neg _tl astore pop
        }
        {
        0 exch neg _tt astore pop
        neg 0 _tl astore pop
        } ifelse
exch findfont exch scalefont setfont
} def
/tm                                     % matrix tm -
{
_tm currentmatrix pop
concat
} def
/I                                      % matrix I -
{
tm
/t
        {
        ta sp
        tl
        } ddef
} def
/o                                      % matrix o -
{
tm
/t
        {
        ta 4 npop
        tl
        newpath
        } ddef
} def
/e                                      % matrix e -
{
tm
/t
        {
        ta _psf
        tl
        newpath
        } ddef
} def
/r                                      % matrix r -
{
tm
/t
        {
        ta _tm _pss
        tl
        newpath
        } ddef
} def
/a                                      % matrix a -
{
tm
/t
        {
        2 copy
        ta _psf
        newpath
        ta _tm _pss
        tl
        newpath
        } ddef
} def
/T                                      % - T -
{
_tm setmatrix
} def
% font operators
/Z                                      % array literal literal direction Z -
{
pop
findfont begin
currentdict dup length 1 add dict begin
        {
        1 index /FID ne
                {
                def
                }
                {
                2 npop
                } ifelse
        } forall
/FontName exch def dup length 0 ne
        {
        /Encoding Encoding 256 array copy def
        0 exch
                {
                dup type /nametype eq
                        {
                        Encoding 2 index 2 index put pop
                        1 add
                        }
                        {
                        exch pop
                        } ifelse
                } forall
        } if pop
currentdict dup end end
/FontName get exch definefont pop
} def
% group operators
/u                                      % - u -
{} def
/U                                      % - U -
{} def
/q                                      % - q -
{
gsave
} def
/Q                                      % - Q -
{
grestore
} def
% place operators
/`                                      % matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~                                      % - ~ -
{
end
_i restore
} def
% color operators
/O                                      % flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R                                      % flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g                                      % gray g -
{
/_gf exch ddef
/_fc
{
_lp /fill ne
        {
        _of setoverprint
        _gf setgray
        /_lp /fill ddef
        } if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/G                                      % gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
        {
        _os setoverprint
        _gs setgray
        /_lp /stroke ddef
        } if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/k                                      % cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
        {
        _of setoverprint
        _cf aload pop setcmykcolor
        /_lp /fill ddef
        } if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/K                                      % cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
        {
        _os setoverprint
        _cs aload pop setcmykcolor
        /_lp /stroke ddef
        } if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
/x                                      % cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
        {
        _of setoverprint
        _if _gf 1 exch sub setcustomcolor
        /_lp /fill ddef
        } if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
exch pop
ashow
} ddef
/_lp /none ddef
} def
/X                                      % cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
        {
        _os setoverprint
        _is _gs 1 exch sub setcustomcolor
        /_lp /stroke ddef
        } if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_lp /none ddef
} def
% locked object operators
/A                                      % value A -
{
pop
} def
currentdict readonly pop end
setpacking

Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_Illustrator881 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
]/_Helvetica/Helvetica 0 Z
0 A
u
u
0 O
0 g
0 R
0 G
1 i 2 J 0 j 0.7 w 10 M []0 d
87.8189 180.1992 m
90.8789 186.3193 L
84.7589 186.3193 L
87.8189 180.1992 L
f
1 w
87.8189 243.3122 m
87.8189 184.4833 L
S
U
208.3073 162.9866 m
208.3073 36.7607 L
S
u
1 g
0 J
62 271.9999 m
125.1129 271.9999 L
129.8636 271.9999 133.7193 268.1443 133.7193 263.3936 C
133.7193 251.9185 L
133.7193 247.1678 129.8636 243.3122 125.1129 243.3122 C
62 243.3122 L
57.2493 243.3122 53.3937 247.1678 53.3937 251.9185 C
53.3937 263.3936 L
53.3937 268.1443 57.2493 271.9999 62 271.9999 C
b
0 g
1 J 1 j 0.24 w
/_Helvetica 12 14 0 1 z
[0.6375 0 0 0.6375 91.644 259.8873]e
4 (Wrap)t
11 (Definitions)t
T
U
u
1 g
0 J 0 j 1 w
64.8688 232.4746 m
116.5066 232.4746 L
116.5066 203.7869 L
64.8688 203.7869 L
64.8688 232.4746 L
b
0 g
1 J 1 j 0.24 w
[0.6375 0 0 0.6375 91.0065 220.9995]e
6 (pswrap)t
10 (Translator)t
T
U
u
1 g
0 J 0 j 1 w
62 191.6743 m
125.1129 191.6743 L
129.8636 191.6743 133.7193 187.8187 133.7193 183.068 C
133.7193 171.5929 L
133.7193 166.8422 129.8636 162.9866 125.1129 162.9866 C
62 162.9866 L
57.2493 162.9866 53.3937 166.8422 53.3937 171.5929 C
53.3937 183.068 L
53.3937 187.8187 57.2493 191.6743 62 191.6743 C
b
0 g
1 J 1 j 0.24 w
[0.6375 0 0 0.6375 90.369 179.5617]e
10 (C-Callable)t
4 (Wrap)t
T
U
u
1 g
0 J 0 j 1 w
176.7508 191.6743 m
239.8638 191.6743 L
244.6144 191.6743 248.4701 187.8187 248.4701 183.068 C
248.4701 171.5929 L
248.4701 166.8422 244.6144 162.9866 239.8638 162.9866 C
176.7508 162.9866 L
172.0001 162.9866 168.1445 166.8422 168.1445 171.5929 C
168.1445 183.068 L
168.1445 187.8187 172.0001 191.6743 176.7508 191.6743 C
b
0 g
1 J 1 j 0.24 w
[0.6375 0 0 0.6375 208.9448 177.0117]e
11 (Application)t
13 (C Source Code)t
T
U
u
1 g
0 J 0 j 1 w
185.3571 151.5115 m
236.995 151.5115 L
236.995 122.8238 L
185.3571 122.8238 L
185.3571 151.5115 L
b
0 g
1 J 1 j 0.24 w
[0.6375 0 0 0.6375 210.2198 134.9364]e
7 (COMPILE)t
T
U
u
1 g
0 J 0 j 1 w
176.7508 111.3487 m
239.8638 111.3487 L
244.6144 111.3487 248.4701 107.4931 248.4701 102.7424 C
248.4701 91.2673 L
248.4701 86.5166 244.6144 82.661 239.8638 82.661 C
176.7508 82.661 L
172.0001 82.661 168.1445 86.5166 168.1445 91.2673 C
168.1445 102.7424 L
168.1445 107.4931 172.0001 111.3487 176.7508 111.3487 C
b
0 g
1 J 1 j 0.24 w
[0.6375 0 0 0.6375 208.3073 97.9611]e
11 (Application)t
11 (Object Code)t
T
U
u
1 g
0 J 0 j 1 w
184.7196 71.8235 m
236.3575 71.8235 L
236.3575 43.1357 L
184.7196 43.1357 L
184.7196 71.8235 L
b
0 g
1 J 1 j 0.24 w
[0.6375 0 0 0.6375 207.6698 52.6983]e
4 (LINK)t
T
U
u
1 g
0 J 0 j 1 w
178.0258 31.6607 m
241.1388 31.6607 L
245.8894 31.6607 249.7451 27.805 249.7451 23.0543 C
249.7451 11.5793 L
249.7451 6.8286 245.8894 2.973 241.1388 2.973 C
178.0258 2.973 L
173.2751 2.973 169.4195 6.8286 169.4195 11.5793 C
169.4195 23.0543 L
169.4195 27.805 173.2751 31.6607 178.0258 31.6607 C
b
0 g
1 J 1 j 0.24 w
[0.6375 0 0 0.6375 210.2198 14.448]e
11 (Application)t
T
U
u
1 g
0 J 0 j 1 w
62 111.9862 m
125.1129 111.9862 L
129.8636 111.9862 133.7193 108.1306 133.7193 103.3799 C
133.7193 91.9048 L
133.7193 87.1542 129.8636 83.2985 125.1129 83.2985 C
62 83.2985 L
57.2493 83.2985 53.3937 87.1542 53.3937 91.9048 C
53.3937 103.3799 L
53.3937 108.1306 57.2493 111.9862 62 111.9862 C
b
0 g
1 J 1 j 0.24 w
[0.6375 0 0 0.6375 93.5565 98.5986]e
18 (Display PostScript)t
14 (Client Library)t
T
U
u
2 J 0 j
87.8189 231.8371 m
90.8789 237.9571 L
84.7589 237.9571 L
87.8189 231.8371 L
f
1 w
87.8189 243.3122 m
87.8189 236.1211 L
S
U
u
208.3073 31.0232 m
211.3673 37.1432 L
205.2473 37.1432 L
208.3073 31.0232 L
f
208.3073 42.4982 m
208.3073 35.3072 L
S
U
u
208.3073 71.1859 m
211.3673 77.306 L
205.2473 77.306 L
208.3073 71.1859 L
f
208.3073 82.661 m
208.3073 75.47 L
S
U
u
208.3073 111.3487 m
211.3673 117.4688 L
205.2473 117.4688 L
208.3073 111.3487 L
f
208.3073 122.8238 m
208.3073 115.6328 L
S
U
u
208.3073 151.5115 m
211.3673 157.6316 L
205.2473 157.6316 L
208.3073 151.5115 L
f
208.3073 162.9866 m
208.3073 155.7955 L
S
U
u
87.8189 191.6743 m
90.8789 197.7944 L
84.7589 197.7944 L
87.8189 191.6743 L
f
87.8189 203.1494 m
87.8189 195.9583 L
S
U
u
185.3571 71.1859 m
181.0068 76.4679 L
178.5214 70.8757 L
185.3571 71.1859 L
f
133.7193 94.1361 m
181.442 72.9259 L
S
U
u
185.3571 151.5115 m
181.0068 156.7935 L
178.5214 151.2013 L
185.3571 151.5115 L
f
133.7193 174.4617 m
181.442 153.2515 L
S
U
U
Adobe_Illustrator881 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec

 PE 43197 50 5400 55530 UL
8 /Helvetica AF
38354 63450 MT
(4 USING)327 W
/Helvetica-Oblique SF
42172 XM
(PSWRAP)SH
10 /Helvetica AF
48041 XM
(3)SH
ES
%%Page: 4 6 
BS
0 SI
11 /Times-Roman AF
18891 6155 MT
(Consider a wrap,)41 W
/Times-Italic SF
26772 XM
(PSWDisplayText)SH
/Times-Roman SF
(, that places text on the screen)41 W
18899 7452 MT
(at a particular)21 W
/Times-Italic SF
25283 XM
(x,y)SH
/Times-Roman SF
26830 XM
(coordinate. A call to)21 W
/Times-Italic SF
36169 XM
(PSWDisplayText)SH
/Times-Roman SF
43919 XM
(from the)21 W
18899 8749 MT
(application program might look something like this:)SH
9 /Helvetica AF
20051 10702 MT
(PSWDisplayText\05072.0, 100.0, "Hello World"\051;)SH
11 /Times-Roman AF
18891 12897 MT
(The body of the)122 W
/Times-Italic SF
26649 XM
(PSWDisplayText)SH
/Times-Roman SF
34500 XM
(procedure, is actually written)123 W
18899 14194 MT
(in the PostScript language. It was defined to)SH
/Times-Italic SF
38604 XM
(pswrap)SH
/Times-Roman SF
42119 XM
(as follows:)SH
9 /Helvetica AF
20051 16147 MT
(defineps PSWDisplayText\050float X,Y; char *text\051)SH
21203 17245 MT
(X Y moveto)SH
21203 18343 MT
(\050text\051 show)SH
20051 19441 MT
(endps)SH
11 /Times-Roman AF
18891 21636 MT
(In the wrap definition, the `)82 W
10 /Helvetica AF
(defineps)SH
11 /Times-Roman AF
(' and `)82 W
10 /Helvetica AF
(endps)SH
11 /Times-Roman AF
(' keywords tell)82 W
/Times-Italic SF
18899 22933 MT
(pswrap)SH
/Times-Roman SF
22546 XM
(where a given PostScript)
132 W( language program begins and)133 W
18899 24230 MT
(ends. The `)197 W
10 /Helvetica AF
(defineps)SH
11 /Times-Roman AF
(' statement defines the resulting)
197 W( procedure)196 W
18899 25527 MT
(call. The)23 W
/Times-Italic SF
23068 XM
(pswrap)SH
/Times-Roman SF
26606 XM
(translator processes this)
23 W( input and produces a C)24 W
18899 26824 MT
(language source-code)
153 W( file. When compiled and linked with the)152 W
18899 28121 MT
(application, the)222 W
/Times-Italic SF
26400 XM
(PSWDisplayText)SH
/Times-Roman SF
34351 XM
(procedure sends a PostScript)223 W
18899 29418 MT
(language program to)
20 W( the interpreter \050binary-encoded for more ef-)19 W
18899 30715 MT
(ficient processing\051, causing the specified text to be displayed.)SH
18891 32910 MT
(To summarize,)144 W
/Times-Italic SF
26053 XM
(pswrap)SH
/Times-Roman SF
29713 XM
(takes a PostScript language program as)145 W
18899 34207 MT
(input and)
42 W( gives you back a C language program. After you com-)41 W
18899 35504 MT
(pile the resulting C program and link it into your)
194 W( application,)195 W
18899 36801 MT
(calling the)
183 W( wrap will transmit a stream of PostScript language)182 W
18899 38098 MT
(binary objects to the interpreter. See the)381 W
/Times-Italic SF
39404 XM
(pswrap Reference)382 W
18899 39395 MT
(Manual)SH
/Times-Roman SF
22596 XM
(for further information.)SH
12 /Helvetica AF
11692 43263 MT
(5 THE)
491 W( CLIENT LIBRARY INTERFACE)SH
11 /Times-Roman AF
18891 45814 MT
(The Client Library)
10 W( is a linkable library of compiled C procedures)9 W
18899 47111 MT
(that provides an interface between the application and the)
142 W( Dis-)143 W
18899 48408 MT
(play PostScript system. It)
175 W( creates an environment for handling)174 W
18899 49705 MT
(imaging calls to)
644 W( specific Client Library procedures like)645 W
/Times-Italic SF
18899 51002 MT
(DPSmoveto)SH
/Times-Roman SF
24366 XM
(and custom wraps written for the application.)SH
18891 53197 MT
(The Client Library is tailored)
122 W( by the Display PostScript system)121 W
18899 54494 MT
(vendor for your particular operating environment. The)274 W
/Times-Italic SF
45007 XM
(Client)SH
18899 55791 MT
(Library Reference)
245 W( Manual)244 W
/Times-Roman SF
31637 XM
(describes a generic interface; your)244 W
18899 57088 MT
(system vendor may add additional features or)
12 W( slightly modify the)13 W
18899 58385 MT
(interface to suit your hardware and)
92 W( software. See your vendor's)91 W
18899 59682 MT
(system-specific documentation for details.)SH
10 /Helvetica AF
4500 63450 MT
(4)SH
8 SS 
7456 XM
(Perspective for Software Developers / Version of July 29, 1991)SH
ES
%%Page: 5 7 
BS
0 SI
12 /Helvetica AF
12592 6275 MT
(6 SUPPORT)
491 W( FOR APPLICATION DEVELOPERS)SH
11 /Times-Roman AF
19791 8826 MT
(Adobe System Incorporated)
147 W( supports application developers by)148 W
19799 10123 MT
(means of the following services:)SH
/Times-Italic SF
19799 12272 MT
(Adobe Developer Support Line)SH
/Times-Roman SF
26998 13469 MT
(A voice mailbox that puts you)
278 W( in touch with)279 W
26998 14666 MT
(Adobe's support services)
350 W( for developers. See)349 W
26998 15863 MT
(Section 6.1.)SH
/Times-Italic SF
19799 17659 MT
(Technical Literature Catalog)SH
/Times-Roman SF
26998 18856 MT
(A free catalog)
246 W( of documentation, available on)245 W
26998 20053 MT
(request.)SH
/Times-Italic SF
19799 21849 MT
(Documentation)SH
/Times-Roman SF
26998 23046 MT
(PostScript language manuals \050see)
196 W( Section 6.2\051,)195 W
26998 24243 MT
(developer reference)
86 W( manuals \050included with this)87 W
26998 25440 MT
(release\051, and additional)
720 W( technical literature)719 W
26998 26637 MT
(defining conventions and standards)
1123 W( for)1124 W
26998 27834 MT
(PostScript language applications \050see)
405 W( Section)404 W
26998 29031 MT
(6.5\051.)SH
/Times-Italic SF
19799 30827 MT
(Adobe Developers Association)SH
/Times-Roman SF
26998 32024 MT
(A membership program)
142 W( for developers, provid-)141 W
26998 33221 MT
(ing access to technical resources and)
250 W( monthly)251 W
26998 34418 MT
(mailings. See Section 6.4.)SH
/Times-Italic SF
19799 36214 MT
(Public Access File Server)SH
/Times-Roman SF
26998 37411 MT
(Contains technical)
267 W( documents, code examples,)268 W
26998 38608 MT
(AFM files, and documentation)
16 W( updates. See Sec-)15 W
26998 39805 MT
(tion 6.6.)SH
/Helvetica SF
17069 43002 MT
(6.1)SH
19799 XM
(THE ADOBE DEVELOPER SUPPORT LINE)SH
/Times-Roman SF
19791 45197 MT
(You can call the)
1034 W( Adobe Developer Support Line,)1035 W
19799 46494 MT
(\050415\051 961-4111, for the following kinds of support:)SH
8 /Helvetica AF
27568 63450 MT
(6 SUPPORT)
327 W( FOR APPLICATION DEVELOPERS)SH
10 SS 
48041 XM
(5)SH
ES
%%Page: 6 8 
BS
0 SI
11 /Symbol AF
20518 6280 MT
(\267)SH
/Times-Roman SF
21299 XM
(To receive a free Technical Literature Catalog.)SH
/Symbol SF
20518 8076 MT
(\267)SH
/Times-Roman SF
21299 XM
(To order technical literature.  \050See)
195 W( Section 6.2 for infor-)194 W
21299 9273 MT
(mation on ordering PostScript language manuals.\051)SH
/Symbol SF
20518 11069 MT
(\267)SH
/Times-Roman SF
21299 XM
(To find out how to become a)
379 W( member of the Adobe)380 W
21299 12266 MT
(Developers Association.)SH
/Symbol SF
20518 14062 MT
(\267)SH
/Times-Roman SF
21299 XM
(To request technical assistance \050for members of the Adobe)70 W
21299 15259 MT
(Developers Association only\051.)SH
18891 17454 MT
(If you)
127 W( prefer, you can write to us for information. Our mailing)128 W
18899 18751 MT
(address is:)SH
9 /Helvetica AF
23507 20704 MT
(PostScript Developer Support)SH
23507 21802 MT
(Adobe Systems Incorporated)SH
23507 22900 MT
(1585 Charleston Road, P.O. Box 7900)SH
23507 23998 MT
(Mountain View, CA 94039-7900)SH
11 SS 
16169 27195 MT
(6.2)SH
18899 XM
(MANUALS FOR APPLICATION DEVELOPERS)SH
/Times-Roman SF
18891 29390 MT
(The accompanying set)
124 W( of developer reference manuals contains)123 W
18899 30687 MT
(information needed)
103 W( by a programmer developing an application)104 W
18899 31984 MT
(for the Display PostScript system. If you're new)
532 W( to the)531 W
18899 33281 MT
(PostScript language, you should)
36 W( first read the following manuals)37 W
18899 34578 MT
(\050published by Addison-Wesley and available from Adobe)564 W
18899 35875 MT
(Systems Incorporated or through your technical bookstore\051:)SH
/Times-Italic SF
18899 38024 MT
(PostScript Language Reference Manual)SH
/Times-Roman SF
26098 39221 MT
(The standard reference for the PostScript)
261 W( lan-)260 W
26098 40418 MT
(guage. Describes the)
152 W( PostScript imaging model)153 W
26098 41615 MT
(and the concepts and facilities of the)
105 W( PostScript)104 W
26098 42812 MT
(interpreter. Documents the PostScript)
130 W( language.)131 W
26098 44009 MT
(Required reading.)SH
/Times-Italic SF
18899 45805 MT
(PostScript Language Tutorial and Cookbook)SH
/Times-Roman SF
26098 47002 MT
(Introduction to)
60 W( the PostScript language in an in-)61 W
26098 48199 MT
(formal, interactive style. Contains)
16 W( a collection of)15 W
26098 49396 MT
(example programs that illustrate the)
195 W( PostScript)196 W
26098 50593 MT
(imaging model.)SH
/Times-Italic SF
18899 52389 MT
(PostScript Language Program Design)SH
/Times-Roman SF
26098 53586 MT
(Guidelines for the advanced developer to use in)88 W
26098 54783 MT
(designing and debugging PostScript)
374 W( language)373 W
26098 55980 MT
(programs. Printer-oriented,)
208 W( but most of the in-)209 W
26098 57177 MT
(formation is)
566 W( relevant to writing a Display)565 W
26098 58374 MT
(PostScript application.)SH
10 /Helvetica AF
4500 63450 MT
(6)SH
8 SS 
7456 XM
(Perspective for Software Developers / Version of July 29, 1991)SH
ES
%%Page: 7 9 
BS
0 SI
11 /Times-Roman AF
19791 6155 MT
(Once you're up to speed in the PostScript language, read)
220 W( the)221 W
19799 7452 MT
(following manuals:)SH
/Times-Italic SF
19799 9601 MT
(PostScript Language Extensions for the)
461 W( Display PostScript)460 W
26998 10798 MT
(System)SH
/Times-Roman SF
26998 11995 MT
(Describes the extensions to)
199 W( the PostScript lan-)198 W
26998 13192 MT
(guage that were made for the Display PostScript)44 W
26998 14389 MT
(system, such as alternative PostScript language)165 W
26998 15586 MT
(encodings, multiple)
511 W( execution contexts, user)512 W
26998 16783 MT
(paths, window system support,)
440 W( and memory)439 W
26998 17980 MT
(management. Introduces important)
168 W( system con-)169 W
26998 19177 MT
(cepts and)
741 W( documents additional PostScript)740 W
26998 20374 MT
(operators.)SH
/Times-Italic SF
19799 22170 MT
(Client Library Reference Manual)SH
/Times-Roman SF
26998 23367 MT
(Describes the procedural interface)
17 W( to the Display)16 W
26998 24564 MT
(PostScript system. Tells how to)
162 W( send programs)163 W
26998 25761 MT
(and data to a)
101 W( PostScript execution context, how)100 W
26998 26958 MT
(to handle context)
99 W( output, how to create and ter-)100 W
26998 28155 MT
(minate a context. Contains procedure)
398 W( defini-)397 W
26998 29352 MT
(tions, programming)
157 W( tips, and a sample applica-)158 W
26998 30549 MT
(tion program.)SH
/Times-Italic SF
19799 32345 MT
(pswrap Reference Manual)SH
/Times-Roman SF
26998 33542 MT
(Describes how to define C-callable)
209 W( procedures)210 W
26998 34739 MT
(that contain PostScript language)
43 W( programs. Tells)42 W
26998 35936 MT
(how to declare input arguments and output to)
42 W( be)43 W
26998 37133 MT
(received from the interpreter. Documents)
362 W( the)361 W
/Times-Italic SF
26998 38330 MT
(pswrap)SH
/Times-Roman SF
30513 XM
(command line options.)SH
/Times-Italic SF
19799 40126 MT
(PostScript Language Color Extensions)SH
/Times-Roman SF
26998 41323 MT
(Describes color extensions to the PostScript)
46 W( lan-)45 W
26998 42520 MT
(guage, including multiple)
317 W( color images, color)318 W
26998 43717 MT
(halftone screen definitions, color correction, and)50 W
26998 44914 MT
(CMYK color specification.)SH
19791 47109 MT
(Because the Display PostScript system has been)
26 W( implemented on)27 W
19799 48406 MT
(various system)
160 W( platforms, some of the information required by)159 W
19799 49703 MT
(application programmers)
200 W( is necessarily system-specific. There-)201 W
19799 51000 MT
(fore in addition to the manuals listed above)
105 W( you'll need to con-)104 W
19799 52297 MT
(sult the documentation provided by your system software ven-)163 W
19799 53594 MT
(dor. The following system-specific)
223 W( documentation is available)222 W
19799 54891 MT
(from Adobe Systems Incorporated:)SH
8 /Helvetica AF
27568 63450 MT
(6 SUPPORT)
327 W( FOR APPLICATION DEVELOPERS)SH
10 SS 
48041 XM
(7)SH
ES
%%Page: 8 10 
BS
0 SI
11 /Times-Italic AF
18899 6152 MT
(X Window System)
434 W( Programmer's Supplement to the Client)435 W
26098 7349 MT
(Library Reference Manual)SH
/Times-Roman SF
26098 8546 MT
(Describes information about)
183 W( the Client Library)184 W
26098 9743 MT
(interface that)
464 W( is specific to the X Window)463 W
9 /Symbol AF
29338 10704 MT
(\324)SH
11 /Times-Roman AF
26098 11067 MT
(System)SH
30139 XM
(, such as context creation and)
60 W( addition-)61 W
26098 12264 MT
(al error codes.)SH
/Helvetica SF
16169 15461 MT
(6.3)SH
18899 XM
(CLASSES FOR APPLICATION DEVELOPERS)SH
/Times-Roman SF
18891 17656 MT
(Adobe Systems Incorporated offers regularly)
159 W( scheduled classes)158 W
18899 18953 MT
(in:)SH
/Symbol SF
20518 21230 MT
(\267)SH
/Times-Roman SF
21299 XM
(Programming in the PostScript language.)SH
/Symbol SF
20518 23026 MT
(\267)SH
/Times-Roman SF
21299 XM
(The Display PostScript environment.)SH
18891 25221 MT
(These classes are held in our East Coast and West Coast)
SH( facilities)1 W
18899 26518 MT
(and in our European office. Classes in Japan)
64 W( are planned for the)63 W
18899 27815 MT
(future.)SH
/Helvetica SF
16169 31012 MT
(6.4)SH
18899 XM
(THE ADOBE DEVELOPERS ASSOCIATION)SH
/Times-Roman SF
18891 33207 MT
(The Adobe Developers Association is)
166 W( a fee-based membership)167 W
18899 34504 MT
(program for active)
42 W( developers using the PostScript page descrip-)41 W
18899 35801 MT
(tion language or the Display)
100 W( PostScript system to enhance their)101 W
18899 37098 MT
(application products.)SH
18891 39293 MT
(You must be)
65 W( a member of the Adobe Developers Association in)64 W
18899 40590 MT
(order to take advantage of the following offerings:)SH
/Symbol SF
20518 42867 MT
(\267)SH
/Times-Roman SF
21299 XM
(Technical support.)SH
/Symbol SF
20518 44663 MT
(\267)SH
/Times-Roman SF
21299 XM
(Monthly mailings.)SH
/Symbol SF
20518 46459 MT
(\267)SH
/Times-Roman SF
21299 XM
(Discounts on Adobe Systems application products.)SH
/Symbol SF
20518 48255 MT
(\267)SH
/Times-Roman SF
21299 XM
(Free technical literature.)SH
18891 50450 MT
(You can request a membership application by calling)
61 W( the Adobe)62 W
18899 51747 MT
(Developer Support Line.)SH
10 /Helvetica AF
4500 63450 MT
(8)SH
8 SS 
7456 XM
(Perspective for Software Developers / Version of July 29, 1991)SH
ES
%%Page: 9 11 
BS
0 SI
11 /Helvetica AF
17069 6202 MT
(6.5)SH
19799 XM
(POSTSCRIPT STANDARDS AND CONVENTIONS)SH
/Times-Roman SF
19791 8397 MT
(The following documents define)
9 W( important conventions and stan-)8 W
19799 9694 MT
(dards that promote compatibility, efficiency,)
132 W( and quality for all)133 W
19799 10991 MT
(PostScript language applications. These documents are)
60 W( available)59 W
19799 12288 MT
(through the Adobe)
80 W( Developer Support Line or the public access)81 W
19799 13585 MT
(file server.)SH
/Times-Italic SF
19799 15734 MT
(Document Structuring Conventions Specification)SH
/Times-Roman SF
26998 16931 MT
(Replaces Appendix)
330 W( C of the)331 W
/Times-Italic SF
41329 XM
(PostScript Lan-)331 W
26998 18128 MT
(guage Reference Manual)327 W
/Times-Roman SF
39310 XM
(\050Version 1.0)
327 W( of the)326 W
26998 19325 MT
(PostScript language)
1058 W( document structuring)1059 W
26998 20522 MT
(conventions\051. These conventions are important)245 W
26998 21719 MT
(for generating page description files suitable)
77 W( for)78 W
26998 22916 MT
(print spoolers, previewer applications, and post-)86 W
26998 24113 MT
(processors, as well as PostScript printers.)SH
/Times-Italic SF
19799 25909 MT
(Encapsulated PostScript File Format \050EPSF\051)SH
/Times-Roman SF
26998 27106 MT
(Specifies the document format required for)
159 W( ex-)158 W
26998 28303 MT
(change of PostScript language files. This)715 W
26998 29500 MT
(specification suggests a standard for importing)208 W
26998 30697 MT
(PostScript language files in)
323 W( all environments.)324 W
26998 31894 MT
(Applications that)
294 W( support EPSF can exchange)293 W
26998 33091 MT
(graphical output with each other.)SH
/Times-Italic SF
19799 34887 MT
(PostScript Printer Description Files Specification)SH
/Times-Roman SF
26998 36084 MT
(Describes the)
86 W( Adobe Systems PostScript Printer)85 W
26998 37281 MT
(Description \050PPD\051 files and their)
295 W( usage. PPD)296 W
26998 38478 MT
(files are text files in)
29 W( a format that can be read by)28 W
26998 39675 MT
(people and parsed by computers. They)
5 W( are useful)6 W
26998 40872 MT
(for determining)
251 W( and using the special features)250 W
26998 42069 MT
(available on printers with PostScript interpreters.)SH
/Times-Italic SF
19799 43865 MT
(Adobe Font Metric Files Specification)SH
/Times-Roman SF
26998 45062 MT
(Describes the Adobe standard)
222 W( interchange for-)221 W
26998 46259 MT
(mat for communicating font)
134 W( metric information)135 W
26998 47456 MT
(to people and programs.)SH
8 /Helvetica AF
27568 63450 MT
(6 SUPPORT)
327 W( FOR APPLICATION DEVELOPERS)SH
10 SS 
48041 XM
(9)SH
ES
%%Page: 10 12 
BS
0 SI
11 /Helvetica AF
16169 6202 MT
(6.6)SH
18899 XM
(THE PUBLIC ACCESS FILE SERVER)SH
/Times-Roman SF
18891 8397 MT
(If you have access to Internet or UUCP electronic)
59 W( mail, you can)58 W
18899 9694 MT
(use Adobe's public access file)
69 W( server to obtain the following in-)70 W
18899 10991 MT
(formation:)SH
/Symbol SF
20518 13268 MT
(\267)SH
/Times-Roman SF
21299 XM
(Code examples.)SH
/Symbol SF
20518 15064 MT
(\267)SH
/Times-Roman SF
21299 XM
(AFM files.)SH
/Symbol SF
20518 16860 MT
(\267)SH
/Times-Roman SF
21299 XM
(Documentation updates.)SH
/Symbol SF
20518 18656 MT
(\267)SH
/Times-Roman SF
21299 XM
(Conventions and standards documents listed in Section 6.5.)SH
18891 20851 MT
(The public access file server is a mail-response program.)
22 W( That is,)21 W
18899 22148 MT
(you send it a request by electronic mail and)
251 W( it mails back a)252 W
18899 23445 MT
(response. \050The)
80 W( ``Subject:'' line is treated as part of the message)79 W
18899 24742 MT
(by the file server.\051)SH
18891 26937 MT
(To send mail to the file server, use one of the following)
224 W( ad-)225 W
18899 28234 MT
(dresses:)SH
/Times-Italic SF
18899 30383 MT
(Internet)SH
10 /Helvetica AF
26098 XM
(ps-file-server@adobe.com)SH
11 /Times-Italic AF
18899 32179 MT
(UUCP)SH
10 /Helvetica AF
26098 XM
(...!decwrl!adobe!ps-file-server)SH
11 /Times-Roman AF
18891 34374 MT
(To receive a quick summary of)
117 W( file server commands, send the)116 W
18899 35671 MT
(following message:)SH
9 /Helvetica AF
21203 37624 MT
(help)SH
11 /Times-Roman AF
18891 39819 MT
(To receive detailed information)
189 W( on how to use the file server,)190 W
18899 41116 MT
(send the following message:)SH
9 /Helvetica AF
21203 43069 MT
(send Documents long.help)SH
10 SS 
4500 63450 MT
(10)SH
8 SS 
8012 XM
(Perspective for Software Developers / Version of July 29, 1991)SH
ES
%%Page: 11 13 
BS
0 SI
12 /Helvetica AF
12592 6275 MT
(A CHANGES)
491 W( SINCE LAST PUBLICATION OF THIS DOCUMENT)SH
11 /Times-Roman AF
19791 8826 MT
(The changes to)211 W
/Times-Italic SF
27356 XM
(Perspective for Software Developers)210 W
/Times-Roman SF
44630 XM
(from the)210 W
19799 10123 MT
(document dated January)
216 W( 23, 1990, are noted in the paragraph)217 W
19799 11420 MT
(below.)SH
19791 13615 MT
(Several obsolete telephone numbers have been removed.)SH
19791 15810 MT
(The changes to)211 W
/Times-Italic SF
27356 XM
(Perspective for Software Developers)210 W
/Times-Roman SF
44630 XM
(from the)210 W
19799 17107 MT
(document dated October 25,)
155 W( 1989, are noted in the paragraphs)156 W
19799 18404 MT
(below.)SH
19791 20599 MT
(A section has been)
103 W( added to describe support services available)102 W
19799 21896 MT
(from Adobe)
194 W( Systems, including the Adobe Developer Support)195 W
19799 23193 MT
(Line, the Technical Literature Catalog, the Adobe)
19 W( Developer As-)18 W
19799 24490 MT
(sociation, and the public access file server.)SH
19791 26685 MT
(The changes to)210 W
/Times-Italic SF
27354 XM
(Perspective for Software Developers)210 W
/Times-Roman SF
44629 XM
(from the)211 W
19799 27982 MT
(document dated October 10, 1988, are noted)
156 W( in the paragraphs)155 W
19799 29279 MT
(below.)SH
19791 31474 MT
(The manual has been rewritten and reorganized. A)
159 W( list of sug-)160 W
19799 32771 MT
(gested reading for software)
642 W( developers has been added.)641 W
19799 34068 MT
(Diagrams have been provided to illustrate the following:)SH
/Symbol SF
21418 36345 MT
(\267)SH
/Times-Roman SF
22199 XM
(The relationship of)
198 W( the Client Library and the PostScript)199 W
22199 37542 MT
(interpreter to application and system software.)SH
/Symbol SF
21418 39338 MT
(\267)SH
/Times-Roman SF
22199 XM
(The creation of a Display PostScript system application.)SH
8 /Helvetica AF
21133 63450 MT
(A CHANGES)
327 W( SINCE LAST PUBLICATION OF THIS DOCUMENT)SH
10 SS 
47485 XM
(11)SH
ES
%%Page: 12 14 
BS
ES
%%Page: 13 15 
BS
0 SI
36 SS 
0 5400 5405 PB %!
% contents box/fountain
gsave 0 -3 pica translate  0 0 36 pica 3 pica fountain
1 setlinewidth -.25 0 moveto 36 pica .5 add 0 rlineto stroke
-.25 3 pica moveto 36 pica .5 add 0 rlineto stroke
.5 setlinewidth 0 -.5 moveto 0 3 pica 1 add rlineto stroke
36 pica -.5 moveto 0 3 pica 1 add rlineto stroke grestore

 PE 24 /Helvetica AF
41528 8229 MT
(Index)SH
9 /Times-Roman AF
6600 14985 MT
(Adobe Developers Association)
SH( 8)450 W
28198 XM
(telephone support)
SH( 5)450 W
6600 16132 MT
(application developers)
SH( 5)450 W
28198 17279 MT
(voice mailbox)
SH( 5)450 W
6600 18426 MT
(classes 8)450 W
6600 19573 MT
(Client Library)
SH( 4)450 W
28198 XM
(window system)
SH( 1)450 W
6600 20720 MT
(conventions 9)450 W
28198 XM
(wraps 2,)
450 W( 3)SH
6600 23014 MT
(device independence)
SH( 1)450 W
6600 24161 MT
(Display PostScript components)
SH( 1)450 W
6600 25308 MT
(document structuring conventions)
SH( 9)450 W
6600 26455 MT
(DPSmoveto 4)450 W
6600 28749 MT
(Encapsulated PostScript Files Specification)
SH( 9)450 W
6600 29896 MT
(EPSF 9)450 W
6600 32190 MT
(file format for PostScript files)
SH( 9)450 W
6600 33337 MT
(file server)
SH( 10)450 W
6600 34484 MT
(font metric information)
SH( 9)450 W
6600 36778 MT
(help line)
SH( 5)450 W
6600 39072 MT
(imaging model)
SH( 1,)
450 W( 6)SH
6600 40219 MT
(interchange format for fonts)
SH( 9)450 W
6600 42513 MT
(manuals 6)450 W
6600 44807 MT
(portability 2)450 W
6600 45954 MT
(PostScript file format)
SH( 9)450 W
6600 47101 MT
(PostScript fonts interchange format)
SH( 9)450 W
6600 48248 MT
(PostScript imaging model)
SH( 1,)
450 W( 6)SH
6600 49395 MT
(PostScript Printer Description files)
SH( 9)450 W
6600 50542 MT
(PostScript standards and conventions)
SH( 9)450 W
6600 51689 MT
(PPD files)
SH( 9)450 W
6600 52836 MT
(PSWDisplayText 4)450 W
6600 53983 MT
(pswrap translator)
SH( 3)450 W
6600 55130 MT
(public access file server)
SH( 10)450 W
6600 57424 MT
(registered developers)
SH( 8)450 W
6600 59718 MT
(standards 9)450 W
6600 60865 MT
(support 5)450 W
10 /Helvetica AF
47485 63450 MT
(13)SH
ES
%%Page: iii 16 
BS
0 SI
36 SS 
0 5400 5405 PB %!
% contents box/fountain
gsave 0 -3 pica translate  0 0 36 pica 3 pica fountain
1 setlinewidth -.25 0 moveto 36 pica .5 add 0 rlineto stroke
-.25 3 pica moveto 36 pica .5 add 0 rlineto stroke
.5 setlinewidth 0 -.5 moveto 0 3 pica 1 add rlineto stroke
36 pica -.5 moveto 0 3 pica 1 add rlineto stroke grestore

 PE 24 /Helvetica AF
37794 8229 MT
(Contents)SH
9 SS 
19799 15024 MT
(1)SH
21894 XM
(About This Document)SH
8 SS 
31276 XM
(1)SH
9 SS 
19799 16221 MT
(2)SH
21894 XM
(About the Display PostScript System)SH
8 SS 
37352 XM
(1)SH
9 SS 
19799 17418 MT
(3)SH
21894 XM
(Application Building Blocks)SH
8 SS 
33376 XM
(2)SH
9 SS 
19799 18615 MT
(4)SH
21894 XM
(Using)SH
/Helvetica-Oblique SF
24482 XM
(pswrap)SH
8 /Helvetica AF
28038 XM
(3)SH
9 SS 
19799 19812 MT
(5)SH
21894 XM
(The Client Library Interface)SH
8 SS 
33514 XM
(4)SH
9 SS 
19799 21009 MT
(6)SH
21894 XM
(Support for Application Developers)SH
8 SS 
36564 XM
(5)SH
9 SS 
21894 22206 MT
(6.1)SH
25187 XM
(The Adobe Developer Support Line)SH
8 SS 
40095 XM
(5)SH
9 SS 
21894 23403 MT
(6.2)SH
25187 XM
(Manuals for Application Developers)SH
8 SS 
40107 XM
(6)SH
9 SS 
21894 24600 MT
(6.3)SH
25187 XM
(Classes for Application Developers)SH
8 SS 
39907 XM
(8)SH
9 SS 
21894 25797 MT
(6.4)SH
25187 XM
(The Adobe Developers Association)SH
8 SS 
40007 XM
(8)SH
9 SS 
21894 26994 MT
(6.5)SH
25187 XM
(PostScript Standards and Conventions)SH
8 SS 
41407 XM
(9)SH
9 SS 
21894 28191 MT
(6.6)SH
25187 XM
(The Public Access File Server)SH
8 SS 
37995 XM
(10)SH
9 SS 
19799 29388 MT
(A)SH
21894 XM
(Changes Since Last Publication Of This Document)SH
8 SS 
42978 XM
(11)SH
9 SS 
19799 33037 MT
(Index)SH
8 SS 
22655 XM
(13)SH
10 SS 
47931 63450 MT
(iii)SH
ES
%%Page: iv 17 
BS
0 SI
10 /Helvetica AF
4500 63450 MT
(iv)SH
ES
%%Page: v 18 
BS
0 SI
36 SS 
0 5400 5405 PB %!
% contents box/fountain
gsave 0 -3 pica translate  0 0 36 pica 3 pica fountain
1 setlinewidth -.25 0 moveto 36 pica .5 add 0 rlineto stroke
-.25 3 pica moveto 36 pica .5 add 0 rlineto stroke
.5 setlinewidth 0 -.5 moveto 0 3 pica 1 add rlineto stroke
36 pica -.5 moveto 0 3 pica 1 add rlineto stroke grestore

 PE 24 /Helvetica AF
32126 8229 MT
(List of Figures)SH
10 /Times-Bold AF
5400 15054 MT
(Figure 1)SH
/Times-Roman SF
(:)SH
/Times-Italic SF
10461 XM
(The Display PostScript System)SH
/Times-Roman SF
23452 XM
(2)SH
/Times-Bold SF
5400 17149 MT
(Figure 2)SH
/Times-Roman SF
(:)SH
/Times-Italic SF
10461 XM
(Creating a Display PostScript Application)SH
/Times-Roman SF
28148 XM
(3)SH
/Helvetica SF
48097 63450 MT
(v)SH
ES
%%Trailer
%%Pages: 18 
%%DocumentFonts: Times-Roman Helvetica Times-Bold Symbol Times-Italic Helvetica-Bold Helvetica-Oblique

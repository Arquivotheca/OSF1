.\"
.\" *****************************************************************
.\" *                                                               *
.\" *    Copyright (c) Digital Equipment Corporation, 1991, 1994    *
.\" *                                                               *
.\" *   All Rights Reserved.  Unpublished rights  reserved  under   *
.\" *   the copyright laws of the United States.                    *
.\" *                                                               *
.\" *   The software contained on this media  is  proprietary  to   *
.\" *   and  embodies  the  confidential  technology  of  Digital   *
.\" *   Equipment Corporation.  Possession, use,  duplication  or   *
.\" *   dissemination of the software and media is authorized only  *
.\" *   pursuant to a valid written license from Digital Equipment  *
.\" *   Corporation.                                                *
.\" *                                                               *
.\" *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
.\" *   by the U.S. Government is subject to restrictions  as  set  *
.\" *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
.\" *   or  in  FAR 52.227-19, as applicable.                       *
.\" *                                                               *
.\" *****************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: README.src,v $ $Revision: 1.1.2.3 $ (DEC) $Date: 1993/09/03 22:07:18 $
.\"
.L8
.UT "Overview of the xpg4demo Application"
.UF "Overview of the xpg4demo Application"
.LP
Source files for the program
.PN xpg4demo
are loaded in the
.PN /usr/examples/i18n/xpg4demo 
directory when the \*QSoftware Development Environment\*U subset
is installed on your system.
The program interrogates a file of employee information
and allows the user to list, add, modify, and delete employee
records.  The program's purpose is to illustrate the programming techniques 
that you use when writing applications to meet the needs of 
different language and cultural environments; more specifically,
the program shows the style of programming that uses  
routines specified in Revision 4 of the X/Open\**
.FS
X/Open is a trademark of the X/Open Company Limited.
.FE 
Portability
Guide (XPG4).
.NH 2
Program Goals
.LP
The application shows how to:
.LS M
.LI
Implement and display messages in the language of the program's user
.LI
Classify the data being handled by the program
.LI
Input and output data (including users' \*Qyes\*U/\*Qno\*U responses) 
.LI
Format dates
.LI
Collate data
.LE
.NH 2
Program Data and Design
.LP
The application processes employee data that includes the
following information:
.LS M
.LI
Employee badge number:  6 digits
.LI
First (given) name:  up to 10 characters
.LI
Surname (last name):  up to 30 characters 
.LI
Cost center:  3 characters
.LI
Date that the employee joined the firm:  in format specified by locale
.LE
.LP
Routines in the curses library control the screen display and
cursor position.  The text that
identifies data for the user, as well as the order in which first and 
last names are displayed, varies according the the language and customs
of the locale.  The menu of commands that the user can perform
on the employee data appears at the bottom of the screen. 
The screen layout used for most operations 
looks like this:
.EX M
.oS
Employee Badge Number :   nnnnnn

First (Given) Name    :   xxxxxxxxxx

Surname               :   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Cost Center           :   xxx

Date of Joining       :   nn/nn/nn 

1-Modify 2-Create 3-Delete 4-List 5-Exit ?  x
.oE
.EE 
.LP
The screen layout changes to the following one when the user selects
the List command.  Multiple employee entries are sorted by name according
to collation rules appropriate for the user's locale.  The user
can scroll the listing when the number of entries cannot be displayed 
on one screen. 
.EX M
.oS
Badge       Name                  Surname                CC      DOJ
-----------------------------------------------------------------------
nnnnnn        xxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxx   nn/nn/nn
.oE
.EE
.NH 2
Application Components and Structure 
.LP
The following table lists and describes the files included
in the sample directory.  
.TS H
tab(@);
lfHB lfHB 
lw(1.5i) lw(3.0i).
_
.Sp
File@Purpose
.Sp
_
.Sp
.TH
Makefile@T{
Identifies build targets and defines how each target is built.
T}
.Sp
commands.c@T{
Defines and processes the commands that users can enter to work
with employee data.
T}
.Sp
commands.h@T{
User-defined include file for commands.c program.
T}
.Sp
database.c@T{
Creates, opens, reads, and writes to the employee data file.
T}
.Sp
message.c@T{
Finds strings defined in the message (.msg) file and handles
errors and warnings. 
T}
.Sp
screen.c@T{
Defines and controls data and menu displays and user input
fields; controls the transition
between static (full-screen) and scrolling display modes.
T}
.Sp
screen.h@T{
User-defined include file for screen.c program.
T}
.Sp
util.c@T{
Determines fields by which records are sorted for displays and
controls the sort operation.
T}
.Sp
xpg4demo.c@T{
Drives program (includes main() function): determines locale and the
file open mode for employee data, initializes the screen display
and command environment, and writes updates to the employee
data file.
T}
.Sp
xpg4demo.h@T{
User-defined include file for all .c files.
T}
.Sp
xpg4demo*.msg@T{
Locale-specific text file that specifies strings for all menus and messages;
also assigns values to variables
that are used by the program to validate user input and vary
execution to meet language and cultural requirements. 
T}
.Sp
xpg4demo*_msg.h@T{
Include file that assigns numeric values to symbolic message identifiers; 
used when preprocessing the .msg file with the
.L mkcatdefs
command.
T}
.Sp
_
.TE
.NH 2
Application Use of Routines and Commands
.LP
The following table explains how the application uses routines and
commands needed for language-independent programming: 
.TS H
tab(@);
lfHB lfHB lfHB
lw(2.0i) lw(3.0i) lw(.5i).
_
.Sp
Item@Used in Program to:@Location
.Sp
_
.Sp
.TH
T{
.L catclose (\|) 
routine
T}@T{
Close the message catalog.
T}@xpg4demo.c
.Sp
T{
.L catgets (\|)
routine
T}@T{
Read messages from the message catalog.
T}@T{
screen.c,
.br
util.c,
.br
xpg4demo.h
T}
.Sp
T{
.L catopen (\|)
routine
T}@T{
Open the message catalog.
T}@xpg4demo.c
.Sp
T{
.L gencat
command
T}@T{
Create the message catalog from the message text source file.
T}@Makefile
.Sp
T{
.L fgetws (\|)
routine
T}@T{
Read characters from the standard input stream, convert them to
wide-character code, and store them in a program-specified array.
T}@T{
commands.c,
.br
screen.c,
.br
xpg4demo.c
T}
.Sp
T{
.L iswalnum (\|)
routine
T}@T{
Test whether a character is alphanumeric.
T}@screen.c
.Sp
T{
.L iswdigit (\|)
routine
T}@T{
Test whether a character is a digit.
T}@commands.c
.Sp
T{
.L mkcatdefs
command
T}@T{
Preprocess a message source (.msg) file to change symbolic identifiers
into numeric constants; output from the 
.L mkcatdefs 
command can then be processed by the
.L gencat
command to create a message catalog (.cat file).
T}@Makefile
.Sp
T{
.L mbstowcs (\|)
routine
T}@T{
Convert a sequence of multibyte characters into corresponding
wide-character codes.  (Multibyte encoding applies to data 
in files; conversion to wide-character encoding is 
required for internal program processing.) 
T}@T{
database.c,
.br
util.c
T}
.Sp
T{
.L mbtowc (\|)
routine
T}@T{
Determine the number of bytes in a multibyte character and then
convert it to a wide character.
T}@commands.c
.Sp
T{
.L nl_langinfo (\|)
.br
routine
T}@T{
Extract the yes/no string from the locale database.
T}@message.c
.Sp
T{
.L perror (\|)
routine
T}@T{
Map the value in the 
.L errno
variable to a language-independent error message and display that
message.
T}@xpg4demo.c
.Sp
T{
.L setlocale (\|)
routine
T}@T{
Query the locale to be used with the program.
T}@xpg4demo.c
.Sp
T{
.L strftime (\|)
routine
T}@T{
Generate a date string.
T}@T{
commands.c,
.br
message.c
T}
.Sp
T{
.L towlower (\|)
routine
T}@T{
Return the lowercase mapping, if any, for a character.
T}@commands.c
.Sp
T{
.L towupper (\|)
routine
T}@T{
Return the uppercase mapping, if any, for a character.
T}@screen.c
.Sp
T{
.L wcscoll (\|)
routine
T}@T{
Determine collation order of two wide-character strings.
T}@util.c
.Sp
T{
.L wcscpy (\|)
routine
T}@T{
Copy a string of wide characters, including their null terminators,
into an array.
T}@screen.c
.Sp
T{
.L wcslen (\|)
routine
T}@T{
Compute the number of characters, not including null terminators,
that are contained in a wide-character string.
T}@screen.c
.Sp
T{
.L wcstol (\|)
routine
T}@T{
Convert the subject sequence part of a wide-character string to a 
long integer.
T}@T{
commands.c,
.br
screen.c
T}
.Sp
T{
.L wcswidth (\|)
routine
T}@T{
Determine the number of printing positions required for a 
wide-character string.
T}@util.c
.Sp
_
.TE
.NH 2
Building and Running the Application
.LP
To create the executable and other supporting binary files that you
need to run the program, follow these steps:
.LS 1
.LI
Copy the example files to a directory of your choice, for example:
.Sp
% cd $HOME
.br
% mkdir play
.br
% cd play
.br
% cp -r /usr/examples/i18n/xpg4demo .
.EE
.LI
Build the application:
.Sp
% make all
.LI
Run the application to see the default message strings:
.Sp
% xpg4demo
.IP
The first time that you run the 
.L xpg4demo
program, it tells you that it is creating a new
.L xpg4demo.dat
file where employee data will be stored.  
Press Return to reach the commands menu prompt and enter
.L 2
to begin storing data.  After creating one or more employee
records, you can try other commands (List, Modify, or Delete)
with your data.
.LI
Set the LANG environment variable to the locale 
that you want to use. If the LANG variable is not
set, the messages are appropriate for English as spoken
in Great Britain, Australia, Hong Kong, and so forth. 
To work with the locale that displays
messages in U.S. English, for example:
.IP
% setenv LANG en_US.ISO8859-1
.IP
Message files for the following locales are provided with the
application:
.LS M
.LI
en_US.ISO8859-1
.LI
ja_JP.AJEC, ja_JP.deckanji, ja_JP.eucJP, ja_JP.sdeckanji
.LI
ja_JP.SJIS
.LE
.NT
To use the ja_JP (Japanese) message files, the Japanese
language variant subset must be installed on the system 
where you are running the application
and (if you are
displaying to a remote workstation) on your local system.
The Japanese subset supplies the Japanese locales,
a terminal driver that
can handle multibyte characters, Japanese fonts, and an
enhanced 
.L stty
command. Refer to the 
.bT "Guide to Internationalization"
for information about using the 
.L stty
command to set terminal line discipline,
terminal code, application code, user input mode, and
other characteristics so that they are appropriate for
Asian languages.
.IP
If you are logged
in through a terminal when running the application, you must
be displaying and entering data at a Kanji terminal. 
.NE
.LI
Set the NLSPATH variable to find the message catalogs appropriate
for available locales:
.Sp
% setenv NLSPATH %l_%t/%N:%L/%N:./%N:/usr/lib/nls/msg/%L/%N
.LI
Run the application using the new locale:
.Sp
% xpg4demo
.LE
.NH 2
Program Restrictions
.LP
The application is simplistic so that you can focus on XPG4
programming techniques.  In many areas, the application's 
assumptions and components are unrealistic.  For example: 
.LS M
.LI
The employee record includes only a subset of fields that would normally
appear in an employee record.
.LI
The file organization of the employee database is stream-sequential;
records are delimited by the line-feed character and fields within the
record are delimited by the tab character.
.LI
The program does not apply transaction-processing 
safeguards to manage simultaneous access by multiple
users or ensure data integrity in the event of system failure.
.LI
The program does not include routines to handle all errors that
the user is likely to make or encounter at runtime. 
.LE
.LP
In addition, the 
.PN xpg4demo
program makes assumptions that are not realistic 
in some language and cultural environments:
.LS M
.LI
The program uses a numeric date format that is appropriate for 
most locales,
but that might need variation in some applications.
For example, the program 
does not show you how to switch between European and Emperor era  
date styles in the way that a Japanese user might expect. 
.LI
The program assumes that the  
locale specified for the user's process applies to all
the records in the employee database.  Some applications need
to handle files and databases that store data in different languages. 
.LE

#
# *********************************************************************
# *                                                                   *
# *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
# *                                                                   *
# *                       All Rights Reserved.                        *
# *                                                                   *
# *********************************************************************
#
#
# HISTORY
#
# @(#)$RCSfile: README,v $ $Revision: 1.1.2.3 $ (DEC) $Date: 1993/09/03 22:08:54 $
#








                                      Overview of the xpg4demo Application






       Source files for the program _x_p_g_4_d_e_m_o are loaded in the
       /_u_s_r/_e_x_a_m_p_l_e_s/_i_1_8_n/_x_p_g_4_d_e_m_o directory when the "Software
       Development Environment" subset is installed on your system.  The
       program interrogates a file of employee information and allows the
       user to list, add, modify, and delete employee records.  The
       program's purpose is to illustrate the programming techniques that
       you use when writing applications to meet the needs of different
       language and cultural environments; more specifically, the program
       shows the style of programming that uses routines specified in
       Revision 4 of the X/Open[1] Portability Guide (XPG4).


       _1._1  _P_r_o_g_r_a_m _G_o_a_l_s

       The application shows how to:

       +o  Implement and display messages in the language of the program's
          user

       +o  Classify the data being handled by the program

       +o  Input and output data (including users' "yes"/"no" responses)

       +o  Format dates

       +o  Collate data



       _1._2  _P_r_o_g_r_a_m _D_a_t_a _a_n_d _D_e_s_i_g_n

       The application processes employee data that includes the following
       information:

       +o  Employee badge number:  6 digits

       +o  First (given) name:  up to 10 characters

       +o  Surname (last name):  up to 30 characters

       +o  Cost center:  3 characters
       _________________________

         [1] X/Open is a trademark of the X/Open Company Limited.













       +o  Date that the employee joined the firm:  in format specified by
          locale


       Routines in the curses library control the screen display and
       cursor position.  The text that identifies data for the user, as
       well as the order in which first and last names are displayed,
       varies according the the language and customs of the locale.  The
       menu of commands that the user can perform on the employee data
       appears at the bottom of the screen. The screen layout used for
       most operations looks like this:

       Employee Badge Number :   nnnnnn

       First (Given) Name    :   xxxxxxxxxx

       Surname               :   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

       Cost Center           :   xxx

       Date of Joining       :   nn/nn/nn

       1-Modify 2-Create 3-Delete 4-List 5-Exit ?  x


       The screen layout changes to the following one when the user
       selects the List command.  Multiple employee entries are sorted by
       name according to collation rules appropriate for the user's
       locale.  The user can scroll the listing when the number of entries
       cannot be displayed on one screen.

       Badge       Name                  Surname                CC      DOJ
       -----------------------------------------------------------------------
       nnnnnn        xxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxx   nn/nn/nn



       _1._3  _A_p_p_l_i_c_a_t_i_o_n _C_o_m_p_o_n_e_n_t_s _a_n_d _S_t_r_u_c_t_u_r_e

       The following table lists and describes the files included in the
       sample directory.
       ________________________________________________

       File              Purpose
       ________________________________________________
       Makefile          Identifies build targets and
                         defines how each target is
                         built.

       commands.c        Defines and processes the
                         commands that users can enter
                         to work with employee data.




       2 Overview of the xpg4demo Application








       ________________________________________________
       File              Purpose
       ________________________________________________

       commands.h        User-defined include file for
                         commands.c program.
       database.c        Creates, opens, reads, and
                         writes to the employee data
                         file.

       message.c         Finds strings defined in the
                         message (.msg) file and
                         handles errors and warnings.
       screen.c          Defines and controls data and
                         menu displays and user input
                         fields; controls the
                         transition between static
                         (full-screen) and scrolling
                         display modes.

       screen.h          User-defined include file for
                         screen.c program.
       util.c            Determines fields by which
                         records are sorted for
                         displays and controls the sort
                         operation.

       xpg4demo.c        Drives program (includes
                         main() function): determines
                         locale and the file open mode
                         for employee data, initializes
                         the screen display and command
                         environment, and writes
                         updates to the employee data
                         file.
       xpg4demo.h        User-defined include file for
                         all .c files.

       xpg4demo*.msg     Locale-specific text file that
                         specifies strings for all
                         menus and messages; also
                         assigns values to variables
                         that are used by the program
                         to validate user input and
                         vary execution to meet
                         language and cultural
                         requirements.
       xpg4demo*_msg.h   Include file that assigns
                         numeric values to symbolic
                         message identifiers; used when
                         preprocessing the .msg file
                         with the _m_k_c_a_t_d_e_f_s command.
       ________________________________________________



                                    Overview of the xpg4demo Application 3









       _1._4  _A_p_p_l_i_c_a_t_i_o_n _U_s_e _o_f _R_o_u_t_i_n_e_s _a_n_d _C_o_m_m_a_n_d_s

       The following table explains how the application uses routines and
       commands needed for language-independent programming:

       ___________________________________________________________________

       Item                   Used in Program to:              Location
       ___________________________________________________________________
       _c_a_t_c_l_o_s_e() routine     Close the message catalog.       xpg4demo.c

       _c_a_t_g_e_t_s() routine      Read messages from the message   screen.c,
                              catalog.                         util.c,
                                                               xpg4demo.h
       _c_a_t_o_p_e_n() routine      Open the message catalog.        xpg4demo.c

       _g_e_n_c_a_t command         Create the message catalog       Makefile
                              from the message text source
                              file.
       _f_g_e_t_w_s() routine       Read characters from the         commands.c,
                              standard input stream, convert   screen.c,
                              them to wide-character code,     xpg4demo.c
                              and store them in a program-
                              specified array.

       _i_s_w_a_l_n_u_m() routine     Test whether a character is      screen.c
                              alphanumeric.
       _i_s_w_d_i_g_i_t() routine     Test whether a character is a    commands.c
                              digit.

       _m_k_c_a_t_d_e_f_s command      Preprocess a message source      Makefile
                              (.msg) file to change symbolic
                              identifiers into numeric
                              constants; output from the
                              _m_k_c_a_t_d_e_f_s command can then be
                              processed by the _g_e_n_c_a_t
                              command to create a message
                              catalog (.cat file).
       _m_b_s_t_o_w_c_s() routine     Convert a sequence of            database.c,
                              multibyte characters into        util.c
                              corresponding wide-character
                              codes.  (Multibyte encoding
                              applies to data in files;
                              conversion to wide-character
                              encoding is required for
                              internal program processing.)

       _m_b_t_o_w_c() routine       Determine the number of bytes    commands.c
                              in a multibyte character and
                              then convert it to a wide
                              character.





       4 Overview of the xpg4demo Application









       ___________________________________________________________________
       Item                   Used in Program to:              Location
       ___________________________________________________________________

       _n_l__l_a_n_g_i_n_f_o()          Extract the yes/no string from   message.c
       routine                the locale database.
       _p_e_r_r_o_r() routine       Map the value in the _e_r_r_n_o       xpg4demo.c
                              variable to a language-
                              independent error message and
                              display that message.

       _s_e_t_l_o_c_a_l_e() routine    Query the locale to be used      xpg4demo.c
                              with the program.
       _s_t_r_f_t_i_m_e() routine     Generate a date string.          commands.c,
                                                               message.c

       _t_o_w_l_o_w_e_r() routine     Return the lowercase mapping,    commands.c
                              if any, for a character.
       _t_o_w_u_p_p_e_r() routine     Return the uppercase mapping,    screen.c
                              if any, for a character.

       _w_c_s_c_o_l_l() routine      Determine collation order of     util.c
                              two wide-character strings.
       _w_c_s_c_p_y() routine       Copy a string of wide            screen.c
                              characters, including their
                              null terminators, into an
                              array.

       _w_c_s_l_e_n() routine       Compute the number of            screen.c
                              characters, not including null
                              terminators, that are
                              contained in a wide-character
                              string.
       _w_c_s_t_o_l() routine       Convert the subject sequence     commands.c,
                              part of a wide-character         screen.c
                              string to a long integer.

       _w_c_s_w_i_d_t_h() routine     Determine the number of          util.c
                              printing positions required
                              for a wide-character string.
       ___________________________________________________________________




       _1._5  _B_u_i_l_d_i_n_g _a_n_d _R_u_n_n_i_n_g _t_h_e _A_p_p_l_i_c_a_t_i_o_n

       To create the executable and other supporting binary files that you
       need to run the program, follow these steps:

       1. Copy the example files to a directory of your choice, for
          example:



                                    Overview of the xpg4demo Application 5









          % cd $HOME
          % mkdir play
          % cd play
          % cp -r /usr/examples/i18n/xpg4demo .


       2. Build the application:

          % make all

       3. Run the application to see the default message strings:

          % xpg4demo

          The first time that you run the _x_p_g_4_d_e_m_o program, it tells you
          that it is creating a new _x_p_g_4_d_e_m_o._d_a_t file where employee data
          will be stored. Press Return to reach the commands menu prompt
          and enter _2 to begin storing data.  After creating one or more
          employee records, you can try other commands (List, Modify, or
          Delete) with your data.

       4. Set the LANG environment variable to the locale that you want to
          use. If the LANG variable is not set, the messages are
          appropriate for English as spoken in Great Britain, Australia,
          Hong Kong, and so forth. To work with the locale that displays
          messages in U.S. English, for example:

          % setenv LANG en_US.ISO8859-1

          Message files for the following locales are provided with the
          application:

          -  en_US.ISO8859-1

          -  ja_JP.AJEC, ja_JP.deckanji, ja_JP.eucJP, ja_JP.sdeckanji

          -  ja_JP.SJIS

                                        _N_o_t_e

               To use the ja_JP (Japanese) message files, the
               Japanese language variant subset must be installed on
               the system where you are running the application and
               (if you are displaying to a remote workstation) on
               your local system.  The Japanese subset supplies the
               Japanese locales, a terminal driver that can handle
               multibyte characters, Japanese fonts, and an enhanced
               _s_t_t_y command. Refer to the _G_u_i_d_e _t_o
               _I_n_t_e_r_n_a_t_i_o_n_a_l_i_z_a_t_i_o_n for information about using the
               _s_t_t_y command to set terminal line discipline, terminal
               code, application code, user input mode, and other
               characteristics so that they are appropriate for Asian
               languages.



       6 Overview of the xpg4demo Application








               If you are logged in through a terminal when running the
               application, you must be displaying and entering data at a
               Kanji terminal.


       5. Set the NLSPATH variable to find the message catalogs
          appropriate for available locales:

          % setenv NLSPATH %l_%t/%N:%L/%N:./%N:/usr/lib/nls/msg/%L/%N

       6. Run the application using the new locale:

          % xpg4demo



       _1._6  _P_r_o_g_r_a_m _R_e_s_t_r_i_c_t_i_o_n_s

       The application is simplistic so that you can focus on XPG4
       programming techniques.  In many areas, the application's
       assumptions and components are unrealistic.  For example:

       +o  The employee record includes only a subset of fields that would
          normally appear in an employee record.

       +o  The file organization of the employee database is stream-
          sequential; records are delimited by the line-feed character and
          fields within the record are delimited by the tab character.

       +o  The program does not apply transaction-processing safeguards to
          manage simultaneous access by multiple users or ensure data
          integrity in the event of system failure.

       +o  The program does not include routines to handle all errors that
          the user is likely to make or encounter at runtime.


       In addition, the _x_p_g_4_d_e_m_o program makes assumptions that are not
       realistic in some language and cultural environments:

       +o  The program uses a numeric date format that is appropriate for
          most locales, but that might need variation in some
          applications.  For example, the program does not show you how to
          switch between European and Emperor era date styles in the way
          that a Japanese user might expect.

       +o  The program assumes that the locale specified for the user's
          process applies to all the records in the employee database.
          Some applications need to handle files and databases that store
          data in different languages.






                                    Overview of the xpg4demo Application 7




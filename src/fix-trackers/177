Path: news.crl.dec.com!pa.dec.com!nobody
Message-Id: <9203042010.AA04521@exhume.lcs.mit.edu>
To: fix-trackers@expo.lcs.mit.edu
Subject: (seq: 2397) PEX 5.1 dipex SI release part 2 of 4 (dipex except swap)
Date: Wed, 04 Mar 92 15:10:25 EST
From: Jay Hersh <hersh@expo.lcs.mit.edu>
Distribution: dec
X-Mailing-List: fix-trackers@expo.lcs.mit.edu
X-Disclaimer: This message originated from a mailing list outside of Digital.
Newsgroups: dec.mail.lists.x.fix-trackers
Approved: news@usenet.pa.dec.com


*** /tmp/da5985	Wed Mar  4 14:43:34 1992
--- extensions/server/PEX/dipex/dispatch/dipexExt.c	Wed Mar  4 14:15:09 1992
***************
*** 1,4 ****
! /* $XConsortium: dipexExt.c,v 5.5 91/12/30 18:22:00 hersh Exp $ */
  
  /***********************************************************
  Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
--- 1,4 ----
! /* $XConsortium: dipexExt.c,v 5.6 92/03/04 14:14:57 hersh Exp $ */
  
  /***********************************************************
  Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
***************
*** 152,158 ****
  	return;
      }
  
!     PextEntry = AddExtension(   PEX_NAME_STRING, 0, (PEXMaxError+1),
  				    ProcPEXDispatch, ProcPEXDispatch,
  				    PEXResetProc, StandardMinorOpcode);
      if (!PextEntry) {
--- 152,158 ----
  	return;
      }
  
!     PextEntry = AddExtension( PEX_NAME_STRING, PEXNumberEvents, (PEXMaxError+1),
  				    ProcPEXDispatch, ProcPEXDispatch,
  				    PEXResetProc, StandardMinorOpcode);
      if (!PextEntry) {
***************
*** 161,166 ****
--- 161,169 ----
  
      PexReqCode = PextEntry->base;
      PexErrorBase = PextEntry->errorBase;
+     PexEventBase = PextEntry->eventBase;
+     EventSwapVector[PexEventBase + PEXMaxHitsReached] = 
+ 						    SwapPEXMaxHitsReachedEvent;
      
  }
  
*** /tmp/da6003	Wed Mar  4 14:44:35 1992
--- extensions/server/PEX/dipex/objects/pexPick.c	Wed Mar  4 14:16:18 1992
***************
*** 1,4 ****
! /* $XConsortium: pexPick.c,v 5.1 91/02/16 09:56:45 rws Exp $ */
  
  /***********************************************************
  Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
--- 1,4 ----
! /* $XConsortium: pexPick.c,v 5.2 92/03/04 14:16:12 hersh Exp $ */
  
  /***********************************************************
  Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
***************
*** 26,31 ****
--- 26,33 ----
  
  
  /*++
+  *  --- Workstation Picking ---
+  *
   *	PEXCreatePickMeasure
   *	PEXFreePickMeasure
   *	PEXGetPickDevice
***************
*** 32,37 ****
--- 34,40 ----
   *	PEXChangePickDevice
   *	PEXGetPickMeasure
   *	PEXUpdatePickMeasure
+  *
   --*/
  
  #include "X.h"
***************
*** 169,179 ****
      if (strmPtr->itemMask & PEXPDPickStatus) ptr++;
  
      if (strmPtr->itemMask & PEXPDPickPath) {
! 	pexPickPath *per;
  	diStructHandle sh, *psh;
  	CARD32 i, numRefs = *((CARD32 *)(ptr));
  	ptr++;
! 	for (i=0, per = (pexPickPath *)ptr; i<numRefs; i++, per++) {
  		LU_STRUCTURE(per->sid,sh);
  		psh = (diStructHandle *)&(per->sid);
  		*psh = sh;
--- 172,182 ----
      if (strmPtr->itemMask & PEXPDPickStatus) ptr++;
  
      if (strmPtr->itemMask & PEXPDPickPath) {
! 	pexPickElementRef *per;
  	diStructHandle sh, *psh;
  	CARD32 i, numRefs = *((CARD32 *)(ptr));
  	ptr++;
! 	for (i=0, per = (pexPickElementRef *)ptr; i<numRefs; i++, per++) {
  		LU_STRUCTURE(per->sid,sh);
  		psh = (diStructHandle *)&(per->sid);
  		*psh = sh;
***************
*** 250,255 ****
--- 253,260 ----
      return( err );
  
  } /* end-PEXUpdatePickMeasure() */
+ 
+ 
  /*++
   *
   *	End of File
*** /tmp/da6018	Wed Mar  4 14:44:38 1992
--- extensions/server/PEX/dipex/objects/Imakefile	Wed Mar  4 14:16:15 1992
***************
*** 1,5 ****
  XCOMM
! XCOMM $XConsortium: Imakefile,v 5.4 91/07/24 17:00:54 rws Exp $
  XCOMM
  XCOMM 
  XCOMM Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium
--- 1,5 ----
  XCOMM
! XCOMM $XConsortium: Imakefile,v 5.5 92/03/04 14:16:00 hersh Exp $
  XCOMM
  XCOMM 
  XCOMM Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium
***************
*** 48,57 ****
  
  
  SRCS =  pexRndr.c pexFont.c pexLut.c pexNs.c pexStr.c \
! 	pexPhigs.c pexInfo.c pexSc.c pexPick.c pexPc.c
  
  OBJS =  pexRndr.o pexFont.o pexLut.o pexNs.o pexStr.o \
! 	pexPhigs.o pexInfo.o pexSc.o pexPick.o pexPc.o
  
  NormalLibraryObjectRule()
  NormalLibraryTarget(diobpex,$(OBJS))
--- 48,57 ----
  
  
  SRCS =  pexRndr.c pexFont.c pexLut.c pexNs.c pexStr.c \
! 	pexPhigs.c pexInfo.c pexSc.c pexPick.c pexPc.c pexRndrPick.c
  
  OBJS =  pexRndr.o pexFont.o pexLut.o pexNs.o pexStr.o \
! 	pexPhigs.o pexInfo.o pexSc.o pexPick.o pexPc.o pexRndrPick.o
  
  NormalLibraryObjectRule()
  NormalLibraryTarget(diobpex,$(OBJS))
*** /dev/null	Wed Mar  4 14:44:42 1992
--- extensions/server/PEX/dipex/objects/pexRndrPick.c	Wed Mar  4 14:16:58 1992
***************
*** 0 ****
--- 1,282 ----
+ /* $XConsortium: pexRndrPick.c,v 1.1 92/03/04 14:16:23 hersh Exp $ */
+ 
+ /************************************************************
+ Copyright 1992 by The Massachusetts Institute of Technology
+ 
+ Permission to use, copy, modify, and distribute this
+ software and its documentation for any purpose and without
+ fee is hereby granted, provided that the above copyright
+ notice appear in all copies and that both that copyright
+ notice and this permission notice appear in supporting
+ docu- mentation, and that the name of MIT not be used in
+ advertising or publicity pertaining to distribution of the
+ software without specific prior written permission.
+ M.I.T. makes no representation about the suitability of
+ this software for any purpose. It is provided "as is"
+ without any express or implied warranty.
+ 
+ MIT DISCLAIMS ALL WARRANTIES WITH REGARD TO  THIS  SOFTWARE,
+ INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FIT-
+ NESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL MIT BE  LI-
+ ABLE  FOR  ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
+ ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,  DATA  OR
+ PROFITS,  WHETHER  IN  AN  ACTION OF CONTRACT, NEGLIGENCE OR
+ OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
+ THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ 
+ ******************************************************************/
+ 
+ 
+ 
+ /*++
+  *  --- Renderer Picking ---
+  *      PEXBeginPickOne
+  *      PEXEndPickOne
+  *      PEXPickOne
+  *      PEXBeginPickAll
+  *      PEXEndPickAll
+  *      PEXPickAll
+  --*/
+ 
+ #include "X.h"
+ #define NEED_EVENTS
+ #include "Xproto.h"
+ #include "pexError.h"
+ #include "dipex.h"
+ #include "PEXprotost.h"
+ #include "pex_site.h"
+ #include "ddpex3.h"
+ #include "ddpex4.h"
+ #include "pexLookup.h"
+ 
+ #ifdef min
+ #undef min
+ #endif
+  
+ #ifdef max
+ #undef max
+ #endif
+ 
+ 
+ /*++  Renderer Picking ++*/
+ 
+ ErrorCode
+ PEXBeginPickOne( cntxtPtr, strmPtr )
+ pexContext      	*cntxtPtr;
+ pexBeginPickOneReq      *strmPtr;
+ {
+     ErrorCode err = Success;
+     ddRendererStr *prend = 0;
+     pexPickRecord *pr = (pexPickRecord *)(strmPtr+1);
+ 
+     LU_RENDERER(strmPtr->rdr, prend);
+     LU_DRAWABLE(strmPtr->drawable, prend->pDrawable);
+     prend->drawableId = strmPtr->drawable;
+     prend->pickstr.sid = strmPtr->sid;
+ 
+     prend->pickstr.pick_op = strmPtr->pickOp;
+ 
+     err = ChangePseudoPickMeasure (prend, pr);
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+ 
+     /* This is set up to use this instead of defining a BeginPickOne */
+     /* this wont work until ChangePseudoPickMeasure is full implemented 
+     err = BeginPicking(prend, prend->pickstr.pseudoPM);
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+     */
+ 
+     return( err );
+ } /* end-PEXBeginPickOne() */
+ 
+ ErrorCode
+ PEXEndPickOne( cntxtPtr, strmPtr )
+ pexContext      	*cntxtPtr;
+ pexEndPickOneReq        *strmPtr;
+ {
+     ErrorCode err = Success;
+     ddRendererStr *prend = 0;
+     extern ddBufferPtr pPEXBuffer;
+ 
+     LU_RENDERER(strmPtr->rdr, prend);
+ 
+     SETUP_INQ(pexEndPickOneReply);
+ 
+     err = EndPickOne(prend, pPEXBuffer);
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+     {
+ 	SETUP_VAR_REPLY(pexEndPickOneReply);
+ 	/* this line for debug purposes */
+ 	reply->numPickElRefs = 0;
+ 
+ 	WritePEXBufferReply(pexEndPickOneReply);
+     }
+     return( err );
+ } /* end-PEXEndPickOne() */
+ 
+ ErrorCode
+ PEXPickOne( cntxtPtr, strmPtr )
+ pexContext      	*cntxtPtr;
+ pexPickOneReq           *strmPtr;
+ {
+     ErrorCode err = Success;
+     extern ddBufferPtr pPEXBuffer;
+     ddRendererStr *prend = 0;
+     pexPickRecord *pr = (pexPickRecord *)(strmPtr+1);
+ 
+     /* do stuff same as BeginPickOne */
+     LU_RENDERER(strmPtr->rdr, prend);
+     LU_DRAWABLE(strmPtr->drawable, prend->pDrawable);
+     prend->drawableId = strmPtr->drawable;
+     LU_STRUCTURE(strmPtr->sid, prend->pickstr.strHandle);
+     prend->pickstr.sid = strmPtr->sid;
+ 
+     prend->pickstr.pick_op = strmPtr->pickOp;
+ 
+     err = ChangePseudoPickMeasure (prend, pr);
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+ 
+     /* this wont work until ChangePseudoPickMeasure is full implemented 
+     err = BeginPicking(prend, prend->pickstr.pseudoPM);
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+     */
+ 
+     /* now call PickOne which does set up and calls RenderElements */
+     err = PickOne(prend);
+ 
+     /* now do stuff same as EndPickOne */
+     SETUP_INQ(pexPickOneReply);
+ 
+     err = EndPickOne(prend, pPEXBuffer);
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+     {
+ 	SETUP_VAR_REPLY(pexPickOneReply);
+ 	/* this line for debug purposes */
+ 	reply->numPickElRefs = 0;
+ 
+ 	WritePEXBufferReply(pexPickOneReply);
+     }
+     return( err );
+ } /* end-PEXPickOne() */
+ 
+ ErrorCode
+ PEXBeginPickAll( cntxtPtr, strmPtr )
+ pexContext      	*cntxtPtr;
+ pexBeginPickAllReq      *strmPtr;
+ {
+     ErrorCode err = Success;
+     ddRendererStr *prend = 0;
+     pexPickRecord *pr = (pexPickRecord *)(strmPtr+1);
+ 
+     LU_RENDERER(strmPtr->rdr, prend);
+     LU_DRAWABLE(strmPtr->drawable, prend->pDrawable);
+     prend->drawableId = strmPtr->drawable;
+     prend->pickstr.sid = strmPtr->sid;
+ 
+     prend->pickstr.send_event = strmPtr->sendEvent;
+     prend->pickstr.max_hits = strmPtr->pickMaxHits;
+     prend->pickstr.client = cntxtPtr->client;
+ 
+     err = ChangePseudoPickMeasure (prend, pr);
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+ 
+     /* This is set up to use this instead of defining a BeginPickOne */
+     /* this wont work until ChangePseudoPickMeasure is full implemented 
+     err = BeginPicking(prend, prend->pickstr.pseudoPM);
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+     */
+ 
+ 
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+     return( err );
+ } /* end-PEXBeginPickAll() */
+ 
+ ErrorCode
+ PEXEndPickAll( cntxtPtr, strmPtr )
+ pexContext      	*cntxtPtr;
+ pexEndPickAllReq        *strmPtr;
+ {
+     ErrorCode err = Success;
+     extern ddBufferPtr pPEXBuffer;
+     ddRendererStr *prend = 0;
+ 
+     LU_RENDERER(strmPtr->rdr, prend);
+ 
+     SETUP_INQ(pexEndPickAllReply);
+ 
+     err = EndPickAll(prend, pPEXBuffer);
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+     {
+ 	SETUP_VAR_REPLY(pexEndPickAllReply);
+ 	/* this line for debug purposes */
+ 	reply->numPicked = 0;
+ 
+ 	WritePEXBufferReply(pexEndPickAllReply);
+     }
+     return( err );
+ } /* end-PEXEndPickAll() */
+ 
+ ErrorCode
+ PEXPickAll( cntxtPtr, strmPtr )
+ pexContext      	*cntxtPtr;
+ pexPickAllReq           *strmPtr;
+ {
+     ErrorCode err = Success;
+     extern ddBufferPtr pPEXBuffer;
+     ddRendererStr *prend = 0;
+     pexPickRecord *pr = (pexPickRecord *)(strmPtr+1);
+ 
+     /* do stuff same as BeginPickAll */
+     LU_RENDERER(strmPtr->rdr, prend);
+     LU_DRAWABLE(strmPtr->drawable, prend->pDrawable);
+     prend->drawableId = strmPtr->drawable;
+ 
+     prend->pickstr.max_hits = strmPtr->pickMaxHits;
+ 
+     err = ChangePseudoPickMeasure (prend, pr);
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+ 
+     /* this wont work until ChangePseudoPickMeasure is full implemented 
+     err = BeginPicking(prend, prend->pickstr.pseudoPM);
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+     */
+ 
+     /* now call PickAll which does set up and calls RenderElements */
+     err = PickAll(prend);
+ 
+     /* now do stuff same as EndPickOne */
+     SETUP_INQ(pexPickAllReply);
+ 
+     err = EndPickAll(prend, pPEXBuffer);
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+     {
+ 	SETUP_VAR_REPLY(pexPickAllReply);
+ 	/* this line for debug purposes */
+ 	reply->numPicked = 0;
+ 
+ 	WritePEXBufferReply(pexPickAllReply);
+     }
+     return( err );
+ } /* end-PEXPickAll() */
+ 
+ 
+ /**** Renderer Pick Events ****/
+ 
+ ErrorCode
+ PEXMaxHitsReachedNotify(client, rendId)
+ ClientPtr           client;
+ ddULONG             rendId;
+ {
+     pexMaxHitsReachedEvent mhre;
+ 
+     mhre.type = PexEventBase + PEXMaxHitsReached; 
+     mhre.sequenceNumber = client->sequence;
+     mhre.rdr = rendId;
+ 
+     WriteEventsToClient (client, 1, (xEvent *) &mhre);
+     return(client->noClientException);
+ }
+ /*++
+  *
+  *	End of File
+  *
+  --*/
*** /tmp/da6052	Wed Mar  4 14:44:45 1992
--- extensions/server/PEX/dipex/objects/pexRndr.c	Wed Mar  4 14:16:26 1992
***************
*** 1,4 ****
! /* $XConsortium: pexRndr.c,v 5.6 91/10/01 02:34:23 hersh Exp $ */
  
  /***********************************************************
  Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
--- 1,4 ----
! /* $XConsortium: pexRndr.c,v 5.7 92/03/04 14:16:18 hersh Exp $ */
  
  /***********************************************************
  Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
***************
*** 33,38 ****
--- 33,40 ----
   *	PEXEndRendering
   *	PEXBeginStructure
   *	PEXEndStructure
+  *	PEXRenderElements
+  *	PEXAccumulateState
   *	PEXRenderNetwork
   *	PEXRenderOutputCommands
   --*/
***************
*** 48,53 ****
--- 50,56 ----
  #include "X.h"
  #include "pexError.h"
  #include "ddpex3.h"
+ #include "ddpex4.h"
  #include "pexLookup.h"
  #include "pexExtract.h"
  #include "pexUtils.h"
***************
*** 136,141 ****
--- 139,145 ----
      ErrorCode freeRenderer();
      ddRendererStr *prend = 0;
      CARD8 *ptr = (CARD8 *)(strmPtr+1);
+     XID  fakepm;
  	
      if (prend = (ddRendererStr *) LookupIDByType (strmPtr->rdr, PEXRendType))
  	PEX_ERR_EXIT(BadIDChoice,strmPtr->rdr,cntxtPtr);
***************
*** 145,150 ****
--- 149,170 ----
  
      prend->rendId = strmPtr->rdr;
  
+     /* allocate a handle to the pseudo Pick Measure used for Renderer Picking 
+        the Pick measure itself is done with CreatePseudoPickMeasure
+        in the BeginPick...  routines 
+     */
+     fakepm = FakeClientID(cntxtPtr->client->index);
+     prend->pickstr.pseudoPM = (diPMHandle) Xalloc ((unsigned long)sizeof(ddPMResource));
+     if (!prend->pickstr.pseudoPM)  PEX_ERR_EXIT(BadAlloc,0,cntxtPtr);
+     (prend->pickstr.pseudoPM)->id = fakepm;
+     err = CreatePseudoPickMeasure (prend);
+     if (err){
+ 	Xfree((pointer)(prend->pickstr.pseudoPM));
+ 	PEX_ERR_EXIT(err,0,cntxtPtr);	
+     }
+ 
+     ADDRESOURCE(fakepm, PEXPickType, prend->pickstr.pseudoPM);
+ 
      LU_DRAWABLE(strmPtr->drawable, prend->pDrawable);
      prend->drawableId = strmPtr->drawable;
      prend->drawExample.type = prend->pDrawable->type;
***************
*** 153,164 ****
      prend->drawExample.rootDepth = prend->pDrawable->pScreen->rootDepth;
      prend->drawExample.rootVisual = prend->pDrawable->pScreen->rootVisual;
  
-     prend->curPath = puCreateList(DD_ELEMENT_REF);	
-     if (!(prend->curPath)) {
-         Xfree((pointer)prend);
-         PEX_ERR_EXIT(BadAlloc,0,cntxtPtr);
-     }
- 
      prend->state = PEXIdle;
      /* renderer dynamics masks are set by ddPEX */
      prend->tablesMask = 0;
--- 173,178 ----
***************
*** 181,186 ****
--- 195,202 ----
      prend->ns[(unsigned)DD_HIGH_EXCL_NS] = 0;
      prend->ns[(unsigned)DD_INVIS_INCL_NS] = 0;
      prend->ns[(unsigned)DD_INVIS_EXCL_NS] = 0;
+     prend->ns[(unsigned)DD_PICK_INCL_NS] = 0;
+     prend->ns[(unsigned)DD_PICK_EXCL_NS] = 0;
  
      if (strmPtr->itemMask & PEXRDPipelineContext) {
  	ddPCStr *ppc = 0;
***************
*** 193,198 ****
--- 209,220 ----
  	    PEX_ERR_EXIT(err,0,cntxtPtr); }
      } else prend->pPC = 0;
  
+ 
+     prend->curPath = puCreateList(DD_ELEMENT_REF);	
+     if (!(prend->curPath)) {
+         Xfree((pointer)prend);
+         PEX_ERR_EXIT(BadAlloc,0,cntxtPtr);
+     }
      if (strmPtr->itemMask & PEXRDCurrentPath)  {
  	unsigned long npaths;
  
***************
*** 303,308 ****
--- 325,367 ----
  	SKIP_STRUCT(ptr, nrects, pexDeviceRect);
      }; /* else prend->clipList = 0;*/				/* default */
  
+     if (strmPtr->itemMask & PEXRDPickInclusion) {
+ 	CHANGENS(DD_PICK_INCL_NS, PEXDynPickNameset);
+     }
+ 
+     if (strmPtr->itemMask & PEXRDPickExclusion) {
+ 	CHANGENS(DD_PICK_EXCL_NS, PEXDynPickNameset);
+     }
+ 
+ 
+     prend->pickStartPath = puCreateList(DD_ELEMENT_REF);	
+     if (!(prend->pickStartPath)) {
+         Xfree((pointer)prend);
+         PEX_ERR_EXIT(BadAlloc,0,cntxtPtr);
+     }
+     if (strmPtr->itemMask & PEXRDPickStartPath) {
+ 	unsigned long numpaths;
+ 	EXTRACT_CARD32( numpaths, ptr);
+ 	puAddToList((ddPointer)ptr, numpaths, prend->pickStartPath);
+ 	SKIP_STRUCT(ptr, numpaths, pexElementRef);
+     }
+ 
+     if (strmPtr->itemMask & PEXRDBackgroundColour) {
+ 	EXTRACT_COLOUR_SPECIFIER(prend->backgroundColour,ptr);
+     }
+ 
+     if (strmPtr->itemMask & PEXRDClearI) {
+ 	EXTRACT_CARD8_FROM_4B(prend->clearI,ptr);
+     }
+ 
+     if (strmPtr->itemMask & PEXRDClearZ) {
+ 	EXTRACT_CARD8_FROM_4B(prend->clearZ,ptr);
+     }
+ 
+     if (strmPtr->itemMask & PEXRDEchoMode) {
+ 	EXTRACT_CARD16_FROM_4B(prend->echoMode,ptr);
+     }
+ 
      err = InitRenderer(prend);
      if (err) {
  	puDeleteList(prend->clipList);
***************
*** 481,486 ****
--- 540,580 ----
  	SKIP_STRUCT(ptr, nrects, pexDeviceRect);
      }
  
+     if (strmPtr->itemMask & PEXRDPickInclusion) {
+ 	CHANGENS(DD_PICK_INCL_NS, PEXDynPickNameset);
+     }
+ 
+     if (strmPtr->itemMask & PEXRDPickExclusion) {
+ 	CHANGENS(DD_PICK_EXCL_NS, PEXDynPickNameset);
+     }
+ 
+     if (strmPtr->itemMask & PEXRDPickStartPath) {
+ 	unsigned long numpaths;
+ 	EXTRACT_CARD32( numpaths, ptr);
+ 	PU_EMPTY_LIST(prend->pickStartPath);
+ 	puAddToList((ddPointer)ptr, numpaths, prend->pickStartPath);
+ 	SKIP_STRUCT(ptr, numpaths, pexElementRef);
+     }
+ 
+ 
+     if (strmPtr->itemMask & PEXRDBackgroundColour) {
+ 	EXTRACT_COLOUR_SPECIFIER(prend->backgroundColour,ptr);
+     }
+ 
+     if (strmPtr->itemMask & PEXRDClearI) {
+ 	EXTRACT_CARD8_FROM_4B(prend->clearI,ptr);
+     }
+ 
+     if (strmPtr->itemMask & PEXRDClearZ) {
+ 	EXTRACT_CARD8_FROM_4B(prend->clearZ,ptr);
+     }
+ 
+     if (strmPtr->itemMask & PEXRDEchoMode) {
+ 	EXTRACT_CARD16_FROM_4B(prend->echoMode,ptr);
+ 	prend->attrsChanges |= PEXDynEchoMode;
+     }
+ 
+ 
      return( err );
  
  } /* end-PEXChangeRenderer() */
***************
*** 507,517 ****
      ptr = (CARD8 *) (pPEXBuffer->pBuf);
  
      lwords_mask = strmPtr->itemMask
! 			& ~(PEXRDNpcSubvolume | PEXRDViewport | PEXRDClipList);
      CountOnes(lwords_mask, num_lwords);
      num_lwords += ((strmPtr->itemMask & PEXRDCurrentPath)
  		    ? (prend->curPath->numObj * sizeof(pexElementRef) / 4) + 1
  		    : 0);
      CHK_PEX_BUF(size, sizeof(pexGetRendererAttributesReply)
  			+ num_lwords * sizeof(CARD32),
  		reply, pexGetRendererAttributesReply, ptr);
--- 601,615 ----
      ptr = (CARD8 *) (pPEXBuffer->pBuf);
  
      lwords_mask = strmPtr->itemMask
! 		  & ~(PEXRDNpcSubvolume | PEXRDViewport | PEXRDClipList |
! 		      PEXRDBackgroundColour);
      CountOnes(lwords_mask, num_lwords);
      num_lwords += ((strmPtr->itemMask & PEXRDCurrentPath)
  		    ? (prend->curPath->numObj * sizeof(pexElementRef) / 4) + 1
  		    : 0);
+     num_lwords += ((strmPtr->itemMask & PEXRDPickStartPath)
+ 		    ? (prend->pickStartPath->numObj * sizeof(pexElementRef) / 4)
+ 		    + 1 : 0);
      CHK_PEX_BUF(size, sizeof(pexGetRendererAttributesReply)
  			+ num_lwords * sizeof(CARD32),
  		reply, pexGetRendererAttributesReply, ptr);
***************
*** 524,530 ****
  	unsigned long i;
  	ddElementRef *per = (ddElementRef *)(prend->curPath->pList);
  	PACK_CARD32( prend->curPath->numObj, ptr);
! 	for (i=0, prend->curPath->pList; i<prend->curPath->numObj; i++, per++) {
  	    sid = GetId(per->structure);
  	    PACK_CARD32(sid, ptr);
  	    PACK_CARD32(per->offset, ptr);
--- 622,628 ----
  	unsigned long i;
  	ddElementRef *per = (ddElementRef *)(prend->curPath->pList);
  	PACK_CARD32( prend->curPath->numObj, ptr);
! 	for (i=0; i<prend->curPath->numObj; i++, per++) {
  	    sid = GetId(per->structure);
  	    PACK_CARD32(sid, ptr);
  	    PACK_CARD32(per->offset, ptr);
***************
*** 611,616 ****
--- 709,746 ----
  	ptr += num_bytes + 4;
      }
  
+     if (strmPtr->itemMask & PEXRDPickInclusion)
+ 	PACK_CARD32( GetId(prend->ns[(unsigned)DD_PICK_INCL_NS]), ptr);
+ 
+     if (strmPtr->itemMask & PEXRDPickExclusion)
+ 	PACK_CARD32( GetId(prend->ns[(unsigned)DD_PICK_EXCL_NS]), ptr);
+ 
+     if (strmPtr->itemMask & PEXRDPickStartPath) {
+ 	pexStructure sid = 0;
+ 	unsigned long i;
+ 	ddElementRef *per = (ddElementRef *)(prend->pickStartPath->pList);
+ 	PACK_CARD32( prend->pickStartPath->numObj, ptr);
+ 	for (i=0; i<prend->pickStartPath->numObj; i++, per++) {
+ 	    sid = GetId(per->structure);
+ 	    PACK_CARD32(sid, ptr);
+ 	    PACK_CARD32(per->offset, ptr);
+ 	}
+     }
+ 
+     if (strmPtr->itemMask & PEXRDBackgroundColour) {
+         CHK_PEX_BUF(size, sizeof(CARD32) 
+ 			  + SIZE_COLOURSPEC(prend->backgroundColour),
+ 			  reply, pexGetRendererAttributesReply, ptr);
+ 	PACK_COLOUR_SPECIFIER(prend->backgroundColour,ptr);
+     }
+     
+     if (strmPtr->itemMask & PEXRDClearI) PACK_CARD32( prend->clearI, ptr);
+ 
+     if (strmPtr->itemMask & PEXRDClearZ) PACK_CARD32( prend->clearZ, ptr);
+ 
+     if (strmPtr->itemMask & PEXRDEchoMode) PACK_CARD32( prend->echoMode, ptr);
+ 
+ 
      reply->length = (unsigned long)(ptr) - (unsigned long)(pPEXBuffer->pBuf) +1;
      reply->length = LWORDS(reply->length);
      WritePEXReplyToClient(	cntxtPtr, strmPtr,
***************
*** 728,734 ****
      sizeof(pexExecuteStructure),    /* length	    */
      0				    /* id	    */
  };
! 
  ErrorCode
  PEXRenderNetwork( cntxtPtr, strmPtr )
  pexContext      	*cntxtPtr;
--- 858,865 ----
      sizeof(pexExecuteStructure),    /* length	    */
      0				    /* id	    */
  };
! /*++	PEXRenderNetwork
!  --*/
  ErrorCode
  PEXRenderNetwork( cntxtPtr, strmPtr )
  pexContext      	*cntxtPtr;
***************
*** 757,765 ****
  
  } /* end-PEXRenderNetwork() */
  
! /*++	PEXRenderNetwork
!  --*/
  ErrorCode
  PEXGetRendererDynamics( cntxtPtr, strmPtr )
  pexContext		    *cntxtPtr;
  pexGetRendererDynamicsReq   *strmPtr;
--- 888,960 ----
  
  } /* end-PEXRenderNetwork() */
  
! 
  ErrorCode
+ PEXRenderElements( cntxtPtr, strmPtr )
+ pexContext      	*cntxtPtr;
+ pexRenderElementsReq    	*strmPtr;
+ {
+     ErrorCode err = PEXNYI;
+     ddRendererStr *prend = 0;
+     diStructHandle ps = 0;
+     ddElementRange *range;
+ 
+     LU_RENDERER(strmPtr->rdr, prend);
+     LU_STRUCTURE(strmPtr->sid, ps);
+ 
+     range = (ddElementRange *) &(strmPtr->range);
+   
+     err = RenderElements(prend, ps, range );
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+ 
+     return( err );
+ 
+ } /* end-PEXRenderElements() */
+ 
+ 
+ ErrorCode
+ PEXAccumulateState( cntxtPtr, strmPtr )
+ pexContext      	*cntxtPtr;
+ pexAccumulateStateReq   *strmPtr;
+ {
+     ErrorCode err = PEXNYI;
+     ddRendererStr *prend = 0;
+     ddAccStStr    *pAccSt = 0;
+     pexElementRef *per;
+     diStructHandle sh, *psh;
+     CARD32 i;
+     extern ddpex4rtn ValidateStructurePath();
+ 
+     LU_RENDERER(strmPtr->rdr, prend);
+ 
+     pAccSt = (ddAccStStr *)Xalloc((unsigned long)sizeof(ddAccStStr));
+     if (!pAccSt) PEX_ERR_EXIT(BadAlloc,0,cntxtPtr);
+ 
+     pAccSt->numElRefs = strmPtr->numElRefs;
+ 
+     per = (pexElementRef *)(strmPtr+1);
+     for (i = 0 ; i < strmPtr->numElRefs; i++, per++) {
+ 	LU_STRUCTURE(per->structure,sh);
+ 	psh = (diStructHandle *)&(per->structure);
+ 	*psh = sh;
+     }
+ 
+     if (pAccSt->Path) puDeleteList(pAccSt->Path);
+     pAccSt->Path = puCreateList(DD_ELEMENT_REF);
+     if (!(pAccSt->Path)) PEX_ERR_EXIT(BadAlloc,0,cntxtPtr);
+     puAddToList((ddPointer)(strmPtr+1),  pAccSt->numElRefs, pAccSt->Path);
+     err = ValidateStructurePath(pAccSt->Path);
+     if (err != Success) PEX_ERR_EXIT(err,0,cntxtPtr);
+ 
+     err = AccumulateState(prend, pAccSt );
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+ 
+     return( err );
+ 
+ } /* end-PEXAccumulateState() */
+ 
+ 
+ ErrorCode
  PEXGetRendererDynamics( cntxtPtr, strmPtr )
  pexContext		    *cntxtPtr;
  pexGetRendererDynamicsReq   *strmPtr;
***************
*** 811,820 ****
       */
      LU_DRAWABLE(prend->drawableId, prend->pDrawable);
  
!     curOC = (CARD32 *)(strmPtr + 1);
! 
!     for (i = 0, curOC = (CARD32 *)(strmPtr + 1);
! 	 i < strmPtr->numCommands;
  	 i++, curOC += pe->length  ) {
  	pe = (pexElementInfo *)curOC;
      	if ((PEXOCAll < pe->elementType ) && (pe->elementType <= PEXMaxOC)) { 
--- 1006,1012 ----
       */
      LU_DRAWABLE(prend->drawableId, prend->pDrawable);
  
!     for (i = 0, curOC = (CARD32 *)(strmPtr + 1); i < strmPtr->numCommands;
  	 i++, curOC += pe->length  ) {
  	pe = (pexElementInfo *)curOC;
      	if ((PEXOCAll < pe->elementType ) && (pe->elementType <= PEXMaxOC)) { 
***************
*** 824,833 ****
  		*ps = (pexStructure)(ph);
  	    }
  	}
- 
      }
  
!     err = RenderOCs(prend, strmPtr->numCommands, (strmPtr+1), &pErr);
  
      if (err) PEX_OC_ERROR(pErr, cntxtPtr);
  
--- 1016,1024 ----
  		*ps = (pexStructure)(ph);
  	    }
  	}
      }
  
!     err = RenderOCs(prend, strmPtr->numCommands, (strmPtr+1));
  
      if (err) PEX_OC_ERROR(pErr, cntxtPtr);
  
*** /tmp/da6067	Wed Mar  4 14:44:50 1992
--- extensions/server/PEX/dipex/objects/pexInfo.c	Wed Mar  4 14:16:20 1992
***************
*** 1,4 ****
! /* $XConsortium: pexInfo.c,v 5.1 91/02/16 09:56:56 rws Exp $ */
  
  /***********************************************************
  Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
--- 1,4 ----
! /* $XConsortium: pexInfo.c,v 5.2 92/03/04 14:16:15 hersh Exp $ */
  
  /***********************************************************
  Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
***************
*** 30,35 ****
--- 30,38 ----
   *	Contents:   PEXGetExtensionInfo
   *		    PEXGetEnumeratedTypeInfo
   *		    PEXGetImpDepConstants
+  *		    PEXMatchRendererTargets
+  *		    PEXEscape
+  *		    PEXEscapeWithReply
   *
   --*/
  
***************
*** 40,45 ****
--- 43,49 ----
  #include "dipex.h"
  #include "pexError.h"
  #include "pexLookup.h"
+ #include "pexExtract.h"
  #ifdef min
  #undef min
  #endif
***************
*** 140,145 ****
--- 144,224 ----
      return( err );
  
  } /* end-PEXGetImpDepConstants() */
+ 
+ ErrorCode
+ PEXMatchRendererTargets( cntxtPtr, strmPtr )
+ pexContext			*cntxtPtr;
+ pexMatchRendererTargetsReq      *strmPtr;
+ {
+     ErrorCode err = Success;
+     DrawablePtr d;
+     extern ddBuffer *pPEXBuffer;
+ 
+     LU_DRAWABLE (strmPtr->drawable, d);
+ 
+     /* no way to check visualID besides doing the work of Match */
+ 
+     SETUP_INQ(pexMatchRendererTargetsReply);
+ 
+     err = MatchRendererTargets(d, (int)strmPtr->depth, (int)strmPtr->type, 
+ 			   (VisualID)strmPtr->visualID,
+ 			   (int)strmPtr->maxTriplets, pPEXBuffer );
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+ 
+     {
+ 	SETUP_VAR_REPLY(pexMatchRendererTargetsReply);
+ 	WritePEXBufferReply(pexMatchRendererTargetsReply);
+     }
+     return( err );
+ 
+ } /* end-PEXMatchRendererTargets() */
+ 
+ ErrorCode
+ PEXEscape( cntxtPtr, strmPtr )
+ pexContext		  	*cntxtPtr;
+ pexEscapeReq	   	 	*strmPtr;
+ {
+     ErrorCode err = Success;
+     ddRendererStr *prend = 0;
+     pexEscapeSetEchoColourData *ptr;
+     CARD8 *pcs;
+ 
+     ptr = (pexEscapeSetEchoColourData *)(strmPtr + 1);
+     pcs = (CARD8 *)(ptr+1); 
+ 
+     LU_RENDERER(ptr->rdr, prend);
+ 
+     /* Support the one Registered Escape, Set Echo Color */
+     switch (strmPtr->escapeID) {
+ 	case  PEXEscapeSetEchoColour: {
+ 	  EXTRACT_COLOUR_SPECIFIER(prend->echoColour,pcs);
+ 	  break;
+ 	}
+     }
+ 
+ 
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+ 
+     return( err );
+ 
+ } /* end-PEXEscape() */
+ 
+ 
+ ErrorCode
+ PEXEscapeWithReply( cntxtPtr, strmPtr )
+ pexContext		  	*cntxtPtr;
+ pexEscapeWithReplyReq	   	*strmPtr;
+ {
+     ErrorCode err = Success;
+ 
+     /* Do nothing here, Escape is not implemented in SI 
+     */
+ 
+     if (err) PEX_ERR_EXIT(err,0,cntxtPtr);
+ 
+     return( err );
+ 
+ } /* end-PEXEscapeWithReply() */
  /*++
   *
   *	End of File

------------------------------------------------------------------------
Hopfen und Malz, Gott erhalts

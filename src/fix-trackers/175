Path: news.crl.dec.com!pa.dec.com!nobody
Message-Id: <9203042011.AA04535@exhume.lcs.mit.edu>
To: fix-trackers@expo.lcs.mit.edu
Subject: (seq: 2399) PEX 5.1 dipex SI release part 4 of 4 (ddpex changes)
Date: Wed, 04 Mar 92 15:11:22 EST
From: Jay Hersh <hersh@expo.lcs.mit.edu>
Distribution: dec
X-Mailing-List: fix-trackers@expo.lcs.mit.edu
X-Disclaimer: This message originated from a mailing list outside of Digital.
Newsgroups: dec.mail.lists.x.fix-trackers
Approved: news@usenet.pa.dec.com


*** /tmp/da5880	Wed Mar  4 14:39:54 1992
--- extensions/server/PEX/ddpex/mi/level4/miPick.c	Wed Mar  4 14:11:00 1992
***************
*** 1,4 ****
! /* $XConsortium: miPick.c,v 5.3 92/02/06 11:19:03 mor Exp $ */
  
  
  /***********************************************************
--- 1,4 ----
! /* $XConsortium: miPick.c,v 5.4 92/03/04 14:10:47 hersh Exp $ */
  
  
  /***********************************************************
***************
*** 627,637 ****
      if (ppm->devPriv) xfree(ppm->devPriv);
  
      /* go through the path and update the structures' ref. count */
!     path_update_struct_refs(	ppm->path, (diResourceHandle) NULL,
! 				PICK_RESOURCE, REMOVE);
  
      if (ppm->path) puDeleteList(ppm->path);
  
      UpdateWksRefs(ppm->pWks, (diResourceHandle) ppm, PICK_RESOURCE, REMOVE);
  
      if (ppm->incl_handle)
--- 627,638 ----
      if (ppm->devPriv) xfree(ppm->devPriv);
  
      /* go through the path and update the structures' ref. count */
!     if (ppm->path) path_update_struct_refs( ppm->path, (diResourceHandle) NULL,
! 					    PICK_RESOURCE, REMOVE);
  
      if (ppm->path) puDeleteList(ppm->path);
  
+     if (ppm->pWks)
      UpdateWksRefs(ppm->pWks, (diResourceHandle) ppm, PICK_RESOURCE, REMOVE);
  
      if (ppm->incl_handle)
*** /tmp/da5895	Wed Mar  4 14:40:00 1992
--- extensions/server/PEX/ddpex/mi/level4/miWks.c	Wed Mar  4 14:11:09 1992
***************
*** 1,4 ****
! /* $XConsortium: miWks.c,v 5.6 91/10/01 15:31:03 hersh Exp $ */
  
  /***********************************************************
  Copyright (c) 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
--- 1,4 ----
! /* $XConsortium: miWks.c,v 5.7 92/03/04 14:10:57 hersh Exp $ */
  
  /***********************************************************
  Copyright (c) 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
***************
*** 282,287 ****
--- 282,291 ----
  	MIWKS_SETNS(pInitInfo->pHighExclSet, prend->ns[(int) DD_HIGH_EXCL_NS], pWKS);
  	MIWKS_SETNS(pInitInfo->pInvisInclSet, prend->ns[(int) DD_INVIS_INCL_NS], pWKS);
  	MIWKS_SETNS(pInitInfo->pInvisExclSet, prend->ns[(int) DD_INVIS_EXCL_NS], pWKS);
+         /* These are for Renderer Picking, not used for Wks */
+         MIWKS_SETNS(0, prend->ns[(int) DD_PICK_INCL_NS], pWKS);
+         MIWKS_SETNS(0, prend->ns[(int) DD_PICK_EXCL_NS], pWKS);
+ 
  
  	prend->hlhsrMode = PEXHlhsrOff;
  	prend->npcSubvolume = NPCInit;
*** /tmp/da5915	Wed Mar  4 14:40:46 1992
--- extensions/server/PEX/ddpex/mi/level3/Imakefile	Wed Mar  4 14:11:55 1992
***************
*** 1,5 ****
  XCOMM
! XCOMM $XConsortium: Imakefile,v 5.4 91/07/24 16:58:06 rws Exp $
  XCOMM
  XCOMM 
  XCOMM Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium
--- 1,5 ----
  XCOMM
! XCOMM $XConsortium: Imakefile,v 5.5 92/03/04 14:11:42 hersh Exp $
  XCOMM
  XCOMM 
  XCOMM Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium
***************
*** 46,54 ****
  	-I$(PEXSERVINC) \
  	-I$(SERVERSRC)/include
  
! SRCS = miRender.c 
  
! OBJS = miRender.o 
  
  NormalLibraryObjectRule()
  
--- 46,54 ----
  	-I$(PEXSERVINC) \
  	-I$(SERVERSRC)/include
  
! SRCS = miRender.c miRndrPick.c
  
! OBJS = miRender.o miRndrPick.o
  
  NormalLibraryObjectRule()
  
*** /dev/null	Wed Mar  4 14:40:50 1992
--- extensions/server/PEX/ddpex/mi/level3/miRndrPick.c	Wed Mar  4 14:12:26 1992
***************
*** 0 ****
--- 1,175 ----
+ /* $XConsortium: miRndrPick.c,v 1.1 92/03/04 14:11:52 hersh Exp $ */
+ 
+ /************************************************************
+ Copyright 1992 by The Massachusetts Institute of Technology
+ 
+ Permission to use, copy, modify, and distribute this
+ software and its documentation for any purpose and without
+ fee is hereby granted, provided that the above copyright
+ notice appear in all copies and that both that copyright
+ notice and this permission notice appear in supporting
+ docu- mentation, and that the name of MIT not be used in
+ advertising or publicity pertaining to distribution of the
+ software without specific prior written permission.
+ M.I.T. makes no representation about the suitability of
+ this software for any purpose. It is provided "as is"
+ without any express or implied warranty.
+ 
+ MIT DISCLAIMS ALL WARRANTIES WITH REGARD TO  THIS  SOFTWARE,
+ INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FIT-
+ NESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL MIT BE  LI-
+ ABLE  FOR  ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
+ ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,  DATA  OR
+ PROFITS,  WHETHER  IN  AN  ACTION OF CONTRACT, NEGLIGENCE OR
+ OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
+ THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ 
+ ******************************************************************/
+ 
+ #include "miLUT.h"
+ #include "ddpex3.h"
+ #include "PEXproto.h"
+ #include "PEXprotost.h"
+ #include "PEXErr.h"
+ #include "pexUtils.h"
+ #include "pixmap.h"
+ #include "windowstr.h"
+ #include "regionstr.h"
+ #include "miscstruct.h"
+ #include "miRender.h"
+ #include "miStruct.h"
+ #include "miWks.h"
+ #include "ddpex4.h"
+ 
+ /* External variables used */
+ 
+ extern  void		mi_set_filters();
+ extern	void		miMatMult();
+ extern	ddpex3rtn	miBldViewport_xform();
+ extern	ddpex3rtn	miBldCC_xform();
+ extern	ocTableType	ParseOCTable[];
+ extern  void		(*DestroyOCTable[])();
+ extern  ocTableType	InitExecuteOCTable[];
+ extern  ocTableType	PickExecuteOCTable[];
+ extern  ocTableType	SearchExecuteOCTable[];
+ extern  RendTableType	RenderPrimitiveTable[];
+ extern  RendTableType	PickPrimitiveTable[];
+ 
+ 
+ /* Level III Renderer Pick Procedures */
+ 
+ /*++
+ |
+ |  Function Name:      CreatePseudoPickMeasure
+ |
+ |  Function Description:
+ |     Create a Pick Measure for Renderer Picking use 
+ |
+ |  Note(s):
+ |
+ --*/
+ 
+ ddpex3rtn
+ CreatePseudoPickMeasure( pRend)
+ ddRendererPtr       pRend;    /* renderer handle */
+ {
+     register miPickMeasureStr *ppm;
+ 
+     ppm = (miPickMeasureStr *) xalloc(sizeof(miPickMeasureStr));
+     if (!ppm) return (BadAlloc);
+ 
+     /* initialize pointers to NULL values */
+     ppm->path = 0;
+     ppm->pWks = 0;
+     ppm->incl_handle = 0;
+     ppm->excl_handle = 0;
+ 
+     (pRend->pickstr.pseudoPM)->deviceData = (ddPointer) ppm;
+     return(Success);
+ }
+ 
+ 
+ /*++
+ |
+ |  Function Name:      ChangePseudoPickMeasure
+ |
+ |  Function Description:
+ |     Change a Pick Measure for Renderer Picking use 
+ |
+ |  Note(s):
+ |
+ --*/
+ 
+ ddpex3rtn
+ ChangePseudoPickMeasure( pRend, pRec)
+ ddRendererPtr       pRend;    /* renderer handle */
+ ddPickRecord       *pRec;     /* PickRecord */
+ {
+     register miPickMeasureStr *ppm;
+     
+     ppm = (miPickMeasureStr *) (pRend->pickstr.pseudoPM)->deviceData;
+ 
+     return(Success);
+ }
+ 
+ ddpex3rtn
+ EndPickOne( pRend, pBuffer)
+ /* in */
+ ddRendererPtr       pRend;    /* renderer handle */
+ /* out */
+ ddBufferPtr     pBuffer;    /* list of pick element ref */
+ {
+     ddpex3rtn		err = Success;
+ 
+    /* JSH - to be filled in later with stuff that counts and
+       returns the path from the pick measure 
+   */
+   return(err);
+ }
+ 
+ 
+ ddpex3rtn
+ PickOne( pRend)
+ /* in */
+ ddRendererPtr       pRend;    /* renderer handle */
+ {
+     ddpex3rtn		err = Success;
+ 
+     /* JSH this one uses the structure handle in prend->pickstr
+        and makes a fake ddElementRange so that it can call
+        RenderElements to render all elements in the structure
+    */
+ 
+   return(err);
+ }
+ 
+ ddpex3rtn
+ EndPickAll( pRend, pBuffer)
+ /* in */
+ ddRendererPtr       pRend;    /* renderer handle */
+ /* out */
+ ddBufferPtr     pBuffer;    /* list of pick element ref */
+ {
+     ddpex3rtn		err = Success;
+ 
+    /* JSH - to be filled in later with stuff that counts and
+       returns the path from the pick measure 
+   */
+   return(err);
+ }
+ 
+ 
+ ddpex3rtn
+ PickAll( pRend)
+ /* in */
+ ddRendererPtr       pRend;    /* renderer handle */
+ {
+     ddpex3rtn		err = Success;
+ 
+     /* JSH this one uses the structure handle in prend->pickstr
+        and makes a fake ddElementRange so that it can call
+        RenderElements to render all elements in the structure
+    */
+ 
+   return(err);
+ }
*** /tmp/da5947	Wed Mar  4 14:40:53 1992
--- extensions/server/PEX/ddpex/mi/level3/miRender.c	Wed Mar  4 14:12:40 1992
***************
*** 1,4 ****
! /* $XConsortium: miRender.c,v 5.4 91/11/15 19:43:06 hersh Exp $ */
  
  /***********************************************************
  Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
--- 1,4 ----
! /* $XConsortium: miRender.c,v 5.5 92/03/04 14:12:23 hersh Exp $ */
  
  /***********************************************************
  Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
***************
*** 374,379 ****
--- 374,433 ----
  
  /*++
   |
+  |  Function Name:	RenderElements
+  |
+  |  Function Description:
+  |	 Supports the PEXRenderElements request.
+  |
+  |  Note(s):
+  |
+  --*/
+ 
+ ddpex3rtn
+ RenderElements(pRend, pStr, range)
+ /* in */
+     ddRendererPtr       pRend;	  /* renderer handle */
+     diStructHandle      pStr;
+     ddElementRange      *range;
+ /* out */
+ {
+ 
+     ddpex3rtn		err = Success;
+ 
+   /* JSH - this functionality to be added later */
+ 
+   return(err);
+ }
+ 
+ /*++
+  |
+  |  Function Name:      AccumulateState	
+  |
+  |  Function Description:
+  |	 Supports the PEXAccumulateState request.
+  |
+  |  Note(s):
+  |
+  --*/
+ 
+ ddpex3rtn
+ AccumulateState(pRend,  pAccSt )
+ /* in */
+     ddRendererPtr       pRend;	  /* renderer handle */
+ ddAccStPtr          pAccSt;	  /* accumulate state handle */
+ /* out */
+ {
+ 
+     ddpex3rtn		err = Success;
+ 
+   /* JSH - this functionality to be added later */
+ 
+   return(err);
+ }
+ 
+ 
+ /*++
+  |
   |  Function Name:	init_def_matrix
   |
   |  Note(s):
***************
*** 927,933 ****
      /* do double buffering stuff */
      /* do hlhsr stuff */
  
!     pRend->state = PEXRendering;
  
      return (Success);
  }
--- 981,987 ----
      /* do double buffering stuff */
      /* do hlhsr stuff */
  
!     pRend->state = PEXPicking;
  
      return (Success);
  }
*** /tmp/da5965	Wed Mar  4 14:41:12 1992
--- extensions/server/PEX/ddpex/mi/shared/miMisc.c	Wed Mar  4 14:13:42 1992
***************
*** 1,4 ****
! /* $XConsortium: miMisc.c,v 5.3 91/07/10 09:08:10 rws Exp $ */
  
  /***********************************************************
  Copyright (c) 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
--- 1,4 ----
! /* $XConsortium: miMisc.c,v 5.4 92/03/04 14:13:28 hersh Exp $ */
  
  /***********************************************************
  Copyright (c) 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
***************
*** 27,32 ****
--- 27,33 ----
  #include "mipex.h"
  #include "miInfo.h"
  #include "pexUtils.h"
+ #include "PEXprotost.h"
  
  /* pex device dependent initialization */
  ddpex43rtn
***************
*** 722,724 ****
--- 723,817 ----
      return (Success);
  }				  /* InquireEnumTypeInfo */
  
+ /*************************************************************************
+  * macro for MatchRendererTargets.
+  */
+ 
+ /* 30 is arbitrary constant */
+ #define ADD_TRIPLET(d,t,v) { int diff; \
+           if ((pexBuffer->dataSize + sizeof(pexRendererTarget)) > \
+                                                 pexBuffer->bufSize){\
+             diff = (unsigned long)p - (unsigned long)pexBuffer->pBuf; \
+             puBuffRealloc(pexBuffer,pexBuffer->bufSize + \
+                                              30*sizeof(pexRendererTarget)); \
+ 	    p = (pexRendererTarget *)(((unsigned long)pexBuffer->pBuf) +diff);\
+ 	  } \
+ 	  p->depth = (d); \
+           p->type = (t); \
+ 	  p->visualID = (v); \
+ 	  pexBuffer->dataSize += sizeof(pexRendererTarget); \
+           p++; nTargets++; \
+           if (nTargets >= maxTriplets) return (Success); \
+           }
+ /*++
+  |
+  |  Function Name:  MatchRendererTargets    
+  |
+  |  Function Description:
+  |       Handles Match Renderer Taregets Request.
+  |       Given a visualID, depth & drawable type, tell whether PEX will
+  |       render into it.  Real life: PEX does not do all drawables.
+  |
+  |  Note(s):
+  |
+  --*/
+ 			       
+ 
+ ddpex43rtn
+ MatchRendererTargets(pDraw, depth, drawType, visualID, maxTriplets, pexBuffer)
+     DrawablePtr pDraw;
+     int         depth;
+     int         drawType;
+     VisualID    visualID;
+     int         maxTriplets;
+     ddBuffer   *pexBuffer;
+ {
+     int i;
+     int nTargets = 0;
+ 
+     register ScreenPtr pScreen;
+     int idepth, ivisual;
+     DepthPtr pDepth;
+ 
+     pexRendererTarget *p = (pexRendererTarget *)pexBuffer->pBuf;
+ 
+ /*
+  * Code originally lifted from CreateWindow (x11/server/dix/window.c)
+  */
+     pScreen = pDraw->pScreen;
+ 
+     for(idepth = 0; idepth < pScreen->numDepths; idepth++) {
+ 
+       pDepth = (DepthPtr) &pScreen->allowedDepths[idepth];
+ 
+       /*
+        * if depth is wild carded, then we need to walk them all.
+        */
+       if ((depth == pDepth->depth) || (depth == 0)) {
+ 
+ 	for (ivisual = 0; ivisual < pDepth->numVids; ivisual++)	{
+ 
+ 	  /* if visual is a match or it's wildcarded then do it */
+ 	  if ((visualID == pDepth->vids[ivisual]) || (visualID == 0)) {
+ 	    /*
+              * Here is the moment of truth, this is just going to say
+              * that everything is available for PEX rendering. It is possible
+              * that vendors will want to create a global table that hangs
+              * around.  That way they can be qualified in ddpexInit().
+              * If compiled with -DMULTIBUFFER it assumes that mutli buffers
+              * are fair game.
+              */
+ 	    if ((drawType == PEXWindow) || (drawType == PEXDontCare))
+ 	      ADD_TRIPLET(pDepth->depth, pDepth->vids[ivisual], PEXWindow);
+ 	    if ((drawType == PEXPixmap) || (drawType == PEXDontCare))
+ 	      ADD_TRIPLET(pDepth->depth, pDepth->vids[ivisual], PEXPixmap);
+ #ifdef MULTIBUFFER
+ 	    if ((drawType == PEXBuffer) || (drawType == PEXDontCare))
+ 	      ADD_TRIPLET(pDepth->depth, pDepth->vids[ivisual], PEXBuffer);
+ #endif	      
+ 	  }
+ 	}
+       }
+     }
+     return (Success);
+ }

------------------------------------------------------------------------
Hopfen und Malz, Gott erhalts

Path: news.crl.dec.com!hollie.rdg.dec.com!pa.dec.com!nobody
Message-Id: <9204132134.AA21339@explain.lcs.mit.edu>
To: fix-trackers@expo.lcs.mit.edu
Subject: (seq: 2452) close XBUG #5151: server: mfb could use some optimized polygon code
Date: Mon, 13 Apr 92 17:34:06 EDT
From: Bob Scheifler <rws@expo.lcs.mit.edu>
Distribution: dec
X-Mailing-List: fix-trackers@expo.lcs.mit.edu
X-Disclaimer: This message originated from a mailing list outside of Digital.
Newsgroups: dec.mail.lists.x.fix-trackers
Approved: news@usenet.pa.dec.com

### bug number:   5151
### area:         server
### severity:     low
### comments:     

*** /tmp/,RCSt1021239	Mon Apr 13 17:27:34 1992
--- server/ddx/mfb/mfb.h	Mon Apr 13 17:27:35 1992
***************
*** 22,28 ****
  SOFTWARE.
  
  ******************************************************************/
! /* $XConsortium: mfb.h,v 5.15 91/04/10 11:43:42 keith Exp $ */
  /* Monochrome Frame Buffer definitions 
     written by drewry, september 1986
  */
--- 22,28 ----
  SOFTWARE.
  
  ******************************************************************/
! /* $XConsortium: mfb.h,v 5.16 92/02/24 19:05:55 keith Exp $ */
  /* Monochrome Frame Buffer definitions 
     written by drewry, september 1986
  */
***************
*** 81,86 ****
--- 81,89 ----
  extern void mfbPolyPoint();
  extern RegionPtr mfbCopyPlane();
  extern void mfbPolyFillArcSolid();
+ extern void mfbFillPolyWhite();
+ extern void mfbFillPolyBlack();
+ extern void mfbFillPolyInvert();
  
  extern void mfbSetSpans();
  extern void mfbGetSpans();
*** /tmp/d21265	Mon Apr 13 17:31:50 1992
--- server/ddx/mfb/Imakefile	Mon Feb 24 19:05:54 1992
***************
*** 1,4 ****
! XCOMM $XConsortium: Imakefile,v 1.32 91/07/16 22:51:36 gildea Exp $
  #include <Server.tmpl>
  
  SRCS1 =	 mfbgc.c mfbwindow.c mfbfont.c \
--- 1,4 ----
! XCOMM $XConsortium: Imakefile,v 1.33 92/02/24 19:05:52 keith Exp $
  #include <Server.tmpl>
  
  SRCS1 =	 mfbgc.c mfbwindow.c mfbfont.c \
***************
*** 13,19 ****
  SRCS =	 $(SRCS1) mfbseg.c mfbpgbwht.c mfbpgbblak.c mfbpgbinv.c mfbigbwht.c \
  	 mfbigbblak.c mfbpawhite.c mfbpablack.c mfbpainv.c mfbtewhite.c \
  	 mfbteblack.c mfbbltC.c mfbbltX.c mfbbltCI.c mfbbltO.c mfbbltG.c \
! 	 mfbtileC.c mfbtileG.c
  
  OBJS =   mfbgc.o mfbwindow.o mfbfont.o \
  	 mfbfillrct.o mfbpntwin.o maskbits.o mfbpixmap.o \
--- 13,19 ----
  SRCS =	 $(SRCS1) mfbseg.c mfbpgbwht.c mfbpgbblak.c mfbpgbinv.c mfbigbwht.c \
  	 mfbigbblak.c mfbpawhite.c mfbpablack.c mfbpainv.c mfbtewhite.c \
  	 mfbteblack.c mfbbltC.c mfbbltX.c mfbbltCI.c mfbbltO.c mfbbltG.c \
! 	 mfbtileC.c mfbtileG.c mfbplywhite.c mfbplyblack.c mfbplyinv.c
  
  OBJS =   mfbgc.o mfbwindow.o mfbfont.o \
  	 mfbfillrct.o mfbpntwin.o maskbits.o mfbpixmap.o \
***************
*** 25,31 ****
  	 mfbpgbwht.o mfbpgbblak.o mfbpgbinv.o \
  	 mfbigbwht.o mfbigbblak.o mfbcmap.o \
  	 mfbpawhite.o mfbpablack.o mfbpainv.o mfbtileC.o mfbtileG.o \
!          mfbtewhite.o mfbteblack.o mfbmisc.o mfbbstore.o
  
  INCLUDES = -I. -I../mi -I../../include -I$(INCLUDESRC) -I$(FONTSRC)/include
  LINTDEFS = -DMFBPOLYGLYPHBLT=mfbPolyGlyphBltWhite \
--- 25,32 ----
  	 mfbpgbwht.o mfbpgbblak.o mfbpgbinv.o \
  	 mfbigbwht.o mfbigbblak.o mfbcmap.o \
  	 mfbpawhite.o mfbpablack.o mfbpainv.o mfbtileC.o mfbtileG.o \
!          mfbtewhite.o mfbteblack.o mfbmisc.o mfbbstore.o \
!          mfbplywhite.o mfbplyblack.o mfbplyinv.o
  
  INCLUDES = -I. -I../mi -I../../include -I$(INCLUDESRC) -I$(FONTSRC)/include
  LINTDEFS = -DMFBPOLYGLYPHBLT=mfbPolyGlyphBltWhite \
***************
*** 59,64 ****
--- 60,71 ----
  ObjectFromSpecialSource(mfbtewhite,mfbtegblt,-DMFBTEGLYPHBLT=mfbTEGlyphBltWhite -DOP= -DCLIPTETEXT=mfbImageGlyphBltWhite)
  
  ObjectFromSpecialSource(mfbteblack,mfbtegblt,-DMFBTEGLYPHBLT=mfbTEGlyphBltBlack -DOP=\~ -DCLIPTETEXT=mfbImageGlyphBltBlack)
+ 
+ ObjectFromSpecialSource(mfbplywhite,mfbply1rct,-DMFBFILLPOLY1RECT=mfbFillPolyWhite -DOPEQ=\|= -DEQWHOLEWORD=\=\~0)
+ 
+ ObjectFromSpecialSource(mfbplyblack,mfbply1rct,-DMFBFILLPOLY1RECT=mfbFillPolyBlack -DOPEQ=\&=\~ -DEQWHOLEWORD=\=0)
+ 
+ ObjectFromSpecialSource(mfbplyinv,mfbply1rct,-DMFBFILLPOLY1RECT=mfbFillPolyInvert -DOPEQ=\^= -DEQWHOLEWORD=\^=\~0)
  
  ObjectFromSpecialSource(mfbbltC,mfbblt,-DMROP=Mcopy)
  
*** /tmp/d21284	Mon Apr 13 17:32:00 1992
--- server/ddx/mfb/mfbgc.c	Mon Feb 24 19:06:01 1992
***************
*** 21,27 ****
  SOFTWARE.
  
  ******************************************************************/
! /* $XConsortium: mfbgc.c,v 5.25 91/05/26 09:22:58 rws Exp $ */
  #include "X.h"
  #include "Xmd.h"
  #include "Xproto.h"
--- 21,27 ----
  SOFTWARE.
  
  ******************************************************************/
! /* $XConsortium: mfbgc.c,v 5.26 92/02/24 19:05:58 keith Exp $ */
  #include "X.h"
  #include "Xmd.h"
  #include "Xproto.h"
***************
*** 61,67 ****
  	mfbSegmentSS,
  	miPolyRectangle,
  	mfbZeroPolyArcSS,
! 	miFillPolygon,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
--- 61,67 ----
  	mfbSegmentSS,
  	miPolyRectangle,
  	mfbZeroPolyArcSS,
! 	mfbFillPolyWhite,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
***************
*** 85,91 ****
  	mfbSegmentSS,
  	miPolyRectangle,
  	mfbZeroPolyArcSS,
! 	miFillPolygon,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
--- 85,91 ----
  	mfbSegmentSS,
  	miPolyRectangle,
  	mfbZeroPolyArcSS,
! 	mfbFillPolyBlack,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
***************
*** 109,115 ****
  	mfbSegmentSS,
  	miPolyRectangle,
  	miZeroPolyArc,
! 	miFillPolygon,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
--- 109,115 ----
  	mfbSegmentSS,
  	miPolyRectangle,
  	miZeroPolyArc,
! 	mfbFillPolyInvert,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
***************
*** 133,139 ****
  	mfbSegmentSS,
  	miPolyRectangle,
  	miZeroPolyArc,
! 	miFillPolygon,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
--- 133,139 ----
  	mfbSegmentSS,
  	miPolyRectangle,
  	miZeroPolyArc,
! 	mfbFillPolyInvert,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
***************
*** 157,163 ****
  	mfbSegmentSS,
  	miPolyRectangle,
  	mfbZeroPolyArcSS,
! 	miFillPolygon,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
--- 157,163 ----
  	mfbSegmentSS,
  	miPolyRectangle,
  	mfbZeroPolyArcSS,
! 	mfbFillPolyWhite,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
***************
*** 181,187 ****
  	mfbSegmentSS,
  	miPolyRectangle,
  	mfbZeroPolyArcSS,
! 	miFillPolygon,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
--- 181,187 ----
  	mfbSegmentSS,
  	miPolyRectangle,
  	mfbZeroPolyArcSS,
! 	mfbFillPolyBlack,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
***************
*** 205,211 ****
  	mfbSegmentSS,
  	miPolyRectangle,
  	miZeroPolyArc,
! 	miFillPolygon,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
--- 205,211 ----
  	mfbSegmentSS,
  	miPolyRectangle,
  	miZeroPolyArc,
! 	mfbFillPolyInvert,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
***************
*** 229,235 ****
  	mfbSegmentSS,
  	miPolyRectangle,
  	miZeroPolyArc,
! 	miFillPolygon,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
--- 229,235 ----
  	mfbSegmentSS,
  	miPolyRectangle,
  	miZeroPolyArc,
! 	mfbFillPolyInvert,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
***************
*** 253,259 ****
  	mfbSegmentSS,
  	miPolyRectangle,
  	mfbZeroPolyArcSS,
! 	miFillPolygon,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
--- 253,259 ----
  	mfbSegmentSS,
  	miPolyRectangle,
  	mfbZeroPolyArcSS,
! 	mfbFillPolyWhite,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
***************
*** 277,283 ****
  	mfbSegmentSS,
  	miPolyRectangle,
  	mfbZeroPolyArcSS,
! 	miFillPolygon,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
--- 277,283 ----
  	mfbSegmentSS,
  	miPolyRectangle,
  	mfbZeroPolyArcSS,
! 	mfbFillPolyBlack,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
***************
*** 301,307 ****
  	mfbSegmentSS,
  	miPolyRectangle,
  	miZeroPolyArc,
! 	miFillPolygon,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
--- 301,307 ----
  	mfbSegmentSS,
  	miPolyRectangle,
  	miZeroPolyArc,
! 	mfbFillPolyInvert,
  	mfbPolyFillRect,
  	mfbPolyFillArcSolid,
  	miPolyText8,
***************
*** 958,963 ****
--- 958,964 ----
      {
  	/* install a suitable fillspans and pushpixels */
  	pGC->ops->PushPixels = mfbPushPixels;
+ 	pGC->ops->FillPolygon = miFillPolygon;
  	if ((pGC->fillStyle == FillSolid) ||
  	    ((pGC->fillStyle == FillOpaqueStippled) &&
  	     ((pGC->fgPixel & 1) == (pGC->bgPixel & 1))))
***************
*** 967,981 ****
--- 968,986 ----
  	    {
  	      case RROP_WHITE:
  		pGC->ops->FillSpans = mfbWhiteSolidFS;
+ 		pGC->ops->FillPolygon = mfbFillPolyWhite;
  		break;
  	      case RROP_BLACK:
  		pGC->ops->FillSpans = mfbBlackSolidFS;
+ 		pGC->ops->FillPolygon = mfbFillPolyBlack;
  		break;
  	      case RROP_INVERT:
  		pGC->ops->FillSpans = mfbInvertSolidFS;
+ 		pGC->ops->FillPolygon = mfbFillPolyInvert;
  		break;
  	      case RROP_NOP:
  		pGC->ops->FillSpans = NoopDDA;
+ 		pGC->ops->FillPolygon = NoopDDA;
  		break;
  	    }
  	}
*** /dev/null	Mon Apr 13 17:32:02 1992
--- server/ddx/mfb/mfbply1rct.c	Mon Feb 24 19:06:11 1992
***************
*** 0 ****
--- 1,254 ----
+ /*
+  * $XConsortium: mfbply1rct.c,v 1.1 92/02/24 19:06:01 keith Exp $
+  *
+  * Copyright 1990 Massachusetts Institute of Technology
+  *
+  * Permission to use, copy, modify, distribute, and sell this software and its
+  * documentation for any purpose is hereby granted without fee, provided that
+  * the above copyright notice appear in all copies and that both that
+  * copyright notice and this permission notice appear in supporting
+  * documentation, and that the name of M.I.T. not be used in advertising or
+  * publicity pertaining to distribution of the software without specific,
+  * written prior permission.  M.I.T. makes no representations about the
+  * suitability of this software for any purpose.  It is provided "as is"
+  * without express or implied warranty.
+  *
+  * M.I.T. DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
+  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL M.I.T.
+  * BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
+  * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
+  * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+  *
+  * Author:  Keith Packard, MIT X Consortium
+  */
+ 
+ #include "X.h"
+ 
+ #include "gcstruct.h"
+ #include "windowstr.h"
+ #include "pixmapstr.h"
+ #include "regionstr.h"
+ #include "scrnintstr.h"
+ #include "mistruct.h"
+ 
+ #include "mfb.h"
+ #include "maskbits.h"
+ 
+ #if defined(mips) || defined(sparc)
+ #define GetHighWord(x) (((int) (x)) >> 16)
+ #else
+ #define GetHighWord(x) (((int) (x)) / 65536)
+ #endif
+ 
+ #if IMAGE_BYTE_ORDER == MSBFirst
+ #define intToCoord(i,x,y)   (((x) = GetHighWord(i)), ((y) = (int) ((short) (i))))
+ #define coordToInt(x,y)	(((x) << 16) | (y))
+ #define intToX(i)	(GetHighWord(i))
+ #define intToY(i)	((int) ((short) i))
+ #else
+ #define intToCoord(i,x,y)   (((x) = (int) ((short) (i))), ((y) = GetHighWord(i)))
+ #define coordToInt(x,y)	(((y) << 16) | (x))
+ #define intToX(i)	((int) ((short) (i)))
+ #define intToY(i)	(GetHighWord(i))
+ #endif
+ 
+ void
+ MFBFILLPOLY1RECT (pDrawable, pGC, shape, mode, count, ptsIn)
+     DrawablePtr	pDrawable;
+     GCPtr	pGC;
+     int		count;
+     DDXPointPtr	ptsIn;
+ {
+     mfbPrivGCPtr    devPriv;
+     int		    nwidth;
+     unsigned long   *addrl, *addr;
+     int		    maxy;
+     int		    origin;
+     register int    vertex1, vertex2;
+     int		    c;
+     BoxPtr	    extents;
+     int		    clip;
+     int		    y;
+     int		    *vertex1p, *vertex2p;
+     int		    *endp;
+     int		    x1, x2;
+     int		    dx1, dx2;
+     int		    dy1, dy2;
+     int		    e1, e2;
+     int		    step1, step2;
+     int		    sign1, sign2;
+     int		    h;
+     int		    l, r;
+     unsigned long   mask, bits = ~((unsigned long)0);
+     int		    nmiddle;
+ 
+     devPriv = (mfbPrivGC *)(pGC->devPrivates[mfbGCPrivateIndex].ptr);
+     if (mode == CoordModePrevious || shape != Convex ||
+ 	REGION_NUM_RECTS(devPriv->pCompositeClip) != 1)
+     {
+ 	miFillPolygon (pDrawable, pGC, shape, mode, count, ptsIn);
+ 	return;
+     }
+     origin = *((int *) &pDrawable->x);
+     origin -= (origin & 0x8000) << 1;
+     extents = &devPriv->pCompositeClip->extents;
+     vertex1 = *((int *) &extents->x1) - origin;
+     vertex2 = *((int *) &extents->x2) - origin - 0x00010001;
+     clip = 0;
+     y = 32767;
+     maxy = 0;
+     vertex2p = (int *) ptsIn;
+     endp = vertex2p + count;
+     while (count--)
+     {
+ 	c = *vertex2p;
+ 	clip |= (c - vertex1) | (vertex2 - c);
+ 	c = intToY(c);
+ 	if (c < y) 
+ 	{
+ 	    y = c;
+ 	    vertex1p = vertex2p;
+ 	}
+ 	vertex2p++;
+ 	if (c > maxy)
+ 	    maxy = c;
+     }
+     if (y == maxy)
+ 	return;
+ 
+     if (clip & 0x80008000)
+     {
+ 	miFillPolygon (pDrawable, pGC, shape, mode, vertex2p - (int *) ptsIn, ptsIn);
+ 	return;
+     }
+ 
+ #define AddrYPlus(a,y)  (unsigned long *) (((unsigned char *) (a)) + (y) * nwidth)
+ 
+     mfbGetTypedWidthAndPointer(pDrawable, nwidth, addrl, unsigned char, unsigned long);
+     addrl = AddrYPlus(addrl,y + pDrawable->y);
+     origin = intToX(origin);
+     vertex2p = vertex1p;
+     vertex2 = vertex1 = *vertex2p++;
+     if (vertex2p == endp)
+ 	vertex2p = (int *) ptsIn;
+ #define Setup(c,x,vertex,dx,dy,e,sign,step) {\
+     x = intToX(vertex); \
+     if (dy = intToY(c) - y) { \
+     	dx = intToX(c) - x; \
+ 	step = 0; \
+     	if (dx >= 0) \
+     	{ \
+ 	    e = 0; \
+ 	    sign = 1; \
+ 	    if (dx >= dy) {\
+ 	    	step = dx / dy; \
+ 	    	dx = dx % dy; \
+ 	    } \
+     	} \
+     	else \
+     	{ \
+ 	    e = 1 - dy; \
+ 	    sign = -1; \
+ 	    dx = -dx; \
+ 	    if (dx >= dy) { \
+ 		step = - (dx / dy); \
+ 		dx = dx % dy; \
+ 	    } \
+     	} \
+     } \
+     x += origin; \
+     vertex = c; \
+ }
+ 
+ #define Step(x,dx,dy,e,sign,step) {\
+     x += step; \
+     if ((e += dx) > 0) \
+     { \
+ 	x += sign; \
+ 	e -= dy; \
+     } \
+ }
+     for (;;)
+     {
+ 	if (y == intToY(vertex1))
+ 	{
+ 	    do
+ 	    {
+ 	    	if (vertex1p == (int *) ptsIn)
+ 		    vertex1p = endp;
+ 	    	c = *--vertex1p;
+ 	    	Setup (c,x1,vertex1,dx1,dy1,e1,sign1,step1)
+ 	    } while (y == intToY(vertex1));
+ 	    h = dy1;
+ 	}
+ 	else
+ 	{
+ 	    Step(x1,dx1,dy1,e1,sign1,step1)
+ 	    h = intToY(vertex1) - y;
+ 	}
+ 	if (y == intToY(vertex2))
+ 	{
+ 	    do
+ 	    {
+ 	    	c = *vertex2p++;
+ 	    	if (vertex2p == endp)
+ 		    vertex2p = (int *) ptsIn;
+ 	    	Setup (c,x2,vertex2,dx2,dy2,e2,sign2,step2)
+ 	    } while (y == intToY(vertex2));
+ 	    if (dy2 < h)
+ 		h = dy2;
+ 	}
+ 	else
+ 	{
+ 	    Step(x2,dx2,dy2,e2,sign2,step2)
+ 	    if ((c = (intToY(vertex2) - y)) < h)
+ 		h = c;
+ 	}
+ 	/* fill spans for this segment */
+ 	y += h;
+ 	for (;;)
+ 	{
+ 	    l = x1;
+ 	    r = x2;
+ 	    nmiddle = x2 - x1;
+     	    if (nmiddle < 0)
+ 	    {
+ 	    	nmiddle = -nmiddle;
+ 	    	l = x2;
+ 	    	r = x1;
+     	    }
+ 	    c = l & PIM;
+ 	    l -= c;
+ 	    l = l >> (PWSH - 2);
+ 	    addr = (unsigned long *) (((char *) addrl) + l);
+ 	    if (c + nmiddle < PPW)
+ 	    {
+ 	    	mask = SCRRIGHT (bits,c) ^ SCRRIGHT (bits,c+nmiddle);
+ 	    	*addr OPEQ mask;
+ 	    }
+ 	    else
+ 	    {
+ 	    	if (c)
+ 	    	{
+ 	    	    mask = SCRRIGHT(bits, c);
+ 		    *addr OPEQ mask;
+ 	    	    nmiddle += c - PPW;
+ 	    	    addr++;
+ 	    	}
+ 	    	nmiddle >>= PWSH;
+ 		Duff (nmiddle, *addr++ EQWHOLEWORD)
+ 	    	if (mask = ~SCRRIGHT(bits, r & PIM))
+ 	    	    *addr OPEQ mask;
+ 	    }
+ 	    if (!--h)
+ 		break;
+ 	    addrl = AddrYPlus (addrl, 1);
+ 	    Step(x1,dx1,dy1,e1,sign1,step1)
+ 	    Step(x2,dx2,dy2,e2,sign2,step2)
+ 	}
+ 	if (y == maxy)
+ 	    break;
+ 	addrl = AddrYPlus (addrl, 1);
+     }
+ }

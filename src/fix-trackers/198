Path: news.crl.dec.com!pa.dec.com!nobody
Message-Id: <9203251711.AA02002@explain.lcs.mit.edu>
To: fix-trackers@expo.lcs.mit.edu
Subject: (seq: 2423) close XBUG #5076, #5077:  XTEST relative motion, button mapping
Date: Wed, 25 Mar 92 12:11:34 EST
From: Bob Scheifler <rws@expo.lcs.mit.edu>
Distribution: dec
X-Mailing-List: fix-trackers@expo.lcs.mit.edu
X-Disclaimer: This message originated from a mailing list outside of Digital.
Newsgroups: dec.mail.lists.x.fix-trackers
Approved: news@usenet.pa.dec.com


Subject: xtest: should support relative motion events
### bug number:   5076
### area:         xtest
### severity:     low
### comments:     

Subject: xtest: should send physical, not logical button numbers
### bug number:   5077
### area:         xtest
### severity:     low
### comments:     

*** /tmp/d01864	Wed Mar 25 11:56:03 1992
--- extensions/include/XTest.h	Thu Mar 19 11:29:34 1992
***************
*** 1,4 ****
! /* $XConsortium: XTest.h,v 1.2 92/02/01 15:05:45 rws Exp $ */
  /*
  
  Copyright 1992 by the Massachusetts Institute of Technology
--- 1,4 ----
! /* $XConsortium: XTest.h,v 1.3 92/03/19 11:28:19 rws Exp $ */
  /*
  
  Copyright 1992 by the Massachusetts Institute of Technology
***************
*** 69,74 ****
--- 69,83 ----
  #if NeedFunctionPrototypes
      Display*		/* dpy */,
      int			/* screen */,
+     int			/* x */,
+     int			/* y */,
+     unsigned long	/* delay */
+ #endif
+ );
+ 
+ extern XTestFakeRelativeMotionEvent(
+ #if NeedFunctionPrototypes
+     Display*		/* dpy */,
      int			/* x */,
      int			/* y */,
      unsigned long	/* delay */
*** /tmp/d01881	Wed Mar 25 11:56:11 1992
--- extensions/include/xteststr.h	Thu Mar 19 11:28:22 1992
***************
*** 1,4 ****
! /* $XConsortium: xteststr.h,v 1.3 92/02/05 16:18:15 rws Exp $ */
  /*
  
  Copyright 1992 by the Massachusetts Institute of Technology
--- 1,4 ----
! /* $XConsortium: xteststr.h,v 1.4 92/03/19 11:27:05 rws Exp $ */
  /*
  
  Copyright 1992 by the Massachusetts Institute of Technology
***************
*** 23,29 ****
  
  #define XTestNumberErrors	0
  
! #define XTEST_MAJOR	1
  #define XTEST_MINOR	0
  
  #define XTestCurrentCursor ((Cursor)1)
--- 23,29 ----
  
  #define XTestNumberErrors	0
  
! #define XTEST_MAJOR	2
  #define XTEST_MINOR	0
  
  #define XTestCurrentCursor ((Cursor)1)
*** /tmp/d01902	Wed Mar 25 11:56:54 1992
--- extensions/lib/xtest/XTest.c	Thu Mar 19 11:27:17 1992
***************
*** 1,4 ****
! /* $XConsortium: XTest.c,v 1.5 92/02/05 16:17:47 rws Exp $ */
  /*
  
  Copyright 1990, 1991 by UniSoft Group Limited
--- 1,4 ----
! /* $XConsortium: XTest.c,v 1.6 92/03/19 11:25:45 rws Exp $ */
  /*
  
  Copyright 1990, 1991 by UniSoft Group Limited
***************
*** 194,202 ****
      req->reqType = info->codes->major_opcode;
      req->xtReqType = X_XTestFakeInput;
      req->type = MotionNotify;
!     req->root = RootWindow(dpy, screen);
      req->rootX = x;
      req->rootY = y;
      req->time = delay;
      UnlockDisplay(dpy);
      SyncHandle();
--- 194,230 ----
      req->reqType = info->codes->major_opcode;
      req->xtReqType = X_XTestFakeInput;
      req->type = MotionNotify;
!     req->detail = False;
!     if (screen == -1)
! 	req->root = None;
!     else
! 	req->root = RootWindow(dpy, screen);
      req->rootX = x;
      req->rootY = y;
+     req->time = delay;
+     UnlockDisplay(dpy);
+     SyncHandle();
+ }
+ 
+ XTestFakeRelativeMotionEvent(dpy, dx, dy, delay)
+     Display *dpy;
+     int dx, dy;
+     unsigned long delay;
+ {
+     XExtDisplayInfo *info = find_display (dpy);
+     register xXTestFakeInputReq *req;
+ 
+     XTestCheckExtension (dpy, info, 0);
+ 
+     LockDisplay(dpy);
+     GetReq(XTestFakeInput, req);
+     req->reqType = info->codes->major_opcode;
+     req->xtReqType = X_XTestFakeInput;
+     req->type = MotionNotify;
+     req->detail = True;
+     req->root = None;
+     req->rootX = dx;
+     req->rootY = dy;
      req->time = delay;
      UnlockDisplay(dpy);
      SyncHandle();
*** /tmp/d01923	Wed Mar 25 11:57:35 1992
--- extensions/server/xtest.c	Mon Mar 23 16:13:11 1992
***************
*** 1,4 ****
! /* $XConsortium: xtest.c,v 1.8 92/02/25 14:21:31 rws Exp $ */
  /*
  
  Copyright 1992 by the Massachusetts Institute of Technology
--- 1,4 ----
! /* $XConsortium: xtest.c,v 1.10 92/03/23 16:12:07 rws Exp $ */
  /*
  
  Copyright 1992 by the Massachusetts Institute of Technology
***************
*** 189,200 ****
  	break;
      case MotionNotify:
  	dev = (DeviceIntPtr)LookupPointerDevice();
! 	root = LookupWindow(ev->u.keyButtonPointer.root, client);
! 	if (!root)
! 	    return BadWindow;
! 	if (root->parent)
  	{
! 	    client->errorValue = ev->u.keyButtonPointer.root;
  	    return BadValue;
  	}
  	if (ev->u.keyButtonPointer.rootX < 0 ||
--- 189,217 ----
  	break;
      case MotionNotify:
  	dev = (DeviceIntPtr)LookupPointerDevice();
! 	if (ev->u.keyButtonPointer.root == None)
! 	    root = GetCurrentRootWindow();
! 	else
  	{
! 	    root = LookupWindow(ev->u.keyButtonPointer.root, client);
! 	    if (!root)
! 		return BadWindow;
! 	    if (root->parent)
! 	    {
! 		client->errorValue = ev->u.keyButtonPointer.root;
! 		return BadValue;
! 	    }
! 	}
! 	if (ev->u.u.detail == xTrue)
! 	{
! 	    int x, y;
! 	    GetSpritePosition(&x, &y);
! 	    ev->u.keyButtonPointer.rootX += x;
! 	    ev->u.keyButtonPointer.rootY += y;
! 	}
! 	else if (ev->u.u.detail != xFalse)
! 	{
! 	    client->errorValue = ev->u.u.detail;
  	    return BadValue;
  	}
  	if (ev->u.keyButtonPointer.rootX < 0 ||
***************
*** 224,238 ****
      case ButtonPress:
      case ButtonRelease:
  	dev = (DeviceIntPtr)LookupPointerDevice();
! 	for (n = 1; n <= dev->button->numButtons; n++)
! 	    if (dev->button->map[n] == ev->u.u.detail)
! 		break;
! 	if (n > dev->button->numButtons)
  	{
  	    client->errorValue = ev->u.u.detail;
  	    return BadValue;
  	}
- 	ev->u.u.detail = n;
  	break;
      }
      ev->u.keyButtonPointer.time = currentTime.milliseconds;
--- 241,251 ----
      case ButtonPress:
      case ButtonRelease:
  	dev = (DeviceIntPtr)LookupPointerDevice();
! 	if (!ev->u.u.detail || ev->u.u.detail > dev->button->numButtons)
  	{
  	    client->errorValue = ev->u.u.detail;
  	    return BadValue;
  	}
  	break;
      }
      ev->u.keyButtonPointer.time = currentTime.milliseconds;
*** /tmp/d01960	Wed Mar 25 12:06:29 1992
--- extensions/test/xtesttest.c	Wed Mar 25 12:06:45 1992
***************
*** 1,4 ****
! /* $XConsortium: xtesttest.c,v 1.4 92/02/25 09:57:39 keith Exp $ */
  /*
  
  Copyright 1992 by the Massachusetts Institute of Technology
--- 1,4 ----
! /* $XConsortium: xtesttest.c,v 1.5 92/03/25 12:05:29 rws Exp $ */
  /*
  
  Copyright 1992 by the Massachusetts Institute of Technology
***************
*** 47,52 ****
--- 47,53 ----
      int key, minkey, maxkey;
      XEvent ev, second_ev, third_ev;
      long    delta_time;
+     unsigned char buttons[256];
  
      ProgramName = argv[0];
      for (i = 1; i < argc; i++) {
***************
*** 119,130 ****
  	ev.xkey.x_root != 10 ||
  	ev.xkey.y_root != 10)
  	printf("error: bad event received for key release\n");
!     XTestFakeButtonEvent(dpy, 1, True, 0);
      XTestFakeMotionEvent(dpy, DefaultScreen(dpy), 9, 8, 1000);
!     XTestFakeButtonEvent(dpy, 1, False, 2000);
      XNextEvent(dpy, &ev);
      if (ev.type != ButtonPress ||
! 	ev.xbutton.button != 1 ||
  	ev.xbutton.x_root != 10 ||
  	ev.xbutton.y_root != 10)
  	printf("error: bad event received for button press\n");
--- 120,134 ----
  	ev.xkey.x_root != 10 ||
  	ev.xkey.y_root != 10)
  	printf("error: bad event received for key release\n");
!     XGetPointerMapping(dpy, buttons, sizeof(buttons));
!     for (i = 0; !buttons[i] && (i < sizeof(buttons)); i++)
! 	;
!     XTestFakeButtonEvent(dpy, i + 1, True, 0);
      XTestFakeMotionEvent(dpy, DefaultScreen(dpy), 9, 8, 1000);
!     XTestFakeButtonEvent(dpy, i + 1, False, 2000);
      XNextEvent(dpy, &ev);
      if (ev.type != ButtonPress ||
! 	ev.xbutton.button != buttons[i] ||
  	ev.xbutton.x_root != 10 ||
  	ev.xbutton.y_root != 10)
  	printf("error: bad event received for button press\n");
***************
*** 138,144 ****
  	printf ("Poor event spacing is %d should be %d\n", delta_time, 1000);
      XNextEvent(dpy, &third_ev);
      if (third_ev.type != ButtonRelease ||
! 	third_ev.xbutton.button != 1 ||
  	third_ev.xbutton.x_root != 9 ||
  	third_ev.xbutton.y_root != 8)
  	printf("error: bad event received for button release\n");
--- 142,148 ----
  	printf ("Poor event spacing is %d should be %d\n", delta_time, 1000);
      XNextEvent(dpy, &third_ev);
      if (third_ev.type != ButtonRelease ||
! 	third_ev.xbutton.button != buttons[i] ||
  	third_ev.xbutton.x_root != 9 ||
  	third_ev.xbutton.y_root != 8)
  	printf("error: bad event received for button release\n");

Path: news.crl.dec.com!pa.dec.com!nobody
Message-Id: <9203022050.AA07305@explain.lcs.mit.edu>
To: fix-trackers@expo.lcs.mit.edu
Subject: (seq: 2386) close XBUG #4971: Xlib: Xlib.h could hide private data better
Date: Mon, 02 Mar 92 15:50:13 EST
From: Bob Scheifler <rws@expo.lcs.mit.edu>
Distribution: dec
X-Mailing-List: fix-trackers@expo.lcs.mit.edu
X-Disclaimer: This message originated from a mailing list outside of Digital.
Newsgroups: dec.mail.lists.x.fix-trackers
Approved: news@usenet.pa.dec.com

### bug number:   4971
### area:         Xlib
### severity:     low
### comments:     


WARNING: after installing this patch, you may find that some non-core
software now fails to compile because they reference nonportable fields.
You can either fix such code, or if you want to work around the problems,
you can either try compiling with -DXLIB_ILLEGAL_ACCESS or (if that is
not sufficient) you can #include <X11/Xlibint.h> instead of <X11.Xlib.h>.


*** /tmp/d06987	Mon Mar  2 13:09:48 1992
--- lib/X/Xlib.h	Thu Jan 30 10:27:03 1992
***************
*** 1,4 ****
! /* $XConsortium: Xlib.h,v 11.217 92/01/19 15:00:17 rws Exp $ */
  /* 
   * Copyright 1985, 1986, 1987, 1991 by the Massachusetts Institute of Technology
   *
--- 1,4 ----
! /* $XConsortium: Xlib.h,v 11.218 92/01/30 10:23:22 rws Exp $ */
  /* 
   * Copyright 1985, 1986, 1987, 1991 by the Massachusetts Institute of Technology
   *
***************
*** 72,111 ****
  #define QueuedAfterReading 1
  #define QueuedAfterFlush 2
  
! #define ConnectionNumber(dpy) 	((dpy)->fd)
! #define RootWindow(dpy, scr) 	(((dpy)->screens[(scr)]).root)
! #define DefaultScreen(dpy) 	((dpy)->default_screen)
! #define DefaultRootWindow(dpy) 	(((dpy)->screens[(dpy)->default_screen]).root)
! #define DefaultVisual(dpy, scr) (((dpy)->screens[(scr)]).root_visual)
! #define DefaultGC(dpy, scr) 	(((dpy)->screens[(scr)]).default_gc)
! #define BlackPixel(dpy, scr) 	(((dpy)->screens[(scr)]).black_pixel)
! #define WhitePixel(dpy, scr) 	(((dpy)->screens[(scr)]).white_pixel)
  #define AllPlanes 		((unsigned long)~0L)
! #define QLength(dpy) 		((dpy)->qlen)
! #define DisplayWidth(dpy, scr) 	(((dpy)->screens[(scr)]).width)
! #define DisplayHeight(dpy, scr) (((dpy)->screens[(scr)]).height)
! #define DisplayWidthMM(dpy, scr)(((dpy)->screens[(scr)]).mwidth)
! #define DisplayHeightMM(dpy, scr)(((dpy)->screens[(scr)]).mheight)
! #define DisplayPlanes(dpy, scr) (((dpy)->screens[(scr)]).root_depth)
! #define DisplayCells(dpy, scr) 	(DefaultVisual((dpy), (scr))->map_entries)
! #define ScreenCount(dpy) 	((dpy)->nscreens)
! #define ServerVendor(dpy) 	((dpy)->vendor)
! #define ProtocolVersion(dpy) 	((dpy)->proto_major_version)
! #define ProtocolRevision(dpy) 	((dpy)->proto_minor_version)
! #define VendorRelease(dpy) 	((dpy)->release)
! #define DisplayString(dpy) 	((dpy)->display_name)
! #define DefaultDepth(dpy, scr) 	(((dpy)->screens[(scr)]).root_depth)
! #define DefaultColormap(dpy, scr)(((dpy)->screens[(scr)]).cmap)
! #define BitmapUnit(dpy) 	((dpy)->bitmap_unit)
! #define BitmapBitOrder(dpy) 	((dpy)->bitmap_bit_order)
! #define BitmapPad(dpy) 		((dpy)->bitmap_pad)
! #define ImageByteOrder(dpy) 	((dpy)->byte_order)
! #define NextRequest(dpy)	((dpy)->request + 1)
! #define LastKnownRequestProcessed(dpy)	((dpy)->last_request_read)
  
  /* macros for screen oriented applications (toolkit) */
! #define ScreenOfDisplay(dpy, scr)(&((dpy)->screens[(scr)]))
! #define DefaultScreenOfDisplay(dpy) (&((dpy)->screens[(dpy)->default_screen]))
  #define DisplayOfScreen(s)	((s)->display)
  #define RootWindowOfScreen(s)	((s)->root)
  #define BlackPixelOfScreen(s)	((s)->black_pixel)
--- 72,111 ----
  #define QueuedAfterReading 1
  #define QueuedAfterFlush 2
  
! #define ConnectionNumber(dpy) 	(((_XPrivDisplay)dpy)->fd)
! #define RootWindow(dpy, scr) 	(ScreenOfDisplay(dpy,scr)->root)
! #define DefaultScreen(dpy) 	(((_XPrivDisplay)dpy)->default_screen)
! #define DefaultRootWindow(dpy) 	(ScreenOfDisplay(dpy,DefaultScreen(dpy))->root)
! #define DefaultVisual(dpy, scr) (ScreenOfDisplay(dpy,scr)->root_visual)
! #define DefaultGC(dpy, scr) 	(ScreenOfDisplay(dpy,scr)->default_gc)
! #define BlackPixel(dpy, scr) 	(ScreenOfDisplay(dpy,scr)->black_pixel)
! #define WhitePixel(dpy, scr) 	(ScreenOfDisplay(dpy,scr)->white_pixel)
  #define AllPlanes 		((unsigned long)~0L)
! #define QLength(dpy) 		(((_XPrivDisplay)dpy)->qlen)
! #define DisplayWidth(dpy, scr) 	(ScreenOfDisplay(dpy,scr)->width)
! #define DisplayHeight(dpy, scr) (ScreenOfDisplay(dpy,scr)->height)
! #define DisplayWidthMM(dpy, scr)(ScreenOfDisplay(dpy,scr)->mwidth)
! #define DisplayHeightMM(dpy, scr)(ScreenOfDisplay(dpy,scr)->mheight)
! #define DisplayPlanes(dpy, scr) (ScreenOfDisplay(dpy,scr)->root_depth)
! #define DisplayCells(dpy, scr) 	(DefaultVisual(dpy,scr)->map_entries)
! #define ScreenCount(dpy) 	(((_XPrivDisplay)dpy)->nscreens)
! #define ServerVendor(dpy) 	(((_XPrivDisplay)dpy)->vendor)
! #define ProtocolVersion(dpy) 	(((_XPrivDisplay)dpy)->proto_major_version)
! #define ProtocolRevision(dpy) 	(((_XPrivDisplay)dpy)->proto_minor_version)
! #define VendorRelease(dpy) 	(((_XPrivDisplay)dpy)->release)
! #define DisplayString(dpy) 	(((_XPrivDisplay)dpy)->display_name)
! #define DefaultDepth(dpy, scr) 	(ScreenOfDisplay(dpy,scr)->root_depth)
! #define DefaultColormap(dpy, scr)(ScreenOfDisplay(dpy,scr)->cmap)
! #define BitmapUnit(dpy) 	(((_XPrivDisplay)dpy)->bitmap_unit)
! #define BitmapBitOrder(dpy) 	(((_XPrivDisplay)dpy)->bitmap_bit_order)
! #define BitmapPad(dpy) 		(((_XPrivDisplay)dpy)->bitmap_pad)
! #define ImageByteOrder(dpy) 	(((_XPrivDisplay)dpy)->byte_order)
! #define NextRequest(dpy)	(((_XPrivDisplay)dpy)->request + 1)
! #define LastKnownRequestProcessed(dpy)	(((_XPrivDisplay)dpy)->last_request_read)
  
  /* macros for screen oriented applications (toolkit) */
! #define ScreenOfDisplay(dpy, scr)(&((_XPrivDisplay)dpy)->screens[scr])
! #define DefaultScreenOfDisplay(dpy) ScreenOfDisplay(dpy,DefaultScreen(dpy))
  #define DisplayOfScreen(s)	((s)->display)
  #define RootWindowOfScreen(s)	((s)->root)
  #define BlackPixelOfScreen(s)	((s)->black_pixel)
***************
*** 193,208 ****
   * dependent.  A GC should be treated as opaque by application code.
   */
  
! typedef struct _XGC {
      XExtData *ext_data;	/* hook for extension to hang data */
      GContext gid;	/* protocol ID for graphics context */
!     Bool rects;		/* boolean: TRUE if clipmask is list of rectangles */
!     Bool dashes;	/* boolean: TRUE if dash-list is really a list */
!     unsigned long dirty;/* cache dirty bits */
!     XGCValues values;	/* shadow structure of values */
! } *GC;
  
- 
  /*
   * Visual structure; contains information about colormapping possible.
   */
--- 193,208 ----
   * dependent.  A GC should be treated as opaque by application code.
   */
  
! typedef struct _XGC
! #ifdef XLIB_ILLEGAL_ACCESS
! {
      XExtData *ext_data;	/* hook for extension to hang data */
      GContext gid;	/* protocol ID for graphics context */
!     /* there is more to this structure, but it is private to Xlib */
! }
! #endif
! *GC;
  
  /*
   * Visual structure; contains information about colormapping possible.
   */
***************
*** 444,467 ****
   	KeyCode *modifiermap;	/* An 8 by max_keypermod array of modifiers */
  } XModifierKeymap;
  
  /*
   * Display datatype maintaining display specific data.
   * The contents of this structure are implementation dependent.
   * A Display should be treated as opaque by application code.
   */
! typedef struct _XDisplay {
  	XExtData *ext_data;	/* hook for extension to hang data */
! 	struct _XFreeFuncs *free_funcs; /* internal free functions */
  	int fd;			/* Network socket. */
! 	int lock;		/* is someone in critical section? */
! 	int proto_major_version;/* maj. version of server's X protocol */
  	int proto_minor_version;/* minor version of servers X protocol */
  	char *vendor;		/* vendor of the server hardware */
!         XID resource_base;	/* resource ID base */
! 	XID resource_mask;	/* resource ID mask bits */
! 	XID resource_id;	/* allocator current ID */
! 	int resource_shift;	/* allocator shift to correct bits */
! 	XID (*resource_alloc)(); /* allocator function */
  	int byte_order;		/* screen byte order, LSBFirst, MSBFirst */
  	int bitmap_unit;	/* padding and data requirements */
  	int bitmap_pad;		/* padding requirements on bitmaps */
--- 444,476 ----
   	KeyCode *modifiermap;	/* An 8 by max_keypermod array of modifiers */
  } XModifierKeymap;
  
+ 
  /*
   * Display datatype maintaining display specific data.
   * The contents of this structure are implementation dependent.
   * A Display should be treated as opaque by application code.
   */
! #ifndef XLIB_ILLEGAL_ACCESS
! typedef struct _XDisplay Display;
! #endif
! 
! typedef struct 
! #ifdef XLIB_ILLEGAL_ACCESS
! _XDisplay
! #endif
! {
  	XExtData *ext_data;	/* hook for extension to hang data */
! 	struct _XPrivate *private1;
  	int fd;			/* Network socket. */
! 	int private2;
! 	int proto_major_version;/* major version of server's X protocol */
  	int proto_minor_version;/* minor version of servers X protocol */
  	char *vendor;		/* vendor of the server hardware */
!         XID private3;
! 	XID private4;
! 	XID private5;
! 	int private6;
! 	XID (*resource_alloc)();/* allocator function */
  	int byte_order;		/* screen byte order, LSBFirst, MSBFirst */
  	int bitmap_unit;	/* padding and data requirements */
  	int bitmap_pad;		/* padding requirements on bitmaps */
***************
*** 468,533 ****
  	int bitmap_bit_order;	/* LeastSignificant or MostSignificant */
  	int nformats;		/* number of pixmap formats in list */
  	ScreenFormat *pixmap_format;	/* pixmap format list */
! 	int vnumber;		/* Xlib's X protocol version number. */
  	int release;		/* release of the server */
! 	struct _XSQEvent *head, *tail;	/* Input event queue. */
  	int qlen;		/* Length of input event queue */
  	unsigned long last_request_read; /* seq number of last event read */
  	unsigned long request;	/* sequence number of last request. */
! 	char *last_req;		/* beginning of last request, or dummy */
! 	char *buffer;		/* Output buffer starting address. */
! 	char *bufptr;		/* Output buffer index pointer. */
! 	char *bufmax;		/* Output buffer maximum+1 address. */
  	unsigned max_request_size; /* maximum number 32 bit words in request*/
  	struct _XrmHashBucketRec *db;
! 	int (*synchandler)();	/* Synchronization handler */
  	char *display_name;	/* "host:display" string used on this connect*/
  	int default_screen;	/* default screen for operations */
  	int nscreens;		/* number of screens on this server*/
  	Screen *screens;	/* pointer to list of screens */
  	unsigned long motion_buffer;	/* size of motion buffer */
! 	Window current;		/* for use internally for Keymap notify */
  	int min_keycode;	/* minimum defined keycode */
  	int max_keycode;	/* maximum defined keycode */
! 	KeySym *keysyms;	/* This server's keysyms */
! 	XModifierKeymap *modifiermap;	/* This server's modifier keymap */
! 	int keysyms_per_keycode;/* number of rows */
! 	char *xdefaults;	/* contents of defaults from server */
! 	char *scratch_buffer;	/* place to hang scratch buffer */
! 	unsigned long scratch_length;	/* length of scratch buffer */
! 	int ext_number;		/* extension number on this display */
! 	struct _XExten *ext_procs; /* extensions initialized on this display */
! 	/*
! 	 * the following can be fixed size, as the protocol defines how
! 	 * much address space is available. 
! 	 * While this could be done using the extension vector, there
! 	 * may be MANY events processed, so a search through the extension
! 	 * list to find the right procedure for each event might be
! 	 * expensive if many extensions are being used.
! 	 */
! 	Bool (*event_vec[128])();  /* vector for wire to event */
! 	Status (*wire_vec[128])(); /* vector for event to wire */
! 	KeySym lock_meaning;	   /* for XLookupString */
! 	struct _XKeytrans *key_bindings; /* for XLookupString */
! 	Font cursor_font;	   /* for XCreateFontCursor */
! 	struct _XDisplayAtoms *atoms; /* for XInternAtom */
! 	struct _XInternalAsync *async_handlers; /* for internal async */
! 	unsigned long flags;	   /* internal connection flags */
! 	unsigned int mode_switch;  /* keyboard group modifiers */
! 	struct _XContextDB *context_db; /* context database */
! 	Bool (**error_vec)();      /* vector for wire to error */
! 	/*
! 	 * Xcms information
! 	 */
! 	struct {
! 	   XPointer defaultCCCs;  /* pointer to an array of default XcmsCCC */
! 	   XPointer clientCmaps;  /* pointer to linked list of XcmsCmapRec */
! 	   XPointer perVisualIntensityMaps;
! 				  /* linked list of XcmsIntensityMap */
! 	} cms;
! 	int conn_checker;         /* ugly thing used by _XEventsQueued */
! 	struct _XIMFilter *im_filters;
! } Display;
  
  #if NeedFunctionPrototypes	/* prototypes require event type definitions */
  #undef _XEVENT_
--- 477,509 ----
  	int bitmap_bit_order;	/* LeastSignificant or MostSignificant */
  	int nformats;		/* number of pixmap formats in list */
  	ScreenFormat *pixmap_format;	/* pixmap format list */
! 	int private8;
  	int release;		/* release of the server */
! 	struct _XPrivate *private9, *private10;
  	int qlen;		/* Length of input event queue */
  	unsigned long last_request_read; /* seq number of last event read */
  	unsigned long request;	/* sequence number of last request. */
! 	XPointer private11;
! 	XPointer private12;
! 	XPointer private13;
! 	XPointer private14;
  	unsigned max_request_size; /* maximum number 32 bit words in request*/
  	struct _XrmHashBucketRec *db;
! 	int (*private15)();
  	char *display_name;	/* "host:display" string used on this connect*/
  	int default_screen;	/* default screen for operations */
  	int nscreens;		/* number of screens on this server*/
  	Screen *screens;	/* pointer to list of screens */
  	unsigned long motion_buffer;	/* size of motion buffer */
! 	unsigned long private16;
  	int min_keycode;	/* minimum defined keycode */
  	int max_keycode;	/* maximum defined keycode */
! 	/* there is more to this structure, but it is private to Xlib */
! }
! #ifdef XLIB_ILLEGAL_ACCESS
! Display, 
! #endif
! *_XPrivDisplay;
  
  #if NeedFunctionPrototypes	/* prototypes require event type definitions */
  #undef _XEVENT_
***************
*** 961,967 ****
  } XEvent;
  #endif
  
! #define XAllocID(dpy) ((*(dpy)->resource_alloc)((dpy)))
  
  /*
   * per character font metric information.
--- 937,943 ----
  } XEvent;
  #endif
  
! #define XAllocID(dpy) ((*((_XPrivDisplay)dpy)->resource_alloc)((dpy)))
  
  /*
   * per character font metric information.
*** /tmp/d07004	Mon Mar  2 13:10:02 1992
--- lib/X/Xlibint.h	Thu Jan 30 10:25:37 1992
***************
*** 1,4 ****
! /* $XConsortium: Xlibint.h,v 11.95 92/01/19 17:32:49 rws Exp $ */
  /* Copyright 1984, 1985, 1987, 1989  Massachusetts Institute of Technology */
  
  /*
--- 1,4 ----
! /* $XConsortium: Xlibint.h,v 11.96 92/01/30 10:22:57 rws Exp $ */
  /* Copyright 1984, 1985, 1987, 1989  Massachusetts Institute of Technology */
  
  /*
***************
*** 26,31 ****
--- 26,120 ----
  #endif
  
  #include <X11/Xlib.h>
+ 
+ struct _XGC {
+     XExtData *ext_data;	/* hook for extension to hang data */
+     GContext gid;	/* protocol ID for graphics context */
+     Bool rects;		/* boolean: TRUE if clipmask is list of rectangles */
+     Bool dashes;	/* boolean: TRUE if dash-list is really a list */
+     unsigned long dirty;/* cache dirty bits */
+     XGCValues values;	/* shadow structure of values */
+ };
+ 
+ struct _XDisplay {
+ 	XExtData *ext_data;	/* hook for extension to hang data */
+ 	struct _XFreeFuncs *free_funcs; /* internal free functions */
+ 	int fd;			/* Network socket. */
+ 	int conn_checker;         /* ugly thing used by _XEventsQueued */
+ 	int proto_major_version;/* maj. version of server's X protocol */
+ 	int proto_minor_version;/* minor version of servers X protocol */
+ 	char *vendor;		/* vendor of the server hardware */
+         XID resource_base;	/* resource ID base */
+ 	XID resource_mask;	/* resource ID mask bits */
+ 	XID resource_id;	/* allocator current ID */
+ 	int resource_shift;	/* allocator shift to correct bits */
+ 	XID (*resource_alloc)(); /* allocator function */
+ 	int byte_order;		/* screen byte order, LSBFirst, MSBFirst */
+ 	int bitmap_unit;	/* padding and data requirements */
+ 	int bitmap_pad;		/* padding requirements on bitmaps */
+ 	int bitmap_bit_order;	/* LeastSignificant or MostSignificant */
+ 	int nformats;		/* number of pixmap formats in list */
+ 	ScreenFormat *pixmap_format;	/* pixmap format list */
+ 	int vnumber;		/* Xlib's X protocol version number. */
+ 	int release;		/* release of the server */
+ 	struct _XSQEvent *head, *tail;	/* Input event queue. */
+ 	int qlen;		/* Length of input event queue */
+ 	unsigned long last_request_read; /* seq number of last event read */
+ 	unsigned long request;	/* sequence number of last request. */
+ 	char *last_req;		/* beginning of last request, or dummy */
+ 	char *buffer;		/* Output buffer starting address. */
+ 	char *bufptr;		/* Output buffer index pointer. */
+ 	char *bufmax;		/* Output buffer maximum+1 address. */
+ 	unsigned max_request_size; /* maximum number 32 bit words in request*/
+ 	struct _XrmHashBucketRec *db;
+ 	int (*synchandler)();	/* Synchronization handler */
+ 	char *display_name;	/* "host:display" string used on this connect*/
+ 	int default_screen;	/* default screen for operations */
+ 	int nscreens;		/* number of screens on this server*/
+ 	Screen *screens;	/* pointer to list of screens */
+ 	unsigned long motion_buffer;	/* size of motion buffer */
+ 	unsigned long flags;	   /* internal connection flags */
+ 	int min_keycode;	/* minimum defined keycode */
+ 	int max_keycode;	/* maximum defined keycode */
+ 	KeySym *keysyms;	/* This server's keysyms */
+ 	XModifierKeymap *modifiermap;	/* This server's modifier keymap */
+ 	int keysyms_per_keycode;/* number of rows */
+ 	char *xdefaults;	/* contents of defaults from server */
+ 	char *scratch_buffer;	/* place to hang scratch buffer */
+ 	unsigned long scratch_length;	/* length of scratch buffer */
+ 	int ext_number;		/* extension number on this display */
+ 	struct _XExten *ext_procs; /* extensions initialized on this display */
+ 	/*
+ 	 * the following can be fixed size, as the protocol defines how
+ 	 * much address space is available. 
+ 	 * While this could be done using the extension vector, there
+ 	 * may be MANY events processed, so a search through the extension
+ 	 * list to find the right procedure for each event might be
+ 	 * expensive if many extensions are being used.
+ 	 */
+ 	Bool (*event_vec[128])();  /* vector for wire to event */
+ 	Status (*wire_vec[128])(); /* vector for event to wire */
+ 	KeySym lock_meaning;	   /* for XLookupString */
+ 	XPointer lock;		/* is someone in critical section? */
+ 	struct _XInternalAsync *async_handlers; /* for internal async */
+ 	/* things above this line should not move, for binary compatibility */
+ 	struct _XKeytrans *key_bindings; /* for XLookupString */
+ 	Font cursor_font;	   /* for XCreateFontCursor */
+ 	struct _XDisplayAtoms *atoms; /* for XInternAtom */
+ 	unsigned int mode_switch;  /* keyboard group modifiers */
+ 	struct _XContextDB *context_db; /* context database */
+ 	Bool (**error_vec)();      /* vector for wire to error */
+ 	/*
+ 	 * Xcms information
+ 	 */
+ 	struct {
+ 	   XPointer defaultCCCs;  /* pointer to an array of default XcmsCCC */
+ 	   XPointer clientCmaps;  /* pointer to linked list of XcmsCmapRec */
+ 	   XPointer perVisualIntensityMaps;
+ 				  /* linked list of XcmsIntensityMap */
+ 	} cms;
+ 	struct _XIMFilter *im_filters;
+ };
  
  /*
   * define the following if you want the Data macro to be a procedure instead
*** /tmp/d07021	Mon Mar  2 13:10:15 1992
--- lib/X/XOpenDis.c	Thu Jan 30 10:09:45 1992
***************
*** 1,5 ****
  /*
!  * $XConsortium: XOpenDis.c,v 11.124 92/01/09 18:50:17 rws Exp $
   */
  
  /* Copyright    Massachusetts Institute of Technology    1985, 1986	*/
--- 1,5 ----
  /*
!  * $XConsortium: XOpenDis.c,v 11.125 92/01/30 10:07:13 rws Exp $
   */
  
  /* Copyright    Massachusetts Institute of Technology    1985, 1986	*/
***************
*** 141,147 ****
  	dpy->modifiermap	= NULL;
  	dpy->lock_meaning	= NoSymbol;
  	dpy->keysyms_per_keycode = 0;
- 	dpy->current		= None;
  	dpy->xdefaults		= (char *)NULL;
  	dpy->scratch_length	= 0L;
  	dpy->scratch_buffer	= NULL;
--- 141,146 ----
*** /tmp/d07038	Mon Mar  2 13:10:26 1992
--- lib/X/XlibInt.c	Mon Jan 27 09:31:16 1992
***************
*** 1,5 ****
  /*
!  * $XConsortium: XlibInt.c,v 11.160 92/01/20 12:26:01 rws Exp $
   */
  
  /* Copyright    Massachusetts Institute of Technology    1985, 1986, 1987 */
--- 1,5 ----
  /*
!  * $XConsortium: XlibInt.c,v 11.161 92/01/27 09:29:07 rws Exp $
   */
  
  /* Copyright    Massachusetts Institute of Technology    1985, 1986, 1987 */
***************
*** 1143,1149 ****
  	      case KeymapNotify:
  		{
  			register XKeymapEvent *ev = (XKeymapEvent *) re;
! 			ev->window	= dpy->current;
  			bcopy ((char *)((xKeymapEvent *) event)->map,
  			       &ev->key_vector[1], 
  			       sizeof (((xKeymapEvent *) event)->map));
--- 1143,1149 ----
  	      case KeymapNotify:
  		{
  			register XKeymapEvent *ev = (XKeymapEvent *) re;
! 			ev->window	= None;
  			bcopy ((char *)((xKeymapEvent *) event)->map,
  			       &ev->key_vector[1], 
  			       sizeof (((xKeymapEvent *) event)->map));

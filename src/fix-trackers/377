Path: news!news.crl.dec.com!pa.dec.com!nobody
Message-Id: <9206302218.AA02475@xenon.lcs.mit.edu>
To: fix-trackers@expo.lcs.mit.edu
Cc: mor@expo.lcs.mit.edu
Subject: (seq: 2605) PEXlib patch 4 (of 4)
Date: Tue, 30 Jun 92 18:18:45 EDT
From: Ralph Mor <mor@expo.lcs.mit.edu>
Distribution: dec
X-Mailing-List: fix-trackers@expo.lcs.mit.edu
X-Disclaimer: This message originated from a mailing list outside of Digital.
Newsgroups: dec.mail.lists.x.fix-trackers
Approved: news@usenet.pa.dec.com

*** /tmp/da19723	Tue Jun 30 16:37:29 1992
--- extensions/lib/PEXlib/pl_oc_prim.c	Fri Jun 12 15:21:52 1992
***************
*** 1,4 ****
! /* $XConsortium: pl_oc_prim.c,v 1.3 92/05/26 16:20:58 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
--- 1,4 ----
! /* $XConsortium: pl_oc_prim.c,v 1.5 92/06/12 15:22:22 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
***************
*** 300,306 ****
       * Store the mono-encoded string.
       */
  
!     StoreEncodedStrings (display, numEncodings, encodedTextList);
  
      PEXFinishOC (display);
  }
--- 300,306 ----
       * Store the mono-encoded string.
       */
  
!     StoreMonoStrings (display, numEncodings, encodedTextList);
  
      PEXFinishOC (display);
  }
***************
*** 352,358 ****
       * Store the mono-encoded string.
       */
  
!     StoreEncodedStrings (display, numEncodings, encodedTextList);
  
      PEXFinishOC (display);
  }
--- 352,358 ----
       * Store the mono-encoded string.
       */
  
!     StoreMonoStrings (display, numEncodings, encodedTextList);
  
      PEXFinishOC (display);
  }
***************
*** 406,412 ****
       * Store the mono-encoded string.
       */
  
!     StoreEncodedStrings (display, numEncodings, encodedTextList);
  
      PEXFinishOC (display);
  }
--- 406,412 ----
       * Store the mono-encoded string.
       */
  
!     StoreMonoStrings (display, numEncodings, encodedTextList);
  
      PEXFinishOC (display);
  }
***************
*** 460,466 ****
       * Store the mono-encoded string.
       */
  
!     StoreEncodedStrings (display, numEncodings, encodedTextList);
  
      PEXFinishOC (display);
  }
--- 460,466 ----
       * Store the mono-encoded string.
       */
  
!     StoreMonoStrings (display, numEncodings, encodedTextList);
  
      PEXFinishOC (display);
  }
***************
*** 537,543 ****
       * Initialize the OC request.
       */
  
!     PEXInitOC ( display, resource_id, req_type, PEXOCPolylineSetWithData, 
  	LENOF (pexPolylineSet), 
  	numPolylines + (numPoints * lenofVertex),
  	pexPolylineSet, pReq);
--- 537,543 ----
       * Initialize the OC request.
       */
  
!     PEXInitOC (display, resource_id, req_type, PEXOCPolylineSetWithData, 
  	LENOF (pexPolylineSet), 
  	numPolylines + (numPoints * lenofVertex),
  	pexPolylineSet, pReq);
***************
*** 549,555 ****
       * Store the polyline request header data. 
       */
  
!     pReq->colourType = colorType;
      pReq->vertexAttribs = vertexAttributes;
      pReq->numLists = numPolylines;
  
--- 549,555 ----
       * Store the polyline request header data. 
       */
  
!     pReq->colorType = colorType;
      pReq->vertexAttribs = vertexAttributes;
      pReq->numLists = numPolylines;
  
***************
*** 785,791 ****
  
      pReq->shape = shape;
      pReq->ignoreEdges = ignoreEdges;
!     pReq->colourType = colorType;
      pReq->facetAttribs = facetAttributes;
      pReq->vertexAttribs = vertexAttributes;
  
--- 785,791 ----
  
      pReq->shape = shape;
      pReq->ignoreEdges = ignoreEdges;
!     pReq->colorType = colorType;
      pReq->facetAttribs = facetAttributes;
      pReq->vertexAttribs = vertexAttributes;
  
***************
*** 1002,1008 ****
      pReq->shape = shape;
      pReq->ignoreEdges = ignoreEdges;
      pReq->contourHint = contourHint;
!     pReq->colourType = colorType;
      pReq->facetAttribs = facetAttributes;
      pReq->vertexAttribs = vertexAttributes;
      pReq->numLists = numFillAreas;
--- 1002,1008 ----
      pReq->shape = shape;
      pReq->ignoreEdges = ignoreEdges;
      pReq->contourHint = contourHint;
!     pReq->colorType = colorType;
      pReq->facetAttribs = facetAttributes;
      pReq->vertexAttribs = vertexAttributes;
      pReq->numLists = numFillAreas;
***************
*** 1038,1044 ****
  PEXSetOfFillAreaSets (display, resource_id, req_type, shape,
      facetAttributes, vertexAttributes, edgeAttributes, contourHint,
      contoursAllOne, colorType, numFillAreaSets, facetData,
!     numVertices, vertices, numEdges, edgeFlags, connectivity)
  
  INPUT Display			*display;
  INPUT XID			resource_id;
--- 1038,1044 ----
  PEXSetOfFillAreaSets (display, resource_id, req_type, shape,
      facetAttributes, vertexAttributes, edgeAttributes, contourHint,
      contoursAllOne, colorType, numFillAreaSets, facetData,
!     numVertices, vertices, numIndices, edgeFlags, connectivity)
  
  INPUT Display			*display;
  INPUT XID			resource_id;
***************
*** 1054,1060 ****
  INPUT PEXArrayOfFacetData 	facetData;
  INPUT unsigned int		numVertices; 
  INPUT PEXArrayOfVertex		vertices;
! INPUT unsigned int		numEdges; 
  INPUT PEXSwitch			*edgeFlags;
  INPUT PEXConnectivityData	*connectivity;
  
--- 1054,1060 ----
  INPUT PEXArrayOfFacetData 	facetData;
  INPUT unsigned int		numVertices; 
  INPUT PEXArrayOfVertex		vertices;
! INPUT unsigned int		numIndices; 
  INPUT PEXSwitch			*edgeFlags;
  INPUT PEXConnectivityData	*connectivity;
  
***************
*** 1068,1074 ****
      int 		sizeofEdge;
      int			totLength;
      int 		numContours;
!     int 		count, i, j;
      CARD16		*pData;
  
  
--- 1068,1075 ----
      int 		sizeofEdge;
      int			totLength;
      int 		numContours;
!     int 		count = 0;
!     int			i, j, cbytes;
      CARD16		*pData;
  
  
***************
*** 1077,1083 ****
       */
  
      numContours = 0;
!     for (i = 0, pConnectivity = connectivity; i < numFillAreaSets; i++)
  	numContours += pConnectivity->count;
  
  
--- 1078,1085 ----
       */
  
      numContours = 0;
!     pConnectivity = connectivity;
!     for (i = 0; i < numFillAreaSets; i++, pConnectivity++)
  	numContours += pConnectivity->count;
  
  
***************
*** 1090,1098 ****
      lenofVertex = GetVertexWithDataLength (vertexAttributes, lenofColor);
      sizeofEdge = ((edgeAttributes == PEXOn) ? sizeof (CARD8) : 0);
  
      totLength = (lenofFacet * numFillAreaSets) + (lenofVertex * numVertices) + 
! 	NUMWORDS (sizeofEdge * numEdges) + NUMWORDS (sizeof (CARD16) *
! 	(numFillAreaSets + numContours + numEdges));
  
  
      /*
--- 1092,1101 ----
      lenofVertex = GetVertexWithDataLength (vertexAttributes, lenofColor);
      sizeofEdge = ((edgeAttributes == PEXOn) ? sizeof (CARD8) : 0);
  
+     cbytes = sizeof (CARD16) * (numFillAreaSets + numContours + numIndices);
+ 
      totLength = (lenofFacet * numFillAreaSets) + (lenofVertex * numVertices) + 
! 	NUMWORDS (sizeofEdge * numIndices) + NUMWORDS (cbytes);
  
  
      /*
***************
*** 1110,1116 ****
       */
  
      pReq->shape = shape;
!     pReq->colourType = colorType;
      pReq->FAS_Attributes = facetAttributes;
      pReq->vertexAttributes = vertexAttributes;
      pReq->edgeAttributes = edgeAttributes;
--- 1113,1119 ----
       */
  
      pReq->shape = shape;
!     pReq->colorType = colorType;
      pReq->FAS_Attributes = facetAttributes;
      pReq->vertexAttributes = vertexAttributes;
      pReq->edgeAttributes = edgeAttributes;
***************
*** 1118,1124 ****
      pReq->contourCountsFlag = contoursAllOne;
      pReq->numFAS = numFillAreaSets;
      pReq->numVertices = numVertices;
!     pReq->numEdges = numEdges;
      pReq->numContours = numContours;
  
  
--- 1121,1127 ----
      pReq->contourCountsFlag = contoursAllOne;
      pReq->numFAS = numFillAreaSets;
      pReq->numVertices = numVertices;
!     pReq->numEdges = numIndices;
      pReq->numContours = numContours;
  
  
***************
*** 1134,1140 ****
              (char *) vertices.no_data);
  
      if (edgeAttributes)
! 	_PEXCopyPaddedBytesToOC (display, numEdges * sizeof (CARD8),
  	    (char *) edgeFlags);
  
  
--- 1137,1143 ----
              (char *) vertices.no_data);
  
      if (edgeAttributes)
! 	_PEXCopyPaddedBytesToOC (display, numIndices * sizeof (CARD8),
  	    (char *) edgeFlags);
  
  
***************
*** 1149,1160 ****
  	if (pData = (CARD16 *) PEXGetOCAddr (display, sizeof (CARD16)))
  	    *pData = count = pConnectivity->count;
  
! 	for (j = 0, pList = pConnectivity->lists; j < count; j++)
  	{
  	    if (pData = (CARD16 *) PEXGetOCAddr (display, sizeof (CARD16)))
  		*pData = pList->count;
  
! 	    _PEXCopyPaddedBytesToOC (display, pList->count * sizeof (CARD16),
  		(char *) pList->shorts);
  	}
  
--- 1152,1163 ----
  	if (pData = (CARD16 *) PEXGetOCAddr (display, sizeof (CARD16)))
  	    *pData = count = pConnectivity->count;
  
! 	for (j = 0, pList = pConnectivity->lists; j < count; j++, pList++)
  	{
  	    if (pData = (CARD16 *) PEXGetOCAddr (display, sizeof (CARD16)))
  		*pData = pList->count;
  
! 	    PEXCopyBytesToOC (display, pList->count * sizeof (CARD16),
  		(char *) pList->shorts);
  	}
  
***************
*** 1161,1166 ****
--- 1164,1171 ----
  	pConnectivity++;
      }
  
+     PEXGetOCAddr (display, PAD (cbytes));
+ 
      PEXFinishOC (display);
  }
  
***************
*** 1214,1220 ****
       * Store the triangle strip request header data. 
       */
  
!     pReq->colourType = colorType;
      pReq->facetAttribs = facetAttributes;
      pReq->vertexAttribs = vertexAttributes;
      pReq->numVertices = numVertices;
--- 1219,1225 ----
       * Store the triangle strip request header data. 
       */
  
!     pReq->colorType = colorType;
      pReq->facetAttribs = facetAttributes;
      pReq->vertexAttribs = vertexAttributes;
      pReq->numVertices = numVertices;
***************
*** 1285,1291 ****
       * Store the quad mesh request header data. 
       */
  
!     pReq->colourType = colorType;
      pReq->mPts = rowCount;
      pReq->nPts = colCount;
      pReq->facetAttribs = facetAttributes;
--- 1290,1296 ----
       * Store the quad mesh request header data. 
       */
  
!     pReq->colorType = colorType;
      pReq->mPts = rowCount;
      pReq->nPts = colCount;
      pReq->facetAttribs = facetAttributes;
***************
*** 1335,1342 ****
      int			lenofUKnotList;
      int			lenofVKnotList;
      int			lenofTrimData;
!     int			thisLength;
!     int			count, i;
  
  
      /* 
--- 1340,1347 ----
      int			lenofUKnotList;
      int			lenofVKnotList;
      int			lenofTrimData;
!     int			thisLength, i;
!     int			count = 0;
  
  
      /* 
***************
*** 1602,1608 ****
       * Store the cell array header data.
       */
  
!     pReq->colourType = colorType;
      pReq->point1 = *(pexCoord3D *) pt1;
      pReq->point2 = *(pexCoord3D *) pt2;
      pReq->point3 = *(pexCoord3D *) pt3;
--- 1607,1613 ----
       * Store the cell array header data.
       */
  
!     pReq->colorType = colorType;
      pReq->point1 = *(pexCoord3D *) pt1;
      pReq->point2 = *(pexCoord3D *) pt2;
      pReq->point3 = *(pexCoord3D *) pt3;
*** /tmp/da19742	Tue Jun 30 16:37:34 1992
--- extensions/lib/PEXlib/pl_oc_struct.c	Fri Jun 12 10:46:23 1992
***************
*** 1,4 ****
! /* $XConsortium: pl_oc_struct.c,v 1.2 92/05/26 16:20:27 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
--- 1,4 ----
! /* $XConsortium: pl_oc_struct.c,v 1.3 92/06/12 10:50:14 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
***************
*** 68,74 ****
  INPUT PEXOCRequestType	req_type;
  
  {
!     PEXAddSimpleOC (display, resource_id, req_type, PEXOCNil, 0, NULL);
  }
  
  
--- 68,74 ----
  INPUT PEXOCRequestType	req_type;
  
  {
!     PEXAddSimpleOC (display, resource_id, req_type, PEXOCNoop, 0, NULL);
  }
  
  
*** /tmp/da19761	Tue Jun 30 16:37:38 1992
--- extensions/lib/PEXlib/pl_oc_util.c	Tue Jun 30 15:49:03 1992
***************
*** 1,4 ****
! /* $XConsortium: pl_oc_util.c,v 1.3 92/05/26 11:29:04 mor Exp $ */
  
  /************************************************************************
  Copyright 1992 by the Massachusetts Institute of Technology,
--- 1,4 ----
! /* $XConsortium: pl_oc_util.c,v 1.7 92/06/30 15:53:25 mor Exp $ */
  
  /************************************************************************
  Copyright 1992 by the Massachusetts Institute of Technology,
***************
*** 10,18 ****
  documentation for any purpose and without fee is hereby granted, 
  provided that the above copyright notice appear in all copies and that
  both that copyright notice and this permission notice appear in 
! supporting documentation, and that the names of Digital or MIT not be
! used in advertising or publicity pertaining to distribution of the
! software without specific, written prior permission.  
  
  *************************************************************************/
  
--- 10,18 ----
  documentation for any purpose and without fee is hereby granted, 
  provided that the above copyright notice appear in all copies and that
  both that copyright notice and this permission notice appear in 
! supporting documentation, and that the name of MIT not be used in
! advertising or publicity pertaining to distribution of the software
! without specific, written prior permission.  
  
  *************************************************************************/
  
***************
*** 93,104 ****
  }
  
  
- #ifdef PEXFinishOC
- #undef PEXFinishOC
- #endif
- 
  void
! PEXFinishOC (display)
  
  INPUT Display	*display;
  
--- 93,100 ----
  }
  
  
  void
! PEXFinishOCs (display)
  
  INPUT Display	*display;
  
***************
*** 237,243 ****
  
  void
  PEXSendOCs (display, resource_id, req_type, float_format,
!     oc_count, length, encoded_ocs)
  
  INPUT Display		*display;
  INPUT XID		resource_id;
--- 233,239 ----
  
  void
  PEXSendOCs (display, resource_id, req_type, float_format,
!     oc_count, numBytes, encoded_ocs)
  
  INPUT Display		*display;
  INPUT XID		resource_id;
***************
*** 244,262 ****
  INPUT PEXOCRequestType	req_type;
  INPUT int		float_format;
  INPUT unsigned long	oc_count;
! INPUT unsigned int	length;
  INPUT char		*encoded_ocs;
  
  {
      PEXStartOCs (display, resource_id, req_type, float_format,
! 	oc_count, length);
  
!     PEXCopyBytesToOC (display, NUMBYTES (length), encoded_ocs);
  
      PEXFinishOC (display);
  }
  
- 
  
  void _PEXGenOCBadLengthError (display, resource_id, req_type)
  
--- 240,257 ----
  INPUT PEXOCRequestType	req_type;
  INPUT int		float_format;
  INPUT unsigned long	oc_count;
! INPUT unsigned int	numBytes;
  INPUT char		*encoded_ocs;
  
  {
      PEXStartOCs (display, resource_id, req_type, float_format,
! 	oc_count, NUMWORDS (numBytes));
  
!     _PEXCopyPaddedBytesToOC (display, numBytes, encoded_ocs);
  
      PEXFinishOC (display);
  }
  
  
  void _PEXGenOCBadLengthError (display, resource_id, req_type)
  
***************
*** 298,301 ****
--- 293,1709 ----
      pexDisplayInfo->lastReqType = req_type;
  	
      UnlockDisplay (display);
+ }
+ 
+ 
+ int
+ PEXGetSizeOCs (float_format, oc_count, oc_data)
+ 
+ INPUT int		float_format;
+ INPUT int		oc_count;
+ INPUT PEXOCData		*oc_data;
+ 
+ {
+     int		totalSize, i;
+ 
+ 
+     for (i = totalSize = 0; i < oc_count; i++, oc_data++)
+     {
+ 	switch (oc_data->oc_type)
+ 	{
+ 	case PEXOCMarkerType:
+ 	case PEXOCLineType:
+ 	case PEXOCATextStyle:
+ 	case PEXOCBFInteriorStyle:
+ 	case PEXOCBFReflectionModel:
+ 	case PEXOCBFSurfaceInterpMethod:
+ 	case PEXOCInteriorStyle:
+ 	case PEXOCPolylineInterpMethod:
+ 	case PEXOCReflectionModel:
+ 	case PEXOCRenderingColorModel:
+ 	case PEXOCSurfaceEdgeType:
+ 	case PEXOCSurfaceInterpMethod:
+ 
+ 	    totalSize += sizeof (pexMarkerType);
+ 	    break;
+ 
+ 	case PEXOCMarkerColorIndex:
+ 	case PEXOCMarkerBundleIndex:
+ 	case PEXOCTextFontIndex:
+ 	case PEXOCTextColorIndex:
+ 	case PEXOCTextBundleIndex:
+ 	case PEXOCLineColorIndex:
+ 	case PEXOCLineBundleIndex:
+ 	case PEXOCSurfaceColorIndex:
+ 	case PEXOCBFInteriorStyleIndex:
+ 	case PEXOCBFSurfaceColorIndex:
+ 	case PEXOCInteriorBundleIndex:
+ 	case PEXOCInteriorStyleIndex:
+ 	case PEXOCSurfaceEdgeColorIndex:
+ 	case PEXOCEdgeBundleIndex:
+ 	case PEXOCViewIndex:
+ 	case PEXOCDepthCueIndex:
+ 	case PEXOCColorApproxIndex:
+ 
+ 	    totalSize += sizeof (pexMarkerColorIndex);
+ 	    break;
+ 
+ 	case PEXOCMarkerColor:
+ 	case PEXOCTextColor:
+ 	case PEXOCLineColor:
+ 	case PEXOCSurfaceColor:
+ 	case PEXOCBFSurfaceColor:
+ 	case PEXOCSurfaceEdgeColor:
+ 
+ 	    totalSize += (sizeof (pexMarkerColor) +
+ 	        GetColorSize (oc_data->data.SetMarkerColor.color_type));
+ 	    break;
+ 
+ 	case PEXOCMarkerScale:
+ 	case PEXOCCharExpansion:
+ 	case PEXOCCharSpacing:
+ 	case PEXOCCharHeight:
+ 	case PEXOCATextHeight:
+ 	case PEXOCLineWidth:
+ 	case PEXOCSurfaceEdgeWidth:
+ 
+ 	    totalSize += sizeof (pexMarkerScale);
+ 	    break;
+ 
+ 	case PEXOCTextPrecision:
+ 	case PEXOCTextPath:
+ 	case PEXOCATextPath:
+ 
+ 	    totalSize += sizeof (pexTextPrecision);
+ 	    break;
+ 
+ 	case PEXOCCharUpVector:
+ 	case PEXOCATextUpVector:
+ 
+ 	    totalSize += sizeof (pexCharUpVector);
+ 	    break;
+ 
+ 	case PEXOCTextAlignment:
+ 	case PEXOCATextAlignment:
+ 
+ 	    totalSize += sizeof (pexTextAlignment);
+ 	    break;
+ 
+ 	case PEXOCCurveApprox:
+ 
+ 	    totalSize += sizeof (pexCurveApproximation);
+ 	    break;
+ 
+ 	case PEXOCReflectionAttributes:
+ 	case PEXOCBFReflectionAttributes:
+ 
+ 	    totalSize += (sizeof (pexSurfaceReflAttr) + GetColorSize (
+                 oc_data->data.SetReflectionAttributes.attributes.specular_color.type));
+ 	    break;
+ 
+ 	case PEXOCSurfaceApprox:
+ 
+ 	    totalSize += sizeof (pexSurfaceApproximation);
+ 	    break;
+ 
+ 	case PEXOCFacetCullingMode:
+ 
+ 	    totalSize += sizeof (pexCullingMode);
+ 	    break;
+ 
+ 	case PEXOCFacetDistinguishFlag:
+ 	case PEXOCSurfaceEdgeFlag:
+ 	case PEXOCModelClipFlag:
+ 
+ 	    totalSize += sizeof (pexDistinguishFlag);
+ 	    break;
+ 
+ 	case PEXOCPatternSize:
+ 
+ 	    totalSize += sizeof (pexPatternSize);
+ 	    break;
+ 
+ 	case PEXOCPatternAttributes2D:
+ 
+ 	    totalSize += sizeof (pexPatternRefPt);
+ 	    break;
+ 
+ 	case PEXOCPatternAttributes:
+ 
+ 	    totalSize += sizeof (pexPatternAttr);
+ 	    break;
+ 
+ 	case PEXOCIndividualASF:
+ 
+ 	    totalSize += sizeof (pexSetAsfValues);
+ 	    break;
+ 
+ 	case PEXOCLocalTransform:
+ 
+ 	    totalSize += sizeof (pexLocalTransform);
+ 	    break;
+ 
+ 	case PEXOCLocalTransform2D:
+ 
+ 	    totalSize += sizeof (pexLocalTransform2D);
+ 	    break;
+ 
+ 	case PEXOCGlobalTransform:
+ 
+ 	    totalSize += sizeof (pexGlobalTransform);
+ 	    break;
+ 
+ 	case PEXOCGlobalTransform2D:
+ 
+ 	    totalSize += sizeof (pexGlobalTransform2D);
+ 	    break;
+ 
+ 	case PEXOCModelClipVolume:
+ 
+ 	    totalSize += (sizeof (pexModelClipVolume) +
+     	        sizeof (pexHalfSpace) *
+ 	        oc_data->data.SetModelClipVolume.count);
+ 	    break;
+ 
+ 	case PEXOCModelClipVolume2D:
+ 
+ 	    totalSize += (sizeof (pexModelClipVolume2D) +
+     	        sizeof (pexHalfSpace2D) *
+ 	        oc_data->data.SetModelClipVolume2D.count);
+ 	    break;
+ 
+ 	case PEXOCRestoreModelClipVolume:
+ 
+ 	    totalSize += sizeof (pexRestoreModelClip);
+ 	    break;
+ 
+ 	case PEXOCLightSourceState:
+ 
+ 	{
+     	    int	sizeofEnableList, sizeofDisableList;
+ 
+     	    sizeofEnableList = sizeof (CARD16) *
+ 	        oc_data->data.SetLightSourceState.enable_count;
+ 
+     	    sizeofDisableList = sizeof (CARD16) *
+ 	        oc_data->data.SetLightSourceState.disable_count;
+ 	    
+ 	    totalSize += (sizeof (pexLightState) +
+ 	        PADDED_BYTES (sizeofEnableList) +
+ 	        PADDED_BYTES (sizeofDisableList));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCPickID:
+ 	case PEXOCHLHSRID:
+ 
+ 	    totalSize += sizeof (pexPickId);
+ 	    break;
+ 
+ 	case PEXOCParaSurfCharacteristics:
+ 
+ 	{
+ 	    int	pscDataSize = 0;
+ 
+ 	    switch (oc_data->data.SetParaSurfCharacteristics.psc_type)
+ 	    {
+ 	    case PEXPSCIsoCurves:
+ 	        pscDataSize = sizeof (PEXPSCIsoparametricCurves);
+ 	        break;
+ 
+ 	    case PEXPSCMCLevelCurves:
+ 	    case PEXPSCWCLevelCurves:
+ 	        pscDataSize = sizeof (pexPSC_LevelCurves) + sizeof (float) *
+ 	    	oc_data->data.SetParaSurfCharacteristics.characteristics.level_curves.count;
+ 	        break;
+ 
+ 	    default:
+ 	        break;
+ 	    }
+ 
+ 	    totalSize += (sizeof (pexParaSurfCharacteristics) + pscDataSize);
+ 	    break;
+   	}
+ 
+ 	case PEXOCAddToNameSet:
+ 	case PEXOCRemoveFromNameSet:
+ 
+ 	    totalSize += (sizeof (pexAddToNameSet) + 
+ 	        oc_data->data.AddToNameSet.count * sizeof (pexName));
+ 	    break;
+ 
+ 	case PEXOCExecuteStructure:
+ 
+ 	    totalSize += sizeof (pexExecuteStructure);
+ 	    break;
+ 
+ 	case PEXOCLabel:
+ 
+ 	    totalSize += sizeof (pexLabel);
+ 	    break;
+ 
+ 	case PEXOCApplicationData:
+ 
+ 	    totalSize += (sizeof (pexApplicationData) +
+ 	        PADDED_BYTES (oc_data->data.ApplicationData.length));
+ 	    break;
+ 
+ 	case PEXOCGSE:
+ 
+ 	    totalSize += (sizeof (pexGse) +
+ 	        PADDED_BYTES (oc_data->data.GSE.length));
+ 	    break;
+ 
+ 	case PEXOCMarkers:
+ 	case PEXOCPolyline:
+ 
+ 	    totalSize += (sizeof (pexMarker) +
+ 	        oc_data->data.Markers.count * sizeof (pexCoord3D));
+ 	    break;
+ 
+ 	case PEXOCMarkers2D:
+ 	case PEXOCPolyline2D:
+ 
+ 	    totalSize += (sizeof (pexMarker2D) +
+ 	        oc_data->data.Markers2D.count * sizeof (pexCoord2D));
+ 	    break;
+ 
+ 	case PEXOCText:
+ 
+ 	{
+ 	    /* Text is always mono encoded */
+ 
+ 	    PEXEncodedTextData  	*nextString;
+ 	    int 			lenofStrings, i;
+ 
+ 	    GetStringsLength (oc_data->data.EncodedText.count,
+ 	        oc_data->data.EncodedText.encoded_text, lenofStrings)
+ 
+ 	    totalSize += (sizeof (pexText) + NUMBYTES (lenofStrings));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCText2D:
+ 
+ 	{
+ 	    /* Text is always mono encoded */
+ 
+ 	    PEXEncodedTextData  	*nextString;
+ 	    int 			lenofStrings, i;
+ 
+ 	    GetStringsLength (oc_data->data.EncodedText2D.count,
+ 	        oc_data->data.EncodedText2D.encoded_text, lenofStrings)
+ 
+ 	    totalSize += (sizeof (pexText2D) + NUMBYTES (lenofStrings));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCAnnotationText:
+ 
+ 	{
+ 	    /* Anno Text is always mono encoded */
+ 
+ 	    PEXEncodedTextData  	*nextString;
+ 	    int 			lenofStrings, i;
+ 
+ 	    GetStringsLength (oc_data->data.EncodedAnnoText.count,
+ 	        oc_data->data.EncodedAnnoText.encoded_text, lenofStrings)
+ 
+ 	    totalSize += (sizeof (pexAnnotationText) + NUMBYTES (lenofStrings));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCAnnotationText2D:
+ 
+ 	{
+ 	    /* Anno Text is always mono encoded */
+ 
+ 	    PEXEncodedTextData  	*nextString;
+ 	    int 			lenofStrings, i;
+ 
+ 	    GetStringsLength (oc_data->data.EncodedAnnoText2D.count,
+ 	        oc_data->data.EncodedAnnoText2D.encoded_text, lenofStrings)
+ 
+ 	    totalSize += (sizeof (pexAnnotationText2D) +
+ 		NUMBYTES (lenofStrings));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCPolylineSetWithData:
+ 
+ 	{
+ 	    int numPoints, lenofVertex, i;
+ 
+ 	    for (i = 0, numPoints = 0;
+ 	         i < oc_data->data.PolylineSetWithData.count; i++)
+ 	        numPoints +=
+ 	        oc_data->data.PolylineSetWithData.vertex_lists[i].count;
+ 
+ 	    lenofVertex = LENOF (pexCoord3D) +
+ 	        ((oc_data->data.PolylineSetWithData.vertex_attributes &
+ 	         PEXGAColor) ? GetColorLength (
+ 	         oc_data->data.PolylineSetWithData.color_type) : 0);
+ 
+ 	    totalSize += (sizeof (pexPolylineSet) + NUMBYTES (
+ 	        oc_data->data.PolylineSetWithData.count +
+ 	        numPoints * lenofVertex));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCNURBCurve:
+ 
+ 	{
+ 	    int sizeofVertexList, sizeofKnotList;
+ 
+     	    sizeofVertexList =
+ 	        oc_data->data.NURBCurve.count *
+ 	        ((oc_data->data.NURBCurve.rationality == PEXRational) ?
+ 	        sizeof (pexCoord4D) : sizeof (pexCoord3D));
+ 
+ 	    sizeofKnotList = NUMBYTES (
+ 	        oc_data->data.NURBCurve.order +
+ 	        oc_data->data.NURBCurve.count);
+ 
+ 	    totalSize += (sizeof (pexNurbCurve) +
+ 	        sizeofVertexList + sizeofKnotList);
+ 	    break;
+ 	}
+ 
+ 	case PEXOCFillArea:
+ 
+ 	    totalSize += (sizeof (pexFillArea) +
+ 	        oc_data->data.FillArea.count * sizeof (pexCoord3D));
+ 	    break;
+ 
+ 	case PEXOCFillArea2D:
+ 
+ 	    totalSize += (sizeof (pexFillArea2D) +
+ 	        oc_data->data.FillArea2D.count * sizeof (pexCoord2D));
+ 	    break;
+ 
+ 	case PEXOCFillAreaWithData:
+ 
+ 	{
+ 	    int lenofColor, lenofFacet, lenofVertex;
+ 
+     	    lenofColor =
+ 	        GetColorLength (oc_data->data.FillAreaWithData.color_type);
+ 
+ 	    lenofFacet =
+ 	        GetFacetDataLength (
+ 	    	oc_data->data.FillAreaWithData.facet_attributes,
+ 	    	lenofColor); 
+ 
+ 	    lenofVertex =
+ 	        GetVertexWithDataLength (
+ 	    	oc_data->data.FillAreaWithData.vertex_attributes,
+ 	    	lenofColor);
+ 
+ 	    totalSize += (sizeof (pexExtFillArea) +
+ 	        NUMBYTES (lenofFacet + 1 +
+ 	        oc_data->data.FillAreaWithData.count * lenofVertex));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCFillAreaSet:
+ 
+ 	{
+ 	    int numPoints, i;
+ 
+ 	    for (i = 0, numPoints = 0;
+ 	        i < oc_data->data.FillAreaSet.count; i++)
+ 	        numPoints +=
+ 	        oc_data->data.FillAreaSet.point_lists[i].count;
+ 
+ 	    totalSize += (sizeof (pexFillAreaSet) +
+ 	        NUMBYTES (oc_data->data.FillAreaSet.count) +
+ 	        numPoints * sizeof (pexCoord3D));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCFillAreaSet2D:
+ 
+ 	{
+ 	    int numPoints, i;
+ 
+ 	    for (i = 0, numPoints = 0;
+ 	        i < oc_data->data.FillAreaSet2D.count; i++)
+ 	        numPoints +=
+ 	        oc_data->data.FillAreaSet2D.point_lists[i].count;
+ 
+ 	    totalSize += (sizeof (pexFillAreaSet2D) +
+ 	        NUMBYTES (oc_data->data.FillAreaSet2D.count) +
+ 	        numPoints * sizeof (pexCoord2D));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCFillAreaSetWithData:
+ 
+ 	{
+ 	    int lenofColor, lenofFacet, lenofVertex;
+ 	    int numVertices, i;
+ 
+     	    lenofColor = GetColorLength (
+ 	        oc_data->data.FillAreaSetWithData.color_type);
+ 
+ 	    lenofFacet =
+ 	        GetFacetDataLength (
+ 	        oc_data->data.FillAreaSetWithData.facet_attributes,
+ 	        lenofColor); 
+ 
+ 	    lenofVertex =
+ 	        GetVertexWithDataLength (
+ 	        oc_data->data.FillAreaSetWithData.vertex_attributes,
+ 	        lenofColor);
+ 
+ 	    if (oc_data->data.FillAreaSetWithData.vertex_attributes &
+ 	        PEXGAEdges)
+ 	        lenofVertex++;         /* edge switch is CARD32 */
+ 
+ 	    for (i = 0, numVertices = 0;
+ 	        i < oc_data->data.FillAreaSetWithData.count; i++)
+ 	        numVertices +=
+ 	        oc_data->data.FillAreaSetWithData.vertex_lists[i].count;
+ 
+ 	    totalSize += (sizeof (pexExtFillAreaSet) +
+ 	        NUMBYTES (lenofFacet +
+ 	        oc_data->data.FillAreaSetWithData.count +
+ 	        numVertices * lenofVertex));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCTriangleStrip:
+ 
+ 	{
+ 	    int lenofColor, lenofFacetList, lenofVertexList;
+ 
+     	    lenofColor =
+ 	        GetColorLength (oc_data->data.TriangleStrip.color_type);
+ 
+ 	    lenofFacetList = (oc_data->data.TriangleStrip.count - 2) *
+ 	        GetFacetDataLength (
+ 	        oc_data->data.TriangleStrip.facet_attributes, lenofColor);
+ 
+ 	    lenofVertexList = oc_data->data.TriangleStrip.count *
+ 	        GetVertexWithDataLength (
+ 	        oc_data->data.TriangleStrip.vertex_attributes, lenofColor);
+ 
+ 	    totalSize += (sizeof (pexTriangleStrip) +
+ 	        NUMBYTES (lenofFacetList + lenofVertexList));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCQuadrilateralMesh:
+ 
+ 	{
+ 	    int lenofColor, lenofFacetList, lenofVertexList;
+ 
+     	    lenofColor =
+ 	        GetColorLength (oc_data->data.QuadrilateralMesh.color_type);
+ 
+ 	    lenofFacetList =
+ 	        (oc_data->data.QuadrilateralMesh.row_count - 1) *
+ 	        (oc_data->data.QuadrilateralMesh.col_count - 1) *
+ 	        GetFacetDataLength (
+ 	            oc_data->data.QuadrilateralMesh.facet_attributes,
+ 	    	lenofColor);
+ 
+ 	    lenofVertexList =
+ 	        oc_data->data.QuadrilateralMesh.row_count *
+ 	        oc_data->data.QuadrilateralMesh.col_count *
+ 	        GetVertexWithDataLength (
+ 	            oc_data->data.QuadrilateralMesh.vertex_attributes,
+ 	            lenofColor);
+ 
+ 	    totalSize += (sizeof (pexQuadrilateralMesh) +
+ 	        NUMBYTES (lenofFacetList + lenofVertexList));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCSetOfFillAreaSets:
+ 
+ 	{
+ 	    PEXConnectivityData *pConnectivity;
+ 	    int 	lenofColor, lenofFacet, lenofVertex;
+ 	    int 	sizeofEdge, sofaLength;
+ 	    int 	numContours, numFillAreaSets;
+ 	    int		numIndices, numVertices, i;
+ 
+ 	    numFillAreaSets = oc_data->data.SetOfFillAreaSets.set_count;
+ 	    numIndices = oc_data->data.SetOfFillAreaSets.index_count;
+ 	    numVertices = oc_data->data.SetOfFillAreaSets.vertex_count;
+ 
+ 	    pConnectivity = oc_data->data.SetOfFillAreaSets.connectivity;
+ 	    numContours = 0;
+ 	    for (i = 0; i < numFillAreaSets; i++, pConnectivity++)
+ 	        numContours += pConnectivity->count;
+ 
+ 	    lenofColor = GetColorLength (
+ 	        oc_data->data.SetOfFillAreaSets.color_type);
+ 	    lenofFacet = GetFacetDataLength (
+  	        oc_data->data.SetOfFillAreaSets.facet_attributes,
+ 	        lenofColor); 
+ 	    lenofVertex = GetVertexWithDataLength (
+ 	        oc_data->data.SetOfFillAreaSets.vertex_attributes,
+ 	        lenofColor);
+ 
+ 	    sizeofEdge =
+ 	        ((oc_data->data.SetOfFillAreaSets.edge_attributes == PEXOn)
+ 	        ? sizeof (CARD8) : 0);
+ 
+ 	    sofaLength = (lenofFacet * numFillAreaSets) +
+ 	        (lenofVertex * numVertices) + 
+ 	        NUMWORDS (sizeofEdge * numIndices) +
+ 	        NUMWORDS (sizeof (CARD16) *
+ 	        (numFillAreaSets + numContours + numIndices));
+ 
+ 	    totalSize += (sizeof (pexSOFAS) + NUMBYTES (sofaLength));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCNURBSurface:
+ 	{
+ 	    PEXListOfTrimCurve *ptrimLoop;
+ 	    PEXTrimCurve	   *ptrimCurve;
+ 	    int 	numMPoints, numNPoints, numTrimLoops;
+ 	    int 	uorder, vorder;
+ 	    int 	lenofVertexList, lenofUKnotList, lenofVKnotList;
+ 	    int 	lenofTrimData, count, i;
+ 
+ 	    numMPoints = oc_data->data.NURBSurface.col_count;
+ 	    numNPoints = oc_data->data.NURBSurface.row_count;
+ 	    numTrimLoops = oc_data->data.NURBSurface.curve_count;
+ 	    uorder = oc_data->data.NURBSurface.uorder;
+ 	    vorder = oc_data->data.NURBSurface.vorder;
+ 
+ 	    lenofVertexList = numMPoints * numNPoints *
+                 ((oc_data->data.NURBSurface.rationality == PEXRational)
+ 	        ? LENOF (pexCoord4D) : LENOF (pexCoord3D));
+ 	    lenofUKnotList = uorder + numMPoints;
+ 	    lenofVKnotList = vorder + numNPoints;
+ 
+ 	    lenofTrimData = numTrimLoops * LENOF (CARD32);
+ 
+ 	    ptrimLoop = oc_data->data.NURBSurface.trim_curves;
+ 	    for (i = 0; i < numTrimLoops; i++, ptrimLoop++)
+ 	    {
+ 	        ptrimCurve = ptrimLoop->curves;
+ 	        count = ptrimLoop->count;
+ 	    
+ 	        while (count--)
+ 	        {
+ 	    	lenofTrimData += (LENOF (pexTrimCurve) +
+ 	    	    ptrimCurve->count + ptrimCurve->order +
+ 	                ptrimCurve->count *
+ 	                (ptrimCurve->rationality == PEXRational ?
+ 	                LENOF (pexCoord3D) : LENOF (pexCoord2D)));
+ 	            ptrimCurve++;
+ 	        }
+ 	    }
+ 
+ 	    totalSize += (sizeof (pexNurbSurface) +
+ 	        NUMBYTES (lenofUKnotList + lenofVKnotList +
+ 	        lenofVertexList + lenofTrimData));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCCellArray:
+ 
+ 	{
+ 	    int bytes;
+ 
+ 	    bytes = oc_data->data.CellArray.col_count *
+ 	        oc_data->data.CellArray.row_count * sizeof (pexTableIndex);
+ 	    totalSize += (sizeof (pexCellArray) + PADDED_BYTES (bytes));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCCellArray2D:
+ 
+ 	{
+ 	    int bytes;
+ 
+ 	    bytes = oc_data->data.CellArray2D.col_count *
+ 	        oc_data->data.CellArray2D.row_count *
+ 	        sizeof (pexTableIndex);
+ 	    totalSize += (sizeof (pexCellArray2D) + PADDED_BYTES (bytes));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCExtendedCellArray:
+ 
+ 	{
+ 	    int lenofColorList;
+ 
+ 	    lenofColorList = oc_data->data.ExtendedCellArray.col_count *
+ 	        oc_data->data.ExtendedCellArray.row_count * GetColorLength (
+ 	        oc_data->data.ExtendedCellArray.color_type);
+ 
+ 	    totalSize += (sizeof (pexExtCellArray) +
+ 	        NUMBYTES (lenofColorList));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCGDP:
+ 
+ 	    totalSize += (sizeof (pexGdp) +
+ 	        oc_data->data.GDP.count * sizeof (pexCoord3D) +
+ 	        PADDED_BYTES (oc_data->data.GDP.length));
+ 	    break;
+ 
+ 	case PEXOCGDP2D:
+ 
+ 	    totalSize += (sizeof (pexGdp2D) +
+ 	        oc_data->data.GDP2D.count * sizeof (pexCoord2D) +
+ 	        PADDED_BYTES (oc_data->data.GDP2D.length));
+ 	    break;
+ 
+ 	case PEXOCNoop:
+ 
+ 	    totalSize += sizeof (pexNoop);
+ 	    break;
+ 
+ 	default:
+ 	    break;
+ 	}
+     }
+ 
+ #ifdef DEBUG
+     if (totalSize % 4)
+     {
+ 	printf ("PEXlib WARNING : Internal error in PEXGetSizeOCs :\n");
+ 	printf ("Memory allocated is not word aligned.\n");
+     }
+ #endif
+ 
+     return (totalSize);
+ }
+ 
+ 
+ unsigned long
+ PEXCountOCs (float_format, length, encoded_ocs)
+ 
+ INPUT int		float_format;
+ INPUT unsigned long     length;
+ INPUT char		*encoded_ocs;
+ 
+ {
+     char		*ptr = encoded_ocs;
+     unsigned long	oc_count = 0;
+     int			totalSize = 0;
+     pexElementInfo	*elemInfo;
+ 
+ 
+     /*
+      * Keep parsing the data until the end of the buffer is reached.
+      * Increment the oc count as we go along.
+      */
+ 
+     while (totalSize < length)
+     {
+ 	elemInfo = (pexElementInfo *) ptr;
+ 
+ 	switch (elemInfo->elementType)
+ 	{
+ 	case PEXOCMarkerType:
+ 	case PEXOCLineType:
+ 	case PEXOCATextStyle:
+ 	case PEXOCBFInteriorStyle:
+ 	case PEXOCBFReflectionModel:
+ 	case PEXOCBFSurfaceInterpMethod:
+ 	case PEXOCInteriorStyle:
+ 	case PEXOCPolylineInterpMethod:
+ 	case PEXOCReflectionModel:
+ 	case PEXOCRenderingColorModel:
+ 	case PEXOCSurfaceEdgeType:
+ 	case PEXOCSurfaceInterpMethod:
+ 
+ 	    ptr += sizeof (pexMarkerType);
+ 	    break;
+ 
+ 	case PEXOCMarkerColorIndex:
+ 	case PEXOCMarkerBundleIndex:
+ 	case PEXOCTextFontIndex:
+ 	case PEXOCTextColorIndex:
+ 	case PEXOCTextBundleIndex:
+ 	case PEXOCLineColorIndex:
+ 	case PEXOCLineBundleIndex:
+ 	case PEXOCSurfaceColorIndex:
+ 	case PEXOCBFInteriorStyleIndex:
+ 	case PEXOCBFSurfaceColorIndex:
+ 	case PEXOCInteriorBundleIndex:
+ 	case PEXOCInteriorStyleIndex:
+ 	case PEXOCSurfaceEdgeColorIndex:
+ 	case PEXOCEdgeBundleIndex:
+ 	case PEXOCViewIndex:
+ 	case PEXOCDepthCueIndex:
+ 	case PEXOCColorApproxIndex:
+ 
+ 	    ptr += sizeof (pexMarkerColorIndex);
+ 	    break;
+ 
+ 	case PEXOCMarkerColor:
+ 	case PEXOCTextColor:
+ 	case PEXOCLineColor:
+ 	case PEXOCSurfaceColor:
+ 	case PEXOCBFSurfaceColor:
+ 	case PEXOCSurfaceEdgeColor:
+ 
+ 	{
+ 	    pexMarkerColor *oc = (pexMarkerColor *) ptr;
+     
+ 	    ptr += (sizeof (pexMarkerColor) +
+ 		GetColorSize (oc->colorSpec.colorType));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCMarkerScale:
+ 	case PEXOCCharExpansion:
+ 	case PEXOCCharSpacing:
+ 	case PEXOCCharHeight:
+ 	case PEXOCATextHeight:
+ 	case PEXOCLineWidth:
+ 	case PEXOCSurfaceEdgeWidth:
+ 
+ 	    ptr += sizeof (pexMarkerScale);
+ 	    break;
+ 
+ 	case PEXOCTextPrecision:
+ 	case PEXOCTextPath:
+ 	case PEXOCATextPath:
+ 
+ 	    ptr += sizeof (pexTextPrecision);
+ 	    break;
+ 
+ 	case PEXOCCharUpVector:
+ 	case PEXOCATextUpVector:
+ 
+ 	    ptr += sizeof (pexCharUpVector);
+ 	    break;
+ 
+ 	case PEXOCTextAlignment:
+ 	case PEXOCATextAlignment:
+ 
+ 	    ptr += sizeof (pexTextAlignment);
+ 	    break;
+ 
+ 	case PEXOCCurveApprox:
+ 
+ 	    ptr += sizeof (pexCurveApproximation);
+ 	    break;
+ 
+ 	case PEXOCReflectionAttributes:
+ 	case PEXOCBFReflectionAttributes:
+ 
+ 	{
+ 	    pexSurfaceReflAttr *oc = (pexSurfaceReflAttr *) ptr;
+     
+ 	    ptr += (sizeof (pexSurfaceReflAttr) +
+ 		GetColorSize (oc->reflectionAttr.specularColor.colorType));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCSurfaceApprox:
+ 
+ 	    ptr += sizeof (pexSurfaceApproximation);
+ 	    break;
+ 
+ 	case PEXOCFacetCullingMode:
+ 
+ 	    ptr += sizeof (pexCullingMode);
+ 	    break;
+ 
+ 	case PEXOCFacetDistinguishFlag:
+ 	case PEXOCSurfaceEdgeFlag:
+ 	case PEXOCModelClipFlag:
+ 
+ 	    ptr += sizeof (pexDistinguishFlag);
+ 	    break;
+ 
+ 	case PEXOCPatternSize:
+ 
+ 	    ptr += sizeof (pexPatternSize);
+ 	    break;
+ 
+ 	case PEXOCPatternAttributes2D:
+ 
+ 	    ptr += sizeof (pexPatternRefPt);
+ 	    break;
+ 
+ 	case PEXOCPatternAttributes:
+ 
+ 	    ptr += sizeof (pexPatternAttr);
+ 	    break;
+ 
+ 	case PEXOCIndividualASF:
+ 
+ 	    ptr += sizeof (pexSetAsfValues);
+ 	    break;
+ 
+ 	case PEXOCLocalTransform:
+ 
+ 	    ptr += sizeof (pexLocalTransform);
+ 	    break;
+ 
+ 	case PEXOCLocalTransform2D:
+ 
+ 	    ptr += sizeof (pexLocalTransform2D);
+ 	    break;
+ 
+ 	case PEXOCGlobalTransform:
+ 
+ 	    ptr += sizeof (pexGlobalTransform);
+ 	    break;
+ 
+ 	case PEXOCGlobalTransform2D:
+ 
+ 	    ptr += sizeof (pexGlobalTransform2D);
+ 	    break;
+ 
+ 	case PEXOCModelClipVolume:
+ 
+ 	{
+ 	    pexModelClipVolume 	*oc = (pexModelClipVolume *) ptr;
+     
+ 	    ptr += (sizeof (pexModelClipVolume) +
+ 		oc->numHalfSpaces * sizeof (pexHalfSpace));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCModelClipVolume2D:
+ 
+ 	{
+ 	    pexModelClipVolume2D *oc = (pexModelClipVolume2D *) ptr;
+     
+ 	    ptr += (sizeof (pexModelClipVolume2D) +
+ 		oc->numHalfSpaces * sizeof (pexHalfSpace2D));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCRestoreModelClipVolume:
+ 
+ 	    ptr += sizeof (pexRestoreModelClip);
+ 	    break;
+ 
+ 	case PEXOCLightSourceState:
+ 
+ 	{
+ 	    pexLightState 	*oc = (pexLightState *) ptr;
+ 	    int			size;
+     
+ 	    size = oc->numEnable * sizeof (PEXTableIndex);
+ 	    ptr += (sizeof (pexLightState) + PADDED_BYTES (size));
+     
+ 	    size = oc->numDisable * sizeof (PEXTableIndex);
+ 	    ptr += PADDED_BYTES (size);
+ 	    break;
+ 	}
+ 
+ 	case PEXOCPickID:
+ 	case PEXOCHLHSRID:
+ 
+ 	    ptr += sizeof (pexPickId);
+ 	    break;
+ 
+ 	case PEXOCParaSurfCharacteristics:
+ 
+ 	{
+ 	    pexParaSurfCharacteristics *oc = (pexParaSurfCharacteristics *) ptr;
+ 
+ 	    switch (oc->characteristics)
+ 	    {
+ 	    case PEXPSCIsoCurves:
+ 		ptr = (char *) (oc + 1) + sizeof (pexPSC_IsoparametricCurves);
+ 		break;
+ 	
+ 	    case PEXPSCMCLevelCurves:
+ 	    case PEXPSCWCLevelCurves:
+ 	    {
+ 		pexPSC_LevelCurves *level = (pexPSC_LevelCurves *) (oc + 1);
+ 
+ 		ptr = (char *) (level + 1) +
+ 		    sizeof (float) * level->numberIntersections;
+ 		break;
+ 	    }
+ 	
+ 	    default:
+ 		ptr = (char *) (oc + 1) + PADDED_BYTES (oc->length);
+ 		break;
+ 	    }
+ 
+ 	    break;
+ 	}
+ 
+ 	case PEXOCAddToNameSet:
+ 	case PEXOCRemoveFromNameSet:
+ 
+ 	    ptr += (sizeof (pexAddToNameSet) +
+ 		(elemInfo->length - 1) * sizeof (PEXName));
+ 	    break;
+ 
+ 	case PEXOCExecuteStructure:
+ 
+ 	    ptr += sizeof (pexExecuteStructure);
+ 	    break;
+ 
+ 	case PEXOCLabel:
+ 
+ 	    ptr += sizeof (pexLabel);
+ 	    break;
+ 
+ 	case PEXOCApplicationData:
+ 
+ 	{
+ 	    pexApplicationData *oc = (pexApplicationData *) ptr;
+ 
+ 	    ptr += (sizeof (pexApplicationData) +
+ 		PADDED_BYTES (oc->numElements));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCGSE:
+ 
+ 	{
+ 	    pexGse *oc = (pexGse *) ptr;
+ 
+ 	    ptr += (sizeof (pexGse) + PADDED_BYTES (oc->numElements));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCMarkers:
+ 	case PEXOCPolyline:
+ 
+ 	    ptr += (sizeof (pexMarker) + sizeof (pexCoord3D) *
+ 	    	(sizeof (CARD32) * (elemInfo->length-1)) / sizeof (pexCoord3D));
+ 	    break;
+ 
+ 	case PEXOCMarkers2D:
+ 	case PEXOCPolyline2D:
+ 
+ 	    ptr += (sizeof (pexMarker2D) + sizeof (pexCoord2D) *
+ 	    	(sizeof (CARD32) * (elemInfo->length-1)) / sizeof (pexCoord2D));
+ 	    break;
+ 
+ 	case PEXOCText:
+ 
+ 	{
+ 	    /* Text is always mono encoded */
+ 
+ 	    pexText 		*oc = (pexText *) ptr;
+ 	    pexMonoEncoding	*enc;
+ 	    int			i;
+ 
+ 	    enc = (pexMonoEncoding *) (oc + 1);
+ 
+ 	    for (i = 0; i < (int) oc->numEncodings; i++)
+ 	    {
+ 		enc = (pexMonoEncoding *) ((char *) enc +
+ 	            sizeof (pexMonoEncoding) + PADDED_BYTES (enc->numChars));
+ 	    }
+ 
+ 	    ptr = (char *) enc;
+ 	    break;
+ 	}
+ 
+ 	case PEXOCText2D:
+ 
+ 	{
+ 	    /* Text is always mono encoded */
+ 
+ 	    pexText2D 		*oc = (pexText2D *) ptr;
+ 	    pexMonoEncoding	*enc;
+ 	    int			i;
+ 
+ 	    enc = (pexMonoEncoding *) (oc + 1);
+ 
+ 	    for (i = 0; i < (int) oc->numEncodings; i++)
+ 	    {
+ 		enc = (pexMonoEncoding *) ((char *) enc +
+ 	            sizeof (pexMonoEncoding) + PADDED_BYTES (enc->numChars));
+ 	    }
+ 
+ 	    ptr = (char *) enc;
+ 	    break;
+ 	}
+ 
+ 	case PEXOCAnnotationText:
+ 
+ 	{
+ 	    /* Anno Text is always mono encoded */
+ 
+ 	    pexAnnotationText 	*oc = (pexAnnotationText *) ptr;
+ 	    pexMonoEncoding	*enc;
+ 	    int			i;
+ 
+ 	    enc = (pexMonoEncoding *) (oc + 1);
+ 
+ 	    for (i = 0; i < (int) oc->numEncodings; i++)
+ 	    {
+ 		enc = (pexMonoEncoding *) ((char *) enc +
+ 	            sizeof (pexMonoEncoding) + PADDED_BYTES (enc->numChars));
+ 	    }
+ 
+ 	    ptr = (char *) enc;
+ 	    break;
+ 	}
+ 
+ 	case PEXOCAnnotationText2D:
+ 
+ 	{
+ 	    /* Anno Text is always mono encoded */
+ 
+ 	    pexAnnotationText2D	*oc = (pexAnnotationText2D *) ptr;
+ 	    pexMonoEncoding	*enc;
+ 	    int			i;
+ 
+ 	    enc = (pexMonoEncoding *) (oc + 1);
+ 
+ 	    for (i = 0; i < (int) oc->numEncodings; i++)
+ 	    {
+ 		enc = (pexMonoEncoding *) ((char *) enc +
+ 	            sizeof (pexMonoEncoding) + PADDED_BYTES (enc->numChars));
+ 	    }
+ 
+ 	    ptr = (char *) enc;
+ 	    break;
+ 	}
+ 
+ 	case PEXOCPolylineSetWithData:
+ 
+ 	{
+ 	    pexPolylineSet 	*oc = (pexPolylineSet *) ptr;
+ 	    int			lenofVertex, count, i;
+ 
+ 	    lenofVertex = LENOF (pexCoord3D) +
+ 		((oc->vertexAttribs & PEXGAColor) ?
+ 		GetColorLength (oc->colorType) : 0); 
+ 
+ 	    ptr = (char *) (oc + 1);
+ 
+ 	    for (i = 0; i < oc->numLists; i++)
+ 	    {
+ 		count = *((CARD32 *) ptr);
+ 		ptr += (sizeof (CARD32) + NUMBYTES (count * lenofVertex));
+ 	    }
+ 	    break;
+ 	}
+ 
+ 	case PEXOCNURBCurve:
+ 
+ 	{
+ 	    pexNurbCurve	*oc = (pexNurbCurve *) ptr;
+ 
+ 	    ptr += (sizeof (pexNurbCurve) + oc->numKnots * sizeof (float) +
+ 	        (oc->numPoints * ((oc->coordType == PEXRational) ?
+ 		sizeof (pexCoord4D) : sizeof (pexCoord3D))));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCFillArea:
+ 
+ 	{
+ 	    int 		count;
+     
+ 	    count = (sizeof (CARD32) * (elemInfo->length - 2)) /
+ 		sizeof (pexCoord3D);
+     
+ 	    ptr += (sizeof (pexFillArea) + count * sizeof (pexCoord3D));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCFillArea2D:
+ 
+ 	{
+ 	    int 		count;
+     
+ 	    count = (sizeof (CARD32) * (elemInfo->length - 2)) /
+ 		sizeof (pexCoord2D);
+     
+ 	    ptr += (sizeof (pexFillArea2D) + count * sizeof (pexCoord2D));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCFillAreaWithData:
+ 
+ 	{
+ 	    pexExtFillArea 	*oc = (pexExtFillArea *) ptr;
+ 	    int			lenofFacetData;
+ 	    int			lenofVertex;
+ 	    int			lenofColor, count;
+     
+ 	    lenofColor = GetColorLength (oc->colorType);
+ 	    lenofFacetData = GetFacetDataLength (oc->facetAttribs, lenofColor); 
+ 	    lenofVertex = GetVertexWithDataLength (
+ 		oc->vertexAttribs, lenofColor);
+ 
+ 	    ptr = (char *) (oc + 1);
+ 
+ 	    if (oc->facetAttribs)
+ 		ptr += NUMBYTES (lenofFacetData);
+ 
+ 	    count = *((CARD32 *) ptr);
+ 	    ptr += (sizeof (CARD32) + count * NUMBYTES (lenofVertex));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCFillAreaSet:
+ 
+ 	{
+ 	    pexFillAreaSet 	*oc = (pexFillAreaSet *) ptr;
+ 	    int			count, i;
+ 
+ 	    ptr = (char *) (oc + 1);
+ 
+ 	    for (i = 0; i < oc->numLists; i++)
+ 	    {
+ 		count = *((CARD32 *) ptr);
+ 		ptr += (sizeof (CARD32) + count * sizeof (pexCoord3D));
+ 	    }
+ 	    break;
+ 	}
+ 
+ 	case PEXOCFillAreaSet2D:
+ 
+ 	{
+ 	    pexFillAreaSet2D 	*oc = (pexFillAreaSet2D *) ptr;
+ 	    int			count, i;
+ 
+ 	    ptr = (char *) (oc + 1);
+ 
+ 	    for (i = 0; i < oc->numLists; i++)
+ 	    {
+ 		count = *((CARD32 *) ptr);
+ 		ptr += (sizeof (CARD32) + count * sizeof (pexCoord2D));
+ 	    }
+ 	    break;
+ 	}
+ 
+ 	case PEXOCFillAreaSetWithData:
+ 
+ 	{
+ 	    pexExtFillAreaSet 	*oc = (pexExtFillAreaSet *) ptr;
+ 	    int			lenofFacetData;
+ 	    int			lenofVertex;
+ 	    int			lenofColor, count, i;
+ 
+ 	    lenofColor = GetColorLength (oc->colorType);
+ 	    lenofFacetData = GetFacetDataLength (oc->facetAttribs, lenofColor); 
+ 	    lenofVertex = GetVertexWithDataLength (
+ 		oc->vertexAttribs, lenofColor);
+     
+ 	    if (oc->vertexAttribs & PEXGAEdges)
+ 		lenofVertex++; 			/* edge switch is CARD32 */
+ 
+ 	    ptr = (char *) (oc + 1);
+ 
+ 	    if (oc->facetAttribs)
+ 		ptr += NUMBYTES (lenofFacetData);
+ 
+ 	    for (i = 0; i < oc->numLists; i++)
+ 	    {
+ 		count = *((CARD32 *) ptr);
+ 		ptr += (sizeof (CARD32) + count * NUMBYTES (lenofVertex));
+ 	    }
+ 	    break;
+ 	}
+ 
+ 	case PEXOCTriangleStrip:
+ 
+ 	{
+ 	    pexTriangleStrip 	*oc = (pexTriangleStrip *) ptr;
+ 	    int			lenofColor;
+ 	    int			lenofFacetDataList;
+ 	    int			lenofVertexList;
+ 
+ 	    lenofColor = GetColorLength (oc->colorType);
+ 	    lenofFacetDataList = (oc->numVertices - 2) *
+ 		GetFacetDataLength (oc->facetAttribs, lenofColor); 
+ 	    lenofVertexList = oc->numVertices *
+ 		GetVertexWithDataLength (oc->vertexAttribs, lenofColor);
+ 
+ 	    ptr = (char *) (oc + 1);
+ 
+ 	    if (oc->facetAttribs)
+ 		ptr += NUMBYTES (lenofFacetDataList);
+ 
+ 	    ptr += NUMBYTES (lenofVertexList);
+ 	    break;
+ 	}
+ 
+ 	case PEXOCQuadrilateralMesh:
+ 
+ 	{
+ 	    pexQuadrilateralMesh 	*oc = (pexQuadrilateralMesh *) ptr;
+ 	    int				lenofColor;
+ 	    int				lenofFacetDataList;
+ 	    int				lenofVertexList;
+ 
+ 	    lenofColor = GetColorLength (oc->colorType);
+ 	    lenofFacetDataList = ((oc->mPts - 1) * (oc->nPts - 1)) *
+ 		GetFacetDataLength (oc->facetAttribs, lenofColor); 
+ 	    lenofVertexList = oc->mPts * oc->nPts *
+ 		GetVertexWithDataLength (oc->vertexAttribs, lenofColor);
+ 
+ 	    ptr = (char *) (oc + 1);
+ 
+ 	    if (oc->facetAttribs)
+ 		ptr += NUMBYTES (lenofFacetDataList);
+ 
+ 	    ptr += NUMBYTES (lenofVertexList);
+ 	    break;
+ 	}
+ 
+ 	case PEXOCSetOfFillAreaSets:
+ 
+ 	{
+ 	    pexSOFAS		*oc = (pexSOFAS *) ptr;
+ 	    int 		lenofColor;
+ 	    int 		lenofFacet;
+ 	    int 		lenofVertex;
+ 	    int			count, scount, cbytes, i, j;
+ 
+ 	    lenofColor = GetColorLength (oc->colorType);
+ 	    lenofFacet = GetFacetDataLength (oc->FAS_Attributes, lenofColor); 
+ 	    lenofVertex = GetVertexWithDataLength (
+ 		oc->vertexAttributes, lenofColor);
+ 
+ 	    ptr = (char *) (oc + 1);
+ 
+ 	    if (oc->FAS_Attributes)
+ 		ptr += (NUMBYTES (lenofFacet) * oc->numFAS);
+ 
+ 	    ptr += (NUMBYTES (lenofVertex) * oc->numVertices);
+ 
+ 	    if (oc->edgeAttributes)
+ 		ptr += PADDED_BYTES (oc->numEdges * sizeof (CARD8));
+ 	
+ 	    for (i = 0; i < (int) oc->numFAS; i++)
+ 	    {
+ 		count = *((CARD16 *) ptr);
+ 		ptr += sizeof (CARD16);
+ 
+ 		for (j = 0; j < count; j++)
+ 		{
+ 		    scount = *((CARD16 *) ptr);
+ 		    ptr += (sizeof (CARD16) + (scount * sizeof (CARD16)));
+ 		}
+ 	    }
+ 	
+ 	    cbytes = sizeof (CARD16) *
+ 		(oc->numFAS + oc->numContours + oc->numEdges);
+ 
+ 	    ptr += PAD (cbytes);
+ 	    break;
+ 	}
+ 
+ 	case PEXOCNURBSurface:
+ 
+ 	{
+ 	    pexNurbSurface	*oc = (pexNurbSurface *) ptr;
+ 	    int			sizeofVertexList;
+ 	    int			sizeofUKnotList;
+ 	    int			sizeofVKnotList;
+ 	    pexTrimCurve	*trim;
+ 	    int			count, i, j;
+ 
+ 	    sizeofVertexList = oc->mPts * oc->nPts *
+ 		((oc->type == PEXRational) ?
+ 		sizeof (pexCoord4D) : sizeof (pexCoord3D));
+ 	    sizeofUKnotList = NUMBYTES (oc->uOrder + oc->mPts);
+ 	    sizeofVKnotList = NUMBYTES (oc->vOrder + oc->nPts);
+ 
+ 	    ptr += (sizeof (pexNurbSurface) +
+ 		sizeofUKnotList + sizeofVKnotList + sizeofVertexList);
+ 
+ 	    for (i = 0; i < oc->numLists; i++)
+ 	    {
+ 		count = *((CARD32 *) ptr);
+ 		ptr += sizeof (CARD32);
+ 
+ 		for (j = 0; j < count; j++)
+ 		{
+ 		    trim = (pexTrimCurve *) ptr;
+ 		    ptr += (sizeof (pexTrimCurve) +
+ 		        NUMBYTES (trim->order + trim->numCoord) +
+ 		        trim->numCoord * ((trim->type == PEXRational) ?
+ 		        sizeof (pexCoord3D) : sizeof (pexCoord2D)));
+ 		}
+ 	    }
+ 	    break;
+ 	}
+ 
+ 	case PEXOCCellArray:
+ 
+ 	{
+ 	    pexCellArray	*oc = (pexCellArray *) ptr;
+ 	    int			size;
+ 
+ 	    size = oc->dx * oc->dy * sizeof (pexTableIndex);
+ 	    ptr += (sizeof (pexCellArray) + PADDED_BYTES (size));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCCellArray2D:
+ 
+ 	{
+ 	    pexCellArray2D	*oc = (pexCellArray2D *) ptr;
+ 	    int			size;
+ 
+ 	    size = oc->dx * oc->dy * sizeof (pexTableIndex);
+ 	    ptr += (sizeof (pexCellArray2D) + PADDED_BYTES (size));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCExtendedCellArray:
+ 
+ 	{
+ 	    pexExtCellArray	*oc = (pexExtCellArray *) ptr;
+ 
+ 	    ptr += (sizeof (pexExtCellArray) + 
+ 		oc->dx * oc->dy * NUMBYTES (GetColorLength (oc->colorType)));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCGDP:
+ 
+ 	{
+ 	    pexGdp	*oc = (pexGdp *) ptr;
+ 
+ 	    ptr += (sizeof (pexGdp) + oc->numPoints * sizeof (pexCoord3D) +
+ 	        PADDED_BYTES (oc->numBytes));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCGDP2D:
+ 
+ 	{
+ 	    pexGdp2D	*oc = (pexGdp2D *) ptr;
+ 
+ 	    ptr += (sizeof (pexGdp2D) + oc->numPoints * sizeof (pexCoord2D) +
+ 	        PADDED_BYTES (oc->numBytes));
+ 	    break;
+ 	}
+ 
+ 	case PEXOCNoop:
+ 
+ 	    ptr += sizeof (pexNoop);
+ 	    break;
+ 
+ 	default:
+ 	    break;
+ 	}
+ 
+ 	totalSize += (ptr - (char *) elemInfo);
+ 	oc_count++;
+     }
+ 
+ #ifdef DEBUG
+     if (totalSize > length)
+     {
+ 	printf ("PEXlib WARNING : Internal error in PEXCountOCs :\n");
+ 	printf ("OC parsing continued past the end of the input buffer.\n");
+     }
+ #endif
+ 
+     return (oc_count);
  }
*** /tmp/da19780	Tue Jun 30 16:37:42 1992
--- extensions/lib/PEXlib/pl_oc_util.h	Tue Jun 30 12:39:46 1992
***************
*** 1,4 ****
! /* $XConsortium: pl_oc_util.h,v 1.2 92/05/20 21:12:25 mor Exp $ */
  
  /************************************************************************
  Copyright 1992 by the Massachusetts Institute of Technology,
--- 1,4 ----
! /* $XConsortium: pl_oc_util.h,v 1.4 92/06/30 12:43:10 mor Exp $ */
  
  /************************************************************************
  Copyright 1992 by the Massachusetts Institute of Technology,
***************
*** 95,101 ****
          _display->bufptr += sizeof (pexElementInfo); \
          if (_numBytes > 0) \
  	{ \
! 	    COPY_AREA (_ocData, _display->bufptr, _numBytes); \
  	    _display->bufptr += PADDED_BYTES (_numBytes); \
  	} \
          PEXFinishOC (_display); \
--- 95,101 ----
          _display->bufptr += sizeof (pexElementInfo); \
          if (_numBytes > 0) \
  	{ \
! 	    COPY_SMALL_AREA (_ocData, _display->bufptr, _numBytes); \
  	    _display->bufptr += PADDED_BYTES (_numBytes); \
  	} \
          PEXFinishOC (_display); \
***************
*** 190,197 ****
   * DESCRIPTION:
   *	This macro will initialize an OC encoding in the X transport buffer.
   *	It will fill in the OC element header and return a pointer in _pReq
!  *	which points directly after the header.  PEXlib will copy the rest
!  *	of the data into the X transport buffer.
   */
  
  #define PEXInitOC(_display, _resID, _reqType, _ocType, _ocHeaderLength, _ocDataLength, _pReqType, _pReq) \
--- 190,197 ----
   * DESCRIPTION:
   *	This macro will initialize an OC encoding in the X transport buffer.
   *	It will fill in the OC element header and return a pointer in _pReq
!  *	which points to the start of the OC.  PEXlib will copy the rest of
!  * 	the data into the X transport buffer.
   */
  
  #define PEXInitOC(_display, _resID, _reqType, _ocType, _ocHeaderLength, _ocDataLength, _pReqType, _pReq) \
***************
*** 244,250 ****
      STORE_ELEMENT_INFO (_bufPtr, _ocType, ocLength); \
      _bufPtr += sizeof (pexElementInfo); \
      if (_numBytes > 0) { \
! 	COPY_AREA (_ocData, _bufPtr, _numBytes); \
          _bufPtr += PADDED_BYTES (_numBytes); \
      } \
  }
--- 244,250 ----
      STORE_ELEMENT_INFO (_bufPtr, _ocType, ocLength); \
      _bufPtr += sizeof (pexElementInfo); \
      if (_numBytes > 0) { \
! 	COPY_SMALL_AREA (_ocData, _bufPtr, _numBytes); \
          _bufPtr += PADDED_BYTES (_numBytes); \
      } \
  }
***************
*** 319,325 ****
   * DESCRIPTION:
   *	This macro will initialize an OC encoding in an application buffer.
   *	It will fill in the OC element header and return a pointer in _pInfo
!  *	which points directly after the header.  PEXlib will fill in the rest.
   */
  
  #define PEXInitEncodeOC(_bufPtr, _ocType, _headerLength, _dataLength, _pInfoType, _pInfo) \
--- 319,325 ----
   * DESCRIPTION:
   *	This macro will initialize an OC encoding in an application buffer.
   *	It will fill in the OC element header and return a pointer in _pInfo
!  *	which points to the start of the OC.  PEXlib will fill in the rest.
   */
  
  #define PEXInitEncodeOC(_bufPtr, _ocType, _headerLength, _dataLength, _pInfoType, _pInfo) \
***************
*** 327,334 ****
      int	ocLength = _headerLength + _dataLength; \
  \
      STORE_ELEMENT_INFO (_bufPtr, _ocType, ocLength); \
-     _bufPtr += sizeof (pexElementInfo); \
      _pInfo = (_pInfoType *) _bufPtr; \
  }
  
  
--- 327,334 ----
      int	ocLength = _headerLength + _dataLength; \
  \
      STORE_ELEMENT_INFO (_bufPtr, _ocType, ocLength); \
      _pInfo = (_pInfoType *) _bufPtr; \
+     _bufPtr += NUMBYTES (_headerLength); \
  }
  
  
***************
*** 346,352 ****
   *
   * DESCRIPTION:
   *	This macro will copy _numBytes from _src to _dest, advancing
!  *	_dest by NUMWORDS (_numBytes).  This macro should be used
   *	after PEXInitEncodeOC is called.
   */
  
--- 346,352 ----
   *
   * DESCRIPTION:
   *	This macro will copy _numBytes from _src to _dest, advancing
!  *	_dest by PADDED_BYTES (_numBytes).  This macro should be used
   *	after PEXInitEncodeOC is called.
   */
  
***************
*** 358,363 ****
--- 358,386 ----
  
  /*
   * NAME:
+  *	PEXEncodeWords
+  *
+  * ARGUMENTS:
+  *	_src		The source buffer pointer.
+  *
+  *	_dest		The destination buffer pointer.
+  *
+  *	_numWords	The number of words to copy.
+  *
+  * DESCRIPTION:
+  *	This macro will copy _numWords from _src to _dest, advancing
+  *	_dest by NUMBYTES (_numWords).  This macro should be used after
+  *	PEXInitEncodeOC is called.
+  */
+ 
+ #define PEXEncodeWords(_src, _dest, _numWords) \
+     COPY_AREA (_src, _dest, NUMBYTES (_numWords)); \
+     _dest += NUMBYTES (_numWords);
+ 
+ 
+ 
+ /*
+  * NAME:
   *	StoreDefaultMonoString
   *
   * ARGUMENTS:
***************
*** 429,435 ****
  
  /*
   * NAME:
!  *	StoreEncodedStrings
   *
   * ARGUMENTS:
   *	_display	The display pointer.
--- 452,458 ----
  
  /*
   * NAME:
!  *	StoreMonoStrings
   *
   * ARGUMENTS:
   *	_display	The display pointer.
***************
*** 446,452 ****
   *    	PEXEncodedTextData	*nextString;
   */
  
! #define StoreEncodedStrings(_display, _numStrings, _stringList) \
  { \
      nextString = (_stringList); \
      for (i = 0; i < (_numStrings); i++, nextString++) \
--- 469,475 ----
   *    	PEXEncodedTextData	*nextString;
   */
  
! #define StoreMonoStrings(_display, _numStrings, _stringList) \
  { \
      nextString = (_stringList); \
      for (i = 0; i < (_numStrings); i++, nextString++) \
***************
*** 467,469 ****
--- 490,540 ----
  		nextString->length, (char *) nextString->ch); \
      } \
  }
+ 
+ 
+ 
+ /*
+  * NAME:
+  *	EncodeMonoStrings
+  *
+  * ARGUMENTS:
+  *	_bufPtr		The buffer pointer.
+  *
+  *	_numStrings	The number of strings in the mono encoded text.
+  *
+  *	_stringList	The mono encoded text strings.
+  *
+  * DESCRIPTION:
+  * 	Store a mono encoded string in the OC encode buffer.  For efficiency,
+  *	this macro uses the following globals:
+  *
+  *    	int	       		i;
+  *    	PEXEncodedTextData	*nextString;
+  */
+ 
+ #define EncodeMonoStrings(_bufPtr, _numStrings, _stringList) \
+ { \
+     nextString = (_stringList); \
+     for (i = 0; i < (_numStrings); i++, nextString++) \
+     { \
+ 	PEXEncodeWords ((char *) nextString, _bufPtr, \
+ 	    LENOF (pexMonoEncoding)); \
+ \
+ 	if (nextString->character_set_width == PEXCSLong) \
+ 	{ \
+ 	    PEXEncodeBytes ((char *) nextString->ch, _bufPtr, \
+ 		nextString->length * sizeof (long)); \
+ 	} \
+ 	else if (nextString->character_set_width == PEXCSShort) \
+         { \
+ 	    PEXEncodeBytes ((char *) nextString->ch, _bufPtr, \
+ 		nextString->length * sizeof (short)); \
+ 	} \
+ 	else /* nextString->character_set_width == PEXCSByte) */ \
+         { \
+ 	    PEXEncodeBytes ((char *) nextString->ch, _bufPtr, \
+ 		nextString->length); \
+ 	} \
+     } \
+ }
+ 
*** /tmp/da19799	Tue Jun 30 16:37:46 1992
--- extensions/lib/PEXlib/pl_pc.c	Tue Jun 30 12:35:49 1992
***************
*** 1,4 ****
! /* $XConsortium: pl_pc.c,v 1.4 92/05/26 11:08:11 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
--- 1,4 ----
! /* $XConsortium: pl_pc.c,v 1.6 92/06/30 12:39:42 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
***************
*** 329,335 ****
  		break;
              case PEXPCMarkerColor:
  		PackColorSpecifier (&(values->marker_color), pv, sizeColor);
! 		pv += NUMWORDS (sizeof (pexColourSpecifier) + sizeColor); 
  		break;
              case PEXPCMarkerBundleIndex:
  		*pv = values->marker_bundle_index;
--- 329,335 ----
  		break;
              case PEXPCMarkerColor:
  		PackColorSpecifier (&(values->marker_color), pv, sizeColor);
! 		pv += NUMWORDS (sizeof (pexColorSpecifier) + sizeColor); 
  		break;
              case PEXPCMarkerBundleIndex:
  		*pv = values->marker_bundle_index;
***************
*** 353,359 ****
  		break;
              case PEXPCTextColor:
  		PackColorSpecifier (&(values->text_color), pv, sizeColor);
! 		pv += NUMWORDS (sizeof (pexColourSpecifier) + sizeColor); 
  		break;
              case PEXPCCharHeight:
  		*((float *) pv) = values->char_height;
--- 353,359 ----
  		break;
              case PEXPCTextColor:
  		PackColorSpecifier (&(values->text_color), pv, sizeColor);
! 		pv += NUMWORDS (sizeof (pexColorSpecifier) + sizeColor); 
  		break;
              case PEXPCCharHeight:
  		*((float *) pv) = values->char_height;
***************
*** 421,427 ****
  		break;
              case PEXPCLineColor:
  		PackColorSpecifier (&(values->line_color), pv, sizeColor);
! 		pv += NUMWORDS (sizeof (pexColourSpecifier) + sizeColor); 
  		break;
              case PEXPCCurveApprox:
  		*pv = values->curve_approx.method;
--- 421,427 ----
  		break;
              case PEXPCLineColor:
  		PackColorSpecifier (&(values->line_color), pv, sizeColor);
! 		pv += NUMWORDS (sizeof (pexColorSpecifier) + sizeColor); 
  		break;
              case PEXPCCurveApprox:
  		*pv = values->curve_approx.method;
***************
*** 447,453 ****
  		break;
              case PEXPCSurfaceColor:
  		PackColorSpecifier (&(values->surface_color), pv, sizeColor);
! 		pv += NUMWORDS (sizeof (pexColourSpecifier) + sizeColor); 
  		break;
              case PEXPCReflectionAttr:
  		((pexReflectionAttr *) pv)->ambient = 
--- 447,453 ----
  		break;
              case PEXPCSurfaceColor:
  		PackColorSpecifier (&(values->surface_color), pv, sizeColor);
! 		pv += NUMWORDS (sizeof (pexColorSpecifier) + sizeColor); 
  		break;
              case PEXPCReflectionAttr:
  		((pexReflectionAttr *) pv)->ambient = 
***************
*** 461,467 ****
  		((pexReflectionAttr *) pv)->transmission = 
  		    values->reflection_attr.transmission;
  		PackColorSpecifier (&(values->reflection_attr.specular_color), 
! 		    &(((pexReflectionAttr *) pv)->specularColour), 
  		    sizeColor);
  		pv += NUMWORDS (sizeof (pexReflectionAttr) + sizeColor); 
  		break;
--- 461,467 ----
  		((pexReflectionAttr *) pv)->transmission = 
  		    values->reflection_attr.transmission;
  		PackColorSpecifier (&(values->reflection_attr.specular_color), 
! 		    &(((pexReflectionAttr *) pv)->specularColor), 
  		    sizeColor);
  		pv += NUMWORDS (sizeof (pexReflectionAttr) + sizeColor); 
  		break;
***************
*** 484,490 ****
              case PEXPCBFSurfaceColor:
  		PackColorSpecifier (&(values->bf_surface_color),
  		    pv, sizeColor);
! 		pv += NUMWORDS (sizeof (pexColourSpecifier) + sizeColor); 
  		break;
              case PEXPCBFReflectionAttr:
  		((pexReflectionAttr *) pv)->ambient = 
--- 484,490 ----
              case PEXPCBFSurfaceColor:
  		PackColorSpecifier (&(values->bf_surface_color),
  		    pv, sizeColor);
! 		pv += NUMWORDS (sizeof (pexColorSpecifier) + sizeColor); 
  		break;
              case PEXPCBFReflectionAttr:
  		((pexReflectionAttr *) pv)->ambient = 
***************
*** 499,505 ****
  		    values->bf_reflection_attr.transmission;
  		PackColorSpecifier (
  		    &(values->bf_reflection_attr.specular_color), 
! 		    &(((pexReflectionAttr *) pv)->specularColour), 
  		    sizeColor);
  		pv += NUMWORDS (sizeof (pexReflectionAttr) + sizeColor); 
  		break;
--- 499,505 ----
  		    values->bf_reflection_attr.transmission;
  		PackColorSpecifier (
  		    &(values->bf_reflection_attr.specular_color), 
! 		    &(((pexReflectionAttr *) pv)->specularColor), 
  		    sizeColor);
  		pv += NUMWORDS (sizeof (pexReflectionAttr) + sizeColor); 
  		break;
***************
*** 577,583 ****
              case PEXPCSurfaceEdgeColor:
  		PackColorSpecifier (&(values->surface_edge_color), pv, 
  		    sizeColor);
! 		pv += NUMWORDS (sizeof (pexColourSpecifier) + sizeColor); 
  		break;
              case PEXPCEdgeBundleIndex:
  		*pv = values->edge_bundle_index;
--- 577,583 ----
              case PEXPCSurfaceEdgeColor:
  		PackColorSpecifier (&(values->surface_edge_color), pv, 
  		    sizeColor);
! 		pv += NUMWORDS (sizeof (pexColorSpecifier) + sizeColor); 
  		break;
              case PEXPCEdgeBundleIndex:
  		*pv = values->edge_bundle_index;
***************
*** 584,595 ****
  		pv++;
  		break;
              case PEXPCLocalTransform:
! 		COPY_LARGE_AREA ((char *) values->local_transform,
  		    (char *) pv, sizeof (pexMatrix));
  		pv += LENOF (pexMatrix);
  		break;
              case PEXPCGlobalTransform:
! 		COPY_LARGE_AREA ((char *) values->global_transform,
  		    (char *) pv, sizeof (pexMatrix));
  		pv += LENOF (pexMatrix);
  		break;
--- 584,595 ----
  		pv++;
  		break;
              case PEXPCLocalTransform:
! 		COPY_AREA ((char *) values->local_transform,
  		    (char *) pv, sizeof (pexMatrix));
  		pv += LENOF (pexMatrix);
  		break;
              case PEXPCGlobalTransform:
! 		COPY_AREA ((char *) values->global_transform,
  		    (char *) pv, sizeof (pexMatrix));
  		pv += LENOF (pexMatrix);
  		break;
***************
*** 668,674 ****
  		else if (pscType == PEXPSCMCLevelCurves ||
  		    pscType == PEXPSCWCLevelCurves)
  		{
! 		    int param_size = sizeof (PEXCoord) *
  			 values->para_surf_char.psc.level_curves.count;
  		    size = sizeof (pexPSC_LevelCurves) + param_size;
  
--- 668,674 ----
  		else if (pscType == PEXPSCMCLevelCurves ||
  		    pscType == PEXPSCWCLevelCurves)
  		{
! 		    int param_size = sizeof (float) *
  			 values->para_surf_char.psc.level_curves.count;
  		    size = sizeof (pexPSC_LevelCurves) + param_size;
  
***************
*** 749,755 ****
  		break;
              case PEXPCMarkerColor:
  		PackColorSpecifier (pv, &(ppca->marker_color), sizeColor);
! 		pv += NUMWORDS (sizeof (pexColourSpecifier) + sizeColor); 
  		break;
              case PEXPCMarkerBundleIndex:
  		ppca->marker_bundle_index = *pv;
--- 749,755 ----
  		break;
              case PEXPCMarkerColor:
  		PackColorSpecifier (pv, &(ppca->marker_color), sizeColor);
! 		pv += NUMWORDS (sizeof (pexColorSpecifier) + sizeColor); 
  		break;
              case PEXPCMarkerBundleIndex:
  		ppca->marker_bundle_index = *pv;
***************
*** 773,779 ****
  		break;
              case PEXPCTextColor:
  		PackColorSpecifier (pv, &(ppca->text_color), sizeColor);
! 		pv += NUMWORDS (sizeof (pexColourSpecifier) + sizeColor); 
  		break;
              case PEXPCCharHeight:
  		ppca->char_height = *((float *) pv);
--- 773,779 ----
  		break;
              case PEXPCTextColor:
  		PackColorSpecifier (pv, &(ppca->text_color), sizeColor);
! 		pv += NUMWORDS (sizeof (pexColorSpecifier) + sizeColor); 
  		break;
              case PEXPCCharHeight:
  		ppca->char_height = *((float *) pv);
***************
*** 837,843 ****
  		break;
              case PEXPCLineColor:
  		PackColorSpecifier (pv, &(ppca->line_color), sizeColor);
! 		pv += NUMWORDS (sizeof (pexColourSpecifier) + sizeColor); 
  		break;
              case PEXPCCurveApprox:
  		ppca->curve_approx.method = *pv;
--- 837,843 ----
  		break;
              case PEXPCLineColor:
  		PackColorSpecifier (pv, &(ppca->line_color), sizeColor);
! 		pv += NUMWORDS (sizeof (pexColorSpecifier) + sizeColor); 
  		break;
              case PEXPCCurveApprox:
  		ppca->curve_approx.method = *pv;
***************
*** 863,869 ****
  		break;
              case PEXPCSurfaceColor:
  		PackColorSpecifier (pv, &(ppca->surface_color), sizeColor);
! 		pv += NUMWORDS (sizeof (pexColourSpecifier) + sizeColor); 
  		break;
              case PEXPCReflectionAttr:
  		ppca->reflection_attr.ambient = 
--- 863,869 ----
  		break;
              case PEXPCSurfaceColor:
  		PackColorSpecifier (pv, &(ppca->surface_color), sizeColor);
! 		pv += NUMWORDS (sizeof (pexColorSpecifier) + sizeColor); 
  		break;
              case PEXPCReflectionAttr:
  		ppca->reflection_attr.ambient = 
***************
*** 877,883 ****
  		ppca->reflection_attr.transmission = 
  		    ((pexReflectionAttr *) pv)->transmission;
  		PackColorSpecifier ( 
! 		    &(((pexReflectionAttr *) pv)->specularColour), 
  		    &(ppca->reflection_attr.specular_color), sizeColor);
  		pv += NUMWORDS (sizeof (pexReflectionAttr) + sizeColor); 
  		break;
--- 877,883 ----
  		ppca->reflection_attr.transmission = 
  		    ((pexReflectionAttr *) pv)->transmission;
  		PackColorSpecifier ( 
! 		    &(((pexReflectionAttr *) pv)->specularColor), 
  		    &(ppca->reflection_attr.specular_color), sizeColor);
  		pv += NUMWORDS (sizeof (pexReflectionAttr) + sizeColor); 
  		break;
***************
*** 899,905 ****
  		break;
              case PEXPCBFSurfaceColor:
  		PackColorSpecifier (pv, &(ppca->bf_surface_color), sizeColor);
! 		pv += NUMWORDS (sizeof (pexColourSpecifier) + sizeColor); 
  		break;
              case PEXPCBFReflectionAttr:
  		ppca->bf_reflection_attr.ambient = 
--- 899,905 ----
  		break;
              case PEXPCBFSurfaceColor:
  		PackColorSpecifier (pv, &(ppca->bf_surface_color), sizeColor);
! 		pv += NUMWORDS (sizeof (pexColorSpecifier) + sizeColor); 
  		break;
              case PEXPCBFReflectionAttr:
  		ppca->bf_reflection_attr.ambient = 
***************
*** 913,919 ****
  		ppca->bf_reflection_attr.transmission = 
  		    ((pexReflectionAttr *) pv)->transmission;
  		PackColorSpecifier ( 
! 		    &(((pexReflectionAttr *) pv)->specularColour), 
  		    &(ppca->bf_reflection_attr.specular_color), sizeColor);
  		pv += NUMWORDS (sizeof (pexReflectionAttr) + sizeColor); 
  		break;
--- 913,919 ----
  		ppca->bf_reflection_attr.transmission = 
  		    ((pexReflectionAttr *) pv)->transmission;
  		PackColorSpecifier ( 
! 		    &(((pexReflectionAttr *) pv)->specularColor), 
  		    &(ppca->bf_reflection_attr.specular_color), sizeColor);
  		pv += NUMWORDS (sizeof (pexReflectionAttr) + sizeColor); 
  		break;
***************
*** 988,994 ****
              case PEXPCSurfaceEdgeColor:
  		PackColorSpecifier (pv, &(ppca->surface_edge_color),
  		    sizeColor);
! 		pv += NUMWORDS (sizeof (pexColourSpecifier) + sizeColor); 
  		break;
              case PEXPCEdgeBundleIndex:
  		ppca->edge_bundle_index = *pv;
--- 988,994 ----
              case PEXPCSurfaceEdgeColor:
  		PackColorSpecifier (pv, &(ppca->surface_edge_color),
  		    sizeColor);
! 		pv += NUMWORDS (sizeof (pexColorSpecifier) + sizeColor); 
  		break;
              case PEXPCEdgeBundleIndex:
  		ppca->edge_bundle_index = *pv;
***************
*** 995,1006 ****
  		pv++;
  		break;
              case PEXPCLocalTransform:
! 		COPY_LARGE_AREA ((char *) pv, (char *) ppca->local_transform,
  		    sizeof (PEXMatrix));
  		pv += LENOF (pexMatrix);
  		break;
              case PEXPCGlobalTransform:
! 		COPY_LARGE_AREA ((char *) pv, (char *) ppca->global_transform,
  		    sizeof (PEXMatrix));
  		pv += LENOF (pexMatrix);
  		break;
--- 995,1006 ----
  		pv++;
  		break;
              case PEXPCLocalTransform:
! 		COPY_AREA ((char *) pv, (char *) ppca->local_transform,
  		    sizeof (PEXMatrix));
  		pv += LENOF (pexMatrix);
  		break;
              case PEXPCGlobalTransform:
! 		COPY_AREA ((char *) pv, (char *) ppca->global_transform,
  		    sizeof (PEXMatrix));
  		pv += LENOF (pexMatrix);
  		break;
*** /tmp/da19818	Tue Jun 30 16:37:51 1992
--- extensions/lib/PEXlib/pl_pick.c	Fri Jun 12 11:48:04 1992
***************
*** 1,4 ****
! /* $XConsortium: pl_pick.c,v 1.3 92/05/20 22:06:01 mor Exp $ */
  
  /************************************************************************
  Copyright 1992 by ShoGraphics, Inc., Mountain View, California,
--- 1,4 ----
! /* $XConsortium: pl_pick.c,v 1.5 92/06/12 11:52:01 mor Exp $ */
  
  /************************************************************************
  Copyright 1992 by ShoGraphics, Inc., Mountain View, California,
***************
*** 198,204 ****
  	    switch (f)
  	    {
  	    case PEXPMStatus:
! 		ppmi->status = *(CARD16 *) pv;
  		pv++;
  		break;
  	    case PEXPMPath:
--- 198,204 ----
  	    switch (f)
  	    {
  	    case PEXPMStatus:
! 		ppmi->status = *pv;
  		pv++;
  		break;
  	    case PEXPMPath:
***************
*** 676,685 ****
      size = sizeof (PEXPickPath) + 
  	rep.numPickElRefs * sizeof (PEXPickElementRef);
  
!     if (!PickCacheInUse && size <= PickCacheSize)
      {
! 	pathRet = PickCache;
! 	PickCacheInUse = 1;
      }
      else
  	pathRet = (PEXPickPath *) PEXAllocBuf ((unsigned) size);
--- 676,685 ----
      size = sizeof (PEXPickPath) + 
  	rep.numPickElRefs * sizeof (PEXPickElementRef);
  
!     if (!PEXPickCacheInUse && size <= PEXPickCacheSize)
      {
! 	pathRet = PEXPickCache;
! 	PEXPickCacheInUse = 1;
      }
      else
  	pathRet = (PEXPickPath *) PEXAllocBuf ((unsigned) size);
***************
*** 768,777 ****
      size = sizeof (PEXPickPath) + 
  	rep.numPickElRefs * sizeof (PEXPickElementRef);
  
!     if (!PickCacheInUse && size <= PickCacheSize)
      {
! 	pathRet = PickCache;
! 	PickCacheInUse = 1;
      }
      else
  	pathRet = (PEXPickPath *) PEXAllocBuf ((unsigned) size);
--- 768,777 ----
      size = sizeof (PEXPickPath) + 
  	rep.numPickElRefs * sizeof (PEXPickElementRef);
  
!     if (!PEXPickCacheInUse && size <= PEXPickCacheSize)
      {
! 	pathRet = PEXPickCache;
! 	PEXPickCacheInUse = 1;
      }
      else
  	pathRet = (PEXPickPath *) PEXAllocBuf ((unsigned) size);
***************
*** 923,932 ****
  	total_size += size;
      }
  
!     if (!PickCacheInUse && total_size <= PickCacheSize)
      {
! 	pspRet = PickCache;
! 	PickCacheInUse = 1;
      }
      else
  	pspRet = (PEXPickPath *) PEXAllocBuf ((unsigned) total_size);
--- 923,932 ----
  	total_size += size;
      }
  
!     if (!PEXPickCacheInUse && total_size <= PEXPickCacheSize)
      {
! 	pspRet = PEXPickCache;
! 	PEXPickCacheInUse = 1;
      }
      else
  	pspRet = (PEXPickPath *) PEXAllocBuf ((unsigned) total_size);
***************
*** 1053,1062 ****
  	total_size += size;
      }
  
!     if (!PickCacheInUse && total_size <= PickCacheSize)
      {
! 	pspRet = PickCache;
! 	PickCacheInUse = 1;
      }
      else
  	pspRet = (PEXPickPath *) PEXAllocBuf ((unsigned) total_size);
--- 1053,1062 ----
  	total_size += size;
      }
  
!     if (!PEXPickCacheInUse && total_size <= PEXPickCacheSize)
      {
! 	pspRet = PEXPickCache;
! 	PEXPickCacheInUse = 1;
      }
      else
  	pspRet = (PEXPickPath *) PEXAllocBuf ((unsigned) total_size);
*** /tmp/da19837	Tue Jun 30 16:37:55 1992
--- extensions/lib/PEXlib/pl_rdr.c	Fri Jun 12 10:21:52 1992
***************
*** 1,4 ****
! /* $XConsortium: pl_rdr.c,v 1.3 92/05/20 20:39:26 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
--- 1,4 ----
! /* $XConsortium: pl_rdr.c,v 1.4 92/06/12 10:25:58 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
***************
*** 320,326 ****
  	    case PEXRABackgroundColor:
  		PackColorSpecifier (pv, &(prdra->background_color),
  		    sizeColor);
! 		pv += NUMWORDS (sizeof (pexColourSpecifier) + sizeColor); 
  		break;
  	    case PEXRAClearImage:
  		prdra->clear_image = *pv;
--- 320,326 ----
  	    case PEXRABackgroundColor:
  		PackColorSpecifier (pv, &(prdra->background_color),
  		    sizeColor);
! 		pv += NUMWORDS (sizeof (pexColorSpecifier) + sizeColor); 
  		break;
  	    case PEXRAClearImage:
  		prdra->clear_image = *pv;
***************
*** 745,751 ****
      size =  n * sizeof (CARD32) + 
  	sizeof (pexNpcSubvolume) +
  	sizeof (pexViewport) +
! 	sizeof (pexColourSpecifier);
  
      if (valueMask & PEXRAClipList)
      {
--- 745,751 ----
      size =  n * sizeof (CARD32) + 
  	sizeof (pexNpcSubvolume) +
  	sizeof (pexViewport) +
! 	sizeof (pexColorSpecifier);
  
      if (valueMask & PEXRAClipList)
      {
***************
*** 899,905 ****
  	    case PEXRABackgroundColor:
  		PackColorSpecifier (&(values->background_color),
  		    pv, sizeColor);
! 		pv += NUMWORDS (sizeof (pexColourSpecifier) + sizeColor); 
  		break;
  	    case PEXRAClearImage:
  		*pv = values->clear_image;
--- 899,905 ----
  	    case PEXRABackgroundColor:
  		PackColorSpecifier (&(values->background_color),
  		    pv, sizeColor);
! 		pv += NUMWORDS (sizeof (pexColorSpecifier) + sizeColor); 
  		break;
  	    case PEXRAClearImage:
  		*pv = values->clear_image;
*** /tmp/da19874	Tue Jun 30 16:38:01 1992
--- extensions/lib/PEXlib/pl_startup.c	Fri Jun 12 11:49:05 1992
***************
*** 1,4 ****
! /* $XConsortium: pl_startup.c,v 1.2 92/05/20 20:25:15 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
--- 1,4 ----
! /* $XConsortium: pl_startup.c,v 1.3 92/06/12 11:52:46 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
***************
*** 628,634 ****
  	 * Set up the default message for XGetErrorDatabaseText.
  	 */
  
! 	defaultp = pexErrorList[code];
  
  
  	/*
--- 628,634 ----
  	 * Set up the default message for XGetErrorDatabaseText.
  	 */
  
! 	defaultp = PEXErrorList[code];
  
  
  	/*
***************
*** 697,704 ****
       * Free the pick path cache (if it's not in use)
       */
  
!     if (PickCache && !PickCacheInUse)
! 	PEXFreeBuf ((char *) PickCache);
  
      return (1);
  }
--- 697,704 ----
       * Free the pick path cache (if it's not in use)
       */
  
!     if (PEXPickCache && !PEXPickCacheInUse)
! 	PEXFreeBuf ((char *) PEXPickCache);
  
      return (1);
  }
*** /tmp/da19893	Tue Jun 30 16:38:05 1992
--- extensions/lib/PEXlib/pl_struct.c	Fri Jun 12 10:19:22 1992
***************
*** 1,4 ****
! /* $XConsortium: pl_struct.c,v 1.3 92/05/20 20:22:50 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
--- 1,4 ----
! /* $XConsortium: pl_struct.c,v 1.4 92/06/12 10:23:23 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
***************
*** 27,32 ****
--- 27,33 ----
  
  #include "PEXlib.h"
  #include "PEXlibint.h"
+ #include "pl_oc_util.h"
  
  
  PEXStructure
*** /tmp/da19912	Tue Jun 30 16:38:08 1992
--- extensions/lib/PEXlib/pl_wks.c	Fri Jun 12 10:21:10 1992
***************
*** 1,4 ****
! /* $XConsortium: pl_wks.c,v 1.4 92/05/20 20:28:50 mor Exp $ */
  
  /****************************************************************************
  Copyright 1987,1991 by Digital Equipment Corporation, Maynard, Massachusetts,
--- 1,4 ----
! /* $XConsortium: pl_wks.c,v 1.5 92/06/12 10:24:53 mor Exp $ */
  
  /****************************************************************************
  Copyright 1987,1991 by Digital Equipment Corporation, Maynard, Massachusetts,
***************
*** 85,96 ****
      req->textBundle = textBundle;
      req->interiorBundle = interiorBundle;
      req->edgeBundle = edgeBundle;
!     req->colourTable = colorTable;
      req->patternTable = patternTable;
      req->textFontTable = textFontTable;
      req->depthCueTable = depthCueTable;
      req->lightTable = lightTable;
!     req->colourApproxTable = colorApproxTable;
      req->highlightIncl = highlightIncl;
      req->highlightExcl = highlightExcl;
      req->invisIncl = invisibilityIncl;
--- 85,96 ----
      req->textBundle = textBundle;
      req->interiorBundle = interiorBundle;
      req->edgeBundle = edgeBundle;
!     req->colorTable = colorTable;
      req->patternTable = patternTable;
      req->textFontTable = textFontTable;
      req->depthCueTable = depthCueTable;
      req->lightTable = lightTable;
!     req->colorApproxTable = colorApproxTable;
      req->highlightIncl = highlightIncl;
      req->highlightExcl = highlightExcl;
      req->invisIncl = invisibilityIncl;
***************
*** 423,429 ****
      dynamics->line_bundle = rep.lineBundle;
      dynamics->interior_bundle = rep.interiorBundle;
      dynamics->edge_bundle = rep.edgeBundle;
!     dynamics->color_table = rep.colourTable;
      dynamics->pattern_table = rep.patternTable;
      dynamics->wks_transform = rep.wksTransform;
      dynamics->highlight_filter = rep.highlightFilter;
--- 423,429 ----
      dynamics->line_bundle = rep.lineBundle;
      dynamics->interior_bundle = rep.interiorBundle;
      dynamics->edge_bundle = rep.edgeBundle;
!     dynamics->color_table = rep.colorTable;
      dynamics->pattern_table = rep.patternTable;
      dynamics->wks_transform = rep.wksTransform;
      dynamics->highlight_filter = rep.highlightFilter;
***************
*** 437,443 ****
      dynamics->buffer_modify = rep.bufferModify;
      dynamics->light_table = rep.lightTable;
      dynamics->depth_cue_table = rep.depthCueTable;
!     dynamics->color_approx_table = rep.colourApproxTable;
  
  
      /*
--- 437,443 ----
      dynamics->buffer_modify = rep.bufferModify;
      dynamics->light_table = rep.lightTable;
      dynamics->depth_cue_table = rep.depthCueTable;
!     dynamics->color_approx_table = rep.colorApproxTable;
  
  
      /*

Path: news.crl.dec.com!pa.dec.com!nobody
Message-Id: <9204141833.AA26963@explain.lcs.mit.edu>
To: fix-trackers@expo.lcs.mit.edu
Subject: (seq: 2457) close XBUG #5102, #5103, #5104, #5104: Xlib: Ximp patch (part 1 of 3)
Date: Tue, 14 Apr 92 14:32:59 EDT
From: Bob Scheifler <rws@expo.lcs.mit.edu>
Distribution: dec
X-Mailing-List: fix-trackers@expo.lcs.mit.edu
X-Disclaimer: This message originated from a mailing list outside of Digital.
Newsgroups: dec.mail.lists.x.fix-trackers
Approved: news@usenet.pa.dec.com

### bug number:   5102
### area:         Xlib
### severity:     low
### comments:     

### bug number:   5103
### area:         Xlib
### severity:     low
### comments:     

### bug number:   5104
### area:         Xlib
### severity:     low
### comments:     

### bug number:   5105
### area:         Xlib
### severity:     low
### comments:     

*** /tmp/d25927	Tue Apr 14 14:13:58 1992
--- lib/X/Ximp/XimpLCUtil.c	Tue Apr 14 13:30:28 1992
***************
*** 1,7 ****
! /* $XConsortium: XimpLCUtil.c,v 1.6 91/10/07 17:48:57 rws Exp $ */
  /*
!  * Copyright 1990, 1991 by TOSHIBA Corp.
!  * Copyright 1990, 1991 by SORD Computer Corp.
   *
   * Permission to use, copy, modify, distribute, and sell this software and its
   * documentation for any purpose is hereby granted without fee, provided that
--- 1,7 ----
! /* $XConsortium: XimpLCUtil.c,v 1.7 92/04/14 13:29:21 rws Exp $ */
  /*
!  * Copyright 1990, 1991, 1992 by TOSHIBA Corp.
!  * Copyright 1990, 1991, 1992 by SORD Computer Corp.
   *
   * Permission to use, copy, modify, distribute, and sell this software and its
   * documentation for any purpose is hereby granted without fee, provided that
***************
*** 28,34 ****
  
  /******************************************************************
  
!               Copyright 1991, by FUJITSU LIMITED
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
--- 28,34 ----
  
  /******************************************************************
  
!               Copyright 1991, 1992 by FUJITSU LIMITED
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
***************
*** 84,90 ****
      GR_ENCODING,
      LENGTH,
      NAME,
!     STRING,
  } keyword_value;
  
  typedef struct KeywordRec {
--- 84,90 ----
      GR_ENCODING,
      LENGTH,
      NAME,
!     STRING
  } keyword_value;
  
  typedef struct KeywordRec {
*** /tmp/d25957	Tue Apr 14 14:14:12 1992
--- lib/X/Ximp/XIMProto.h	Tue Apr 14 13:29:41 1992
***************
*** 1,7 ****
! /* $XConsortium: XIMProto.h,v 1.4 91/10/10 20:41:32 rws Exp $ */
  /******************************************************************
  
!               Copyright 1991, by FUJITSU LIMITED
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
--- 1,7 ----
! /* $XConsortium: XIMProto.h,v 1.5 92/04/14 13:28:34 rws Exp $ */
  /******************************************************************
  
!               Copyright 1991, 1992 by FUJITSU LIMITED
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
***************
*** 28,34 ****
  ******************************************************************/
  
  /* Ximp implementation revision */
! #define XIMP_REVISION "Ximp Revision 3.1"
  
  /* Ximp Protocol Version */
  #define XIMP_PROTOCOL_VERSION "XIMP.3.5"
--- 28,34 ----
  ******************************************************************/
  
  /* Ximp implementation revision */
! #define XIMP_REVISION "Ximp Revision 3.2"
  
  /* Ximp Protocol Version */
  #define XIMP_PROTOCOL_VERSION "XIMP.3.5"
*** /tmp/d25985	Tue Apr 14 14:14:26 1992
--- lib/X/Ximp/XimpCallbk.c	Tue Apr 14 13:29:48 1992
***************
*** 1,9 ****
! /* $XConsortium: XimpCallbk.c,v 1.4 91/10/07 17:47:37 rws Exp $ */
  /******************************************************************
  
!               Copyright 1991, by Fuji Xerox Co.,Ltd.
!               Copyright 1991, by FUJITSU LIMITED
!               Copyright 1991, by Sun Microsystems, Inc.
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
--- 1,9 ----
! /* $XConsortium: XimpCallbk.c,v 1.5 92/04/14 13:28:40 rws Exp $ */
  /******************************************************************
  
!               Copyright 1991, 1992 by Fuji Xerox Co.,Ltd.
!               Copyright 1991, 1992 by FUJITSU LIMITED
!               Copyright 1991, 1992 by Sun Microsystems, Inc.
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
***************
*** 29,36 ****
                                 kaz@ssdev.ksp.fujixerox.co.jp
            Takashi Fujiwara     FUJITSU LIMITED
                                 fujiwara@a80.tech.yk.fujitsu.co.jp
! 	  Hideki Hiura         hhiura@Sun.COM
! 	  		       Sun Microsystems, Inc.
  ******************************************************************/
  
  #define NEED_EVENTS
--- 29,36 ----
                                 kaz@ssdev.ksp.fujixerox.co.jp
            Takashi Fujiwara     FUJITSU LIMITED
                                 fujiwara@a80.tech.yk.fujitsu.co.jp
!           Hideki Hiura         Sun Microsystems, Inc.
!                                hhiura@Sun.COM
  ******************************************************************/
  
  #define NEED_EVENTS
***************
*** 42,47 ****
--- 42,48 ----
  
  #define XIMP_MAXBUF	256
  
+ extern void	_Ximp_IM_SendMessage();
  
  void
  _Ximp_CallGeometryCallback(xic, event)
***************
*** 62,87 ****
      XClientMessageEvent *event;
  {
      register XIMCallback *cb;
!     static XClientMessageEvent clmsg;
  
-     clmsg.type = ClientMessage;
-     clmsg.display = xic->core.im->core.display;
-     clmsg.window = ((Ximp_XIM) xic->core.im)->ximp_impart->fe_window;
-     clmsg.message_type = ((Ximp_XIM) xic->core.im)->ximp_impart->improtocol_id;
-     clmsg.format = 32;
-     clmsg.data.l[0] = XIMP_PREEDITSTART_RETURN;
-     clmsg.data.l[1] = xic->ximp_icpart->icid;
      cb = &xic->core.preedit_attr.callbacks.start;
      if (cb->callback) {
! 	clmsg.data.l[2] = (*(int (*) ()) cb->callback) (xic, cb->client_data, NULL);
  
      } else {
! 	clmsg.data.l[2] = -1;
      }
!     XSendEvent(xic->core.im->core.display,
! 	       ((Ximp_XIM) xic->core.im)->ximp_impart->fe_window,
! 	       False, NoEventMask, (XEvent *) & clmsg);
!     XFlush(xic->core.im->core.display);
  }
  
  void
--- 63,78 ----
      XClientMessageEvent *event;
  {
      register XIMCallback *cb;
!              int          data;
  
      cb = &xic->core.preedit_attr.callbacks.start;
      if (cb->callback) {
! 	data = (*(int (*) ()) cb->callback) (xic, cb->client_data, NULL);
  
      } else {
! 	data = -1;
      }
!     _Ximp_IM_SendMessage(xic, XIMP_PREEDITSTART_RETURN, data, NULL, NULL);
  }
  
  void
***************
*** 513,536 ****
  
      cb = &xic->core.preedit_attr.callbacks.caret;
      if (cb->callback) {
- 	static XClientMessageEvent clmsg;
  	CallData.position = event->data.l[2];
  	CallData.direction = ToXIMCaretDirection(event->data.l[3]);
  	CallData.style = ToXIMCaretStyle(event->data.l[4]);
  	(*cb->callback) (xic, cb->client_data, &CallData);
- 	clmsg.type = ClientMessage;
- 	clmsg.display = xic->core.im->core.display;
- 	clmsg.window = ((Ximp_XIM) xic->core.im)->ximp_impart->fe_window;
- 	clmsg.message_type = ((Ximp_XIM) xic->core.im)->ximp_impart->improtocol_id;
- 	clmsg.format = 32;
- 	clmsg.data.l[0] = XIMP_PREEDITCARET_RETURN;
- 	clmsg.data.l[1] = xic->ximp_icpart->icid;
- 	clmsg.data.l[2] = CallData.position;;
  
! 	XSendEvent(xic->core.im->core.display,
! 		   ((Ximp_XIM) xic->core.im)->ximp_impart->fe_window,
! 		   False, NoEventMask, &clmsg);
! 	XFlush(xic->core.im->core.display);
      }
  }
  
--- 504,516 ----
  
      cb = &xic->core.preedit_attr.callbacks.caret;
      if (cb->callback) {
  	CallData.position = event->data.l[2];
  	CallData.direction = ToXIMCaretDirection(event->data.l[3]);
  	CallData.style = ToXIMCaretStyle(event->data.l[4]);
  	(*cb->callback) (xic, cb->client_data, &CallData);
  
!         _Ximp_IM_SendMessage(xic, XIMP_PREEDITCARET_RETURN,
! 				CallData.position, NULL, NULL);
      }
  }
  
*** /tmp/d26010	Tue Apr 14 14:14:37 1992
--- lib/X/Ximp/XimpConv.c	Tue Apr 14 13:29:51 1992
***************
*** 1,7 ****
! /* $XConsortium: XimpConv.c,v 1.5 91/10/07 17:47:44 rws Exp $ */
  /*
!  * Copyright 1990, 1991 by TOSHIBA Corp.
!  * Copyright 1990, 1991 by SORD Computer Corp.
   *
   * Permission to use, copy, modify, distribute, and sell this software and its
   * documentation for any purpose is hereby granted without fee, provided that
--- 1,7 ----
! /* $XConsortium: XimpConv.c,v 1.6 92/04/14 13:28:45 rws Exp $ */
  /*
!  * Copyright 1990, 1991, 1992 by TOSHIBA Corp.
!  * Copyright 1990, 1991, 1992 by SORD Computer Corp.
   *
   * Permission to use, copy, modify, distribute, and sell this software and its
   * documentation for any purpose is hereby granted without fee, provided that
***************
*** 28,34 ****
  
  /******************************************************************
  
!               Copyright 1991, by FUJITSU LIMITED
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
--- 28,34 ----
  
  /******************************************************************
  
!               Copyright 1991, 1992 by FUJITSU LIMITED
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
*** /tmp/d26029	Tue Apr 14 14:14:47 1992
--- lib/X/Ximp/XimpCrFS.c	Tue Apr 14 13:29:54 1992
***************
*** 1,7 ****
! /* $XConsortium: XimpCrFS.c,v 1.5 91/10/07 17:47:50 rws Exp $ */
  /*
!  * Copyright 1990, 1991 by TOSHIBA Corp.
!  * Copyright 1990, 1991 by SORD Computer Corp.
   *
   * Permission to use, copy, modify, distribute, and sell this software and its
   * documentation for any purpose is hereby granted without fee, provided that
--- 1,7 ----
! /* $XConsortium: XimpCrFS.c,v 1.6 92/04/14 13:28:48 rws Exp $ */
  /*
!  * Copyright 1990, 1991, 1992 by TOSHIBA Corp.
!  * Copyright 1990, 1991, 1992 by SORD Computer Corp.
   *
   * Permission to use, copy, modify, distribute, and sell this software and its
   * documentation for any purpose is hereby granted without fee, provided that
***************
*** 29,35 ****
  
  /******************************************************************
  
!               Copyright 1991, by FUJITSU LIMITED
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
--- 29,35 ----
  
  /******************************************************************
  
!               Copyright 1991, 1992 by FUJITSU LIMITED
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
*** /tmp/d26048	Tue Apr 14 14:14:56 1992
--- lib/X/Ximp/XimpIC.c	Tue Apr 14 13:30:13 1992
***************
*** 1,7 ****
! /* $XConsortium: XimpIC.c,v 1.5 92/03/03 11:03:14 rws Exp $ */
  /******************************************************************
  
!               Copyright 1991, by FUJITSU LIMITED
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
--- 1,8 ----
! /* $XConsortium: XimpIC.c,v 1.6 92/04/14 13:29:06 rws Exp $ */
  /******************************************************************
  
!               Copyright 1991, 1992 by FUJITSU LIMITED
!               Copyright 1991, 1992 by Sony Corporation
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
***************
*** 8,29 ****
  provided that the above copyright notice appear in all copies and
  that both that copyright notice and this permission notice appear
  in supporting documentation, and that the name of FUJITSU LIMITED
! not be used in advertising or publicity pertaining to distribution
! of the software without specific, written prior permission.
! FUJITSU LIMITED makes no representations about the suitability of
! this software for any purpose.  It is provided "as is" without
! express or implied warranty.
  
! FUJITSU LIMITED DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
! INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
! IN NO EVENT SHALL FUJITSU LIMITED BE LIABLE FOR ANY SPECIAL, INDIRECT
! OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
! OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
! OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
! OR PERFORMANCE OF THIS SOFTWARE.
  
    Author: Takashi Fujiwara     FUJITSU LIMITED 
!                                fujiwara@a80.tech.yk.fujitsu.co.jp
  
  ******************************************************************/
  
--- 9,32 ----
  provided that the above copyright notice appear in all copies and
  that both that copyright notice and this permission notice appear
  in supporting documentation, and that the name of FUJITSU LIMITED
! and Sony Corporation not be used in advertising or publicity
! pertaining to distribution of the software without specific,
! written prior permission.
! FUJITSU LIMITED and Sony Corporation make no representations about
! the suitability of this software for any purpose.  It is provided
! "as is" without express or implied warranty.
  
! FUJITSU LIMITED AND SONY CORPORATION DISCLAIM ALL WARRANTIES WITH
! REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF
! MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL FUJITSU LIMITED AND
! SONY CORPORATION BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
! DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
! OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
! TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
! PERFORMANCE OF THIS SOFTWARE.
  
    Author: Takashi Fujiwara     FUJITSU LIMITED 
!           Makoto Wakamatsu     Sony Corporation
  
  ******************************************************************/
  
***************
*** 53,71 ****
  extern void		_Ximp_SetPreeditFont();
  extern void		_Ximp_SetStatusAtr();
  extern void		_Ximp_SetStatusFont();
  extern Bool		_Ximp_XimFilter_Client();
  
  static void 		_Ximp_AttributesSetL();
  extern void 		_Ximp_IM_SendMessage();
  
- #if NeedFunctionPrototypes
- extern Bool _Ximp_XimFilter_Keypress (
- 	Display *d, 
- 	Window w, 
- 	XEvent *ev, 
- 	XPointer client_data);
- #endif
- 
  static XICMethodsRec Ximp_ic_methods = {
  				_Ximp_DestroyIC, 	/* destroy */
  				_Ximp_SetFocus,  	/* set_focus */
--- 56,67 ----
  extern void		_Ximp_SetPreeditFont();
  extern void		_Ximp_SetStatusAtr();
  extern void		_Ximp_SetStatusFont();
+ extern Bool		_Ximp_XimFilter_Keypress();
  extern Bool		_Ximp_XimFilter_Client();
  
  static void 		_Ximp_AttributesSetL();
  extern void 		_Ximp_IM_SendMessage();
  
  static XICMethodsRec Ximp_ic_methods = {
  				_Ximp_DestroyIC, 	/* destroy */
  				_Ximp_SetFocus,  	/* set_focus */
***************
*** 78,97 ****
  				_Ximp_WcLookupString,	/* wc_lookup_string */
  				};
  
- Bool
- _Ximp_XimFilter_Keypress (d, w, ev, client_data)
- 	Display		*d;
- 	Window		w;
- 	XEvent		*ev;
- 	XPointer	client_data;
- {
- 	extern Bool	_Ximp_Keypress ();
- 
- 	return(_Ximp_Keypress (d, w, ev, client_data));
- }
- 
- static Ximp_XIC		current_xic = 0;
- 
  XIC
  _Ximp_CreateIC(im, values)
  	XIM		 im;
--- 74,79 ----
***************
*** 117,123 ****
  	ic->core.filter_events = KeyPressMask | KeyReleaseMask | StructureNotifyMask;
  
  	ic->ximp_icpart = ximp_icpart;
! 	_Ximp_SetICValueData(ic, values, XIMP_CREATE_IC, &dummy);
  
  	/* The Value must be set */
  	if(!(ximp_icpart->value_mask & XIMP_INPUT_STYLE)) /* Input Style */
--- 99,106 ----
  	ic->core.filter_events = KeyPressMask | KeyReleaseMask | StructureNotifyMask;
  
  	ic->ximp_icpart = ximp_icpart;
! 	if(_Ximp_SetICValueData(ic, values, XIMP_CREATE_IC, &dummy))
! 		goto Set_Error;
  
  	/* The Value must be set */
  	if(!(ximp_icpart->value_mask & XIMP_INPUT_STYLE)) /* Input Style */
***************
*** 132,154 ****
  	if(ic->core.input_style & XIMStatusArea)
  		if(!(ximp_icpart->proto_mask & XIMP_STS_FONT_MASK)) /* FontSet */
  			goto Set_Error;
! 	if(!(ximp_icpart->value_mask & XIMP_CLIENT_WIN)) /* Client Window */
! 		goto Set_Error;
  	
  	_Ximp_SetValue_Resource(ic, &dummy);
  
! 	if(((Ximp_XIM)im)->ximp_impart->inputserver) {
! 		if(_Ximp_SetOpenXIMP(ic) == False)
  			goto Set_Error;
  	}
- 	if (!current_xic) {
- 		_XRegisterFilterByType (ic->core.im->core.display,
- 				ic->core.focus_window,
- 				KeyPress, KeyPress,
- 				_Ximp_XimFilter_Keypress,
- 				(XPointer)ic);
- 		current_xic = ic;
- 	}
  	return((XIC)ic);
  
     Set_Error :
--- 115,143 ----
  	if(ic->core.input_style & XIMStatusArea)
  		if(!(ximp_icpart->proto_mask & XIMP_STS_FONT_MASK)) /* FontSet */
  			goto Set_Error;
! 	if(ic->core.input_style & XIMPreeditCallbacks)
! 		if(!(ximp_icpart->value_mask & XIMP_PRE_CALLBAK)) /* Preedit Callback */
! 			goto Set_Error;
! 	if(ic->core.input_style & XIMStatusCallbacks)
! 		if(!(ximp_icpart->value_mask & XIMP_STS_CALLBAK)) /* Status Callback */
! 			goto Set_Error;
  	
  	_Ximp_SetValue_Resource(ic, &dummy);
  
! 	if(((Ximp_XIM)im)->ximp_impart->inputserver ||
! 	   ((Ximp_XIM)im)->ximp_impart->connectserver) {
! 		if(_Ximp_SetOpenXIMP(ic, XIMP_CREATE_IC) == False)
  			goto Set_Error;
+ 	} else {
+ 		if(ic->ximp_icpart->proto_mask & XIMP_FOCUS_WIN_MASK) {
+ 			_XRegisterFilterByType (ic->core.im->core.display,
+ 						ic->core.focus_window,
+ 						KeyPress, KeyPress,
+ 						_Ximp_XimFilter_Keypress,
+ 						(XPointer)ic);
+ 			ic->ximp_icpart->filter_mode |= 0x1;
+ 		}
  	}
  	return((XIC)ic);
  
     Set_Error :
***************
*** 161,176 ****
  _Ximp_DestroyIC(ic)
  	Ximp_XIC	 ic;
  {
! 	if(ic->ximp_icpart->icid) {
!  		_Ximp_IM_SendMessage(ic, XIMP_DESTROY, NULL, NULL, NULL);
! 		if (current_xic) {
! 			_XUnregisterFilter (ic->core.im->core.display,
! 					ic->core.focus_window,
! 					_Ximp_XimFilter_Keypress,
! 					(XPointer)current_xic);
! 			current_xic = 0;
! 		}
  	}
  	Xfree(ic->ximp_icpart);
  	return;
  }
--- 150,167 ----
  _Ximp_DestroyIC(ic)
  	Ximp_XIC	 ic;
  {
! 	if(ic->ximp_icpart->filter_mode & 0x1) {
! 		_XUnregisterFilter (ic->core.im->core.display,
! 				ic->core.focus_window,
! 				_Ximp_XimFilter_Keypress,
! 				(XPointer)ic);
  	}
+ 	if(ic->ximp_icpart->filter_mode & 0x2) {
+ 		_XUnregisterFilter(ic->core.im->core.display,
+ 				   ic->ximp_icpart->back_focus_win,
+ 				   _Ximp_XimFilter_Client, (XPointer)NULL);
+ 	}
+  	_Ximp_IM_SendMessage(ic, XIMP_DESTROY, NULL, NULL, NULL);
  	Xfree(ic->ximp_icpart);
  	return;
  }
***************
*** 179,197 ****
  _Ximp_SetFocus(ic)
  	Ximp_XIC	ic;
  {
! 	if (ic->ximp_icpart->icid) {
!  		_Ximp_IM_SendMessage(ic, XIMP_SETFOCUS, NULL, NULL, NULL);
! 		if (current_xic)
! 			_XUnregisterFilter (ic->core.im->core.display,
! 						ic->core.focus_window,
! 						_Ximp_XimFilter_Keypress,
! 						(XPointer)current_xic);
  		_XRegisterFilterByType (ic->core.im->core.display,
  					ic->core.focus_window,
  					KeyPress, KeyPress,
  					_Ximp_XimFilter_Keypress,
  					(XPointer)ic);
! 		current_xic = ic;
  	}
  	return;
  }
--- 170,183 ----
  _Ximp_SetFocus(ic)
  	Ximp_XIC	ic;
  {
!  	_Ximp_IM_SendMessage(ic, XIMP_SETFOCUS, NULL, NULL, NULL);
! 	if(!(ic->ximp_icpart->filter_mode & 0x1)) {
  		_XRegisterFilterByType (ic->core.im->core.display,
  					ic->core.focus_window,
  					KeyPress, KeyPress,
  					_Ximp_XimFilter_Keypress,
  					(XPointer)ic);
! 		ic->ximp_icpart->filter_mode |= 0x1;
  	}
  	return;
  }
***************
*** 200,214 ****
  _Ximp_UnSetFocus(ic)
  	Ximp_XIC	ic;
  {
! 	if(ic->ximp_icpart->icid) {
! 		_Ximp_IM_SendMessage(ic, XIMP_UNSETFOCUS, NULL, NULL, NULL);
! 		if (current_xic) {
! 			_XUnregisterFilter (ic->core.im->core.display,
! 					ic->core.focus_window,
! 					_Ximp_XimFilter_Keypress,
! 					(XPointer)current_xic);
! 			current_xic = 0;
! 		}
  	}
  	return;
  }
--- 186,198 ----
  _Ximp_UnSetFocus(ic)
  	Ximp_XIC	ic;
  {
! 	_Ximp_IM_SendMessage(ic, XIMP_UNSETFOCUS, NULL, NULL, NULL);
! 	if(ic->ximp_icpart->filter_mode & 0x1) {
! 		_XUnregisterFilter (ic->core.im->core.display,
! 				ic->core.focus_window,
! 				_Ximp_XimFilter_Keypress,
! 				(XPointer)ic);
! 		ic->ximp_icpart->filter_mode &= ~(0x1);
  	}
  	return;
  }
***************
*** 237,249 ****
  			((Ximp_XIM)ic->core.im)->ximp_impart->focus_win_id,
  			XA_WINDOW, 32, PropModeReplace,
  			(unsigned char *)&ic->core.focus_window, 1);
! 	_XUnregisterFilter(ic->core.im->core.display,
! 			   ic->core.focus_window,
! 			   _Ximp_XimFilter_Client, (XPointer)NULL);
  	_XRegisterFilterByType(ic->core.im->core.display,
  			       ic->core.focus_window,
  			       ClientMessage, ClientMessage,
  			       _Ximp_XimFilter_Client, NULL);
  	return;
  }
  
--- 221,250 ----
  			((Ximp_XIM)ic->core.im)->ximp_impart->focus_win_id,
  			XA_WINDOW, 32, PropModeReplace,
  			(unsigned char *)&ic->core.focus_window, 1);
! 
! 	if(ic->ximp_icpart->filter_mode & 0x2) {
! 		_XUnregisterFilter(ic->core.im->core.display,
! 				   ic->ximp_icpart->back_focus_win,
! 				   _Ximp_XimFilter_Client, (XPointer)NULL);
! 	}
  	_XRegisterFilterByType(ic->core.im->core.display,
  			       ic->core.focus_window,
  			       ClientMessage, ClientMessage,
  			       _Ximp_XimFilter_Client, NULL);
+ 	ic->ximp_icpart->filter_mode |= 0x2;
+ 
+ 	if(ic->ximp_icpart->filter_mode & 0x1) {
+ 		_XUnregisterFilter (ic->core.im->core.display,
+ 				ic->ximp_icpart->back_focus_win,
+ 				_Ximp_XimFilter_Keypress,
+ 				(XPointer)ic);
+ 	}
+ 	_XRegisterFilterByType (ic->core.im->core.display,
+ 				ic->core.focus_window,
+ 				KeyPress, KeyPress,
+ 				_Ximp_XimFilter_Keypress,
+ 				(XPointer)ic);
+ 	ic->ximp_icpart->filter_mode |= 0x1;
  	return;
  }
  
***************
*** 297,303 ****
  _Ximp_SetPreeditFont(ic)
  	Ximp_XIC		 ic;
  {
- 	Ximp_PreeditPropRec	*preedit_atr;
  	Atom			actual_type;
  	int			actual_format;
  	unsigned long		nitems, bytes_after;
--- 298,303 ----
***************
*** 320,326 ****
  			XA_STRING, 8, PropModeReplace,
  			(unsigned char *)(ic->ximp_icpart->preedit_font),
  			strlen(ic->ximp_icpart->preedit_font));
- 	    XFree(ic->ximp_icpart->preedit_font);
  	    }
  	return;
  }
--- 320,325 ----
***************
*** 396,402 ****
  			XA_STRING, 8, PropModeReplace,
  			(unsigned char *)(ic->ximp_icpart->status_font),
  			strlen(ic->ximp_icpart->status_font));
- 	    XFree(ic->ximp_icpart->status_font);
  	    }
  	return;
  }
--- 395,400 ----
***************
*** 422,427 ****
--- 420,428 ----
  {
  	XEvent		Message;
  	
+ 	if((request != XIMP_CREATE) && !(ic->ximp_icpart->icid))
+ 		return;
+ 
  	/* ClientMessage Send */
  	Message.xclient.type         = ClientMessage;
  	Message.xclient.display      = ic->core.im->core.display;
*** /tmp/d26067	Tue Apr 14 14:15:06 1992
--- lib/X/Ximp/XimpIM.c	Tue Apr 14 13:30:25 1992
***************
*** 1,7 ****
! /* $XConsortium: XimpIM.c,v 1.5 91/11/17 15:36:42 rws Exp $ */
  /******************************************************************
  
!               Copyright 1991, by FUJITSU LIMITED
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
--- 1,8 ----
! /* $XConsortium: XimpIM.c,v 1.6 92/04/14 13:29:18 rws Exp $ */
  /******************************************************************
  
!               Copyright 1991, 1992 by FUJITSU LIMITED
!               Copyright 1991, 1992 by Sony Corporaion
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
***************
*** 8,29 ****
  provided that the above copyright notice appear in all copies and
  that both that copyright notice and this permission notice appear
  in supporting documentation, and that the name of FUJITSU LIMITED
! not be used in advertising or publicity pertaining to distribution
! of the software without specific, written prior permission.
! FUJITSU LIMITED makes no representations about the suitability of
! this software for any purpose.  It is provided "as is" without
! express or implied warranty.
  
! FUJITSU LIMITED DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
! INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
! IN NO EVENT SHALL FUJITSU LIMITED BE LIABLE FOR ANY SPECIAL, INDIRECT
! OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
! OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
! OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
! OR PERFORMANCE OF THIS SOFTWARE.
  
    Author: Takashi Fujiwara     FUJITSU LIMITED 
!                                fujiwara@a80.tech.yk.fujitsu.co.jp
  
  ******************************************************************/
  
--- 9,32 ----
  provided that the above copyright notice appear in all copies and
  that both that copyright notice and this permission notice appear
  in supporting documentation, and that the name of FUJITSU LIMITED
! and Sony Corporation not be used in advertising or publicity
! pertaining to distribution of the software without specific,
! written prior permission.
! FUJITSU LIMITED and Sony Corporation make no representations about
! the suitability of this software for any purpose.  It is provided
! "as is" without express or implied warranty.
  
! FUJITSU LIMITED AND SONY CORPORATION DISCLAIM ALL WARRANTIES WITH
! REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF
! MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL FUJITSU LIMITED AND
! SONY CORPORATION BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
! DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
! OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
! TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
! PERFORMANCE OF THIS SOFTWARE.
  
    Author: Takashi Fujiwara     FUJITSU LIMITED 
! 	  Makoto Wakamatsu     Sony Corporaion
  
  ******************************************************************/
  
***************
*** 47,52 ****
--- 50,57 ----
  extern Bool		 _Ximp_GetIMExtension();
  static Bool 		 _Ximp_GetStyle();
  
+ extern Bool		 _Ximp_XimFilter_Destroy();
+ 
  Ximp_XIM 		*Ximp_Xim_List = (Ximp_XIM *)NULL;
  int			 Ximp_Xim_count = 0;
  static	Atom	 	 Protocol_ID;
***************
*** 56,62 ****
  				_Ximp_CreateIC, 	/* create_ic */
  				};
  
! static char	*Strstr( src, dest )
  register char	*src, *dest;
  {
      register	len;
--- 61,67 ----
  				_Ximp_CreateIC, 	/* create_ic */
  				};
  
! char	*_Ximp_Strstr( src, dest )
  register char	*src, *dest;
  {
      register	len;
***************
*** 103,108 ****
--- 108,114 ----
  	ximp_impart->connectserver  = 0;
  	ximp_impart->inputserver    = 1;
  	ximp_impart->use_wchar      = False;
+ 	ximp_impart->process_start_keys = NULL;
  	im->ximp_impart = ximp_impart;
  
          if(_Ximp_OpenIM_Resource(im) == True)
***************
*** 146,151 ****
--- 152,161 ----
  	for(ic = im->core.ic_chain; ic; ic = ic->core.next)
  		XDestroyIC(ic);
  	ximp_impart = (XIMXimpRec *)im->ximp_impart;
+ 	if( ximp_impart->process_start_keys ) {
+ 		XFree( ximp_impart->process_start_keys->keys_list );
+ 		XFree( ximp_impart->process_start_keys );
+ 	}
  	if(ximp_impart->connectserver) {
  		for(i=0; i < Ximp_Xim_count; i++) {
  			if(Ximp_Xim_List[i] == im) {
***************
*** 218,224 ****
   
   		(void)strcpy(IMname, _XIMP_BASE);
   		(void)strcat(IMname, LCname);
!  		mod = Strstr(lcd->core.modifiers, MODIFIER);
   		if (mod) {
   			(void)strcat(IMname, "@");
   			mod += strlen(MODIFIER);
--- 228,234 ----
   
   		(void)strcpy(IMname, _XIMP_BASE);
   		(void)strcat(IMname, LCname);
!  		mod = _Ximp_Strstr(lcd->core.modifiers, MODIFIER);
   		if (mod) {
   			(void)strcat(IMname, "@");
   			mod += strlen(MODIFIER);
***************
*** 357,363 ****
  		_Ximp_SetupFree(version, imstyle, keylist, server_name, server_vl, vendor_name, NULL);
  		return(False);
  	}
! 	if((ext_list = (Atom *)Xmalloc((sizeof(Atom) * nitems + 1))) == NULL) {
  		_Ximp_SetupFree(version, imstyle, keylist, server_name, server_vl, vendor_name, NULL);
  		return(False);
  	}
--- 367,373 ----
  		_Ximp_SetupFree(version, imstyle, keylist, server_name, server_vl, vendor_name, NULL);
  		return(False);
  	}
! 	if((ext_list = (Atom *)Xmalloc((sizeof(Atom) * (nitems + 1)))) == NULL) {
  		_Ximp_SetupFree(version, imstyle, keylist, server_name, server_vl, vendor_name, NULL);
  		return(False);
  	}
***************
*** 413,418 ****
--- 423,434 ----
  	}
  
  	_Ximp_SetupExtension(im);
+ 
+ 	_XRegisterFilterByType(im->core.display, fe_window_id,
+ 			       DestroyNotify, DestroyNotify,
+ 			       _Ximp_XimFilter_Destroy, NULL);
+ 	XSelectInput(im->core.display, fe_window_id, StructureNotifyMask);
+ 
  	im->ximp_impart->connectserver  = 1;
  	return(True);
  }
***************
*** 475,488 ****
  	int		i;
  
  	if(!(im->ximp_impart->connectserver)) {
! 		(*((long *)(p_style))) = (long)NULL;
  		return(False);
  	}
  	p = im->ximp_impart->im_styles;
! 	*p_style = (XIMStyles *)Xmalloc(sizeof(XIMStyles));
  	(*p_style)->count_styles = p->count_styles;
! 	(*p_style)->supported_styles = (XIMStyle *)
! 		Xmalloc(p->count_styles * sizeof(XIMStyle));
  	for(i=0; i < (int)p->count_styles; i++) {
  		(*p_style)->supported_styles[i] = p->supported_styles[i];
  	}
--- 491,505 ----
  	int		i;
  
  	if(!(im->ximp_impart->connectserver)) {
! 		*p_style = (XIMStyles *)NULL;
  		return(False);
  	}
  	p = im->ximp_impart->im_styles;
! 	if((*p_style = (XIMStyles *)Xmalloc(sizeof(XIMStyles)
! 			    + p->count_styles * sizeof(XIMStyle))) == NULL)
! 		return(False);
  	(*p_style)->count_styles = p->count_styles;
! 	(*p_style)->supported_styles = (XIMStyle *)(*p_style + sizeof(XIMStyles));
  	for(i=0; i < (int)p->count_styles; i++) {
  		(*p_style)->supported_styles[i] = p->supported_styles[i];
  	}
*** /tmp/d26086	Tue Apr 14 14:15:15 1992
--- lib/X/Ximp/XimpLCd.c	Tue Apr 14 13:30:31 1992
***************
*** 1,7 ****
! /* $XConsortium: XimpLCd.c,v 1.3 91/07/09 17:36:35 rws Exp $ */
  /*
!  * Copyright 1990, 1991 by TOSHIBA Corp.
!  * Copyright 1990, 1991 by SORD Computer Corp.
   *
   * Permission to use, copy, modify, distribute, and sell this software and its
   * documentation for any purpose is hereby granted without fee, provided that
--- 1,7 ----
! /* $XConsortium: XimpLCd.c,v 1.4 92/04/14 13:29:25 rws Exp $ */
  /*
!  * Copyright 1990, 1991, 1992 by TOSHIBA Corp.
!  * Copyright 1990, 1991, 1992 by SORD Computer Corp.
   *
   * Permission to use, copy, modify, distribute, and sell this software and its
   * documentation for any purpose is hereby granted without fee, provided that
***************
*** 28,34 ****
  
  /******************************************************************
  
!               Copyright 1991, by FUJITSU LIMITED
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
--- 28,34 ----
  
  /******************************************************************
  
!               Copyright 1991, 1992 by FUJITSU LIMITED
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
*** /tmp/d26105	Tue Apr 14 14:15:25 1992
--- lib/X/Ximp/XimpLkup.c	Tue Apr 14 13:30:36 1992
***************
*** 1,9 ****
! /* $XConsortium: XimpLkup.c,v 1.6 92/03/03 11:03:23 rws Exp $ */
  /******************************************************************
  
!               Copyright 1991, by Sony Corporation
!               Copyright 1991, by FUJITSU LIMITED
!               Copyright 1991, by Fuji Xerox Co.,Ltd.
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
--- 1,9 ----
! /* $XConsortium: XimpLkup.c,v 1.7 92/04/14 13:29:28 rws Exp $ */
  /******************************************************************
  
!               Copyright 1991, 1992 by Sony Corporation
!               Copyright 1991, 1992 by FUJITSU LIMITED
!               Copyright 1991, 1992 by Fuji Xerox Co.,Ltd.
  
  Permission to use, copy, modify, distribute, and sell this software
  and its documentation for any purpose is hereby granted without fee,
***************
*** 26,34 ****
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
  OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  
!   Author: Masaki Takeuchi,     Sony Corporation
!           Takashi Fujiwara,    FUJITSU LIMITED 
!           Kazunori Nishihara,  Fuji Xerox Co.,Ltd.
  
  ******************************************************************/
  
--- 26,35 ----
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
  OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  
!   Author: Masaki Takeuchi      Sony Corporation
!           Takashi Fujiwara     FUJITSU LIMITED 
!           Kazunori Nishihara   Fuji Xerox Co.,Ltd.
!           Makoto Wakamatsu     Sony Corporation
  
  ******************************************************************/
  
***************
*** 69,84 ****
  extern void		_Ximp_ProcExtension();
  
  static void		_Ximp_CallCallback();
! static void		_Ximp_ProcError();
  
- #if NeedFunctionPrototypes
- static Bool
- _Ximp_ResetPredicate(
- 	Display *d,
- 	XEvent *ev,
- 	XPointer parg);
- #endif
- 
  typedef struct {
  	Atom type;
  	ICID icid;
--- 70,77 ----
  extern void		_Ximp_ProcExtension();
  
  static void		_Ximp_CallCallback();
! extern void		_Ximp_ProcError();
  
  typedef struct {
  	Atom type;
  	ICID icid;
***************
*** 86,97 ****
  } XimpResetPredArgRec, *XimpResetPredArg;
  
  static Bool
! _Ximp_ResetPredicate(d, ev, parg)
  Display *d;
  XEvent *ev;
! XPointer parg;
  {
! 	XimpResetPredArg arg = (XimpResetPredArg)parg;
  	if (ev->type == ClientMessage) {
  		if (ev->xclient.message_type == arg->type) {
  			if ((ev->xclient.format == 32) &&
--- 79,98 ----
  } XimpResetPredArgRec, *XimpResetPredArg;
  
  static Bool
! #if NeedFunctionPrototypes
! _Ximp_ResetPredicate(
!     Display *d,
!     XEvent *ev,
!     XPointer arg0)
! #else
! _Ximp_ResetPredicate(d, ev, arg0)
  Display *d;
  XEvent *ev;
! XPointer arg0;
! #endif
  {
!     XimpResetPredArg arg = (XimpResetPredArg) arg0 ;
! 
  	if (ev->type == ClientMessage) {
  		if (ev->xclient.message_type == arg->type) {
  			if ((ev->xclient.format == 32) &&
***************
*** 232,240 ****
  #define LookupMessage	3
  
  static int		_xim_lookup_sign;
! static unsigned int	_xim_backup_keycode;
! static unsigned int	_xim_backup_state;
! static unsigned char	*_xim_prop_return;
  static unsigned long	_xim_string_length;
  static int		_xim_message_len;
  static unsigned char	_xim_message_buf[24];
--- 233,239 ----
  #define LookupMessage	3
  
  static int		_xim_lookup_sign;
! static unsigned char	*_xim_prop_return = (unsigned char *) NULL;
  static unsigned long	_xim_string_length;
  static int		_xim_message_len;
  static unsigned char	_xim_message_buf[24];
***************
*** 250,342 ****
  {
  	XComposeStatus	 comp_status;
  	int		 ret = 0, len;
  
  	if(ev->type == KeyPress && ev->keycode == 0) { /* Filter function */
! 		if (_xim_lookup_sign == LookupKeypress) {
! 			ev->state   = _xim_backup_state;
! 			ev->keycode = _xim_backup_keycode;
! 			ret = _Ximp_LookupMBText(ic, ev, buffer, bytes, keysym, &comp_status);
! 			ev->send_event = False ;
! 			if(ret > 0) {
! 				if(keysym && *keysym != NoSymbol) {
! 					if(status) *status = XLookupBoth;
! 					 }
! 				else {
! 					if(status) *status = XLookupChars;
! 					}
! 				}
! 			else {
! 				if(keysym && *keysym != NoSymbol) {
! 					if(status) *status = XLookupKeySym;
! 					}
! 				else {
! 					if(status) *status = XLookupNone;
! 					}
! 				}
! 			return(ret);
  			}
! 		else if(_xim_lookup_sign == LookupProperty) {
! 			if (_Ximp_cttombs(ic->core.im->core.lcd,
! 					  _xim_prop_return,
! 					  _xim_string_length,
! 					  buffer, &bytes, NULL) < 0) 
! 			    ret = 0;
! 			else
! 			    ret = bytes;
! 			XFree((XPointer)_xim_prop_return);
  			}
! 		else if (_xim_lookup_sign == LookupMessage) {
! 			if (_Ximp_cttombs(ic->core.im->core.lcd,
! 					  _xim_message_buf,
! 					  _xim_message_len,
! 					  buffer, &bytes, NULL) < 0) 
! 			    ret = 0;
! 			else
! 			    ret = bytes;
! 			}
! 		if(status)*status = (ret > 0) ? XLookupChars : XLookupNone;
! 		return(ret);
  		}
  	else if(ev->type == KeyPress) {
! 		if(ic->core.client_window == (Window)NULL) {
  			if(status) *status = XLookupNone;
  			return(0);
! 			}
! 		if (ic->ximp_icpart->input_mode) {/* ON : input_mode */
! 			_Ximp_IM_SendMessage(ic, XIMP_KEYPRESS,
! 						 (long)ev->keycode,
! 						 (long)ev->state, NULL);
! 			if(status) *status = XLookupNone;
! 			return(0);
! 			}
  		ret = _Ximp_LookupMBText(ic, ev, buffer, bytes, keysym, &comp_status);
- 		if(ret >= 0) {
- 			if(_Ximp_StartXIMP(ic, ev, keysym ? *keysym : 0)) {
- 				if(status) *status = XLookupNone;
- 					return(0);
- 				}
- 			}
  		if(ret > 0) {
  			if(keysym && *keysym != NoSymbol) {
  				if(status) *status = XLookupBoth;
! 				}
! 			 else {
  				if(status) *status = XLookupChars;
- 				}
  			}
  		else {
  			if(keysym && *keysym != NoSymbol) {
  				if(status) *status = XLookupKeySym;
! 				}
! 			 else {
  				if(status) *status = XLookupNone;
- 				}
  			}
!  		}
  	else {
! 		if (status)
! 			*status = XLookupNone;
!     		}
  	return(ret);
  }
  
--- 249,314 ----
  {
  	XComposeStatus	 comp_status;
  	int		 ret = 0, len;
+ 	Ximp_XLCd	 lcd;
+ 	unsigned char    *s;
+ 	int		 str_len;
  
  	if(ev->type == KeyPress && ev->keycode == 0) { /* Filter function */
! 		if ((_xim_lookup_sign == LookupProperty) ||
! 		    (_xim_lookup_sign == LookupMessage)) {
! 			if (_xim_lookup_sign == LookupMessage) {
! 				s = _xim_message_buf;
! 				str_len = _xim_message_len;
! 			} else {
! 				s = _xim_prop_return;
! 				str_len = _xim_string_length;
  			}
! 			lcd = (Ximp_XLCd)ic->core.im->core.lcd;
! 			len = _Ximp_ct_mbslen(lcd, s, str_len, NULL);
! 			if (len > bytes) {
! 				ret = len;
! 				if(status) *status = XBufferOverflow;
! 			} else if (_Ximp_cttombs(lcd, s, str_len,
! 					  	 buffer, &bytes, NULL) <=  0) {
! 				ret = 0;
! 				if(status) *status = XLookupNone;
! 			} else {
! 				ret = bytes;
! 				if(status) *status = XLookupChars;
  			}
! 			return(ret);
! 		} else {
! 			if(status) *status = XLookupNone;
! 			return(0);
  		}
+ 	}
  	else if(ev->type == KeyPress) {
! 		if(!(ic->ximp_icpart->value_mask & XIMP_CLIENT_WIN)) {
  			if(status) *status = XLookupNone;
  			return(0);
! 		}
! 		ic->ximp_icpart->putback_key_event = False;
  		ret = _Ximp_LookupMBText(ic, ev, buffer, bytes, keysym, &comp_status);
  		if(ret > 0) {
  			if(keysym && *keysym != NoSymbol) {
  				if(status) *status = XLookupBoth;
! 			}
! 			else {
  				if(status) *status = XLookupChars;
  			}
+ 		}
  		else {
  			if(keysym && *keysym != NoSymbol) {
  				if(status) *status = XLookupKeySym;
! 			}
! 			else {
  				if(status) *status = XLookupNone;
  			}
! 		}
!  	}
  	else {
! 		if (status) *status = XLookupNone;
!     	}
  	return(ret);
  }
  
***************
*** 352,440 ****
  	XComposeStatus	 comp_status;
  	int		 ret, len;
  	char		 look[128];
  
  	if(ev->type == KeyPress && ev->keycode == 0) { /* Filter function */
! 		if (_xim_lookup_sign == LookupKeypress) {
! 			ev->state   = _xim_backup_state;
! 			ev->keycode = _xim_backup_keycode;
! 			ret = _Ximp_LookupWCText(ic, ev, buffer, wlen, keysym, &comp_status);
! 			ev->send_event = False ;
! 			if(ret > 0) {
! 				if(keysym && *keysym != NoSymbol) {
! 					if(status) *status = XLookupBoth;
! 					 }
! 				else {
! 					if(status) *status = XLookupChars;
! 					}
! 				}
! 			else {
! 				if(keysym && *keysym != NoSymbol) {
! 					if(status) *status = XLookupKeySym;
! 					}
! 				else {
! 					if(status) *status = XLookupNone;
! 					}
! 				}
! 			return(ret);
  			}
! 		else if(_xim_lookup_sign == LookupProperty) {
! 			len = wlen;
! 			if (_Ximp_cttowcs(ic->core.im->core.lcd,
! 							  _xim_prop_return,
! 							  _xim_string_length,
! 							  buffer, &len, NULL) < 0)
! 				ret = 0;
! 			else
  				ret = len;
! 			XFree((XPointer)_xim_prop_return);
! 			}
! 		else if (_xim_lookup_sign == LookupMessage) {
! 			len = wlen;
! 			if (_Ximp_cttowcs(ic->core.im->core.lcd,
! 							  _xim_message_buf,
! 							  _xim_message_len,
! 							  buffer, &len, NULL) < 0)
  				ret = 0;
! 			else
! 				ret = len;
  			}
! 		if(status)*status = (ret > 0) ? XLookupChars : XLookupNone;
! 		return(ret);
! 		}
! 	else {
! 		if(ic->core.client_window == (Window)NULL) {
  			if(status) *status = XLookupNone;
  			return(0);
! 			}
! 		if (ic->ximp_icpart->input_mode) {/* ON : input_mode */
! 			_Ximp_IM_SendMessage(ic, XIMP_KEYPRESS,
! 						 (long)ev->keycode,
! 						 (long)ev->state, NULL);
  			if(status) *status = XLookupNone;
  			return(0);
  			}
  		ret = _Ximp_LookupWCText(ic, ev, buffer, wlen, keysym, &comp_status);
! 		if(ret >= 0) {
! 			if(_Ximp_StartXIMP(ic, ev, keysym ? *keysym : 0)) {
! 				if(status) *status = XLookupNone;
! 					return(0);
! 				}
  			if(keysym && *keysym != NoSymbol) {
  				if(status) *status = XLookupBoth;
! 				}
  			 else {
  				if(status) *status = XLookupChars;
- 				}
  			}
  		else {
  			if(keysym && *keysym != NoSymbol) {
  				if(status) *status = XLookupKeySym;
! 				}
  			 else {
  				if(status) *status = XLookupNone;
- 				}
  			}
!  		}
  	return(ret);
  }
  
--- 324,389 ----
  	XComposeStatus	 comp_status;
  	int		 ret, len;
  	char		 look[128];
+ 	Ximp_XLCd	 lcd;
+ 	unsigned char    *s;
+ 	int		 str_len;
  
  	if(ev->type == KeyPress && ev->keycode == 0) { /* Filter function */
! 		if ((_xim_lookup_sign == LookupProperty) ||
! 		    (_xim_lookup_sign == LookupMessage)) {
! 			if (_xim_lookup_sign == LookupMessage) {
! 				s = _xim_message_buf;
! 				str_len = _xim_message_len;
! 			} else {
! 				s = _xim_prop_return;
! 				str_len = _xim_string_length;
  			}
! 			lcd = (Ximp_XLCd)ic->core.im->core.lcd;
! 			len = _Ximp_ct_wcslen(lcd, s, str_len, NULL);
! 			if (len > wlen) {
  				ret = len;
! 				if(status) *status = XBufferOverflow;
! 			} else if (_Ximp_cttowcs(lcd, s, str_len,
! 						 buffer, &wlen, NULL) <=  0) {
  				ret = 0;
! 				if(status) *status = XLookupNone;
! 			} else {
! 				ret = wlen;
! 				if(status) *status = XLookupChars;
  			}
! 			return(ret);
! 		} else {
  			if(status) *status = XLookupNone;
  			return(0);
! 		}
! 	}
! 	else if(ev->type == KeyPress) {
! 		if(!(ic->ximp_icpart->value_mask & XIMP_CLIENT_WIN)) {
  			if(status) *status = XLookupNone;
  			return(0);
  			}
+ 		ic->ximp_icpart->putback_key_event = False;
  		ret = _Ximp_LookupWCText(ic, ev, buffer, wlen, keysym, &comp_status);
! 		if(ret > 0) {
  			if(keysym && *keysym != NoSymbol) {
  				if(status) *status = XLookupBoth;
! 			}
  			 else {
  				if(status) *status = XLookupChars;
  			}
+ 		}
  		else {
  			if(keysym && *keysym != NoSymbol) {
  				if(status) *status = XLookupKeySym;
! 			}
  			 else {
  				if(status) *status = XLookupNone;
  			}
! 		}
!  	}
! 	else {
! 		if (status) *status = XLookupNone;
!     	}
  	return(ret);
  }
  
***************
*** 476,499 ****
  	XEvent			 Message;
  	extern Bool		_Ximp_Setup ();
  
! 	if(ic->ximp_icpart->input_mode) /* ON : input_mode */
! 		return(False);
  
  	if(!(((Ximp_XIM)ic->core.im)->ximp_impart->connectserver)) {
! 		if(keysym && keysym ==
! 		  (((Ximp_XIM)ic->core.im)->ximp_impart->def_startkeysym)) {
! 			if(_Ximp_Setup (ic->core.im) == False)
! 				isEventPassedToIMS = 1;
! 			else
! 				isEventPassedToIMS = 0;
  		}
! 		else
! 			isEventPassedToIMS = 1;
! 	}
! 	else {	
  		list = ((Ximp_XIM)ic->core.im)->ximp_impart->im_keyslist;
  		for(i = 0, isEventPassedToIMS = 1; i < (int)list->count_keys; i++) {
! 			if(   (keysym && keysym == list->keys_list[i].keysym)
  			   && ((ev->state & list->keys_list[i].modifier_mask)
  			       == list->keys_list[i].modifier ) ) {
  				isEventPassedToIMS = 0;
--- 425,456 ----
  	XEvent			 Message;
  	extern Bool		_Ximp_Setup ();
  
! 	if (ic->ximp_icpart->input_mode) { /* ON : input_mode */
! 		if (!ic->ximp_icpart->putback_key_event && ev->keycode != 0) {
! 			_Ximp_IM_SendMessage( ic, XIMP_KEYPRESS,
! 					     (long)ev->keycode,
! 					     (long)ev->state, NULL );
! 			return (True);
! 		}
! 		return (False);
! 	}
  
  	if(!(((Ximp_XIM)ic->core.im)->ximp_impart->connectserver)) {
! 		if( (list = ((Ximp_XIM)ic->core.im)->ximp_impart->process_start_keys) == NULL )
! 			return(False);
! 		for(i = 0, isEventPassedToIMS = 1; i < (int)list->count_keys; i++) {
! 			if( (keysym && keysym == list->keys_list[i].keysym)
! 			   && ((ev->state & list->keys_list[i].modifier_mask)
! 			       == list->keys_list[i].modifier ) ) {
! 				isEventPassedToIMS = (_Ximp_Setup( ic->core.im ) == False);
! 				break;
! 				}
! 			}
  		}
! 	else {
  		list = ((Ximp_XIM)ic->core.im)->ximp_impart->im_keyslist;
  		for(i = 0, isEventPassedToIMS = 1; i < (int)list->count_keys; i++) {
! 			if( (keysym && keysym == list->keys_list[i].keysym)
  			   && ((ev->state & list->keys_list[i].modifier_mask)
  			       == list->keys_list[i].modifier ) ) {
  				isEventPassedToIMS = 0;
***************
*** 500,521 ****
  				break;
  				}
  			}
! 	}
  	if(isEventPassedToIMS) return(False);
  
  	if(ic->ximp_icpart->icid == NULL)
! 		if(!(_Ximp_SetOpenXIMP(ic))) return(False);
! 	_XRegisterFilterByType(ic->core.im->core.display,
! 			       ic->core.client_window,
! 			       ClientMessage, ClientMessage,
! 			       _Ximp_XimFilter_Client, NULL);
! 	_XRegisterFilterByType(ic->core.im->core.display,
! 			       ((Ximp_XIM)ic->core.im)->ximp_impart->fe_window,
! 			       DestroyNotify, DestroyNotify,
! 			       _Ximp_XimFilter_Destroy, NULL);
! 	XSelectInput (ic->core.im->core.display,
! 			((Ximp_XIM)ic->core.im)->ximp_impart->fe_window,
! 			StructureNotifyMask);
  
  	if (_Ximp_FocusInput (ic->core.focus_window, &dummy_mask))
  		ic->ximp_icpart->back_mask = dummy_mask;
--- 457,467 ----
  				break;
  				}
  			}
! 		}
  	if(isEventPassedToIMS) return(False);
  
  	if(ic->ximp_icpart->icid == NULL)
! 		if(!(_Ximp_SetOpenXIMP(ic, XIMP_START_IC))) return(False);
  
  	if (_Ximp_FocusInput (ic->core.focus_window, &dummy_mask))
  		ic->ximp_icpart->back_mask = dummy_mask;
***************
*** 532,556 ****
  		XSelectInput(d, ic->core.focus_window, dummy_mask);
  	}
  	ic->ximp_icpart->input_mode = 1;
  	_Ximp_IM_SendMessage(ic, XIMP_BEGIN, NULL, NULL, NULL);
  	XFlush(ic->core.im->core.display);
  	return(True);
  }
  
  Bool
! _Ximp_SetOpenXIMP(ic)
  	Ximp_XIC	ic;
  {
  	unsigned long	 mask;
  	XEvent		 event;
  
! 	if(ic->core.client_window == (Window)NULL)
! 		return(False);
  
  	if(!(ic->ximp_icpart->proto_mask & XIMP_FOCUS_WIN_MASK)) {
- 		ic->ximp_icpart->proto_mask |= XIMP_FOCUS_WIN_MASK;
  		ic->core.focus_window = ic->core.client_window;
! 		}
  	
  	/* Property Data Set */
  	XChangeProperty(ic->core.im->core.display, ic->core.client_window,
--- 478,545 ----
  		XSelectInput(d, ic->core.focus_window, dummy_mask);
  	}
  	ic->ximp_icpart->input_mode = 1;
+ 	_Ximp_IM_SendMessage(ic, XIMP_MOVE,
+ 		ic->ximp_icpart->preedit_attr.SpotLocation.x,
+ 		ic->ximp_icpart->preedit_attr.SpotLocation.y,
+ 		NULL);
  	_Ximp_IM_SendMessage(ic, XIMP_BEGIN, NULL, NULL, NULL);
  	XFlush(ic->core.im->core.display);
  	return(True);
  }
  
+ 
+ typedef struct {
+ 	Atom type;
+ 	Window owner;
+ } XimpCreatePredArgRec, *XimpCreatePredArg;
+ 
+ static Bool
+ _Ximp_CreatePredicate(d, ev, arg0)
+ Display *d;
+ XEvent *ev;
+ XPointer arg0;
+ {
+     XimpCreatePredArg arg = (XimpCreatePredArg) arg0;
+ 
+ 	if (ev->type == ClientMessage) {
+ 		if (ev->xclient.message_type == arg->type) {
+ 			if (ev->xclient.format == 32) {
+ 				switch (ev->xclient.data.l[0]) {
+ 				case XIMP_CREATE_RETURN:
+ 				case XIMP_ERROR:
+ 					return(True);
+ 				}
+ 			}
+ 		}
+ 	} else if (ev->type == DestroyNotify) {
+ 		if (ev->xdestroywindow.window == arg->owner) {
+ 			return(True);
+ 		}
+ 	}
+ 	return(False);
+ }
+ 
  Bool
! _Ximp_SetOpenXIMP(ic, mode)
  	Ximp_XIC	ic;
+ 	int		mode;
  {
  	unsigned long	 mask;
  	XEvent		 event;
+ 	XimpCreatePredArgRec Arg;
  
! 	if(mode == XIMP_CREATE_IC) {  /* XCretaeIC() */
! 		if(!(ic->ximp_icpart->value_mask & XIMP_CLIENT_WIN)) {
! 			ic->core.client_window = XCreateSimpleWindow(
! 				ic->core.im->core.display,
! 				DefaultRootWindow(ic->core.im->core.display),
! 				0, 0, 1, 1, 1, 0, 0);
! 		}
! 	}
  
  	if(!(ic->ximp_icpart->proto_mask & XIMP_FOCUS_WIN_MASK)) {
  		ic->core.focus_window = ic->core.client_window;
! 	}
  	
  	/* Property Data Set */
  	XChangeProperty(ic->core.im->core.display, ic->core.client_window,
***************
*** 560,567 ****
  	XFlush(ic->core.im->core.display);
  
  	mask = ic->ximp_icpart->proto_mask;
! 	if(mask & XIMP_PROP_FOCUS)
! 		_Ximp_SetFocusWindow(ic);
  	if(!(   (ic->core.input_style & XIMPreeditCallbacks)
  	     || (ic->core.input_style & XIMPreeditNone) ) ) { 
  		if(mask & XIMP_PROP_PREEDIT)
--- 549,556 ----
  	XFlush(ic->core.im->core.display);
  
  	mask = ic->ximp_icpart->proto_mask;
! 	_Ximp_SetFocusWindow(ic);
! 	mask |= XIMP_FOCUS_WIN_MASK;
  	if(!(   (ic->core.input_style & XIMPreeditCallbacks)
  	     || (ic->core.input_style & XIMPreeditNone) ) ) { 
  		if(mask & XIMP_PROP_PREEDIT)
***************
*** 590,623 ****
  	signal(SIGALRM, _time_out);
  	alarm(XIMP_TIME_OUT);
  #endif /* XIMP_SIGNAL */
  	while(_time_flag != 1) {
! 		if( (XCheckTypedEvent(ic->core.im->core.display, ClientMessage, &event)) == False) {
  #ifdef XIMP_SIGNAL
  			sleep(1);
  #endif /* XIMP_SIGNAL */
  			continue;
  			}
! 		if(event.xclient.message_type != ((Ximp_XIM)ic->core.im)->ximp_impart->improtocol_id) {
! 			XPutBackEvent(ic->core.im->core.display, &event);
! 			continue;
! 			}
! 		else if(event.xclient.data.l[0] != XIMP_CREATE_RETURN) {
  #ifdef XIMP_SIGNAL
  			alarm(0);
  #endif /* XIMP_SIGNAL */
! 			_Ximp_ProcError (ic->core.im->core.display, NULL, &event);
  			_time_flag = 0;
! 			/* return(False); */
! 			continue;
  			}
! 		else { /* XIMP_CRETAE_RETURN   Event */
  #ifdef XIMP_SIGNAL
  			alarm(0);
  #endif /* XIMP_SIGNAL */
! 			ic->ximp_icpart->icid = (ICID)event.xclient.data.l[1];
! 			_Ximp_A_CreateExtension(ic);
  			_time_flag = 0;
! 			return(True);
  			}
  		}
  	_time_flag = 0;
--- 579,611 ----
  	signal(SIGALRM, _time_out);
  	alarm(XIMP_TIME_OUT);
  #endif /* XIMP_SIGNAL */
+ 	Arg.type = ((Ximp_XIM)ic->core.im)->ximp_impart->improtocol_id;
+ 	Arg.owner = ((Ximp_XIM)ic->core.im)->ximp_impart->fe_window;
  	while(_time_flag != 1) {
! 		if( (XCheckIfEvent(ic->core.im->core.display, &event, _Ximp_CreatePredicate, (XPointer)&Arg)) == False) {
  #ifdef XIMP_SIGNAL
  			sleep(1);
  #endif /* XIMP_SIGNAL */
  			continue;
  			}
! 		if(event.type == ClientMessage &&
! 		   event.xclient.data.l[0] == XIMP_CREATE_RETURN) {
  #ifdef XIMP_SIGNAL
  			alarm(0);
  #endif /* XIMP_SIGNAL */
! 			ic->ximp_icpart->icid = (ICID)event.xclient.data.l[1];
! 			_Ximp_A_CreateExtension(ic);
  			_time_flag = 0;
! 			return(True);
  			}
! 		else {
  #ifdef XIMP_SIGNAL
  			alarm(0);
  #endif /* XIMP_SIGNAL */
! 			_Ximp_ProcError (ic->core.im->core.display, NULL, &event);
  			_time_flag = 0;
! 			/* return(False); */
! 			continue;
  			}
  		}
  	_time_flag = 0;
***************
*** 635,651 ****
  }
  
  void
! _Ximp_ProcKeypress (d, w, ev)
  	Display			*d;
  	Window			w;
  	XClientMessageEvent	*ev;
  {
! 	ICID	icid;
  
  	icid = ev->data.l[1];
! 	_xim_backup_keycode = ev->data.l[2];
! 	_xim_backup_state = ev->data.l[3];
! 	_xim_lookup_sign = LookupKeypress;
  }
  
  static void
--- 623,657 ----
  }
  
  void
! _Ximp_ProcKeypress (d, w, ev, kev)
  	Display			*d;
  	Window			w;
  	XClientMessageEvent	*ev;
+ 	XKeyEvent		*kev;
  {
! 	ICID			icid;
! 	Ximp_XIC 		ic;
  
  	icid = ev->data.l[1];
! 	kev->type = KeyPress;
! 	kev->serial = ev->serial;
! 	kev->send_event = False;
! 	kev->display = ev->display;
! 	kev->window = ev->window;
! 	kev->root = DefaultRootWindow(ev->display);
! 	kev->subwindow = (Window)NULL;
! 	kev->time = 0L;
! 	kev->x = 0;
! 	kev->y = 0;
! 	kev->x_root = 0;
! 	kev->y_root = 0;
! 	kev->keycode = ev->data.l[2];
! 	kev->state = ev->data.l[3];
! 	kev->same_screen = True;
! 	ic = _Ximp_LookupXIC(icid);
! 	if(ic->ximp_icpart->input_mode) { /* ON : input_mode */
! 		ic->ximp_icpart->putback_key_event = True;
! 	}
  }
  
  static void
***************
*** 724,729 ****
--- 730,738 ----
  	int			actual_format_return;
  	unsigned long		nitems_return;
  
+ 	if (_xim_prop_return) {
+ 		XFree((XPointer)(_xim_prop_return));
+ 	}
  	icid      = ev->data.l[1];
  	read_prop = ev->data.l[2];
  	ic   = _Ximp_LookupXIC(icid);
***************
*** 741,747 ****
  	_xim_lookup_sign = LookupProperty;
  }
  
! static void
  _Ximp_ProcError (d, w, ev)
  	Display			*d;
  	Window			w;
--- 750,756 ----
  	_xim_lookup_sign = LookupProperty;
  }
  
! void
  _Ximp_ProcError (d, w, ev)
  	Display			*d;
  	Window			w;
***************
*** 850,864 ****
  	XClientMessageEvent	*ev;
  	XPointer		*client_data;
  {
  	if (ev->message_type != _Ximp_Protocol_id ())
  		return (False);
  	if (ev->format == 32) {
  		switch (ev->data.l[0]) {
  		case XIMP_KEYPRESS:
! 			_Ximp_ProcKeypress (d, w, ev);
! 			_Ximp_MakeKeypress (d, w, ev);
! 			ev->send_event = False ;
! 			XPutBackEvent(d, (XEvent *)ev);
  			break ;
  		case XIMP_CREATE_RETURN:
  			_Ximp_ProcCreateReturn (d, w, ev);
--- 859,873 ----
  	XClientMessageEvent	*ev;
  	XPointer		*client_data;
  {
+ 	XKeyEvent kev;
+ 
  	if (ev->message_type != _Ximp_Protocol_id ())
  		return (False);
  	if (ev->format == 32) {
  		switch (ev->data.l[0]) {
  		case XIMP_KEYPRESS:
! 			_Ximp_ProcKeypress (d, w, ev, &kev);
! 			XPutBackEvent(d, (XEvent *)&kev);
  			break ;
  		case XIMP_CREATE_RETURN:
  			_Ximp_ProcCreateReturn (d, w, ev);
***************
*** 920,929 ****
  	long			dummy_mask;
  
  	for(i=0; i < Ximp_Xim_count; i++) {
! 		if(Ximp_Xim_List[i]->ximp_impart->fe_window == w)
  			ximp_impart = Ximp_Xim_List[i]->ximp_impart;
  		else
  			continue;
  		_Ximp_SetupFreeExtension(Ximp_Xim_List[i]);
  		_Ximp_SetupFree(ximp_impart->im_proto_vl,
  			ximp_impart->im_styles,
--- 929,940 ----
  	long			dummy_mask;
  
  	for(i=0; i < Ximp_Xim_count; i++) {
! 		if(Ximp_Xim_List[i] != NULL  &&
! 		   Ximp_Xim_List[i]->ximp_impart->fe_window == w)
  			ximp_impart = Ximp_Xim_List[i]->ximp_impart;
  		else
  			continue;
+ 		_XUnregisterFilter(d, w, _Ximp_XimFilter_Destroy, (XPointer)NULL);
  		_Ximp_SetupFreeExtension(Ximp_Xim_List[i]);
  		_Ximp_SetupFree(ximp_impart->im_proto_vl,
  			ximp_impart->im_styles,
***************
*** 933,940 ****
--- 944,956 ----
  			ximp_impart->im_vendor_name,
  			ximp_impart->im_ext_list);
  		ximp_impart->connectserver = 0;
+ 		ximp_impart->fe_window = (Window)NULL;
  		for(ic = Ximp_Xim_List[i]->core.ic_chain; ic; ic = ic->core.next) {
  			((Ximp_XIC)ic)->ximp_icpart->icid = NULL;
+ 			_XUnregisterFilter(d,
+ 					   ic->core.focus_window,
+ 					   _Ximp_XimFilter_Client,
+ 					   NULL);
  			if(((Ximp_XIC)ic)->ximp_icpart->input_mode) {/* ON : input_mode */
  				dummy_mask = ((Ximp_XIC)ic)->ximp_icpart->back_mask;
  				XSelectInput(ic->core.im->core.display,
***************
*** 948,965 ****
  }
  
  Bool
! _Ximp_Keypress (d, w, ev, ic)
! 	Display			*d;
! 	Window			w;
! 	XKeyEvent		*ev;
! 	Ximp_XIC		ic;
  {
! #define BUFFLIM		32
! 	KeySym		ks;
! 	char		buff[BUFFLIM];
  
! 	XLookupString (ev, buff, BUFFLIM, &ks, NULL);
! 	return _Ximp_StartXIMP (ic, ev, ks);
  }
  
  /*
--- 964,981 ----
  }
  
  Bool
! _Ximp_XimFilter_Keypress (d, w, ev, client_data)
! 	Display		*d;
! 	Window		w;
! 	XEvent		*ev;
! 	XPointer	client_data;
  {
! #define	BUFFLIM		32
!     KeySym		ks;
!     char		buff[BUFFLIM];
  
!     XLookupString( (XKeyEvent *)ev, buff, BUFFLIM, &ks, NULL );
!     return( _Ximp_StartXIMP( (Ximp_XIC)client_data, ev, ks ) );
  }
  
  /*

Path: news!news.crl.dec.com!pa.dec.com!nobody
Message-Id: <9206302210.AA02446@xenon.lcs.mit.edu>
To: fix-trackers@expo.lcs.mit.edu
Cc: mor@expo.lcs.mit.edu
Subject: (seq: 2602) PEXlib patch 1 (of 4)
Date: Tue, 30 Jun 92 18:10:27 EDT
From: Ralph Mor <mor@expo.lcs.mit.edu>
Distribution: dec
X-Mailing-List: fix-trackers@expo.lcs.mit.edu
X-Disclaimer: This message originated from a mailing list outside of Digital.
Newsgroups: dec.mail.lists.x.fix-trackers
Approved: news@usenet.pa.dec.com

*** /tmp/,RCSt1a19425	Tue Jun 30 16:33:26 1992
--- extensions/lib/PEXlib/Imakefile	Tue Jun 30 16:33:26 1992
***************
*** 1,4 ****
! XCOMM $XConsortium: Imakefile,v 1.1 92/05/08 15:14:08 mor Exp $
  
  #define DoNormalLib NormalLibPex
  #define DoSharedLib SharedLibPex
--- 1,4 ----
! XCOMM $XConsortium: Imakefile,v 1.6 92/06/30 16:25:51 rws Exp $
  
  #define DoNormalLib NormalLibPex
  #define DoSharedLib SharedLibPex
***************
*** 8,16 ****
  
  #ifdef PexNativeFPFormat
  NATIVE_FP_FORMAT = PexNativeFPFormat
! DEFINES = -DNATIVE_FP_FORMAT=$(NATIVE_FP_FORMAT)
  #endif
  
  HEADERS = PEXlib.h \
  	  PEXlibint.h \
  	  PEX.h \
--- 8,22 ----
  
  #ifdef PexNativeFPFormat
  NATIVE_FP_FORMAT = PexNativeFPFormat
! FP_DEFINES = -DNATIVE_FP_FORMAT=$(NATIVE_FP_FORMAT)
  #endif
  
+ #if Malloc0ReturnsNull
+ ALLOC_DEFINES = -DMALLOC_0_RETURNS_NULL
+ #endif
+ 
+ DEFINES = $(FP_DEFINES) $(ALLOC_DEFINES)
+ 
  HEADERS = PEXlib.h \
  	  PEXlibint.h \
  	  PEX.h \
***************
*** 23,28 ****
--- 29,36 ----
  	pl_lut.c \
  	pl_nameset.c \
          pl_oc_attr.c \
+ 	pl_oc_dec.c \
+ 	pl_oc_enc.c \
  	pl_oc_prim.c \
  	pl_oc_struct.c \
  	pl_oc_util.c \
***************
*** 40,45 ****
--- 48,55 ----
  	pl_lut.o \
  	pl_nameset.o \
          pl_oc_attr.o \
+ 	pl_oc_dec.o \
+ 	pl_oc_enc.o \
  	pl_oc_prim.o \
  	pl_oc_struct.o \
  	pl_oc_util.o \
*** /tmp/da19454	Tue Jun 30 16:36:27 1992
--- extensions/lib/PEXlib/PEX.h	Fri Jun 12 10:36:01 1992
***************
*** 1,7 ****
  #ifndef PEX_H
  #define PEX_H
  
! /* $XConsortium: PEX.h,v 1.3 92/05/20 21:19:50 mor Exp $ */
  
  /******************************************************************************/
  /*  Copyright 1987,1991 by Digital Equipment Corporation, Maynard, Mass.      */
--- 1,7 ----
  #ifndef PEX_H
  #define PEX_H
  
! /* $XConsortium: PEX.h,v 1.4 92/06/12 10:39:45 mor Exp $ */
  
  /******************************************************************************/
  /*  Copyright 1987,1991 by Digital Equipment Corporation, Maynard, Mass.      */
***************
*** 393,399 ****
  #define PEXPickAllVisible               1
  
  /* pick all method mnemonics */
! #define PEXETMPickAll                   "All"
  #define PEXETMPickAllVisible            "Visible"
  
  
--- 393,399 ----
  #define PEXPickAllVisible               1
  
  /* pick all method mnemonics */
! #define PEXETMPickAllAll                "All"
  #define PEXETMPickAllVisible            "Visible"
  
  
***************
*** 1050,1056 ****
  #define PEXOCFacetCullingMode           44
  #define PEXOCFacetDistinguishFlag       45
  #define PEXOCPatternSize                46
! #define PEXOCPatternRefPoint            47
  #define PEXOCPatternAttributes          48
  #define PEXOCInteriorBundleIndex        49
  #define PEXOCSurfaceEdgeFlag            50
--- 1050,1056 ----
  #define PEXOCFacetCullingMode           44
  #define PEXOCFacetDistinguishFlag       45
  #define PEXOCPatternSize                46
! #define PEXOCPatternAttributes2D        47
  #define PEXOCPatternAttributes          48
  #define PEXOCInteriorBundleIndex        49
  #define PEXOCSurfaceEdgeFlag            50
***************
*** 1201,1208 ****
  #define PEXRCFreePickMeasure            85
  #define PEXRCGetPickMeasure             86
  #define PEXRCUpdatePickMeasure          87
! #define PEXRCOpenFont                   88
! #define PEXRCCloseFont                  89
  #define PEXRCQueryFont                  90
  #define PEXRCListFonts                  91
  #define PEXRCListFontsWithInfo          92
--- 1201,1208 ----
  #define PEXRCFreePickMeasure            85
  #define PEXRCGetPickMeasure             86
  #define PEXRCUpdatePickMeasure          87
! #define PEXRCLoadFont                   88
! #define PEXRCUnloadFont                 89
  #define PEXRCQueryFont                  90
  #define PEXRCListFonts                  91
  #define PEXRCListFontsWithInfo          92
*** /tmp/da19473	Tue Jun 30 16:36:33 1992
--- extensions/lib/PEXlib/PEXlib.h	Tue Jun 30 14:22:52 1992
***************
*** 1,7 ****
  #ifndef _PEXLIB_H_
  #define _PEXLIB_H_
  
! /* $XConsortium: PEXlib.h,v 1.3 92/05/20 21:27:13 mor Exp $ */
  
  /******************************************************************************/
  /*  Copyright 1987,1991 by Digital Equipment Corporation, Maynard, Mass.      */
--- 1,7 ----
  #ifndef _PEXLIB_H_
  #define _PEXLIB_H_
  
! /* $XConsortium: PEXlib.h,v 1.5 92/06/30 14:26:26 mor Exp $ */
  
  /******************************************************************************/
  /*  Copyright 1987,1991 by Digital Equipment Corporation, Maynard, Mass.      */
***************
*** 738,744 ****
      PEXEnumTypeIndex    polyline_interp;
      PEXTableIndex       line_bundle_index;
      PEXEnumTypeIndex    interior_style;
!     PEXTableIndex       interior_style_index;
      PEXColorSpecifier   surface_color;
      PEXReflectionAttributes   reflection_attr;
      PEXEnumTypeIndex    reflection_model;
--- 738,744 ----
      PEXEnumTypeIndex    polyline_interp;
      PEXTableIndex       line_bundle_index;
      PEXEnumTypeIndex    interior_style;
!     PEXTypeOrTableIndex interior_style_index;
      PEXColorSpecifier   surface_color;
      PEXReflectionAttributes   reflection_attr;
      PEXEnumTypeIndex    reflection_model;
***************
*** 1260,1278 ****
              PEXName *names;
          } AddToNameSet;
          struct {
-             PEXCoord origin;
-             PEXCoord offset;
              int length;
-             char *string;
-         } AnnotationText;
-         struct {
-             PEXCoord2D origin;
-             PEXCoord2D offset;
-             int length;
-             char *string;
-         } AnnotationText2D;
-         struct {
-             int length;
              char *data;
          } ApplicationData;
          struct {
--- 1260,1266 ----
***************
*** 1439,1445 ****
              PEXListOfVertex *vertex_lists;
          } PolylineSetWithData;
          struct {
!             int shape;
              unsigned int facet_attributes;
              unsigned int vertex_attributes;
              int color_type;
--- 1427,1433 ----
              PEXListOfVertex *vertex_lists;
          } PolylineSetWithData;
          struct {
!             int shape_hint;
              unsigned int facet_attributes;
              unsigned int vertex_attributes;
              int color_type;
***************
*** 1614,1626 ****
              PEXArrayOfFacetData facet_data;
              unsigned int vertex_count;
              PEXArrayOfVertex vertices;
!             unsigned int edge_count;
              PEXSwitch *edge_flags;
              PEXConnectivityData *connectivity;
          } SetOfFillAreaSets;
          struct {
              int psc_type;
!             PEXPSCData *characteristics;
          } SetParaSurfCharacteristics;
          struct {
              PEXCoord ref_point;
--- 1602,1614 ----
              PEXArrayOfFacetData facet_data;
              unsigned int vertex_count;
              PEXArrayOfVertex vertices;
!             unsigned int index_count;
              PEXSwitch *edge_flags;
              PEXConnectivityData *connectivity;
          } SetOfFillAreaSets;
          struct {
              int psc_type;
!             PEXPSCData characteristics;
          } SetParaSurfCharacteristics;
          struct {
              PEXCoord ref_point;
***************
*** 1707,1724 ****
              unsigned int index;
          } SetViewIndex;
          struct {
-             PEXCoord origin;
-             PEXVector vector1;
-             PEXVector vector2;
-             int length;
-             char *string;
-         } Text;
-         struct {
-             PEXCoord2D origin;
-             int length;
-             char *string;
-         } Text2D;
-         struct {
              unsigned int facet_attributes;
              unsigned int vertex_attributes;
              int color_type;
--- 1695,1700 ----
***************
*** 1731,1737 ****
  
  
  /*
!  * preformatted output commands
   */
  
  /* macro for inquiring max length for PEXGetOCAddr */
--- 1707,1713 ----
  
  
  /*
!  * encoded output commands
   */
  
  /* macro for inquiring max length for PEXGetOCAddr */
***************
*** 1741,1746 ****
--- 1717,1743 ----
  
  
  /*
+  * constants for utilities
+  */
+ 
+ /* constants for PEXRotate */
+ #define PEXXAxis	1
+ #define PEXYAxis	2
+ #define PEXZAxis	3
+ 
+ /* constants for utilities return status */
+ #define	 PEXBadVector		1
+ #define	 PEXBadVectors		2
+ #define	 PEXBadLimits   	3
+ #define	 PEXBadViewport 	4
+ #define	 PEXBadPlanes		5
+ #define	 PEXBadPRP		6
+ #define	 PEXBadMatrix		7
+ #define	 PEXBadPrimitive	8
+ #define	 PEXBadDistance		9
+ 
+ 
+ /*
   * function declarations
   */
  
***************
*** 1985,1990 ****
--- 1982,1995 ----
  #endif
  );
  
+ extern unsigned long PEXCountOCs(
+ #if NeedFunctionPrototypes
+     int				/* float_format */,
+     unsigned long		/* length */,
+     char *                      /* encoded_ocs */
+ #endif
+ );
+ 
  extern PEXLookupTable PEXCreateLookupTable(
  #if NeedFunctionPrototypes
      Display *		/* display */,
***************
*** 2064,2072 ****
  extern PEXOCData *PEXDecodeOCs(
  #if NeedFunctionPrototypes
      int 		/* float_format */,
      unsigned long 		/* length */,
!     char *		/* encoded_ocs */,
!     unsigned long *		/* oc_count_return */
  #endif
  );
  
--- 2069,2077 ----
  extern PEXOCData *PEXDecodeOCs(
  #if NeedFunctionPrototypes
      int 		/* float_format */,
+     unsigned long 		/* oc_count */,
      unsigned long 		/* length */,
!     char *		/* encoded_ocs */
  #endif
  );
  
***************
*** 2384,2390 ****
  #endif
  );
  
! extern void PEXFinishOC(
  #if NeedFunctionPrototypes
      Display *		/* display */
  #endif
--- 2389,2395 ----
  #endif
  );
  
! extern void PEXFinishOCs(
  #if NeedFunctionPrototypes
      Display *		/* display */
  #endif
***************
*** 2633,2639 ****
  extern PEXName *PEXGetNameSet(
  #if NeedFunctionPrototypes
      Display *		/* display */,
!     PEXNameSet 		/* nameSet */,
      unsigned long *		/* count_return */
  #endif
  );
--- 2638,2644 ----
  extern PEXName *PEXGetNameSet(
  #if NeedFunctionPrototypes
      Display *		/* display */,
!     PEXNameSet 		/* nameset */,
      unsigned long *		/* count_return */
  #endif
  );
***************
*** 2645,2657 ****
  #endif
  );
  
- extern int PEXGetOCSize(
- #if NeedFunctionPrototypes
-     int 		/* float_format */,
-     PEXOCData *		/* oc_data */
- #endif
- );
- 
  extern PEXPDAttributes *PEXGetPickDevice(
  #if NeedFunctionPrototypes
      Display *		/* display */,
--- 2650,2655 ----
***************
*** 2719,2724 ****
--- 2717,2730 ----
  #endif
  );
  
+ extern int PEXGetSizeOCs(
+ #if NeedFunctionPrototypes
+     int 		/* float_format */,
+     int 		/* oc_count */,
+     PEXOCData *		/* oc_data */
+ #endif
+ );
+ 
  extern PEXStructureInfo *PEXGetStructureInfo(
  #if NeedFunctionPrototypes
      Display *		/* display */,
***************
*** 2759,2769 ****
  #endif
  );
  
! extern PEXTableInfo *PEXGetTableInfo(
  #if NeedFunctionPrototypes
      Display *		/* display */,
      Drawable 		/* drawable */,
!     int 		/* table_type */
  #endif
  );
  
--- 2765,2776 ----
  #endif
  );
  
! extern Status PEXGetTableInfo(
  #if NeedFunctionPrototypes
      Display *		/* display */,
      Drawable 		/* drawable */,
!     int 		/* table_type */,
!     PEXTableInfo *	/* info_return */
  #endif
  );
  
***************
*** 3608,3614 ****
      PEXArrayOfFacetData 		/* facet_data */,
      unsigned int 		/* vertex_count */,
      PEXArrayOfVertex 		/* vertices */,
!     unsigned int 		/* edge_count */,
      PEXSwitch *		/* edge_flags */,
      PEXConnectivityData *		/* connectivity */
  #endif
--- 3615,3621 ----
      PEXArrayOfFacetData 		/* facet_data */,
      unsigned int 		/* vertex_count */,
      PEXArrayOfVertex 		/* vertices */,
!     unsigned int 		/* index_count */,
      PEXSwitch *		/* edge_flags */,
      PEXConnectivityData *		/* connectivity */
  #endif
*** /tmp/da19492	Tue Jun 30 16:36:41 1992
--- extensions/lib/PEXlib/PEXlibint.h	Tue Jun 30 12:38:10 1992
***************
*** 1,4 ****
! /* $XConsortium: PEXlibint.h,v 1.4 92/05/27 16:59:11 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
--- 1,4 ----
! /* $XConsortium: PEXlibint.h,v 1.6 92/06/30 12:40:49 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
***************
*** 200,206 ****
  #define PEXFreeBuf(ptr)            Xfree(ptr)
  #define PEXReallocBuf(ptr, size)   Xrealloc(ptr, size)
  
! #define COPY_LARGE_AREA(_from, _to, _size) \
      bcopy (_from, _to, _size)
  
  #define COPY_SMALL_AREA(_from, _to, _size) \
--- 200,206 ----
  #define PEXFreeBuf(ptr)            Xfree(ptr)
  #define PEXReallocBuf(ptr, size)   Xrealloc(ptr, size)
  
! #define COPY_AREA(_from, _to, _size) \
      bcopy (_from, _to, _size)
  
  #define COPY_SMALL_AREA(_from, _to, _size) \
***************
*** 210,225 ****
      while (--_c >= 0) *_t++ = *_f++; \
  }
  
- #define LARGE_AREA_SIZE	40
- 
- #define COPY_AREA(_from, _to, _size) \
- { \
-     if ((_size) >= LARGE_AREA_SIZE) \
-         COPY_LARGE_AREA (_from, _to, _size); \
-     else \
-         COPY_SMALL_AREA (_from, _to, _size); \
- }
- 
  #define PAD(_size) (3 - (((_size) + 3) & 0x3))
  
  #define PADDED_BYTES(_bytes) (_bytes + PAD (_bytes))
--- 210,215 ----
***************
*** 427,438 ****
  
  #define GetColorSize(_type) \
      ((_type) == PEXColorTypeIndexed ? (sizeof (pexTableIndex) * 2) : \
!     ((_type) == PEXColorTypeRGB8 ? sizeof (pexRgb8Colour) : \
!     ((_type) == PEXColorTypeRGB16 ? sizeof (pexRgb16Colour) : \
! 	sizeof (pexRgbFloatColour))))
  
  /*
!  * Return the number of words in a colour.  Note that all the PEX color
   * types are padded to end on a word boundary
   */
  
--- 417,428 ----
  
  #define GetColorSize(_type) \
      ((_type) == PEXColorTypeIndexed ? (sizeof (pexTableIndex) * 2) : \
!     ((_type) == PEXColorTypeRGB8 ? sizeof (pexRgb8Color) : \
!     ((_type) == PEXColorTypeRGB16 ? sizeof (pexRgb16Color) : \
! 	sizeof (pexRgbFloatColor))))
  
  /*
!  * Return the number of words in a color.  Note that all the PEX color
   * types are padded to end on a word boundary
   */
  
***************
*** 448,454 ****
   */
  
  #define AdjustSizeFromType(_type) \
!     (sizeof (pexColour) - GetColorSize (_type))
  
  
  /* 
--- 438,444 ----
   */
  
  #define AdjustSizeFromType(_type) \
!     (sizeof (pexColor) - GetColorSize (_type))
  
  
  /* 
***************
*** 553,561 ****
  
  #define MAX_PICK_CACHE_SIZE 2048
  
! extern PEXPickPath	*PickCache;
! extern unsigned int	PickCacheSize;
! extern int		PickCacheInUse;
  
  
  /*
--- 543,551 ----
  
  #define MAX_PICK_CACHE_SIZE 2048
  
! extern PEXPickPath	*PEXPickCache;
! extern unsigned int	PEXPickCacheSize;
! extern int		PEXPickCacheInUse;
  
  
  /*
*** /tmp/da19511	Tue Jun 30 16:36:45 1992
--- extensions/lib/PEXlib/PEXproto.h	Fri Jun 12 10:35:15 1992
***************
*** 1,4 ****
! /* $XConsortium: PEXproto.h,v 1.2 92/05/20 21:28:13 mor Exp $ */
  
  /***********************************************************
  Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
--- 1,4 ----
! /* $XConsortium: PEXproto.h,v 1.3 92/06/12 10:38:10 mor Exp $ */
  
  /***********************************************************
  Copyright 1989, 1990, 1991 by Sun Microsystems, Inc. and the X Consortium.
***************
*** 348,354 ****
      pexDynamicType	lineBundle;
      pexDynamicType	interiorBundle;
      pexDynamicType	edgeBundle;
!     pexDynamicType	colourTable;
      pexDynamicType	patternTable;
      pexDynamicType	wksTransform;
      pexDynamicType	highlightFilter;
--- 348,354 ----
      pexDynamicType	lineBundle;
      pexDynamicType	interiorBundle;
      pexDynamicType	edgeBundle;
!     pexDynamicType	colorTable;
      pexDynamicType	patternTable;
      pexDynamicType	wksTransform;
      pexDynamicType	highlightFilter;
***************
*** 362,368 ****
      pexDynamicType	bufferModify;
      pexDynamicType	lightTable;
      pexDynamicType	depthCueTable;
!     pexDynamicType	colourApproxTable;
      CARD8		pad[3];
      } pexGetWorkstationDynamicsReply;
  
--- 362,368 ----
      pexDynamicType	bufferModify;
      pexDynamicType	lightTable;
      pexDynamicType	depthCueTable;
!     pexDynamicType	colorApproxTable;
      CARD8		pad[3];
      } pexGetWorkstationDynamicsReply;
  
***************
*** 1093,1102 ****
      pexLookupTable	lineBundle B32;
      pexLookupTable	interiorBundle B32;
      pexLookupTable	edgeBundle B32;
!     pexLookupTable	colourTable B32;
      pexLookupTable	depthCueTable B32;
      pexLookupTable	lightTable B32;
!     pexLookupTable	colourApproxTable B32;
      pexLookupTable	patternTable B32;
      pexLookupTable	textFontTable B32;
      pexNameSet		highlightIncl B32;
--- 1093,1102 ----
      pexLookupTable	lineBundle B32;
      pexLookupTable	interiorBundle B32;
      pexLookupTable	edgeBundle B32;
!     pexLookupTable	colorTable B32;
      pexLookupTable	depthCueTable B32;
      pexLookupTable	lightTable B32;
!     pexLookupTable	colorApproxTable B32;
      pexLookupTable	patternTable B32;
      pexLookupTable	textFontTable B32;
      pexNameSet		highlightIncl B32;
***************
*** 1390,1398 ****
      CARD32	numBytes B32;
      /* LISTof CARD8( numBytes ) -- don't swap */
      /* pad( numBytes ) */
! } pexOpenFontReq;
  
! typedef pexResourceReq pexCloseFontReq;
  
  typedef struct {
      CARD8		reqType;
--- 1390,1398 ----
      CARD32	numBytes B32;
      /* LISTof CARD8( numBytes ) -- don't swap */
      /* pad( numBytes ) */
! } pexLoadFontReq;
  
! typedef pexResourceReq pexUnloadFontReq;
  
  typedef struct {
      CARD8		reqType;
***************
*** 1462,1487 ****
      CARD16		pad B16;
  } pexMarkerBundleIndex;
  
! typedef pexMarkerBundleIndex  pexMarkerColourIndex;
! typedef pexMarkerBundleIndex  pexTextColourIndex;
! typedef pexMarkerBundleIndex  pexLineColourIndex;
! typedef pexMarkerBundleIndex  pexSurfaceColourIndex;
! typedef pexMarkerBundleIndex  pexBfSurfaceColourIndex;
! typedef pexMarkerBundleIndex  pexSurfaceEdgeColourIndex;
  
  typedef pexMarkerBundleIndex pexTextFontIndex;
  
  typedef struct {
      pexElementInfo	head;
!     pexColourSpecifier	colourSpec;
!     /* SINGLE COLOUR() */
! } pexMarkerColour;
  
! typedef pexMarkerColour pexTextColour;
! typedef pexMarkerColour pexLineColour;
! typedef pexMarkerColour pexSurfaceColour;
! typedef pexMarkerColour pexBfSurfaceColour;
! typedef pexMarkerColour pexSurfaceEdgeColour;
  
  typedef struct {
      pexElementInfo	head;
--- 1462,1487 ----
      CARD16		pad B16;
  } pexMarkerBundleIndex;
  
! typedef pexMarkerBundleIndex  pexMarkerColorIndex;
! typedef pexMarkerBundleIndex  pexTextColorIndex;
! typedef pexMarkerBundleIndex  pexLineColorIndex;
! typedef pexMarkerBundleIndex  pexSurfaceColorIndex;
! typedef pexMarkerBundleIndex  pexBfSurfaceColorIndex;
! typedef pexMarkerBundleIndex  pexSurfaceEdgeColorIndex;
  
  typedef pexMarkerBundleIndex pexTextFontIndex;
  
  typedef struct {
      pexElementInfo	head;
!     pexColorSpecifier	colorSpec;
!     /* SINGLE COLOR() */
! } pexMarkerColor;
  
! typedef pexMarkerColor pexTextColor;
! typedef pexMarkerColor pexLineColor;
! typedef pexMarkerColor pexSurfaceColor;
! typedef pexMarkerColor pexBfSurfaceColor;
! typedef pexMarkerColor pexSurfaceEdgeColor;
  
  typedef struct {
      pexElementInfo	head;
***************
*** 1497,1503 ****
  typedef pexMarkerBundleIndex pexEdgeBundleIndex;
  typedef pexMarkerBundleIndex pexViewIndex;
  typedef pexMarkerBundleIndex pexDepthCueIndex;
! typedef pexMarkerBundleIndex pexColourApproxIndex;
  
  typedef struct {
      pexElementInfo	head;
--- 1497,1503 ----
  typedef pexMarkerBundleIndex pexEdgeBundleIndex;
  typedef pexMarkerBundleIndex pexViewIndex;
  typedef pexMarkerBundleIndex pexDepthCueIndex;
! typedef pexMarkerBundleIndex pexColorApproxIndex;
  
  typedef struct {
      pexElementInfo	head;
***************
*** 1715,1721 ****
      pexElementInfo	head;
      pexEnumTypeIndex	model B16;
      CARD16		pad B16;
! } pexRenderingColourModel;
  
  typedef struct {
      pexElementInfo	head;
--- 1715,1721 ----
      pexElementInfo	head;
      pexEnumTypeIndex	model B16;
      CARD16		pad B16;
! } pexRenderingColorModel;
  
  typedef struct {
      pexElementInfo	head;
***************
*** 1815,1824 ****
  
  typedef struct {
      pexElementInfo	head;
!     pexColourType	colourType B16;
      pexBitmaskShort	vertexAttribs B16;
      CARD32		numLists B32;
!     /* LISTof CLISTof pexVertex( numLists, vertexAttribs, colourType ) */
  } pexPolylineSet;
  
  typedef struct {
--- 1815,1824 ----
  
  typedef struct {
      pexElementInfo	head;
!     pexColorType	colorType B16;
      pexBitmaskShort	vertexAttribs B16;
      CARD32		numLists B32;
!     /* LISTof CLISTof pexVertex( numLists, vertexAttribs, colorType ) */
  } pexPolylineSet;
  
  typedef struct {
***************
*** 1854,1864 ****
      CARD16		shape B16;
      pexSwitch		ignoreEdges;
      CARD8		unused;
!     pexColourType	colourType B16;
      pexBitmaskShort	facetAttribs B16;
      pexBitmaskShort	vertexAttribs B16;
      CARD16		unused2 B16;
!     /* SINGLE Facet( facetAttribs, vertexAttribs, colourType ) */
  } pexExtFillArea;
  
  typedef struct {
--- 1854,1864 ----
      CARD16		shape B16;
      pexSwitch		ignoreEdges;
      CARD8		unused;
!     pexColorType	colorType B16;
      pexBitmaskShort	facetAttribs B16;
      pexBitmaskShort	vertexAttribs B16;
      CARD16		unused2 B16;
!     /* SINGLE Facet( facetAttribs, vertexAttribs, colorType ) */
  } pexExtFillArea;
  
  typedef struct {
***************
*** 1885,1914 ****
      CARD16		shape B16;
      pexSwitch		ignoreEdges;
      CARD8		contourHint;
!     pexColourType	colourType B16;
      pexBitmaskShort	facetAttribs B16;
      pexBitmaskShort	vertexAttribs B16;
      CARD16		unused2 B16;
      CARD32		numLists B32;
      /* pexOptData( facetAttribs ) */
!     /* LISTof CLISTof  pexVertex( numLists, vertexAttribs, colourType ) */
  } pexExtFillAreaSet;
  
  typedef struct {
      pexElementInfo	head;
!     pexColourType	colourType B16;
      pexBitmaskShort	facetAttribs B16;
      pexBitmaskShort	vertexAttribs B16;
      CARD16		unused B16;
      CARD32		numVertices B32;
      /* number of OptData is numVert - 2 */
!     /* LISTof pexOptData( facetAttribs, colourType ) */
!     /* LISTof pexVertex( numVertices, vertexAttribs, colourType ) */
  } pexTriangleStrip;
  
  typedef struct {
      pexElementInfo	head;
!     pexColourType	colourType B16;
      CARD16		mPts B16;
      CARD16		nPts B16;
      pexBitmaskShort	facetAttribs B16;
--- 1885,1914 ----
      CARD16		shape B16;
      pexSwitch		ignoreEdges;
      CARD8		contourHint;
!     pexColorType	colorType B16;
      pexBitmaskShort	facetAttribs B16;
      pexBitmaskShort	vertexAttribs B16;
      CARD16		unused2 B16;
      CARD32		numLists B32;
      /* pexOptData( facetAttribs ) */
!     /* LISTof CLISTof  pexVertex( numLists, vertexAttribs, colorType ) */
  } pexExtFillAreaSet;
  
  typedef struct {
      pexElementInfo	head;
!     pexColorType	colorType B16;
      pexBitmaskShort	facetAttribs B16;
      pexBitmaskShort	vertexAttribs B16;
      CARD16		unused B16;
      CARD32		numVertices B32;
      /* number of OptData is numVert - 2 */
!     /* LISTof pexOptData( facetAttribs, colorType ) */
!     /* LISTof pexVertex( numVertices, vertexAttribs, colorType ) */
  } pexTriangleStrip;
  
  typedef struct {
      pexElementInfo	head;
!     pexColorType	colorType B16;
      CARD16		mPts B16;
      CARD16		nPts B16;
      pexBitmaskShort	facetAttribs B16;
***************
*** 1915,1928 ****
      pexBitmaskShort	vertexAttribs B16;
      CARD16		shape B16;
      /* actually, there are (mPts-1)*(nPts-1) opt data entries */
!     /* LISTof pexOptData( facetAttribs, colourType ) */
!     /* LISTof pexVertex( mPts, nPts, vertexAttribs, colourType ) */
  } pexQuadrilateralMesh;
  
  typedef struct {
      pexElementInfo	head;
      CARD16		shape B16;
!     pexColourType	colourType B16;
      CARD16		FAS_Attributes B16;
      CARD16		vertexAttributes B16;
      CARD16		edgeAttributes B16;
--- 1915,1928 ----
      pexBitmaskShort	vertexAttribs B16;
      CARD16		shape B16;
      /* actually, there are (mPts-1)*(nPts-1) opt data entries */
!     /* LISTof pexOptData( facetAttribs, colorType ) */
!     /* LISTof pexVertex( mPts, nPts, vertexAttribs, colorType ) */
  } pexQuadrilateralMesh;
  
  typedef struct {
      pexElementInfo	head;
      CARD16		shape B16;
!     pexColorType	colorType B16;
      CARD16		FAS_Attributes B16;
      CARD16		vertexAttributes B16;
      CARD16		edgeAttributes B16;
***************
*** 1980,1986 ****
  
  typedef struct {
      pexElementInfo	head;
!     pexColourType	colourType B16;
      CARD16		unused B16;
      pexCoord3D		point1;
      pexCoord3D		point2;
--- 1980,1986 ----
  
  typedef struct {
      pexElementInfo	head;
!     pexColorType	colorType B16;
      CARD16		unused B16;
      pexCoord3D		point1;
      pexCoord3D		point2;
***************
*** 1987,1993 ****
      pexCoord3D		point3;
      CARD32		dx B32;
      CARD32		dy B32;
!     /* LISTof pexColourSpecifier( dx, dy ) */
  } pexExtCellArray;
  
  typedef struct {
--- 1987,1993 ----
      pexCoord3D		point3;
      CARD32		dx B32;
      CARD32		dy B32;
!     /* LISTof pexColorSpecifier( dx, dy ) */
  } pexExtCellArray;
  
  typedef struct {
*** /tmp/da19530	Tue Jun 30 16:36:51 1992
--- extensions/lib/PEXlib/PEXprotost.h	Fri Jun 12 10:48:03 1992
***************
*** 1,4 ****
! /* $XConsortium: PEXprotost.h,v 1.1 92/05/08 15:12:49 mor Exp $ */
  
  
  /***********************************************************
--- 1,4 ----
! /* $XConsortium: PEXprotost.h,v 1.2 92/06/12 10:52:12 mor Exp $ */
  
  
  /***********************************************************
***************
*** 64,70 ****
  typedef CARD16	pexTextHAlignment;
  typedef CARD16	pexTextVAlignment;
  typedef CARD16	pexTypeOrTableIndex;
! typedef pexEnumTypeIndex	pexColourType; 	/* ColourType */
  
  /* included in others */
  typedef struct {
--- 64,70 ----
  typedef CARD16	pexTextHAlignment;
  typedef CARD16	pexTextVAlignment;
  typedef CARD16	pexTypeOrTableIndex;
! typedef pexEnumTypeIndex	pexColorType; 	/* ColorType */
  
  /* included in others */
  typedef struct {
***************
*** 109,138 ****
  } pexCoord4D;
  
  
! /* Colour structures */
  typedef struct {
      PEXFLOAT	red;
      PEXFLOAT	green;
      PEXFLOAT	blue;
! } pexRgbFloatColour;
  
  typedef struct {
      PEXFLOAT	hue;
      PEXFLOAT	saturation;
      PEXFLOAT	value;
! } pexHsvColour;
  
  typedef struct {
      PEXFLOAT	hue;
      PEXFLOAT	lightness;
      PEXFLOAT	saturation;
! } pexHlsColour;
  
  typedef struct {
      PEXFLOAT	x;
      PEXFLOAT	y;
      PEXFLOAT	z;
! } pexCieColour;
  
  typedef struct {
      CARD8	red;
--- 109,138 ----
  } pexCoord4D;
  
  
! /* Color structures */
  typedef struct {
      PEXFLOAT	red;
      PEXFLOAT	green;
      PEXFLOAT	blue;
! } pexRgbFloatColor;
  
  typedef struct {
      PEXFLOAT	hue;
      PEXFLOAT	saturation;
      PEXFLOAT	value;
! } pexHsvColor;
  
  typedef struct {
      PEXFLOAT	hue;
      PEXFLOAT	lightness;
      PEXFLOAT	saturation;
! } pexHlsColor;
  
  typedef struct {
      PEXFLOAT	x;
      PEXFLOAT	y;
      PEXFLOAT	z;
! } pexCieColor;
  
  typedef struct {
      CARD8	red;
***************
*** 139,145 ****
      CARD8	green;
      CARD8	blue;
      CARD8	pad;
! } pexRgb8Colour;
  
  typedef struct {
      CARD16	red B16;
--- 139,145 ----
      CARD8	green;
      CARD8	blue;
      CARD8	pad;
! } pexRgb8Color;
  
  typedef struct {
      CARD16	red B16;
***************
*** 146,181 ****
      CARD16	green B16;
      CARD16	blue B16;
      CARD16	pad B16;
! } pexRgb16Colour;
  
  typedef struct {
      pexTableIndex	index B16;
      CARD16		pad B16;
! } pexIndexedColour;
  
  typedef struct {
      union {
! 	pexIndexedColour	indexed;
! 	pexRgb8Colour		rgb8;
! 	pexRgb16Colour		rgb16;
! 	pexRgbFloatColour	rgbFloat;
! 	pexHsvColour		hsvFloat;
! 	pexHlsColour		hlsFloat;
! 	pexCieColour		cieFloat;
      } format;
! } pexColour;
  
  typedef struct {
      PEXFLOAT   first;
      PEXFLOAT   second;
      PEXFLOAT   third;
! } pexFloatColour;
  
  typedef struct {
!     pexColourType	colourType B16;	/* ColourType enumerated type */
      CARD16		unused B16;
!     /* SINGLE COLOUR(colourType) */
! } pexColourSpecifier;
  
  
  typedef struct {
--- 146,181 ----
      CARD16	green B16;
      CARD16	blue B16;
      CARD16	pad B16;
! } pexRgb16Color;
  
  typedef struct {
      pexTableIndex	index B16;
      CARD16		pad B16;
! } pexIndexedColor;
  
  typedef struct {
      union {
! 	pexIndexedColor		indexed;
! 	pexRgb8Color		rgb8;
! 	pexRgb16Color		rgb16;
! 	pexRgbFloatColor	rgbFloat;
! 	pexHsvColor		hsvFloat;
! 	pexHlsColor		hlsFloat;
! 	pexCieColor		cieFloat;
      } format;
! } pexColor;
  
  typedef struct {
      PEXFLOAT   first;
      PEXFLOAT   second;
      PEXFLOAT   third;
! } pexFloatColor;
  
  typedef struct {
!     pexColorType	colorType B16;	/* ColorType enumerated type */
      CARD16		unused B16;
!     /* SINGLE COLOR(colorType) */
! } pexColorSpecifier;
  
  
  typedef struct {
***************
*** 328,335 ****
      PEXFLOAT		specular;
      PEXFLOAT		specularConc;
      PEXFLOAT		transmission;  /* 0.0 = opaque, 1.0 = transparent */
!     pexColourSpecifier  specularColour;
!     /* SINGLE COLOUR() */
  } pexReflectionAttr;
  
  typedef struct {
--- 328,335 ----
      PEXFLOAT		specular;
      PEXFLOAT		specularConc;
      PEXFLOAT		transmission;  /* 0.0 = opaque, 1.0 = transparent */
!     pexColorSpecifier  specularColor;
!     /* SINGLE COLOR() */
  } pexReflectionAttr;
  
  typedef struct {
***************
*** 383,390 ****
      pexEnumTypeIndex	polylineInterp B16;
      pexCurveApprox	curveApprox;
      PEXFLOAT		lineWidth;
!     pexColourSpecifier	lineColour;
!     /* SINGLE COLOUR() */
  } pexLineBundleEntry;
  
  typedef struct {
--- 383,390 ----
      pexEnumTypeIndex	polylineInterp B16;
      pexCurveApprox	curveApprox;
      PEXFLOAT		lineWidth;
!     pexColorSpecifier	lineColor;
!     /* SINGLE COLOR() */
  } pexLineBundleEntry;
  
  typedef struct {
***************
*** 391,398 ****
      pexEnumTypeIndex	markerType B16;
      INT16		unused B16;
      PEXFLOAT		markerScale;
!     pexColourSpecifier	markerColour;
!     /* SINGLE COLOUR() */
  } pexMarkerBundleEntry;
  
  typedef struct {
--- 391,398 ----
      pexEnumTypeIndex	markerType B16;
      INT16		unused B16;
      PEXFLOAT		markerScale;
!     pexColorSpecifier	markerColor;
!     /* SINGLE COLOR() */
  } pexMarkerBundleEntry;
  
  typedef struct {
***************
*** 400,413 ****
      CARD16		textPrecision B16;
      PEXFLOAT		charExpansion;
      PEXFLOAT		charSpacing;
!     pexColourSpecifier	textColour;
!     /* SINGLE COLOUR() */
  } pexTextBundleEntry;
  
  
  /*
      Note that since an InteriorBundleEntry contains 4 embedded instances of 
!     pexColourSpecifier, a variable-sized item, a data structure cannot be
      defined for it.
  */
  typedef struct {
--- 400,413 ----
      CARD16		textPrecision B16;
      PEXFLOAT		charExpansion;
      PEXFLOAT		charSpacing;
!     pexColorSpecifier	textColor;
!     /* SINGLE COLOR() */
  } pexTextBundleEntry;
  
  
  /*
      Note that since an InteriorBundleEntry contains 4 embedded instances of 
!     pexColorSpecifier, a variable-sized item, a data structure cannot be
      defined for it.
  */
  typedef struct {
***************
*** 420,429 ****
      pexEnumTypeIndex    bfReflectionModel B16;
      pexEnumTypeIndex    bfSurfaceInterp B16;
      pexSurfaceApprox    surfaceApprox;
!     /* SINGLE pexColourSpecifier		surfaceColour    */
!     /* SINGLE pexReflectionAttr			reflectionAttr   */
!     /* SINGLE pexColourSpecifier		bfSurfaceColour  */
!     /* SINGLE pexReflectionAttr			bfReflectionAttr */
  } pexInteriorBundleEntry;
  
  typedef struct {
--- 420,429 ----
      pexEnumTypeIndex    bfReflectionModel B16;
      pexEnumTypeIndex    bfSurfaceInterp B16;
      pexSurfaceApprox    surfaceApprox;
!     /* SINGLE pexColorSpecifier		surfaceColor    */
!     /* SINGLE pexReflectionAttr		reflectionAttr   */
!     /* SINGLE pexColorSpecifier		bfSurfaceColor  */
!     /* SINGLE pexReflectionAttr		bfReflectionAttr */
  } pexInteriorBundleEntry;
  
  typedef struct {
***************
*** 431,449 ****
      CARD8		unused;
      pexEnumTypeIndex	edgeType B16;
      PEXFLOAT		edgeWidth;
!     pexColourSpecifier	edgeColour;
!     /* SINGLE COLOUR() */
  } pexEdgeBundleEntry;
  
  typedef struct {
!     pexColourType	colourType B16; 
      CARD16		numx B16;
      CARD16		numy B16;
      CARD16		unused B16;
!     /* LISTof Colour(numx, numy) 2D array of colours */
  } pexPatternEntry;
  
! /* a pexColourEntry is just a pexColourSpecifier
  */
  
  typedef struct {
--- 431,449 ----
      CARD8		unused;
      pexEnumTypeIndex	edgeType B16;
      PEXFLOAT		edgeWidth;
!     pexColorSpecifier	edgeColor;
!     /* SINGLE COLOR() */
  } pexEdgeBundleEntry;
  
  typedef struct {
!     pexColorType	colorType B16; 
      CARD16		numx B16;
      CARD16		numy B16;
      CARD16		unused B16;
!     /* LISTof Color(numx, numy) 2D array of colors */
  } pexPatternEntry;
  
! /* a pexColorEntry is just a pexColorSpecifier
  */
  
  typedef struct {
***************
*** 462,469 ****
      PEXFLOAT		spreadAngle;
      PEXFLOAT		attenuation1;
      PEXFLOAT		attenuation2;
!     pexColourSpecifier	lightColour;
!     /* SINGLE COLOUR() */
  } pexLightEntry;
  
  typedef struct {
--- 462,469 ----
      PEXFLOAT		spreadAngle;
      PEXFLOAT		attenuation1;
      PEXFLOAT		attenuation2;
!     pexColorSpecifier	lightColor;
!     /* SINGLE COLOR() */
  } pexLightEntry;
  
  typedef struct {
***************
*** 474,481 ****
      PEXFLOAT		backPlane;
      PEXFLOAT		frontScaling;
      PEXFLOAT		backScaling;
!     pexColourSpecifier	depthCueColour;
!     /* SINGLE COLOUR() */
  } pexDepthCueEntry;
  
  typedef struct {
--- 474,481 ----
      PEXFLOAT		backPlane;
      PEXFLOAT		frontScaling;
      PEXFLOAT		backScaling;
!     pexColorSpecifier	depthCueColor;
!     /* SINGLE COLOR() */
  } pexDepthCueEntry;
  
  typedef struct {
***************
*** 493,499 ****
      PEXFLOAT	weight2;
      PEXFLOAT	weight3;
      CARD32	basePixel B32;
! } pexColourApproxEntry;
  
  
  /*  Font structures */
--- 493,499 ----
      PEXFLOAT	weight2;
      PEXFLOAT	weight3;
      CARD32	basePixel B32;
! } pexColorApproxEntry;
  
  
  /*  Font structures */
***************
*** 584,590 ****
      INT16	fpFormat B16;
      CARD8	unused[2];
      CARD32	rdr B32;	    /* renderer ID */
!     /* SINGLE ColourSpecifier()  */
! } pexEscapeSetEchoColourData;
  
  #endif /* PEXPROTOSTR_H */
--- 584,590 ----
      INT16	fpFormat B16;
      CARD8	unused[2];
      CARD32	rdr B32;	    /* renderer ID */
!     /* SINGLE ColorSpecifier()  */
! } pexEscapeSetEchoColorData;
  
  #endif /* PEXPROTOSTR_H */
*** /tmp/da19549	Tue Jun 30 16:36:54 1992
--- extensions/lib/PEXlib/pl_escape.c	Fri Jun 12 10:37:23 1992
***************
*** 1,4 ****
! /* $XConsortium: pl_escape.c,v 1.2 92/05/20 20:30:15 mor Exp $ */
  
  /************************************************************************
  Copyright 1992 by the Massachusetts Institute of Technology,
--- 1,4 ----
! /* $XConsortium: pl_escape.c,v 1.3 92/06/12 10:41:12 mor Exp $ */
  
  /************************************************************************
  Copyright 1992 by the Massachusetts Institute of Technology,
***************
*** 10,18 ****
  documentation for any purpose and without fee is hereby granted, 
  provided that the above copyright notice appear in all copies and that
  both that copyright notice and this permission notice appear in 
! supporting documentation, and that the names of Digital or MIT not be
! used in advertising or publicity pertaining to distribution of the
! software without specific, written prior permission.  
  
  *************************************************************************/
  
--- 10,18 ----
  documentation for any purpose and without fee is hereby granted, 
  provided that the above copyright notice appear in all copies and that
  both that copyright notice and this permission notice appear in 
! supporting documentation, and that the name of MIT not be used in
! advertising or publicity pertaining to distribution of the software
! without specific, written prior permission.  
  
  *************************************************************************/
  
*** /tmp/da19568	Tue Jun 30 16:36:57 1992
--- extensions/lib/PEXlib/pl_font.c	Fri Jun 12 10:31:46 1992
***************
*** 1,4 ****
! /* $XConsortium: pl_font.c,v 1.2 92/05/20 20:55:38 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
--- 1,4 ----
! /* $XConsortium: pl_font.c,v 1.3 92/06/12 10:35:01 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
***************
*** 36,42 ****
  INPUT char	*fontname;
  
  {
!     pexOpenFontReq	*req;
      pexFont		id;
  
  
--- 36,42 ----
  INPUT char	*fontname;
  
  {
!     pexLoadFontReq	*req;
      pexFont		id;
  
  
***************
*** 51,57 ****
       * Put the request in the X request buffer.
       */
  
!     PEXGetReq (OpenFont, req);
      req->numBytes = strlen (fontname);
      req->font = id = XAllocID (display);
      req->length += (req->numBytes + 3) >> 2;
--- 51,57 ----
       * Put the request in the X request buffer.
       */
  
!     PEXGetReq (LoadFont, req);
      req->numBytes = strlen (fontname);
      req->font = id = XAllocID (display);
      req->length += (req->numBytes + 3) >> 2;
***************
*** 91,97 ****
       * Put the request in the X request buffer.
       */
  
!     PEXGetReq (CloseFont, req);
      req->id = font;
  
  
--- 91,97 ----
       * Put the request in the X request buffer.
       */
  
!     PEXGetReq (UnloadFont, req);
      req->id = font;
  
  
*** /tmp/da19587	Tue Jun 30 16:37:00 1992
--- extensions/lib/PEXlib/pl_free.c	Tue Jun 30 15:48:52 1992
***************
*** 1,8 ****
! /* $XConsortium: pl_free.c,v 1.3 92/05/26 11:08:46 mor Exp $ */
  
  /************************************************************************
! Copyright 1992 by the Massachusetts Institute of Technology, Cambridge,
! Massachusetts.
  
                          All Rights Reserved
  
--- 1,8 ----
! /* $XConsortium: pl_free.c,v 1.5 92/06/30 15:53:03 mor Exp $ */
  
  /************************************************************************
! Copyright 1992 by the Massachusetts Institute of Technology,
! Cambridge, Massachusetts.
  
                          All Rights Reserved
  
***************
*** 10,18 ****
  documentation for any purpose and without fee is hereby granted, 
  provided that the above copyright notice appear in all copies and that
  both that copyright notice and this permission notice appear in 
! supporting documentation, and that the names of Digital or MIT not be
! used in advertising or publicity pertaining to distribution of the
! software without specific, written prior permission.  
  
  *************************************************************************/
  
--- 10,18 ----
  documentation for any purpose and without fee is hereby granted, 
  provided that the above copyright notice appear in all copies and that
  both that copyright notice and this permission notice appear in 
! supporting documentation, and that the name of MIT not be used in
! advertising or publicity pertaining to distribution of the software
! without specific, written prior permission.  
  
  *************************************************************************/
  
***************
*** 19,25 ****
  #include "PEXlib.h"
  #include "PEXlibint.h"
  
! #define FreeIfNotNull(_ptr) if (_ptr) PEXFreeBuf (_ptr)
  
  
  void PEXFreeEnumInfo (numCounts, infoCount, enumInfo)
--- 19,25 ----
  #include "PEXlib.h"
  #include "PEXlibint.h"
  
! #define CHECK_AND_FREE(_ptr) if (_ptr) PEXFreeBuf (_ptr)
  
  
  void PEXFreeEnumInfo (numCounts, infoCount, enumInfo)
***************
*** 36,47 ****
      for (i = 0; i < numCounts; i++)
  	for (j = 0; j < infoCount[i]; j++)
  	{
! 	    FreeIfNotNull ((char *) desc->descriptor);
  	    desc++;
  	}
  
!     PEXFreeBuf ((char *) infoCount);
!     PEXFreeBuf ((char *) enumInfo);
  }
  
  
--- 36,47 ----
      for (i = 0; i < numCounts; i++)
  	for (j = 0; j < infoCount[i]; j++)
  	{
! 	    CHECK_AND_FREE ((char *) desc->descriptor);
  	    desc++;
  	}
  
!     CHECK_AND_FREE ((char *) infoCount);
!     CHECK_AND_FREE ((char *) enumInfo);
  }
  
  
***************
*** 57,67 ****
  
      for (i = 0; i < numFontInfo; i++)
      {
! 	PEXFreeBuf ((char *) info->props);
  	info++;
      }
  
!     PEXFreeBuf ((char *) fontInfo);
  }
  
  
--- 57,67 ----
  
      for (i = 0; i < numFontInfo; i++)
      {
! 	CHECK_AND_FREE ((char *) info->props);
  	info++;
      }
  
!     CHECK_AND_FREE ((char *) fontInfo);
  }
  
  
***************
*** 75,83 ****
  
  
      for (i = 0; i < numFontNames; i++)
! 	PEXFreeBuf (fontNames[i]);
  
!     PEXFreeBuf ((char *) fontNames);
  }
  
  
--- 75,83 ----
  
  
      for (i = 0; i < numFontNames; i++)
! 	CHECK_AND_FREE (fontNames[i]);
  
!     CHECK_AND_FREE ((char *) fontNames);
  }
  
  
***************
*** 86,106 ****
  INPUT PEXPCAttributes	*pcAttr;
  
  {
!     FreeIfNotNull ((char *) pcAttr->model_clip_volume.half_spaces);
!     FreeIfNotNull ((char *) pcAttr->light_state.indices);
  
      if (pcAttr->para_surf_char.type == PEXPSCMCLevelCurves ||
          pcAttr->para_surf_char.type == PEXPSCWCLevelCurves)
      {
! 	PEXFreeBuf ((char *)
  	    pcAttr->para_surf_char.psc.level_curves.parameters);
      }
      else if (pcAttr->para_surf_char.type == PEXPSCImpDep)
      {
! 	PEXFreeBuf ((char *) pcAttr->para_surf_char.psc.imp_dep.data);
      }
  
!     PEXFreeBuf ((char *) pcAttr);
  }
  
  
--- 86,106 ----
  INPUT PEXPCAttributes	*pcAttr;
  
  {
!     CHECK_AND_FREE ((char *) pcAttr->model_clip_volume.half_spaces);
!     CHECK_AND_FREE ((char *) pcAttr->light_state.indices);
  
      if (pcAttr->para_surf_char.type == PEXPSCMCLevelCurves ||
          pcAttr->para_surf_char.type == PEXPSCWCLevelCurves)
      {
! 	CHECK_AND_FREE ((char *)
  	    pcAttr->para_surf_char.psc.level_curves.parameters);
      }
      else if (pcAttr->para_surf_char.type == PEXPSCImpDep)
      {
! 	CHECK_AND_FREE ((char *) pcAttr->para_surf_char.psc.imp_dep.data);
      }
  
!     CHECK_AND_FREE ((char *) pcAttr);
  }
  
  
***************
*** 109,117 ****
  PEXPDAttributes		*pdAttr;
  
  {
!     FreeIfNotNull (pdAttr->path.elements);
  
!     PEXFreeBuf ((char *) pdAttr);
  }
  
  
--- 109,117 ----
  PEXPDAttributes		*pdAttr;
  
  {
!     CHECK_AND_FREE (pdAttr->path.elements);
  
!     CHECK_AND_FREE ((char *) pdAttr);
  }
  
  
***************
*** 120,128 ****
  PEXPMAttributes	 *pmAttr;
  
  {
!     FreeIfNotNull ((char *) pmAttr->pick_path.elements);
  
!     PEXFreeBuf ((char *) pmAttr);
  }
  
  
--- 120,128 ----
  PEXPMAttributes	 *pmAttr;
  
  {
!     CHECK_AND_FREE ((char *) pmAttr->pick_path.elements);
  
!     CHECK_AND_FREE ((char *) pmAttr);
  }
  
  
***************
*** 141,155 ****
       * of allocating a seperate buffer for each pick path.
       */
  
!     if (pickPaths == PickCache)
      {
  	/*
  	 * Make the pick cache available again.
  	 */
  
! 	PickCacheInUse = 0;
      }
!     else if (PickCacheInUse)
      {
  	/*
  	 * The pick cache is in use, so we must free this pick path.
--- 141,155 ----
       * of allocating a seperate buffer for each pick path.
       */
  
!     if (pickPaths == PEXPickCache)
      {
  	/*
  	 * Make the pick cache available again.
  	 */
  
! 	PEXPickCacheInUse = 0;
      }
!     else if (PEXPickCacheInUse)
      {
  	/*
  	 * The pick cache is in use, so we must free this pick path.
***************
*** 174,187 ****
  	 * new pick cache buffer.
  	 */
  	
! 	if (total_size <= PickCacheSize || total_size > MAX_PICK_CACHE_SIZE)
  	    PEXFreeBuf ((char *) pickPaths);
  	else
  	{
! 	    if (PickCache)
! 		PEXFreeBuf ((char *) PickCache);
! 	    PickCache = pickPaths;
! 	    PickCacheSize = total_size;
  	}
      }
  }
--- 174,187 ----
  	 * new pick cache buffer.
  	 */
  	
! 	if (total_size <= PEXPickCacheSize || total_size > MAX_PICK_CACHE_SIZE)
  	    PEXFreeBuf ((char *) pickPaths);
  	else
  	{
! 	    if (PEXPickCache)
! 		PEXFreeBuf ((char *) PEXPickCache);
! 	    PEXPickCache = pickPaths;
! 	    PEXPickCacheSize = total_size;
  	}
      }
  }
***************
*** 192,202 ****
  INPUT PEXRendererAttributes	*rdrAttr;
  
  {
!     FreeIfNotNull ((char *) rdrAttr->current_path.elements);
!     FreeIfNotNull ((char *) rdrAttr->clip_list.rectangles);
!     FreeIfNotNull ((char *) rdrAttr->pick_start_path.elements);
  
!     PEXFreeBuf ((char *) rdrAttr);
  }
  
  
--- 192,202 ----
  INPUT PEXRendererAttributes	*rdrAttr;
  
  {
!     CHECK_AND_FREE ((char *) rdrAttr->current_path.elements);
!     CHECK_AND_FREE ((char *) rdrAttr->clip_list.rectangles);
!     CHECK_AND_FREE ((char *) rdrAttr->pick_start_path.elements);
  
!     CHECK_AND_FREE ((char *) rdrAttr);
  }
  
  
***************
*** 205,215 ****
  PEXSCAttributes		*scAttr;
  
  {
!     FreeIfNotNull ((char *) scAttr->start_path.elements);
!     FreeIfNotNull ((char *) scAttr->normal.pairs);
!     FreeIfNotNull ((char *) scAttr->inverted.pairs);
  
!     PEXFreeBuf ((char *) scAttr);
  }
  
  
--- 205,215 ----
  PEXSCAttributes		*scAttr;
  
  {
!     CHECK_AND_FREE ((char *) scAttr->start_path.elements);
!     CHECK_AND_FREE ((char *) scAttr->normal.pairs);
!     CHECK_AND_FREE ((char *) scAttr->inverted.pairs);
  
!     CHECK_AND_FREE ((char *) scAttr);
  }
  
  
***************
*** 223,231 ****
  
  
      for (i = 0; i < numPaths; i++)
! 	PEXFreeBuf ((char *) paths[i].elements);
  
!     PEXFreeBuf ((char *) paths);
  }
  
  
--- 223,231 ----
  
  
      for (i = 0; i < numPaths; i++)
! 	CHECK_AND_FREE ((char *) paths[i].elements);
  
!     CHECK_AND_FREE ((char *) paths);
  }
  
  
***************
*** 246,252 ****
  	PEXPatternEntry *entries = (PEXPatternEntry *) tableEntries;
  	
  	for (i = 0; i < numTableEntries; i++)
! 	    PEXFreeBuf ((char *) entries[i].colors);
  	break;
      }
      
--- 246,252 ----
  	PEXPatternEntry *entries = (PEXPatternEntry *) tableEntries;
  	
  	for (i = 0; i < numTableEntries; i++)
! 	    CHECK_AND_FREE ((char *) entries[i].colors);
  	break;
      }
      
***************
*** 255,261 ****
  	PEXTextFontEntry *entries = (PEXTextFontEntry *) tableEntries;
  	
  	for (i = 0; i < numTableEntries; i++)
! 	    PEXFreeBuf ((char *) entries[i].fonts);
  	break;
      }
  
--- 255,261 ----
  	PEXTextFontEntry *entries = (PEXTextFontEntry *) tableEntries;
  	
  	for (i = 0; i < numTableEntries; i++)
! 	    CHECK_AND_FREE ((char *) entries[i].fonts);
  	break;
      }
  
***************
*** 279,286 ****
  INPUT PEXWorkstationAttributes	*wksAttr;
  
  {
!     FreeIfNotNull ((char *) wksAttr->defined_views.views);
!     FreeIfNotNull ((char *) wksAttr->posted_structures.structures);
  
!     PEXFreeBuf ((char *) wksAttr);
  }
--- 279,543 ----
  INPUT PEXWorkstationAttributes	*wksAttr;
  
  {
!     CHECK_AND_FREE ((char *) wksAttr->defined_views.views);
!     CHECK_AND_FREE ((char *) wksAttr->posted_structures.structures);
  
!     CHECK_AND_FREE ((char *) wksAttr);
! }
! 
! 
! void PEXFreeOCData (count, oc_data)
! 
! INPUT unsigned long	count;
! INPUT PEXOCData		*oc_data;
! 
! {
!     PEXOCData		*oc = oc_data;
!     PEXEncodedTextData 	*encText;
!     PEXListOfVertex	*plset;
!     PEXListOfCoord	*fillset;
!     PEXListOfCoord2D	*fillset2D;
!     PEXListOfVertex	*fillsetdata;
!     PEXConnectivityData	*pCon;
!     PEXListOfTrimCurve	*pTrim;
!     int 		i, j, k;
! 
! 
!     for (i = 0; i < count; i++, oc++)
!     {
! 	switch (oc->oc_type)
! 	{
! 	case PEXOCModelClipVolume:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.SetModelClipVolume.half_spaces);
! 	    break;
! 
! 	case PEXOCModelClipVolume2D:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.SetModelClipVolume2D.half_spaces);
! 	    break;
! 
! 	case PEXOCLightSourceState:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.SetLightSourceState.enable);
! 	    CHECK_AND_FREE ((char *) oc->data.SetLightSourceState.disable);
! 	    break;
! 
! 	case PEXOCParaSurfCharacteristics:
! 
! 	    if (oc->data.SetParaSurfCharacteristics.psc_type ==
! 		PEXPSCMCLevelCurves ||
!                 oc->data.SetParaSurfCharacteristics.psc_type ==
! 		PEXPSCWCLevelCurves)
! 		CHECK_AND_FREE ((char *) oc->data.SetParaSurfCharacteristics.characteristics.level_curves.parameters);
! 	    break;
! 
! 	case PEXOCAddToNameSet:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.AddToNameSet.names);
! 	    break;
! 
! 	case PEXOCRemoveFromNameSet:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.RemoveFromNameSet.names);
! 	    break;
! 
! 	case PEXOCApplicationData:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.ApplicationData.data);
! 	    break;
! 
! 	case PEXOCGSE:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.GSE.data);
! 	    break;
! 
! 	case PEXOCMarkers:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.Markers.points);
! 	    break;
! 
! 	case PEXOCMarkers2D:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.Markers2D.points);
! 	    break;
! 
! 	case PEXOCPolyline:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.Polyline.points);
! 	    break;
! 
! 	case PEXOCPolyline2D:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.Polyline2D.points);
! 	    break;
! 
! 	case PEXOCText:
! 
! 	    encText = oc->data.EncodedText.encoded_text;
! 	    for (j = 0; j < oc->data.EncodedText.count; j++, encText++)
! 		CHECK_AND_FREE ((char *) encText->ch);
! 	    CHECK_AND_FREE ((char *) oc->data.EncodedText.encoded_text);
! 	    break;
! 
! 	case PEXOCText2D:
! 
! 	    encText = oc->data.EncodedText2D.encoded_text;
! 	    for (j = 0; j < oc->data.EncodedText2D.count; j++, encText++)
! 		CHECK_AND_FREE ((char *) encText->ch);
! 	    CHECK_AND_FREE ((char *) oc->data.EncodedText2D.encoded_text);
! 	    break;
! 
! 	case PEXOCAnnotationText:
! 
! 	    encText = oc->data.EncodedAnnoText.encoded_text;
! 	    for (j = 0; j < oc->data.EncodedAnnoText.count; j++, encText++)
! 		CHECK_AND_FREE ((char *) encText->ch);
! 	    CHECK_AND_FREE ((char *) oc->data.EncodedAnnoText.encoded_text);
! 	    break;
! 
! 	case PEXOCAnnotationText2D:
! 
! 	    encText = oc->data.EncodedAnnoText2D.encoded_text;
! 	    for (j = 0; j < oc->data.EncodedAnnoText2D.count; j++, encText++)
! 		CHECK_AND_FREE ((char *) encText->ch);
! 	    CHECK_AND_FREE ((char *) oc->data.EncodedAnnoText2D.encoded_text);
! 	    break;
! 
! 	case PEXOCPolylineSetWithData:
! 
! 	    plset = oc->data.PolylineSetWithData.vertex_lists;
! 	    for (j = 0; j < oc->data.PolylineSetWithData.count; j++, plset++)
! 	    {
! 		CHECK_AND_FREE ((char *) plset->vertices.no_data);
! 	    }
! 	    CHECK_AND_FREE ((char *) oc->data.PolylineSetWithData.vertex_lists);
! 	    break;
! 
! 	case PEXOCNURBCurve:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.NURBCurve.knots);
! 	    CHECK_AND_FREE ((char *) oc->data.NURBCurve.points.point);
! 	    break;
! 
! 	case PEXOCFillArea:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.FillArea.points);
! 	    break;
! 
! 	case PEXOCFillArea2D:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.FillArea2D.points);
! 	    break;
! 
! 	case PEXOCFillAreaWithData:
! 
! 	    CHECK_AND_FREE ((char *)
! 		oc->data.FillAreaWithData.vertices.no_data);
! 	    break;
! 
! 	case PEXOCFillAreaSet:
! 
! 	    fillset = oc->data.FillAreaSet.point_lists;
! 	    for (j = 0; j < oc->data.FillAreaSet.count; j++, fillset++)
! 	    {
! 		CHECK_AND_FREE ((char *) fillset->points);
! 	    }
! 	    CHECK_AND_FREE ((char *) oc->data.FillAreaSet.point_lists);
! 	    break;
! 
! 	case PEXOCFillAreaSet2D:
! 
! 	    fillset2D = oc->data.FillAreaSet2D.point_lists;
! 	    for (j = 0; j < oc->data.FillAreaSet2D.count; j++, fillset2D++)
! 	    {
! 		CHECK_AND_FREE ((char *) fillset2D->points);
! 	    }
! 	    CHECK_AND_FREE ((char *) oc->data.FillAreaSet2D.point_lists);
! 	    break;
! 
! 	case PEXOCFillAreaSetWithData:
! 
! 	    fillsetdata = oc->data.FillAreaSetWithData.vertex_lists;
! 	    for (j = 0; j < oc->data.FillAreaSetWithData.count;
! 		j++, fillsetdata++)
! 	    {
! 		CHECK_AND_FREE ((char *) fillsetdata->vertices.no_data);
! 	    }
! 	    CHECK_AND_FREE ((char *) oc->data.FillAreaSetWithData.vertex_lists);
! 	    break;
! 
! 	case PEXOCTriangleStrip:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.TriangleStrip.facet_data.index);
! 	    CHECK_AND_FREE ((char *) oc-> data.TriangleStrip.vertices.no_data);
! 	    break;
! 
! 	case PEXOCQuadrilateralMesh:
! 
! 	    CHECK_AND_FREE ((char *)
! 		oc->data.QuadrilateralMesh.facet_data.index);
! 	    CHECK_AND_FREE ((char *)
! 		oc->data.QuadrilateralMesh.vertices.no_data);
! 	    break;
! 
! 	case PEXOCSetOfFillAreaSets:
! 
! 	    CHECK_AND_FREE ((char *)
! 		oc->data.SetOfFillAreaSets.facet_data.index);
! 	    CHECK_AND_FREE ((char *)
! 		oc->data.SetOfFillAreaSets.vertices.no_data);
! 	    CHECK_AND_FREE ((char *) oc->data.SetOfFillAreaSets.edge_flags);
! 
! 	    pCon = oc->data.SetOfFillAreaSets.connectivity;
! 	    for (j = 0; j < oc->data.SetOfFillAreaSets.set_count; j++, pCon++)
! 	    {
! 		for (k = 0; k < (int) pCon->count; k++)
! 		    CHECK_AND_FREE ((char *) pCon->lists[k].shorts);
! 		CHECK_AND_FREE ((char *) pCon->lists);
! 	    }
! 	    CHECK_AND_FREE ((char *) oc->data.SetOfFillAreaSets.connectivity);
! 	    break;
! 
! 	case PEXOCNURBSurface:
! 	   
! 	    CHECK_AND_FREE ((char *) oc->data.NURBSurface.uknots);
! 	    CHECK_AND_FREE ((char *) oc->data.NURBSurface.vknots);
! 	    CHECK_AND_FREE ((char *) oc->data.NURBSurface.points.point);
! 	    
! 	    pTrim = oc->data.NURBSurface.trim_curves;
! 	    for (j = 0; j < oc->data.NURBSurface.curve_count; j++, pTrim++)
! 	    {
! 		for (k = 0; k < (int) pTrim->count; k++)
! 		{
! 		    CHECK_AND_FREE ((char *) pTrim->curves[k].knots.floats);
! 		    CHECK_AND_FREE ((char *)
! 			pTrim->curves[k].control_points.point);
! 		}
! 		CHECK_AND_FREE ((char *) pTrim->curves);
! 	    }
! 	    CHECK_AND_FREE ((char *) oc->data.NURBSurface.trim_curves);
! 	    break;
! 
! 	case PEXOCCellArray:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.CellArray.color_indices);
! 	    break;
! 
! 	case PEXOCCellArray2D:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.CellArray2D.color_indices);
! 	    break;
! 
! 	case PEXOCExtendedCellArray:
! 
! 	    CHECK_AND_FREE ((char *) oc->data.ExtendedCellArray.colors.indexed);
! 	    break;
! 
! 	default:
! 	    break;
! 	}
!     }
! 
!     CHECK_AND_FREE ((char *) oc_data);
  }
*** /tmp/da19606	Tue Jun 30 16:37:04 1992
--- extensions/lib/PEXlib/pl_global_def.h	Fri Jun 12 12:43:15 1992
***************
*** 1,4 ****
! /* $XConsortium: pl_global_def.h,v 1.2 92/05/20 21:24:23 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
--- 1,4 ----
! /* $XConsortium: pl_global_def.h,v 1.3 92/06/12 12:47:00 mor Exp $ */
  
  /************************************************************************
  Copyright 1987,1991,1992 by Digital Equipment Corporation, Maynard,
***************
*** 25,65 ****
  
  *************************************************************************/
  
  PEXDisplayInfo 	*PEXDisplayInfoHeader = NULL;
  
- PEXPickPath	*PickCache = NULL;
- unsigned int	PickCacheSize = 0;
- int		PickCacheInUse = 0;
  
! char	*pexErrorList[(PEXMaxError + 1)] = {
! /* ColorType */
      "PEXColorTypeError, specified color type not supported",
! /* RendererState */
      "PEXRendererStateError, renderer not in proper state for operation",
! /* FloatingPointFormat */
      "PEXFloatingPointFormatError, specified fp format not supported",
! /* Label */
      "PEXLabelError, specified label not in structure",
! /* LookupTable */
      "LookupTableError, specified lookup table ID invalid",
! /* NameSet */
      "PEXNameSetError, specified nameset ID invalid",
! /* Path */
      "PEXPathError, illegal or invalid values in path",
! /* PEXFont */
      "PEXFontError, specified font ID invalid",
! /* PhigsWKS */
      "PhigsWKSError, specified PHIGS workstation ID invalid", 
! /* PickMeasure */
      "PEXPickMeasureError, specified pick measure ID invalid",
! /* PipelineContext */
      "PEXPipelineContextError, specified pipeline context ID invalid",
! /* Renderer */
      "PEXRendererError, specified renderer ID invalid",
! /* SearchContext */
      "PEXSearchContextError, specified search context ID invalid",
! /* Structure */
      "PEXStructureError, specified structure ID invalid",
! /* OutputCommand */
      "PEXOutputCommandError, illegal value in output commands",
  };
--- 25,422 ----
  
  *************************************************************************/
  
+ /*
+  * Header to linked list of open displays.
+  */
+ 
  PEXDisplayInfo 	*PEXDisplayInfoHeader = NULL;
  
  
! /*
!  * Pick path cache.
!  */
! 
! PEXPickPath	*PEXPickCache = NULL;
! unsigned int	PEXPickCacheSize = 0;
! int		PEXPickCacheInUse = 0;
! 
! 
! /*
!  * PEX error messages.
!  */
! 
! char *PEXErrorList[(PEXMaxError + 1)] = {
!     /* ColorType */
      "PEXColorTypeError, specified color type not supported",
!     /* RendererState */
      "PEXRendererStateError, renderer not in proper state for operation",
!     /* FloatingPointFormat */
      "PEXFloatingPointFormatError, specified fp format not supported",
!     /* Label */
      "PEXLabelError, specified label not in structure",
!     /* LookupTable */
      "LookupTableError, specified lookup table ID invalid",
!     /* NameSet */
      "PEXNameSetError, specified nameset ID invalid",
!     /* Path */
      "PEXPathError, illegal or invalid values in path",
!     /* PEXFont */
      "PEXFontError, specified font ID invalid",
!     /* PhigsWKS */
      "PhigsWKSError, specified PHIGS workstation ID invalid", 
!     /* PickMeasure */
      "PEXPickMeasureError, specified pick measure ID invalid",
!     /* PipelineContext */
      "PEXPipelineContextError, specified pipeline context ID invalid",
!     /* Renderer */
      "PEXRendererError, specified renderer ID invalid",
!     /* SearchContext */
      "PEXSearchContextError, specified search context ID invalid",
!     /* Structure */
      "PEXStructureError, specified structure ID invalid",
!     /* OutputCommand */
      "PEXOutputCommandError, illegal value in output commands",
  };
+ 
+ 
+ /*
+  * Encode OC function table.
+  */
+ 
+ extern void _PEXEncodeEnumType();
+ extern void _PEXEncodeTableIndex();
+ extern void _PEXEncodeColor();
+ extern void _PEXEncodeFloat();
+ extern void _PEXEncodeCARD16();
+ extern void _PEXEncodeVector2D();
+ extern void _PEXEncodeTextAlignment();
+ extern void _PEXEncodeCurveApprox();
+ extern void _PEXEncodeReflectionAttr();
+ extern void _PEXEncodeSurfaceApprox();
+ extern void _PEXEncodeCullMode();
+ extern void _PEXEncodeSwitch();
+ extern void _PEXEncodePatternSize();
+ extern void _PEXEncodePatternAttr2D();
+ extern void _PEXEncodePatternAttr();
+ extern void _PEXEncodeASF();
+ extern void _PEXEncodeLocalTransform();
+ extern void _PEXEncodeLocalTransform2D();
+ extern void _PEXEncodeGlobalTransform();
+ extern void _PEXEncodeGlobalTransform2D();
+ extern void _PEXEncodeModelClipVolume();
+ extern void _PEXEncodeModelClipVolume2D();
+ extern void _PEXEncodeRestoreModelClip();
+ extern void _PEXEncodeLightSourceState();
+ extern void _PEXEncodeID();
+ extern void _PEXEncodePSC();
+ extern void _PEXEncodeNameSet();
+ extern void _PEXEncodeExecuteStructure();
+ extern void _PEXEncodeLabel();
+ extern void _PEXEncodeApplicationData();
+ extern void _PEXEncodeGSE();
+ extern void _PEXEncodeMarkers();
+ extern void _PEXEncodePolyline();
+ extern void _PEXEncodeMarkers2D();
+ extern void _PEXEncodePolyline2D();
+ extern void _PEXEncodeText();
+ extern void _PEXEncodeText2D();
+ extern void _PEXEncodeAnnoText();
+ extern void _PEXEncodeAnnoText2D();
+ extern void _PEXEncodePolylineSet();
+ extern void _PEXEncodeNURBCurve();
+ extern void _PEXEncodeFillArea();
+ extern void _PEXEncodeFillArea2D();
+ extern void _PEXEncodeFillAreaWithData();
+ extern void _PEXEncodeFillAreaSet();
+ extern void _PEXEncodeFillAreaSet2D();
+ extern void _PEXEncodeFillAreaSetWithData();
+ extern void _PEXEncodeTriangleStrip();
+ extern void _PEXEncodeQuadMesh();
+ extern void _PEXEncodeSOFA();
+ extern void _PEXEncodeNURBSurface();
+ extern void _PEXEncodeCellArray();
+ extern void _PEXEncodeCellArray2D();
+ extern void _PEXEncodeExtendedCellArray();
+ extern void _PEXEncodeGDP();
+ extern void _PEXEncodeGDP2D();
+ extern void _PEXEncodeNoop();
+ 
+ void (*(PEX_encode_oc_funcs[]))() = {
+ NULL,				/* DUMMY		           0 */
+ _PEXEncodeEnumType,		/* PEXOCMarkerType                 1 */
+ _PEXEncodeFloat,		/* PEXOCMarkerScale                2 */
+ _PEXEncodeTableIndex,		/* PEXOCMarkerColorIndex           3 */
+ _PEXEncodeColor,		/* PEXOCMarkerColor                4 */
+ _PEXEncodeTableIndex,		/* PEXOCMarkerBundleIndex          5 */
+ _PEXEncodeTableIndex,		/* PEXOCTextFontIndex              6 */
+ _PEXEncodeCARD16,		/* PEXOCTextPrecision              7 */
+ _PEXEncodeFloat,		/* PEXOCCharExpansion              8 */
+ _PEXEncodeFloat,		/* PEXOCCharSpacing                9 */
+ _PEXEncodeTableIndex,		/* PEXOCTextColorIndex             10 */
+ _PEXEncodeColor,		/* PEXOCTextColor                  11 */
+ _PEXEncodeFloat,		/* PEXOCCharHeight                 12 */
+ _PEXEncodeVector2D,		/* PEXOCCharUpVector               13 */
+ _PEXEncodeCARD16,		/* PEXOCTextPath                   14 */
+ _PEXEncodeTextAlignment,	/* PEXOCTextAlignment              15 */
+ _PEXEncodeFloat,		/* PEXOCATextHeight                16 */
+ _PEXEncodeVector2D,		/* PEXOCATextUpVector              17 */
+ _PEXEncodeCARD16,		/* PEXOCATextPath                  18 */
+ _PEXEncodeTextAlignment,	/* PEXOCATextAlignment             19 */
+ _PEXEncodeEnumType,		/* PEXOCATextStyle                 20 */
+ _PEXEncodeTableIndex,		/* PEXOCTextBundleIndex            21 */
+ _PEXEncodeEnumType,		/* PEXOCLineType                   22 */
+ _PEXEncodeFloat,		/* PEXOCLineWidth                  23 */
+ _PEXEncodeTableIndex,		/* PEXOCLineColorIndex             24 */
+ _PEXEncodeColor,		/* PEXOCLineColor                  25 */
+ _PEXEncodeCurveApprox,		/* PEXOCCurveApprox                26 */
+ _PEXEncodeEnumType,		/* PEXOCPolylineInterpMethod       27 */
+ _PEXEncodeTableIndex,		/* PEXOCLineBundleIndex            28 */
+ _PEXEncodeEnumType,		/* PEXOCInteriorStyle              29 */
+ _PEXEncodeTableIndex,		/* PEXOCInteriorStyleIndex         30 */
+ _PEXEncodeTableIndex,		/* PEXOCSurfaceColorIndex          31 */
+ _PEXEncodeColor,		/* PEXOCSurfaceColor               32 */
+ _PEXEncodeReflectionAttr,	/* PEXOCReflectionAttributes       33 */
+ _PEXEncodeEnumType,		/* PEXOCReflectionModel            34 */
+ _PEXEncodeEnumType,		/* PEXOCSurfaceInterpMethod        35 */
+ _PEXEncodeEnumType,		/* PEXOCBFInteriorStyle            36 */
+ _PEXEncodeTableIndex,		/* PEXOCBFInteriorStyleIndex       37 */
+ _PEXEncodeTableIndex,		/* PEXOCBFSurfaceColorIndex        38 */
+ _PEXEncodeColor,		/* PEXOCBFSurfaceColor             39 */
+ _PEXEncodeReflectionAttr,	/* PEXOCBFReflectionAttributes     40 */
+ _PEXEncodeEnumType,		/* PEXOCBFReflectionModel          41 */
+ _PEXEncodeEnumType,		/* PEXOCBFSurfaceInterpMethod      42 */
+ _PEXEncodeSurfaceApprox,	/* PEXOCSurfaceApprox              43 */
+ _PEXEncodeCullMode,		/* PEXOCFacetCullingMode           44 */
+ _PEXEncodeSwitch,		/* PEXOCFacetDistinguishFlag       45 */
+ _PEXEncodePatternSize,		/* PEXOCPatternSize                46 */
+ _PEXEncodePatternAttr2D,	/* PEXOCPatternAttributes2D        47 */
+ _PEXEncodePatternAttr,		/* PEXOCPatternAttributes          48 */
+ _PEXEncodeTableIndex,		/* PEXOCInteriorBundleIndex        49 */
+ _PEXEncodeSwitch,		/* PEXOCSurfaceEdgeFlag            50 */
+ _PEXEncodeEnumType,		/* PEXOCSurfaceEdgeType            51 */
+ _PEXEncodeFloat,		/* PEXOCSurfaceEdgeWidth           52 */
+ _PEXEncodeTableIndex,		/* PEXOCSurfaceEdgeColorIndex      53 */
+ _PEXEncodeColor,		/* PEXOCSurfaceEdgeColor           54 */
+ _PEXEncodeTableIndex,		/* PEXOCEdgeBundleIndex            55 */
+ _PEXEncodeASF,			/* PEXOCIndividualASF              56 */
+ _PEXEncodeLocalTransform,	/* PEXOCLocalTransform             57 */
+ _PEXEncodeLocalTransform2D,	/* PEXOCLocalTransform2D           58 */
+ _PEXEncodeGlobalTransform,	/* PEXOCGlobalTransform            59 */
+ _PEXEncodeGlobalTransform2D,	/* PEXOCGlobalTransform2D          60 */
+ _PEXEncodeSwitch,		/* PEXOCModelClipFlag              61 */
+ _PEXEncodeModelClipVolume,	/* PEXOCModelClipVolume            62 */
+ _PEXEncodeModelClipVolume2D,	/* PEXOCModelClipVolume2D          63 */
+ _PEXEncodeRestoreModelClip,	/* PEXOCRestoreModelClipVolume     64 */
+ _PEXEncodeTableIndex,		/* PEXOCViewIndex                  65 */
+ _PEXEncodeLightSourceState,	/* PEXOCLightSourceState           66 */
+ _PEXEncodeTableIndex,		/* PEXOCDepthCueIndex              67 */
+ _PEXEncodeID,			/* PEXOCPickID                     68 */
+ _PEXEncodeID,			/* PEXOCHLHSRID                    69 */
+ _PEXEncodeTableIndex,		/* PEXOCColorApproxIndex           70 */
+ _PEXEncodeEnumType,		/* PEXOCRenderingColorModel        71 */
+ _PEXEncodePSC,			/* PEXOCParaSurfCharacteristics    72 */
+ _PEXEncodeNameSet,		/* PEXOCAddToNameSet               73 */
+ _PEXEncodeNameSet,		/* PEXOCRemoveFromNameSet          74 */
+ _PEXEncodeExecuteStructure,	/* PEXOCExecuteStructure           75 */
+ _PEXEncodeLabel,		/* PEXOCLabel                      76 */
+ _PEXEncodeApplicationData,	/* PEXOCApplicationData            77 */
+ _PEXEncodeGSE,			/* PEXOCGSE                        78 */
+ _PEXEncodeMarkers,		/* PEXOCMarkers                    79 */
+ _PEXEncodeMarkers2D,		/* PEXOCMarkers2D                  80 */
+ _PEXEncodeText,			/* PEXOCText                       81 */
+ _PEXEncodeText2D,		/* PEXOCText2D                     82 */
+ _PEXEncodeAnnoText,		/* PEXOCAnnotationText             83 */
+ _PEXEncodeAnnoText2D,		/* PEXOCAnnotationText2D           84 */
+ _PEXEncodePolyline,		/* PEXOCPolyline                   85 */
+ _PEXEncodePolyline2D,		/* PEXOCPolyline2D                 86 */
+ _PEXEncodePolylineSet,		/* PEXOCPolylineSetWithData        87 */
+ _PEXEncodeNURBCurve,		/* PEXOCNURBCurve                  88 */
+ _PEXEncodeFillArea,		/* PEXOCFillArea                   89 */
+ _PEXEncodeFillArea2D,		/* PEXOCFillArea2D                 90 */
+ _PEXEncodeFillAreaWithData,	/* PEXOCFillAreaWithData           91 */
+ _PEXEncodeFillAreaSet,		/* PEXOCFillAreaSet                92 */
+ _PEXEncodeFillAreaSet2D,	/* PEXOCFillAreaSet2D              93 */
+ _PEXEncodeFillAreaSetWithData,	/* PEXOCFillAreaSetWithData        94 */
+ _PEXEncodeTriangleStrip,	/* PEXOCTriangleStrip              95 */
+ _PEXEncodeQuadMesh,		/* PEXOCQuadrilateralMesh          96 */
+ _PEXEncodeSOFA,			/* PEXOCSetOfFillAreaSets          97 */
+ _PEXEncodeNURBSurface,		/* PEXOCNURBSurface                98 */
+ _PEXEncodeCellArray,		/* PEXOCCellArray                  99 */
+ _PEXEncodeCellArray2D,		/* PEXOCCellArray2D                100 */
+ _PEXEncodeExtendedCellArray,	/* PEXOCExtendedCellArray          101 */
+ _PEXEncodeGDP,			/* PEXOCGDP                        102 */
+ _PEXEncodeGDP2D,		/* PEXOCGDP2D                      103 */
+ _PEXEncodeNoop			/* PEXOCNoop                       104 */
+ };
+ 
+ 
+ /*
+  * Decode OC function table.
+  */
+ 
+ extern void _PEXDecodeEnumType();
+ extern void _PEXDecodeTableIndex();
+ extern void _PEXDecodeColor();
+ extern void _PEXDecodeFloat();
+ extern void _PEXDecodeCARD16();
+ extern void _PEXDecodeVector2D();
+ extern void _PEXDecodeTextAlignment();
+ extern void _PEXDecodeCurveApprox();
+ extern void _PEXDecodeReflectionAttr();
+ extern void _PEXDecodeSurfaceApprox();
+ extern void _PEXDecodeCullMode();
+ extern void _PEXDecodeSwitch();
+ extern void _PEXDecodePatternSize();
+ extern void _PEXDecodePatternAttr2D();
+ extern void _PEXDecodePatternAttr();
+ extern void _PEXDecodeASF();
+ extern void _PEXDecodeLocalTransform();
+ extern void _PEXDecodeLocalTransform2D();
+ extern void _PEXDecodeGlobalTransform();
+ extern void _PEXDecodeGlobalTransform2D();
+ extern void _PEXDecodeModelClipVolume();
+ extern void _PEXDecodeModelClipVolume2D();
+ extern void _PEXDecodeRestoreModelClip();
+ extern void _PEXDecodeLightSourceState();
+ extern void _PEXDecodeID();
+ extern void _PEXDecodePSC();
+ extern void _PEXDecodeNameSet();
+ extern void _PEXDecodeExecuteStructure();
+ extern void _PEXDecodeLabel();
+ extern void _PEXDecodeApplicationData();
+ extern void _PEXDecodeGSE();
+ extern void _PEXDecodeMarkers();
+ extern void _PEXDecodePolyline();
+ extern void _PEXDecodeMarkers2D();
+ extern void _PEXDecodePolyline2D();
+ extern void _PEXDecodeText();
+ extern void _PEXDecodeText2D();
+ extern void _PEXDecodeAnnoText();
+ extern void _PEXDecodeAnnoText2D();
+ extern void _PEXDecodePolylineSet();
+ extern void _PEXDecodeNURBCurve();
+ extern void _PEXDecodeFillArea();
+ extern void _PEXDecodeFillArea2D();
+ extern void _PEXDecodeFillAreaWithData();
+ extern void _PEXDecodeFillAreaSet();
+ extern void _PEXDecodeFillAreaSet2D();
+ extern void _PEXDecodeFillAreaSetWithData();
+ extern void _PEXDecodeTriangleStrip();
+ extern void _PEXDecodeQuadMesh();
+ extern void _PEXDecodeSOFA();
+ extern void _PEXDecodeNURBSurface();
+ extern void _PEXDecodeCellArray();
+ extern void _PEXDecodeCellArray2D();
+ extern void _PEXDecodeExtendedCellArray();
+ extern void _PEXDecodeGDP();
+ extern void _PEXDecodeGDP2D();
+ extern void _PEXDecodeNoop();
+ 
+ void (*(PEX_decode_oc_funcs[]))() = {
+ NULL,				/* DUMMY		           0 */
+ _PEXDecodeEnumType,		/* PEXOCMarkerType                 1 */
+ _PEXDecodeFloat,		/* PEXOCMarkerScale                2 */
+ _PEXDecodeTableIndex,		/* PEXOCMarkerColorIndex           3 */
+ _PEXDecodeColor,		/* PEXOCMarkerColor                4 */
+ _PEXDecodeTableIndex,		/* PEXOCMarkerBundleIndex          5 */
+ _PEXDecodeTableIndex,		/* PEXOCTextFontIndex              6 */
+ _PEXDecodeCARD16,		/* PEXOCTextPrecision              7 */
+ _PEXDecodeFloat,		/* PEXOCCharExpansion              8 */
+ _PEXDecodeFloat,		/* PEXOCCharSpacing                9 */
+ _PEXDecodeTableIndex,		/* PEXOCTextColorIndex             10 */
+ _PEXDecodeColor,		/* PEXOCTextColor                  11 */
+ _PEXDecodeFloat,		/* PEXOCCharHeight                 12 */
+ _PEXDecodeVector2D,		/* PEXOCCharUpVector               13 */
+ _PEXDecodeCARD16,		/* PEXOCTextPath                   14 */
+ _PEXDecodeTextAlignment,	/* PEXOCTextAlignment              15 */
+ _PEXDecodeFloat,		/* PEXOCATextHeight                16 */
+ _PEXDecodeVector2D,		/* PEXOCATextUpVector              17 */
+ _PEXDecodeCARD16,		/* PEXOCATextPath                  18 */
+ _PEXDecodeTextAlignment,	/* PEXOCATextAlignment             19 */
+ _PEXDecodeEnumType,		/* PEXOCATextStyle                 20 */
+ _PEXDecodeTableIndex,		/* PEXOCTextBundleIndex            21 */
+ _PEXDecodeEnumType,		/* PEXOCLineType                   22 */
+ _PEXDecodeFloat,		/* PEXOCLineWidth                  23 */
+ _PEXDecodeTableIndex,		/* PEXOCLineColorIndex             24 */
+ _PEXDecodeColor,		/* PEXOCLineColor                  25 */
+ _PEXDecodeCurveApprox,		/* PEXOCCurveApprox                26 */
+ _PEXDecodeEnumType,		/* PEXOCPolylineInterpMethod       27 */
+ _PEXDecodeTableIndex,		/* PEXOCLineBundleIndex            28 */
+ _PEXDecodeEnumType,		/* PEXOCInteriorStyle              29 */
+ _PEXDecodeTableIndex,		/* PEXOCInteriorStyleIndex         30 */
+ _PEXDecodeTableIndex,		/* PEXOCSurfaceColorIndex          31 */
+ _PEXDecodeColor,		/* PEXOCSurfaceColor               32 */
+ _PEXDecodeReflectionAttr,	/* PEXOCReflectionAttributes       33 */
+ _PEXDecodeEnumType,		/* PEXOCReflectionModel            34 */
+ _PEXDecodeEnumType,		/* PEXOCSurfaceInterpMethod        35 */
+ _PEXDecodeEnumType,		/* PEXOCBFInteriorStyle            36 */
+ _PEXDecodeTableIndex,		/* PEXOCBFInteriorStyleIndex       37 */
+ _PEXDecodeTableIndex,		/* PEXOCBFSurfaceColorIndex        38 */
+ _PEXDecodeColor,		/* PEXOCBFSurfaceColor             39 */
+ _PEXDecodeReflectionAttr,	/* PEXOCBFReflectionAttributes     40 */
+ _PEXDecodeEnumType,		/* PEXOCBFReflectionModel          41 */
+ _PEXDecodeEnumType,		/* PEXOCBFSurfaceInterpMethod      42 */
+ _PEXDecodeSurfaceApprox,	/* PEXOCSurfaceApprox              43 */
+ _PEXDecodeCullMode,		/* PEXOCFacetCullingMode           44 */
+ _PEXDecodeSwitch,		/* PEXOCFacetDistinguishFlag       45 */
+ _PEXDecodePatternSize,		/* PEXOCPatternSize                46 */
+ _PEXDecodePatternAttr2D,	/* PEXOCPatternAttributes2D        47 */
+ _PEXDecodePatternAttr,		/* PEXOCPatternAttributes          48 */
+ _PEXDecodeTableIndex,		/* PEXOCInteriorBundleIndex        49 */
+ _PEXDecodeSwitch,		/* PEXOCSurfaceEdgeFlag            50 */
+ _PEXDecodeEnumType,		/* PEXOCSurfaceEdgeType            51 */
+ _PEXDecodeFloat,		/* PEXOCSurfaceEdgeWidth           52 */
+ _PEXDecodeTableIndex,		/* PEXOCSurfaceEdgeColorIndex      53 */
+ _PEXDecodeColor,		/* PEXOCSurfaceEdgeColor           54 */
+ _PEXDecodeTableIndex,		/* PEXOCEdgeBundleIndex            55 */
+ _PEXDecodeASF,			/* PEXOCIndividualASF              56 */
+ _PEXDecodeLocalTransform,	/* PEXOCLocalTransform             57 */
+ _PEXDecodeLocalTransform2D,	/* PEXOCLocalTransform2D           58 */
+ _PEXDecodeGlobalTransform,	/* PEXOCGlobalTransform            59 */
+ _PEXDecodeGlobalTransform2D,	/* PEXOCGlobalTransform2D          60 */
+ _PEXDecodeSwitch,		/* PEXOCModelClipFlag              61 */
+ _PEXDecodeModelClipVolume,	/* PEXOCModelClipVolume            62 */
+ _PEXDecodeModelClipVolume2D,	/* PEXOCModelClipVolume2D          63 */
+ _PEXDecodeRestoreModelClip,	/* PEXOCRestoreModelClipVolume     64 */
+ _PEXDecodeTableIndex,		/* PEXOCViewIndex                  65 */
+ _PEXDecodeLightSourceState,	/* PEXOCLightSourceState           66 */
+ _PEXDecodeTableIndex,		/* PEXOCDepthCueIndex              67 */
+ _PEXDecodeID,			/* PEXOCPickID                     68 */
+ _PEXDecodeID,			/* PEXOCHLHSRID                    69 */
+ _PEXDecodeTableIndex,		/* PEXOCColorApproxIndex           70 */
+ _PEXDecodeEnumType,		/* PEXOCRenderingColorModel        71 */
+ _PEXDecodePSC,			/* PEXOCParaSurfCharacteristics    72 */
+ _PEXDecodeNameSet,		/* PEXOCAddToNameSet               73 */
+ _PEXDecodeNameSet,		/* PEXOCRemoveFromNameSet          74 */
+ _PEXDecodeExecuteStructure,	/* PEXOCExecuteStructure           75 */
+ _PEXDecodeLabel,		/* PEXOCLabel                      76 */
+ _PEXDecodeApplicationData,	/* PEXOCApplicationData            77 */
+ _PEXDecodeGSE,			/* PEXOCGSE                        78 */
+ _PEXDecodeMarkers,		/* PEXOCMarkers                    79 */
+ _PEXDecodeMarkers2D,		/* PEXOCMarkers2D                  80 */
+ _PEXDecodeText,			/* PEXOCText                       81 */
+ _PEXDecodeText2D,		/* PEXOCText2D                     82 */
+ _PEXDecodeAnnoText,		/* PEXOCAnnotationText             83 */
+ _PEXDecodeAnnoText2D,		/* PEXOCAnnotationText2D           84 */
+ _PEXDecodePolyline,		/* PEXOCPolyline                   85 */
+ _PEXDecodePolyline2D,		/* PEXOCPolyline2D                 86 */
+ _PEXDecodePolylineSet,		/* PEXOCPolylineSetWithData        87 */
+ _PEXDecodeNURBCurve,		/* PEXOCNURBCurve                  88 */
+ _PEXDecodeFillArea,		/* PEXOCFillArea                   89 */
+ _PEXDecodeFillArea2D,		/* PEXOCFillArea2D                 90 */
+ _PEXDecodeFillAreaWithData,	/* PEXOCFillAreaWithData           91 */
+ _PEXDecodeFillAreaSet,		/* PEXOCFillAreaSet                92 */
+ _PEXDecodeFillAreaSet2D,	/* PEXOCFillAreaSet2D              93 */
+ _PEXDecodeFillAreaSetWithData,	/* PEXOCFillAreaSetWithData        94 */
+ _PEXDecodeTriangleStrip,	/* PEXOCTriangleStrip              95 */
+ _PEXDecodeQuadMesh,		/* PEXOCQuadrilateralMesh          96 */
+ _PEXDecodeSOFA,			/* PEXOCSetOfFillAreaSets          97 */
+ _PEXDecodeNURBSurface,		/* PEXOCNURBSurface                98 */
+ _PEXDecodeCellArray,		/* PEXOCCellArray                  99 */
+ _PEXDecodeCellArray2D,		/* PEXOCCellArray2D                100 */
+ _PEXDecodeExtendedCellArray,	/* PEXOCExtendedCellArray          101 */
+ _PEXDecodeGDP,			/* PEXOCGDP                        102 */
+ _PEXDecodeGDP2D,		/* PEXOCGDP2D                      103 */
+ _PEXDecodeNoop			/* PEXOCNoop                       104 */
+ };
+ 

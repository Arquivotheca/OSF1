Path: news.crl.dec.com!pa.dec.com!nobody
Message-Id: <9203031646.AA09953@explain.lcs.mit.edu>
To: fix-trackers@expo.lcs.mit.edu
Subject: (seq: 2389) close XBUG #4905,#4908,#4931: various Xlib/Ximp bugs
Date: Tue, 03 Mar 92 11:46:10 EST
From: Bob Scheifler <rws@expo.lcs.mit.edu>
Distribution: dec
X-Mailing-List: fix-trackers@expo.lcs.mit.edu
X-Disclaimer: This message originated from a mailing list outside of Digital.
Newsgroups: dec.mail.lists.x.fix-trackers
Approved: news@usenet.pa.dec.com

Subject: Xlib: (Ximp) XGetICValues wrong for Area, AreaNeeded, SpotLocation
### bug number:   4905
### area:         Xlib
### severity:     low
### comments:     

Subject: Xlib: (Ximp) ANSI compile errors
### bug number:   4908
### area:         Xlib
### severity:     low
### comments:     

Subject: Xlib: (Ximp) Error in parsing CT extended segment.
### bug number:   4931
### area:         Xlib
### severity:     low
### comments:     

*** /tmp/d09342	Tue Mar  3 11:20:10 1992
--- lib/X/Ximp/XimpIC.c	Tue Mar  3 11:03:57 1992
***************
*** 1,4 ****
! /* $XConsortium: XimpIC.c,v 1.4 91/10/07 17:48:30 rws Exp $ */
  /******************************************************************
  
                Copyright 1991, by FUJITSU LIMITED
--- 1,4 ----
! /* $XConsortium: XimpIC.c,v 1.5 92/03/03 11:03:14 rws Exp $ */
  /******************************************************************
  
                Copyright 1991, by FUJITSU LIMITED
***************
*** 58,63 ****
--- 58,71 ----
  static void 		_Ximp_AttributesSetL();
  extern void 		_Ximp_IM_SendMessage();
  
+ #if NeedFunctionPrototypes
+ extern Bool _Ximp_XimFilter_Keypress (
+ 	Display *d, 
+ 	Window w, 
+ 	XEvent *ev, 
+ 	XPointer client_data);
+ #endif
+ 
  static XICMethodsRec Ximp_ic_methods = {
  				_Ximp_DestroyIC, 	/* destroy */
  				_Ximp_SetFocus,  	/* set_focus */
***************
*** 75,81 ****
  	Display		*d;
  	Window		w;
  	XEvent		*ev;
! 	XPointer	*client_data;
  {
  	extern Bool	_Ximp_Keypress ();
  
--- 83,89 ----
  	Display		*d;
  	Window		w;
  	XEvent		*ev;
! 	XPointer	client_data;
  {
  	extern Bool	_Ximp_Keypress ();
  
***************
*** 138,144 ****
  				ic->core.focus_window,
  				KeyPress, KeyPress,
  				_Ximp_XimFilter_Keypress,
! 				ic);
  		current_xic = ic;
  	}
  	return((XIC)ic);
--- 146,152 ----
  				ic->core.focus_window,
  				KeyPress, KeyPress,
  				_Ximp_XimFilter_Keypress,
! 				(XPointer)ic);
  		current_xic = ic;
  	}
  	return((XIC)ic);
***************
*** 159,165 ****
  			_XUnregisterFilter (ic->core.im->core.display,
  					ic->core.focus_window,
  					_Ximp_XimFilter_Keypress,
! 					current_xic);
  			current_xic = 0;
  		}
  	}
--- 167,173 ----
  			_XUnregisterFilter (ic->core.im->core.display,
  					ic->core.focus_window,
  					_Ximp_XimFilter_Keypress,
! 					(XPointer)current_xic);
  			current_xic = 0;
  		}
  	}
***************
*** 177,188 ****
  			_XUnregisterFilter (ic->core.im->core.display,
  						ic->core.focus_window,
  						_Ximp_XimFilter_Keypress,
! 						current_xic);
  		_XRegisterFilterByType (ic->core.im->core.display,
  					ic->core.focus_window,
  					KeyPress, KeyPress,
  					_Ximp_XimFilter_Keypress,
! 					ic);
  		current_xic = ic;
  	}
  	return;
--- 185,196 ----
  			_XUnregisterFilter (ic->core.im->core.display,
  						ic->core.focus_window,
  						_Ximp_XimFilter_Keypress,
! 						(XPointer)current_xic);
  		_XRegisterFilterByType (ic->core.im->core.display,
  					ic->core.focus_window,
  					KeyPress, KeyPress,
  					_Ximp_XimFilter_Keypress,
! 					(XPointer)ic);
  		current_xic = ic;
  	}
  	return;
***************
*** 198,204 ****
  			_XUnregisterFilter (ic->core.im->core.display,
  					ic->core.focus_window,
  					_Ximp_XimFilter_Keypress,
! 					current_xic);
  			current_xic = 0;
  		}
  	}
--- 206,212 ----
  			_XUnregisterFilter (ic->core.im->core.display,
  					ic->core.focus_window,
  					_Ximp_XimFilter_Keypress,
! 					(XPointer)current_xic);
  			current_xic = 0;
  		}
  	}
*** /tmp/d09394	Tue Mar  3 11:20:50 1992
--- lib/X/Ximp/XimpLkup.c	Tue Mar  3 11:04:03 1992
***************
*** 1,4 ****
! /* $XConsortium: XimpLkup.c,v 1.5 91/10/07 17:49:03 rws Exp $ */
  /******************************************************************
  
                Copyright 1991, by Sony Corporation
--- 1,4 ----
! /* $XConsortium: XimpLkup.c,v 1.6 92/03/03 11:03:23 rws Exp $ */
  /******************************************************************
  
                Copyright 1991, by Sony Corporation
***************
*** 71,76 ****
--- 71,84 ----
  static void		_Ximp_CallCallback();
  static void		_Ximp_ProcError();
  
+ #if NeedFunctionPrototypes
+ static Bool
+ _Ximp_ResetPredicate(
+ 	Display *d,
+ 	XEvent *ev,
+ 	XPointer parg);
+ #endif
+ 
  typedef struct {
  	Atom type;
  	ICID icid;
***************
*** 78,88 ****
  } XimpResetPredArgRec, *XimpResetPredArg;
  
  static Bool
! _Ximp_ResetPredicate(d, ev, arg)
  Display *d;
  XEvent *ev;
! XimpResetPredArg arg;
  {
  	if (ev->type == ClientMessage) {
  		if (ev->xclient.message_type == arg->type) {
  			if ((ev->xclient.format == 32) &&
--- 86,97 ----
  } XimpResetPredArgRec, *XimpResetPredArg;
  
  static Bool
! _Ximp_ResetPredicate(d, ev, parg)
  Display *d;
  XEvent *ev;
! XPointer parg;
  {
+ 	XimpResetPredArg arg = (XimpResetPredArg)parg;
  	if (ev->type == ClientMessage) {
  		if (ev->xclient.message_type == arg->type) {
  			if ((ev->xclient.format == 32) &&
***************
*** 128,134 ****
  		Arg.icid = ic->ximp_icpart->icid;
  		Arg.owner = ((Ximp_XIM)ic->core.im)->ximp_impart->fe_window;
  		while(_time_flag != 1) {
! 			if( (XCheckIfEvent(ic->core.im->core.display, &event, _Ximp_ResetPredicate, &Arg)) == False) {
  #ifdef XIMP_SIGNAL
  				sleep(1);
  #endif /* XIMP_SIGNAL */
--- 137,143 ----
  		Arg.icid = ic->ximp_icpart->icid;
  		Arg.owner = ((Ximp_XIM)ic->core.im)->ximp_impart->fe_window;
  		while(_time_flag != 1) {
! 			if( (XCheckIfEvent(ic->core.im->core.display, &event, _Ximp_ResetPredicate, (XPointer)&Arg)) == False) {
  #ifdef XIMP_SIGNAL
  				sleep(1);
  #endif /* XIMP_SIGNAL */
***************
*** 198,204 ****
  
  	if (!ct) return(NULL);
  	mb = Xmalloc(length);
! 	_Ximp_cttombs(ic->core.im->core.lcd, ct, strlen(ct), mb, &length, NULL);
  	mb[length] = '\0';
  	return(mb);
  }
--- 207,213 ----
  
  	if (!ct) return(NULL);
  	mb = Xmalloc(length);
! 	_Ximp_cttombs(ic->core.im->core.lcd, ct, strlen((char *)ct), mb, &length, NULL);
  	mb[length] = '\0';
  	return(mb);
  }
***************
*** 213,219 ****
  
  	if (!ct) return(NULL);
  	wc = (wchar_t *)Xmalloc(length * sizeof(wchar_t));
! 	_Ximp_cttowcs(ic->core.im->core.lcd, ct, strlen(ct), wc, &length, NULL);
  	wc[length] = (wchar_t)0;
  	return(wc);
  }
--- 222,228 ----
  
  	if (!ct) return(NULL);
  	wc = (wchar_t *)Xmalloc(length * sizeof(wchar_t));
! 	_Ximp_cttowcs(ic->core.im->core.lcd, ct, strlen((char *)ct), wc, &length, NULL);
  	wc[length] = (wchar_t)0;
  	return(wc);
  }
***************
*** 547,553 ****
  	XChangeProperty(ic->core.im->core.display, ic->core.client_window,
  			((Ximp_XIM)ic->core.im)->ximp_impart->version_id,
  			XA_STRING, 8, PropModeReplace,
! 			XIMP_PROTOCOL_VERSION, strlen(XIMP_PROTOCOL_VERSION));
  	XFlush(ic->core.im->core.display);
  
  	mask = ic->ximp_icpart->proto_mask;
--- 556,562 ----
  	XChangeProperty(ic->core.im->core.display, ic->core.client_window,
  			((Ximp_XIM)ic->core.im)->ximp_impart->version_id,
  			XA_STRING, 8, PropModeReplace,
! 			(unsigned char *)XIMP_PROTOCOL_VERSION, strlen(XIMP_PROTOCOL_VERSION));
  	XFlush(ic->core.im->core.display);
  
  	mask = ic->ximp_icpart->proto_mask;
***************
*** 849,855 ****
  			_Ximp_ProcKeypress (d, w, ev);
  			_Ximp_MakeKeypress (d, w, ev);
  			ev->send_event = False ;
! 			XPutBackEvent(d, ev);
  			break ;
  		case XIMP_CREATE_RETURN:
  			_Ximp_ProcCreateReturn (d, w, ev);
--- 858,864 ----
  			_Ximp_ProcKeypress (d, w, ev);
  			_Ximp_MakeKeypress (d, w, ev);
  			ev->send_event = False ;
! 			XPutBackEvent(d, (XEvent *)ev);
  			break ;
  		case XIMP_CREATE_RETURN:
  			_Ximp_ProcCreateReturn (d, w, ev);
***************
*** 864,870 ****
  			_Ximp_ProcReadProperty (d, w, ev);
  			_Ximp_MakeKeypress (d, w, ev);
  			ev->send_event = False ;
! 			XPutBackEvent(d, ev);
  			break ;
  		case XIMP_ERROR:
  			_Ximp_ProcError (d, w, ev);
--- 873,879 ----
  			_Ximp_ProcReadProperty (d, w, ev);
  			_Ximp_MakeKeypress (d, w, ev);
  			ev->send_event = False ;
! 			XPutBackEvent(d, (XEvent *)ev);
  			break ;
  		case XIMP_ERROR:
  			_Ximp_ProcError (d, w, ev);
***************
*** 891,897 ****
  		_Ximp_ProcReadMessage (d, w, ev);
  		_Ximp_MakeKeypress (d, w, ev);
  		ev->send_event = False ;
! 		XPutBackEvent(d, ev);
          }
  	return (True);
  }
--- 900,906 ----
  		_Ximp_ProcReadMessage (d, w, ev);
  		_Ximp_MakeKeypress (d, w, ev);
  		ev->send_event = False ;
! 		XPutBackEvent(d, (XEvent *)ev);
          }
  	return (True);
  }
*** /tmp/d09578	Tue Mar  3 11:22:27 1992
--- lib/X/Ximp/XimpCT.c	Tue Mar  3 11:03:18 1992
***************
*** 1,4 ****
! /* $XConsortium: XimpCT.c,v 1.2 91/07/30 14:27:12 rws Exp $ */
  /*
   * Copyright 1990, 1991 by TOSHIBA Corp.
   * Copyright 1990, 1991 by SORD Computer Corp.
--- 1,4 ----
! /* $XConsortium: XimpCT.c,v 1.3 92/03/03 11:02:11 rws Exp $ */
  /*
   * Copyright 1990, 1991 by TOSHIBA Corp.
   * Copyright 1990, 1991 by SORD Computer Corp.
***************
*** 213,219 ****
  	    if (ctext_len < 1)
  		return -1;
  
! 	    if (ctext_len > 4 && *ctptr++ == '%') {
  		ch = *ctptr++;
  		if (ch < 0x30 || ch > 0x3f)
  		    goto unknown;
--- 213,219 ----
  	    if (ctext_len < 1)
  		return -1;
  
! 	    if (ctext_len > 4 && *ctptr++ == '/') {
  		ch = *ctptr++;
  		if (ch < 0x30 || ch > 0x3f)
  		    goto unknown;
*** /tmp/d09659	Tue Mar  3 11:23:11 1992
--- lib/X/Ximp/XimpICG.c	Tue Mar  3 11:02:23 1992
***************
*** 1,4 ****
! /* $XConsortium: XimpICG.c,v 1.5 91/10/10 20:08:25 rws Exp $ */
  /******************************************************************
  
      Copyright 1991, by FUJITSU LIMITED.
--- 1,4 ----
! /* $XConsortium: XimpICG.c,v 1.6 92/03/03 11:01:06 rws Exp $ */
  /******************************************************************
  
      Copyright 1991, by FUJITSU LIMITED.
***************
*** 153,158 ****
--- 153,159 ----
  	int		 im_font_flag    = 0;
  	Ximp_PreeditPropRec	*preedit_data;
  	XIMCallback 	*p_callback;
+ 	XPointer	*xptr;
  
  	if(((Ximp_XIM)ic->core.im)->ximp_impart->inputserver) {
  		for(mask = 0, p = vl; p->name != NULL; p++) {
***************
*** 209,221 ****
  			}
  		} else if(strcmp(p->name, XNAreaNeeded)==0) {
  			if(im_preedit_flag) {
! 				p_rect =  (XRectangle *)(p->value) ;
  				p_rect->x  = p_rect->y  = 0;
  				p_rect->width   = preedit_data->AreaNeeded.width;
  				p_rect->height  = preedit_data->AreaNeeded.height;
  			} else {
  				if(ic->ximp_icpart->proto_mask & XIMP_PRE_AREANEED_MASK) {
! 				        p_rect = (XRectangle *)(p->value) ;
  					p_rect->x  = p_rect->y  = 0;
  					p_rect->width   = ic->core.preedit_attr.area_needed.width;
  					p_rect->height  = ic->core.preedit_attr.area_needed.height;
--- 210,226 ----
  			}
  		} else if(strcmp(p->name, XNAreaNeeded)==0) {
  			if(im_preedit_flag) {
! 				p_rect = (XRectangle *)Xmalloc(sizeof(XRectangle));
! 				xptr = (XPointer *)p->value;
! 				*xptr = (XPointer)p_rect;
  				p_rect->x  = p_rect->y  = 0;
  				p_rect->width   = preedit_data->AreaNeeded.width;
  				p_rect->height  = preedit_data->AreaNeeded.height;
  			} else {
  				if(ic->ximp_icpart->proto_mask & XIMP_PRE_AREANEED_MASK) {
! 					p_rect = (XRectangle *)Xmalloc(sizeof(XRectangle));
! 					xptr = (XPointer *)p->value;
! 					*xptr = (XPointer)p_rect;
  					p_rect->x  = p_rect->y  = 0;
  					p_rect->width   = ic->core.preedit_attr.area_needed.width;
  					p_rect->height  = ic->core.preedit_attr.area_needed.height;
***************
*** 226,237 ****
  			}
  		} else if(strcmp(p->name, XNSpotLocation)==0) {
  			if(im_preedit_flag) {
! 			        p_point = (XPoint *)(p->value);
  				p_point->x = preedit_data->SpotLocation.x;
  				p_point->y = preedit_data->SpotLocation.y;
  			} else {
  				if(ic->ximp_icpart->proto_mask & XIMP_PRE_SPOTL_MASK) {
! 				        p_point = (XPoint *)(p->value);
  					p_point->x = ic->core.preedit_attr.spot_location.x;
  					p_point->y = ic->core.preedit_attr.spot_location.y;
  				} else {
--- 231,246 ----
  			}
  		} else if(strcmp(p->name, XNSpotLocation)==0) {
  			if(im_preedit_flag) {
! 				p_point = (XPoint *)Xmalloc(sizeof(XPoint));
! 				xptr = (XPointer *)p->value;
! 				*xptr = (XPointer)p_point;
  				p_point->x = preedit_data->SpotLocation.x;
  				p_point->y = preedit_data->SpotLocation.y;
  			} else {
  				if(ic->ximp_icpart->proto_mask & XIMP_PRE_SPOTL_MASK) {
! 					p_point = (XPoint *)Xmalloc(sizeof(XPoint));
! 					xptr = (XPointer *)p->value;
! 					*xptr = (XPointer)p_point;
  					p_point->x = ic->core.preedit_attr.spot_location.x;
  					p_point->y = ic->core.preedit_attr.spot_location.y;
  				} else {
***************
*** 391,396 ****
--- 400,406 ----
  	int		 im_font_flag    = 0;
  	Ximp_StatusPropRec	*status_data;
  	XIMCallback 	*p_callback;
+ 	XPointer	*xptr;
  
  	if(((Ximp_XIM)ic->core.im)->ximp_impart->inputserver) {
  		for(mask = 0, p = vl; p->name != NULL; p++) {
***************
*** 446,458 ****
  			}
  		} else if(strcmp(p->name, XNAreaNeeded)==0) {
  			if(im_status_flag) {
! 				p_rect =  (XRectangle *)(p->value) ;
  				p_rect->x  = p_rect->y  = 0;
  				p_rect->width   = status_data->AreaNeeded.width;
  				p_rect->height  = status_data->AreaNeeded.height;
  			} else {
  				if(ic->ximp_icpart->proto_mask & XIMP_STS_AREANEED_MASK) {
! 					p_rect =  (XRectangle *)(p->value) ;
  					p_rect->x  = p_rect->y  = 0;
  					p_rect->width   = ic->core.status_attr.area_needed.width;
  					p_rect->height  = ic->core.status_attr.area_needed.height;
--- 456,472 ----
  			}
  		} else if(strcmp(p->name, XNAreaNeeded)==0) {
  			if(im_status_flag) {
! 				p_rect = (XRectangle *)Xmalloc(sizeof(XRectangle));
! 				xptr = (XPointer *)p->value;
! 				*xptr = (XPointer)p_rect;
  				p_rect->x  = p_rect->y  = 0;
  				p_rect->width   = status_data->AreaNeeded.width;
  				p_rect->height  = status_data->AreaNeeded.height;
  			} else {
  				if(ic->ximp_icpart->proto_mask & XIMP_STS_AREANEED_MASK) {
! 					p_rect = (XRectangle *)Xmalloc(sizeof(XRectangle));
! 					xptr = (XPointer *)p->value;
! 					*xptr = (XPointer)p_rect;
  					p_rect->x  = p_rect->y  = 0;
  					p_rect->width   = ic->core.status_attr.area_needed.width;
  					p_rect->height  = ic->core.status_attr.area_needed.height;
*** /tmp/d09756	Tue Mar  3 11:24:01 1992
--- lib/X/Ximp/XimpRm.c	Tue Mar  3 11:04:09 1992
***************
*** 1,4 ****
! /* $XConsortium: XimpRm.c,v 1.2 91/10/07 17:50:27 rws Exp $ */
  /******************************************************************
  
                Copyright 1991, by FUJITSU LIMITED
--- 1,4 ----
! /* $XConsortium: XimpRm.c,v 1.3 92/03/03 11:03:30 rws Exp $ */
  /******************************************************************
  
                Copyright 1991, by FUJITSU LIMITED
***************
*** 124,130 ****
  	XColor		 screen_def, exact_def;
  	int		 num;
  
! 	im = (Ximp_XIM)XIMOfIC(ic);
  	if(im->core.rdb == NULL)
  		return;
  
--- 124,130 ----
  	XColor		 screen_def, exact_def;
  	int		 num;
  
! 	im = (Ximp_XIM)XIMOfIC((XIC)ic);
  	if(im->core.rdb == NULL)
  		return;
  

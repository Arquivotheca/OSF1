Path: news!news.crl.dec.com!pa.dec.com!nobody
Message-Id: <9205282003.AA21141@alex.lcs.mit.edu>
To: fix-trackers@expo.lcs.mit.edu
Subject: (seq: 2575) close XBUG #5291: fontserver: packGlyphs can overwrite memory
Date: Thu, 28 May 92 16:03:46 EDT
From: Stephen Gildea <gildea@expo.lcs.mit.edu>
Distribution: dec
X-Mailing-List: fix-trackers@expo.lcs.mit.edu
X-Disclaimer: This message originated from a mailing list outside of Digital.
Newsgroups: dec.mail.lists.x.fix-trackers
Approved: news@usenet.pa.dec.com

        Subject: fontserver: packGlyphs can overwrite memory
        ### bug number:   5291
        ### area:         fontserver
        ### severity:     high

This patch also cleans up some lint.

*** /tmp/da21082	Thu May 28 15:59:57 1992
--- fonts/server/difs/charinfo.c	Thu May 28 15:59:44 1992
***************
*** 1,21 ****
! /* $XConsortium: charinfo.c,v 1.5 92/05/15 12:01:05 gildea Exp $ */
  /*
   * Copyright 1990, 1991 Network Computing Devices;
   * Portions Copyright 1987 by Digital Equipment Corporation and the
   * Massachusetts Institute of Technology
   *
!  * Permission to use, copy, modify, and distribute this software and its
!  * documentation for any purpose and without fee is hereby granted, provided
   * that the above copyright notice appear in all copies and that both that
   * copyright notice and this permission notice appear in supporting
!  * documentation, and that the names of Network Computing Devices, Digital
!  * or MIT not be used in advertising or publicity pertaining to distribution
   * of the software without specific, written prior permission.
   *
!  * NETWORK COMPUTING DEVICES, DIGITAL AND MIT DISCLAIM ALL WARRANTIES WITH
   * REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL NETWORK COMPUTING DEVICES,
!  * DIGITAL OR MIT BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
   * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
   * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
   * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
--- 1,21 ----
! /* $XConsortium: charinfo.c,v 1.6 92/05/28 15:57:19 gildea Exp $ */
  /*
   * Copyright 1990, 1991 Network Computing Devices;
   * Portions Copyright 1987 by Digital Equipment Corporation and the
   * Massachusetts Institute of Technology
   *
!  * Permission to use, copy, modify, distribute, and sell this software and
!  * its documentation for any purpose is hereby granted without fee, provided
   * that the above copyright notice appear in all copies and that both that
   * copyright notice and this permission notice appear in supporting
!  * documentation, and that the names of Network Computing Devices, Digital or
!  * M.I.T. not be used in advertising or publicity pertaining to distribution
   * of the software without specific, written prior permission.
   *
!  * NETWORK COMPUTING DEVICES, DIGITAL AND M.I.T. DISCLAIM ALL WARRANTIES WITH
   * REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL NETWORK COMPUTING DEVICES,
!  * DIGITAL OR M.I.T. BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
   * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
   * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
   * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
***************
*** 35,40 ****
--- 35,43 ----
  #define FSMD_H
  #include "FSproto.h"
  
+ extern void TwoByteSwap();
+ extern void FourByteSwap();
+ 
  #define GLWIDTHBYTESPADDED(bits,nbytes) \
  	((nbytes) == 1 ? (((bits)+7)>>3)        /* pad to 1 byte */ \
  	:(nbytes) == 2 ? ((((bits)+15)>>3)&~1)  /* pad to 2 bytes */ \
***************
*** 63,69 ****
      CharInfoPtr	*xchars, *xci;
      int		nchars;
      FontInfoPtr pinfo = &pfont->info;
!     int		r, c;
      unsigned char   ch[2];
      int         firstCol = pinfo->firstCol;
      int         firstRow = pinfo->firstRow;
--- 66,72 ----
      CharInfoPtr	*xchars, *xci;
      int		nchars;
      FontInfoPtr pinfo = &pfont->info;
!     unsigned int r, c;
      unsigned char   ch[2];
      int         firstCol = pinfo->firstCol;
      int         firstRow = pinfo->firstRow;
***************
*** 183,189 ****
      unsigned long size;
      fsCharInfo *ci,
      *pci;
-     fsRange    *rp;
      CharInfoPtr	*xchars, *xcharsFree, xci;
      int		nchars;
      int		err;
--- 186,191 ----
***************
*** 239,257 ****
      pointer    *data;
      int		*freeData;
  {
-     unsigned long start,
-     end;
      int         i;
      fsOffset	*lengths, *l;
      unsigned long size = 0;
      pointer     gdata,
      gd;
-     long        ch;
      int         bitorder, byteorder, scanlinepad, scanlineunit, mappad;
      int		height, dstbpr, charsize;
      int		dst_off, src_off;
      Bool	contiguous, reformat;
-     fsRange    *rp = range;
      int		nchars;
      int         src_glyph_pad = pfont->glyph;
      int         src_bit_order = pfont->bit;
--- 241,255 ----
***************
*** 261,274 ****
      int		min_left, max_right;
      int		srcbpr;
      int		lshift = 0, rshift = 0, dst_left_bytes = 0, src_left_bytes = 0;
!     unsigned char   *src;
!     unsigned char   *dst;
      unsigned char   bits1, bits2;
      int		    width;
      int		    src_extra;
      int		    dst_extra;
      int		    r, w;
-     fsRange	allRange;
      CharInfoPtr	*bitChars, *bitCharsFree, bitc;
      CharInfoPtr	*inkChars, *inkCharsFree = 0, inkc;
      FontInfoPtr	pinfo = &pfont->info;
--- 259,271 ----
      int		min_left, max_right;
      int		srcbpr;
      int		lshift = 0, rshift = 0, dst_left_bytes = 0, src_left_bytes = 0;
!     unsigned char   *srcp;
!     unsigned char   *dstp;
      unsigned char   bits1, bits2;
      int		    width;
      int		    src_extra;
      int		    dst_extra;
      int		    r, w;
      CharInfoPtr	*bitChars, *bitCharsFree, bitc;
      CharInfoPtr	*inkChars, *inkCharsFree = 0, inkc;
      FontInfoPtr	pinfo = &pfont->info;
***************
*** 417,429 ****
  
  	/* start address for the destination of bits for this char */
  
! 	dst = gd;
  
  	/* adjust destination and calculate shift offsets */
  	switch (mappad) {
  	case BitmapFormatImageRectMax:
  	    /* leave the first padded rows blank */
! 	    dst += dstbpr * (max_ascent - inkm->ascent);
  	    /* fall thru */
  	case BitmapFormatImageRectMaxWidth:
  	    dst_off = inkm->leftSideBearing - min_left;
--- 414,426 ----
  
  	/* start address for the destination of bits for this char */
  
! 	dstp = gd;
  
  	/* adjust destination and calculate shift offsets */
  	switch (mappad) {
  	case BitmapFormatImageRectMax:
  	    /* leave the first padded rows blank */
! 	    dstp += dstbpr * (max_ascent - inkm->ascent);
  	    /* fall thru */
  	case BitmapFormatImageRectMaxWidth:
  	    dst_off = inkm->leftSideBearing - min_left;
***************
*** 435,447 ****
  	}
  
  	srcbpr = GLYPH_SIZE (bitc, src_glyph_pad);
! 	src = (unsigned char *) bitc->bits;
  
  	/* adjust source */
  	src_off = 0;
  	if (inkm != bitm)
  	{
! 	    src += (bitm->ascent - inkm->ascent) * srcbpr;
  	    src_off = inkm->leftSideBearing - bitm->leftSideBearing;
  	}
  
--- 432,444 ----
  	}
  
  	srcbpr = GLYPH_SIZE (bitc, src_glyph_pad);
! 	srcp = (unsigned char *) bitc->bits;
  
  	/* adjust source */
  	src_off = 0;
  	if (inkm != bitm)
  	{
! 	    srcp += (bitm->ascent - inkm->ascent) * srcbpr;
  	    src_off = inkm->leftSideBearing - bitm->leftSideBearing;
  	}
  
***************
*** 467,486 ****
  	{
  	    if (srcbpr == dstbpr && src_left_bytes == dst_left_bytes)
  	    {
! 		r = (bitm->ascent + bitm->descent) * width;
! 		bcopy (src, dst, r);
! 		dst += r;
  	    }
  	    else
  	    {
! 		for (r = bitm->ascent + bitm->descent; r; r--)
  		{
! 		    dst += dst_left_bytes;
! 		    src += src_left_bytes;
  		    for (w = width; w; w--)
! 			*dst++ = *src++;
! 		    dst += dst_extra;
! 		    src += src_extra;
  		}
  	    }
  	}
--- 464,483 ----
  	{
  	    if (srcbpr == dstbpr && src_left_bytes == dst_left_bytes)
  	    {
! 		r = (inkm->ascent + inkm->descent) * width;
! 		bcopy (srcp, dstp, r);
! 		dstp += r;
  	    }
  	    else
  	    {
! 		for (r = inkm->ascent + inkm->descent; r; r--)
  		{
! 		    dstp += dst_left_bytes;
! 		    srcp += src_left_bytes;
  		    for (w = width; w; w--)
! 			*dstp++ = *srcp++;
! 		    dstp += dst_extra;
! 		    srcp += src_extra;
  		}
  	    }
  	}
***************
*** 505,518 ****
  		    src_extra--;
  	    }
  	    
! 	    for (r = bitm->ascent + bitm->descent; r; r--)
  	    {
! 		dst += dst_left_bytes;
! 		src += src_left_bytes;
  		bits2 = 0;
  		/* fetch first part of source when necessary */
  		if (dst_off < src_off)
! 		    bits2 = *src++;
  		/*
   		 * XXX I bet this does not work when
  		 * src_bit_order != src_byte_order && scanlineunit > 1
--- 502,515 ----
  		    src_extra--;
  	    }
  	    
! 	    for (r = inkm->ascent + inkm->descent; r; r--)
  	    {
! 		dstp += dst_left_bytes;
! 		srcp += src_left_bytes;
  		bits2 = 0;
  		/* fetch first part of source when necessary */
  		if (dst_off < src_off)
! 		    bits2 = *srcp++;
  		/*
   		 * XXX I bet this does not work when
  		 * src_bit_order != src_byte_order && scanlineunit > 1
***************
*** 519,533 ****
  		 */
  		for (w = width; w; w--)
  		{
! 		    bits1 = *src++;
  		    if (src_bit_order == MSBFirst)
  		    {
! 			*dst++ = MSBBitRight(bits1, rshift) |
  				 MSBBitLeft (bits2, lshift);
  		    }
  		    else
  		    {
! 			*dst++ = LSBBitRight(bits1, rshift) |
  				 LSBBitLeft (bits2, lshift);
  		    }
  		    bits2 = bits1;
--- 516,530 ----
  		 */
  		for (w = width; w; w--)
  		{
! 		    bits1 = *srcp++;
  		    if (src_bit_order == MSBFirst)
  		    {
! 			*dstp++ = MSBBitRight(bits1, rshift) |
  				 MSBBitLeft (bits2, lshift);
  		    }
  		    else
  		    {
! 			*dstp++ = LSBBitRight(bits1, rshift) |
  				 LSBBitLeft (bits2, lshift);
  		    }
  		    bits2 = bits1;
***************
*** 536,547 ****
  		if (dst_extra > 0)
  		{
  		    if (src_bit_order == MSBFirst)
! 			*dst = MSBBitLeft (bits2, lshift);
  		    else
! 			*dst = LSBBitLeft (bits2, lshift);
  		}
! 		dst += dst_extra;
! 		src += src_extra;
  	    }
  	}
  	/* skip the amount we just filled in */
--- 533,544 ----
  		if (dst_extra > 0)
  		{
  		    if (src_bit_order == MSBFirst)
! 			*dstp = MSBBitLeft (bits2, lshift);
  		    else
! 			*dstp = LSBBitLeft (bits2, lshift);
  		}
! 		dstp += dst_extra;
! 		srcp += src_extra;
  	    }
  	}
  	/* skip the amount we just filled in */

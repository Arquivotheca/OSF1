/*
*
* |-----------------------------------------------------------|
* | Copyright (c) 1991 MIPS Computer Systems Inc.             |
* | All Rights Reserved                                       |
* |-----------------------------------------------------------|
* |          Restricted Rights Legend                         |
* | Use duplication or disclosure by the Government is        |
* | subject to restrictions as set forth in                   |
* | subparagraph (c)(1)(ii) of the Rights in Technical        |
* | Data and Computer Software Clause of DFARS 252.227-7013.  |
* |         MIPS Computer Systems Inc.                        |
* |         950 DeGuigne Avenue                               |
* |         Sunnyvale CA 94086                                |
* |-----------------------------------------------------------|
*/
#most_used
quit[!]                        - quit dbx
run arg1 arg2 ... < f1 >& f2   - begin execution of the program
stop at <line>                 - suspend execution at the line
[n] cont <signal>              - continue with signal
return                         - continue until the current procedure returns
print <exp> ...                - print the value of the expressions
printf "string", exp, ...      - print expressions using format string(C)
where [n]                      - print currently active procedures (stack trace)
status                         - print trace/stop/record's in effect
func <proc>                    - move to activation level of <proc>
<exp>[/ | ?]<count><format>    - display count number of formatted memory items
file <file>                    - change current file to file
list <exp1>,<exp2>	       - list source lines from <exp1> to <exp2>
list <exp>:<int>               - list source lines at <exp> for <int> lines
sh <shell command>             - perform shell command


#quit
quit[!]                        - quit dbx
#alias
alias			       - print aliases
alias name "string"            - set name to alias "string"
alias name(arg1, ...) "string" - set name to alias "string"
unalias <name>                 - unset alias for name
#record
record input <file>            - record input into file 
record output <file>           - record output into file
#playback
playback input <file>          - read debugger commands from file
playback output <file>         - playback record file
#history
history                        - display previous commands to debugger
				 (see $lines)
!<int>                         - invoke <int>'th from beginning command
!-<int>                        - invoke <int>'th from last command
!<string>                      - invoke last command beginning with str
#lineedit
setenv LINEEDIT		       - set in C shell before invoking dbx.  Enables
				 line editing capabilities described in csh(1).
^P, ^E, ^F, ^A, ^B, ^D, ^N, ...- shell edit line capabilities
command ; command ...          - multiple debugger commands per line
\n                             - null line repeats last command
<string>^Z                     - symbol name completion


#run
run arg1 arg2 ... < f1 >& f2   - begin execution of the program
#rerun
rerun                          - restart execution of the program
#stop
stop at			       - stop at current line
stop at <line>                 - suspend execution at the line
stop in <proc>                 - suspend execution when <proc> is called
stop if <exp>                  - suspend execution if the <exp> is true
stop at <line> if <exp>        - suspend execution at the line
stop in <proc> if <exp>        - suspend execution when <proc> is called
stop <var>                     - suspend execution when <var> changed
stop <var> at <line>           - suspend execution at <line> when <var> changed
stop <var> in <proc>           - suspend execution when <var> changed within 
                                 <proc>
stop                           - suspend execution in a when statement
#step
step <int>                     - single step n lines (assumes 1 for <int>)
#next
next <int>                     - step over next line n times (assumes 1)
#trace
trace <exp>                    - print <exp> when it changes
trace <exp> at <line>          - print <exp> when <line> is reached
trace <exp> in <proc>          - print <exp> when call <proc>
trace <exp> at <line> if <exp> - print <exp> when <line> is reached and <exp>
trace <exp> in <proc> if <exp> - print <exp> when call <proc> and <exp>
#delete
delete <int> ...               - remove trace, stop or record of given number
delete all		       - remove all trace, stop or record
delete *		       - remove all trace, stop or record
#catch
catch                          - print all caught signal
catch <signal>                 - stop when signal <int> found
#ignore
ignore                         - print all ignored signals
ignore <signal>                - ignore signal <int>
#cont
[n] cont                       - continue execution
[n] cont <signal>              - continue with signal
cont to <line>                 - continue until <line> is reached
				(temporary breakpoint)
cont in <proc>                 - continue until <proc> is reached  (see above)
cont <signal> to <line>        - continue with signal until <line> (see above)
cont <signal> in <proc>        - continue with signal until <proc> (see above)
#return
return                         - continue until the current procedure returns
return <proc>                  - continue until return to <proc>
#when
when <exp> { <command_list> }  - when <exp> is true, execute command_list
when at <line>{<command_list>} - when reach <line>, execute command_list
when in <proc>{<command_list>} - when reach <proc>, execute command_list
#goto
goto <line>	               - goto <line> and continue execution


#print
print <exp> ...                - print the value of the expressions
#printx
printx <exp> ...               - print the value of the expressions in hex
#printo
printo <exp> ...               - print the value of the expressions in octal
#printd
printd <exp> ...               - print the value of the expressions in decimal
#printf
printf "string", exp, ...      - print expressions using C format descriptor
				 strings
#printregs
printregs                      - print all the register values out
#where
where [n]                      - print currently active procedures
#status
status                         - print trace/stop/record's in effect
#whatis
whatis <name>                  - print the declaration of the name
#which
which <name>                   - print which version of name is being used
#whereis
whereis <name>                 - print all versions of name
#assign
assign <exp> = <exp>           - change program variable
#tag
tag tagname		       - sets current file/line to location specified
				 by tagname.  See ctags(1) for info on tags.
tagvalue (tagname)	       - returns the value of tagname
#up
up <exp>                       - move up <exp> activation levels in the stack
#down
down <exp>                     - move down <exp> activation levels in the stack
#func
func <exp>                     - move to <exp> activation level
func <proc>                    - move to activation level of <proc>
#dump
dump <func>                    - dump variables for current or named proc
dump .			       - dump variables for all procs on the stack
#display
<exp>[/ | ?]<count><format>    - display count number of formatted memory items
.[/ | ?]		       - display next/prev group of memory
formats:
d				- print 2 bytes in decimal
dd				- print 4 bytes in decimal
D				- print 8 bytes in decimal
o				- print 2 bytes in octal
oo				- print 4 bytes in octal
O				- print 8 bytes in octal
x				- print 2 bytes in hexadecimal
xx				- print 4 bytes in hexadecimal
X				- print 8 bytes in hexadecimal
b				- print 1 byte in octal
c				- print 1 byte as a character
s				- print a string of characters, ending in null
f				- print single precision real number
g				- print double precision real number
n				- use expression type to determine format
i				- print machine instructions

#list
list <exp>,<exp>               - list source lines from <exp> to <exp>
list <exp>:<int>               - list source lines at <exp> for <int> lines
list <exp>                     - list lines at <exp> for $listwindow lines
list                           - list lines at $cursrcline for $listwindow lines
#search
/<string>                      - look for string in current file
?<string>                      - look (backward) for string in current file
<exp>[/ | ?]<count>M <value> <mask> - look through <count> 64-bit memory
				 locations, anded with <mask>, for <value>
#edit
edit                           - invoke editor on current file
edit <file>                    - invoke editor on file
#file
file                           - print current file
file <file>                    - change current file to file
#use
use                            - print list of source directories
use <dir> ...                  - replace source directories with given list


#set
set			       - display set variables
set <name> = <exp>             - define and assign <exp> to debugger variable
unset <name>                   - unset debugger variable
#setenv
setenv name "string"	       - set environment variable <name> to <string>
#sh
sh <shell command>             - perform shell command


#stopi
stopi at <address>             - suspend execution at the address
stopi in <proc>                - suspend execution when <proc> is called
stopi if <exp>                 - suspend execution if the <exp> is true
stopi at <address> if <exp>    - suspend execution at the address if <exp>
stopi in <proc> if <exp>       - suspend when <proc> is called if <exp>
#conti
[n] conti <signal>             - continue with signal
conti to <address>             - continue until <address> is reached 
                                  (temporary breakpoint)
conti in <proc>                - continue until <proc> is reached  (see above)
conti <signal> to <address>    - continue with signal until <address>(see above)
conti <signal> in <proc>       - continue with signal until <proc> (see above)
#stepi
stepi <exp>                    - single step <exp> assembly instructions
#nexti
nexti <exp>                    - step over next instruction <exp>times(see next)
#tracei
tracei <exp>                    - print <exp> when it changes
tracei <exp> at <address>       - print <exp> when <address> is reached
tracei <exp> in <proc>          - print <exp> when call <proc>
tracei <exp> at <address> if <exp>-print <exp> when at <address> and <exp>
tracei <exp> in <proc> if <exp> - print <exp> when call <proc> and <exp>
#listobj
listobj				- list the objects being used in shared env.
addobj <name1> <name2> ...	- add the named objects' symbol tables into
				  dbx for debugging purpose
#enable
enable all			- enable all disabled events (breakpoints)
enable <int>, <int>,...		- enable events of specified numbers
#disable
disable all			- disable all events (breakpoints)
disable <int>, <int>,...	- disable events of specified numbers

#kernel
kps				- do a ps on kernel /dev/mem or core
#tlist
tlist				- list threads
#tset
tset <exp>			- set the current thread
#call
call <func>(<param>,<param>,...)- call <func> passing parameters <param>
print <func>(<params>)		- print return value of <func>
#attach
attach <pid>			- attach to running process <pid>
#detach
detach				- detach from (and continue running) the 
				  current process.
#variable
$addrfmt	printf format string dbx prints addresses with 
$byteaccess	non-0 => dbx accesses memory items less than 4 bytes with 
		special ptrace requests, used for intrepid system development. 
		default - 0.
$casesense	0 => ignore case when searching for a specific variable 
		name. set to non-0 if you have two variables with same 
		name but different case.  default-0.
$curevent	this is the current event (breakpoint,record,etc) that was 
		added or encountered. set only by dbx.
$curline	current line we're looking at. set to the middle of windows 
		of lines.  set only by dbx.
$cursrcline	one beyond last  line we looked at  set only by dbx.  
$curpc		current instruction address we're looking at akin to curline 
$datacache	non-0 => dbx caches data from the process we're debugging so 
		repeated access is quick; system developer may want to turn 
		this off if their memory is changed asynchronously. default - 1.
$defin		internal use by dbx 
$defout		internal use by dbx 
$dispix		when debugging pixie code, if you want to see the real 
		instructions being executed set this to non-0; default - 0.
$hexchars	output chars in hex (set, unset)
$hexin		input constants are assumed in hex (set, unset)
$hexints	output integers in hex (set, unset)
$hexstrings	output strings in hex(set, unset)
$historyevent	last history line number. set by dbx 
$kdebug_dbgtty	terminal on kdebug gateway system used for debug messages
$kdebug_host	host name of kdebug gateway system
$kdebug_line	port name from /etc/remote used to connect to kdebug test system
$lines		number of lines for history. default - 20 
$listwindow	how big the window should be on a "list" command. default - 10 
$main		name of procedure dbx start out in. default - "main" 
$maxstrlen	maximum characters dbx will print out for a string. 
		default - 128.
$octin		input constants are assumed in octal (set, unset)
$octints	output integers in octal (set, unset)
$printwhilestep	non-0 implies print out every line/inst for the "step[i] n" 
		command. default - 0 => only print last line/inst stepped to.
$page		0 => paginate dbx output accessing to continue at the end of 
		each page. non-0 => continuous output. default - 1.
$pagewindow	number of lines in a page, default - 22 (room left for 
		continuation query).
$pimode		print input while playing it back if this is non-0 otherwise 
		don't default - 0.
$printdata	if non-0 print contents of registers used next to each 
		instruction displayed. default - 0.
$printwide	if non-0 print variable contents in a horizontal format 
		rather than vertical. default - 0.
$prompt		this contains the dbx prompt string. default "(dbx)" 
$readtextfile	if non-0 read all instructions from the text file. default - 1. 
$repeatmode	if non-0 repeat last command when an empty line is entered. 
		default - 1 
$regstyle	0 => print out regs in normal format (r0,r1,...r31). 1 => 
		print out regs in other format (zero, at, v0, v1,...). 
		default - 0.
$rimode		if non-0 record input while recording output. default - 0. 
$sigtramp	contains name of signal handler wrapper routine. on BSD it is 
		"sigvec" and on SYSV "sigtramp".
$tagfile	contains the name of the file to search for the tag
		command and tagvalue macro.
$traploops	maximum number of consecutive invocations of a SIGTRAP handler.
		default - 3.
$use_sockets	if set, use sockets for sable, else use namedpipes
     
#register
$pc - current user pc
$fp - frame pointer register
$sp - current value of stack pointer
$rn - register n
$fn - floating point register


#builtin
$address - pointer type
$unsigned - integer type
$integer - integer type
$char - char type
$boolean - boolean type
$real - real type
false = 0		false and true values
true = 1
nil = 0  		Nil


#expression
DEBUGGER OPERATORS     #<int> (address of line <int>)

C LANGUAGE - UNARY     ! & + - * sizeof()
C LANGUAGE - BINARY    % << >> ^ == <= >= != < > & && | 
		       || + - * / [] -> .

PASCAL - UNARY         not ^ + -
PASCAL - BINARY        mod = <= >= <> < > and or + - * / div [] .

FORTRAN - UNARY        + -
FORTRAN - BINARY       + - * /
